ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 14 14                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 35 57                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 35 80                  318         .word      app_space ; FLASH free space pointer 
      000041 35 57                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1B 84         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 41         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 06 29         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0B B1         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 08 75         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 76         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E2         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DD         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 06 29         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0B B1         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8A         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 06 29         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 D9         [ 4]  465         call TOKEN 
      00012C CD 06 19         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 D6         [ 4]  469         call NAMEQ
      000137 CD 07 CC         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F                        473         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1E 80         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 D9         [ 4]  488         call TOKEN
      00015D CD 06 19         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000163 02 0F                  491         .word FORGET2
      000165 CD 12 D6         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CC         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 06 19         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 35 80                  499         .word app_space 
      000178 CD 06 29         [ 4]  500         call SWAPP 
      00017B CD 09 10         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 06 29         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 20 83         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 07 8E         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 06 19         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 06 19         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 D2         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 06 19         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 07 62         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 07 8E         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 06 41         [ 4]  525         call OVER 
      0001B5 CD 08 FA         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 D2         [ 4]  532         call SUBB 
      0001C5 CD 07 7E         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1C B3         [ 4]  535         call UPDATCP 
      0001CE CC 1C 8A         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 09 10         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 E2         [ 4]  545         call ABORQ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E3 1D                     546         .byte 29
      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 E2         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 E2         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 06 0F         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 19         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0B 93         [ 4]  568         call ONEP ;
      00022E CD 08 3C         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 93         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 19         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 CF                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FA         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 08 3C         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 07 70         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1C CA         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 06 0F         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;  XOR32 algorithm 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        606         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    607 ;local variable 
                           000001   608         SPSAVE=1
                           000002   609         VSIZE=2 
      00027E 52 02            [ 2]  610         sub sp,#VSIZE
      000280 1F 01            [ 2]  611         ldw (SPSAVE,sp),x  
                                    612 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  613         ldw y,x 
      000284 90 FE            [ 2]  614         ldw y,(y)
      000286 90 BF 26         [ 2]  615         ldw YTEMP,y 
      000289 BE 38            [ 2]  616 	ldw x,SEEDX 
      00028B 58               [ 2]  617 	sllw x 
      00028C 58               [ 2]  618 	sllw x 
      00028D 58               [ 2]  619 	sllw x 
      00028E 58               [ 2]  620 	sllw x 
      00028F 58               [ 2]  621 	sllw x 
      000290 9E               [ 1]  622 	ld a,xh 
      000291 B8 38            [ 1]  623 	xor a,SEEDX 
      000293 B7 24            [ 1]  624 	ld XTEMP,a 
      000295 9F               [ 1]  625 	ld a,xl 
      000296 B8 39            [ 1]  626 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  627 	ld XTEMP+1,a 
                                    628 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  629 	ldw x,SEEDY 
      00029C BF 38            [ 2]  630 	ldw SEEDX,x  
                                    631 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  632 	srlw x 
      00029F 9E               [ 1]  633 	ld a,xh 
      0002A0 B8 3A            [ 1]  634 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  635 	ld SEEDY,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A4 9F               [ 1]  636 	ld a,xl 
      0002A5 B8 3B            [ 1]  637 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  638 	ld SEEDY+1,a 
                                    639 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  640 	ldw x,XTEMP 
      0002AB 54               [ 2]  641 	srlw x 
      0002AC 54               [ 2]  642 	srlw x 
      0002AD 54               [ 2]  643 	srlw x 
                                    644 ; x=XTEMP^x 
      0002AE 9E               [ 1]  645 	ld a,xh 
      0002AF B8 24            [ 1]  646 	xor a,XTEMP 
      0002B1 95               [ 1]  647 	ld xh,a 
      0002B2 9F               [ 1]  648 	ld a,xl 
      0002B3 B8 25            [ 1]  649 	xor a,XTEMP+1  
      0002B5 97               [ 1]  650 	ld xl,a 
                                    651 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  652 	xor a,SEEDY+1
      0002B8 97               [ 1]  653 	ld xl,a 
      0002B9 9E               [ 1]  654 	ld a,xh 
      0002BA B8 3A            [ 1]  655 	xor a,SEEDY
      0002BC 95               [ 1]  656 	ld xh,a 
      0002BD BF 3A            [ 2]  657 	ldw SEEDY,x 
                                    658 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  659 	ldw y,YTEMP  
      0002C2 65               [ 2]  660 	divw x,y 
      0002C3 1E 01            [ 2]  661 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  662         ldw (x),y 
      0002C6 5B 02            [ 2]  663         addw sp,#VSIZE 
      0002C8 81               [ 4]  664 	ret 
                                    665 
                                    666 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    668 ;; get millisecond counter 
                                    669 ;; msec ( -- u )
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        671         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  672         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  673         ldw y,MS 
      0002D6 FF               [ 2]  674         ldw (x),y 
      0002D7 81               [ 4]  675         ret 
                                    676 
                                    677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    678 ; suspend execution for u msec 
                                    679 ;  pause ( u -- )
                                    680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        681         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  682         ldw y,x
      0002E2 90 FE            [ 2]  683         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  684         addw y,MS 
      0002E8 8F               [10]  685 1$:     wfi  
      0002E9 90 B3 30         [ 2]  686         cpw y,MS  
      0002EC 26 FA            [ 1]  687         jrne 1$        
      0002EE 1C 00 02         [ 2]  688         addw x,#CELLL 
      0002F1 81               [ 4]  689         ret 
                                    690 
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    692 ; initialize count down timer 
                                    693 ;  TIMER ( u -- )  milliseconds
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        695         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  696         ldw y,x
      0002FC 90 FE            [ 2]  697         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  698         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  699         addw x,#CELLL 
      000304 81               [ 4]  700         ret 
                                    701 
                                    702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    703 ; check for TIMER exiparition 
                                    704 ;  TIMEOUT? ( -- 0|-1 )
                                    705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        706         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  707         clr a
      000311 1D 00 02         [ 2]  708         subw x,#CELLL 
      000314 90 BE 32         [ 2]  709         ldw y,CNTDWN 
      000317 26 01            [ 1]  710         jrne 1$ 
      000319 43               [ 1]  711         cpl a 
      00031A E7 01            [ 1]  712 1$:     ld (1,x),a 
      00031C F7               [ 1]  713         ld (x),a 
      00031D 81               [ 4]  714         ret         
                                    715 
                                    716 ;;;;;;;;;;;;;;;;;;;;;
                                    717 ; reboot MCU 
                                    718 ; REBOOT ( -- )
                                    719 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        720         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000327                          5         reboot:
      000327 CC 00 00         [ 2]  721         jp NonHandledInterrupt
                                    722 
                                    723 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    724 ; compile to flash memory 
                                    725 ; TO-FLASH ( -- )
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        727         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A1         [ 4]  728         call RAMLAST 
      000338 CD 04 E3         [ 4]  729         call AT 
      00033B CD 07 CC         [ 4]  730         call QDUP 
      00033E CD 04 98         [ 4]  731         call QBRAN
      000341 03 64                  732         .word 1$
      000343 CD 13 E2         [ 4]  733         call ABORQ 
      000346 1D                     734         .byte 29
      000347 20 4E 6F 74 20 77 68   735         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  736 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  737         ldw UTFLASH,y
      00036B 81               [ 4]  738         ret 
                                    739 
                                    740 ;;;;;;;;;;;;;;;;;;;;;;
                                    741 ; compile to RAM 
                                    742 ; TO-RAM ( -- )
                                    743 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        744         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  745         clrw y 
      000377 90 BF 20         [ 2]  746         ldw UTFLASH,y 
      00037A 81               [ 4]  747         ret 
                                    748 
                                    749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    750 ;; BAUD RATE constants table
                                    751 ; values to put in BRR1 & BRR2 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        753 baudrate: 
      00037B A0 1B                  754 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  755 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  756 	.byte 0x68,0x3  ; 9600
      000381 34 01                  757 	.byte 0x34,0x1  ; 19200
      000383 11 06                  758 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  759 	.byte 0x8,0xb   ; 115200
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    762 ; BAUD RATE CONSTANTS names 
                                    763 ; 2400 baud  ( -- n )
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        765         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  766 	subw x,#CELLL 
      000391 90 5F            [ 1]  767         clrw y
      000393 FF               [ 2]  768         ldw (x),y
      000394 81               [ 4]  769 	ret
                                    770 
                                    771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    772 ; 4800 baud	
                                    773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        774         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  775         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  776         ldw y,#2 
      0003A3 FF               [ 2]  777         ldw (x),y
      0003A4 81               [ 4]  778         ret 
                                    779 
                                    780 ;;;;;;;;;;;;;;;;;;;;
                                    781 ; 9600 baud
                                    782 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        783         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  784         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  785         ldw y,#4 
      0003B3 FF               [ 2]  786         ldw (x),y 
      0003B4 81               [ 4]  787         ret 
                                    788 ;;;;;;;;;;;;;;
                                    789 ; 19200 baud
                                    790 ;;;;;;;;;;;;;;
      0003B5                        791         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  792         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  793         ldw y,#6 
      0003C4 FF               [ 2]  794         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003C5 81               [ 4]  795         ret 
                                    796 ;;;;;;;;;;;;;;
                                    797 ; 57600 baud  
                                    798 ;;;;;;;;;;;;;;
      0003C6                        799         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  800         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  801         ldw y,#8 
      0003D5 FF               [ 2]  802         ldw (x),y 
      0003D6 81               [ 4]  803         ret 
                                    804 ;;;;;;;;;;;;;;
                                    805 ; 115200 baud 
                                    806 ;;;;;;;;;;;;;;
      0003D7                        807         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  808 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  809         ldw y,#10 
      0003E7 FF               [ 2]  810         ldw (x),y 
      0003E8 81               [ 4]  811         ret 
                                    812 
                                    813 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    814 ;; set UART2 BAUD rate
                                    815 ;	BAUD ( u -- )
                                    816 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        817         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  818 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  819         ldw y,#baudrate 
      0003F7 FF               [ 2]  820         ldw (x),y 
      0003F8 CD 08 3C         [ 4]  821         call PLUS
      0003FB 90 93            [ 1]  822         ldw y,x  
      0003FD 90 FE            [ 2]  823         ldw y,(y)
      0003FF 90 F6            [ 1]  824         ld a,(y)
      000401 88               [ 1]  825         push a 
      000402 90 5C            [ 1]  826         incw y 
      000404 90 F6            [ 1]  827         ld a,(y)
      000406 C7 52 33         [ 1]  828         ld UART_BRR2,a 
      000409 84               [ 1]  829         pop a
      00040A C7 52 32         [ 1]  830         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  831         addw x,#CELLL 
      000410 81               [ 4]  832         ret 
                                    833 
                                    834 ;; Device dependent I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    836 ;       ?RX     ( -- c T | F )
                                    837 ;         Return input byte and true, or false.
                                    838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        839         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  840         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  841         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  842         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  843 	SUBW	X,#2
      000425 E7 01            [ 1]  844         LD     (1,X),A
      000427 7F               [ 1]  845 	CLR	(X)
      000428 90 53            [ 2]  846         CPLW     Y
      00042A                        847 INCH:
      00042A 1D 00 02         [ 2]  848 		SUBW	X,#2
      00042D FF               [ 2]  849         LDW     (X),Y
      00042E 81               [ 4]  850         RET
                                    851 
                                    852 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    853 ;       TX!     ( c -- )
                                    854 ;       Send character c to  output device.
                                    855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        856         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  857         LD     A,(1,X)
      000438 1C 00 02         [ 2]  858 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  859 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  860         LD    UART_DR,A   ;send A
      000443 81               [ 4]  861         RET
                                    862 
                                    863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    864 ;       FC-XON  ( -- )
                                    865 ;       send XON character 
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        867         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  868         subw x,#CELLL 
      000450 7F               [ 1]  869         clr (x)
      000451 A6 11            [ 1]  870         ld a,#XON 
      000453 E7 01            [ 1]  871         ld (1,x),a 
      000455 CD 04 36         [ 4]  872         call EMIT 
      000458 81               [ 4]  873         ret 
                                    874 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    876 ;       FC-XOFF ( -- )
                                    877 ;       Send XOFF character 
                                    878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        879         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  880         subw x,#CELLL 
      000466 7F               [ 1]  881         clr (x)
      000467 A6 13            [ 1]  882         ld a,#XOFF 
      000469 E7 01            [ 1]  883         ld (1,x),a 
      00046B CD 04 36         [ 4]  884         call EMIT 
      00046E 81               [ 4]  885         ret
                                    886 
                                    887 ;; The kernel
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;       doLIT   ( -- w )
                                    891 ;       Push an inline literal.
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        893 DOLIT:
      00046F 1D 00 02         [ 2]  894 	SUBW X,#2
      000472 16 01            [ 2]  895         ldw y,(1,sp)
      000474 90 FE            [ 2]  896         ldw y,(y)
      000476 FF               [ 2]  897         ldw (x),y
      000477 90 85            [ 2]  898         popw y 
      000479 90 EC 02         [ 2]  899         jp (2,y)
                                    900 
                                    901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    902 ;       NEXT    ( -- )
                                    903 ;       Code for  single index loop.
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        905         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  906 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  907 	DECW Y
      000487 2A 07            [ 1]  908 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  909 	POPW Y
      00048B 5B 02            [ 2]  910         addw sp,#2
      00048D 90 EC 02         [ 2]  911         JP (2,Y)
      000490                        912 NEX1:
      000490 17 03            [ 2]  913         LDW (3,SP),Y
      000492 90 85            [ 2]  914         POPW Y
      000494 90 FE            [ 2]  915 	LDW Y,(Y)
      000496 90 FC            [ 2]  916 	JP (Y)
                                    917 
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    919 ;       ?branch ( f -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    920 ;       Branch if flag is zero.
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    922 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        923 QBRAN:	
      000498 90 93            [ 1]  924         LDW Y,X
      00049A 1C 00 02         [ 2]  925 	ADDW X,#2
      00049D 90 FE            [ 2]  926 	LDW Y,(Y)
      00049F 27 13            [ 1]  927         JREQ     BRAN
      0004A1 90 85            [ 2]  928 	POPW Y
      0004A3 90 EC 02         [ 2]  929 	JP (2,Y)
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    932 ;  TBRANCH ( f -- )
                                    933 ;  branch if f==TRUE 
                                    934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    935 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        936 TBRAN: 
      0004A6 90 93            [ 1]  937         LDW Y,X 
      0004A8 1C 00 02         [ 2]  938         ADDW X,#2 
      0004AB 90 FE            [ 2]  939         LDW Y,(Y)
      0004AD 26 05            [ 1]  940         JRNE BRAN 
      0004AF 90 85            [ 2]  941         POPW Y 
      0004B1 90 EC 02         [ 2]  942         JP (2,Y)
                                    943 
                                    944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    945 ;       branch  ( -- )
                                    946 ;       Branch to an inline address.
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    948 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        949 BRAN:
      0004B4 90 85            [ 2]  950         POPW Y
      0004B6 90 FE            [ 2]  951 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  952         JP  (Y)
                                    953 
                                    954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    955 ;       EXECUTE ( ca -- )
                                    956 ;       Execute  word at ca.
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        958         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  959         LDW Y,X
      0004C6 1C 00 02         [ 2]  960 	ADDW X,#2
      0004C9 90 FE            [ 2]  961 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  962         JP   (Y)
                                    963 
                           000001   964 OPTIMIZE = 1
                           000001   965 .if OPTIMIZE 
                                    966 ; remplacement de CALL EXIT par 
                                    967 ; le opcode de RET.
                                    968 ; Voir modification au code de ";"
                           000000   969 .else 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    971 ;       EXIT    ( -- )
                                    972 ;       Terminate a colon definition.
                                    973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    974 ;       _HEADER EXIT,4,"EXIT"
                                    975 EXIT:
                                    976         POPW Y
                                    977         RET
                                    978 .endif 
                                    979 
                                    980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    981 ;       !       ( w a -- )
                                    982 ;       Pop  data stack to memory.
                                    983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        984         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  985         LDW Y,X
      0004D3 90 FE            [ 2]  986         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  987         PUSHW X
      0004D6 EE 02            [ 2]  988         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  989         LDW (Y),X 
      0004DA 85               [ 2]  990         POPW X  
      0004DB 1C 00 04         [ 2]  991         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  992         RET     
                                    993 
                                    994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    995 ;       @       ( a -- w )
                                    996 ;       Push memory location to stack.
                                    997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        998         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1]  999         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1000         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1001         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1002         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1003         RET     
                                   1004 
                                   1005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1006 ;       C!      ( c b -- )
                                   1007 ;       Pop  data stack to byte memory.
                                   1008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1009         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004F0 90 93            [ 1] 1010         LDW Y,X
      0004F2 90 FE            [ 2] 1011 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1012         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1013         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1014 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1015         RET     
                                   1016 
                                   1017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1018 ;       C@      ( b -- c )
                                   1019 ;       Push byte in memory to  stack.
                                   1020 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1021         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1022         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1023         LDW Y,(Y)
      000505 90 F6            [ 1] 1024         LD A,(Y)
      000507 E7 01            [ 1] 1025         LD (1,X),A
      000509 7F               [ 1] 1026         CLR (X)
      00050A 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1030 ;       RP@     ( -- a )
                                   1031 ;       Push current RP to data stack.
                                   1032 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1033         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1034         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1035         SUBW X,#2
      000516 FF               [ 2] 1036         LDW (X),Y
      000517 81               [ 4] 1037         RET     
                                   1038 
                                   1039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1040 ;       RP!     ( a -- )
                                   1041 ;       Set  return stack pointer.
                                   1042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1043         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1044         POPW Y
      000520 90 BF 26         [ 2] 1045         LDW YTEMP,Y
      000523 90 93            [ 1] 1046         LDW Y,X
      000525 90 FE            [ 2] 1047         LDW Y,(Y)
      000527 90 94            [ 1] 1048         LDW SP,Y
      000529 1C 00 02         [ 2] 1049         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00052C 92 CC 26         [ 5] 1050         JP [YTEMP]
                                   1051 
                                   1052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1053 ;       R>      ( -- w )
                                   1054 ;       Pop return stack to data stack.
                                   1055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1056         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1057         SUBW X,#CELLL 
      000537 16 03            [ 2] 1058         LDW Y,(3,SP)
      000539 FF               [ 2] 1059         LDW (X),Y 
      00053A 90 85            [ 2] 1060         POPW Y 
      00053C 5B 02            [ 2] 1061         ADDW SP,#2 
      00053E 90 FC            [ 2] 1062         JP (Y)
                                   1063 
                                   1064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1065 ;       R@      ( -- w )
                                   1066 ;       Copy top of return stack to stack.
                                   1067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1068         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1069         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1070         subw x,#CELLL 
      00054A FF               [ 2] 1071         ldw (x),y 
      00054B 81               [ 4] 1072         ret 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;       LOCAL ( n -- )
                                   1076 ;       reserve n slots on return stack
                                   1077 ;       for local variables 
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1079         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1080         POPW Y  
      000556 90 BF 26         [ 2] 1081         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 E6 01            [ 1] 1082         LD A,(1,X)
      00055B 90 97            [ 1] 1083         LD YL,A 
      00055D A6 02            [ 1] 1084         LD A,#CELLL 
      00055F 90 42            [ 4] 1085         MUL Y,A 
      000561 90 BF 24         [ 2] 1086         LDw XTEMP,Y
      000564 90 96            [ 1] 1087         LDW Y,SP 
      000566 72 B2 00 24      [ 2] 1088         SUBW Y,XTEMP
      00056A 90 94            [ 1] 1089         LDW SP,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00056C 1C 00 02         [ 2] 1090         ADDW X,#CELLL 
      00056F 92 CC 26         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1094 ;       NRDROP ( n -- )
                                   1095 ;       drop n elements from rstack
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000572                       1097         _HEADER NRDROP,6,"NRDROP" 
      000572 05 4E                    1         .word LINK 
                           000574     2         LINK=.
      000574 06                       3         .byte 6  
      000575 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057B                          5         NRDROP:
      00057B 90 85            [ 2] 1098         POPW Y 
      00057D 90 BF 26         [ 2] 1099         LDW YTEMP,Y ; RETURN ADDRESS 
      000580 E6 01            [ 1] 1100         LD A,(1,X)
      000582 90 97            [ 1] 1101         LD YL,A  
      000584 A6 02            [ 1] 1102         LD A,#CELLL 
      000586 90 42            [ 4] 1103         MUL Y,A 
      000588 90 BF 24         [ 2] 1104         LDW XTEMP,Y 
      00058B 90 96            [ 1] 1105         LDW Y,SP 
      00058D 72 B9 00 24      [ 2] 1106         ADDW Y,XTEMP 
      000591 90 94            [ 1] 1107         LDW SP,Y  
      000593 1C 00 02         [ 2] 1108         ADDW X,#CELLL 
      000596 92 CC 26         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1112 ;        ( n -- w)
                                   1113 ;      fetch nth element ofr return stack 
                                   1114 ;      n==0 is same as R@ 
                                   1115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000599                       1116         _HEADER NRAT,3,"NR@"
      000599 05 74                    1         .word LINK 
                           00059B     2         LINK=.
      00059B 03                       3         .byte 3  
      00059C 4E 52 40                 4         .ascii "NR@"
      00059F                          5         NRAT:
      00059F E6 01            [ 1] 1117         LD A,(1,X)
      0005A1 90 97            [ 1] 1118         LD YL,A 
      0005A3 A6 02            [ 1] 1119         LD A,#CELLL 
      0005A5 90 42            [ 4] 1120         MUL Y,A 
      0005A7 90 BF 26         [ 2] 1121         LDW YTEMP,Y 
      0005AA 90 96            [ 1] 1122         LDW Y,SP 
      0005AC 72 A9 00 03      [ 2] 1123         ADDW Y,#3 
      0005B0 72 B9 00 26      [ 2] 1124         ADDW Y,YTEMP 
      0005B4 90 FE            [ 2] 1125         LDW Y,(Y)
      0005B6 FF               [ 2] 1126         LDW (X),Y 
      0005B7 81               [ 4] 1127         RET 
                                   1128 
                                   1129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1130 ;       NR! ( w n --  )
                                   1131 ;       store w on nth position of 
                                   1132 ;       return stack 
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B8                       1134         _HEADER NRSTO,3,"NR!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B8 05 9B                    1         .word LINK 
                           0005BA     2         LINK=.
      0005BA 03                       3         .byte 3  
      0005BB 4E 52 21                 4         .ascii "NR!"
      0005BE                          5         NRSTO:
      0005BE 90 96            [ 1] 1135         LDW Y,SP
      0005C0 72 A9 00 03      [ 2] 1136         ADDW Y,#3 
      0005C4 90 BF 26         [ 2] 1137         LDW YTEMP,Y 
      0005C7 E6 01            [ 1] 1138         LD A,(1,X)
      0005C9 90 97            [ 1] 1139         LD YL,A 
      0005CB A6 02            [ 1] 1140         LD A,#CELLL 
      0005CD 90 42            [ 4] 1141         MUL Y,A 
      0005CF 72 B9 00 26      [ 2] 1142         ADDW Y,YTEMP
      0005D3 89               [ 2] 1143         PUSHW X 
      0005D4 EE 02            [ 2] 1144         LDW X,(2,X)
      0005D6 90 FF            [ 2] 1145         LDW (Y),X
      0005D8 85               [ 2] 1146         POPW X 
      0005D9 1C 00 04         [ 2] 1147         ADDW X,#2*CELLL 
      0005DC 81               [ 4] 1148         RET 
                                   1149 
                                   1150 
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1152 ;       >R      ( w -- )
                                   1153 ;       Push data stack to return stack.
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DD                       1155         _HEADER TOR,COMPO+2,">R"
      0005DD 05 BA                    1         .word LINK 
                           0005DF     2         LINK=.
      0005DF 42                       3         .byte COMPO+2  
      0005E0 3E 52                    4         .ascii ">R"
      0005E2                          5         TOR:
      0005E2 90 85            [ 2] 1156         POPW Y    ;save return addr
      0005E4 90 BF 26         [ 2] 1157         LDW YTEMP,Y
      0005E7 90 93            [ 1] 1158         LDW Y,X
      0005E9 90 FE            [ 2] 1159         LDW Y,(Y)  ; W
      0005EB 90 89            [ 2] 1160         PUSHW Y    ;W >R 
      0005ED 1C 00 02         [ 2] 1161         ADDW X,#2
      0005F0 92 CC 26         [ 5] 1162         JP [YTEMP]
                                   1163 
                                   1164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1165 ;       SP@     ( -- a )
                                   1166 ;       Push current stack pointer.
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F3                       1168         _HEADER SPAT,3,"SP@"
      0005F3 05 DF                    1         .word LINK 
                           0005F5     2         LINK=.
      0005F5 03                       3         .byte 3  
      0005F6 53 50 40                 4         .ascii "SP@"
      0005F9                          5         SPAT:
      0005F9 90 93            [ 1] 1169 	LDW Y,X
      0005FB 1D 00 02         [ 2] 1170         SUBW X,#2
      0005FE FF               [ 2] 1171 	LDW (X),Y
      0005FF 81               [ 4] 1172         RET     
                                   1173 
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1175 ;       SP!     ( a -- )
                                   1176 ;       Set  data stack pointer.
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000600                       1178         _HEADER SPSTO,3,"SP!"
      000600 05 F5                    1         .word LINK 
                           000602     2         LINK=.
      000602 03                       3         .byte 3  
      000603 53 50 21                 4         .ascii "SP!"
      000606                          5         SPSTO:
      000606 FE               [ 2] 1179         LDW     X,(X)     ;X = a
      000607 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1183 ;       DROP    ( w -- )
                                   1184 ;       Discard top stack item.
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1186         _HEADER DROP,4,"DROP"
      000608 06 02                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 04                       3         .byte 4  
      00060B 44 52 4F 50              4         .ascii "DROP"
      00060F                          5         DROP:
      00060F 1C 00 02         [ 2] 1187         ADDW X,#2     
      000612 81               [ 4] 1188         RET     
                                   1189 
                                   1190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1191 ;       DUP     ( w -- w w )
                                   1192 ;       Duplicate  top stack item.
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000613                       1194         _HEADER DUPP,3,"DUP"
      000613 06 0A                    1         .word LINK 
                           000615     2         LINK=.
      000615 03                       3         .byte 3  
      000616 44 55 50                 4         .ascii "DUP"
      000619                          5         DUPP:
      000619 90 93            [ 1] 1195 	LDW Y,X
      00061B 1D 00 02         [ 2] 1196         SUBW X,#2
      00061E 90 FE            [ 2] 1197 	LDW Y,(Y)
      000620 FF               [ 2] 1198 	LDW (X),Y
      000621 81               [ 4] 1199         RET     
                                   1200 
                                   1201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1202 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1203 ;       Exchange top two stack items.
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000622                       1205         _HEADER SWAPP,4,"SWAP"
      000622 06 15                    1         .word LINK 
                           000624     2         LINK=.
      000624 04                       3         .byte 4  
      000625 53 57 41 50              4         .ascii "SWAP"
      000629                          5         SWAPP:
      000629 90 93            [ 1] 1206         LDW Y,X
      00062B 90 FE            [ 2] 1207         LDW Y,(Y)
      00062D 90 89            [ 2] 1208         PUSHW Y  
      00062F 90 93            [ 1] 1209         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000631 90 EE 02         [ 2] 1210         LDW Y,(2,Y)
      000634 FF               [ 2] 1211         LDW (X),Y
      000635 90 85            [ 2] 1212         POPW Y 
      000637 EF 02            [ 2] 1213         LDW (2,X),Y
      000639 81               [ 4] 1214         RET     
                                   1215 
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1217 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1218 ;       Copy second stack item to top.
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1220         _HEADER OVER,4,"OVER"
      00063A 06 24                    1         .word LINK 
                           00063C     2         LINK=.
      00063C 04                       3         .byte 4  
      00063D 4F 56 45 52              4         .ascii "OVER"
      000641                          5         OVER:
      000641 1D 00 02         [ 2] 1221         SUBW X,#2
      000644 90 93            [ 1] 1222         LDW Y,X
      000646 90 EE 04         [ 2] 1223         LDW Y,(4,Y)
      000649 FF               [ 2] 1224         LDW (X),Y
      00064A 81               [ 4] 1225         RET     
                                   1226 
                                   1227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1228 ;       0<      ( n -- t )
                                   1229 ;       Return true if n is negative.
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064B                       1231         _HEADER ZLESS,2,"0<"
      00064B 06 3C                    1         .word LINK 
                           00064D     2         LINK=.
      00064D 02                       3         .byte 2  
      00064E 30 3C                    4         .ascii "0<"
      000650                          5         ZLESS:
      000650 A6 FF            [ 1] 1232         LD A,#0xFF
      000652 90 93            [ 1] 1233         LDW Y,X
      000654 90 FE            [ 2] 1234         LDW Y,(Y)
      000656 2B 01            [ 1] 1235         JRMI     ZL1
      000658 4F               [ 1] 1236         CLR A   ;false
      000659 F7               [ 1] 1237 ZL1:    LD     (X),A
      00065A E7 01            [ 1] 1238         LD (1,X),A
      00065C 81               [ 4] 1239 	RET     
                                   1240 
                                   1241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1242 ;       0= ( n -- f )
                                   1243 ;   n==0?
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065D                       1245         _HEADER ZEQUAL,2,"0="
      00065D 06 4D                    1         .word LINK 
                           00065F     2         LINK=.
      00065F 02                       3         .byte 2  
      000660 30 3D                    4         .ascii "0="
      000662                          5         ZEQUAL:
      000662 A6 FF            [ 1] 1246         LD A,#0XFF 
      000664 90 93            [ 1] 1247         LDW Y,X 
      000666 90 FE            [ 2] 1248         LDW Y,(Y)
      000668 27 02            [ 1] 1249         JREQ ZEQU1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00066A A6 00            [ 1] 1250         LD A,#0 
      00066C                       1251 ZEQU1:  
      00066C F7               [ 1] 1252         LD (X),A 
      00066D E7 01            [ 1] 1253         LD (1,X),A         
      00066F 81               [ 4] 1254         RET 
                                   1255 
                                   1256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1257 ;       AND     ( w w -- w )
                                   1258 ;       Bitwise AND.
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000670                       1260         _HEADER ANDD,3,"AND"
      000670 06 5F                    1         .word LINK 
                           000672     2         LINK=.
      000672 03                       3         .byte 3  
      000673 41 4E 44                 4         .ascii "AND"
      000676                          5         ANDD:
      000676 F6               [ 1] 1261         LD  A,(X)    ;D=w
      000677 E4 02            [ 1] 1262         AND A,(2,X)
      000679 E7 02            [ 1] 1263         LD (2,X),A
      00067B E6 01            [ 1] 1264         LD A,(1,X)
      00067D E4 03            [ 1] 1265         AND A,(3,X)
      00067F E7 03            [ 1] 1266         LD (3,X),A
      000681 1C 00 02         [ 2] 1267         ADDW X,#2
      000684 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1271 ;       OR      ( w w -- w )
                                   1272 ;       Bitwise inclusive OR.
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1274         _HEADER ORR,2,"OR"
      000685 06 72                    1         .word LINK 
                           000687     2         LINK=.
      000687 02                       3         .byte 2  
      000688 4F 52                    4         .ascii "OR"
      00068A                          5         ORR:
      00068A F6               [ 1] 1275         LD A,(X)    ;D=w
      00068B EA 02            [ 1] 1276         OR A,(2,X)
      00068D E7 02            [ 1] 1277         LD (2,X),A
      00068F E6 01            [ 1] 1278         LD A,(1,X)
      000691 EA 03            [ 1] 1279         OR A,(3,X)
      000693 E7 03            [ 1] 1280         LD (3,X),A
      000695 1C 00 02         [ 2] 1281         ADDW X,#2
      000698 81               [ 4] 1282         RET
                                   1283 
                                   1284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1285 ;       XOR     ( w w -- w )
                                   1286 ;       Bitwise exclusive OR.
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000699                       1288         _HEADER XORR,3,"XOR"
      000699 06 87                    1         .word LINK 
                           00069B     2         LINK=.
      00069B 03                       3         .byte 3  
      00069C 58 4F 52                 4         .ascii "XOR"
      00069F                          5         XORR:
      00069F F6               [ 1] 1289         LD A,(X)    ;D=w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006A0 E8 02            [ 1] 1290         XOR A,(2,X)
      0006A2 E7 02            [ 1] 1291         LD (2,X),A
      0006A4 E6 01            [ 1] 1292         LD A,(1,X)
      0006A6 E8 03            [ 1] 1293         XOR A,(3,X)
      0006A8 E7 03            [ 1] 1294         LD (3,X),A
      0006AA 1C 00 02         [ 2] 1295         ADDW X,#2
      0006AD 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1299 ;       UM+     ( u u -- udsum )
                                   1300 ;       Add two unsigned single
                                   1301 ;       and return a double sum.
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AE                       1303         _HEADER UPLUS,3,"UM+"
      0006AE 06 9B                    1         .word LINK 
                           0006B0     2         LINK=.
      0006B0 03                       3         .byte 3  
      0006B1 55 4D 2B                 4         .ascii "UM+"
      0006B4                          5         UPLUS:
      0006B4 A6 01            [ 1] 1304         LD A,#1
      0006B6 90 93            [ 1] 1305         LDW Y,X
      0006B8 90 EE 02         [ 2] 1306         LDW Y,(2,Y)
      0006BB 90 BF 26         [ 2] 1307         LDW YTEMP,Y
      0006BE 90 93            [ 1] 1308         LDW Y,X
      0006C0 90 FE            [ 2] 1309         LDW Y,(Y)
      0006C2 72 B9 00 26      [ 2] 1310         ADDW Y,YTEMP
      0006C6 EF 02            [ 2] 1311         LDW (2,X),Y
      0006C8 25 01            [ 1] 1312         JRC     UPL1
      0006CA 4F               [ 1] 1313         CLR A
      0006CB E7 01            [ 1] 1314 UPL1:   LD     (1,X),A
      0006CD 7F               [ 1] 1315         CLR (X)
      0006CE 81               [ 4] 1316         RET
                                   1317 
                                   1318 ;; System and user variables
                                   1319 
                                   1320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1321 ;       doVAR   ( -- a )
                                   1322 ;       run time code 
                                   1323 ;       for VARIABLE and CREATE.
                                   1324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1325 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006CF                       1326 DOVAR:
      0006CF 1D 00 02         [ 2] 1327 	SUBW X,#2
      0006D2 90 85            [ 2] 1328         POPW Y    ;get return addr (pfa)
      0006D4 90 FE            [ 2] 1329         LDW Y,(Y) ; indirect address 
      0006D6 FF               [ 2] 1330         LDW (X),Y    ;push on stack
      0006D7 81               [ 4] 1331         RET     ;go to RET of EXEC
                                   1332 
                                   1333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1334 ;       BASE    ( -- a )
                                   1335 ;       Radix base for numeric I/O.
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D8                       1337         _HEADER BASE,4,"BASE"
      0006D8 06 B0                    1         .word LINK 
                           0006DA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006DA 04                       3         .byte 4  
      0006DB 42 41 53 45              4         .ascii "BASE"
      0006DF                          5         BASE:
      0006DF 90 AE 00 06      [ 2] 1338 	LDW Y,#UBASE 
      0006E3 1D 00 02         [ 2] 1339 	SUBW X,#2
      0006E6 FF               [ 2] 1340         LDW (X),Y
      0006E7 81               [ 4] 1341         RET
                                   1342 
                                   1343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1344 ;       tmp     ( -- a )
                                   1345 ;       A temporary storage.
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1347         _HEADER TEMP,3,"TMP"
      0006E8 06 DA                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 03                       3         .byte 3  
      0006EB 54 4D 50                 4         .ascii "TMP"
      0006EE                          5         TEMP:
      0006EE 90 AE 00 0A      [ 2] 1348 	LDW Y,#UTMP
      0006F2 1D 00 02         [ 2] 1349 	SUBW X,#2
      0006F5 FF               [ 2] 1350         LDW (X),Y
      0006F6 81               [ 4] 1351         RET
                                   1352 
                                   1353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1354 ;       >IN     ( -- a )
                                   1355 ;        Hold parsing pointer.
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F7                       1357         _HEADER INN,3,">IN"
      0006F7 06 EA                    1         .word LINK 
                           0006F9     2         LINK=.
      0006F9 03                       3         .byte 3  
      0006FA 3E 49 4E                 4         .ascii ">IN"
      0006FD                          5         INN:
      0006FD 90 AE 00 0C      [ 2] 1358 	LDW Y,#UINN 
      000701 1D 00 02         [ 2] 1359 	SUBW X,#2
      000704 FF               [ 2] 1360         LDW (X),Y
      000705 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1364 ;       #TIB    ( -- a )
                                   1365 ;       Count in terminal input 
                                   1366 ;       buffer.
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1368         _HEADER NTIB,4,"#TIB"
      000706 06 F9                    1         .word LINK 
                           000708     2         LINK=.
      000708 04                       3         .byte 4  
      000709 23 54 49 42              4         .ascii "#TIB"
      00070D                          5         NTIB:
      00070D 90 AE 00 0E      [ 2] 1369 	LDW Y,#UCTIB 
      000711 1D 00 02         [ 2] 1370 	SUBW X,#2
      000714 FF               [ 2] 1371         LDW (X),Y
      000715 81               [ 4] 1372         RET
                                   1373 
                                   1374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1375 ;       TBUF ( -- a )
                                   1376 ;       address of 128 bytes 
                                   1377 ;       transaction buffer
                                   1378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000716                       1379         _HEADER TBUF,4,"TBUF"
      000716 07 08                    1         .word LINK 
                           000718     2         LINK=.
      000718 04                       3         .byte 4  
      000719 54 42 55 46              4         .ascii "TBUF"
      00071D                          5         TBUF:
      00071D 90 AE 16 80      [ 2] 1380         ldw y,#ROWBUFF
      000721 1D 00 02         [ 2] 1381         subw x,#CELLL
      000724 FF               [ 2] 1382         ldw (x),y 
      000725 81               [ 4] 1383         ret 
                                   1384 
                                   1385 ; systeme variable 
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1387 ; compilation destination 
                                   1388 ; TFLASH ( -- A )
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000726                       1390         _HEADER TFLASH,6,"TFLASH"
      000726 07 18                    1         .word LINK 
                           000728     2         LINK=.
      000728 06                       3         .byte 6  
      000729 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00072F                          5         TFLASH:
      00072F 1D 00 02         [ 2] 1391         subw x,#CELLL 
      000732 90 AE 00 20      [ 2] 1392         ldw y,#UTFLASH
      000736 FF               [ 2] 1393         ldw (x),y 
      000737 81               [ 4] 1394         ret 
                                   1395 
                                   1396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1397 ;       "EVAL   ( -- a )
                                   1398 ;       Execution vector of EVAL.
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000738                       1400         _HEADER TEVAL,5,"'EVAL"
      000738 07 28                    1         .word LINK 
                           00073A     2         LINK=.
      00073A 05                       3         .byte 5  
      00073B 27 45 56 41 4C           4         .ascii "'EVAL"
      000740                          5         TEVAL:
      000740 90 AE 00 12      [ 2] 1401 	LDW Y,#UINTER 
      000744 1D 00 02         [ 2] 1402 	SUBW X,#2
      000747 FF               [ 2] 1403         LDW (X),Y
      000748 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1407 ;       HLD     ( -- a )
                                   1408 ;       Hold a pointer of output
                                   1409 ;        string.
                                   1410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000749                       1411         _HEADER HLD,3,"HLD"
      000749 07 3A                    1         .word LINK 
                           00074B     2         LINK=.
      00074B 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00074C 48 4C 44                 4         .ascii "HLD"
      00074F                          5         HLD:
      00074F 90 AE 00 14      [ 2] 1412 	LDW Y,#UHLD 
      000753 1D 00 02         [ 2] 1413 	SUBW X,#2
      000756 FF               [ 2] 1414         LDW (X),Y
      000757 81               [ 4] 1415         RET
                                   1416 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ;       CONTEXT ( -- a )
                                   1419 ;       Start vocabulary search.
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000758                       1421         _HEADER CNTXT,7,"CONTEXT"
      000758 07 4B                    1         .word LINK 
                           00075A     2         LINK=.
      00075A 07                       3         .byte 7  
      00075B 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000762                          5         CNTXT:
      000762 90 AE 00 16      [ 2] 1422 	LDW Y,#UCNTXT
      000766 1D 00 02         [ 2] 1423 	SUBW X,#2
      000769 FF               [ 2] 1424         LDW (X),Y
      00076A 81               [ 4] 1425         RET
                                   1426 
                                   1427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1428 ;       VP      ( -- a )
                                   1429 ;       Point to top of variables
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076B                       1431         _HEADER VPP,2,"VP"
      00076B 07 5A                    1         .word LINK 
                           00076D     2         LINK=.
      00076D 02                       3         .byte 2  
      00076E 56 50                    4         .ascii "VP"
      000770                          5         VPP:
      000770 90 AE 00 18      [ 2] 1432 	LDW Y,#UVP 
      000774 1D 00 02         [ 2] 1433 	SUBW X,#2
      000777 FF               [ 2] 1434         LDW (X),Y
      000778 81               [ 4] 1435         RET
                                   1436 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1438 ;       CP    ( -- a )
                                   1439 ;       Pointer to top of FLASH 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000779                       1441         _HEADER CPP,2,"CP"
      000779 07 6D                    1         .word LINK 
                           00077B     2         LINK=.
      00077B 02                       3         .byte 2  
      00077C 43 50                    4         .ascii "CP"
      00077E                          5         CPP:
      00077E 90 AE 00 1A      [ 2] 1442         ldw y,#UCP 
      000782 1D 00 02         [ 2] 1443         subw x,#CELLL 
      000785 FF               [ 2] 1444         ldw (x),y 
      000786 81               [ 4] 1445         ret                
                                   1446 
                                   1447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1450 ;       dictionary.
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000787                       1452         _HEADER LAST,4,"LAST"
      000787 07 7B                    1         .word LINK 
                           000789     2         LINK=.
      000789 04                       3         .byte 4  
      00078A 4C 41 53 54              4         .ascii "LAST"
      00078E                          5         LAST:
      00078E 90 AE 00 1C      [ 2] 1453 	LDW Y,#ULAST 
      000792 1D 00 02         [ 2] 1454 	SUBW X,#2
      000795 FF               [ 2] 1455         LDW (X),Y
      000796 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1459 ; address of system variable URLAST 
                                   1460 ;       RAMLAST ( -- a )
                                   1461 ; RAM dictionary context 
                                   1462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000797                       1463         _HEADER RAMLAST,7,"RAMLAST"
      000797 07 89                    1         .word LINK 
                           000799     2         LINK=.
      000799 07                       3         .byte 7  
      00079A 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A1                          5         RAMLAST:
      0007A1 90 AE 00 22      [ 2] 1464         ldw y,#URLAST 
      0007A5 1D 00 02         [ 2] 1465         subw x,#CELLL 
      0007A8 FF               [ 2] 1466         ldw (x),y 
      0007A9 81               [ 4] 1467         ret 
                                   1468 
                                   1469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1470 ;       OFFSET ( -- a )
                                   1471 ;       address of system 
                                   1472 ;       variable OFFSET 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AA                       1474         _HEADER OFFSET,6,"OFFSET"
      0007AA 07 99                    1         .word LINK 
                           0007AC     2         LINK=.
      0007AC 06                       3         .byte 6  
      0007AD 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B3                          5         OFFSET:
      0007B3 1D 00 02         [ 2] 1475         subw x,#CELLL
      0007B6 90 AE 00 1E      [ 2] 1476         ldw y,#UOFFSET 
      0007BA FF               [ 2] 1477         ldw (x),y 
      0007BB 81               [ 4] 1478         ret 
                                   1479 
                                   1480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1481 ; adjust jump address 
                                   1482 ;  adding OFFSET
                                   1483 ; ADR-ADJ ( a -- a+offset )
                                   1484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BC                       1485 ADRADJ: 
      0007BC CD 07 B3         [ 4] 1486         call OFFSET 
      0007BF CD 04 E3         [ 4] 1487         call AT 
      0007C2 CC 08 3C         [ 2] 1488         jp PLUS 
                                   1489 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1490 
                                   1491 ;; Common functions
                                   1492 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1494 ;       ?DUP    ( w -- w w | 0 )
                                   1495 ;       Dup tos if its is not zero.
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C5                       1497         _HEADER QDUP,4,"?DUP"
      0007C5 07 AC                    1         .word LINK 
                           0007C7     2         LINK=.
      0007C7 04                       3         .byte 4  
      0007C8 3F 44 55 50              4         .ascii "?DUP"
      0007CC                          5         QDUP:
      0007CC 90 93            [ 1] 1498         LDW Y,X
      0007CE 90 FE            [ 2] 1499 	LDW Y,(Y)
      0007D0 27 04            [ 1] 1500         JREQ     QDUP1
      0007D2 1D 00 02         [ 2] 1501 	SUBW X,#CELLL 
      0007D5 FF               [ 2] 1502         LDW (X),Y
      0007D6 81               [ 4] 1503 QDUP1:  RET
                                   1504 
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1506 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1507 ;       Rot 3rd item to top.
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D7                       1509         _HEADER ROT,3,"ROT"
      0007D7 07 C7                    1         .word LINK 
                           0007D9     2         LINK=.
      0007D9 03                       3         .byte 3  
      0007DA 52 4F 54                 4         .ascii "ROT"
      0007DD                          5         ROT:
      0007DD 90 93            [ 1] 1510         ldw y,x 
      0007DF 90 FE            [ 2] 1511         ldw y,(y)
      0007E1 90 89            [ 2] 1512         pushw y 
      0007E3 90 93            [ 1] 1513         ldw y,x 
      0007E5 90 EE 04         [ 2] 1514         ldw y,(4,y)
      0007E8 FF               [ 2] 1515         ldw (x),y 
      0007E9 90 93            [ 1] 1516         ldw y,x 
      0007EB 90 EE 02         [ 2] 1517         ldw y,(2,y)
      0007EE EF 04            [ 2] 1518         ldw (4,x),y 
      0007F0 90 85            [ 2] 1519         popw y 
      0007F2 EF 02            [ 2] 1520         ldw (2,x),y
      0007F4 81               [ 4] 1521         ret 
                                   1522 
                                   1523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1524 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1525 ;    rotate left 3 top elements 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F5                       1527     _HEADER NROT,4,"<ROT"
      0007F5 07 D9                    1         .word LINK 
                           0007F7     2         LINK=.
      0007F7 04                       3         .byte 4  
      0007F8 3C 52 4F 54              4         .ascii "<ROT"
      0007FC                          5         NROT:
      0007FC 90 93            [ 1] 1528     LDW Y,X 
      0007FE 90 FE            [ 2] 1529     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000800 90 89            [ 2] 1530     PUSHW Y ; n3 >R 
      000802 90 93            [ 1] 1531     LDW Y,X 
      000804 90 EE 02         [ 2] 1532     LDW Y,(2,Y) ; Y = n2 
      000807 FF               [ 2] 1533     LDW (X),Y   ; TOS = n2 
      000808 90 93            [ 1] 1534     LDW Y,X    
      00080A 90 EE 04         [ 2] 1535     LDW Y,(4,Y) ; Y = n1 
      00080D EF 02            [ 2] 1536     LDW (2,X),Y ;   = n1 
      00080F 90 85            [ 2] 1537     POPW Y  ; R> Y 
      000811 EF 04            [ 2] 1538     LDW (4,X),Y ; = n3 
      000813 81               [ 4] 1539     RET 
                                   1540 
                                   1541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1542 ;       2DROP   ( w w -- )
                                   1543 ;       Discard two items on stack.
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000814                       1545         _HEADER DDROP,5,"2DROP"
      000814 07 F7                    1         .word LINK 
                           000816     2         LINK=.
      000816 05                       3         .byte 5  
      000817 32 44 52 4F 50           4         .ascii "2DROP"
      00081C                          5         DDROP:
      00081C 1C 00 04         [ 2] 1546         ADDW X,#4
      00081F 81               [ 4] 1547         RET
                                   1548 
                                   1549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1550 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1551 ;       Duplicate top two items.
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000820                       1553         _HEADER DDUP,4,"2DUP"
      000820 08 16                    1         .word LINK 
                           000822     2         LINK=.
      000822 04                       3         .byte 4  
      000823 32 44 55 50              4         .ascii "2DUP"
      000827                          5         DDUP:
      000827 1D 00 04         [ 2] 1554         SUBW X,#4
      00082A 90 93            [ 1] 1555         LDW Y,X
      00082C 90 EE 06         [ 2] 1556         LDW Y,(6,Y)
      00082F EF 02            [ 2] 1557         LDW (2,X),Y
      000831 90 93            [ 1] 1558         LDW Y,X
      000833 90 EE 04         [ 2] 1559         LDW Y,(4,Y)
      000836 FF               [ 2] 1560         LDW (X),Y
      000837 81               [ 4] 1561         RET
                                   1562 
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1564 ;       +       ( w w -- sum )
                                   1565 ;       Add top two items.
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000838                       1567         _HEADER PLUS,1,"+"
      000838 08 22                    1         .word LINK 
                           00083A     2         LINK=.
      00083A 01                       3         .byte 1  
      00083B 2B                       4         .ascii "+"
      00083C                          5         PLUS:
      00083C 90 93            [ 1] 1568         LDW Y,X
      00083E 90 FE            [ 2] 1569         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000840 90 BF 26         [ 2] 1570         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1571         ADDW X,#2
      000846 90 93            [ 1] 1572         LDW Y,X
      000848 90 FE            [ 2] 1573         LDW Y,(Y)
      00084A 72 B9 00 26      [ 2] 1574         ADDW Y,YTEMP
      00084E FF               [ 2] 1575         LDW (X),Y
      00084F 81               [ 4] 1576         RET
                                   1577 
                                   1578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1579 ;       TRUE ( -- -1 )
                                   1580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000850                       1581         _HEADER TRUE,4,"TRUE"
      000850 08 3A                    1         .word LINK 
                           000852     2         LINK=.
      000852 04                       3         .byte 4  
      000853 54 52 55 45              4         .ascii "TRUE"
      000857                          5         TRUE:
      000857 A6 FF            [ 1] 1582         LD A,#255 
      000859 1D 00 02         [ 2] 1583         SUBW X,#CELLL
      00085C F7               [ 1] 1584         LD (X),A 
      00085D E7 01            [ 1] 1585         LD (1,X),A 
      00085F 81               [ 4] 1586         RET 
                                   1587 
                                   1588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1589 ;       FALSE ( -- 0 )
                                   1590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000860                       1591         _HEADER FALSE,5,"FALSE"
      000860 08 52                    1         .word LINK 
                           000862     2         LINK=.
      000862 05                       3         .byte 5  
      000863 46 41 4C 53 45           4         .ascii "FALSE"
      000868                          5         FALSE:
      000868 1D 00 02         [ 2] 1592         SUBW X,#CELLL 
      00086B 7F               [ 1] 1593         CLR (X) 
      00086C 6F 01            [ 1] 1594         CLR (1,X)
      00086E 81               [ 4] 1595         RET 
                                   1596 
                                   1597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1598 ;       NOT     ( w -- w )
                                   1599 ;       One's complement of tos.
                                   1600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086F                       1601         _HEADER INVER,3,"NOT"
      00086F 08 62                    1         .word LINK 
                           000871     2         LINK=.
      000871 03                       3         .byte 3  
      000872 4E 4F 54                 4         .ascii "NOT"
      000875                          5         INVER:
      000875 90 93            [ 1] 1602         LDW Y,X
      000877 90 FE            [ 2] 1603         LDW Y,(Y)
      000879 90 53            [ 2] 1604         CPLW Y
      00087B FF               [ 2] 1605         LDW (X),Y
      00087C 81               [ 4] 1606         RET
                                   1607 
                                   1608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1609 ;       NEGATE  ( n -- -n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1610 ;       Two's complement of tos.
                                   1611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087D                       1612         _HEADER NEGAT,6,"NEGATE"
      00087D 08 71                    1         .word LINK 
                           00087F     2         LINK=.
      00087F 06                       3         .byte 6  
      000880 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000886                          5         NEGAT:
      000886 90 93            [ 1] 1613         LDW Y,X
      000888 90 FE            [ 2] 1614         LDW Y,(Y)
      00088A 90 50            [ 2] 1615         NEGW Y
      00088C FF               [ 2] 1616         LDW (X),Y
      00088D 81               [ 4] 1617         RET
                                   1618 
                                   1619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1620 ;       DNEGATE ( d -- -d )
                                   1621 ;       Two's complement of double.
                                   1622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088E                       1623         _HEADER DNEGA,7,"DNEGATE"
      00088E 08 7F                    1         .word LINK 
                           000890     2         LINK=.
      000890 07                       3         .byte 7  
      000891 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000898                          5         DNEGA:
      000898 90 93            [ 1] 1624         LDW Y,X
      00089A 90 FE            [ 2] 1625 	LDW Y,(Y)
      00089C 90 53            [ 2] 1626         CPLW Y
      00089E 90 89            [ 2] 1627         PUSHW Y      ; Y >R 
      0008A0 90 93            [ 1] 1628         LDW Y,X
      0008A2 90 EE 02         [ 2] 1629         LDW Y,(2,Y)
      0008A5 90 53            [ 2] 1630         CPLW Y
      0008A7 72 A9 00 01      [ 2] 1631         ADDW Y,#1
      0008AB EF 02            [ 2] 1632         LDW (2,X),Y
      0008AD 90 85            [ 2] 1633         POPW Y       ; R> Y  
      0008AF 24 02            [ 1] 1634         JRNC DN1 
      0008B1 90 5C            [ 1] 1635         INCW Y
      0008B3 FF               [ 2] 1636 DN1:    LDW (X),Y
      0008B4 81               [ 4] 1637         RET
                                   1638 
                                   1639 
                                   1640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1641 ;       S>D ( n -- d )
                                   1642 ; convert single integer to double 
                                   1643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B5                       1644         _HEADER STOD,3,"S>D"
      0008B5 08 90                    1         .word LINK 
                           0008B7     2         LINK=.
      0008B7 03                       3         .byte 3  
      0008B8 53 3E 44                 4         .ascii "S>D"
      0008BB                          5         STOD:
      0008BB 1D 00 02         [ 2] 1645         SUBW X,#CELLL 
      0008BE 7F               [ 1] 1646         CLR (X) 
      0008BF 6F 01            [ 1] 1647         CLR (1,X) 
      0008C1 90 93            [ 1] 1648         LDW Y,X 
      0008C3 90 EE 02         [ 2] 1649         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008C6 2A 05            [ 1] 1650         JRPL 1$
      0008C8 90 AE FF FF      [ 2] 1651         LDW Y,#-1 
      0008CC FF               [ 2] 1652         LDW (X),Y 
      0008CD 81               [ 4] 1653 1$:     RET 
                                   1654 
                                   1655 
                                   1656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1657 ;       -       ( n1 n2 -- n1-n2 )
                                   1658 ;       Subtraction.
                                   1659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CE                       1660         _HEADER SUBB,1,"-"
      0008CE 08 B7                    1         .word LINK 
                           0008D0     2         LINK=.
      0008D0 01                       3         .byte 1  
      0008D1 2D                       4         .ascii "-"
      0008D2                          5         SUBB:
      0008D2 90 93            [ 1] 1661         LDW Y,X
      0008D4 90 FE            [ 2] 1662         LDW Y,(Y) ; n2 
      0008D6 90 89            [ 2] 1663         PUSHW Y ; n2 >R 
      0008D8 1C 00 02         [ 2] 1664         ADDW X,#CELLL 
      0008DB 90 93            [ 1] 1665         LDW Y,X
      0008DD 90 FE            [ 2] 1666         LDW Y,(Y) ; n1 
      0008DF 72 F2 01         [ 2] 1667         SUBW Y,(1,SP) ; n1-n2 
      0008E2 FF               [ 2] 1668         LDW (X),Y
      0008E3 5B 02            [ 2] 1669         ADDW SP,#2 ; drop n2 from rstack 
      0008E5 81               [ 4] 1670         RET
                                   1671 
                                   1672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1673 ;       ABS     ( n -- n )
                                   1674 ;       Return  absolute value of n.
                                   1675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E6                       1676         _HEADER ABSS,3,"ABS"
      0008E6 08 D0                    1         .word LINK 
                           0008E8     2         LINK=.
      0008E8 03                       3         .byte 3  
      0008E9 41 42 53                 4         .ascii "ABS"
      0008EC                          5         ABSS:
      0008EC 90 93            [ 1] 1677         LDW Y,X
      0008EE 90 FE            [ 2] 1678 	LDW Y,(Y)
      0008F0 2A 03            [ 1] 1679         JRPL     AB1     ;negate:
      0008F2 90 50            [ 2] 1680         NEGW     Y     ;else negate hi byte
      0008F4 FF               [ 2] 1681         LDW (X),Y
      0008F5 81               [ 4] 1682 AB1:    RET
                                   1683 
                                   1684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1685 ;       =       ( w w -- t )
                                   1686 ;       Return true if top two are equal.
                                   1687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F6                       1688         _HEADER EQUAL,1,"="
      0008F6 08 E8                    1         .word LINK 
                           0008F8     2         LINK=.
      0008F8 01                       3         .byte 1  
      0008F9 3D                       4         .ascii "="
      0008FA                          5         EQUAL:
      0008FA A6 FF            [ 1] 1689         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008FC 90 93            [ 1] 1690         LDW Y,X    
      0008FE 90 FE            [ 2] 1691         LDW Y,(Y)   ; n2 
      000900 1C 00 02         [ 2] 1692         ADDW X,#CELLL 
      000903 F3               [ 2] 1693         CPW Y,(X)   ; n1==n2
      000904 27 01            [ 1] 1694         JREQ EQ1 
      000906 4F               [ 1] 1695         CLR A 
      000907 F7               [ 1] 1696 EQ1:    LD (X),A
      000908 E7 01            [ 1] 1697         LD (1,X),A
      00090A 81               [ 4] 1698 	RET     
                                   1699 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1701 ;       U<      ( u1 u2 -- f )
                                   1702 ;       Unsigned compare of top two items.
                                   1703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090B                       1704         _HEADER ULESS,2,"U<"
      00090B 08 F8                    1         .word LINK 
                           00090D     2         LINK=.
      00090D 02                       3         .byte 2  
      00090E 55 3C                    4         .ascii "U<"
      000910                          5         ULESS:
      000910 A6 FF            [ 1] 1705         LD A,#0xFF  ;true
      000912 90 93            [ 1] 1706         LDW Y,X    
      000914 90 EE 02         [ 2] 1707         LDW Y,(2,Y) ; u1 
      000917 F3               [ 2] 1708         CPW Y,(X)   ; cpw u1  u2 
      000918 25 01            [ 1] 1709         JRULT     ULES1
      00091A 4F               [ 1] 1710         CLR A
      00091B 1C 00 02         [ 2] 1711 ULES1:  ADDW X,#CELLL 
      00091E F7               [ 1] 1712         LD (X),A
      00091F E7 01            [ 1] 1713         LD (1,X),A
      000921 81               [ 4] 1714 	RET     
                                   1715 
                                   1716 
                                   1717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1718 ;       <       ( n1 n2 -- t )
                                   1719 ;       Signed compare of top two items.
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000922                       1721         _HEADER LESS,1,"<"
      000922 09 0D                    1         .word LINK 
                           000924     2         LINK=.
      000924 01                       3         .byte 1  
      000925 3C                       4         .ascii "<"
      000926                          5         LESS:
      000926 A6 FF            [ 1] 1722         LD A,#0xFF  ;true
      000928 90 93            [ 1] 1723         LDW Y,X    
      00092A 90 EE 02         [ 2] 1724         LDW Y,(2,Y)  ; n1 
      00092D F3               [ 2] 1725         CPW Y,(X)  ; n1 < n2 ? 
      00092E 2F 01            [ 1] 1726         JRSLT     LT1
      000930 4F               [ 1] 1727         CLR A
      000931 1C 00 02         [ 2] 1728 LT1:    ADDW X,#CELLL 
      000934 F7               [ 1] 1729         LD (X),A
      000935 E7 01            [ 1] 1730         LD (1,X),A
      000937 81               [ 4] 1731 	RET     
                                   1732 
                                   1733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1734 ;   U> ( u1 u2 -- f )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1735 ;   f = true if u1>u2 
                                   1736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1737         _HEADER UGREAT,2,"U>"
      000938 09 24                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 02                       3         .byte 2  
      00093B 55 3E                    4         .ascii "U>"
      00093D                          5         UGREAT:
      00093D A6 FF            [ 1] 1738         LD A,#255  
      00093F 90 93            [ 1] 1739         LDW Y,X 
      000941 90 EE 02         [ 2] 1740         LDW Y,(2,Y)  ; u1 
      000944 F3               [ 2] 1741         CPW Y,(X)  ; u1 > u2 
      000945 22 01            [ 1] 1742         JRUGT UGREAT1 
      000947 4F               [ 1] 1743         CLR A   
      000948                       1744 UGREAT1:
      000948 1C 00 02         [ 2] 1745         ADDW X,#CELLL 
      00094B F7               [ 1] 1746         LD (X),A 
      00094C E7 01            [ 1] 1747         LD (1,X),A 
      00094E 81               [ 4] 1748         RET 
                                   1749 
                                   1750 
                                   1751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1752 ;       >   (n1 n2 -- f )
                                   1753 ;  signed compare n1 n2 
                                   1754 ;  true if n1 > n2 
                                   1755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1756         _HEADER GREAT,1,">"
      00094F 09 3A                    1         .word LINK 
                           000951     2         LINK=.
      000951 01                       3         .byte 1  
      000952 3E                       4         .ascii ">"
      000953                          5         GREAT:
      000953 A6 FF            [ 1] 1757         LD A,#0xFF ;
      000955 90 93            [ 1] 1758         LDW Y,X 
      000957 90 EE 02         [ 2] 1759         LDW Y,(2,Y)  ; n1 
      00095A F3               [ 2] 1760         CPW Y,(X) ; n1 > n2 ?  
      00095B 2C 01            [ 1] 1761         JRSGT GREAT1 
      00095D 4F               [ 1] 1762         CLR  A
      00095E                       1763 GREAT1:
      00095E 1C 00 02         [ 2] 1764         ADDW X,#CELLL 
      000961 F7               [ 1] 1765         LD (X),A 
      000962 E7 01            [ 1] 1766         LD (1,X),A 
      000964 81               [ 4] 1767         RET 
                                   1768 
                                   1769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1770 ;       MAX     ( n n -- n )
                                   1771 ;       Return greater of two top items.
                                   1772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000965                       1773         _HEADER MAX,3,"MAX"
      000965 09 51                    1         .word LINK 
                           000967     2         LINK=.
      000967 03                       3         .byte 3  
      000968 4D 41 58                 4         .ascii "MAX"
      00096B                          5         MAX:
      00096B 90 93            [ 1] 1774         LDW Y,X    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00096D 90 FE            [ 2] 1775         LDW Y,(Y) ; n2 
      00096F E3 02            [ 2] 1776         CPW Y,(2,X)   
      000971 2F 02            [ 1] 1777         JRSLT  MAX1
      000973 EF 02            [ 2] 1778         LDW (2,X),Y
      000975 1C 00 02         [ 2] 1779 MAX1:   ADDW X,#2
      000978 81               [ 4] 1780 	RET     
                                   1781 
                                   1782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1783 ;       MIN     ( n n -- n )
                                   1784 ;       Return smaller of top two items.
                                   1785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000979                       1786         _HEADER MIN,3,"MIN"
      000979 09 67                    1         .word LINK 
                           00097B     2         LINK=.
      00097B 03                       3         .byte 3  
      00097C 4D 49 4E                 4         .ascii "MIN"
      00097F                          5         MIN:
      00097F 90 93            [ 1] 1787         LDW Y,X    
      000981 90 FE            [ 2] 1788         LDW Y,(Y)  ; n2 
      000983 E3 02            [ 2] 1789         CPW Y,(2,X) 
      000985 2C 02            [ 1] 1790         JRSGT MIN1
      000987 EF 02            [ 2] 1791         LDW (2,X),Y
      000989 1C 00 02         [ 2] 1792 MIN1:	ADDW X,#2
      00098C 81               [ 4] 1793 	RET     
                                   1794 
                                   1795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1796 ;       WITHIN  ( u ul uh -- t )
                                   1797 ;       Return true if u is within
                                   1798 ;       range of ul and uh. ( ul <= u < uh )
                                   1799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098D                       1800         _HEADER WITHI,6,"WITHIN"
      00098D 09 7B                    1         .word LINK 
                           00098F     2         LINK=.
      00098F 06                       3         .byte 6  
      000990 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000996                          5         WITHI:
      000996 CD 06 41         [ 4] 1801         CALL     OVER
      000999 CD 08 D2         [ 4] 1802         CALL     SUBB
      00099C CD 05 E2         [ 4] 1803         CALL     TOR
      00099F CD 08 D2         [ 4] 1804         CALL     SUBB
      0009A2 CD 05 34         [ 4] 1805         CALL     RFROM
      0009A5 CC 09 10         [ 2] 1806         JP     ULESS
                                   1807 
                                   1808 ;; Divide
                                   1809 
                                   1810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1811 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1812 ;       Unsigned divide of a double by a
                                   1813 ;       single. Return mod and quotient.
                                   1814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1815 ; 2021-02-22
                                   1816 ; changed algorithm for Jeeek one 
                                   1817 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A8                       1818         _HEADER UMMOD,6,"UM/MOD"
      0009A8 09 8F                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           0009AA     2         LINK=.
      0009AA 06                       3         .byte 6  
      0009AB 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B1                          5         UMMOD:
      0009B1 90 93            [ 1] 1819         LDW     Y,X             ; stack pointer to Y
      0009B3 FE               [ 2] 1820         LDW     X,(X)           ; un
      0009B4 BF 26            [ 2] 1821         LDW     YTEMP,X         ; save un
      0009B6 93               [ 1] 1822         LDW     X,Y
      0009B7 5C               [ 1] 1823         INCW    X               ; drop un
      0009B8 5C               [ 1] 1824         INCW    X
      0009B9 89               [ 2] 1825         PUSHW   X               ; save stack pointer
      0009BA FE               [ 2] 1826         LDW     X,(X)           ; X=udh
      0009BB 26 07            [ 1] 1827         JRNE    MMSM0
      0009BD 85               [ 2] 1828         POPW    X 
      0009BE 90 BE 26         [ 2] 1829         LDW     Y,YTEMP
      0009C1 FF               [ 2] 1830         LDW (X), Y 
      0009C2 20 38            [ 2] 1831         JRA     USLMOD          ; faster when udl==0 
      0009C4                       1832 MMSM0:    
      0009C4 90 EE 04         [ 2] 1833         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009C7 B3 26            [ 2] 1834         CPW     X,YTEMP
      0009C9 25 09            [ 1] 1835         JRULT   MMSM1           ; X is still on the R-stack
      0009CB 85               [ 2] 1836         POPW    X               ; restore stack pointer
      0009CC 90 5F            [ 1] 1837         CLRW    Y
      0009CE EF 02            [ 2] 1838         LDW     (2,X),Y         ; remainder 0
      0009D0 90 5A            [ 2] 1839         DECW    Y
      0009D2 FF               [ 2] 1840         LDW     (X),Y           ; quotient max. 16 bit value
      0009D3 81               [ 4] 1841         RET
      0009D4                       1842 MMSM1:
      0009D4 A6 10            [ 1] 1843         LD      A,#16           ; loop count
      0009D6 90 58            [ 2] 1844         SLLW    Y               ; udl shift udl into udh
      0009D8                       1845 MMSM3:
      0009D8 59               [ 2] 1846         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009D9 25 04            [ 1] 1847         JRC     MMSMa           ; if carry out of rotate
      0009DB B3 26            [ 2] 1848         CPW     X,YTEMP         ; compare udh to un
      0009DD 25 05            [ 1] 1849         JRULT   MMSM4           ; can't subtract
      0009DF                       1850 MMSMa:
      0009DF 72 B0 00 26      [ 2] 1851         SUBW    X,YTEMP         ; can subtract
      0009E3 98               [ 1] 1852         RCF
      0009E4                       1853 MMSM4:
      0009E4 8C               [ 1] 1854         CCF                     ; quotient bit
      0009E5 90 59            [ 2] 1855         RLCW    Y               ; rotate into quotient, rotate out udl
      0009E7 4A               [ 1] 1856         DEC     A               ; repeat
      0009E8 26 EE            [ 1] 1857         JRNE    MMSM3           ; if A == 0
      0009EA                       1858 MMSMb:
      0009EA BF 26            [ 2] 1859         LDW     YTEMP,X         ; done, save remainder
      0009EC 85               [ 2] 1860         POPW    X               ; restore stack pointer
      0009ED FF               [ 2] 1861         LDW     (X),Y           ; save quotient
      0009EE 90 BE 26         [ 2] 1862         LDW     Y,YTEMP         ; remainder onto stack
      0009F1 EF 02            [ 2] 1863         LDW     (2,X),Y
      0009F3 81               [ 4] 1864         RET
                                   1865 
                                   1866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1867 ;   U/MOD ( u1 u2 -- ur uq )
                                   1868 ;   unsigned divide u1/u2 
                                   1869 ;   return remainder and quotient 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F4                       1871         _HEADER USLMOD,5,"U/MOD"
      0009F4 09 AA                    1         .word LINK 
                           0009F6     2         LINK=.
      0009F6 05                       3         .byte 5  
      0009F7 55 2F 4D 4F 44           4         .ascii "U/MOD"
      0009FC                          5         USLMOD:
      0009FC 90 93            [ 1] 1872         LDW Y,X 
      0009FE 90 FE            [ 2] 1873         LDW Y,(Y)  ; dividend 
      000A00 89               [ 2] 1874         PUSHW X    ; DP >R 
      000A01 EE 02            [ 2] 1875         LDW X,(2,X) ; divisor 
      000A03 65               [ 2] 1876         DIVW X,Y 
      000A04 89               [ 2] 1877         PUSHW X     ; quotient 
      000A05 1E 03            [ 2] 1878         LDW X,(3,SP) ; DP 
      000A07 EF 02            [ 2] 1879         LDW (2,X),Y ; remainder 
      000A09 16 01            [ 2] 1880         LDW Y,(1,SP) ; quotient 
      000A0B FF               [ 2] 1881         LDW (X),Y 
      000A0C 5B 04            [ 2] 1882         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A0E 81               [ 4] 1883         RET 
                                   1884 
                                   1885 
                                   1886 
                                   1887 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1888 ;       M/MOD   ( d n -- r q )
                                   1889 ;       Signed floored divide of double by
                                   1890 ;       single. Return mod and quotient.
                                   1891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A0F                       1892         _HEADER MSMOD,5,"M/MOD"
      000A0F 09 F6                    1         .word LINK 
                           000A11     2         LINK=.
      000A11 05                       3         .byte 5  
      000A12 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A17                          5         MSMOD:
      000A17 CD 06 19         [ 4] 1893         CALL	DUPP
      000A1A CD 06 50         [ 4] 1894         CALL	ZLESS
      000A1D CD 06 19         [ 4] 1895         CALL	DUPP
      000A20 CD 05 E2         [ 4] 1896         CALL	TOR
      000A23 CD 04 98         [ 4] 1897         CALL	QBRAN
      000A26 0A 34                 1898         .word	MMOD1
      000A28 CD 08 86         [ 4] 1899         CALL	NEGAT
      000A2B CD 05 E2         [ 4] 1900         CALL	TOR
      000A2E CD 08 98         [ 4] 1901         CALL	DNEGA
      000A31 CD 05 34         [ 4] 1902         CALL	RFROM
      000A34 CD 05 E2         [ 4] 1903 MMOD1:	CALL	TOR
      000A37 CD 06 19         [ 4] 1904         CALL	DUPP
      000A3A CD 06 50         [ 4] 1905         CALL	ZLESS
      000A3D CD 04 98         [ 4] 1906         CALL	QBRAN
      000A40 0A 48                 1907         .word	MMOD2
      000A42 CD 05 45         [ 4] 1908         CALL	RAT
      000A45 CD 08 3C         [ 4] 1909         CALL	PLUS
      000A48 CD 05 34         [ 4] 1910 MMOD2:	CALL	RFROM
      000A4B CD 09 B1         [ 4] 1911         CALL	UMMOD
      000A4E CD 05 34         [ 4] 1912         CALL	RFROM
      000A51 CD 04 98         [ 4] 1913         CALL	QBRAN
      000A54 0A 5F                 1914         .word	MMOD3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A56 CD 06 29         [ 4] 1915         CALL	SWAPP
      000A59 CD 08 86         [ 4] 1916         CALL	NEGAT
      000A5C CD 06 29         [ 4] 1917         CALL	SWAPP
      000A5F 81               [ 4] 1918 MMOD3:	RET
                                   1919 
                                   1920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1921 ;       /MOD    ( n1 n2 -- r q )
                                   1922 ;       Signed divide n1/n2. 
                                   1923 ;       Return mod and quotient.
                                   1924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A60                       1925         _HEADER SLMOD,4,"/MOD"
      000A60 0A 11                    1         .word LINK 
                           000A62     2         LINK=.
      000A62 04                       3         .byte 4  
      000A63 2F 4D 4F 44              4         .ascii "/MOD"
      000A67                          5         SLMOD:
      000A67 F6               [ 1] 1926         LD A,(X)
      000A68 88               [ 1] 1927         PUSH A   ; n2 sign 
      000A69 E6 02            [ 1] 1928         LD A,(2,X)
      000A6B 88               [ 1] 1929         PUSH A    ; n1 sign 
      000A6C CD 08 EC         [ 4] 1930         CALL ABSS 
      000A6F CD 05 E2         [ 4] 1931         CALL TOR  ; 
      000A72 CD 08 EC         [ 4] 1932         CALL ABSS 
      000A75 CD 05 45         [ 4] 1933         CALL RAT   
      000A78 CD 09 FC         [ 4] 1934         CALL USLMOD 
      000A7B 7B 03            [ 1] 1935         LD A,(3,SP)
      000A7D 1A 04            [ 1] 1936         OR A,(4,SP)
      000A7F 2A 25            [ 1] 1937         JRPL SLMOD8 ; both positive nothing to change 
      000A81 7B 03            [ 1] 1938         LD A,(3,SP)
      000A83 18 04            [ 1] 1939         XOR A,(4,SP)
      000A85 2A 12            [ 1] 1940         JRPL SLMOD1
                                   1941 ; dividend and divisor are opposite sign          
      000A87 CD 0B 93         [ 4] 1942         CALL ONEP   ; add one to quotient 
      000A8A CD 08 86         [ 4] 1943         CALL NEGAT ; negative quotient
      000A8D CD 05 45         [ 4] 1944         CALL RAT 
      000A90 CD 07 DD         [ 4] 1945         CALL ROT 
      000A93 CD 08 D2         [ 4] 1946         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000A96 CD 06 29         [ 4] 1947         CALL SWAPP
      000A99                       1948 SLMOD1:
      000A99 7B 04            [ 1] 1949         LD A,(4,SP) ; divisor sign 
      000A9B 2A 09            [ 1] 1950         JRPL SLMOD8 
      000A9D CD 05 E2         [ 4] 1951         CALL TOR 
      000AA0 CD 08 86         [ 4] 1952         CALL NEGAT ; if divisor negative negate remainder 
      000AA3 CD 05 34         [ 4] 1953         CALL RFROM 
      000AA6                       1954 SLMOD8: 
      000AA6 5B 04            [ 2] 1955         ADDW SP,#4 
      000AA8 81               [ 4] 1956         RET 
                                   1957 
                                   1958 ;        CALL	OVER
                                   1959 ;        CALL	ZLESS
                                   1960 ;        CALL	SWAPP
                                   1961 ;        JP	MSMOD
                                   1962 
                                   1963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1964 ;       MOD     ( n n -- r )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1965 ;       Signed divide. Return mod only.
                                   1966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AA9                       1967         _HEADER MODD,3,"MOD"
      000AA9 0A 62                    1         .word LINK 
                           000AAB     2         LINK=.
      000AAB 03                       3         .byte 3  
      000AAC 4D 4F 44                 4         .ascii "MOD"
      000AAF                          5         MODD:
      000AAF CD 0A 67         [ 4] 1968 	CALL	SLMOD
      000AB2 CC 06 0F         [ 2] 1969 	JP	DROP
                                   1970 
                                   1971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1972 ;       /       ( n n -- q )
                                   1973 ;       Signed divide. Return quotient only.
                                   1974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB5                       1975         _HEADER SLASH,1,"/"
      000AB5 0A AB                    1         .word LINK 
                           000AB7     2         LINK=.
      000AB7 01                       3         .byte 1  
      000AB8 2F                       4         .ascii "/"
      000AB9                          5         SLASH:
      000AB9 CD 0A 67         [ 4] 1976         CALL	SLMOD
      000ABC CD 06 29         [ 4] 1977         CALL	SWAPP
      000ABF CC 06 0F         [ 2] 1978         JP	DROP
                                   1979 
                                   1980 ;; Multiply
                                   1981 
                                   1982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1983 ;       UM*     ( u u -- ud )
                                   1984 ;       Unsigned multiply. Return 
                                   1985 ;       double product.
                                   1986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC2                       1987         _HEADER UMSTA,3,"UM*"
      000AC2 0A B7                    1         .word LINK 
                           000AC4     2         LINK=.
      000AC4 03                       3         .byte 3  
      000AC5 55 4D 2A                 4         .ascii "UM*"
      000AC8                          5         UMSTA:
                                   1988 ; stack have 4 bytes u1=a,b u2=c,d
                                   1989 ; take advantage of SP addressing modes
                                   1990 ; these PRODx in RAM are not required
                                   1991 ; the product is kept on stack as local variable 
                                   1992         ;; bytes offset on data stack 
                           000002  1993         da=2 
                           000003  1994         db=3 
                           000000  1995         dc=0 
                           000001  1996         dd=1 
                                   1997         ;; product bytes offset on return stack 
                           000001  1998         UD1=1  ; ud bits 31..24
                           000002  1999         UD2=2  ; ud bits 23..16
                           000003  2000         UD3=3  ; ud bits 15..8 
                           000004  2001         UD4=4  ; ud bits 7..0 
                                   2002         ;; local variable for product set to zero   
      000AC8 90 5F            [ 1] 2003         clrw y 
      000ACA 90 89            [ 2] 2004         pushw y  ; bits 15..0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000ACC 90 89            [ 2] 2005         pushw y  ; bits 31..16 
      000ACE E6 03            [ 1] 2006         ld a,(db,x) ; b 
      000AD0 90 97            [ 1] 2007         ld yl,a 
      000AD2 E6 01            [ 1] 2008         ld a,(dd,x)   ; d
      000AD4 90 42            [ 4] 2009         mul y,a    ; b*d  
      000AD6 17 03            [ 2] 2010         ldw (UD3,sp),y ; lowest weight product 
      000AD8 E6 03            [ 1] 2011         ld a,(db,x)
      000ADA 90 97            [ 1] 2012         ld yl,a 
      000ADC E6 00            [ 1] 2013         ld a,(dc,x)
      000ADE 90 42            [ 4] 2014         mul y,a  ; b*c 
                                   2015         ;;; do the partial sum 
      000AE0 72 F9 02         [ 2] 2016         addw y,(UD2,sp)
      000AE3 4F               [ 1] 2017         clr a 
      000AE4 49               [ 1] 2018         rlc a
      000AE5 6B 01            [ 1] 2019         ld (UD1,sp),a 
      000AE7 17 02            [ 2] 2020         ldw (UD2,sp),y 
      000AE9 E6 02            [ 1] 2021         ld a,(da,x)
      000AEB 90 97            [ 1] 2022         ld yl,a 
      000AED E6 01            [ 1] 2023         ld a,(dd,x)
      000AEF 90 42            [ 4] 2024         mul y,a   ; a*d 
                                   2025         ;; do partial sum 
      000AF1 72 F9 02         [ 2] 2026         addw y,(UD2,sp)
      000AF4 4F               [ 1] 2027         clr a 
      000AF5 19 01            [ 1] 2028         adc a,(UD1,sp)
      000AF7 6B 01            [ 1] 2029         ld (UD1,sp),a  
      000AF9 17 02            [ 2] 2030         ldw (UD2,sp),y 
      000AFB E6 02            [ 1] 2031         ld a,(da,x)
      000AFD 90 97            [ 1] 2032         ld yl,a 
      000AFF E6 00            [ 1] 2033         ld a,(dc,x)
      000B01 90 42            [ 4] 2034         mul y,a  ;  a*c highest weight product 
                                   2035         ;;; do partial sum 
      000B03 72 F9 01         [ 2] 2036         addw y,(UD1,sp)
      000B06 FF               [ 2] 2037         ldw (x),y  ; udh 
      000B07 16 03            [ 2] 2038         ldw y,(UD3,sp)
      000B09 EF 02            [ 2] 2039         ldw (2,x),y  ; udl  
      000B0B 5B 04            [ 2] 2040         addw sp,#4 ; drop local variable 
      000B0D 81               [ 4] 2041         ret  
                                   2042 
                                   2043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2044 ;       *       ( n n -- n )
                                   2045 ;       Signed multiply. Return 
                                   2046 ;       single product.
                                   2047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B0E                       2048         _HEADER STAR,1,"*"
      000B0E 0A C4                    1         .word LINK 
                           000B10     2         LINK=.
      000B10 01                       3         .byte 1  
      000B11 2A                       4         .ascii "*"
      000B12                          5         STAR:
      000B12 CD 0A C8         [ 4] 2049 	CALL	UMSTA
      000B15 CC 06 0F         [ 2] 2050 	JP	DROP
                                   2051 
                                   2052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2053 ;       M*      ( n n -- d )
                                   2054 ;       Signed multiply. Return 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2055 ;       double product.
                                   2056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B18                       2057         _HEADER MSTAR,2,"M*"
      000B18 0B 10                    1         .word LINK 
                           000B1A     2         LINK=.
      000B1A 02                       3         .byte 2  
      000B1B 4D 2A                    4         .ascii "M*"
      000B1D                          5         MSTAR:
      000B1D CD 08 27         [ 4] 2058         CALL	DDUP
      000B20 CD 06 9F         [ 4] 2059         CALL	XORR
      000B23 CD 06 50         [ 4] 2060         CALL	ZLESS
      000B26 CD 05 E2         [ 4] 2061         CALL	TOR
      000B29 CD 08 EC         [ 4] 2062         CALL	ABSS
      000B2C CD 06 29         [ 4] 2063         CALL	SWAPP
      000B2F CD 08 EC         [ 4] 2064         CALL	ABSS
      000B32 CD 0A C8         [ 4] 2065         CALL	UMSTA
      000B35 CD 05 34         [ 4] 2066         CALL	RFROM
      000B38 CD 04 98         [ 4] 2067         CALL	QBRAN
      000B3B 0B 40                 2068         .word	MSTA1
      000B3D CD 08 98         [ 4] 2069         CALL	DNEGA
      000B40 81               [ 4] 2070 MSTA1:	RET
                                   2071 
                                   2072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2073 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2074 ;       Multiply n1 and n2, then divide
                                   2075 ;       by n3. Return mod and quotient.
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B41                       2077         _HEADER SSMOD,5,"*/MOD"
      000B41 0B 1A                    1         .word LINK 
                           000B43     2         LINK=.
      000B43 05                       3         .byte 5  
      000B44 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B49                          5         SSMOD:
      000B49 CD 05 E2         [ 4] 2078         CALL     TOR
      000B4C CD 0B 1D         [ 4] 2079         CALL     MSTAR
      000B4F CD 05 34         [ 4] 2080         CALL     RFROM
      000B52 CC 0A 17         [ 2] 2081         JP     MSMOD
                                   2082 
                                   2083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2084 ;       */      ( n1 n2 n3 -- q )
                                   2085 ;       Multiply n1 by n2, then divide
                                   2086 ;       by n3. Return quotient only.
                                   2087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B55                       2088         _HEADER STASL,2,"*/"
      000B55 0B 43                    1         .word LINK 
                           000B57     2         LINK=.
      000B57 02                       3         .byte 2  
      000B58 2A 2F                    4         .ascii "*/"
      000B5A                          5         STASL:
      000B5A CD 0B 49         [ 4] 2089         CALL	SSMOD
      000B5D CD 06 29         [ 4] 2090         CALL	SWAPP
      000B60 CC 06 0F         [ 2] 2091         JP	DROP
                                   2092 
                                   2093 ;; Miscellaneous
                                   2094 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2096 ;       CELL+   ( a -- a )
                                   2097 ;       Add cell size in byte to address.
                                   2098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B63                       2099         _HEADER CELLP,2,"2+"
      000B63 0B 57                    1         .word LINK 
                           000B65     2         LINK=.
      000B65 02                       3         .byte 2  
      000B66 32 2B                    4         .ascii "2+"
      000B68                          5         CELLP:
      000B68 90 93            [ 1] 2100         LDW Y,X
      000B6A 90 FE            [ 2] 2101 	LDW Y,(Y)
      000B6C 72 A9 00 02      [ 2] 2102         ADDW Y,#CELLL 
      000B70 FF               [ 2] 2103         LDW (X),Y
      000B71 81               [ 4] 2104         RET
                                   2105 
                                   2106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2107 ;       CELL-   ( a -- a )
                                   2108 ;       Subtract 2 from address.
                                   2109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B72                       2110         _HEADER CELLM,2,"2-"
      000B72 0B 65                    1         .word LINK 
                           000B74     2         LINK=.
      000B74 02                       3         .byte 2  
      000B75 32 2D                    4         .ascii "2-"
      000B77                          5         CELLM:
      000B77 90 93            [ 1] 2111         LDW Y,X
      000B79 90 FE            [ 2] 2112 	LDW Y,(Y)
      000B7B 72 A2 00 02      [ 2] 2113         SUBW Y,#CELLL
      000B7F FF               [ 2] 2114         LDW (X),Y
      000B80 81               [ 4] 2115         RET
                                   2116 
                                   2117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2118 ;       CELLS   ( n -- n )
                                   2119 ;       Multiply tos by 2.
                                   2120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B81                       2121         _HEADER CELLS,2,"2*"
      000B81 0B 74                    1         .word LINK 
                           000B83     2         LINK=.
      000B83 02                       3         .byte 2  
      000B84 32 2A                    4         .ascii "2*"
      000B86                          5         CELLS:
      000B86 90 93            [ 1] 2122         LDW Y,X
      000B88 90 FE            [ 2] 2123 	LDW Y,(Y)
      000B8A 90 58            [ 2] 2124         SLAW Y
      000B8C FF               [ 2] 2125         LDW (X),Y
      000B8D 81               [ 4] 2126         RET
                                   2127 
                                   2128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2129 ;       1+      ( a -- a )
                                   2130 ;       Add cell size in byte 
                                   2131 ;       to address.
                                   2132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B8E                       2133         _HEADER ONEP,2,"1+"
      000B8E 0B 83                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000B90     2         LINK=.
      000B90 02                       3         .byte 2  
      000B91 31 2B                    4         .ascii "1+"
      000B93                          5         ONEP:
      000B93 90 93            [ 1] 2134         LDW Y,X
      000B95 90 FE            [ 2] 2135 	LDW Y,(Y)
      000B97 90 5C            [ 1] 2136         INCW Y
      000B99 FF               [ 2] 2137         LDW (X),Y
      000B9A 81               [ 4] 2138         RET
                                   2139 
                                   2140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2141 ;       1-      ( a -- a )
                                   2142 ;       Subtract 2 from address.
                                   2143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9B                       2144         _HEADER ONEM,2,"1-"
      000B9B 0B 90                    1         .word LINK 
                           000B9D     2         LINK=.
      000B9D 02                       3         .byte 2  
      000B9E 31 2D                    4         .ascii "1-"
      000BA0                          5         ONEM:
      000BA0 90 93            [ 1] 2145         LDW Y,X
      000BA2 90 FE            [ 2] 2146 	LDW Y,(Y)
      000BA4 90 5A            [ 2] 2147         DECW Y
      000BA6 FF               [ 2] 2148         LDW (X),Y
      000BA7 81               [ 4] 2149         RET
                                   2150 
                                   2151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2152 ;  shift left n times 
                                   2153 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA8                       2155         _HEADER LSHIFT,6,"LSHIFT"
      000BA8 0B 9D                    1         .word LINK 
                           000BAA     2         LINK=.
      000BAA 06                       3         .byte 6  
      000BAB 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BB1                          5         LSHIFT:
      000BB1 E6 01            [ 1] 2156         ld a,(1,x)
      000BB3 1C 00 02         [ 2] 2157         addw x,#CELLL 
      000BB6 90 93            [ 1] 2158         ldw y,x 
      000BB8 90 FE            [ 2] 2159         ldw y,(y)
      000BBA                       2160 LSHIFT1:
      000BBA 4D               [ 1] 2161         tnz a 
      000BBB 27 05            [ 1] 2162         jreq LSHIFT4 
      000BBD 90 58            [ 2] 2163         sllw y 
      000BBF 4A               [ 1] 2164         dec a 
      000BC0 20 F8            [ 2] 2165         jra LSHIFT1 
      000BC2                       2166 LSHIFT4:
      000BC2 FF               [ 2] 2167         ldw (x),y 
      000BC3 81               [ 4] 2168         ret 
                                   2169 
                                   2170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2171 ; shift right n times                 
                                   2172 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC4                       2174         _HEADER RSHIFT,6,"RSHIFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BC4 0B AA                    1         .word LINK 
                           000BC6     2         LINK=.
      000BC6 06                       3         .byte 6  
      000BC7 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BCD                          5         RSHIFT:
      000BCD E6 01            [ 1] 2175         ld a,(1,x)
      000BCF 1C 00 02         [ 2] 2176         addw x,#CELLL 
      000BD2 90 93            [ 1] 2177         ldw y,x 
      000BD4 90 FE            [ 2] 2178         ldw y,(y)
      000BD6                       2179 RSHIFT1:
      000BD6 4D               [ 1] 2180         tnz a 
      000BD7 27 05            [ 1] 2181         jreq RSHIFT4 
      000BD9 90 54            [ 2] 2182         srlw y 
      000BDB 4A               [ 1] 2183         dec a 
      000BDC 20 F8            [ 2] 2184         jra RSHIFT1 
      000BDE                       2185 RSHIFT4:
      000BDE FF               [ 2] 2186         ldw (x),y 
      000BDF 81               [ 4] 2187         ret 
                                   2188 
                                   2189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2190 ;       2/      ( n -- n )
                                   2191 ;       divide  tos by 2.
                                   2192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE0                       2193         _HEADER TWOSL,2,"2/"
      000BE0 0B C6                    1         .word LINK 
                           000BE2     2         LINK=.
      000BE2 02                       3         .byte 2  
      000BE3 32 2F                    4         .ascii "2/"
      000BE5                          5         TWOSL:
      000BE5 90 93            [ 1] 2194         LDW Y,X
      000BE7 90 FE            [ 2] 2195 	LDW Y,(Y)
      000BE9 90 57            [ 2] 2196         SRAW Y
      000BEB FF               [ 2] 2197         LDW (X),Y
      000BEC 81               [ 4] 2198         RET
                                   2199 
                                   2200 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2201 ;       BL      ( -- 32 )
                                   2202 ;       Return 32,  blank character.
                                   2203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BED                       2204         _HEADER BLANK,2,"BL"
      000BED 0B E2                    1         .word LINK 
                           000BEF     2         LINK=.
      000BEF 02                       3         .byte 2  
      000BF0 42 4C                    4         .ascii "BL"
      000BF2                          5         BLANK:
      000BF2 1D 00 02         [ 2] 2205         SUBW X,#2
      000BF5 90 AE 00 20      [ 2] 2206 	LDW Y,#32
      000BF9 FF               [ 2] 2207         LDW (X),Y
      000BFA 81               [ 4] 2208         RET
                                   2209 
                                   2210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2211 ;         0     ( -- 0)
                                   2212 ;         Return 0.
                                   2213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFB                       2214         _HEADER ZERO,1,"0"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000BFB 0B EF                    1         .word LINK 
                           000BFD     2         LINK=.
      000BFD 01                       3         .byte 1  
      000BFE 30                       4         .ascii "0"
      000BFF                          5         ZERO:
      000BFF 1D 00 02         [ 2] 2215         SUBW X,#2
      000C02 90 5F            [ 1] 2216 	CLRW Y
      000C04 FF               [ 2] 2217         LDW (X),Y
      000C05 81               [ 4] 2218         RET
                                   2219 
                                   2220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2221 ;         1     ( -- 1)
                                   2222 ;         Return 1.
                                   2223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C06                       2224         _HEADER ONE,1,"1"
      000C06 0B FD                    1         .word LINK 
                           000C08     2         LINK=.
      000C08 01                       3         .byte 1  
      000C09 31                       4         .ascii "1"
      000C0A                          5         ONE:
      000C0A 1D 00 02         [ 2] 2225         SUBW X,#2
      000C0D 90 AE 00 01      [ 2] 2226 	LDW Y,#1
      000C11 FF               [ 2] 2227         LDW (X),Y
      000C12 81               [ 4] 2228         RET
                                   2229 
                                   2230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2231 ;         -1    ( -- -1)
                                   2232 ;   Return -1
                                   2233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C13                       2234         _HEADER MONE,2,"-1"
      000C13 0C 08                    1         .word LINK 
                           000C15     2         LINK=.
      000C15 02                       3         .byte 2  
      000C16 2D 31                    4         .ascii "-1"
      000C18                          5         MONE:
      000C18 1D 00 02         [ 2] 2235         SUBW X,#2
      000C1B 90 AE FF FF      [ 2] 2236 	LDW Y,#0xFFFF
      000C1F FF               [ 2] 2237         LDW (X),Y
      000C20 81               [ 4] 2238         RET
                                   2239 
                                   2240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2241 ;       >CHAR   ( c -- c )
                                   2242 ;       Filter non-printing characters.
                                   2243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C21                       2244         _HEADER TCHAR,5,">CHAR"
      000C21 0C 15                    1         .word LINK 
                           000C23     2         LINK=.
      000C23 05                       3         .byte 5  
      000C24 3E 43 48 41 52           4         .ascii ">CHAR"
      000C29                          5         TCHAR:
      000C29 E6 01            [ 1] 2245         ld a,(1,x)
      000C2B A1 20            [ 1] 2246         cp a,#32  
      000C2D 2B 05            [ 1] 2247         jrmi 1$ 
      000C2F A1 7F            [ 1] 2248         cp a,#127 
      000C31 2A 01            [ 1] 2249         jrpl 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C33 81               [ 4] 2250         ret 
      000C34 A6 5F            [ 1] 2251 1$:     ld a,#'_ 
      000C36 E7 01            [ 1] 2252         ld (1,x),a 
      000C38 81               [ 4] 2253         ret 
                                   2254 
                                   2255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2256 ;       DEPTH   ( -- n )
                                   2257 ;       Return  depth of  data stack.
                                   2258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C39                       2259         _HEADER DEPTH,5,"DEPTH"
      000C39 0C 23                    1         .word LINK 
                           000C3B     2         LINK=.
      000C3B 05                       3         .byte 5  
      000C3C 44 45 50 54 48           4         .ascii "DEPTH"
      000C41                          5         DEPTH:
      000C41 90 BE 2C         [ 2] 2260         LDW Y,SP0    ;save data stack ptr
      000C44 BF 24            [ 2] 2261 	LDW XTEMP,X
      000C46 72 B2 00 24      [ 2] 2262         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C4A 90 57            [ 2] 2263         SRAW Y    ;Y = #stack items
      000C4C 1D 00 02         [ 2] 2264 	SUBW X,#2
      000C4F FF               [ 2] 2265         LDW (X),Y     ; if neg, underflow
      000C50 81               [ 4] 2266         RET
                                   2267 
                                   2268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2269 ;       PICK    ( ... +n -- ... w )
                                   2270 ;       Copy  nth stack item to tos.
                                   2271 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C51                       2272         _HEADER PICK,4,"PICK"
      000C51 0C 3B                    1         .word LINK 
                           000C53     2         LINK=.
      000C53 04                       3         .byte 4  
      000C54 50 49 43 4B              4         .ascii "PICK"
      000C58                          5         PICK:
      000C58 90 93            [ 1] 2273         LDW Y,X   ;D = n1
      000C5A 90 FE            [ 2] 2274         LDW Y,(Y)
                                   2275 ; modified for standard compliance          
                                   2276 ; 0 PICK must be equivalent to DUP 
      000C5C 90 5C            [ 1] 2277         INCW Y 
      000C5E 90 58            [ 2] 2278         SLAW Y
      000C60 BF 24            [ 2] 2279         LDW XTEMP,X
      000C62 72 B9 00 24      [ 2] 2280         ADDW Y,XTEMP
      000C66 90 FE            [ 2] 2281         LDW Y,(Y)
      000C68 FF               [ 2] 2282         LDW (X),Y
      000C69 81               [ 4] 2283         RET
                                   2284 
                                   2285 ;; Memory access
                                   2286 
                                   2287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2288 ;       +!      ( n a -- )
                                   2289 ;       Add n to  contents at 
                                   2290 ;       address a.
                                   2291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C6A                       2292         _HEADER PSTOR,2,"+!"
      000C6A 0C 53                    1         .word LINK 
                           000C6C     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C6C 02                       3         .byte 2  
      000C6D 2B 21                    4         .ascii "+!"
      000C6F                          5         PSTOR:
      000C6F 90 93            [ 1] 2293         ldw y,x 
      000C71 90 FE            [ 2] 2294         ldw y,(y)
      000C73 90 BF 26         [ 2] 2295         ldw YTEMP,y  ; address
      000C76 90 FE            [ 2] 2296         ldw y,(y)  
      000C78 90 89            [ 2] 2297         pushw y  ; value at address 
      000C7A 90 93            [ 1] 2298         ldw y,x 
      000C7C 90 EE 02         [ 2] 2299         ldw y,(2,y) ; n 
      000C7F 72 F9 01         [ 2] 2300         addw y,(1,sp) ; n+value
      000C82 91 CF 26         [ 5] 2301         ldw [YTEMP],y ;  a!
      000C85 90 85            [ 2] 2302         popw y    ;drop local var
      000C87 1C 00 04         [ 2] 2303         addw x,#4 ; DDROP 
      000C8A 81               [ 4] 2304         ret 
                                   2305 
                                   2306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2307 ;       2!      ( d a -- )
                                   2308 ;       Store  double integer 
                                   2309 ;       to address a.
                                   2310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8B                       2311         _HEADER DSTOR,2,"2!"
      000C8B 0C 6C                    1         .word LINK 
                           000C8D     2         LINK=.
      000C8D 02                       3         .byte 2  
      000C8E 32 21                    4         .ascii "2!"
      000C90                          5         DSTOR:
      000C90 90 93            [ 1] 2312         LDW Y,X 
      000C92 89               [ 2] 2313         PUSHW X 
      000C93 FE               [ 2] 2314         LDW X,(X) ; a 
      000C94 90 EE 02         [ 2] 2315         LDW Y,(2,Y) ; dhi 
      000C97 FF               [ 2] 2316         LDW (X),Y 
      000C98 16 01            [ 2] 2317         LDW Y,(1,SP)  
      000C9A 90 EE 04         [ 2] 2318         LDW Y,(4,Y) ; dlo 
      000C9D EF 02            [ 2] 2319         LDW (2,X),Y  
      000C9F 85               [ 2] 2320         POPW X 
      000CA0 1C 00 06         [ 2] 2321         ADDW X,#3*CELLL 
      000CA3 81               [ 4] 2322         RET 
                                   2323 
                                   2324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2325 ;       2@      ( a -- d )
                                   2326 ;       Fetch double integer 
                                   2327 ;       from address a.
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA4                       2329         _HEADER DAT,2,"2@"
      000CA4 0C 8D                    1         .word LINK 
                           000CA6     2         LINK=.
      000CA6 02                       3         .byte 2  
      000CA7 32 40                    4         .ascii "2@"
      000CA9                          5         DAT:
      000CA9 90 93            [ 1] 2330         ldw y,x 
      000CAB 1D 00 02         [ 2] 2331         subw x,#CELLL 
      000CAE 90 FE            [ 2] 2332         ldw y,(y) ;address 
      000CB0 90 89            [ 2] 2333         pushw y  
      000CB2 90 FE            [ 2] 2334         ldw y,(y) ; dhi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB4 FF               [ 2] 2335         ldw (x),y 
      000CB5 90 85            [ 2] 2336         popw y 
      000CB7 90 EE 02         [ 2] 2337         ldw y,(2,y) ; dlo 
      000CBA EF 02            [ 2] 2338         ldw (2,x),y 
      000CBC 81               [ 4] 2339         ret 
                                   2340 
                                   2341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2342 ;       COUNT   ( b -- b +n )
                                   2343 ;       Return count byte of a string
                                   2344 ;       and add 1 to byte address.
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBD                       2346         _HEADER COUNT,5,"COUNT"
      000CBD 0C A6                    1         .word LINK 
                           000CBF     2         LINK=.
      000CBF 05                       3         .byte 5  
      000CC0 43 4F 55 4E 54           4         .ascii "COUNT"
      000CC5                          5         COUNT:
      000CC5 90 93            [ 1] 2347         ldw y,x 
      000CC7 90 FE            [ 2] 2348         ldw y,(y) ; address 
      000CC9 90 F6            [ 1] 2349         ld a,(y)  ; count 
      000CCB 90 5C            [ 1] 2350         incw y 
      000CCD FF               [ 2] 2351         ldw (x),y 
      000CCE 1D 00 02         [ 2] 2352         subw x,#CELLL 
      000CD1 E7 01            [ 1] 2353         ld (1,x),a 
      000CD3 7F               [ 1] 2354         clr (x)
      000CD4 81               [ 4] 2355         ret 
                                   2356 
                                   2357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2358 ;       HERE    ( -- a )
                                   2359 ;       Return  top of  variables
                                   2360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CD5                       2361         _HEADER HERE,4,"HERE"
      000CD5 0C BF                    1         .word LINK 
                           000CD7     2         LINK=.
      000CD7 04                       3         .byte 4  
      000CD8 48 45 52 45              4         .ascii "HERE"
      000CDC                          5         HERE:
      000CDC 90 AE 00 18      [ 2] 2362       	ldw y,#UVP 
      000CE0 90 FE            [ 2] 2363         ldw y,(y)
      000CE2 1D 00 02         [ 2] 2364         subw x,#CELLL 
      000CE5 FF               [ 2] 2365         ldw (x),y 
      000CE6 81               [ 4] 2366         ret 
                                   2367 
                                   2368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2369 ;       PAD     ( -- a )
                                   2370 ;       Return address of text buffer
                                   2371 ;       above  code dictionary.
                                   2372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE7                       2373         _HEADER PAD,3,"PAD"
      000CE7 0C D7                    1         .word LINK 
                           000CE9     2         LINK=.
      000CE9 03                       3         .byte 3  
      000CEA 50 41 44                 4         .ascii "PAD"
      000CED                          5         PAD:
      000CED CD 0C DC         [ 4] 2374         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000CF0                       2375         _DOLIT   80
      000CF0 CD 04 6F         [ 4]    1     CALL DOLIT 
      000CF3 00 50                    2     .word 80 
      000CF5 CC 08 3C         [ 2] 2376         JP     PLUS
                                   2377 
                                   2378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2379 ;       TIB     ( -- a )
                                   2380 ;       Return address of 
                                   2381 ;       terminal input buffer.
                                   2382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF8                       2383         _HEADER TIB,3,"TIB"
      000CF8 0C E9                    1         .word LINK 
                           000CFA     2         LINK=.
      000CFA 03                       3         .byte 3  
      000CFB 54 49 42                 4         .ascii "TIB"
      000CFE                          5         TIB:
      000CFE CD 07 0D         [ 4] 2384         CALL     NTIB
      000D01 CD 0B 68         [ 4] 2385         CALL     CELLP
      000D04 CC 04 E3         [ 2] 2386         JP     AT
                                   2387 
                                   2388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2389 ;       @EXECUTE        ( a -- )
                                   2390 ;       Execute vector stored in 
                                   2391 ;       address a.
                                   2392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D07                       2393         _HEADER ATEXE,8,"@EXECUTE"
      000D07 0C FA                    1         .word LINK 
                           000D09     2         LINK=.
      000D09 08                       3         .byte 8  
      000D0A 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D12                          5         ATEXE:
      000D12 CD 04 E3         [ 4] 2394         CALL     AT
      000D15 CD 07 CC         [ 4] 2395         CALL     QDUP    ;?address or zero
      000D18 CD 04 98         [ 4] 2396         CALL     QBRAN
      000D1B 0D 20                 2397         .word      EXE1
      000D1D CD 04 C4         [ 4] 2398         CALL     EXECU   ;execute if non-zero
      000D20 81               [ 4] 2399 EXE1:   RET     ;do nothing if zero
                                   2400 
                                   2401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2402 ;       CMOVE   ( b1 b2 u -- )
                                   2403 ;       Copy u bytes from b1 to b2.
                                   2404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D21                       2405         _HEADER CMOVE,5,"CMOVE"
      000D21 0D 09                    1         .word LINK 
                           000D23     2         LINK=.
      000D23 05                       3         .byte 5  
      000D24 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D29                          5         CMOVE:
      000D29 CD 05 E2         [ 4] 2406         CALL	TOR
      000D2C CD 04 B4         [ 4] 2407         CALL	BRAN
      000D2F 0D 49                 2408         .word	CMOV2
      000D31 CD 05 E2         [ 4] 2409 CMOV1:	CALL	TOR
      000D34 CD 06 19         [ 4] 2410         CALL	DUPP
      000D37 CD 05 01         [ 4] 2411         CALL	CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D3A CD 05 45         [ 4] 2412         CALL	RAT
      000D3D CD 04 F0         [ 4] 2413         CALL	CSTOR
      000D40 CD 0B 93         [ 4] 2414         CALL	ONEP
      000D43 CD 05 34         [ 4] 2415         CALL	RFROM
      000D46 CD 0B 93         [ 4] 2416         CALL	ONEP
      000D49 CD 04 83         [ 4] 2417 CMOV2:	CALL	DONXT
      000D4C 0D 31                 2418         .word	CMOV1
      000D4E CC 08 1C         [ 2] 2419         JP	DDROP
                                   2420 
                                   2421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2422 ;       FILL    ( b u c -- )
                                   2423 ;       Fill u bytes of character c
                                   2424 ;       to area beginning at b.
                                   2425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D51                       2426         _HEADER FILL,4,"FILL"
      000D51 0D 23                    1         .word LINK 
                           000D53     2         LINK=.
      000D53 04                       3         .byte 4  
      000D54 46 49 4C 4C              4         .ascii "FILL"
      000D58                          5         FILL:
      000D58 90 93            [ 1] 2427         ldw y,x 
      000D5A 90 E6 01         [ 1] 2428         ld a,(1,y) ; c 
      000D5D 1C 00 02         [ 2] 2429         addw x,#CELLL ; drop c 
      000D60 90 93            [ 1] 2430         ldw y,x 
      000D62 90 FE            [ 2] 2431         ldw y,(y) ; count
      000D64 90 89            [ 2] 2432         pushw y 
      000D66 1C 00 02         [ 2] 2433         addw x,#CELLL ; drop u 
      000D69 90 93            [ 1] 2434         ldw y,x 
      000D6B 1C 00 02         [ 2] 2435         addw x,#CELLL ; drop b 
      000D6E 90 FE            [ 2] 2436         ldw y,(y) ; address
      000D70 90 BF 26         [ 2] 2437         ldw YTEMP,y
      000D73 90 85            [ 2] 2438         popw y ; count 
      000D75                       2439 FILL1:  
      000D75 92 C7 26         [ 4] 2440         ld [YTEMP],a 
      000D78 3C 27            [ 1] 2441         inc YTEMP+1
      000D7A 24 02            [ 1] 2442         jrnc FILL2 
      000D7C 3C 26            [ 1] 2443         inc YTEMP
      000D7E                       2444 FILL2: 
      000D7E 90 5A            [ 2] 2445         decw y ; count 
      000D80 26 F3            [ 1] 2446         jrne FILL1  
      000D82 81               [ 4] 2447         ret 
                                   2448 
                                   2449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2450 ;       ERASE   ( b u -- )
                                   2451 ;       Erase u bytes beginning at b.
                                   2452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D83                       2453         _HEADER ERASE,5,"ERASE"
      000D83 0D 53                    1         .word LINK 
                           000D85     2         LINK=.
      000D85 05                       3         .byte 5  
      000D86 45 52 41 53 45           4         .ascii "ERASE"
      000D8B                          5         ERASE:
      000D8B 90 5F            [ 1] 2454         clrw y 
      000D8D 1D 00 02         [ 2] 2455         subw x,#CELLL 
      000D90 FF               [ 2] 2456         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000D91 CC 0D 58         [ 2] 2457         jp FILL 
                                   2458 
                                   2459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2460 ;       PACK0   ( b u a -- a )
                                   2461 ;       Build a counted string with
                                   2462 ;       u characters from b. Null fill.
                                   2463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D94                       2464         _HEADER PACKS,5,"PACK0"
      000D94 0D 85                    1         .word LINK 
                           000D96     2         LINK=.
      000D96 05                       3         .byte 5  
      000D97 50 41 43 4B 30           4         .ascii "PACK0"
      000D9C                          5         PACKS:
      000D9C CD 06 19         [ 4] 2465         CALL     DUPP
      000D9F CD 05 E2         [ 4] 2466         CALL     TOR     ;strings only on cell boundary
      000DA2 CD 08 27         [ 4] 2467         CALL     DDUP
      000DA5 CD 04 F0         [ 4] 2468         CALL     CSTOR
      000DA8 CD 0B 93         [ 4] 2469         CALL     ONEP ;save count
      000DAB CD 06 29         [ 4] 2470         CALL     SWAPP
      000DAE CD 0D 29         [ 4] 2471         CALL     CMOVE
      000DB1 CD 05 34         [ 4] 2472         CALL     RFROM
      000DB4 81               [ 4] 2473         RET
                                   2474 
                                   2475 ;; Numeric output, single precision
                                   2476 
                                   2477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2478 ;       DIGIT   ( u -- c )
                                   2479 ;       Convert digit u to a character.
                                   2480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DB5                       2481         _HEADER DIGIT,5,"DIGIT"
      000DB5 0D 96                    1         .word LINK 
                           000DB7     2         LINK=.
      000DB7 05                       3         .byte 5  
      000DB8 44 49 47 49 54           4         .ascii "DIGIT"
      000DBD                          5         DIGIT:
      000DBD CD 04 6F         [ 4] 2482         CALL	DOLIT
      000DC0 00 09                 2483         .word	9
      000DC2 CD 06 41         [ 4] 2484         CALL	OVER
      000DC5 CD 09 26         [ 4] 2485         CALL	LESS
      000DC8 CD 04 6F         [ 4] 2486         CALL	DOLIT
      000DCB 00 07                 2487         .word	7
      000DCD CD 06 76         [ 4] 2488         CALL	ANDD
      000DD0 CD 08 3C         [ 4] 2489         CALL	PLUS
      000DD3 CD 04 6F         [ 4] 2490         CALL	DOLIT
      000DD6 00 30                 2491         .word	48	;'0'
      000DD8 CC 08 3C         [ 2] 2492         JP	PLUS
                                   2493 
                                   2494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2495 ;       EXTRACT ( n base -- n c )
                                   2496 ;       Extract least significant 
                                   2497 ;       digit from n.
                                   2498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DDB                       2499         _HEADER EXTRC,7,"EXTRACT"
      000DDB 0D B7                    1         .word LINK 
                           000DDD     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DDD 07                       3         .byte 7  
      000DDE 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DE5                          5         EXTRC:
      000DE5 CD 0B FF         [ 4] 2500         CALL     ZERO
      000DE8 CD 06 29         [ 4] 2501         CALL     SWAPP
      000DEB CD 09 B1         [ 4] 2502         CALL     UMMOD
      000DEE CD 06 29         [ 4] 2503         CALL     SWAPP
      000DF1 CC 0D BD         [ 2] 2504         JP     DIGIT
                                   2505 
                                   2506 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2507 ;       <#      ( -- )
                                   2508 ;       Initiate  numeric 
                                   2509 ;       output process.
                                   2510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DF4                       2511         _HEADER BDIGS,2,"#<"
      000DF4 0D DD                    1         .word LINK 
                           000DF6     2         LINK=.
      000DF6 02                       3         .byte 2  
      000DF7 23 3C                    4         .ascii "#<"
      000DF9                          5         BDIGS:
      000DF9 CD 0C ED         [ 4] 2512         CALL     PAD
      000DFC CD 07 4F         [ 4] 2513         CALL     HLD
      000DFF CC 04 D1         [ 2] 2514         JP     STORE
                                   2515 
                                   2516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2517 ;       HOLD    ( c -- )
                                   2518 ;       Insert a character 
                                   2519 ;       into output string.
                                   2520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E02                       2521         _HEADER HOLD,4,"HOLD"
      000E02 0D F6                    1         .word LINK 
                           000E04     2         LINK=.
      000E04 04                       3         .byte 4  
      000E05 48 4F 4C 44              4         .ascii "HOLD"
      000E09                          5         HOLD:
      000E09 CD 07 4F         [ 4] 2522         CALL     HLD
      000E0C CD 04 E3         [ 4] 2523         CALL     AT
      000E0F CD 0B A0         [ 4] 2524         CALL     ONEM
      000E12 CD 06 19         [ 4] 2525         CALL     DUPP
      000E15 CD 07 4F         [ 4] 2526         CALL     HLD
      000E18 CD 04 D1         [ 4] 2527         CALL     STORE
      000E1B CC 04 F0         [ 2] 2528         JP     CSTOR
                                   2529 
                                   2530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2531 ;       #       ( u -- u )
                                   2532 ;       Extract one digit from u and
                                   2533 ;       append digit to output string.
                                   2534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E1E                       2535         _HEADER DIG,1,"#"
      000E1E 0E 04                    1         .word LINK 
                           000E20     2         LINK=.
      000E20 01                       3         .byte 1  
      000E21 23                       4         .ascii "#"
      000E22                          5         DIG:
      000E22 CD 06 DF         [ 4] 2536         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E25 CD 04 E3         [ 4] 2537         CALL     AT
      000E28 CD 0D E5         [ 4] 2538         CALL     EXTRC
      000E2B CC 0E 09         [ 2] 2539         JP     HOLD
                                   2540 
                                   2541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2542 ;       #S      ( u -- 0 )
                                   2543 ;       Convert u until all digits
                                   2544 ;       are added to output string.
                                   2545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E2E                       2546         _HEADER DIGS,2,"#S"
      000E2E 0E 20                    1         .word LINK 
                           000E30     2         LINK=.
      000E30 02                       3         .byte 2  
      000E31 23 53                    4         .ascii "#S"
      000E33                          5         DIGS:
      000E33 CD 0E 22         [ 4] 2547 DIGS1:  CALL     DIG
      000E36 CD 06 19         [ 4] 2548         CALL     DUPP
      000E39 CD 04 98         [ 4] 2549         CALL     QBRAN
      000E3C 0E 40                 2550         .word      DIGS2
      000E3E 20 F3            [ 2] 2551         JRA     DIGS1
      000E40 81               [ 4] 2552 DIGS2:  RET
                                   2553 
                                   2554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2555 ;       SIGN    ( n -- )
                                   2556 ;       Add a minus sign to
                                   2557 ;       numeric output string.
                                   2558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E41                       2559         _HEADER SIGN,4,"SIGN"
      000E41 0E 30                    1         .word LINK 
                           000E43     2         LINK=.
      000E43 04                       3         .byte 4  
      000E44 53 49 47 4E              4         .ascii "SIGN"
      000E48                          5         SIGN:
      000E48 CD 06 50         [ 4] 2560         CALL     ZLESS
      000E4B CD 04 98         [ 4] 2561         CALL     QBRAN
      000E4E 0E 58                 2562         .word      SIGN1
      000E50 CD 04 6F         [ 4] 2563         CALL     DOLIT
      000E53 00 2D                 2564         .word      45	;"-"
      000E55 CC 0E 09         [ 2] 2565         JP     HOLD
      000E58 81               [ 4] 2566 SIGN1:  RET
                                   2567 
                                   2568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2569 ;       #>      ( w -- b u )
                                   2570 ;       Prepare output string.
                                   2571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E59                       2572         _HEADER EDIGS,2,"#>"
      000E59 0E 43                    1         .word LINK 
                           000E5B     2         LINK=.
      000E5B 02                       3         .byte 2  
      000E5C 23 3E                    4         .ascii "#>"
      000E5E                          5         EDIGS:
      000E5E CD 06 0F         [ 4] 2573         CALL     DROP
      000E61 CD 07 4F         [ 4] 2574         CALL     HLD
      000E64 CD 04 E3         [ 4] 2575         CALL     AT
      000E67 CD 0C ED         [ 4] 2576         CALL     PAD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E6A CD 06 41         [ 4] 2577         CALL     OVER
      000E6D CC 08 D2         [ 2] 2578         JP     SUBB
                                   2579 
                                   2580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2581 ;       str     ( w -- b u )
                                   2582 ;       Convert a signed integer
                                   2583 ;       to a numeric string.
                                   2584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E70                       2585         _HEADER STR,3,"STR"
      000E70 0E 5B                    1         .word LINK 
                           000E72     2         LINK=.
      000E72 03                       3         .byte 3  
      000E73 53 54 52                 4         .ascii "STR"
      000E76                          5         STR:
      000E76 CD 06 19         [ 4] 2586         CALL     DUPP
      000E79 CD 05 E2         [ 4] 2587         CALL     TOR
      000E7C CD 08 EC         [ 4] 2588         CALL     ABSS
      000E7F CD 0D F9         [ 4] 2589         CALL     BDIGS
      000E82 CD 0E 33         [ 4] 2590         CALL     DIGS
      000E85 CD 05 34         [ 4] 2591         CALL     RFROM
      000E88 CD 0E 48         [ 4] 2592         CALL     SIGN
      000E8B CC 0E 5E         [ 2] 2593         JP     EDIGS
                                   2594 
                                   2595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2596 ;       HEX     ( -- )
                                   2597 ;       Use radix 16 as base for
                                   2598 ;       numeric conversions.
                                   2599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E8E                       2600         _HEADER HEX,3,"HEX"
      000E8E 0E 72                    1         .word LINK 
                           000E90     2         LINK=.
      000E90 03                       3         .byte 3  
      000E91 48 45 58                 4         .ascii "HEX"
      000E94                          5         HEX:
      000E94 CD 04 6F         [ 4] 2601         CALL     DOLIT
      000E97 00 10                 2602         .word      16
      000E99 CD 06 DF         [ 4] 2603         CALL     BASE
      000E9C CC 04 D1         [ 2] 2604         JP     STORE
                                   2605 
                                   2606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2607 ;       DECIMAL ( -- )
                                   2608 ;       Use radix 10 as base
                                   2609 ;       for numeric conversions.
                                   2610 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E9F                       2611         _HEADER DECIM,7,"DECIMAL"
      000E9F 0E 90                    1         .word LINK 
                           000EA1     2         LINK=.
      000EA1 07                       3         .byte 7  
      000EA2 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EA9                          5         DECIM:
      000EA9 CD 04 6F         [ 4] 2612         CALL     DOLIT
      000EAC 00 0A                 2613         .word      10
      000EAE CD 06 DF         [ 4] 2614         CALL     BASE
      000EB1 CC 04 D1         [ 2] 2615         JP     STORE
                                   2616 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   2617 ;; Numeric input, single precision
                                   2618 
                                   2619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2620 ;       DIGIT?  ( c base -- u t )
                                   2621 ;       Convert a character to its numeric
                                   2622 ;       value. A flag indicates success.
                                   2623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EB4                       2624         _HEADER DIGTQ,6,"DIGIT?"
      000EB4 0E A1                    1         .word LINK 
                           000EB6     2         LINK=.
      000EB6 06                       3         .byte 6  
      000EB7 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EBD                          5         DIGTQ:
      000EBD CD 05 E2         [ 4] 2625         CALL     TOR
      000EC0 CD 04 6F         [ 4] 2626         CALL     DOLIT
      000EC3 00 30                 2627         .word     48	; "0"
      000EC5 CD 08 D2         [ 4] 2628         CALL     SUBB
      000EC8 CD 04 6F         [ 4] 2629         CALL     DOLIT
      000ECB 00 09                 2630         .word      9
      000ECD CD 06 41         [ 4] 2631         CALL     OVER
      000ED0 CD 09 26         [ 4] 2632         CALL     LESS
      000ED3 CD 04 98         [ 4] 2633         CALL     QBRAN
      000ED6 0E EE                 2634         .word      DGTQ1
      000ED8 CD 04 6F         [ 4] 2635         CALL     DOLIT
      000EDB 00 07                 2636         .word      7
      000EDD CD 08 D2         [ 4] 2637         CALL     SUBB
      000EE0 CD 06 19         [ 4] 2638         CALL     DUPP
      000EE3 CD 04 6F         [ 4] 2639         CALL     DOLIT
      000EE6 00 0A                 2640         .word      10
      000EE8 CD 09 26         [ 4] 2641         CALL     LESS
      000EEB CD 06 8A         [ 4] 2642         CALL     ORR
      000EEE CD 06 19         [ 4] 2643 DGTQ1:  CALL     DUPP
      000EF1 CD 05 34         [ 4] 2644         CALL     RFROM
      000EF4 CC 09 10         [ 2] 2645         JP     ULESS
                                   2646 
                           000001  2647 .if  WANT_DOUBLE
                           000000  2648 .else 
                                   2649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2650 ;       NUMBER? ( a -- n T | a F )
                                   2651 ;       Convert a number string to
                                   2652 ;       integer. Push a flag on tos.
                                   2653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2654         _HEADER NUMBQ,7,"NUMBER?"
                                   2655         CALL     BASE
                                   2656         CALL     AT
                                   2657         CALL     TOR
                                   2658         CALL     ZERO
                                   2659         CALL     OVER
                                   2660         CALL     COUNT
                                   2661         CALL     OVER
                                   2662         CALL     CAT
                                   2663         CALL     DOLIT
                                   2664         .word     36	; "0x"
                                   2665         CALL     EQUAL
                                   2666         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   2667         .word      NUMQ1
                                   2668         CALL     HEX
                                   2669         CALL     SWAPP
                                   2670         CALL     ONEP
                                   2671         CALL     SWAPP
                                   2672         CALL     ONEM
                                   2673 NUMQ1:  CALL     OVER
                                   2674         CALL     CAT
                                   2675         CALL     DOLIT
                                   2676         .word     45	; "-"
                                   2677         CALL     EQUAL
                                   2678         CALL     TOR
                                   2679         CALL     SWAPP
                                   2680         CALL     RAT
                                   2681         CALL     SUBB
                                   2682         CALL     SWAPP
                                   2683         CALL     RAT
                                   2684         CALL     PLUS
                                   2685         CALL     QDUP
                                   2686         CALL     QBRAN
                                   2687         .word      NUMQ6
                                   2688         CALL     ONEM
                                   2689         CALL     TOR
                                   2690 NUMQ2:  CALL     DUPP
                                   2691         CALL     TOR
                                   2692         CALL     CAT
                                   2693         CALL     BASE
                                   2694         CALL     AT
                                   2695         CALL     DIGTQ
                                   2696         CALL     QBRAN
                                   2697         .word      NUMQ4
                                   2698         CALL     SWAPP
                                   2699         CALL     BASE
                                   2700         CALL     AT
                                   2701         CALL     STAR
                                   2702         CALL     PLUS
                                   2703         CALL     RFROM
                                   2704         CALL     ONEP
                                   2705         CALL     DONXT
                                   2706         .word      NUMQ2
                                   2707         CALL     RAT
                                   2708         CALL     SWAPP
                                   2709         CALL     DROP
                                   2710         CALL     QBRAN
                                   2711         .word      NUMQ3
                                   2712         CALL     NEGAT
                                   2713 NUMQ3:  CALL     SWAPP
                                   2714         JRA     NUMQ5
                                   2715 NUMQ4:  CALL     RFROM
                                   2716         CALL     RFROM
                                   2717         CALL     DDROP
                                   2718         CALL     DDROP
                                   2719         CALL     ZERO
                                   2720 NUMQ5:  CALL     DUPP
                                   2721 NUMQ6:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722         CALL     DDROP
                                   2723         CALL     RFROM
                                   2724         CALL     BASE
                                   2725         JP     STORE
                                   2726 .endif ; WANT_DOUBLE  
                                   2727 
                                   2728 ;; Basic I/O
                                   2729 
                                   2730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2731 ;       KEY     ( -- c )
                                   2732 ;       Wait for and return an
                                   2733 ;       input character.
                                   2734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EF7                       2735         _HEADER KEY,3,"KEY"
      000EF7 0E B6                    1         .word LINK 
                           000EF9     2         LINK=.
      000EF9 03                       3         .byte 3  
      000EFA 4B 45 59                 4         .ascii "KEY"
      000EFD                          5         KEY:
      000EFD 72 0B 52 30 FB   [ 2] 2736         btjf UART_SR,#UART_SR_RXNE,. 
      000F02 C6 52 31         [ 1] 2737         ld a,UART_DR 
      000F05 1D 00 02         [ 2] 2738         subw x,#CELLL 
      000F08 E7 01            [ 1] 2739         ld (1,x),a 
      000F0A 7F               [ 1] 2740         clr (x)
      000F0B 81               [ 4] 2741         ret 
                                   2742 
                                   2743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2744 ;       NUF?    ( -- t )
                                   2745 ;       Return false if no input,
                                   2746 ;       else pause and if CR return true.
                                   2747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F0C                       2748         _HEADER NUFQ,4,"NUF?"
      000F0C 0E F9                    1         .word LINK 
                           000F0E     2         LINK=.
      000F0E 04                       3         .byte 4  
      000F0F 4E 55 46 3F              4         .ascii "NUF?"
      000F13                          5         NUFQ:
      000F13 CD 04 18         [ 4] 2749         CALL     QKEY
      000F16 CD 06 19         [ 4] 2750         CALL     DUPP
      000F19 CD 04 98         [ 4] 2751         CALL     QBRAN
      000F1C 0F 2C                 2752         .word    NUFQ1
      000F1E CD 08 1C         [ 4] 2753         CALL     DDROP
      000F21 CD 0E FD         [ 4] 2754         CALL     KEY
      000F24 CD 04 6F         [ 4] 2755         CALL     DOLIT
      000F27 00 0D                 2756         .word      CRR
      000F29 CC 08 FA         [ 2] 2757         JP     EQUAL
      000F2C 81               [ 4] 2758 NUFQ1:  RET
                                   2759 
                                   2760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2761 ;       SPACE   ( -- )
                                   2762 ;       Send  blank character to
                                   2763 ;       output device.
                                   2764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F2D                       2765         _HEADER SPACE,5,"SPACE"
      000F2D 0F 0E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000F2F     2         LINK=.
      000F2F 05                       3         .byte 5  
      000F30 53 50 41 43 45           4         .ascii "SPACE"
      000F35                          5         SPACE:
      000F35 CD 0B F2         [ 4] 2766         CALL     BLANK
      000F38 CC 04 36         [ 2] 2767         JP     EMIT
                                   2768 
                                   2769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2770 ;       SPACES  ( +n -- )
                                   2771 ;       Send n spaces to output device.
                                   2772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F3B                       2773         _HEADER SPACS,6,"SPACES"
      000F3B 0F 2F                    1         .word LINK 
                           000F3D     2         LINK=.
      000F3D 06                       3         .byte 6  
      000F3E 53 50 41 43 45 53        4         .ascii "SPACES"
      000F44                          5         SPACS:
      000F44 CD 0B FF         [ 4] 2774         CALL     ZERO
      000F47 CD 09 6B         [ 4] 2775         CALL     MAX
      000F4A CD 05 E2         [ 4] 2776         CALL     TOR
      000F4D 20 03            [ 2] 2777         JRA      CHAR2
      000F4F CD 0F 35         [ 4] 2778 CHAR1:  CALL     SPACE
      000F52 CD 04 83         [ 4] 2779 CHAR2:  CALL     DONXT
      000F55 0F 4F                 2780         .word    CHAR1
      000F57 81               [ 4] 2781         RET
                                   2782 
                                   2783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2784 ;       TYPE    ( b u -- )
                                   2785 ;       Output u characters from b.
                                   2786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F58                       2787         _HEADER TYPES,4,"TYPE"
      000F58 0F 3D                    1         .word LINK 
                           000F5A     2         LINK=.
      000F5A 04                       3         .byte 4  
      000F5B 54 59 50 45              4         .ascii "TYPE"
      000F5F                          5         TYPES:
      000F5F CD 05 E2         [ 4] 2788         CALL     TOR
      000F62 20 06            [ 2] 2789         JRA     TYPE2
      000F64 CD 0C C5         [ 4] 2790 TYPE1:  CALL     COUNT 
      000F67 CD 04 36         [ 4] 2791         CALL     EMIT
      000F6A                       2792 TYPE2:  _DONXT  TYPE1
      000F6A CD 04 83         [ 4]    1     CALL DONXT 
      000F6D 0F 64                    2     .word TYPE1 
      000F6F CC 06 0F         [ 2] 2793         JP     DROP
                                   2794 
                                   2795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2796 ;       CR      ( -- )
                                   2797 ;       Output a carriage return
                                   2798 ;       and a line feed.
                                   2799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F72                       2800         _HEADER CR,2,"CR"
      000F72 0F 5A                    1         .word LINK 
                           000F74     2         LINK=.
      000F74 02                       3         .byte 2  
      000F75 43 52                    4         .ascii "CR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F77                          5         CR:
      000F77                       2801         _DOLIT  CRR 
      000F77 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F7A 00 0D                    2     .word CRR 
      000F7C CD 04 36         [ 4] 2802         CALL    EMIT
      000F7F                       2803         _DOLIT  LF
      000F7F CD 04 6F         [ 4]    1     CALL DOLIT 
      000F82 00 0A                    2     .word LF 
      000F84 CC 04 36         [ 2] 2804         JP      EMIT
                                   2805 
                                   2806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2807 ;       do$     ( -- a )
                                   2808 ;       Return  address of a compiled
                                   2809 ;       string.
                                   2810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2811 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F87                       2812 DOSTR:
      000F87 CD 05 34         [ 4] 2813         CALL     RFROM
      000F8A CD 05 45         [ 4] 2814         CALL     RAT
      000F8D CD 05 34         [ 4] 2815         CALL     RFROM
      000F90 CD 0C C5         [ 4] 2816         CALL     COUNT
      000F93 CD 08 3C         [ 4] 2817         CALL     PLUS
      000F96 CD 05 E2         [ 4] 2818         CALL     TOR
      000F99 CD 06 29         [ 4] 2819         CALL     SWAPP
      000F9C CD 05 E2         [ 4] 2820         CALL     TOR
      000F9F 81               [ 4] 2821         RET
                                   2822 
                                   2823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2824 ;       $"|     ( -- a )
                                   2825 ;       Run time routine compiled by $".
                                   2826 ;       Return address of a compiled string.
                                   2827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2828 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000FA0                       2829 STRQP:
      000FA0 CD 0F 87         [ 4] 2830         CALL     DOSTR
      000FA3 81               [ 4] 2831         RET
                                   2832 
                                   2833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2834 ;       ."|     ( -- )
                                   2835 ;       Run time routine of ." .
                                   2836 ;       Output a compiled string.
                                   2837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2838 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FA4                       2839 DOTQP:
      000FA4 CD 0F 87         [ 4] 2840         CALL     DOSTR
      000FA7 CD 0C C5         [ 4] 2841         CALL     COUNT
      000FAA CC 0F 5F         [ 2] 2842         JP     TYPES
                                   2843 
                                   2844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2845 ;       .R      ( n +n -- )
                                   2846 ;       Display an integer in a field
                                   2847 ;       of n columns, right justified.
                                   2848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FAD                       2849         _HEADER DOTR,2,".R"
      000FAD 0F 74                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                           000FAF     2         LINK=.
      000FAF 02                       3         .byte 2  
      000FB0 2E 52                    4         .ascii ".R"
      000FB2                          5         DOTR:
      000FB2 CD 05 E2         [ 4] 2850         CALL     TOR
      000FB5 CD 0E 76         [ 4] 2851         CALL     STR
      000FB8 CD 05 34         [ 4] 2852         CALL     RFROM
      000FBB CD 06 41         [ 4] 2853         CALL     OVER
      000FBE CD 08 D2         [ 4] 2854         CALL     SUBB
      000FC1 CD 0F 44         [ 4] 2855         CALL     SPACS
      000FC4 CC 0F 5F         [ 2] 2856         JP     TYPES
                                   2857 
                                   2858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2859 ;       U.R     ( u +n -- )
                                   2860 ;       Display an unsigned integer
                                   2861 ;       in n column, right justified.
                                   2862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FC7                       2863         _HEADER UDOTR,3,"U.R"
      000FC7 0F AF                    1         .word LINK 
                           000FC9     2         LINK=.
      000FC9 03                       3         .byte 3  
      000FCA 55 2E 52                 4         .ascii "U.R"
      000FCD                          5         UDOTR:
      000FCD CD 05 E2         [ 4] 2864         CALL     TOR
      000FD0 CD 0D F9         [ 4] 2865         CALL     BDIGS
      000FD3 CD 0E 33         [ 4] 2866         CALL     DIGS
      000FD6 CD 0E 5E         [ 4] 2867         CALL     EDIGS
      000FD9 CD 05 34         [ 4] 2868         CALL     RFROM
      000FDC CD 06 41         [ 4] 2869         CALL     OVER
      000FDF CD 08 D2         [ 4] 2870         CALL     SUBB
      000FE2 CD 0F 44         [ 4] 2871         CALL     SPACS
      000FE5 CC 0F 5F         [ 2] 2872         JP     TYPES
                                   2873 
                                   2874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2875 ;       U.      ( u -- )
                                   2876 ;       Display an unsigned integer
                                   2877 ;       in free format.
                                   2878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FE8                       2879         _HEADER UDOT,2,"U."
      000FE8 0F C9                    1         .word LINK 
                           000FEA     2         LINK=.
      000FEA 02                       3         .byte 2  
      000FEB 55 2E                    4         .ascii "U."
      000FED                          5         UDOT:
      000FED CD 0D F9         [ 4] 2880         CALL     BDIGS
      000FF0 CD 0E 33         [ 4] 2881         CALL     DIGS
      000FF3 CD 0E 5E         [ 4] 2882         CALL     EDIGS
      000FF6 CD 0F 35         [ 4] 2883         CALL     SPACE
      000FF9 CC 0F 5F         [ 2] 2884         JP     TYPES
                                   2885 
                                   2886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2887 ;   H. ( n -- )
                                   2888 ;   display n in hexadecimal 
                                   2889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFC                       2890         _HEADER HDOT,2,"H."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000FFC 0F EA                    1         .word LINK 
                           000FFE     2         LINK=.
      000FFE 02                       3         .byte 2  
      000FFF 48 2E                    4         .ascii "H."
      001001                          5         HDOT:
      001001 CD 06 DF         [ 4] 2891         CALL BASE 
      001004 CD 04 E3         [ 4] 2892         CALL AT 
      001007 CD 05 E2         [ 4] 2893         CALL TOR 
      00100A CD 0E 94         [ 4] 2894         CALL HEX 
      00100D CD 0F ED         [ 4] 2895         CALL UDOT 
      001010 CD 05 34         [ 4] 2896         CALL RFROM 
      001013 CD 06 DF         [ 4] 2897         CALL BASE 
      001016 CD 04 D1         [ 4] 2898         CALL STORE 
      001019 81               [ 4] 2899         RET 
                                   2900 
                                   2901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2902 ;       .       ( w -- )
                                   2903 ;       Display an integer in free
                                   2904 ;       format, preceeded by a space.
                                   2905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00101A                       2906         _HEADER DOT,1,"."
      00101A 0F FE                    1         .word LINK 
                           00101C     2         LINK=.
      00101C 01                       3         .byte 1  
      00101D 2E                       4         .ascii "."
      00101E                          5         DOT:
      00101E CD 06 DF         [ 4] 2907         CALL     BASE
      001021 CD 04 E3         [ 4] 2908         CALL     AT
      001024 CD 04 6F         [ 4] 2909         CALL     DOLIT
      001027 00 0A                 2910         .word      10
      001029 CD 06 9F         [ 4] 2911         CALL     XORR    ;?decimal
      00102C CD 04 98         [ 4] 2912         CALL     QBRAN
      00102F 10 34                 2913         .word      DOT1
      001031 CC 0F ED         [ 2] 2914         JP     UDOT
      001034 CD 0E 76         [ 4] 2915 DOT1:   CALL     STR
      001037 CD 0F 35         [ 4] 2916         CALL     SPACE
      00103A CC 0F 5F         [ 2] 2917         JP     TYPES
                                   2918 
                                   2919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2920 ;       ?       ( a -- )
                                   2921 ;       Display contents in memory cell.
                                   2922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00103D                       2923         _HEADER QUEST,1,"?"
      00103D 10 1C                    1         .word LINK 
                           00103F     2         LINK=.
      00103F 01                       3         .byte 1  
      001040 3F                       4         .ascii "?"
      001041                          5         QUEST:
      001041 CD 04 E3         [ 4] 2924         CALL     AT
      001044 CC 10 1E         [ 2] 2925         JP     DOT
                                   2926 
                                   2927 ;; Parsing
                                   2928 
                                   2929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2930 ;       parse   ( b u c -- b u delta ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   2931 ;       Scan string delimited by c.
                                   2932 ;       Return found string and its offset.
                                   2933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001047                       2934         _HEADER PARS,5,"PARS$"
      001047 10 3F                    1         .word LINK 
                           001049     2         LINK=.
      001049 05                       3         .byte 5  
      00104A 50 41 52 53 24           4         .ascii "PARS$"
      00104F                          5         PARS:
      00104F CD 06 EE         [ 4] 2935         CALL     TEMP
      001052 CD 04 D1         [ 4] 2936         CALL     STORE
      001055 CD 06 41         [ 4] 2937         CALL     OVER
      001058 CD 05 E2         [ 4] 2938         CALL     TOR
      00105B CD 06 19         [ 4] 2939         CALL     DUPP
      00105E CD 04 98         [ 4] 2940         CALL     QBRAN
      001061 11 07                 2941         .word    PARS8
      001063 CD 0B A0         [ 4] 2942         CALL     ONEM
      001066 CD 06 EE         [ 4] 2943         CALL     TEMP
      001069 CD 04 E3         [ 4] 2944         CALL     AT
      00106C CD 0B F2         [ 4] 2945         CALL     BLANK
      00106F CD 08 FA         [ 4] 2946         CALL     EQUAL
      001072 CD 04 98         [ 4] 2947         CALL     QBRAN
      001075 10 A8                 2948         .word      PARS3
      001077 CD 05 E2         [ 4] 2949         CALL     TOR
      00107A CD 0B F2         [ 4] 2950 PARS1:  CALL     BLANK
      00107D CD 06 41         [ 4] 2951         CALL     OVER
      001080 CD 05 01         [ 4] 2952         CALL     CAT     ;skip leading blanks ONLY
      001083 CD 08 D2         [ 4] 2953         CALL     SUBB
      001086 CD 06 50         [ 4] 2954         CALL     ZLESS
      001089 CD 08 75         [ 4] 2955         CALL     INVER
      00108C CD 04 98         [ 4] 2956         CALL     QBRAN
      00108F 10 A5                 2957         .word      PARS2
      001091 CD 0B 93         [ 4] 2958         CALL     ONEP
      001094 CD 04 83         [ 4] 2959         CALL     DONXT
      001097 10 7A                 2960         .word      PARS1
      001099 CD 05 34         [ 4] 2961         CALL     RFROM
      00109C CD 06 0F         [ 4] 2962         CALL     DROP
      00109F CD 0B FF         [ 4] 2963         CALL     ZERO
      0010A2 CC 06 19         [ 2] 2964         JP     DUPP
      0010A5 CD 05 34         [ 4] 2965 PARS2:  CALL     RFROM
      0010A8 CD 06 41         [ 4] 2966 PARS3:  CALL     OVER
      0010AB CD 06 29         [ 4] 2967         CALL     SWAPP
      0010AE CD 05 E2         [ 4] 2968         CALL     TOR
      0010B1 CD 06 EE         [ 4] 2969 PARS4:  CALL     TEMP
      0010B4 CD 04 E3         [ 4] 2970         CALL     AT
      0010B7 CD 06 41         [ 4] 2971         CALL     OVER
      0010BA CD 05 01         [ 4] 2972         CALL     CAT
      0010BD CD 08 D2         [ 4] 2973         CALL     SUBB    ;scan for delimiter
      0010C0 CD 06 EE         [ 4] 2974         CALL     TEMP
      0010C3 CD 04 E3         [ 4] 2975         CALL     AT
      0010C6 CD 0B F2         [ 4] 2976         CALL     BLANK
      0010C9 CD 08 FA         [ 4] 2977         CALL     EQUAL
      0010CC CD 04 98         [ 4] 2978         CALL     QBRAN
      0010CF 10 D4                 2979         .word      PARS5
      0010D1 CD 06 50         [ 4] 2980         CALL     ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0010D4 CD 04 98         [ 4] 2981 PARS5:  CALL     QBRAN
      0010D7 10 E9                 2982         .word      PARS6
      0010D9 CD 0B 93         [ 4] 2983         CALL     ONEP
      0010DC CD 04 83         [ 4] 2984         CALL     DONXT
      0010DF 10 B1                 2985         .word      PARS4
      0010E1 CD 06 19         [ 4] 2986         CALL     DUPP
      0010E4 CD 05 E2         [ 4] 2987         CALL     TOR
      0010E7 20 0F            [ 2] 2988         JRA     PARS7
      0010E9 CD 05 34         [ 4] 2989 PARS6:  CALL     RFROM
      0010EC CD 06 0F         [ 4] 2990         CALL     DROP
      0010EF CD 06 19         [ 4] 2991         CALL     DUPP
      0010F2 CD 0B 93         [ 4] 2992         CALL     ONEP
      0010F5 CD 05 E2         [ 4] 2993         CALL     TOR
      0010F8 CD 06 41         [ 4] 2994 PARS7:  CALL     OVER
      0010FB CD 08 D2         [ 4] 2995         CALL     SUBB
      0010FE CD 05 34         [ 4] 2996         CALL     RFROM
      001101 CD 05 34         [ 4] 2997         CALL     RFROM
      001104 CC 08 D2         [ 2] 2998         JP     SUBB
      001107 CD 06 41         [ 4] 2999 PARS8:  CALL     OVER
      00110A CD 05 34         [ 4] 3000         CALL     RFROM
      00110D CC 08 D2         [ 2] 3001         JP     SUBB
                                   3002 
                                   3003 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3004 ;       PARSE   ( c -- b u ; <string> )
                                   3005 ;       Scan input stream and return
                                   3006 ;       counted string delimited by c.
                                   3007 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001110                       3008         _HEADER PARSE,5,"PARSE"
      001110 10 49                    1         .word LINK 
                           001112     2         LINK=.
      001112 05                       3         .byte 5  
      001113 50 41 52 53 45           4         .ascii "PARSE"
      001118                          5         PARSE:
      001118 CD 05 E2         [ 4] 3009         CALL     TOR
      00111B CD 0C FE         [ 4] 3010         CALL     TIB
      00111E CD 06 FD         [ 4] 3011         CALL     INN
      001121 CD 04 E3         [ 4] 3012         CALL     AT
      001124 CD 08 3C         [ 4] 3013         CALL     PLUS    ;current input buffer pointer
      001127 CD 07 0D         [ 4] 3014         CALL     NTIB
      00112A CD 04 E3         [ 4] 3015         CALL     AT
      00112D CD 06 FD         [ 4] 3016         CALL     INN
      001130 CD 04 E3         [ 4] 3017         CALL     AT
      001133 CD 08 D2         [ 4] 3018         CALL     SUBB    ;remaining count
      001136 CD 05 34         [ 4] 3019         CALL     RFROM
      001139 CD 10 4F         [ 4] 3020         CALL     PARS
      00113C CD 06 FD         [ 4] 3021         CALL     INN
      00113F CC 0C 6F         [ 2] 3022         JP     PSTOR
                                   3023 
                                   3024 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3025 ;       .(      ( -- )
                                   3026 ;       Output following string up to next ) .
                                   3027 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001142                       3028         _HEADER DOTPR,IMEDD+2,".("
      001142 11 12                    1         .word LINK 
                           001144     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001144 82                       3         .byte IMEDD+2  
      001145 2E 28                    4         .ascii ".("
      001147                          5         DOTPR:
      001147 CD 04 6F         [ 4] 3029         CALL     DOLIT
      00114A 00 29                 3030         .word     41	; ")"
      00114C CD 11 18         [ 4] 3031         CALL     PARSE
      00114F CC 0F 5F         [ 2] 3032         JP     TYPES
                                   3033 
                                   3034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3035 ;       (       ( -- )
                                   3036 ;       Ignore following string up to next ).
                                   3037 ;       A comment.
                                   3038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001152                       3039         _HEADER PAREN,IMEDD+1,"("
      001152 11 44                    1         .word LINK 
                           001154     2         LINK=.
      001154 81                       3         .byte IMEDD+1  
      001155 28                       4         .ascii "("
      001156                          5         PAREN:
      001156 CD 04 6F         [ 4] 3040         CALL     DOLIT
      001159 00 29                 3041         .word     41	; ")"
      00115B CD 11 18         [ 4] 3042         CALL     PARSE
      00115E CC 08 1C         [ 2] 3043         JP     DDROP
                                   3044 
                                   3045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3046 ;       \       ( -- )
                                   3047 ;       Ignore following text till
                                   3048 ;       end of line.
                                   3049 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001161                       3050         _HEADER BKSLA,IMEDD+1,"\\"
      001161 11 54                    1         .word LINK 
                           001163     2         LINK=.
      001163 81                       3         .byte IMEDD+1  
      001164 5C 5C                    4         .ascii "\\"
      001166                          5         BKSLA:
      001166 90 AE 00 0E      [ 2] 3051         ldw y,#UCTIB ; #TIB  
      00116A 90 FE            [ 2] 3052         ldw y,(y)
      00116C 90 89            [ 2] 3053         pushw y ; count in TIB 
      00116E 90 AE 00 0C      [ 2] 3054         ldw y,#UINN ; >IN 
      001172 90 BF 26         [ 2] 3055         ldw YTEMP,y
      001175 90 85            [ 2] 3056         popw y 
      001177 91 CF 26         [ 5] 3057         ldw [YTEMP],y
      00117A 81               [ 4] 3058         ret 
                                   3059 
                                   3060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3061 ;       WORD    ( c -- a ; <string> )
                                   3062 ;       Parse a word from input stream
                                   3063 ;       and copy it to code dictionary.
                                   3064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00117B                       3065         _HEADER WORDD,4,"WORD"
      00117B 11 63                    1         .word LINK 
                           00117D     2         LINK=.
      00117D 04                       3         .byte 4  
      00117E 57 4F 52 44              4         .ascii "WORD"
      001182                          5         WORDD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001182 CD 11 18         [ 4] 3066         CALL     PARSE
      001185 CD 0C DC         [ 4] 3067         CALL     HERE
      001188 CD 0B 68         [ 4] 3068         CALL     CELLP
                           000000  3069 .IF CASE_SENSE 
                                   3070         JP      PACKS 
                           000001  3071 .ELSE                 
      00118B CD 0D 9C         [ 4] 3072         CALL     PACKS
                                   3073 ; uppercase TOKEN 
      00118E CD 06 19         [ 4] 3074         CALL    DUPP 
      001191 CD 0C C5         [ 4] 3075         CALL    COUNT 
      001194 CD 05 E2         [ 4] 3076         CALL    TOR 
      001197 CD 04 B4         [ 4] 3077         CALL    BRAN 
      00119A 11 C8                 3078         .word   UPPER2  
      00119C                       3079 UPPER:
      00119C CD 06 19         [ 4] 3080         CALL    DUPP 
      00119F CD 05 01         [ 4] 3081         CALL    CAT
      0011A2 CD 06 19         [ 4] 3082         CALL    DUPP 
      0011A5 CD 04 6F         [ 4] 3083         CALL   DOLIT
      0011A8 00 61                 3084         .word   'a' 
      0011AA CD 04 6F         [ 4] 3085         CALL    DOLIT
      0011AD 00 7B                 3086         .word   'z'+1 
      0011AF CD 09 96         [ 4] 3087         CALL   WITHI 
      0011B2 CD 04 98         [ 4] 3088         CALL   QBRAN
      0011B5 11 BF                 3089         .word  UPPER1  
      0011B7 CD 04 6F         [ 4] 3090         CALL    DOLIT 
      0011BA 00 DF                 3091         .word   0xDF 
      0011BC CD 06 76         [ 4] 3092         CALL    ANDD 
      0011BF                       3093 UPPER1:
      0011BF CD 06 41         [ 4] 3094         CALL    OVER 
      0011C2 CD 04 F0         [ 4] 3095         CALL    CSTOR          
      0011C5 CD 0B 93         [ 4] 3096         CALL    ONEP 
      0011C8                       3097 UPPER2: 
      0011C8 CD 04 83         [ 4] 3098         CALL    DONXT
      0011CB 11 9C                 3099         .word   UPPER  
      0011CD CD 06 0F         [ 4] 3100         CALL    DROP  
      0011D0 81               [ 4] 3101         RET 
                                   3102 .ENDIF 
                                   3103 
                                   3104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3105 ;       TOKEN   ( -- a ; <string> )
                                   3106 ;       Parse a word from input stream
                                   3107 ;       and copy it to name dictionary.
                                   3108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011D1                       3109         _HEADER TOKEN,5,"TOKEN"
      0011D1 11 7D                    1         .word LINK 
                           0011D3     2         LINK=.
      0011D3 05                       3         .byte 5  
      0011D4 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011D9                          5         TOKEN:
      0011D9 CD 0B F2         [ 4] 3110         CALL     BLANK
      0011DC CC 11 82         [ 2] 3111         JP     WORDD
                                   3112 
                                   3113 ;; Dictionary search
                                   3114 
                                   3115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3116 ;       NAME>   ( na -- ca )
                                   3117 ;       Return a code address given
                                   3118 ;       a name address.
                                   3119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011DF                       3120         _HEADER NAMET,5,"NAME>"
      0011DF 11 D3                    1         .word LINK 
                           0011E1     2         LINK=.
      0011E1 05                       3         .byte 5  
      0011E2 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011E7                          5         NAMET:
      0011E7 CD 0C C5         [ 4] 3121         CALL     COUNT
      0011EA CD 04 6F         [ 4] 3122         CALL     DOLIT
      0011ED 00 1F                 3123         .word      31
      0011EF CD 06 76         [ 4] 3124         CALL     ANDD
      0011F2 CC 08 3C         [ 2] 3125         JP     PLUS
                                   3126 
                                   3127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3128 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3129 ;       Compare u cells in two
                                   3130 ;       strings. Return 0 if identical.
                                   3131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011F5                       3132         _HEADER SAMEQ,5,"SAME?"
      0011F5 11 E1                    1         .word LINK 
                           0011F7     2         LINK=.
      0011F7 05                       3         .byte 5  
      0011F8 53 41 4D 45 3F           4         .ascii "SAME?"
      0011FD                          5         SAMEQ:
      0011FD CD 0B A0         [ 4] 3133         CALL     ONEM
      001200 CD 05 E2         [ 4] 3134         CALL     TOR
      001203 20 29            [ 2] 3135         JRA     SAME2
      001205 CD 06 41         [ 4] 3136 SAME1:  CALL     OVER
      001208 CD 05 45         [ 4] 3137         CALL     RAT
      00120B CD 08 3C         [ 4] 3138         CALL     PLUS
      00120E CD 05 01         [ 4] 3139         CALL     CAT
      001211 CD 06 41         [ 4] 3140         CALL     OVER
      001214 CD 05 45         [ 4] 3141         CALL     RAT
      001217 CD 08 3C         [ 4] 3142         CALL     PLUS
      00121A CD 05 01         [ 4] 3143         CALL     CAT
      00121D CD 08 D2         [ 4] 3144         CALL     SUBB
      001220 CD 07 CC         [ 4] 3145         CALL     QDUP
      001223 CD 04 98         [ 4] 3146         CALL     QBRAN
      001226 12 2E                 3147         .word      SAME2
      001228 CD 05 34         [ 4] 3148         CALL     RFROM
      00122B CC 06 0F         [ 2] 3149         JP     DROP
      00122E CD 04 83         [ 4] 3150 SAME2:  CALL     DONXT
      001231 12 05                 3151         .word      SAME1
      001233 CC 0B FF         [ 2] 3152         JP     ZERO
                                   3153 
                                   3154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3155 ;       find    ( a va -- ca na | a F )
                                   3156 ;       Search vocabulary for string.
                                   3157 ;       Return ca and na if succeeded.
                                   3158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001236                       3159         _HEADER FIND,4,"FIND"
      001236 11 F7                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                           001238     2         LINK=.
      001238 04                       3         .byte 4  
      001239 46 49 4E 44              4         .ascii "FIND"
      00123D                          5         FIND:
      00123D CD 06 29         [ 4] 3160         CALL     SWAPP
      001240 CD 06 19         [ 4] 3161         CALL     DUPP
      001243 CD 05 01         [ 4] 3162         CALL     CAT
      001246 CD 06 EE         [ 4] 3163         CALL     TEMP
      001249 CD 04 D1         [ 4] 3164         CALL     STORE
      00124C CD 06 19         [ 4] 3165         CALL     DUPP
      00124F CD 04 E3         [ 4] 3166         CALL     AT
      001252 CD 05 E2         [ 4] 3167         CALL     TOR
      001255 CD 0B 68         [ 4] 3168         CALL     CELLP
      001258 CD 06 29         [ 4] 3169         CALL     SWAPP
      00125B CD 04 E3         [ 4] 3170 FIND1:  CALL     AT
      00125E CD 06 19         [ 4] 3171         CALL     DUPP
      001261 CD 04 98         [ 4] 3172         CALL     QBRAN
      001264 12 9A                 3173         .word      FIND6
      001266 CD 06 19         [ 4] 3174         CALL     DUPP
      001269 CD 04 E3         [ 4] 3175         CALL     AT
      00126C CD 04 6F         [ 4] 3176         CALL     DOLIT
      00126F 1F 7F                 3177         .word      MASKK
      001271 CD 06 76         [ 4] 3178         CALL     ANDD
      001274 CD 05 45         [ 4] 3179         CALL     RAT
      001277 CD 06 9F         [ 4] 3180         CALL     XORR
      00127A CD 04 98         [ 4] 3181         CALL     QBRAN
      00127D 12 89                 3182         .word      FIND2
      00127F CD 0B 68         [ 4] 3183         CALL     CELLP
      001282 CD 04 6F         [ 4] 3184         CALL     DOLIT
      001285 FF FF                 3185         .word     0xFFFF
      001287 20 0C            [ 2] 3186         JRA     FIND3
      001289 CD 0B 68         [ 4] 3187 FIND2:  CALL     CELLP
      00128C CD 06 EE         [ 4] 3188         CALL     TEMP
      00128F CD 04 E3         [ 4] 3189         CALL     AT
      001292 CD 11 FD         [ 4] 3190         CALL     SAMEQ
      001295 CD 04 B4         [ 4] 3191 FIND3:  CALL     BRAN
      001298 12 A9                 3192         .word      FIND4
      00129A CD 05 34         [ 4] 3193 FIND6:  CALL     RFROM
      00129D CD 06 0F         [ 4] 3194         CALL     DROP
      0012A0 CD 06 29         [ 4] 3195         CALL     SWAPP
      0012A3 CD 0B 77         [ 4] 3196         CALL     CELLM
      0012A6 CC 06 29         [ 2] 3197         JP     SWAPP
      0012A9 CD 04 98         [ 4] 3198 FIND4:  CALL     QBRAN
      0012AC 12 B6                 3199         .word      FIND5
      0012AE CD 0B 77         [ 4] 3200         CALL     CELLM
      0012B1 CD 0B 77         [ 4] 3201         CALL     CELLM
      0012B4 20 A5            [ 2] 3202         JRA     FIND1
      0012B6 CD 05 34         [ 4] 3203 FIND5:  CALL     RFROM
      0012B9 CD 06 0F         [ 4] 3204         CALL     DROP
      0012BC CD 06 29         [ 4] 3205         CALL     SWAPP
      0012BF CD 06 0F         [ 4] 3206         CALL     DROP
      0012C2 CD 0B 77         [ 4] 3207         CALL     CELLM
      0012C5 CD 06 19         [ 4] 3208         CALL     DUPP
      0012C8 CD 11 E7         [ 4] 3209         CALL     NAMET
      0012CB CC 06 29         [ 2] 3210         JP     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3211 
                                   3212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3213 ;       NAME?   ( a -- ca na | a F )
                                   3214 ;       Search vocabularies for a string.
                                   3215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012CE                       3216         _HEADER NAMEQ,5,"NAME?"
      0012CE 12 38                    1         .word LINK 
                           0012D0     2         LINK=.
      0012D0 05                       3         .byte 5  
      0012D1 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012D6                          5         NAMEQ:
      0012D6 CD 07 62         [ 4] 3217         CALL   CNTXT
      0012D9 CC 12 3D         [ 2] 3218         JP     FIND
                                   3219 
                                   3220 ;; Terminal response
                                   3221 
                                   3222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3223 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3224 ;       Backup cursor by one character.
                                   3225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012DC                       3226         _HEADER BKSP,2,"^H"
      0012DC 12 D0                    1         .word LINK 
                           0012DE     2         LINK=.
      0012DE 02                       3         .byte 2  
      0012DF 5E 48                    4         .ascii "^H"
      0012E1                          5         BKSP:
      0012E1 CD 05 E2         [ 4] 3227         CALL     TOR
      0012E4 CD 06 41         [ 4] 3228         CALL     OVER
      0012E7 CD 05 34         [ 4] 3229         CALL     RFROM
      0012EA CD 06 29         [ 4] 3230         CALL     SWAPP
      0012ED CD 06 41         [ 4] 3231         CALL     OVER
      0012F0 CD 06 9F         [ 4] 3232         CALL     XORR
      0012F3 CD 04 98         [ 4] 3233         CALL     QBRAN
      0012F6 13 11                 3234         .word      BACK1
      0012F8 CD 04 6F         [ 4] 3235         CALL     DOLIT
      0012FB 00 08                 3236         .word      BKSPP
      0012FD CD 04 36         [ 4] 3237         CALL     EMIT
      001300 CD 0B A0         [ 4] 3238         CALL     ONEM
      001303 CD 0B F2         [ 4] 3239         CALL     BLANK
      001306 CD 04 36         [ 4] 3240         CALL     EMIT
      001309 CD 04 6F         [ 4] 3241         CALL     DOLIT
      00130C 00 08                 3242         .word      BKSPP
      00130E CC 04 36         [ 2] 3243         JP     EMIT
      001311 81               [ 4] 3244 BACK1:  RET
                                   3245 
                                   3246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3247 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3248 ;       Accept and echo key stroke
                                   3249 ;       and bump cursor.
                                   3250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001312                       3251         _HEADER TAP,3,"TAP"
      001312 12 DE                    1         .word LINK 
                           001314     2         LINK=.
      001314 03                       3         .byte 3  
      001315 54 41 50                 4         .ascii "TAP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001318                          5         TAP:
      001318 CD 06 19         [ 4] 3252         CALL     DUPP
      00131B CD 04 36         [ 4] 3253         CALL     EMIT
      00131E CD 06 41         [ 4] 3254         CALL     OVER
      001321 CD 04 F0         [ 4] 3255         CALL     CSTOR
      001324 CC 0B 93         [ 2] 3256         JP     ONEP
                                   3257 
                                   3258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3259 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3260 ;       Process a key stroke,
                                   3261 ;       CR,LF or backspace.
                                   3262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001327                       3263         _HEADER KTAP,4,"KTAP"
      001327 13 14                    1         .word LINK 
                           001329     2         LINK=.
      001329 04                       3         .byte 4  
      00132A 4B 54 41 50              4         .ascii "KTAP"
      00132E                          5         KTAP:
      00132E CD 06 19         [ 4] 3264         CALL     DUPP
      001331 CD 04 6F         [ 4] 3265         CALL     DOLIT
                           000001  3266 .if EOL_CR
      001334 00 0D                 3267         .word   CRR
                           000000  3268 .else ; EOL_LF 
                                   3269         .word   LF
                                   3270 .endif 
      001336 CD 06 9F         [ 4] 3271         CALL     XORR
      001339 CD 04 98         [ 4] 3272         CALL     QBRAN
      00133C 13 54                 3273         .word      KTAP2
      00133E CD 04 6F         [ 4] 3274         CALL     DOLIT
      001341 00 08                 3275         .word      BKSPP
      001343 CD 06 9F         [ 4] 3276         CALL     XORR
      001346 CD 04 98         [ 4] 3277         CALL     QBRAN
      001349 13 51                 3278         .word      KTAP1
      00134B CD 0B F2         [ 4] 3279         CALL     BLANK
      00134E CC 13 18         [ 2] 3280         JP     TAP
      001351 CC 12 E1         [ 2] 3281 KTAP1:  JP     BKSP
      001354 CD 06 0F         [ 4] 3282 KTAP2:  CALL     DROP
      001357 CD 06 29         [ 4] 3283         CALL     SWAPP
      00135A CD 06 0F         [ 4] 3284         CALL     DROP
      00135D CC 06 19         [ 2] 3285         JP     DUPP
                                   3286 
                                   3287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3288 ;       accept  ( b u -- b u )
                                   3289 ;       Accept characters to input
                                   3290 ;       buffer. Return with actual count.
                                   3291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001360                       3292         _HEADER ACCEP,6,"ACCEPT"
      001360 13 29                    1         .word LINK 
                           001362     2         LINK=.
      001362 06                       3         .byte 6  
      001363 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001369                          5         ACCEP:
      001369 CD 06 41         [ 4] 3293         CALL     OVER
      00136C CD 08 3C         [ 4] 3294         CALL     PLUS
      00136F CD 06 41         [ 4] 3295         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001372 CD 08 27         [ 4] 3296 ACCP1:  CALL     DDUP
      001375 CD 06 9F         [ 4] 3297         CALL     XORR
      001378 CD 04 98         [ 4] 3298         CALL     QBRAN
      00137B 13 9D                 3299         .word      ACCP4
      00137D CD 0E FD         [ 4] 3300         CALL     KEY
      001380 CD 06 19         [ 4] 3301         CALL     DUPP
      001383 CD 0B F2         [ 4] 3302         CALL     BLANK
      001386 CD 04 6F         [ 4] 3303         CALL     DOLIT
      001389 00 7F                 3304         .word      127
      00138B CD 09 96         [ 4] 3305         CALL     WITHI
      00138E CD 04 98         [ 4] 3306         CALL     QBRAN
      001391 13 98                 3307         .word      ACCP2
      001393 CD 13 18         [ 4] 3308         CALL     TAP
      001396 20 03            [ 2] 3309         JRA     ACCP3
      001398 CD 13 2E         [ 4] 3310 ACCP2:  CALL     KTAP
      00139B 20 D5            [ 2] 3311 ACCP3:  JRA     ACCP1
      00139D CD 06 0F         [ 4] 3312 ACCP4:  CALL     DROP
      0013A0 CD 06 41         [ 4] 3313         CALL     OVER
      0013A3 CC 08 D2         [ 2] 3314         JP     SUBB
                                   3315 
                                   3316 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3317 ;       QUERY   ( -- )
                                   3318 ;       Accept input stream to
                                   3319 ;       terminal input buffer.
                                   3320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013A6                       3321         _HEADER QUERY,5,"QUERY"
      0013A6 13 62                    1         .word LINK 
                           0013A8     2         LINK=.
      0013A8 05                       3         .byte 5  
      0013A9 51 55 45 52 59           4         .ascii "QUERY"
      0013AE                          5         QUERY:
      0013AE CD 0C FE         [ 4] 3322         CALL     TIB
      0013B1 CD 04 6F         [ 4] 3323         CALL     DOLIT
      0013B4 00 50                 3324         .word      80
      0013B6 CD 13 69         [ 4] 3325         CALL     ACCEP
      0013B9 CD 07 0D         [ 4] 3326         CALL     NTIB
      0013BC CD 04 D1         [ 4] 3327         CALL     STORE
      0013BF CD 06 0F         [ 4] 3328         CALL     DROP
      0013C2 CD 0B FF         [ 4] 3329         CALL     ZERO
      0013C5 CD 06 FD         [ 4] 3330         CALL     INN
      0013C8 CC 04 D1         [ 2] 3331         JP     STORE
                                   3332 
                                   3333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3334 ;       ABORT   ( -- )
                                   3335 ;       Reset data stack and
                                   3336 ;       jump to QUIT.
                                   3337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013CB                       3338         _HEADER ABORT,5,"ABORT"
      0013CB 13 A8                    1         .word LINK 
                           0013CD     2         LINK=.
      0013CD 05                       3         .byte 5  
      0013CE 41 42 4F 52 54           4         .ascii "ABORT"
      0013D3                          5         ABORT:
      0013D3 CD 14 CA         [ 4] 3339         CALL     PRESE
      0013D6 CC 14 E7         [ 2] 3340         JP     QUIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3341 
                                   3342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3343 ;       abort"  ( f -- )
                                   3344 ;       Run time routine of ABORT".
                                   3345 ;       Abort with a message.
                                   3346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013D9                       3347         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013D9 13 CD                    1         .word LINK 
                           0013DB     2         LINK=.
      0013DB 46                       3         .byte COMPO+6  
      0013DC 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013E2                          5         ABORQ:
      0013E2 CD 04 98         [ 4] 3348         CALL     QBRAN
      0013E5 14 01                 3349         .word      ABOR2   ;text flag
      0013E7 CD 0F 87         [ 4] 3350         CALL     DOSTR
      0013EA CD 0F 35         [ 4] 3351 ABOR1:  CALL     SPACE
      0013ED CD 0C C5         [ 4] 3352         CALL     COUNT
      0013F0 CD 0F 5F         [ 4] 3353         CALL     TYPES
      0013F3 CD 04 6F         [ 4] 3354         CALL     DOLIT
      0013F6 00 3F                 3355         .word     63 ; "?"
      0013F8 CD 04 36         [ 4] 3356         CALL     EMIT
      0013FB CD 0F 77         [ 4] 3357         CALL     CR
      0013FE CC 13 D3         [ 2] 3358         JP     ABORT   ;pass error string
      001401 CD 0F 87         [ 4] 3359 ABOR2:  CALL     DOSTR
      001404 CC 06 0F         [ 2] 3360         JP     DROP
                                   3361 
                                   3362 ;; The text interpreter
                                   3363 
                                   3364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3365 ;       $INTERPRET      ( a -- )
                                   3366 ;       Interpret a word. If failed,
                                   3367 ;       try to convert it to an integer.
                                   3368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001407                       3369         _HEADER INTER,10,"$INTERPRET"
      001407 13 DB                    1         .word LINK 
                           001409     2         LINK=.
      001409 0A                       3         .byte 10  
      00140A 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001414                          5         INTER:
      001414 CD 12 D6         [ 4] 3370         CALL     NAMEQ
      001417 CD 07 CC         [ 4] 3371         CALL     QDUP    ;?defined
      00141A CD 04 98         [ 4] 3372         CALL     QBRAN
      00141D 14 3E                 3373         .word      INTE1
      00141F CD 04 E3         [ 4] 3374         CALL     AT
      001422 CD 04 6F         [ 4] 3375         CALL     DOLIT
      001425 40 00                 3376 	.word       0x4000	; COMPO*256
      001427 CD 06 76         [ 4] 3377         CALL     ANDD    ;?compile only lexicon bits
      00142A CD 13 E2         [ 4] 3378         CALL     ABORQ
      00142D 0D                    3379         .byte      13
      00142E 20 63 6F 6D 70 69 6C  3380         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00143B CC 04 C4         [ 2] 3381         JP     EXECU
      00143E CD 25 7E         [ 4] 3382 INTE1:  CALL     NUMBQ   ;convert a number
      001441 CD 04 98         [ 4] 3383         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001444 13 EA                 3384         .word    ABOR1
      001446 81               [ 4] 3385         RET
                                   3386 
                                   3387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3388 ;       [       ( -- )
                                   3389 ;       Start  text interpreter.
                                   3390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001447                       3391         _HEADER LBRAC,IMEDD+1,"["
      001447 14 09                    1         .word LINK 
                           001449     2         LINK=.
      001449 81                       3         .byte IMEDD+1  
      00144A 5B                       4         .ascii "["
      00144B                          5         LBRAC:
      00144B CD 04 6F         [ 4] 3392         CALL   DOLIT
      00144E 14 14                 3393         .word  INTER
      001450 CD 07 40         [ 4] 3394         CALL   TEVAL
      001453 CC 04 D1         [ 2] 3395         JP     STORE
                                   3396 
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3398 ;       .OK     ( -- )
                                   3399 ;       Display 'ok' while interpreting.
                                   3400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001456                       3401         _HEADER DOTOK,3,".OK"
      001456 14 49                    1         .word LINK 
                           001458     2         LINK=.
      001458 03                       3         .byte 3  
      001459 2E 4F 4B                 4         .ascii ".OK"
      00145C                          5         DOTOK:
      00145C CD 04 6F         [ 4] 3402         CALL     DOLIT
      00145F 14 14                 3403         .word      INTER
      001461 CD 07 40         [ 4] 3404         CALL     TEVAL
      001464 CD 04 E3         [ 4] 3405         CALL     AT
      001467 CD 08 FA         [ 4] 3406         CALL     EQUAL
      00146A CD 04 98         [ 4] 3407         CALL     QBRAN
      00146D 14 76                 3408         .word      DOTO1
      00146F CD 0F A4         [ 4] 3409         CALL     DOTQP
      001472 03                    3410         .byte      3
      001473 20 6F 6B              3411         .ascii     " ok"
      001476 CC 0F 77         [ 2] 3412 DOTO1:  JP     CR
                                   3413 
                                   3414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3415 ;       ?STACK  ( -- )
                                   3416 ;       Abort if stack underflows.
                                   3417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001479                       3418         _HEADER QSTAC,6,"?STACK"
      001479 14 58                    1         .word LINK 
                           00147B     2         LINK=.
      00147B 06                       3         .byte 6  
      00147C 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001482                          5         QSTAC:
      001482 CD 0C 41         [ 4] 3419         CALL     DEPTH
      001485 CD 06 50         [ 4] 3420         CALL     ZLESS   ;check only for underflow
      001488 CD 13 E2         [ 4] 3421         CALL     ABORQ
      00148B 0B                    3422         .byte      11
      00148C 20 75 6E 64 65 72 66  3423         .ascii     " underflow "
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



             6C 6F 77 20
      001497 81               [ 4] 3424         RET
                                   3425 
                                   3426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3427 ;       EVAL    ( -- )
                                   3428 ;       Interpret  input stream.
                                   3429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001498                       3430         _HEADER EVAL,4,"EVAL"
      001498 14 7B                    1         .word LINK 
                           00149A     2         LINK=.
      00149A 04                       3         .byte 4  
      00149B 45 56 41 4C              4         .ascii "EVAL"
      00149F                          5         EVAL:
      00149F CD 11 D9         [ 4] 3431 EVAL1:  CALL     TOKEN
      0014A2 CD 06 19         [ 4] 3432         CALL     DUPP
      0014A5 CD 05 01         [ 4] 3433         CALL     CAT     ;?input stream empty
      0014A8 CD 04 98         [ 4] 3434         CALL     QBRAN
      0014AB 14 BB                 3435         .word    EVAL2
      0014AD CD 07 40         [ 4] 3436         CALL     TEVAL
      0014B0 CD 0D 12         [ 4] 3437         CALL     ATEXE
      0014B3 CD 14 82         [ 4] 3438         CALL     QSTAC   ;evaluate input, check stack
      0014B6 CD 04 B4         [ 4] 3439         CALL     BRAN
      0014B9 14 9F                 3440         .word    EVAL1
      0014BB CD 06 0F         [ 4] 3441 EVAL2:  CALL     DROP
      0014BE CC 14 5C         [ 2] 3442         JP       DOTOK
                                   3443 
                                   3444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3445 ;       PRESET  ( -- )
                                   3446 ;       Reset data stack pointer and
                                   3447 ;       terminal input buffer.
                                   3448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014C1                       3449         _HEADER PRESE,6,"PRESET"
      0014C1 14 9A                    1         .word LINK 
                           0014C3     2         LINK=.
      0014C3 06                       3         .byte 6  
      0014C4 50 52 45 53 45 54        4         .ascii "PRESET"
      0014CA                          5         PRESE:
      0014CA CD 04 6F         [ 4] 3450         CALL     DOLIT
      0014CD 16 80                 3451         .word      SPP
      0014CF CD 06 06         [ 4] 3452         CALL     SPSTO
      0014D2 CD 04 6F         [ 4] 3453         CALL     DOLIT
      0014D5 17 00                 3454         .word      TIBB
      0014D7 CD 07 0D         [ 4] 3455         CALL     NTIB
      0014DA CD 0B 68         [ 4] 3456         CALL     CELLP
      0014DD CC 04 D1         [ 2] 3457         JP     STORE
                                   3458 
                                   3459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3460 ;       QUIT    ( -- )
                                   3461 ;       Reset return stack pointer
                                   3462 ;       and start text interpreter.
                                   3463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014E0                       3464         _HEADER QUIT,4,"QUIT"
      0014E0 14 C3                    1         .word LINK 
                           0014E2     2         LINK=.
      0014E2 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014E3 51 55 49 54              4         .ascii "QUIT"
      0014E7                          5         QUIT:
      0014E7 CD 04 6F         [ 4] 3465         CALL     DOLIT
      0014EA 17 FF                 3466         .word      RPP
      0014EC CD 05 1E         [ 4] 3467         CALL     RPSTO   ;reset return stack pointer
      0014EF CD 14 4B         [ 4] 3468 QUIT1:  CALL     LBRAC   ;start interpretation
      0014F2 CD 13 AE         [ 4] 3469 QUIT2:  CALL     QUERY   ;get input
      0014F5 CD 14 9F         [ 4] 3470         CALL     EVAL
      0014F8 20 F8            [ 2] 3471         JRA     QUIT2   ;continue till error
                                   3472 
                                   3473 ;; The compiler
                                   3474 
                                   3475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3476 ;       '       ( -- ca )
                                   3477 ;       Search vocabularies for
                                   3478 ;       next word in input stream.
                                   3479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014FA                       3480         _HEADER TICK,1,"'"
      0014FA 14 E2                    1         .word LINK 
                           0014FC     2         LINK=.
      0014FC 01                       3         .byte 1  
      0014FD 27                       4         .ascii "'"
      0014FE                          5         TICK:
      0014FE CD 11 D9         [ 4] 3481         CALL     TOKEN
      001501 CD 12 D6         [ 4] 3482         CALL     NAMEQ   ;?defined
      001504 CD 04 98         [ 4] 3483         CALL     QBRAN
      001507 13 EA                 3484         .word      ABOR1
      001509 81               [ 4] 3485         RET     ;yes, push code address
                                   3486 
                                   3487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3488 ;       ALLOT   ( n -- )
                                   3489 ;       Allocate n bytes to RAM 
                                   3490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00150A                       3491         _HEADER ALLOT,5,"ALLOT"
      00150A 14 FC                    1         .word LINK 
                           00150C     2         LINK=.
      00150C 05                       3         .byte 5  
      00150D 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001512                          5         ALLOT:
      001512 CD 07 70         [ 4] 3492         CALL     VPP
                                   3493 ; must update APP_VP each time VP is modidied
      001515 CD 0C 6F         [ 4] 3494         call PSTOR 
      001518 CC 1C CA         [ 2] 3495         jp UPDATVP 
                                   3496 
                                   3497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3498 ;       ,       ( w -- )
                                   3499 ;         Compile an integer into
                                   3500 ;         variable space.
                                   3501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00151B                       3502         _HEADER COMMA,1,^/"\,"/
      00151B 15 0C                    1         .word LINK 
                           00151D     2         LINK=.
      00151D 01                       3         .byte 1  
      00151E 5C 2C                    4         .ascii "\,"
      001520                          5         COMMA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001520 CD 0C DC         [ 4] 3503         CALL     HERE
      001523 CD 06 19         [ 4] 3504         CALL     DUPP
      001526 CD 0B 68         [ 4] 3505         CALL     CELLP   ;cell boundary
      001529 CD 07 70         [ 4] 3506         CALL     VPP
      00152C CD 04 D1         [ 4] 3507         CALL     STORE
      00152F CC 04 D1         [ 2] 3508         JP     STORE
                                   3509 
                                   3510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3511 ;       C,      ( c -- )
                                   3512 ;       Compile a byte into
                                   3513 ;       variables space.
                                   3514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001532                       3515         _HEADER CCOMMA,2,^/"C,"/
      001532 15 1D                    1         .word LINK 
                           001534     2         LINK=.
      001534 02                       3         .byte 2  
      001535 43 2C                    4         .ascii "C,"
      001537                          5         CCOMMA:
      001537 CD 0C DC         [ 4] 3516         CALL     HERE
      00153A CD 06 19         [ 4] 3517         CALL     DUPP
      00153D CD 0B 93         [ 4] 3518         CALL     ONEP
      001540 CD 07 70         [ 4] 3519         CALL     VPP
      001543 CD 04 D1         [ 4] 3520         CALL     STORE
      001546 CC 04 F0         [ 2] 3521         JP     CSTOR
                                   3522 
                                   3523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3524 ;       [COMPILE]       ( -- ; <string> )
                                   3525 ;       Compile next immediate
                                   3526 ;       word into code dictionary.
                                   3527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001549                       3528         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001549 15 34                    1         .word LINK 
                           00154B     2         LINK=.
      00154B 89                       3         .byte IMEDD+9  
      00154C 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001555                          5         BCOMP:
      001555 CD 14 FE         [ 4] 3529         CALL     TICK
      001558 CC 18 2A         [ 2] 3530         JP     JSRC
                                   3531 
                                   3532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3533 ;       COMPILE ( -- )
                                   3534 ;       Compile next jsr in
                                   3535 ;       colon list to code dictionary.
                                   3536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00155B                       3537         _HEADER COMPI,COMPO+7,"COMPILE"
      00155B 15 4B                    1         .word LINK 
                           00155D     2         LINK=.
      00155D 47                       3         .byte COMPO+7  
      00155E 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001565                          5         COMPI:
      001565 CD 05 34         [ 4] 3538         CALL     RFROM
      001568 CD 06 19         [ 4] 3539         CALL     DUPP
      00156B CD 04 E3         [ 4] 3540         CALL     AT
      00156E CD 18 2A         [ 4] 3541         CALL     JSRC    ;compile subroutine
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001571 CD 0B 68         [ 4] 3542         CALL     CELLP
      001574 90 93            [ 1] 3543         ldw y,x 
      001576 90 FE            [ 2] 3544         ldw y,(y)
      001578 1C 00 02         [ 2] 3545         addw x,#CELLL 
      00157B 90 FC            [ 2] 3546         jp (y)
                                   3547 
                                   3548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3549 ;       LITERAL ( w -- )
                                   3550 ;       Compile tos to dictionary
                                   3551 ;       as an integer literal.
                                   3552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00157D                       3553         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00157D 15 5D                    1         .word LINK 
                           00157F     2         LINK=.
      00157F C7                       3         .byte COMPO+IMEDD+7  
      001580 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001587                          5         LITER:
      001587 CD 15 65         [ 4] 3554         CALL     COMPI
      00158A 04 6F                 3555         .word DOLIT 
      00158C CC 15 20         [ 2] 3556         JP     COMMA
                                   3557 
                                   3558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3559 ;       $,"     ( -- )
                                   3560 ;       Compile a literal string
                                   3561 ;       up to next " .
                                   3562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3563 ;        _HEADER STRCQ,3,^/'$,"'/
      00158F                       3564 STRCQ:
      00158F CD 04 6F         [ 4] 3565         CALL     DOLIT
      001592 00 22                 3566         .word     34	; "
      001594 CD 11 18         [ 4] 3567         CALL     PARSE
      001597 CD 0C DC         [ 4] 3568         CALL     HERE
      00159A CD 0D 9C         [ 4] 3569         CALL     PACKS   ;string to code dictionary
      00159D CD 0C C5         [ 4] 3570         CALL     COUNT
      0015A0 CD 08 3C         [ 4] 3571         CALL     PLUS    ;calculate aligned end of string
      0015A3 CD 07 70         [ 4] 3572         CALL     VPP
      0015A6 CC 04 D1         [ 2] 3573         JP     STORE
                                   3574 
                                   3575 ;; Structures
                                   3576 
                                   3577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3578 ;       FOR     ( -- a )
                                   3579 ;       Start a FOR-NEXT loop
                                   3580 ;       structure in a colon definition.
                                   3581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015A9                       3582         _HEADER FOR,IMEDD+3,"FOR"
      0015A9 15 7F                    1         .word LINK 
                           0015AB     2         LINK=.
      0015AB 83                       3         .byte IMEDD+3  
      0015AC 46 4F 52                 4         .ascii "FOR"
      0015AF                          5         FOR:
      0015AF CD 15 65         [ 4] 3583         CALL     COMPI
      0015B2 05 E2                 3584         .word TOR 
      0015B4 CC 0C DC         [ 2] 3585         JP     HERE
                                   3586 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   3587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3588 ;       NEXT    ( a -- )
                                   3589 ;       Terminate a FOR-NEXT loop.
                                   3590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B7                       3591         _HEADER NEXT,IMEDD+4,"NEXT"
      0015B7 15 AB                    1         .word LINK 
                           0015B9     2         LINK=.
      0015B9 84                       3         .byte IMEDD+4  
      0015BA 4E 45 58 54              4         .ascii "NEXT"
      0015BE                          5         NEXT:
      0015BE CD 15 65         [ 4] 3592         CALL     COMPI
      0015C1 04 83                 3593         .word DONXT 
      0015C3 CD 07 BC         [ 4] 3594         call ADRADJ
      0015C6 CC 15 20         [ 2] 3595         JP     COMMA
                                   3596 
                                   3597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3598 ;       I ( -- n )
                                   3599 ;       stack COUNTER
                                   3600 ;       of innermost FOR-NEXT  
                                   3601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C9                       3602         _HEADER IFETCH,1,"I"
      0015C9 15 B9                    1         .word LINK 
                           0015CB     2         LINK=.
      0015CB 01                       3         .byte 1  
      0015CC 49                       4         .ascii "I"
      0015CD                          5         IFETCH:
      0015CD 1D 00 02         [ 2] 3603         subw x,#CELLL 
      0015D0 16 03            [ 2] 3604         ldw y,(3,sp)
      0015D2 FF               [ 2] 3605         ldw (x),y 
      0015D3 81               [ 4] 3606         ret 
                                   3607 
                                   3608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3609 ;       J ( -- n )
                                   3610 ;   stack COUNTER
                                   3611 ;   of outer FOR-NEXT  
                                   3612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015D4                       3613         _HEADER JFETCH,1,"J"
      0015D4 15 CB                    1         .word LINK 
                           0015D6     2         LINK=.
      0015D6 01                       3         .byte 1  
      0015D7 4A                       4         .ascii "J"
      0015D8                          5         JFETCH:
      0015D8 1D 00 02         [ 2] 3614         SUBW X,#CELLL 
      0015DB 16 05            [ 2] 3615         LDW Y,(5,SP)
      0015DD FF               [ 2] 3616         LDW (X),Y 
      0015DE 81               [ 4] 3617         RET 
                                   3618 
                                   3619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3620 ;       BEGIN   ( -- a )
                                   3621 ;       Start an infinite or
                                   3622 ;       indefinite loop structure.
                                   3623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DF                       3624         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015DF 15 D6                    1         .word LINK 
                           0015E1     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0015E1 85                       3         .byte IMEDD+5  
      0015E2 42 45 47 49 4E           4         .ascii "BEGIN"
      0015E7                          5         BEGIN:
      0015E7 CC 0C DC         [ 2] 3625         JP     HERE
                                   3626 
                                   3627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3628 ;       UNTIL   ( a -- )
                                   3629 ;       Terminate a BEGIN-UNTIL
                                   3630 ;       indefinite loop structure.
                                   3631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015EA                       3632         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015EA 15 E1                    1         .word LINK 
                           0015EC     2         LINK=.
      0015EC 85                       3         .byte IMEDD+5  
      0015ED 55 4E 54 49 4C           4         .ascii "UNTIL"
      0015F2                          5         UNTIL:
      0015F2 CD 15 65         [ 4] 3633         CALL     COMPI
      0015F5 04 98                 3634         .word    QBRAN 
      0015F7 CD 07 BC         [ 4] 3635         call ADRADJ
      0015FA CC 15 20         [ 2] 3636         JP     COMMA
                                   3637 
                                   3638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3639 ;       AGAIN   ( a -- )
                                   3640 ;       Terminate a BEGIN-AGAIN
                                   3641 ;       infinite loop structure.
                                   3642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015FD                       3643         _HEADER AGAIN,IMEDD+5,"AGAIN"
      0015FD 15 EC                    1         .word LINK 
                           0015FF     2         LINK=.
      0015FF 85                       3         .byte IMEDD+5  
      001600 41 47 41 49 4E           4         .ascii "AGAIN"
      001605                          5         AGAIN:
      001605 CD 15 65         [ 4] 3644         CALL     COMPI
      001608 04 B4                 3645         .word BRAN
      00160A CD 07 BC         [ 4] 3646         call ADRADJ 
      00160D CC 15 20         [ 2] 3647         JP     COMMA
                                   3648 
                                   3649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3650 ;       IF      ( -- A )
                                   3651 ;       Begin a conditional branch.
                                   3652 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001610                       3653         _HEADER IFF,IMEDD+2,"IF"
      001610 15 FF                    1         .word LINK 
                           001612     2         LINK=.
      001612 82                       3         .byte IMEDD+2  
      001613 49 46                    4         .ascii "IF"
      001615                          5         IFF:
      001615 CD 15 65         [ 4] 3654         CALL     COMPI
      001618 04 98                 3655         .word QBRAN
      00161A CD 0C DC         [ 4] 3656         CALL     HERE
      00161D CD 0B FF         [ 4] 3657         CALL     ZERO
      001620 CC 15 20         [ 2] 3658         JP     COMMA
                                   3659 
                                   3660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3661 ;       THEN        ( A -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3662 ;       Terminate a conditional 
                                   3663 ;       branch structure.
                                   3664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001623                       3665         _HEADER THENN,IMEDD+4,"THEN"
      001623 16 12                    1         .word LINK 
                           001625     2         LINK=.
      001625 84                       3         .byte IMEDD+4  
      001626 54 48 45 4E              4         .ascii "THEN"
      00162A                          5         THENN:
      00162A CD 0C DC         [ 4] 3666         CALL     HERE
      00162D CD 07 BC         [ 4] 3667         call ADRADJ 
      001630 CD 06 29         [ 4] 3668         CALL     SWAPP
      001633 CC 04 D1         [ 2] 3669         JP     STORE
                                   3670 
                                   3671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3672 ;       ELSE        ( A -- A )
                                   3673 ;       Start the false clause in 
                                   3674 ;       an IF-ELSE-THEN structure.
                                   3675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001636                       3676         _HEADER ELSEE,IMEDD+4,"ELSE"
      001636 16 25                    1         .word LINK 
                           001638     2         LINK=.
      001638 84                       3         .byte IMEDD+4  
      001639 45 4C 53 45              4         .ascii "ELSE"
      00163D                          5         ELSEE:
      00163D CD 15 65         [ 4] 3677         CALL     COMPI
      001640 04 B4                 3678         .word BRAN
      001642 CD 0C DC         [ 4] 3679         CALL     HERE
      001645 CD 0B FF         [ 4] 3680         CALL     ZERO
      001648 CD 15 20         [ 4] 3681         CALL     COMMA
      00164B CD 06 29         [ 4] 3682         CALL     SWAPP
      00164E CD 0C DC         [ 4] 3683         CALL     HERE
      001651 CD 07 BC         [ 4] 3684         call ADRADJ 
      001654 CD 06 29         [ 4] 3685         CALL     SWAPP
      001657 CC 04 D1         [ 2] 3686         JP     STORE
                                   3687 
                                   3688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3689 ;       AHEAD       ( -- A )
                                   3690 ;       Compile a forward branch
                                   3691 ;       instruction.
                                   3692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00165A                       3693         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00165A 16 38                    1         .word LINK 
                           00165C     2         LINK=.
      00165C 85                       3         .byte IMEDD+5  
      00165D 41 48 45 41 44           4         .ascii "AHEAD"
      001662                          5         AHEAD:
      001662 CD 15 65         [ 4] 3694         CALL     COMPI
      001665 04 B4                 3695         .word BRAN
      001667 CD 0C DC         [ 4] 3696         CALL     HERE
      00166A CD 0B FF         [ 4] 3697         CALL     ZERO
      00166D CC 15 20         [ 2] 3698         JP     COMMA
                                   3699 
                                   3700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3701 ;       WHILE       ( a -- A a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3702 ;       Conditional branch out of a 
                                   3703 ;       BEGIN-WHILE-REPEAT loop.
                                   3704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001670                       3705         _HEADER WHILE,IMEDD+5,"WHILE"
      001670 16 5C                    1         .word LINK 
                           001672     2         LINK=.
      001672 85                       3         .byte IMEDD+5  
      001673 57 48 49 4C 45           4         .ascii "WHILE"
      001678                          5         WHILE:
      001678 CD 15 65         [ 4] 3706         CALL     COMPI
      00167B 04 98                 3707         .word QBRAN
      00167D CD 0C DC         [ 4] 3708         CALL     HERE
      001680 CD 0B FF         [ 4] 3709         CALL     ZERO
      001683 CD 15 20         [ 4] 3710         CALL     COMMA
      001686 CC 06 29         [ 2] 3711         JP     SWAPP
                                   3712 
                                   3713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3714 ;       REPEAT      ( A a -- )
                                   3715 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3716 ;       indefinite loop.
                                   3717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001689                       3718         _HEADER REPEA,IMEDD+6,"REPEAT"
      001689 16 72                    1         .word LINK 
                           00168B     2         LINK=.
      00168B 86                       3         .byte IMEDD+6  
      00168C 52 45 50 45 41 54        4         .ascii "REPEAT"
      001692                          5         REPEA:
      001692 CD 15 65         [ 4] 3719         CALL     COMPI
      001695 04 B4                 3720         .word BRAN
      001697 CD 07 BC         [ 4] 3721         call ADRADJ 
      00169A CD 15 20         [ 4] 3722         CALL     COMMA
      00169D CD 0C DC         [ 4] 3723         CALL     HERE
      0016A0 CD 07 BC         [ 4] 3724         call ADRADJ 
      0016A3 CD 06 29         [ 4] 3725         CALL     SWAPP
      0016A6 CC 04 D1         [ 2] 3726         JP     STORE
                                   3727 
                                   3728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3729 ;       AFT         ( a -- a A )
                                   3730 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3731 ;       loop the first time through.
                                   3732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A9                       3733         _HEADER AFT,IMEDD+3,"AFT"
      0016A9 16 8B                    1         .word LINK 
                           0016AB     2         LINK=.
      0016AB 83                       3         .byte IMEDD+3  
      0016AC 41 46 54                 4         .ascii "AFT"
      0016AF                          5         AFT:
      0016AF CD 06 0F         [ 4] 3734         CALL     DROP
      0016B2 CD 16 62         [ 4] 3735         CALL     AHEAD
      0016B5 CD 0C DC         [ 4] 3736         CALL     HERE
      0016B8 CC 06 29         [ 2] 3737         JP     SWAPP
                                   3738 
                                   3739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3740 ;       ABORT"      ( -- ; <string> )
                                   3741 ;       Conditional abort with an error message.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3742 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016BB                       3743         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016BB 16 AB                    1         .word LINK 
                           0016BD     2         LINK=.
      0016BD 86                       3         .byte IMEDD+6  
      0016BE 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016C4                          5         ABRTQ:
      0016C4 CD 15 65         [ 4] 3744         CALL     COMPI
      0016C7 13 E2                 3745         .word ABORQ
      0016C9 CC 15 8F         [ 2] 3746         JP     STRCQ
                                   3747 
                                   3748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3749 ;       $"     ( -- ; <string> )
                                   3750 ;       Compile an inline string literal.
                                   3751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016CC                       3752         _HEADER STRQ,IMEDD+2,'$"'
      0016CC 16 BD                    1         .word LINK 
                           0016CE     2         LINK=.
      0016CE 82                       3         .byte IMEDD+2  
      0016CF 24 22                    4         .ascii '$"'
      0016D1                          5         STRQ:
      0016D1 CD 15 65         [ 4] 3753         CALL     COMPI
      0016D4 0F A0                 3754         .word STRQP 
      0016D6 CC 15 8F         [ 2] 3755         JP     STRCQ
                                   3756 
                                   3757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3758 ;       ."          ( -- ; <string> )
                                   3759 ;       Compile an inline string literal 
                                   3760 ;       to be typed out at run time.
                                   3761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D9                       3762         _HEADER DOTQ,IMEDD+2,'."'
      0016D9 16 CE                    1         .word LINK 
                           0016DB     2         LINK=.
      0016DB 82                       3         .byte IMEDD+2  
      0016DC 2E 22                    4         .ascii '."'
      0016DE                          5         DOTQ:
      0016DE CD 15 65         [ 4] 3763         CALL     COMPI
      0016E1 0F A4                 3764         .word DOTQP 
      0016E3 CC 15 8F         [ 2] 3765         JP     STRCQ
                                   3766 
                                   3767 ;; Name compiler
                                   3768 
                                   3769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3770 ;       ?UNIQUE ( a -- a )
                                   3771 ;       Display a warning message
                                   3772 ;       if word already exists.
                                   3773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E6                       3774         _HEADER UNIQU,7,"?UNIQUE"
      0016E6 16 DB                    1         .word LINK 
                           0016E8     2         LINK=.
      0016E8 07                       3         .byte 7  
      0016E9 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      0016F0                          5         UNIQU:
      0016F0 CD 06 19         [ 4] 3775         CALL     DUPP
      0016F3 CD 12 D6         [ 4] 3776         CALL     NAMEQ   ;?name exists
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0016F6 CD 04 98         [ 4] 3777         CALL     QBRAN
      0016F9 17 0F                 3778         .word      UNIQ1
      0016FB CD 0F A4         [ 4] 3779         CALL     DOTQP   ;redef are OK
      0016FE 07                    3780         .byte       7
      0016FF 20 72 65 44 65 66 20  3781         .ascii     " reDef "       
      001706 CD 06 41         [ 4] 3782         CALL     OVER
      001709 CD 0C C5         [ 4] 3783         CALL     COUNT
      00170C CD 0F 5F         [ 4] 3784         CALL     TYPES   ;just in case
      00170F CC 06 0F         [ 2] 3785 UNIQ1:  JP     DROP
                                   3786 
                                   3787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3788 ;       $,n     ( na -- )
                                   3789 ;       Build a new dictionary name
                                   3790 ;       using string at na.
                                   3791 ; compile dans l'espace des variables 
                                   3792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3793 ;        _HEADER SNAME,3,^/"$,n"/
      001712                       3794 SNAME: 
      001712 CD 06 19         [ 4] 3795         CALL     DUPP
      001715 CD 05 01         [ 4] 3796         CALL     CAT     ;?null input
      001718 CD 04 98         [ 4] 3797         CALL     QBRAN
      00171B 17 48                 3798         .word      PNAM1
      00171D CD 16 F0         [ 4] 3799         CALL     UNIQU   ;?redefinition
      001720 CD 06 19         [ 4] 3800         CALL     DUPP
      001723 CD 0C C5         [ 4] 3801         CALL     COUNT
      001726 CD 08 3C         [ 4] 3802         CALL     PLUS
      001729 CD 07 70         [ 4] 3803         CALL     VPP
      00172C CD 04 D1         [ 4] 3804         CALL     STORE
      00172F CD 06 19         [ 4] 3805         CALL     DUPP
      001732 CD 07 8E         [ 4] 3806         CALL     LAST
      001735 CD 04 D1         [ 4] 3807         CALL     STORE   ;save na for vocabulary link
      001738 CD 0B 77         [ 4] 3808         CALL     CELLM   ;link address
      00173B CD 07 62         [ 4] 3809         CALL     CNTXT
      00173E CD 04 E3         [ 4] 3810         CALL     AT
      001741 CD 06 29         [ 4] 3811         CALL     SWAPP
      001744 CD 04 D1         [ 4] 3812         CALL     STORE
      001747 81               [ 4] 3813         RET     ;save code pointer
      001748 CD 0F A0         [ 4] 3814 PNAM1:  CALL     STRQP
      00174B 05                    3815         .byte      5
      00174C 20 6E 61 6D 65        3816         .ascii     " name" ;null input
      001751 CC 13 EA         [ 2] 3817         JP     ABOR1
                                   3818 
                                   3819 ;; FORTH compiler
                                   3820 
                                   3821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3822 ;       $COMPILE        ( a -- )
                                   3823 ;       Compile next word to
                                   3824 ;       dictionary as a token or literal.
                                   3825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001754                       3826         _HEADER SCOMP,8,"$COMPILE"
      001754 16 E8                    1         .word LINK 
                           001756     2         LINK=.
      001756 08                       3         .byte 8  
      001757 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      00175F                          5         SCOMP:
      00175F CD 12 D6         [ 4] 3827         CALL     NAMEQ
      001762 CD 07 CC         [ 4] 3828         CALL     QDUP    ;?defined
      001765 CD 04 98         [ 4] 3829         CALL     QBRAN
      001768 17 80                 3830         .word      SCOM2
      00176A CD 04 E3         [ 4] 3831         CALL     AT
      00176D CD 04 6F         [ 4] 3832         CALL     DOLIT
      001770 80 00                 3833         .word     0x8000	;  IMEDD*256
      001772 CD 06 76         [ 4] 3834         CALL     ANDD    ;?immediate
      001775 CD 04 98         [ 4] 3835         CALL     QBRAN
      001778 17 7D                 3836         .word      SCOM1
      00177A CC 04 C4         [ 2] 3837         JP     EXECU
      00177D CC 18 2A         [ 2] 3838 SCOM1:  JP     JSRC
      001780 CD 25 7E         [ 4] 3839 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001783 CD 07 CC         [ 4] 3840         CALL    QDUP  
      001786 CD 04 98         [ 4] 3841         CALL     QBRAN
      001789 13 EA                 3842         .word      ABOR1
      00178B                       3843         _DOLIT  -1
      00178B CD 04 6F         [ 4]    1     CALL DOLIT 
      00178E FF FF                    2     .word -1 
      001790 CD 08 FA         [ 4] 3844         CALL    EQUAL
      001793                       3845         _QBRAN DLITER  
      001793 CD 04 98         [ 4]    1     CALL QBRAN
      001796 29 51                    2     .word DLITER
      001798 CC 15 87         [ 2] 3846         JP     LITER
                                   3847 
                                   3848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3849 ;       OVERT   ( -- )
                                   3850 ;       Link a new word into vocabulary.
                                   3851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00179B                       3852         _HEADER OVERT,5,"OVERT"
      00179B 17 56                    1         .word LINK 
                           00179D     2         LINK=.
      00179D 05                       3         .byte 5  
      00179E 4F 56 45 52 54           4         .ascii "OVERT"
      0017A3                          5         OVERT:
      0017A3 CD 07 8E         [ 4] 3853         CALL     LAST
      0017A6 CD 04 E3         [ 4] 3854         CALL     AT
      0017A9 CD 07 62         [ 4] 3855         CALL     CNTXT
      0017AC CC 04 D1         [ 2] 3856         JP     STORE
                                   3857 
                                   3858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3859 ;       ;       ( -- )
                                   3860 ;       Terminate a colon definition.
                                   3861 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017AF                       3862         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0017AF 17 9D                    1         .word LINK 
                           0017B1     2         LINK=.
      0017B1 C1                       3         .byte IMEDD+COMPO+1  
      0017B2 3B                       4         .ascii ";"
      0017B3                          5         SEMIS:
                           000001  3863 .if OPTIMIZE ; more compact and faster
      0017B3 CD 04 6F         [ 4] 3864         call DOLIT 
      0017B6 00 81                 3865         .word 0x81   ; opcode for RET 
      0017B8 CD 15 37         [ 4] 3866         call CCOMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000000  3867 .else
                                   3868         CALL     COMPI
                                   3869         .word EXIT 
                                   3870 .endif 
      0017BB CD 14 4B         [ 4] 3871         CALL     LBRAC
      0017BE CD 17 A3         [ 4] 3872         call OVERT 
      0017C1 CD 22 22         [ 4] 3873         CALL FMOVE
      0017C4 CD 07 CC         [ 4] 3874         call QDUP 
      0017C7 CD 04 98         [ 4] 3875         call QBRAN 
      0017CA 18 FA                 3876         .word SET_RAMLAST 
      0017CC CD 22 B6         [ 4] 3877         CALL UPDATPTR
      0017CF 81               [ 4] 3878         RET 
                                   3879 
                                   3880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3881 ;       Terminate an ISR definition 
                                   3882 ;       retourn ca of ISR as double
                                   3883 ;       I; ( -- ud )
                                   3884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017D0                       3885        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017D0 17 B1                    1         .word LINK 
                           0017D2     2         LINK=.
      0017D2 C2                       3         .byte 2+IMEDD+COMPO  
      0017D3 49 3B                    4         .ascii "I;"
      0017D5                          5         ISEMI:
      0017D5 1D 00 02         [ 2] 3886         subw x,#CELLL  
      0017D8 90 AE 00 80      [ 2] 3887         ldw y,#IRET_CODE 
      0017DC FF               [ 2] 3888         ldw (x),y 
      0017DD CD 15 37         [ 4] 3889         call CCOMMA
      0017E0 CD 14 4B         [ 4] 3890         call LBRAC 
      0017E3 CD 22 FB         [ 4] 3891         call IFMOVE
      0017E6 CD 07 CC         [ 4] 3892         call QDUP 
      0017E9 CD 04 98         [ 4] 3893         CALL QBRAN 
      0017EC 18 FA                 3894         .word SET_RAMLAST
      0017EE CD 07 7E         [ 4] 3895         CALL CPP
      0017F1 CD 04 E3         [ 4] 3896         call AT 
      0017F4 CD 06 29         [ 4] 3897         call SWAPP 
      0017F7 CD 07 7E         [ 4] 3898         CALL CPP 
      0017FA CD 04 D1         [ 4] 3899         call STORE 
      0017FD CD 1C B3         [ 4] 3900         call UPDATCP 
      001800 CD 1C 70         [ 4] 3901         call EEPVP 
      001803                       3902         _DROP 
      001803 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001806 CD 04 E3         [ 4] 3903         call AT 
      001809 CD 07 70         [ 4] 3904         call VPP 
      00180C CD 04 D1         [ 4] 3905         call STORE 
      00180F CC 0B FF         [ 2] 3906         jp ZERO
      001812 81               [ 4] 3907         ret           
                                   3908         
                                   3909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3910 ;       ]       ( -- )
                                   3911 ;       Start compiling words in
                                   3912 ;       input stream.
                                   3913 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001813                       3914         _HEADER RBRAC,1,"]"
      001813 17 D2                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           001815     2         LINK=.
      001815 01                       3         .byte 1  
      001816 5D                       4         .ascii "]"
      001817                          5         RBRAC:
      001817 CD 04 6F         [ 4] 3915         CALL   DOLIT
      00181A 17 5F                 3916         .word  SCOMP
      00181C CD 07 40         [ 4] 3917         CALL   TEVAL
      00181F CC 04 D1         [ 2] 3918         JP     STORE
                                   3919 
                                   3920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3921 ;       CALL,    ( ca -- )
                                   3922 ;       Compile a subroutine call.
                                   3923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001822                       3924         _HEADER JSRC,5,^/"CALL,"/
      001822 18 15                    1         .word LINK 
                           001824     2         LINK=.
      001824 05                       3         .byte 5  
      001825 43 41 4C 4C 2C           4         .ascii "CALL,"
      00182A                          5         JSRC:
      00182A CD 04 6F         [ 4] 3925         CALL     DOLIT
      00182D 00 CD                 3926         .word     CALLL     ;CALL
      00182F CD 15 37         [ 4] 3927         CALL     CCOMMA
      001832 CC 15 20         [ 2] 3928         JP     COMMA
                                   3929 
                                   3930 ;       INIT-OFS ( -- )
                                   3931 ;       compute offset to adjust jump address 
                                   3932 ;       set variable OFFSET 
      001835 18 24                 3933         .word LINK 
                           001837  3934         LINK=.
      001837 08                    3935         .byte 8 
      001838 49 4E 49 54 2D 4F 46  3936         .ascii "INIT-OFS" 
             53
      001840                       3937 INITOFS:
      001840 CD 07 2F         [ 4] 3938         call TFLASH 
      001843 CD 04 E3         [ 4] 3939         CALL AT 
      001846 CD 06 19         [ 4] 3940         CALL DUPP 
      001849 CD 04 98         [ 4] 3941         call QBRAN
      00184C 18 5D                 3942         .word 1$
      00184E                       3943         _DROP  
      00184E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001851 CD 07 7E         [ 4] 3944         call CPP 
      001854 CD 04 E3         [ 4] 3945         call AT 
      001857 CD 0C DC         [ 4] 3946         call HERE
      00185A CD 08 D2         [ 4] 3947         call SUBB 
      00185D CD 07 B3         [ 4] 3948 1$:     call OFFSET 
      001860 CC 04 D1         [ 2] 3949         jp STORE  
                                   3950 
                                   3951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3952 ;       :       ( -- ; <string> )
                                   3953 ;       Start a new colon definition
                                   3954 ;       using next word as its name.
                                   3955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001863                       3956         _HEADER COLON,1,":"
      001863 18 37                    1         .word LINK 
                           001865     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001865 01                       3         .byte 1  
      001866 3A                       4         .ascii ":"
      001867                          5         COLON:
      001867 CD 18 40         [ 4] 3957         call INITOFS       
      00186A CD 11 D9         [ 4] 3958         CALL   TOKEN
      00186D CD 17 12         [ 4] 3959         CALL   SNAME
      001870 CC 18 17         [ 2] 3960         JP     RBRAC
                                   3961 
                                   3962 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3963 ;       I:  ( -- )
                                   3964 ;       Start interrupt service 
                                   3965 ;       routine definition
                                   3966 ;       those definition have 
                                   3967 ;       no name.
                                   3968 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001873                       3969         _HEADER ICOLON,2,"I:"
      001873 18 65                    1         .word LINK 
                           001875     2         LINK=.
      001875 02                       3         .byte 2  
      001876 49 3A                    4         .ascii "I:"
      001878                          5         ICOLON:
      001878 CD 18 40         [ 4] 3970         call INITOFS 
      00187B CC 18 17         [ 2] 3971         jp RBRAC  
                                   3972 
                                   3973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3974 ;       IMMEDIATE       ( -- )
                                   3975 ;       Make last compiled word
                                   3976 ;       an immediate word.
                                   3977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00187E                       3978         _HEADER IMMED,9,"IMMEDIATE"
      00187E 18 75                    1         .word LINK 
                           001880     2         LINK=.
      001880 09                       3         .byte 9  
      001881 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      00188A                          5         IMMED:
      00188A CD 04 6F         [ 4] 3979         CALL     DOLIT
      00188D 80 00                 3980         .word     0x8000	;  IMEDD*256
      00188F CD 07 8E         [ 4] 3981         CALL     LAST
      001892 CD 04 E3         [ 4] 3982         CALL     AT
      001895 CD 04 E3         [ 4] 3983         CALL     AT
      001898 CD 06 8A         [ 4] 3984         CALL     ORR
      00189B CD 07 8E         [ 4] 3985         CALL     LAST
      00189E CD 04 E3         [ 4] 3986         CALL     AT
      0018A1 CC 04 D1         [ 2] 3987         JP     STORE
                                   3988 
                                   3989 ;; Defining words
                                   3990 
                                   3991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3992 ;       CREATE  ( -- ; <string> )
                                   3993 ;       Compile a new array
                                   3994 ;       without allocating space.
                                   3995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018A4                       3996         _HEADER CREAT,6,"CREATE"
      0018A4 18 80                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                           0018A6     2         LINK=.
      0018A6 06                       3         .byte 6  
      0018A7 43 52 45 41 54 45        4         .ascii "CREATE"
      0018AD                          5         CREAT:
      0018AD CD 11 D9         [ 4] 3997         CALL     TOKEN
      0018B0 CD 17 12         [ 4] 3998         CALL     SNAME
      0018B3 CD 17 A3         [ 4] 3999         CALL     OVERT        
      0018B6 CD 15 65         [ 4] 4000         CALL     COMPI 
      0018B9 06 CF                 4001         .word DOVAR 
      0018BB 81               [ 4] 4002         RET
                                   4003 
                                   4004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4005 ;       VARIABLE  ( -- ; <string> )
                                   4006 ;       Compile a new variable
                                   4007 ;       initialized to 0.
                                   4008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018BC                       4009         _HEADER VARIA,8,"VARIABLE"
      0018BC 18 A6                    1         .word LINK 
                           0018BE     2         LINK=.
      0018BE 08                       3         .byte 8  
      0018BF 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      0018C7                          5         VARIA:
                                   4010 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0018C7 CD 0C DC         [ 4] 4011         CALL HERE
      0018CA CD 06 19         [ 4] 4012         CALL DUPP 
      0018CD CD 0B 68         [ 4] 4013         CALL CELLP
      0018D0 CD 07 70         [ 4] 4014         CALL VPP 
      0018D3 CD 04 D1         [ 4] 4015         CALL STORE
      0018D6 CD 18 AD         [ 4] 4016         CALL CREAT
      0018D9 CD 06 19         [ 4] 4017         CALL DUPP
      0018DC CD 15 20         [ 4] 4018         CALL COMMA
      0018DF CD 0B FF         [ 4] 4019         CALL ZERO
      0018E2 CD 06 29         [ 4] 4020         call SWAPP 
      0018E5 CD 04 D1         [ 4] 4021         CALL STORE
      0018E8 CD 22 22         [ 4] 4022         CALL FMOVE ; move definition to FLASH
      0018EB CD 07 CC         [ 4] 4023         CALL QDUP 
      0018EE CD 04 98         [ 4] 4024         CALL QBRAN 
      0018F1 18 FA                 4025         .word SET_RAMLAST   
      0018F3 CD 1C CA         [ 4] 4026         call UPDATVP  ; don't update if variable kept in RAM.
      0018F6 CD 22 B6         [ 4] 4027         CALL UPDATPTR
      0018F9 81               [ 4] 4028         RET         
      0018FA                       4029 SET_RAMLAST: 
      0018FA CD 07 8E         [ 4] 4030         CALL LAST 
      0018FD CD 04 E3         [ 4] 4031         CALL AT 
      001900 CD 07 A1         [ 4] 4032         CALL RAMLAST 
      001903 CC 04 D1         [ 2] 4033         jp STORE  
                                   4034 
                                   4035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4036 ;       CONSTANT  ( n -- ; <string> )
                                   4037 ;       Compile a new constant 
                                   4038 ;       n CONSTANT name 
                                   4039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001906                       4040         _HEADER CONSTANT,8,"CONSTANT"
      001906 18 BE                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           001908     2         LINK=.
      001908 08                       3         .byte 8  
      001909 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001911                          5         CONSTANT:
      001911 CD 11 D9         [ 4] 4041         CALL TOKEN
      001914 CD 17 12         [ 4] 4042         CALL SNAME 
      001917 CD 17 A3         [ 4] 4043         CALL OVERT 
      00191A CD 15 65         [ 4] 4044         CALL COMPI 
      00191D 19 31                 4045         .word DOCONST
      00191F CD 15 20         [ 4] 4046         CALL COMMA 
      001922 CD 22 22         [ 4] 4047         CALL FMOVE
      001925 CD 07 CC         [ 4] 4048         CALL QDUP 
      001928 CD 04 98         [ 4] 4049         CALL QBRAN 
      00192B 18 FA                 4050         .word SET_RAMLAST  
      00192D CD 22 B6         [ 4] 4051         CALL UPDATPTR  
      001930 81               [ 4] 4052 1$:     RET          
                                   4053 
                                   4054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4055 ; CONSTANT runtime semantic 
                                   4056 ; doCONST  ( -- n )
                                   4057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4058 ;       _HEADER DOCONST,7,"DOCONST"
      001931                       4059 DOCONST:
      001931 1D 00 02         [ 2] 4060         subw x,#CELLL
      001934 90 85            [ 2] 4061         popw y 
      001936 90 FE            [ 2] 4062         ldw y,(y) 
      001938 FF               [ 2] 4063         ldw (x),y 
      001939 81               [ 4] 4064         ret 
                                   4065 
                                   4066 ;----------------------------------
                                   4067 ; create double constant 
                                   4068 ; 2CONSTANT ( d -- ; <string> )
                                   4069 ;----------------------------------
      00193A                       4070         _HEADER DCONST,9,"2CONSTANT"
      00193A 19 08                    1         .word LINK 
                           00193C     2         LINK=.
      00193C 09                       3         .byte 9  
      00193D 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001946                          5         DCONST:
      001946 CD 11 D9         [ 4] 4071         CALL TOKEN
      001949 CD 17 12         [ 4] 4072         CALL SNAME 
      00194C CD 17 A3         [ 4] 4073         CALL OVERT 
      00194F CD 15 65         [ 4] 4074         CALL COMPI 
      001952 19 69                 4075         .word DO_DCONST
      001954 CD 15 20         [ 4] 4076         CALL COMMA
      001957 CD 15 20         [ 4] 4077         CALL COMMA  
      00195A CD 22 22         [ 4] 4078         CALL FMOVE
      00195D CD 07 CC         [ 4] 4079         CALL QDUP 
      001960 CD 04 98         [ 4] 4080         CALL QBRAN 
      001963 18 FA                 4081         .word SET_RAMLAST  
      001965 CD 22 B6         [ 4] 4082         CALL UPDATPTR  
      001968 81               [ 4] 4083 1$:     RET          
                                   4084     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4085 ;----------------------------------
                                   4086 ; runtime for DCONST 
                                   4087 ; stack double constant 
                                   4088 ; DO-DCONST ( -- d )
                                   4089 ;-----------------------------------
                                   4090 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001969                       4091 DO_DCONST:
      001969 90 85            [ 2] 4092     popw y 
      00196B 90 BF 26         [ 2] 4093     ldw YTEMP,y 
      00196E 1D 00 04         [ 2] 4094     subw x,#2*CELLL 
      001971 90 FE            [ 2] 4095     ldw y,(y)
      001973 FF               [ 2] 4096     ldw (x),y 
      001974 90 BE 26         [ 2] 4097     ldw y,YTEMP 
      001977 90 EE 02         [ 2] 4098     ldw y,(2,y)
      00197A EF 02            [ 2] 4099     ldw (2,x),y 
      00197C 81               [ 4] 4100     ret 
                                   4101 
                                   4102 ;; Tools
                                   4103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4104 ;       _TYPE   ( b u -- )
                                   4105 ;       Display a string. Filter
                                   4106 ;       non-printing characters.
                                   4107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00197D                       4108         _HEADER UTYPE,5,"_TYPE"
      00197D 19 3C                    1         .word LINK 
                           00197F     2         LINK=.
      00197F 05                       3         .byte 5  
      001980 5F 54 59 50 45           4         .ascii "_TYPE"
      001985                          5         UTYPE:
      001985 CD 05 E2         [ 4] 4109         CALL     TOR     ;start count down loop
      001988 20 0F            [ 2] 4110         JRA     UTYP2   ;skip first pass
      00198A CD 06 19         [ 4] 4111 UTYP1:  CALL     DUPP
      00198D CD 05 01         [ 4] 4112         CALL     CAT
      001990 CD 0C 29         [ 4] 4113         CALL     TCHAR
      001993 CD 04 36         [ 4] 4114         CALL     EMIT    ;display only printable
      001996 CD 0B 93         [ 4] 4115         CALL     ONEP    ;increment address
      001999 CD 04 83         [ 4] 4116 UTYP2:  CALL     DONXT
      00199C 19 8A                 4117         .word      UTYP1   ;loop till done
      00199E CC 06 0F         [ 2] 4118         JP     DROP
                                   4119 
                                   4120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4121 ;       dm+     ( a u -- a )
                                   4122 ;       Dump u bytes from ,
                                   4123 ;       leaving a+u on  stack.
                                   4124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019A1                       4125         _HEADER DUMPP,3,"DM+"
      0019A1 19 7F                    1         .word LINK 
                           0019A3     2         LINK=.
      0019A3 03                       3         .byte 3  
      0019A4 44 4D 2B                 4         .ascii "DM+"
      0019A7                          5         DUMPP:
      0019A7 CD 06 41         [ 4] 4126         CALL     OVER
      0019AA CD 04 6F         [ 4] 4127         CALL     DOLIT
      0019AD 00 04                 4128         .word      4
      0019AF CD 0F CD         [ 4] 4129         CALL     UDOTR   ;display address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      0019B2 CD 0F 35         [ 4] 4130         CALL     SPACE
      0019B5 CD 05 E2         [ 4] 4131         CALL     TOR     ;start count down loop
      0019B8 20 11            [ 2] 4132         JRA     PDUM2   ;skip first pass
      0019BA CD 06 19         [ 4] 4133 PDUM1:  CALL     DUPP
      0019BD CD 05 01         [ 4] 4134         CALL     CAT
      0019C0 CD 04 6F         [ 4] 4135         CALL     DOLIT
      0019C3 00 03                 4136         .word      3
      0019C5 CD 0F CD         [ 4] 4137         CALL     UDOTR   ;display numeric data
      0019C8 CD 0B 93         [ 4] 4138         CALL     ONEP    ;increment address
      0019CB CD 04 83         [ 4] 4139 PDUM2:  CALL     DONXT
      0019CE 19 BA                 4140         .word      PDUM1   ;loop till done
      0019D0 81               [ 4] 4141         RET
                                   4142 
                                   4143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4144 ;       DUMP    ( a u -- )
                                   4145 ;       Dump u bytes from a,
                                   4146 ;       in a formatted manner.
                                   4147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019D1                       4148         _HEADER DUMP,4,"DUMP"
      0019D1 19 A3                    1         .word LINK 
                           0019D3     2         LINK=.
      0019D3 04                       3         .byte 4  
      0019D4 44 55 4D 50              4         .ascii "DUMP"
      0019D8                          5         DUMP:
      0019D8 CD 06 DF         [ 4] 4149         CALL     BASE
      0019DB CD 04 E3         [ 4] 4150         CALL     AT
      0019DE CD 05 E2         [ 4] 4151         CALL     TOR
      0019E1 CD 0E 94         [ 4] 4152         CALL     HEX     ;save radix, set hex
      0019E4 CD 04 6F         [ 4] 4153         CALL     DOLIT
      0019E7 00 10                 4154         .word      16
      0019E9 CD 0A B9         [ 4] 4155         CALL     SLASH   ;change count to lines
      0019EC CD 05 E2         [ 4] 4156         CALL     TOR     ;start count down loop
      0019EF CD 0F 77         [ 4] 4157 DUMP1:  CALL     CR
      0019F2 CD 04 6F         [ 4] 4158         CALL     DOLIT
      0019F5 00 10                 4159         .word      16
      0019F7 CD 08 27         [ 4] 4160         CALL     DDUP
      0019FA CD 19 A7         [ 4] 4161         CALL     DUMPP   ;display numeric
      0019FD CD 07 DD         [ 4] 4162         CALL     ROT
      001A00 CD 07 DD         [ 4] 4163         CALL     ROT
      001A03 CD 0F 35         [ 4] 4164         CALL     SPACE
      001A06 CD 0F 35         [ 4] 4165         CALL     SPACE
      001A09 CD 19 85         [ 4] 4166         CALL     UTYPE   ;display printable characters
      001A0C CD 04 83         [ 4] 4167         CALL     DONXT
      001A0F 19 EF                 4168         .word      DUMP1   ;loop till done
      001A11 CD 06 0F         [ 4] 4169 DUMP3:  CALL     DROP
      001A14 CD 05 34         [ 4] 4170         CALL     RFROM
      001A17 CD 06 DF         [ 4] 4171         CALL     BASE
      001A1A CC 04 D1         [ 2] 4172         JP     STORE   ;restore radix
                                   4173 
                                   4174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4175 ;       .S      ( ... -- ... )
                                   4176 ;        Display  contents of stack.
                                   4177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A1D                       4178         _HEADER DOTS,2,".S"
      001A1D 19 D3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001A1F     2         LINK=.
      001A1F 02                       3         .byte 2  
      001A20 2E 53                    4         .ascii ".S"
      001A22                          5         DOTS:
      001A22 CD 0F 77         [ 4] 4179         CALL     CR
      001A25 CD 0C 41         [ 4] 4180         CALL     DEPTH   ;stack depth
      001A28 CD 05 E2         [ 4] 4181         CALL     TOR     ;start count down loop
      001A2B 20 09            [ 2] 4182         JRA     DOTS2   ;skip first pass
      001A2D CD 05 45         [ 4] 4183 DOTS1:  CALL     RAT
      001A30 CD 0C 58         [ 4] 4184 	CALL     PICK
      001A33 CD 10 1E         [ 4] 4185         CALL     DOT     ;index stack, display contents
      001A36 CD 04 83         [ 4] 4186 DOTS2:  CALL     DONXT
      001A39 1A 2D                 4187         .word      DOTS1   ;loop till done
      001A3B CD 0F A4         [ 4] 4188         CALL     DOTQP
      001A3E 05                    4189         .byte      5
      001A3F 20 3C 73 70 20        4190         .ascii     " <sp "
      001A44 81               [ 4] 4191         RET
                                   4192 
                                   4193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4194 ;       >NAME   ( ca -- na | F )
                                   4195 ;       Convert code address
                                   4196 ;       to a name address.
                                   4197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A45                       4198         _HEADER TNAME,5,">NAME"
      001A45 1A 1F                    1         .word LINK 
                           001A47     2         LINK=.
      001A47 05                       3         .byte 5  
      001A48 3E 4E 41 4D 45           4         .ascii ">NAME"
      001A4D                          5         TNAME:
      001A4D CD 07 62         [ 4] 4199         CALL     CNTXT   ;vocabulary link
      001A50 CD 04 E3         [ 4] 4200 TNAM2:  CALL     AT
      001A53 CD 06 19         [ 4] 4201         CALL     DUPP    ;?last word in a vocabulary
      001A56 CD 04 98         [ 4] 4202         CALL     QBRAN
      001A59 1A 74                 4203         .word      TNAM4
      001A5B CD 08 27         [ 4] 4204         CALL     DDUP
      001A5E CD 11 E7         [ 4] 4205         CALL     NAMET
      001A61 CD 06 9F         [ 4] 4206         CALL     XORR    ;compare
      001A64 CD 04 98         [ 4] 4207         CALL     QBRAN
      001A67 1A 6E                 4208         .word      TNAM3
      001A69 CD 0B 77         [ 4] 4209         CALL     CELLM   ;continue with next word
      001A6C 20 E2            [ 2] 4210         JRA     TNAM2
      001A6E CD 06 29         [ 4] 4211 TNAM3:  CALL     SWAPP
      001A71 CC 06 0F         [ 2] 4212         JP     DROP
      001A74 CD 08 1C         [ 4] 4213 TNAM4:  CALL     DDROP
      001A77 CC 0B FF         [ 2] 4214         JP     ZERO
                                   4215 
                                   4216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4217 ;       .ID     ( na -- )
                                   4218 ;        Display  name at address.
                                   4219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A7A                       4220         _HEADER DOTID,3,".ID"
      001A7A 1A 47                    1         .word LINK 
                           001A7C     2         LINK=.
      001A7C 03                       3         .byte 3  
      001A7D 2E 49 44                 4         .ascii ".ID"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A80                          5         DOTID:
      001A80 CD 07 CC         [ 4] 4221         CALL     QDUP    ;if zero no name
      001A83 CD 04 98         [ 4] 4222         CALL     QBRAN
      001A86 1A 96                 4223         .word      DOTI1
      001A88 CD 0C C5         [ 4] 4224         CALL     COUNT
      001A8B CD 04 6F         [ 4] 4225         CALL     DOLIT
      001A8E 00 1F                 4226         .word      0x1F
      001A90 CD 06 76         [ 4] 4227         CALL     ANDD    ;mask lexicon bits
      001A93 CC 19 85         [ 2] 4228         JP     UTYPE
      001A96 CD 0F A4         [ 4] 4229 DOTI1:  CALL     DOTQP
      001A99 09                    4230         .byte      9
      001A9A 20 6E 6F 4E 61 6D 65  4231         .ascii     " noName"
      001AA1 81               [ 4] 4232         RET
                                   4233 
                           000000  4234 WANT_SEE=0
                           000000  4235 .if WANT_SEE 
                                   4236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4237 ;       SEE     ( -- ; <string> )
                                   4238 ;       A simple decompiler.
                                   4239 ;       Updated for byte machines.
                                   4240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4241         _HEADER SEE,3,"SEE"
                                   4242         CALL     TICK    ;starting address
                                   4243         CALL     CR
                                   4244         CALL     ONEM
                                   4245 SEE1:   CALL     ONEP
                                   4246         CALL     DUPP
                                   4247         CALL     AT
                                   4248         CALL     DUPP
                                   4249         CALL     QBRAN
                                   4250         .word    SEE2
                                   4251         CALL     TNAME   ;?is it a name
                                   4252 SEE2:   CALL     QDUP    ;name address or zero
                                   4253         CALL     QBRAN
                                   4254         .word    SEE3
                                   4255         CALL     SPACE
                                   4256         CALL     DOTID   ;display name
                                   4257         CALL     ONEP
                                   4258         JRA      SEE4
                                   4259 SEE3:   CALL     DUPP
                                   4260         CALL     CAT
                                   4261         CALL     UDOT    ;display number
                                   4262 SEE4:   CALL     NUFQ    ;user control
                                   4263         CALL     QBRAN
                                   4264         .word    SEE1
                                   4265         JP     DROP
                                   4266 .endif ; WANT_SEE 
                                   4267 
                                   4268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4269 ;       WORDS   ( -- )
                                   4270 ;       Display names in vocabulary.
                                   4271 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AA2                       4272         _HEADER WORDS,5,"WORDS"
      001AA2 1A 7C                    1         .word LINK 
                           001AA4     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001AA4 05                       3         .byte 5  
      001AA5 57 4F 52 44 53           4         .ascii "WORDS"
      001AAA                          5         WORDS:
      001AAA CD 0F 77         [ 4] 4273         CALL     CR
      001AAD CD 07 62         [ 4] 4274         CALL     CNTXT   ;only in context
      001AB0 CD 04 E3         [ 4] 4275 WORS1:  CALL     AT
      001AB3 CD 07 CC         [ 4] 4276         CALL     QDUP    ;?at end of list
      001AB6 CD 04 98         [ 4] 4277         CALL     QBRAN
      001AB9 1A CC                 4278         .word      WORS2
      001ABB CD 06 19         [ 4] 4279         CALL     DUPP
      001ABE CD 0F 35         [ 4] 4280         CALL     SPACE
      001AC1 CD 1A 80         [ 4] 4281         CALL     DOTID   ;display a name
      001AC4 CD 0B 77         [ 4] 4282         CALL     CELLM
      001AC7 CD 04 B4         [ 4] 4283         CALL     BRAN
      001ACA 1A B0                 4284         .word      WORS1
      001ACC 81               [ 4] 4285 WORS2:  RET
                                   4286 
                                   4287         
                                   4288 ;; Hardware reset
                                   4289 
                                   4290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4291 ;  COPYRIGTH
                                   4292 ; print copyright notice 
                                   4293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001ACD                       4294 COPYRIGHT:
      001ACD CD 0F A4         [ 4] 4295     CALL DOTQP 
      001AD0 21                    4296     .byte 33 
      001AD1 4A 61 63 71 75 65 73  4297     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001AF2 CC 0F 77         [ 2] 4298     JP CR 
                                   4299 
                                   4300 
                                   4301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4302 ;  PRT_LICENCE 
                                   4303 ;  print GPLV2 licence 
                                   4304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AF5                       4305 PRT_LICENCE:
      001AF5 CD 0F A4         [ 4] 4306         CALL DOTQP 
      001AF8 0F                    4307         .byte  15 
      001AF9 4C 49 43 45 4E 43 45  4308         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B08 81               [ 4] 4309         RET 
                                   4310 
                                   4311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4312 ;    PRINT_VERSION ( c1 c2 -- )
                                   4313 ;    c2 minor 
                                   4314 ;    c1 major 
                                   4315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B09                       4316 PRINT_VERSION:
      001B09 CD 0F A4         [ 4] 4317      CALL DOTQP 
      001B0C 09                    4318      .byte 9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001B0D 20 76 65 72 73 69 6F  4319      .ascii " version "
             6E 20
      001B16 CD 0D F9         [ 4] 4320      CALL BDIGS 
      001B19 CD 0E 33         [ 4] 4321      CALL DIGS 
      001B1C CD 0E 33         [ 4] 4322      CALL DIGS 
      001B1F                       4323      _DOLIT '.' 
      001B1F CD 04 6F         [ 4]    1     CALL DOLIT 
      001B22 00 2E                    2     .word '.' 
      001B24 CD 0E 09         [ 4] 4324      CALL HOLD 
      001B27                       4325      _DROP 
      001B27 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001B2A CD 0E 33         [ 4] 4326      CALL DIGS 
      001B2D CD 0E 5E         [ 4] 4327      CALL EDIGS 
      001B30 CD 0F 5F         [ 4] 4328      CALL TYPES 
      001B33 81               [ 4] 4329      RET 
                                   4330 
                                   4331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4332 ;       hi      ( -- )
                                   4333 ;       Display sign-on message.
                                   4334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B34                       4335         _HEADER HI,2,"HI"
      001B34 1A A4                    1         .word LINK 
                           001B36     2         LINK=.
      001B36 02                       3         .byte 2  
      001B37 48 49                    4         .ascii "HI"
      001B39                          5         HI:
      001B39 CD 0F 77         [ 4] 4336         CALL     CR
      001B3C CD 0F A4         [ 4] 4337         CALL     DOTQP   
      001B3F 0A                    4338         .byte      10
      001B40 73 74 6D 38 65 46 6F  4339         .ascii     "stm8eForth"
             72 74 68
      001B4A                       4340 	_DOLIT VER 
      001B4A CD 04 6F         [ 4]    1     CALL DOLIT 
      001B4D 00 04                    2     .word VER 
      001B4F                       4341         _DOLIT EXT 
      001B4F CD 04 6F         [ 4]    1     CALL DOLIT 
      001B52 00 00                    2     .word EXT 
      001B54 CD 1B 09         [ 4] 4342         CALL PRINT_VERSION 
      001B57 CD 0F A4         [ 4] 4343         CALL    DOTQP
                           000001  4344 .if NUCLEO          
      001B5A 12                    4345         .byte 18
      001B5B 20 6F 6E 20 4E 55 43  4346         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4347 .endif
                           000000  4348 .if DISCOVERY
                                   4349         .byte 19
                                   4350         .ascii  " on STM8S-DISCOVERY"
                                   4351 .endif
                           000000  4352 .if DOORBELL
                                   4353         .byte 16
                                   4354         .ascii " on stm8s105k6b6"
                                   4355 .endif
      001B6D CC 0F 77         [ 2] 4356         JP     CR
                                   4357 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           000000  4358 WANT_DEBUG=0
                           000000  4359 .if WANT_DEBUG 
                                   4360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4361 ;       DEBUG      ( -- )
                                   4362 ;       Display sign-on message.
                                   4363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4364         _HEADER DEBUG,5,"DEBUG"
                                   4365 	CALL DOLIT
                                   4366 	.word 0x65
                                   4367 	CALL EMIT
                                   4368 	CALL ZERO
                                   4369  	CALL ZLESS 
                                   4370 	CALL DOLIT
                                   4371 	.word 0xFFFE
                                   4372 	CALL ZLESS 
                                   4373 	CALL UPLUS 
                                   4374  	_DROP 
                                   4375 	CALL DOLIT
                                   4376 	.word 3
                                   4377 	CALL UPLUS 
                                   4378 	CALL UPLUS 
                                   4379  	_DROP
                                   4380 	CALL DOLIT
                                   4381 	.word 0x43
                                   4382 	CALL UPLUS 
                                   4383  	_DROP
                                   4384 	CALL EMIT
                                   4385 	CALL DOLIT
                                   4386 	.word 0x4F
                                   4387 	CALL DOLIT
                                   4388 	.word 0x6F
                                   4389  	CALL XORR
                                   4390 	CALL DOLIT
                                   4391 	.word 0xF0
                                   4392  	CALL ANDD
                                   4393 	CALL DOLIT
                                   4394 	.word 0x4F
                                   4395  	CALL ORR
                                   4396 	CALL EMIT
                                   4397 	CALL DOLIT
                                   4398 	.word 8
                                   4399 	CALL DOLIT
                                   4400 	.word 6
                                   4401  	CALL SWAPP
                                   4402 	CALL OVER
                                   4403 	CALL XORR
                                   4404 	CALL DOLIT
                                   4405 	.word 3
                                   4406 	CALL ANDD 
                                   4407 	CALL ANDD
                                   4408 	CALL DOLIT
                                   4409 	.word 0x70
                                   4410 	CALL UPLUS 
                                   4411 	_DROP
                                   4412 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   4413 	CALL ZERO
                                   4414 	CALL QBRAN
                                   4415 	.word DEBUG1
                                   4416 	CALL DOLIT
                                   4417 	.word 0x3F
                                   4418 DEBUG1:
                                   4419 	CALL DOLIT
                                   4420 	.word 0xFFFF
                                   4421 	CALL QBRAN
                                   4422 	.word DEBUG2
                                   4423 	CALL DOLIT
                                   4424 	.word 0x74
                                   4425 	CALL BRAN
                                   4426 	.word DEBUG3
                                   4427 DEBUG2:
                                   4428 	CALL DOLIT
                                   4429 	.word 0x21
                                   4430 DEBUG3:
                                   4431 	CALL EMIT
                                   4432 	CALL DOLIT
                                   4433 	.word 0x68
                                   4434 	CALL DOLIT
                                   4435 	.word 0x80
                                   4436 	CALL STORE
                                   4437 	CALL DOLIT
                                   4438 	.word 0x80
                                   4439 	CALL AT
                                   4440 	CALL EMIT
                                   4441 	CALL DOLIT
                                   4442 	.word 0x4D
                                   4443 	CALL TOR
                                   4444 	CALL RAT
                                   4445 	CALL RFROM
                                   4446 	CALL ANDD
                                   4447 	CALL EMIT
                                   4448 	CALL DOLIT
                                   4449 	.word 0x61
                                   4450 	CALL DOLIT
                                   4451 	.word 0xA
                                   4452 	CALL TOR
                                   4453 DEBUG4:
                                   4454 	CALL ONE
                                   4455 	CALL UPLUS 
                                   4456 	_DROP
                                   4457 	CALL DONXT
                                   4458 	.word DEBUG4
                                   4459 	CALL EMIT
                                   4460 	CALL DOLIT
                                   4461 	.word 0x656D
                                   4462 	CALL DOLIT
                                   4463 	.word 0x100
                                   4464 	CALL UMSTA
                                   4465 	CALL SWAPP
                                   4466 	CALL DOLIT
                                   4467 	.word 0x100
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4468 	CALL UMSTA
                                   4469 	CALL SWAPP 
                                   4470 	_DROP
                                   4471 	CALL EMIT
                                   4472 	CALL EMIT
                                   4473 	CALL DOLIT
                                   4474 	.word 0x2043
                                   4475 	CALL ZERO
                                   4476 	CALL DOLIT
                                   4477 	.word 0x100
                                   4478 	CALL UMMOD
                                   4479 	CALL EMIT
                                   4480 	CALL EMIT
                                   4481 	;JP ORIG
                                   4482 	RET
                                   4483 .endif ; WANT_DEBUG 
                                   4484 
                                   4485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4486 ;       'BOOT   ( -- a )
                                   4487 ;       The application startup vector.
                                   4488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B70                       4489         _HEADER TBOOT,5,"'BOOT"
      001B70 1B 36                    1         .word LINK 
                           001B72     2         LINK=.
      001B72 05                       3         .byte 5  
      001B73 27 42 4F 4F 54           4         .ascii "'BOOT"
      001B78                          5         TBOOT:
      001B78 CD 06 CF         [ 4] 4490         CALL     DOVAR
      001B7B 40 02                 4491         .word    APP_RUN      ;application to boot
                                   4492 
                                   4493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4494 ;       COLD    ( -- )
                                   4495 ;       The hilevel cold start s=ence.
                                   4496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B7D                       4497         _HEADER COLD,4,"COLD"
      001B7D 1B 72                    1         .word LINK 
                           001B7F     2         LINK=.
      001B7F 04                       3         .byte 4  
      001B80 43 4F 4C 44              4         .ascii "COLD"
      001B84                          5         COLD:
                           000000  4498 .if WANT_DEBUG
                                   4499         CALL DEBUG
                                   4500 .endif ; WANT_DEBUG
      001B84 CD 04 6F         [ 4] 4501 COLD1:  CALL     DOLIT
      001B87 00 2B                 4502         .word      UZERO
      001B89 CD 04 6F         [ 4] 4503 	CALL     DOLIT
      001B8C 00 06                 4504         .word      UPP
      001B8E CD 04 6F         [ 4] 4505         CALL     DOLIT
      001B91 00 1C                 4506 	.word      UEND-UZERO
      001B93 CD 0D 29         [ 4] 4507         CALL     CMOVE   ;initialize user area
                           000001  4508 .if WANT_FLOAT 
      001B96 CD 2C 35         [ 4] 4509         CALL    FINIT 
                                   4510 .endif 
                                   4511 ; if APP_RUN==0 initialize with ca de 'hi'  
      001B99 90 CE 40 02      [ 2] 4512         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001B9D 26 0B            [ 1] 4513         jrne 0$
      001B9F 1D 00 02         [ 2] 4514         subw x,#CELLL 
      001BA2 90 AE 1B 39      [ 2] 4515         ldw y,#HI  
      001BA6 FF               [ 2] 4516         ldw (x),y
      001BA7 CD 1C A2         [ 4] 4517         call UPDATRUN 
      001BAA                       4518 0$:        
                                   4519 ; update LAST with APP_LAST 
                                   4520 ; if APP_LAST > LAST else do the opposite
      001BAA 90 CE 40 00      [ 2] 4521         ldw y,APP_LAST 
      001BAE 90 B3 1C         [ 2] 4522         cpw y,ULAST 
      001BB1 22 05            [ 1] 4523         jrugt 1$ 
                                   4524 ; save LAST at APP_LAST  
      001BB3 CD 1C 8A         [ 4] 4525         call UPDATLAST 
      001BB6 20 06            [ 2] 4526         jra 2$
      001BB8                       4527 1$: ; update LAST with APP_LAST 
      001BB8 90 BF 1C         [ 2] 4528         ldw ULAST,y
      001BBB 90 BF 16         [ 2] 4529         ldw UCNTXT,y
      001BBE                       4530 2$:  
                                   4531 ; update APP_CP if < app_space 
      001BBE 90 CE 40 04      [ 2] 4532         ldw y,APP_CP  
      001BC2 90 B3 1A         [ 2] 4533         cpw y,UCP   
      001BC5 24 06            [ 1] 4534         jruge 3$ 
      001BC7 CD 1C B3         [ 4] 4535         call UPDATCP
      001BCA 90 BE 1A         [ 2] 4536         ldw y,UCP   
      001BCD                       4537 3$:
      001BCD 90 BF 1A         [ 2] 4538         ldw UCP,y                 
                                   4539 ; update UVP with APP_VP  
                                   4540 ; if APP_VP>UVP else do the opposite 
      001BD0 90 CE 40 06      [ 2] 4541         ldw y,APP_VP 
      001BD4 90 B3 18         [ 2] 4542         cpw y,UVP 
      001BD7 22 05            [ 1] 4543         jrugt 4$
      001BD9 CD 1C CA         [ 4] 4544         call UPDATVP 
      001BDC 20 03            [ 2] 4545         jra 6$
      001BDE                       4546 4$: ; update UVP with APP_VP 
      001BDE 90 BF 18         [ 2] 4547         ldw UVP,y 
      001BE1                       4548 6$:      
      001BE1 CD 14 CA         [ 4] 4549         CALL     PRESE   ;initialize data stack and TIB
      001BE4 CD 1B 78         [ 4] 4550         CALL     TBOOT
      001BE7 CD 0D 12         [ 4] 4551         CALL     ATEXE   ;application boot
      001BEA CD 17 A3         [ 4] 4552         CALL     OVERT
      001BED CC 14 E7         [ 2] 4553         JP     QUIT    ;start interpretation
                                   4554 
                                   4555 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4556         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001BF0 1B 7F                   31     .word LINK 
                           001BF2    32     LINK=.
      001BF2 03                      33     .byte 3 
      001BF3 46 50 21                34     .ascii "FP!"
      001BF6                         35 FPSTOR:
      001BF6 90 93            [ 1]   36     ldw y,x
      001BF8 90 FE            [ 2]   37     ldw y,(y)
      001BFA 90 9F            [ 1]   38     ld a,yl 
      001BFC B7 34            [ 1]   39     ld FPTR,a 
      001BFE 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C01 90 93            [ 1]   41     ldw y,x 
      001C03 90 FE            [ 2]   42     ldw y,(y)
      001C05 90 BF 35         [ 2]   43     ldw PTR16,y
      001C08 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C0B 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C0C 1B F2                   52     .word LINK 
                           001C0E    53 LINK=.
      001C0E 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001C0F 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C15                         56 EEPROM: 
      001C15 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C19 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C1C EF 02            [ 2]   59     ldw (2,x),y 
      001C1E 90 5F            [ 1]   60     clrw y 
      001C20 FF               [ 2]   61     ldw (x),y 
      001C21 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C22 1C 0E                   68 	.word LINK 
                           001C24    69 	LINK=.
      001C24 08                      70 	.byte 8 
      001C25 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C2D                         72 EEPLAST:
      001C2D 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C30 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C34 EF 02            [ 2]   75 	ldw (2,x),y 
      001C36 90 5F            [ 1]   76 	clrw y 
      001C38 FF               [ 2]   77 	ldw (x),y 
      001C39 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C3A 1C 24                   84 	.word LINK 
                           001C3C    85 	LINK=.
      001C3C 07                      86 	.byte 7
      001C3D 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001C44                         88 EEPRUN:
      001C44 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001C47 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001C4B EF 02            [ 2]   91 	ldw (2,x),y 
      001C4D 90 5F            [ 1]   92 	clrw y 
      001C4F FF               [ 2]   93 	ldw (x),y 
      001C50 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001C51 1C 3C                  100 	.word LINK
                           001C53   101 	LINK=.
      001C53 06                     102 	.byte 6 
      001C54 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001C5A                        104 EEPCP:
      001C5A 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001C5D 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001C61 EF 02            [ 2]  107 	ldw (2,x),y 
      001C63 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001C65 FF               [ 2]  109 	ldw (x),y 
      001C66 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001C67 1C 53                  116 	.word LINK
                           001C69   117 	LINK=.
      001C69 06                     118 	.byte 6
      001C6A 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001C70                        120 EEPVP:
      001C70 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001C73 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001C77 EF 02            [ 2]  123 	ldw (2,x),y 
      001C79 90 5F            [ 1]  124 	clrw y 
      001C7B FF               [ 2]  125 	ldw (x),y 
      001C7C 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001C7D 1C 69                  132 	.word LINK 
                           001C7F   133 	LINK=.
      001C7F 0A                     134 	.byte 10
      001C80 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001C8A                        136 UPDATLAST:
      001C8A CD 07 8E         [ 4]  137 	call LAST
      001C8D CD 04 E3         [ 4]  138 	call AT  
      001C90 CD 1C 2D         [ 4]  139 	call EEPLAST
      001C93 CC 1E 80         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001C96 1C 7F                  146 	.word LINK
                           001C98   147 	LINK=.
      001C98 09                     148 	.byte 9
      001C99 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001CA2                        150 UPDATRUN:
      001CA2 CD 1C 44         [ 4]  151 	call EEPRUN
      001CA5 CC 1E 80         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001CA8 1C 98                  158 	.word LINK 
                           001CAA   159 	LINK=.
      001CAA 08                     160 	.byte 8 
      001CAB 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



             50
      001CB3                        162 UPDATCP:
      001CB3 CD 07 7E         [ 4]  163 	call CPP 
      001CB6 CD 04 E3         [ 4]  164 	call AT 
      001CB9 CD 1C 5A         [ 4]  165 	call EEPCP 
      001CBC CC 1E 80         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001CBF 1C AA                  172 	.word LINK
                           001CC1   173 	LINK=.
      001CC1 08                     174 	.byte 8 
      001CC2 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001CCA                        176 UPDATVP:
      001CCA CD 07 70         [ 4]  177 	call VPP 
      001CCD CD 04 E3         [ 4]  178 	call AT
      001CD0 CD 1C 70         [ 4]  179 	call EEPVP 
      001CD3 CC 1E 80         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001CD6 1C C1                  187     .word LINK 
                           001CD8   188 LINK=.
      001CD8 02                     189     .byte 2
      001CD9 46 40                  190     .ascii "F@"
      001CDB                        191 FARAT:
      001CDB CD 1B F6         [ 4]  192     call FPSTOR
      001CDE CC 1D A3         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001CE1 1C D8                  200     .word LINK
                           001CE3   201     LINK=.
      001CE3 03                     202     .byte 3 
      001CE4 46 43 40               203     .ascii "FC@" 
      001CE7                        204 FARCAT:
      001CE7 CD 1B F6         [ 4]  205     call FPSTOR
      001CEA CC 1D C5         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001CED 1C E3                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           001CEF   215 LINK=.
      001CEF 06                     216     .byte 6 
      001CF0 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001CF6                        218 UNLKEE:
      001CF6 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001CFA 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001CFE 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D02 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D06 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D0B 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D0C 1C EF                  231     .word LINK 
                           001D0E   232 LINK=. 
      001D0E 06                     233     .byte 6 
      001D0F 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D15                        235 UNLKFL:
      001D15 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D19 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D1D 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D21 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D25 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D2A 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D2B 1D 0E                  248 	.word LINK 
                           001D2D   249 	LINK=.
      001D2D 06                     250 	.byte 6
      001D2E 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D34                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D34 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D37 3D 34            [ 1]  256 	tnz FPTR 
      001D39 26 16            [ 1]  257 	jrne 4$
      001D3B 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D3F 24 10            [ 1]  259     jruge 4$
      001D41 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001D45 25 0D            [ 1]  261     jrult 9$
      001D47 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001D4B 22 07            [ 1]  263 	jrugt 9$
      001D4D CD 1C F6         [ 4]  264 	call UNLKEE
      001D50 81               [ 4]  265 	ret 
      001D51 CD 1D 15         [ 4]  266 4$: call UNLKFL
      001D54 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001D55 1D 2D                  274 	.word LINK 
                           001D57   275 	LINK=.
      001D57 04                     276 	.byte 4 
      001D58 4C 4F 43 4B            277 	.ascii "LOCK" 
      001D5C                        278 LOCK: 
      001D5C 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001D60 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D64 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001D65 1D 57                  287 	.word LINK 
                           001D67   288 	LINK=. 
      001D67 08                     289 	.byte 8 
      001D68 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001D70                        291 INC_FPTR:
      001D70 3C 36            [ 1]  292 	inc PTR8 
      001D72 26 0C            [ 1]  293 	jrne 1$
      001D74 90 89            [ 2]  294 	pushw y 
      001D76 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001D79 90 5C            [ 1]  296 	incw y 
      001D7B 90 BF 34         [ 2]  297 	ldw FPTR,y
      001D7E 90 85            [ 2]  298 	popw y  
      001D80 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001D81 1D 67                  305 	.word LINK 
                           001D83   306 	LINK=.
      001D83 04                     307 	.byte 4 
      001D84 50 54 52 2B            308 	.ascii "PTR+"
      001D88                        309 PTRPLUS:
      001D88 90 93            [ 1]  310 	ldw y,x 
      001D8A 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001D8D 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001D91 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001D94 24 02            [ 1]  314 	jrnc 1$
      001D96 3C 34            [ 1]  315 	inc FPTR 
      001D98 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001D99 1D 83                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           001D9B   324 	LINK=.
      001D9B 07                     325 	.byte 7 
      001D9C 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001DA3                        327 EE_READ:
      001DA3 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001DA6 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001DAA 90 95            [ 1]  330 	ld yh,a 
      001DAC CD 1D 70         [ 4]  331 	call INC_FPTR 
      001DAF 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001DB3 CD 1D 70         [ 4]  333 	call INC_FPTR 
      001DB6 90 97            [ 1]  334 	ld yl,a 
      001DB8 FF               [ 2]  335 	ldw (x),y 
      001DB9 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001DBA 1D 9B                  342 	.word LINK 
                           001DBC   343 	LINK=.
      001DBC 08                     344 	.byte 8
      001DBD 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001DC5                        346 EE_CREAD:
      001DC5 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001DC8 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001DCC CD 1D 70         [ 4]  349 	call INC_FPTR
      001DCF 90 5F            [ 1]  350 	clrw y 
      001DD1 90 97            [ 1]  351 	ld yl,a 
      001DD3 FF               [ 2]  352 	ldw (x),y 
      001DD4 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001DD5 1D BC                  362 	.word LINK 
                           001DD7   363 	LINK=. 
      001DD7 07                     364 	.byte 7 
      001DD8 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001DDF                        367 WR_BYTE:
      001DDF CD 04 63         [ 4]  368 	call FC_XOFF
      001DE2 90 93            [ 1]  369 	ldw y,x 
      001DE4 90 FE            [ 2]  370 	ldw y,(y)
      001DE6 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001DE9 90 9F            [ 1]  372 	ld a,yl
      001DEB 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001DEF 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001DF4 CD 04 4D         [ 4]  375 	call FC_XON
      001DF7 CC 1D 70         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001DFA 1D D7                  385 	.word LINK 
                           001DFC   386 	LINK=.
      001DFC 07                     387 	.byte 7 
      001DFD 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E04                        389 WR_WORD:
      001E04 CD 04 63         [ 4]  390 	call FC_XOFF
      001E07 90 93            [ 1]  391 	ldw y,x
      001E09 90 FE            [ 2]  392 	ldw y,(y)
      001E0B 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E0E 90 9E            [ 1]  394 	ld a,yh 
      001E10 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E14 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E19 CD 1D 70         [ 4]  397 	call INC_FPTR 
      001E1C 90 9F            [ 1]  398 	ld a,yl 
      001E1E 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E22 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E27 CD 04 4D         [ 4]  401 	call FC_XON
      001E2A CC 1D 70         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E2D 1D FC                  409     .word LINK 
                           001E2F   410 	LINK=.
      001E2F 04                     411     .byte 4 
      001E30 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E34                        417 EECSTORE:
      001E34 52 02            [ 2]  418 	sub sp,#VSIZE
      001E36 CD 1B F6         [ 4]  419     call FPSTOR
      001E39 E6 01            [ 1]  420 	ld a,(1,x)
      001E3B 43               [ 1]  421 	cpl a 
      001E3C 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E3E 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E40 CD 1D 34         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001E43 3D 34            [ 1]  426 	tnz FPTR 
      001E45 26 19            [ 1]  427 	jrne 2$
      001E47 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001E4A 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001E4E 2B 10            [ 1]  430 	jrmi 2$
      001E50 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001E54 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001E56 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001E58 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001E5C 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001E60                        437 2$: 
      001E60 CD 1D DF         [ 4]  438 	call WR_BYTE 	
      001E63 0D 02            [ 1]  439 	tnz (OPT,sp)
      001E65 27 0D            [ 1]  440 	jreq 3$ 
      001E67 7B 01            [ 1]  441     ld a,(BTW,sp)
      001E69 90 5F            [ 1]  442     clrw y
      001E6B 90 97            [ 1]  443 	ld yl,a 
      001E6D 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001E70 FF               [ 2]  445 	ldw (x),y 
      001E71 CD 1D DF         [ 4]  446 	call WR_BYTE
      001E74                        447 3$: 
      001E74 CD 1D 5C         [ 4]  448 	call LOCK 
      001E77 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001E79 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001E7A 1E 2F                  456 	.word LINK 
                           001E7C   457 	LINK=.
      001E7C 03                     458 	.byte 3 
      001E7D 45 45 21               459 	.ascii "EE!"
      001E80                        460 EESTORE:
      001E80 CD 1B F6         [ 4]  461 	call FPSTOR 
      001E83 CD 1D 34         [ 4]  462 	call UNLOCK 
      001E86 90 93            [ 1]  463 	ldw y,x 
      001E88 90 FE            [ 2]  464 	ldw y,(y)
      001E8A 90 89            [ 2]  465 	pushw y 
      001E8C 90 5E            [ 1]  466 	swapw y 
      001E8E FF               [ 2]  467 	ldw (x),y 
      001E8F CD 1D DF         [ 4]  468 	call WR_BYTE 
      001E92 90 85            [ 2]  469 	popw y 
      001E94 1D 00 02         [ 2]  470 	subw x,#CELLL
      001E97 FF               [ 2]  471 	ldw (x),y 
      001E98 CD 1D DF         [ 4]  472 	call WR_BYTE
      001E9B CC 1D 5C         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001E9E 1E 7C                  481 	.word LINK 
                           001EA0   482 	LINK=. 
      001EA0 09                     483 	.byte 9 
      001EA1 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001EAA                        485 row_erase:
      001EAA CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001EAD CD 1B F6         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001EB0 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001EB3 90 AE 1F 03      [ 2]  491 	ldw y,#row_erase_proc
      001EB7 FF               [ 2]  492 	ldw (x),y 
      001EB8 CD 0C ED         [ 4]  493 	call PAD 
      001EBB 90 AE 1F 2A      [ 2]  494 	ldw y,#row_erase_proc_end 
      001EBF 72 A2 1F 03      [ 2]  495 	subw y,#row_erase_proc
      001EC3 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001EC6 FF               [ 2]  497 	ldw (x),y 
      001EC7 CD 0D 29         [ 4]  498 	call CMOVE 
      001ECA                        499 block_erase:
      001ECA 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001ECD 90 A3 35 80      [ 2]  501 	cpw y,#app_space 
      001ED1 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001ED3 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001ED7 24 04            [ 1]  505 	jruge 1$
      001ED9 CD 04 4D         [ 4]  506 	call FC_XON
      001EDC 81               [ 4]  507 	ret ; bad address 
      001EDD 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001EE1 23 04            [ 2]  509 	jrule 2$ 
      001EE3 CD 04 4D         [ 4]  510 	call FC_XON
      001EE6 81               [ 4]  511 	ret ; bad address 
      001EE7                        512 2$:	
      001EE7 CD 1C F6         [ 4]  513 	call UNLKEE 
      001EEA 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001EEC                        516 erase_flash:
      001EEC CD 1D 15         [ 4]  517 	call UNLKFL 
      001EEF                        518 proceed_erase:
      001EEF CD 0C ED         [ 4]  519 	call PAD 
      001EF2 90 93            [ 1]  520 	ldw y,x
      001EF4 90 FE            [ 2]  521 	ldw y,(y)
      001EF6 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001EF9 90 FD            [ 4]  523 	call (y) 
      001EFB 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001EFF CD 04 4D         [ 4]  525 	call FC_XON
      001F02 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F03                        529 row_erase_proc:
      001F03 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F07 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F0B 4F               [ 1]  532 	clr a 
      001F0C 90 5F            [ 1]  533 	clrw y 
      001F0E 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F12 90 5C            [ 1]  535     incw y
      001F14 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F18 90 5C            [ 1]  537     incw y
      001F1A 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F1E 90 5C            [ 1]  539     incw y
      001F20 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F24 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F29 81               [ 4]  542 	ret
      001F2A                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F2A                        556 copy_buffer:
      001F2A 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F2C 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F30 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F34 90 5F            [ 1]  561 	clrw y
      001F36 F6               [ 1]  562 1$:	ld a,(x)
      001F37 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F3B 5C               [ 1]  564 	incw x 
      001F3C 90 5C            [ 1]  565 	incw y 
      001F3E 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F40 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001F42 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001F47 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001F48 81               [ 4]  571 	ret 
      001F49                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001F49                        578 copy_prog_to_ram:
      001F49 1D 00 06         [ 2]  579 	subw x,#6
      001F4C 90 AE 1F 2A      [ 2]  580 	ldw y,#copy_buffer 
      001F50 EF 04            [ 2]  581 	ldw (4,x),y 
      001F52 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001F56 EF 02            [ 2]  583 	ldw (2,x),y 
      001F58 90 AE 1F 49      [ 2]  584 	ldw y,#copy_buffer_end 
      001F5C 72 A2 1F 2A      [ 2]  585 	subw y,#copy_buffer  
      001F60 FF               [ 2]  586 	ldw (x),y 
      001F61 CD 0D 29         [ 4]  587 	call CMOVE 
      001F64 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F65 1E A0                  597 	.word LINK 
                           001F67   598 	LINK=.
      001F67 06                     599 	.byte 6 
      001F68 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001F6E                        601 write_row:
      001F6E CD 04 63         [ 4]  602 	call FC_XOFF
      001F71 CD 1B F6         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001F74 A6 80            [ 1]  605 	ld a,#0x80 
      001F76 B4 36            [ 1]  606 	and a,PTR8 
      001F78 B7 36            [ 1]  607 	ld PTR8,a  
      001F7A CD 1F 49         [ 4]  608 	call copy_prog_to_ram
      001F7D CD 1D 34         [ 4]  609 	call UNLOCK
      001F80 90 93            [ 1]  610 	ldw y,x 
      001F82 90 FE            [ 2]  611 	ldw y,(y)
      001F84 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001F87 89               [ 2]  613 	pushw x 
      001F88 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001F89 CD 17 00         [ 4]  615 	call TIBBASE
      001F8C CD 1D 5C         [ 4]  616 	call LOCK
      001F8F 85               [ 2]  617 	popw x 
      001F90 CD 04 4D         [ 4]  618 	call FC_XON 
      001F93 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001F94 1F 67                  627 		.word LINK 
                           001F96   628 		LINK=.
      001F96 07                     629 		.byte 7 
      001F97 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001F9E                        631 set_option: 
      001F9E 90 93            [ 1]  632 		ldw y,x 
      001FA0 90 FE            [ 2]  633 		ldw y,(y)
      001FA2 27 06            [ 1]  634 		jreq 1$
      001FA4 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001FA8 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001FAA 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001FAD 81               [ 4]  639 		ret
      001FAE 90 58            [ 2]  640 2$:		sllw y 
      001FB0 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001FB4 FF               [ 2]  642 		ldw (x),y 
      001FB5 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001FB8 90 5F            [ 1]  644 		clrw y 
      001FBA FF               [ 2]  645 		ldw (x),y 
      001FBB CD 1E 34         [ 4]  646 		call EECSTORE
      001FBE 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001FBF 1F 96                  656 	.word LINK  
                           001FC1   657 	LINK=.
      001FC1 08                     658 	.byte 8 
      001FC2 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001FCA                        660 pristine:
                                    661 ;;; erase EEPROM
      001FCA CD 1C 15         [ 4]  662 	call EEPROM 
      001FCD CD 08 27         [ 4]  663 1$:	call DDUP 
      001FD0 CD 1E AA         [ 4]  664 	call row_erase
      001FD3 90 93            [ 1]  665 	ldw y,x 
      001FD5 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001FD8 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001FDC EF 02            [ 2]  668 	ldw (2,x),y
      001FDE 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001FE2 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001FE4 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001FE8 FF               [ 2]  673 2$:	ldw (x),y   
      001FE9 90 5F            [ 1]  674 	clrw y 
      001FEB EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001FED CD 08 27         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001FF0 CD 1F 9E         [ 4]  677 	call set_option
      001FF3 90 93            [ 1]  678 	ldw y,x 
      001FF5 90 FE            [ 2]  679 	ldw y,(y)
      001FF7 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001FF9 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001FFD 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001FFF 90 AE 35 80      [ 2]  684 	ldw y,#app_space
      002003 EF 02            [ 2]  685 	ldw (2,x),y  
      002005 90 5F            [ 1]  686 	clrw y 
      002007 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002008 CD 1E AA         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00200B 1D 00 02         [ 2]  690 	subw x,#CELLL 
      00200E 90 5F            [ 1]  691 	clrw y  
      002010 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002011 CD 06 19         [ 4]  693 	call DUPP  
      002014 CD 20 31         [ 4]  694 	call reset_vector
      002017 90 93            [ 1]  695 	ldw y,x 
      002019 90 FE            [ 2]  696 	ldw y,(y)
      00201B 90 5C            [ 1]  697 	incw y   ; next vector 
      00201D 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002021 25 ED            [ 1]  699 	jrult 4$
      002023 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002026 1F C1                  708 	.word LINK 
                           002028   709 	LINK=. 
      002028 08                     710 	.byte 8 
      002029 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002031                        712 reset_vector:
      002031 90 93            [ 1]  713 	ldw y,x
      002033 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002036 90 FE            [ 2]  715 	ldw y,(y)
      002038 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00203C 27 3A            [ 1]  717 	jreq 9$
      00203E 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      002042 22 34            [ 1]  719 	jrugt 9$  
      002044 90 58            [ 2]  720 	sllw y 
      002046 90 58            [ 2]  721 	sllw y 
      002048 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      00204C 90 BF 26         [ 2]  723 	ldw YTEMP,y
      00204F 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      002052 EF 02            [ 2]  725 	ldw (2,x),y 
      002054 90 5F            [ 1]  726 	clrw y
      002056 FF               [ 2]  727 	ldw (x),y 
      002057 A6 82            [ 1]  728 	ld a,#0x82 
      002059 90 95            [ 1]  729 	ld yh,a
      00205B EF 04            [ 2]  730 	ldw (4,x),y
      00205D CD 1E 80         [ 4]  731 	call EESTORE
      002060 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      002063 90 5F            [ 1]  733 	clrw y 
      002065 FF               [ 2]  734 	ldw (x),y 
      002066 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      00206A EF 04            [ 2]  736 	ldw (4,x),y 
      00206C 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      00206F 72 A9 00 02      [ 2]  738 	addw y,#2
      002073 EF 02            [ 2]  739 	ldw (2,x),y 
      002075 CD 1E 80         [ 4]  740 	call EESTORE
      002078 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      002079 20 28                  750 	.word LINK 
                           00207B   751 	LINK=.
      00207B 07                     752 	.byte 7
      00207C 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      002083                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002083 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      002085 90 93            [ 1]  761 	ldw y,x 
      002087 90 FE            [ 2]  762 	ldw y,(y)
      002089 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      00208B 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      00208D AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      002090 BF 35            [ 2]  766 	ldw PTR16,X
      002092 AE FF FC         [ 2]  767 	ldw x,#-4 
      002095 1C 00 04         [ 2]  768 1$:	addw x,#4
      002098 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      00209B 27 22            [ 1]  770 	jreq 9$
      00209D 90 93            [ 1]  771 	ldw y,x  
      00209F 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      0020A2 11 03            [ 1]  773 	cp a,(CADR,sp)
      0020A4 25 EF            [ 1]  774 	jrult 1$
      0020A6 90 5C            [ 1]  775 	incw y 
      0020A8 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      0020AB 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      0020AD 25 E6            [ 1]  778 	jrult 1$ 
      0020AF 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      0020B1 54               [ 2]  780 	srlw x
      0020B2 54               [ 2]  781 	srlw x 
      0020B3 90 93            [ 1]  782 	ldw y,x 
      0020B5 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      0020B7 FF               [ 2]  784 	ldw (x),y
      0020B8 CD 20 31         [ 4]  785 	call reset_vector
      0020BB 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      0020BD 20 D6            [ 2]  787 	jra 1$
      0020BF 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      0020C1 1C 00 02         [ 2]  789 	addw x,#CELLL 
      0020C4 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      0020C6 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      0020C7 20 7B                  799 	.word LINK
                           0020C9   800 	LINK=.
      0020C9 08                     801 	.byte 8 
      0020CA 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      0020D2                        803 set_vector:
      0020D2 90 93            [ 1]  804     ldw y,x 
      0020D4 1C 00 02         [ 2]  805 	addw x,#CELLL 
      0020D7 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      0020D9 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      0020DD 23 04            [ 2]  808 	jrule 2$
      0020DF 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      0020E2 81               [ 4]  810 	ret
      0020E3 90 58            [ 2]  811 2$:	sllw y 
      0020E5 90 58            [ 2]  812 	sllw y 
      0020E7 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020EB 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      0020EE A6 82            [ 1]  815 	ld a,#0x82 
      0020F0 90 95            [ 1]  816 	ld yh,a 
      0020F2 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      0020F4 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      0020F6 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      0020F9 EF 04            [ 2]  821 	ldw (4,x),y 
      0020FB 90 BE 26         [ 2]  822 	ldw y,YTEMP
      0020FE EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002100 90 5F            [ 1]  824 	clrw y 
      002102 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002103 CD 1E 80         [ 4]  826 	call EESTORE 
      002106 90 93            [ 1]  827 	ldw y,x 
      002108 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00210B 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00210E EF 04            [ 2]  830 	ldw (4,x),y 
      002110 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002113 72 A9 00 02      [ 2]  832 	addw y,#2 
      002117 EF 02            [ 2]  833 	ldw (2,x),y 
      002119 90 5F            [ 1]  834 	clrw y 
      00211B FF               [ 2]  835 	ldw (x),y 
      00211C CD 1E 80         [ 4]  836 	call EESTORE
      00211F 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002122 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002123 20 C9                  845 	.word LINK
                           002125   846 	LINK=.
      002125 03                     847 	.byte 3
      002126 45 45 2C               848 	.ascii "EE,"
      002129                        849 EE_COMMA:
      002129 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00212C 90 BE 1A         [ 2]  851 	ldw y,UCP
      00212F 90 89            [ 2]  852 	pushw y 
      002131 EF 02            [ 2]  853 	ldw (2,x),y 
      002133 90 5F            [ 1]  854 	clrw y 
      002135 FF               [ 2]  855 	ldw (x),y
      002136 CD 1E 80         [ 4]  856 	call EESTORE
      002139 90 85            [ 2]  857 	popw y 
      00213B 72 A9 00 02      [ 2]  858 	addw y,#2
      00213F 90 BF 1A         [ 2]  859 	ldw UCP,y
      002142 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002143 21 25                  867 	.word LINK 
                           002145   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002145 04                     869 	.byte 4 
      002146 45 45 43 2C            870 	.ascii "EEC,"
      00214A                        871 EE_CCOMMA:
      00214A 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      00214D 90 BE 1A         [ 2]  873 	ldw y,UCP
      002150 90 89            [ 2]  874 	pushw y 
      002152 EF 02            [ 2]  875 	ldw (2,x),y 
      002154 90 5F            [ 1]  876 	clrw y 
      002156 FF               [ 2]  877 	ldw (x),y
      002157 CD 1E 34         [ 4]  878 	call EECSTORE
      00215A 90 85            [ 2]  879 	popw y 
      00215C 90 5C            [ 1]  880 	incw y 
      00215E 90 BF 1A         [ 2]  881 	ldw UCP,y
      002161 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      002162 21 45                  889 	.word LINK 
                           002164   890 	LINK=.
      002164 07                     891 	.byte 7 
      002165 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      00216C                        893 ROW2BUF: 
      00216C CD 1B F6         [ 4]  894 	call FPSTOR 
      00216F A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002171 88               [ 1]  896 	push a 
      002172 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      002174 B7 36            [ 1]  898 	ld PTR8,a
      002176 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      00217A 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      00217E 90 F7            [ 1]  901 	ld (y),a
      002180 CD 1D 70         [ 4]  902 	call INC_FPTR
      002183 90 5C            [ 1]  903 	incw y 
      002185 0A 01            [ 1]  904 	dec (1,sp)
      002187 26 F1            [ 1]  905 	jrne 1$ 
      002189 84               [ 1]  906 	pop a 
      00218A 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      00218B 21 64                  915 	.word LINK 
                           00218D   916 	LINK=.
      00218D 07                     917 	.byte 7 
      00218E 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      002195                        919 BUF2ROW:
      002195 CD 07 1D         [ 4]  920 	call TBUF ; ( ud rb -- )
      002198 CD 07 DD         [ 4]  921 	call ROT 
      00219B CD 07 DD         [ 4]  922 	call ROT  ; ( rb ud -- )
      00219E CD 1F 6E         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0021A1 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0021A2 21 8D                  931 	.word LINK 
                           0021A4   932 	LINK=.
      0021A4 05                     933 	.byte 5 
      0021A5 52 46 52 45 45         934 	.ascii "RFREE"
      0021AA                        935 RFREE:
      0021AA E6 01            [ 1]  936 	ld a,(1,x)
      0021AC A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      0021AE B7 26            [ 1]  938 	ld YTEMP,a 
      0021B0 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      0021B2 B0 26            [ 1]  940 	sub a,YTEMP 
      0021B4 90 5F            [ 1]  941 	clrw y 
      0021B6 90 97            [ 1]  942 	ld yl,a
      0021B8 FF               [ 2]  943 	ldw (x),y 
      0021B9 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      0021BA 21 A4                  955 	.word LINK 
                           0021BC   956 	LINK=. 
      0021BC 06                     957 	.byte 6
      0021BD 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      0021C3                        960 RAM2EE:
                                    961 ; copy ud on top 
      0021C3 90 93            [ 1]  962 	ldw y,x 
      0021C5 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      0021C8 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      0021CB 90 93            [ 1]  965 	ldw y,x 
      0021CD 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      0021D0 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      0021D3 FF               [ 2]  968 	ldw (x),y 
      0021D4 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      0021D7 EF 02            [ 2]  970 	ldw (2,x),y 
      0021D9 CD 21 6C         [ 4]  971 	call ROW2BUF 
      0021DC 90 93            [ 1]  972 	ldw y,x 
      0021DE 90 EE 06         [ 2]  973 	ldw y,(6,y)
      0021E1 90 89            [ 2]  974 	pushw y ; udl 
      0021E3 90 9F            [ 1]  975 	ld a,yl
      0021E5 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      0021E7 90 5F            [ 1]  977 	clrw y 
      0021E9 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021EB 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      0021EF 1D 00 02         [ 2]  980 	subw x,#CELLL 
      0021F2 FF               [ 2]  981 	ldw (x),y  
      0021F3 CD 06 29         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      0021F6 CD 05 34         [ 4]  983 	call RFROM  
      0021F9 CD 21 AA         [ 4]  984 	call RFREE 
      0021FC CD 09 7F         [ 4]  985 	call MIN
      0021FF CD 06 19         [ 4]  986 	call DUPP 
      002202 CD 05 E2         [ 4]  987 	call TOR  
      002205 CD 0D 29         [ 4]  988 	call CMOVE
      002208 CD 21 95         [ 4]  989 	call BUF2ROW 
      00220B CD 05 34         [ 4]  990 	call RFROM 
      00220E 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00220F 21 BC                  999 	.word LINK 
                           002211  1000 	LINK=. 
      002211 05                    1001 	.byte 5 
      002212 46 41 44 44 52        1002 	.ascii "FADDR"
      002217                       1003 FADDR:
      002217 CC 0B FF         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      00221A 22 11                 1020 	.word LINK 
                           00221C  1021 	LINK=.
      00221C 05                    1022 	.byte 5 
      00221D 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002222                       1024 FMOVE:
      002222 CD 07 2F         [ 4] 1025 	call TFLASH 
      002225 CD 04 E3         [ 4] 1026 	CALL AT 
      002228 CD 04 98         [ 4] 1027 	CALL QBRAN 
      00222B 22 A6                 1028 	.word no_move  
      00222D CD 07 7E         [ 4] 1029 	call CPP
      002230 CD 04 E3         [ 4] 1030 	call AT  
      002233 CD 06 19         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002236 CD 07 62         [ 4] 1032 	call CNTXT 
      002239 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00223C CD 04 6F         [ 4] 1034 	call DOLIT 
      00223F 00 02                 1035 	.word 2 
      002241 CD 08 D2         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002244 CD 06 29         [ 4] 1037 	call SWAPP 
      002247 CD 22 17         [ 4] 1038 	call FADDR 
      00224A CD 07 DD         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      00224D CD 06 19         [ 4] 1040 	call DUPP 
      002250 CD 05 E2         [ 4] 1041 	call TOR    ; R: a 
      002253                       1042 FMOVE2: 
      002253 CD 0C DC         [ 4] 1043 	call HERE 
      002256 CD 05 45         [ 4] 1044 	call RAT 
      002259 CD 08 D2         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      00225C                       1046 next_row:
      00225C CD 06 19         [ 4] 1047 	call DUPP 
      00225F CD 05 E2         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002262 CD 21 C3         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002265 CD 06 19         [ 4] 1050 	call DUPP 
      002268 CD 05 E2         [ 4] 1051 	call TOR
      00226B CD 08 3C         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      00226E CD 06 19         [ 4] 1053 	call DUPP 
      002271 CD 0B FF         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      002274 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002277 CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00227A CD 06 41         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00227D CD 08 D2         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002280 CD 06 19         [ 4] 1059 	call DUPP 
      002283 CD 04 98         [ 4] 1060 	call QBRAN
      002286 22 9F                 1061 	.word fmove_done 
      002288 CD 06 29         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00228B CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      00228E CD 08 3C         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      002291 CD 06 19         [ 4] 1065 	call DUPP 
      002294 CD 05 E2         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002297 CD 06 29         [ 4] 1067 	call SWAPP 
      00229A CD 04 B4         [ 4] 1068 	call BRAN
      00229D 22 5C                 1069 	.word next_row  
      00229F                       1070 fmove_done:	
      00229F CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0022A2 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0022A5 81               [ 4] 1073  	ret  
      0022A6                       1074 no_move:
      0022A6 CD 0B FF         [ 4] 1075 	call ZERO
      0022A9 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      0022AA 22 1C                 1083 	.word LINK 
                           0022AC  1084 	LINK=.
      0022AC 09                    1085 	.byte 9
      0022AD 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      0022B6                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      0022B6 CD 1C 70         [ 4] 1089 	call EEPVP 
      0022B9                       1090 	_DROP 
      0022B9 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0022BC CD 04 E3         [ 4] 1091 	call AT
      0022BF CD 07 70         [ 4] 1092 	call VPP 
      0022C2 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      0022C5 CD 1C 5A         [ 4] 1095 	call EEPCP 
      0022C8                       1096 	_DROP
      0022C8 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0022CB CD 04 E3         [ 4] 1097 	call AT
      0022CE CD 04 6F         [ 4] 1098 	call DOLIT 
      0022D1 00 02                 1099 	.word 2 
      0022D3 CD 08 3C         [ 4] 1100 	call PLUS 
      0022D6 CD 06 19         [ 4] 1101 	call DUPP 
      0022D9 CD 07 62         [ 4] 1102 	call CNTXT 
      0022DC CD 04 D1         [ 4] 1103 	call STORE
      0022DF CD 07 8E         [ 4] 1104 	call LAST
      0022E2 CD 04 D1         [ 4] 1105 	call STORE 
      0022E5 CD 1C 8A         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      0022E8 CD 07 7E         [ 4] 1108 	call CPP 
      0022EB CD 04 D1         [ 4] 1109 	call STORE
      0022EE CD 1C B3         [ 4] 1110 	call UPDATCP 
      0022F1 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      0022F2 22 AC                 1117 	.word LINK 
                           0022F4  1118 	LINK=. 
      0022F4 06                    1119 	.byte 6
      0022F5 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      0022FB                       1121 IFMOVE:
      0022FB CD 07 2F         [ 4] 1122 	call TFLASH 
      0022FE CD 04 E3         [ 4] 1123 	CALL AT 
      002301 CD 04 98         [ 4] 1124 	CALL QBRAN 
      002304 22 A6                 1125 	.word no_move 
      002306 CD 07 7E         [ 4] 1126 	call CPP 
      002309 CD 04 E3         [ 4] 1127 	call AT 
      00230C CD 06 19         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00230F CD 1C 70         [ 4] 1129 	call EEPVP 
      002312                       1130 	_DROP
      002312 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002315 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      002318 CD 05 E2         [ 4] 1132 	call TOR 
      00231B CD 22 17         [ 4] 1133 	call FADDR
      00231E CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002321 CC 22 53         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                           000001  4557 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   4558         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002324 22 F4                   34         .word LINK 
                           002326    35         LINK=.
      002326 02                      36         .byte 2
      002327 50 49                   37         .ascii "PI" 
      002329                         38 PII:
      002329 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00232C 90 AE 01 63      [ 2]   40         ldw y,#355 
      002330 EF 02            [ 2]   41         ldw (2,x),y 
      002332 90 AE 00 71      [ 2]   42         ldw y,#113 
      002336 FF               [ 2]   43         ldw (x),y 
      002337 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002338 23 26                   51         .word LINK 
                           00233A    52         LINK=.
      00233A 05                      53         .byte 5 
      00233B 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002340                         55 SQRT2:
      002340 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      002343 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      002347 EF 02            [ 2]   58         ldw (2,x),y 
      002349 90 AE 36 24      [ 2]   59         ldw y,#13860 
      00234D FF               [ 2]   60         ldw (x),y 
      00234E 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      00234F 23 3A                   66         .word LINK 
                           002351    67         LINK=.
      002351 05                      68         .byte 5
      002352 53 51 52 54 33          69         .ascii "SQRT3" 
      002357                         70 SQRT3: 
      002357 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      00235A 90 AE 49 81      [ 2]   72     ldw y,#18817 
      00235E EF 02            [ 2]   73     ldw (2,x),y 
      002360 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      002364 FF               [ 2]   75     ldw (x),y 
      002365 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      002366 23 51                   81         .word LINK 
                           002368    82         LINK=.
      002368 01                      83         .byte 1
      002369 45                      84         .ascii "E" 
      00236A                         85 ENEPER:
      00236A 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      00236D 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002371 EF 02            [ 2]   88     ldw (2,x),y 
      002373 90 AE 29 32      [ 2]   89     ldw y,#10546 
      002377 FF               [ 2]   90     ldw (x),y 
      002378 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      002379 23 68                   95         .word LINK 
                           00237B    96         LINK=.
      00237B 06                      97         .byte 6 
      00237C 53 51 52 54 31 30       98         .ascii "SQRT10" 
      002382                         99 SQRT10:
      002382 1D 00 04         [ 2]  100     subw x,#2*CELLL
      002385 90 AE 59 98      [ 2]  101     ldw y,#22936 
      002389 EF 02            [ 2]  102     ldw (2,x),y 
      00238B 90 AE 1C 55      [ 2]  103     ldw y,#7253
      00238F FF               [ 2]  104     ldw (x),y 
      002390 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002391 23 7B                  110         .word LINK 
                           002393   111         LINK=. 
      002393 05                     112         .byte 5 
      002394 31 32 52 54 32         113         .ascii "12RT2"
      002399                        114 RT12_2:
      002399 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      00239C 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0023A0 EF 02            [ 2]  117     ldw (2,x),y 
      0023A2 90 AE 62 CD      [ 2]  118     ldw y,#25293
      0023A6 FF               [ 2]  119     ldw (x),y 
      0023A7 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      0023A8 23 93                  125         .word LINK 
                           0023AA   126         LINK=.
      0023AA 05                     127         .byte 5 
      0023AB 4C 4F 47 32 53         128         .ascii "LOG2S" 
      0023B0                        129 LOG2S:
      0023B0 1D 00 04         [ 2]  130     subw x,#2*CELLL
      0023B3 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      0023B7 EF 02            [ 2]  132     ldw (2,x),y 
      0023B9 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      0023BD FF               [ 2]  134     ldw (x),y 
      0023BE 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      0023BF 23 AA                  140         .word LINK 
                           0023C1   141         LINK=.
      0023C1 04                     142         .byte 4 
      0023C2 4C 4E 32 53            143         .ascii "LN2S" 
      0023C6                        144 LN2S: 
      0023C6 1D 00 04         [ 2]  145     subw x,#2*CELLL
      0023C9 90 AE 01 E5      [ 2]  146     ldw y,#485
      0023CD EF 02            [ 2]  147     ldw (2,x),y 
      0023CF 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      0023D3 FF               [ 2]  149     ldw (x),y 
      0023D4 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                   4559 .endif
                           000001  4560 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   4561         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0023D5 23 C1                   34     .word LINK 
                           0023D7    35     LINK=.
      0023D7 06                      36     .byte 6
      0023D8 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0023DE                         38 CALLOT:
      0023DE CD 07 7E         [ 4]   39     CALL CPP
      0023E1 CD 06 19         [ 4]   40     CALL DUPP 
      0023E4 CD 04 E3         [ 4]   41     CALL AT 
      0023E7 CD 05 E2         [ 4]   42     CALL TOR 
      0023EA CD 0C 6F         [ 4]   43     CALL PSTOR 
      0023ED CD 1C B3         [ 4]   44     CALL UPDATCP 
      0023F0 CD 05 34         [ 4]   45     CALL RFROM
      0023F3 CC 0B FF         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0023F6 23 D7                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           0023F8    55     LINK=.
      0023F8 06                      56     .byte 6
      0023F9 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0023FF                         58 CTABLE:
      0023FF CD 23 DE         [ 4]   59     CALL CALLOT     
      002402 CC 19 46         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002405 23 F8                   69     .word LINK 
                           002407    70     LINK=.
      002407 06                      71     .byte 6
      002408 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00240E                         73 WTABLE:
      00240E CD 0B 86         [ 4]   74     CALL CELLS  
      002411 CD 23 DE         [ 4]   75     CALL CALLOT 
      002414 CC 19 46         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002417 24 07                   84     .word LINK 
                           002419    85     LINK=.
      002419 06                      86     .byte 6
      00241A 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      002420                         88 CTAT:
      002420 CD 1B F6         [ 4]   89     call FPSTOR 
      002423 CD 1D 88         [ 4]   90     call PTRPLUS 
      002426 CC 1D C5         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002429 24 19                   99     .word LINK 
                           00242B   100     LINK=.
      00242B 06                     101     .byte 6
      00242C 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002432                        103 WTAT:
      002432 CD 1B F6         [ 4]  104     call FPSTOR 
      002435 CD 0B 86         [ 4]  105     call CELLS 
      002438 CD 1D 88         [ 4]  106     call PTRPLUS 
      00243B CD 1D A3         [ 4]  107     call EE_READ 
      00243E 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      00243F 24 2B                  115     .word LINK 
                           002441   116     LINK=.
      002441 06                     117     .byte 6 
      002442 43 54 49 4E 49 54      118     .ascii "CTINIT"
      002448                        119 CTINIT:
      002448 CD 1B F6         [ 4]  120     CALL FPSTOR
      00244B CD 1D 34         [ 4]  121     CALL UNLOCK
      00244E CD 0B FF         [ 4]  122     CALL ZERO 
      002451 CD 0B 93         [ 4]  123 1$: CALL ONEP 
      002454 CD 06 19         [ 4]  124     CALL DUPP 
      002457 CD 24 A4         [ 4]  125     CALL INTQ 
      00245A CD 04 98         [ 4]  126     CALL QBRAN 
      00245D 24 67                  127     .word 2$
      00245F CD 1D DF         [ 4]  128     call WR_BYTE 
      002462 CD 04 B4         [ 4]  129     CALL BRAN 
      002465 24 51                  130     .word 1$ 
      002467                        131 2$: _DDROP 
      002467 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00246A CD 1D 5C         [ 4]  132     CALL LOCK 
      00246D 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      00246E 24 41                  140     .word LINK 
                           002470   141     LINK=.
      002470 06                     142     .byte 6 
      002471 57 54 49 4E 49 54      143     .ascii "WTINIT"
      002477                        144 WTINIT:
      002477 CD 1B F6         [ 4]  145     CALL FPSTOR
      00247A CD 1D 34         [ 4]  146     CALL UNLOCK
      00247D CD 0B FF         [ 4]  147     CALL ZERO 
      002480 CD 0B 93         [ 4]  148 1$: CALL ONEP 
      002483 CD 06 19         [ 4]  149     CALL DUPP
      002486 CD 24 A4         [ 4]  150     CALL INTQ
      002489 CD 04 98         [ 4]  151     CALL QBRAN 
      00248C 24 96                  152     .word 2$
      00248E CD 1E 04         [ 4]  153     call WR_WORD 
      002491 CD 04 B4         [ 4]  154     CALL BRAN 
      002494 24 80                  155     .word 1$ 
      002496                        156 2$: _DDROP 
      002496 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002499 CD 1D 5C         [ 4]  157     CALL LOCK 
      00249C 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      00249D 24 70                  166     .word LINK 
                           00249F   167     LINK=.
      00249F 04                     168     .byte 4
      0024A0 5B 4E 5D 3F            169     .ascii "[N]?" 
      0024A4                        170 INTQ:
      0024A4 CD 0F 77         [ 4]  171     CALL CR 
      0024A7 CD 04 6F         [ 4]  172     call DOLIT 
      0024AA 00 5B                  173     .word '[
      0024AC CD 04 36         [ 4]  174     CALL EMIT 
      0024AF CD 10 1E         [ 4]  175     CALL DOT 
      0024B2 CD 0F A4         [ 4]  176     CALL  DOTQP
      0024B5 03                     177     .byte 3
      0024B6 5D 3F 20               178     .ascii "]? " 
      0024B9 CD 13 AE         [ 4]  179     CALL QUERY 
      0024BC CD 11 D9         [ 4]  180     call TOKEN 
      0024BF CC 25 7E         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                   4562 .endif
                           000001  4563 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                   4564         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024C2                         35     _HEADER DBLVER,7,"DBL-VER"
      0024C2 24 9F                    1         .word LINK 
                           0024C4     2         LINK=.
      0024C4 07                       3         .byte 7  
      0024C5 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      0024CC                          5         DBLVER:
      0024CC CD 0F 77         [ 4]   36     CALL CR 
      0024CF CD 0F A4         [ 4]   37     CALL DOTQP 
      0024D2 18                      38     .byte  24 
      0024D3 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      0024EB CD 1A F5         [ 4]   40     CALL PRT_LICENCE
      0024EE CD 1A CD         [ 4]   41     CALL COPYRIGHT  
      0024F1                         42     _DOLIT DVER_MAJOR 
      0024F1 CD 04 6F         [ 4]    1     CALL DOLIT 
      0024F4 00 01                    2     .word DVER_MAJOR 
      0024F6                         43     _DOLIT DVER_MINOR  
      0024F6 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0024F9 00 00                    2     .word DVER_MINOR 
      0024FB CC 1B 09         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      0024FE                         49 nsign: ; addr cntr -- addr cntr f 
      0024FE 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      002501 90 93            [ 1]   51     LDW Y,X 
      002503 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      002506 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002508 A1 2D            [ 1]   54     CP A,#'-' 
      00250A 27 03            [ 1]   55     JREQ NEG_SIGN 
      00250C 4F               [ 1]   56     CLR A  
      00250D 20 18            [ 2]   57     JRA STO_SIGN 
      00250F                         58 NEG_SIGN:
                                     59 ; increment addr 
      00250F 90 93            [ 1]   60     LDW Y,X 
      002511 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      002514 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002518 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      00251A 90 93            [ 1]   65     LDW Y,X
      00251C 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      00251F 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      002523 EF 02            [ 2]   68     LDW (2,X),Y 
      002525 A6 FF            [ 1]   69     LD A,#0XFF
      002527                         70 STO_SIGN:   
      002527 F7               [ 1]   71     LD (X),A 
      002528 E7 01            [ 1]   72     LD (1,X),A 
      00252A 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00252B                         79 parse_digits:
      00252B                         80 1$:
      00252B CD 06 19         [ 4]   81     CALL DUPP 
      00252E                         82     _QBRAN 5$ 
      00252E CD 04 98         [ 4]    1     CALL QBRAN
      002531 25 73                    2     .word 5$
      002533 CD 05 E2         [ 4]   83     CALL TOR   ; dlo dhi a R: cntr 
      002536 CD 0C C5         [ 4]   84     CALL COUNT ; dlo dhi a+ char 
      002539 CD 06 DF         [ 4]   85     CALL BASE 
      00253C CD 04 E3         [ 4]   86     CALL AT 
      00253F CD 0E BD         [ 4]   87     CALL DIGTQ 
      002542                         88     _QBRAN 4$ ; not a digit
      002542 CD 04 98         [ 4]    1     CALL QBRAN
      002545 25 6A                    2     .word 4$
      002547 CD 28 B1         [ 4]   89     CALL DTOR  ; dlo dhi R: cntr a+ c  
      00254A CD 06 DF         [ 4]   90     CALL BASE 
      00254D CD 04 E3         [ 4]   91     CALL AT 
      002550 CD 27 3C         [ 4]   92     CALL DSSTAR
      002553 CD 05 34         [ 4]   93     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002556 CD 0B FF         [ 4]   94     CALL ZERO 
      002559 CD 2B 74         [ 4]   95     CALL DPLUS 
      00255C CD 05 34         [ 4]   96     CALL RFROM  ; dlo dhi a+ 
      00255F CD 05 34         [ 4]   97     CALL RFROM ; dlo dhi a+ cntr 
      002562 CD 0B A0         [ 4]   98     CALL ONEM 
      002565                         99     _BRAN 1$ ; dlo dhi a+ R: 
      002565 CD 04 B4         [ 4]    1     CALL BRAN 
      002568 25 2B                    2     .word 1$ 
      00256A                        100 4$: _DROP  ; dlo dhi a+ 
      00256A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00256D CD 0B A0         [ 4]  101     CALL ONEM  ; unget char 
      002570 CD 05 34         [ 4]  102     CALL RFROM ; dlo dhi a+ cntr-
      002573                        103 5$:
      002573 81               [ 4]  104     RET 
                                    105 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    109 ;   convert string to integer 
                                    110 ;   double begin with '#' 
                                    111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002574                        112     _HEADER NUMBQ,7,"NUMBER?"
      002574 24 C4                    1         .word LINK 
                           002576     2         LINK=.
      002576 07                       3         .byte 7  
      002577 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      00257E                          5         NUMBQ:
                                    113 ; save current base value 
      00257E CD 06 DF         [ 4]  114     CALL BASE 
      002581 CD 04 E3         [ 4]  115     CALL AT 
      002584 CD 05 E2         [ 4]  116     CALL TOR 
                                    117 ; initialize integer to 0     
      002587 1D 00 04         [ 2]  118     SUBW X,#4 
      00258A 90 5F            [ 1]  119     CLRW Y 
      00258C FF               [ 2]  120     LDW (X),Y 
      00258D EF 02            [ 2]  121     LDW (2,X),Y ; a 0 0 R: base  
      00258F                        122     _DOLIT 2 
      00258F CD 04 6F         [ 4]    1     CALL DOLIT 
      002592 00 02                    2     .word 2 
      002594 CD 0C 58         [ 4]  123     CALL PICK  ; a 0 0 a R: base    
      002597 CD 0C C5         [ 4]  124     CALL COUNT ; a 0 0 a+ n 
                                    125 ; check for '#' double integer 
      00259A CD 06 41         [ 4]  126     CALL OVER  ; a 0 0 a+ n a+
      00259D CD 05 01         [ 4]  127     CALL CAT   ; a 0 0 a+ n c 
      0025A0                        128     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0025A0 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025A3 00 23                    2     .word '#' 
      0025A5 CD 08 FA         [ 4]  129     CALL EQUAL 
      0025A8 CD 05 E2         [ 4]  130     CALL TOR   ; a 0 0 a+ n R: base d? 
      0025AB CD 05 45         [ 4]  131     CALL RAT   ; a 0 0 a+ n d? R: base d?
      0025AE                        132     _QBRAN NUMQ0
      0025AE CD 04 98         [ 4]    1     CALL QBRAN
      0025B1 25 BF                    2     .word NUMQ0
                                    133 ; update a and count
      0025B3 CD 06 29         [ 4]  134     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0025B6 CD 0B 93         [ 4]  135     CALL ONEP 
      0025B9 CD 06 29         [ 4]  136     CALL SWAPP 
      0025BC CD 0B A0         [ 4]  137     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    138 ; check for '$' hexadecimal  
      0025BF                        139 NUMQ0: 
      0025BF CD 06 41         [ 4]  140     CALL OVER   
      0025C2 CD 05 01         [ 4]  141     CALL CAT   
      0025C5                        142     _DOLIT '$'
      0025C5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025C8 00 24                    2     .word '$' 
      0025CA CD 08 FA         [ 4]  143     CALL EQUAL ; a 0 0 a+ n- f  
      0025CD                        144     _QBRAN NUMQ1 
      0025CD CD 04 98         [ 4]    1     CALL QBRAN
      0025D0 25 E1                    2     .word NUMQ1
      0025D2 CD 0E 94         [ 4]  145     CALL HEX   ; switch to hexadecimal base 
                                    146 ; update a and count 
      0025D5 CD 06 29         [ 4]  147     CALL SWAPP 
      0025D8 CD 0B 93         [ 4]  148     CALL ONEP 
      0025DB CD 06 29         [ 4]  149     CALL SWAPP
      0025DE CD 0B A0         [ 4]  150     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    151 ; check for minus sign 
      0025E1                        152 NUMQ1: 
      0025E1 CD 24 FE         [ 4]  153     CALL nsign 
      0025E4 CD 05 E2         [ 4]  154     CALL TOR ; R: base d? sign  
                                    155 ; check for end of string     
      0025E7 CD 07 CC         [ 4]  156     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      0025EA                        157     _QBRAN NUMQ4 ; yes , not a number 
      0025EA CD 04 98         [ 4]    1     CALL QBRAN
      0025ED 26 2C                    2     .word NUMQ4
      0025EF CD 25 2B         [ 4]  158     CALL parse_digits
      0025F2 CD 07 CC         [ 4]  159     CALL QDUP 
      0025F5 CD 06 62         [ 4]  160     CALL ZEQUAL  
      0025F8                        161     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      0025F8 CD 04 98         [ 4]    1     CALL QBRAN
      0025FB 26 2C                    2     .word NUMQ4
      0025FD                        162     _DROP  ; a dlo dhi 
      0025FD 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002600 CD 05 34         [ 4]  163     CALL RFROM  ; a dlo dhi sign 
      002603                        164     _QBRAN NUMQ3
      002603 CD 04 98         [ 4]    1     CALL QBRAN
      002606 26 0B                    2     .word NUMQ3
      002608 CD 08 98         [ 4]  165     CALL DNEGA
      00260B                        166 NUMQ3: 
      00260B CD 07 DD         [ 4]  167     CALL ROT ; dlo dhi a  R: base d?
      00260E                        168     _DROP
      00260E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002611                        169     _DOLIT -2  ; double return -2 flag 
      002611 CD 04 6F         [ 4]    1     CALL DOLIT 
      002614 FF FE                    2     .word -2 
      002616 CD 05 34         [ 4]  170     CALL RFROM ; dlo dhi d? R: base 
      002619                        171     _TBRAN NUMQ8 
      002619 CD 04 A6         [ 4]    1     CALL TBRAN 
      00261C 26 35                    2     .word NUMQ8 
      00261E CD 06 29         [ 4]  172     CALL SWAPP 
      002621                        173     _DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002621 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002624 CD 0B 93         [ 4]  174     CALL ONEP   ; single return -1 flag   
      002627                        175     _BRAN NUMQ8
      002627 CD 04 B4         [ 4]    1     CALL BRAN 
      00262A 26 35                    2     .word NUMQ8 
      00262C                        176 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   177 .if WANT_FLOAT
      00262C CD 05 34         [ 4]  178     CALL RFROM ; sign 
      00262F CD 05 34         [ 4]  179     CALL RFROM ; d? 
      002632 CD 2F 4F         [ 4]  180     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   181 .else 
                                    182     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    183     ADDW SP,#4 ; drop d? sign  R: base 
                                    184     CLRW Y 
                                    185     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    186 .endif 
                                    187 ; restore original base value     
      002635                        188 NUMQ8: 
      002635 CD 05 34         [ 4]  189     CALL RFROM 
      002638 CD 06 DF         [ 4]  190     CALL BASE 
      00263B CD 04 D1         [ 4]  191     CALL STORE 
      00263E 81               [ 4]  192     RET 
                                    193 
                                    194 
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;   DABS ( d -- d )
                                    198 ;   absolute value of double
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00263F                        200     _HEADER DABS,4,"DABS"
      00263F 25 76                    1         .word LINK 
                           002641     2         LINK=.
      002641 04                       3         .byte 4  
      002642 44 41 42 53              4         .ascii "DABS"
      002646                          5         DABS:
      002646 F6               [ 1]  201     LD A,(X) 
      002647 A4 80            [ 1]  202     AND A,#0X80 
      002649 27 03            [ 1]  203     JREQ DABS1 
      00264B CD 08 98         [ 4]  204     CALL DNEGA 
      00264E                        205 DABS1:
      00264E 81               [ 4]  206     RET 
                                    207 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    209 ;  DSIGN ( d -- d f )
                                    210 ;  sign of double 
                                    211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00264F                        212     _HEADER DSIGN,5,"DSIGN"
      00264F 26 41                    1         .word LINK 
                           002651     2         LINK=.
      002651 05                       3         .byte 5  
      002652 44 53 49 47 4E           4         .ascii "DSIGN"
      002657                          5         DSIGN:
      002657 A6 00            [ 1]  213     LD A,#0 
      002659 90 93            [ 1]  214     LDW Y,X 
      00265B 90 FE            [ 2]  215     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00265D 2A 02            [ 1]  216     JRPL DSIGN1
      00265F A6 FF            [ 1]  217     LD A,#0XFF 
      002661                        218 DSIGN1:
      002661 1D 00 02         [ 2]  219     SUBW X,#2 
      002664 F7               [ 1]  220     LD (X),A 
      002665 E7 01            [ 1]  221     LD (1,X),A 
      002667 81               [ 4]  222     RET 
                                    223 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    225 ;   DS/MOD ( ud us - ur qud )
                                    226 ;   unsigned divide double by single 
                                    227 ;   return double quotient 
                                    228 ;   and single remainder 
                                    229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002668                        230     _HEADER DSLMOD,6,"DS/MOD"
      002668 26 51                    1         .word LINK 
                           00266A     2         LINK=.
      00266A 06                       3         .byte 6  
      00266B 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      002671                          5         DSLMOD:
      002671 90 93            [ 1]  231         LDW     Y,X             ; stack pointer to Y
      002673 FE               [ 2]  232         LDW     X,(X)           ; un
      002674 BF 26            [ 2]  233         LDW     YTEMP,X         ; save un
      002676 93               [ 1]  234         LDW     X,Y
      002677 89               [ 2]  235         PUSHW   X               ; save stack pointer
      002678 90 89            [ 2]  236         PUSHW   Y 
      00267A EE 02            [ 2]  237         LDW     X,(2,X)           ; X=udh
      00267C 90 BE 26         [ 2]  238         LDW     Y,YTEMP         ; divisor 
      00267F 65               [ 2]  239         DIVW    X,Y 
      002680 BF 24            [ 2]  240         LDW     XTEMP,X         ; QUOTIENT hi 
      002682 93               [ 1]  241         LDW     X,Y             ; remainder in X 
      002683 90 85            [ 2]  242         POPW    Y 
      002685 90 EE 04         [ 2]  243         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002688 A6 10            [ 1]  244         LD      A,#16           ; loop count
      00268A 90 58            [ 2]  245         SLLW    Y               ; udl shift udl into udh
      00268C                        246 DSLMOD3:
      00268C 59               [ 2]  247         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00268D 25 04            [ 1]  248         JRC     DSLMODa         ; if carry out of rotate
      00268F B3 26            [ 2]  249         CPW     X,YTEMP         ; compare udh to un
      002691 25 05            [ 1]  250         JRULT   DSLMOD4         ; can't subtract
      002693                        251 DSLMODa:
      002693 72 B0 00 26      [ 2]  252         SUBW    X,YTEMP         ; can subtract
      002697 98               [ 1]  253         RCF
      002698                        254 DSLMOD4:
      002698 8C               [ 1]  255         CCF                     ; quotient bit
      002699 90 59            [ 2]  256         RLCW    Y               ; rotate into quotient, rotate out udl
      00269B 4A               [ 1]  257         DEC     A               ; repeat
      00269C 26 EE            [ 1]  258         JRNE    DSLMOD3           ; if A == 0
      00269E                        259 DSLMODb:
      00269E BF 26            [ 2]  260         LDW     YTEMP,X         ; done, save remainder
      0026A0 85               [ 2]  261         POPW    X               ; restore stack pointer
      0026A1 EF 02            [ 2]  262         LDW     (2,X),Y           ; save quotient low 
      0026A3 90 BE 24         [ 2]  263         LDW     Y,XTEMP         ; quotient hi 
      0026A6 FF               [ 2]  264         LDW     (X),Y           ; save quotient hi 
      0026A7 90 BE 26         [ 2]  265         LDW     Y,YTEMP         ; remainder onto stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0026AA EF 04            [ 2]  266         LDW     (4,X),Y
      0026AC 81               [ 4]  267         RET 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    270 ;   D# ( d -- d )
                                    271 ;   extract least digit 
                                    272 ;   from double integer 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026AD                        274     _HEADER DDIG,2,"D#"
      0026AD 26 6A                    1         .word LINK 
                           0026AF     2         LINK=.
      0026AF 02                       3         .byte 2  
      0026B0 44 23                    4         .ascii "D#"
      0026B2                          5         DDIG:
      0026B2 CD 06 DF         [ 4]  275     CALL BASE 
      0026B5 CD 04 E3         [ 4]  276     CALL AT 
      0026B8 CD 26 71         [ 4]  277     CALL DSLMOD
      0026BB CD 07 DD         [ 4]  278     CALL ROT   
      0026BE CD 0D BD         [ 4]  279     CALL DIGIT 
      0026C1 CD 0E 09         [ 4]  280     CALL HOLD 
      0026C4 81               [ 4]  281     RET 
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    D#S ( d -- s )
                                    285 ;   extract digit from double 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C5                        287     _HEADER DDIGS,3,"D#S"
      0026C5 26 AF                    1         .word LINK 
                           0026C7     2         LINK=.
      0026C7 03                       3         .byte 3  
      0026C8 44 23 53                 4         .ascii "D#S"
      0026CB                          5         DDIGS:
      0026CB CD 26 B2         [ 4]  288     CALL    DDIG 
      0026CE CD 08 27         [ 4]  289     CALL    DDUP 
      0026D1 CD 28 37         [ 4]  290     CALL    DZEQUAL
      0026D4                        291     _QBRAN  DDIGS 
      0026D4 CD 04 98         [ 4]    1     CALL QBRAN
      0026D7 26 CB                    2     .word DDIGS
      0026D9 CD 06 0F         [ 4]  292     CALL    DROP 
      0026DC 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;   D. ( d -- )
                                    298 ;   display double integer 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026DD                        300     _HEADER DDOT,2,"D."
      0026DD 26 C7                    1         .word LINK 
                           0026DF     2         LINK=.
      0026DF 02                       3         .byte 2  
      0026E0 44 2E                    4         .ascii "D."
      0026E2                          5         DDOT:
      0026E2 CD 0F 35         [ 4]  301     CALL SPACE 
      0026E5 CD 26 57         [ 4]  302     CALL DSIGN 
      0026E8 CD 05 E2         [ 4]  303     CALL TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026EB CD 05 45         [ 4]  304     CALL RAT 
      0026EE                        305     _QBRAN DDOT0
      0026EE CD 04 98         [ 4]    1     CALL QBRAN
      0026F1 26 F6                    2     .word DDOT0
      0026F3 CD 08 98         [ 4]  306     CALL DNEGA 
      0026F6                        307 DDOT0:     
      0026F6 CD 0D F9         [ 4]  308     CALL BDIGS 
      0026F9 CD 26 CB         [ 4]  309     CALL DDIGS 
      0026FC CD 05 34         [ 4]  310     CALL RFROM 
      0026FF                        311     _QBRAN DDOT1 
      0026FF CD 04 98         [ 4]    1     CALL QBRAN
      002702 27 0C                    2     .word DDOT1
      002704                        312     _DOLIT '-' 
      002704 CD 04 6F         [ 4]    1     CALL DOLIT 
      002707 00 2D                    2     .word '-' 
      002709 CD 0E 09         [ 4]  313     CALL HOLD 
      00270C                        314 DDOT1: 
      00270C CD 0E 5E         [ 4]  315     CALL EDIGS 
      00270F CD 0F 5F         [ 4]  316     CALL TYPES     
      002712 81               [ 4]  317     RET 
                                    318 
                                    319 
                                    320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    321 ;  UDS* ( ud u -- ud*u )
                                    322 ;  uint32*uint16 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002713                        324     _HEADER UDSSTAR,4,"UDS*"
      002713 26 DF                    1         .word LINK 
                           002715     2         LINK=.
      002715 04                       3         .byte 4  
      002716 55 44 53 2A              4         .ascii "UDS*"
      00271A                          5         UDSSTAR:
      00271A CD 05 E2         [ 4]  325     CALL TOR 
      00271D CD 06 29         [ 4]  326     CALL SWAPP 
      002720 CD 05 45         [ 4]  327     CALL RAT 
      002723 CD 0A C8         [ 4]  328     CALL UMSTA ; udlo*u 
      002726 CD 07 DD         [ 4]  329     CALL ROT 
      002729 CD 05 34         [ 4]  330     CALL RFROM 
      00272C CD 0A C8         [ 4]  331     CALL UMSTA ; udhi*u 
      00272F                        332     _DROP  ; drop overflow 
      00272F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002732 CD 08 3C         [ 4]  333     CALL PLUS  ; udlo*u+(uhi*u<<16)
      002735 81               [ 4]  334     RET 
                                    335 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 ; multiply double by unsigned single 
                                    338 ; return double 
                                    339 ;  ( d u -- d )
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002736                        341     _HEADER DSSTAR,3,"DS*"
      002736 27 15                    1         .word LINK 
                           002738     2         LINK=.
      002738 03                       3         .byte 3  
      002739 44 53 2A                 4         .ascii "DS*"
      00273C                          5         DSSTAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                    342 ;DSSTAR:
      00273C CD 05 E2         [ 4]  343     CALL TOR
      00273F CD 26 57         [ 4]  344     CALL DSIGN 
      002742 CD 07 FC         [ 4]  345     CALL NROT 
      002745 CD 26 46         [ 4]  346     CALL DABS
      002748 CD 05 34         [ 4]  347     CALL RFROM 
      00274B CD 27 1A         [ 4]  348     CALL UDSSTAR  
      00274E CD 07 DD         [ 4]  349     CALL ROT 
      002751                        350     _QBRAN DSSTAR3 
      002751 CD 04 98         [ 4]    1     CALL QBRAN
      002754 27 59                    2     .word DSSTAR3
      002756 CD 08 98         [ 4]  351     CALL DNEGA 
      002759                        352 DSSTAR3:
      002759 81               [ 4]  353     RET 
                                    354 
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    357 ;  swap double 
                                    358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00275A                        359     _HEADER DSWAP,5,"2SWAP"
      00275A 27 38                    1         .word LINK 
                           00275C     2         LINK=.
      00275C 05                       3         .byte 5  
      00275D 32 53 57 41 50           4         .ascii "2SWAP"
      002762                          5         DSWAP:
      002762 90 93            [ 1]  360     LDW Y,X 
      002764 90 FE            [ 2]  361     LDW Y,(Y)
      002766 90 BF 26         [ 2]  362     LDW YTEMP,Y ; d2 hi 
      002769 90 93            [ 1]  363     LDW Y,X 
      00276B 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      00276E 90 BF 24         [ 2]  365     LDW XTEMP,Y  ; d2 lo 
      002771 90 93            [ 1]  366     LDW Y,X 
      002773 90 EE 04         [ 2]  367     LDW Y,(4,Y)  ; d1 hi 
      002776 FF               [ 2]  368     LDW (X),Y 
      002777 90 93            [ 1]  369     LDW Y,X
      002779 90 EE 06         [ 2]  370     LDW Y,(6,Y)  ; d1 lo 
      00277C EF 02            [ 2]  371     LDW (2,X),Y
      00277E 90 BE 26         [ 2]  372     LDW Y,YTEMP  
      002781 EF 04            [ 2]  373     LDW (4,X),Y 
      002783 90 BE 24         [ 2]  374     LDW Y,XTEMP 
      002786 EF 06            [ 2]  375     LDW (6,X),Y 
      002788 81               [ 4]  376     RET 
                                    377 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    379 ;    DCLZ ( d -- u )
                                    380 ;    double count leading zeros
                                    381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002789                        382     _HEADER DCLZ,4,"DCLZ"
      002789 27 5C                    1         .word LINK 
                           00278B     2         LINK=.
      00278B 04                       3         .byte 4  
      00278C 44 43 4C 5A              4         .ascii "DCLZ"
      002790                          5         DCLZ:
      002790 4F               [ 1]  383     CLR A 
      002791 90 93            [ 1]  384     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002793 90 FE            [ 2]  385     LDW Y,(Y)
      002795 2B 18            [ 1]  386     JRMI DCLZ8 ; no leading zero 
      002797 27 09            [ 1]  387     JREQ DCLZ4 ; >=16 
      002799                        388 DCLZ1: ; <16
      002799 90 58            [ 2]  389     SLLW Y
      00279B 4C               [ 1]  390     INC A 
      00279C 90 5D            [ 2]  391     TNZW Y 
      00279E 2B 0F            [ 1]  392     JRMI DCLZ8
      0027A0 20 F7            [ 2]  393     JRA DCLZ1 
      0027A2                        394 DCLZ4: ; >=16 
      0027A2 A6 10            [ 1]  395     LD A,#16 
      0027A4 90 93            [ 1]  396     LDW Y,X 
      0027A6 90 EE 02         [ 2]  397     LDW Y,(2,Y)
      0027A9 2B 04            [ 1]  398     JRMI DCLZ8 
      0027AB 26 EC            [ 1]  399     JRNE DCLZ1 
      0027AD AB 10            [ 1]  400     ADD A,#16
      0027AF                        401 DCLZ8: 
      0027AF 1C 00 02         [ 2]  402     ADDW X,#2 
      0027B2 90 5F            [ 1]  403     CLRW Y 
      0027B4 90 97            [ 1]  404     LD YL,A 
      0027B6 FF               [ 2]  405     LDW (X),Y 
      0027B7 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    410 ;   rotate left doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B8                        412     _HEADER NDROT,5,"<2ROT"
      0027B8 27 8B                    1         .word LINK 
                           0027BA     2         LINK=.
      0027BA 05                       3         .byte 5  
      0027BB 3C 32 52 4F 54           4         .ascii "<2ROT"
      0027C0                          5         NDROT:
                                    413 ; save d3 in temp 
      0027C0 90 93            [ 1]  414     LDW Y,X 
      0027C2 90 FE            [ 2]  415     LDW Y,(Y)
      0027C4 90 BF 26         [ 2]  416     LDW YTEMP,Y  ; d3 hi 
      0027C7 90 93            [ 1]  417     LDW Y,X 
      0027C9 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      0027CC 90 BF 24         [ 2]  419     LDW XTEMP,Y  ; d3 lo 
                                    420 ; put d2 in d1 slot 
      0027CF 90 93            [ 1]  421     LDW Y,X 
      0027D1 90 EE 04         [ 2]  422     LDW Y,(4,Y) 
      0027D4 FF               [ 2]  423     LDW (X),Y   ; d2 hi 
      0027D5 90 93            [ 1]  424     LDW Y,X 
      0027D7 90 EE 06         [ 2]  425     LDW Y,(6,Y)
      0027DA EF 02            [ 2]  426     LDW (2,X),Y ; d2 lo
                                    427 ; put d1 in d2 slot 
      0027DC 90 93            [ 1]  428     LDW Y,X 
      0027DE 90 EE 08         [ 2]  429     LDW Y,(8,Y) 
      0027E1 EF 04            [ 2]  430     LDW (4,X),Y ; d1 hi 
      0027E3 90 93            [ 1]  431     LDW Y,X 
      0027E5 90 EE 0A         [ 2]  432     LDW Y,(10,Y)
      0027E8 EF 06            [ 2]  433     LDW (6,X),Y  ; d1 lo 
                                    434 ; put d3 in d1 slot 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027EA 90 BE 26         [ 2]  435     LDW Y,YTEMP 
      0027ED EF 08            [ 2]  436     LDW (8,X),Y  ; d3 hi 
      0027EF 90 BE 24         [ 2]  437     LDW Y,XTEMP 
      0027F2 EF 0A            [ 2]  438     LDW (10,X),Y  ; d3 lo 
      0027F4 81               [ 4]  439     RET 
                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    443 ;   rotate right doubles 
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F5                        445     _HEADER DROT,4,"2ROT"
      0027F5 27 BA                    1         .word LINK 
                           0027F7     2         LINK=.
      0027F7 04                       3         .byte 4  
      0027F8 32 52 4F 54              4         .ascii "2ROT"
      0027FC                          5         DROT:
                                    446 ; save d3 in temp 
      0027FC 90 93            [ 1]  447     LDW Y,X 
      0027FE 90 FE            [ 2]  448     LDW Y,(Y)
      002800 90 BF 26         [ 2]  449     LDW YTEMP,Y ; d3 hi 
      002803 90 93            [ 1]  450     LDW Y,X 
      002805 90 EE 02         [ 2]  451     LDW Y,(2,Y)
      002808 90 BF 24         [ 2]  452     LDW XTEMP,Y ; d3 lo 
                                    453 ; put d1 in d3 slot 
      00280B 90 93            [ 1]  454     LDW Y,X 
      00280D 90 EE 08         [ 2]  455     LDW Y,(8,Y)
      002810 FF               [ 2]  456     LDW (X),Y  ; d1 hi 
      002811 90 93            [ 1]  457     LDW Y,X 
      002813 90 EE 0A         [ 2]  458     LDW Y,(10,Y) 
      002816 EF 02            [ 2]  459     LDW (2,X),Y ; d1 lo 
                                    460 ; put d2 in d1 slot 
      002818 90 93            [ 1]  461     LDW Y,X 
      00281A 90 EE 04         [ 2]  462     LDW Y,(4,Y) ; d2 hi 
      00281D EF 08            [ 2]  463     LDW (8,X),Y 
      00281F 90 93            [ 1]  464     LDW Y,X 
      002821 90 EE 06         [ 2]  465     LDW Y,(6,Y) ; d2 lo 
      002824 EF 0A            [ 2]  466     LDW (10,X),Y 
                                    467 ; put d3 in d2 slot 
      002826 90 BE 26         [ 2]  468     LDW Y,YTEMP 
      002829 EF 04            [ 2]  469     LDW (4,X),Y 
      00282B 90 BE 24         [ 2]  470     LDW Y,XTEMP 
      00282E EF 06            [ 2]  471     LDW (6,X),Y 
      002830 81               [ 4]  472     RET 
                                    473 
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    475 ;    D0= ( d -- 0|-1 )
                                    476 ;    check if double is 0 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002831                        478     _HEADER DZEQUAL,3,"D0="
      002831 27 F7                    1         .word LINK 
                           002833     2         LINK=.
      002833 03                       3         .byte 3  
      002834 44 30 3D                 4         .ascii "D0="
      002837                          5         DZEQUAL:
      002837 4F               [ 1]  479     CLR A  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002838 90 93            [ 1]  480     LDW Y,X 
      00283A 90 FE            [ 2]  481     LDW Y,(Y)
      00283C 26 09            [ 1]  482     JRNE ZEQ1 
      00283E 90 93            [ 1]  483     LDW Y,X 
      002840 90 EE 02         [ 2]  484     LDW Y,(2,Y)
      002843 26 02            [ 1]  485     JRNE ZEQ1 
      002845 A6 FF            [ 1]  486     LD A,#0xFF
      002847                        487 ZEQ1:
      002847 1C 00 02         [ 2]  488     ADDW X,#CELLL 
      00284A F7               [ 1]  489     LD (X),A
      00284B E7 01            [ 1]  490     LD (1,X),A
      00284D 81               [ 4]  491 	RET     
                                    492 
                                    493 
                                    494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    495 ;   D= ( d1 d2 -- f )
                                    496 ;   d1==d2?
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00284E                        498     _HEADER DEQUAL,2,"D="
      00284E 28 33                    1         .word LINK 
                           002850     2         LINK=.
      002850 02                       3         .byte 2  
      002851 44 3D                    4         .ascii "D="
      002853                          5         DEQUAL:
      002853 A6 00            [ 1]  499     LD A,#0 
      002855 90 93            [ 1]  500     LDW Y,X 
      002857 90 FE            [ 2]  501     LDW Y,(Y)
      002859 E3 04            [ 2]  502     CPW Y,(4,X)
      00285B 26 0B            [ 1]  503     JRNE DEQU4 
      00285D 90 93            [ 1]  504     LDW Y,X 
      00285F 90 EE 02         [ 2]  505     LDW Y,(2,Y)
      002862 E3 06            [ 2]  506     CPW Y,(6,X)
      002864 26 02            [ 1]  507     JRNE DEQU4 
      002866 A6 FF            [ 1]  508     LD A,#0XFF
      002868                        509 DEQU4:
      002868 1C 00 06         [ 2]  510     ADDW X,#6
      00286B F7               [ 1]  511     LD (X),A 
      00286C E7 01            [ 1]  512     LD (1,X),A 
      00286E 81               [ 4]  513     RET 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;   D> ( d1 d2 -- f )
                                    517 ;   d1>d2?
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00286F                        519     _HEADER DGREAT,2,"D>"
      00286F 28 50                    1         .word LINK 
                           002871     2         LINK=.
      002871 02                       3         .byte 2  
      002872 44 3E                    4         .ascii "D>"
      002874                          5         DGREAT:
      002874 CD 27 62         [ 4]  520     CALL DSWAP 
      002877 CC 28 7F         [ 2]  521     JP DLESS 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;   D< ( d1 d2 -- f )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                    525 ;   d1<d2? 
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00287A                        527     _HEADER DLESS,2,"D<"
      00287A 28 71                    1         .word LINK 
                           00287C     2         LINK=.
      00287C 02                       3         .byte 2  
      00287D 44 3C                    4         .ascii "D<"
      00287F                          5         DLESS:
      00287F CD 2B A6         [ 4]  528     CALL DSUB
      002882 CD 0B FF         [ 4]  529     CALL ZERO
      002885 CD 07 FC         [ 4]  530     CALL NROT  
      002888 CD 28 9A         [ 4]  531     CALL DZLESS 
      00288B                        532     _QBRAN DLESS4
      00288B CD 04 98         [ 4]    1     CALL QBRAN
      00288E 28 93                    2     .word DLESS4
      002890 CD 08 75         [ 4]  533     CALL INVER  
      002893                        534 DLESS4:
      002893 81               [ 4]  535     RET
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  D0< ( d -- f )
                                    539 ;  d<0? 
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002894                        541     _HEADER DZLESS,3,"D0<"
      002894 28 7C                    1         .word LINK 
                           002896     2         LINK=.
      002896 03                       3         .byte 3  
      002897 44 30 3C                 4         .ascii "D0<"
      00289A                          5         DZLESS:
      00289A A6 00            [ 1]  542     LD A,#0 
      00289C 90 93            [ 1]  543     LDW Y,X 
      00289E 90 FE            [ 2]  544     LDW Y,(Y)
      0028A0 2A 02            [ 1]  545     JRPL DZLESS1 
      0028A2 A6 FF            [ 1]  546     LD A,#0XFF 
      0028A4                        547 DZLESS1:
      0028A4 1C 00 02         [ 2]  548     ADDW X,#CELLL 
      0028A7 F7               [ 1]  549     LD (X),A 
      0028A8 E7 01            [ 1]  550     LD (1,X),A    
      0028AA 81               [ 4]  551     RET 
                                    552 
                                    553 
                                    554 
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    556 ;   2>R ( d -- R: d )
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028AB                        558     _HEADER DTOR,3,"2>R"
      0028AB 28 96                    1         .word LINK 
                           0028AD     2         LINK=.
      0028AD 03                       3         .byte 3  
      0028AE 32 3E 52                 4         .ascii "2>R"
      0028B1                          5         DTOR:
      0028B1 90 85            [ 2]  559     POPW Y 
      0028B3 90 BF 26         [ 2]  560     LDW YTEMP,Y 
      0028B6 90 93            [ 1]  561     LDW Y,X 
      0028B8 90 EE 02         [ 2]  562     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      0028BB 90 89            [ 2]  563     PUSHW Y   ; d low 
      0028BD 90 93            [ 1]  564     LDW Y,X 
      0028BF 90 FE            [ 2]  565     LDW Y,(Y)
      0028C1 90 89            [ 2]  566     PUSHW Y   ; d hi 
      0028C3 1C 00 04         [ 2]  567     ADDW X,#4  
      0028C6 92 CC 26         [ 5]  568     JP [YTEMP]
                                    569 
                                    570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    571 ;  2R> ( -- d ) R: d --      
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C9                        573     _HEADER DRFROM,3,"2R>"
      0028C9 28 AD                    1         .word LINK 
                           0028CB     2         LINK=.
      0028CB 03                       3         .byte 3  
      0028CC 32 52 3E                 4         .ascii "2R>"
      0028CF                          5         DRFROM:
      0028CF 90 85            [ 2]  574     POPW Y      ; d hi 
      0028D1 90 BF 26         [ 2]  575     LDW YTEMP,Y 
      0028D4 1D 00 04         [ 2]  576     SUBW X,#4
      0028D7 90 85            [ 2]  577     POPW Y       ; d hi 
      0028D9 FF               [ 2]  578     LDW (X),Y 
      0028DA 90 85            [ 2]  579     POPW Y       ; d low  
      0028DC EF 02            [ 2]  580     LDW (2,X),Y 
      0028DE 92 CC 26         [ 5]  581     JP [YTEMP]
                                    582     
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;   2R@ ( -- d )
                                    585 ;   fecth a double from RSTACK
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E1                        587     _HEADER DRAT,3,"2R@"
      0028E1 28 CB                    1         .word LINK 
                           0028E3     2         LINK=.
      0028E3 03                       3         .byte 3  
      0028E4 32 52 40                 4         .ascii "2R@"
      0028E7                          5         DRAT:
      0028E7 90 85            [ 2]  588     POPW Y 
      0028E9 90 BF 26         [ 2]  589     LDW YTEMP,Y 
      0028EC 1D 00 04         [ 2]  590     SUBW X,#4 
      0028EF 16 01            [ 2]  591     LDW Y,(1,SP)
      0028F1 FF               [ 2]  592     LDW (X),Y 
      0028F2 16 03            [ 2]  593     LDW Y,(3,SP)
      0028F4 EF 02            [ 2]  594     LDW (2,X),Y 
      0028F6 92 CC 26         [ 5]  595     JP [YTEMP]
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;  2VARIABLE <name> 
                                    599 ;  create a double variable 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028F9                        601     _HEADER DVARIA,9,"2VARIABLE"
      0028F9 28 E3                    1         .word LINK 
                           0028FB     2         LINK=.
      0028FB 09                       3         .byte 9  
      0028FC 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002905                          5         DVARIA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002905 CD 0C DC         [ 4]  602         CALL HERE
      002908 CD 06 19         [ 4]  603         CALL DUPP
      00290B                        604         _DOLIT 4  
      00290B CD 04 6F         [ 4]    1     CALL DOLIT 
      00290E 00 04                    2     .word 4 
      002910 CD 08 3C         [ 4]  605         CALL PLUS 
      002913 CD 07 70         [ 4]  606         CALL VPP 
      002916 CD 04 D1         [ 4]  607         CALL STORE
      002919 CD 18 AD         [ 4]  608         CALL CREAT
      00291C CD 06 19         [ 4]  609         CALL DUPP
      00291F CD 15 20         [ 4]  610         CALL COMMA
      002922 CD 0B FF         [ 4]  611         CALL ZERO
      002925 CD 06 41         [ 4]  612         CALL OVER 
      002928 CD 04 D1         [ 4]  613         CALL STORE 
      00292B CD 0B FF         [ 4]  614         CALL ZERO 
      00292E CD 06 29         [ 4]  615         CALL SWAPP 
      002931 CD 04 D1         [ 4]  616         CALL STORE
      002934 CD 22 22         [ 4]  617         CALL FMOVE ; move definition to FLASH
      002937 CD 07 CC         [ 4]  618         CALL QDUP 
      00293A CD 04 98         [ 4]  619         CALL QBRAN 
      00293D 18 FA                  620         .word SET_RAMLAST   
      00293F CD 1C CA         [ 4]  621         call UPDATVP  ; don't update if variable kept in RAM.
      002942 CD 22 B6         [ 4]  622         CALL UPDATPTR
      002945 81               [ 4]  623         RET         
                                    624 
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;  2LITERAL ( d -- )
                                    629 ;  compile double literal 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002946                        631     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002946 28 FB                    1         .word LINK 
                           002948     2         LINK=.
      002948 88                       3         .byte IMEDD+8  
      002949 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002951                          5         DLITER:
      002951 CD 15 65         [ 4]  632     CALL COMPI 
      002954 29 5C                  633     .word do2lit 
      002956 CD 15 20         [ 4]  634     CALL COMMA 
      002959 CC 15 20         [ 2]  635     JP   COMMA 
                                    636 
                                    637 
                                    638 ; runtime for 2LITERAL 
      00295C                        639 do2lit:
      00295C 1D 00 04         [ 2]  640     SUBW X,#4 
      00295F 16 01            [ 2]  641     LDW Y,(1,SP)
      002961 90 FE            [ 2]  642     LDW Y,(Y)
      002963 FF               [ 2]  643     LDW (X),Y 
      002964 16 01            [ 2]  644     LDW Y,(1,SP)
      002966 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      002969 EF 02            [ 2]  646     LDW (2,X),Y 
      00296B 90 85            [ 2]  647     POPW Y 
      00296D 90 EC 04         [ 2]  648     JP (4,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                                    649 
                                    650 
                                    651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    652 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002970                        654     _HEADER DOVER,5,"2OVER"
      002970 29 48                    1         .word LINK 
                           002972     2         LINK=.
      002972 05                       3         .byte 5  
      002973 32 4F 56 45 52           4         .ascii "2OVER"
      002978                          5         DOVER:
      002978 90 93            [ 1]  655     LDW Y,X 
      00297A 1D 00 04         [ 2]  656     SUBW X,#4 
      00297D 90 89            [ 2]  657     PUSHW Y 
      00297F 90 EE 04         [ 2]  658     LDW Y,(4,Y)  ; d1 hi 
      002982 FF               [ 2]  659     LDW (X),Y 
      002983 90 85            [ 2]  660     POPW Y 
      002985 90 EE 06         [ 2]  661     LDW Y,(6,Y)  ;d1 lo 
      002988 EF 02            [ 2]  662     LDW (2,X),Y 
      00298A 81               [ 4]  663     RET 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   D2/ ( d -- d/2 )
                                    668 ;   divide double by 2 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00298B                        670     _HEADER D2SLASH,3,"D2/"
      00298B 29 72                    1         .word LINK 
                           00298D     2         LINK=.
      00298D 03                       3         .byte 3  
      00298E 44 32 2F                 4         .ascii "D2/"
      002991                          5         D2SLASH:
      002991 90 93            [ 1]  671     LDW Y,X 
      002993 90 FE            [ 2]  672     LDW Y,(Y)
      002995 90 57            [ 2]  673     SRAW Y 
      002997 FF               [ 2]  674     LDW (X),Y 
      002998 90 93            [ 1]  675     LDW Y,X 
      00299A 90 EE 02         [ 2]  676     LDW Y,(2,Y)
      00299D 90 56            [ 2]  677     RRCW Y 
      00299F EF 02            [ 2]  678     LDW (2,X),Y 
      0029A1 81               [ 4]  679     RET
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ;  D2* ( d -- d*2 )
                                    683 ;  multiply double by 2 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029A2                        685     _HEADER D2STAR,3,"D2*"
      0029A2 29 8D                    1         .word LINK 
                           0029A4     2         LINK=.
      0029A4 03                       3         .byte 3  
      0029A5 44 32 2A                 4         .ascii "D2*"
      0029A8                          5         D2STAR:
      0029A8 90 93            [ 1]  686     LDW Y,X 
      0029AA 90 EE 02         [ 2]  687     LDW Y,(2,Y)
      0029AD 98               [ 1]  688     RCF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      0029AE 90 59            [ 2]  689     RLCW Y 
      0029B0 EF 02            [ 2]  690     LDW (2,X),Y 
      0029B2 90 93            [ 1]  691     LDW Y,X 
      0029B4 90 FE            [ 2]  692     LDW Y,(Y)
      0029B6 90 59            [ 2]  693     RLCW Y 
      0029B8 FF               [ 2]  694     LDW (X),Y 
      0029B9 81               [ 4]  695     RET 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;   DLSHIFT ( d n -- d )
                                    699 ;   left shift double 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029BA                        701     _HEADER DLSHIFT,7,"DLSHIFT"
      0029BA 29 A4                    1         .word LINK 
                           0029BC     2         LINK=.
      0029BC 07                       3         .byte 7  
      0029BD 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0029C4                          5         DLSHIFT:
      0029C4 E6 01            [ 1]  702     LD A,(1,X) ; shift count 
      0029C6 A4 1F            [ 1]  703     AND A,#31
      0029C8 1C 00 02         [ 2]  704     ADDW X,#CELLL 
      0029CB 90 93            [ 1]  705     LDW Y,X 
      0029CD 90 FE            [ 2]  706     LDW Y,(Y)
      0029CF 90 BF 26         [ 2]  707     LDW YTEMP,Y  ; d hi 
      0029D2 90 93            [ 1]  708     LDW Y,X 
      0029D4 90 EE 02         [ 2]  709     LDW Y,(2,Y)  ; d low 
      0029D7                        710 DLSHIFT1:
      0029D7 4D               [ 1]  711     TNZ A 
      0029D8 27 12            [ 1]  712     JREQ DLSHIFT2 
      0029DA 98               [ 1]  713     RCF 
      0029DB 90 59            [ 2]  714     RLCW Y 
      0029DD 90 89            [ 2]  715     PUSHW Y 
      0029DF 90 BE 26         [ 2]  716     LDW Y,YTEMP 
      0029E2 90 59            [ 2]  717     RLCW Y 
      0029E4 90 BF 26         [ 2]  718     LDW YTEMP,Y 
      0029E7 90 85            [ 2]  719     POPW Y 
      0029E9 4A               [ 1]  720     DEC A 
      0029EA 20 EB            [ 2]  721     JRA DLSHIFT1 
      0029EC                        722 DLSHIFT2:
      0029EC EF 02            [ 2]  723     LDW (2,X),Y 
      0029EE 90 BE 26         [ 2]  724     LDW Y,YTEMP 
      0029F1 FF               [ 2]  725     LDW (X),Y 
      0029F2 81               [ 4]  726     RET 
                                    727 
                                    728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    729 ;  DRSHIFT ( d n -- d )
                                    730 ;  shift right n bits 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029F3                        732     _HEADER DRSHIFT,7,"DRSHIFT"
      0029F3 29 BC                    1         .word LINK 
                           0029F5     2         LINK=.
      0029F5 07                       3         .byte 7  
      0029F6 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      0029FD                          5         DRSHIFT:
      0029FD E6 01            [ 1]  733     LD A,(1,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      0029FF A4 1F            [ 1]  734     AND A,#31
      002A01 1C 00 02         [ 2]  735     ADDW X,#2 
      002A04                        736 DRSHIFT1:
      002A04 4D               [ 1]  737     TNZ A 
      002A05 27 13            [ 1]  738     JREQ DRSHIFT2 
      002A07 90 93            [ 1]  739     LDW Y,X 
      002A09 90 FE            [ 2]  740     LDW Y,(Y)
      002A0B 90 54            [ 2]  741     SRLW Y 
      002A0D FF               [ 2]  742     LDW (X),Y 
      002A0E 90 93            [ 1]  743     LDW Y,X 
      002A10 90 EE 02         [ 2]  744     LDW Y,(2,Y)
      002A13 90 56            [ 2]  745     RRCW Y 
      002A15 EF 02            [ 2]  746     LDW (2,X),Y 
      002A17 4A               [ 1]  747     DEC A
      002A18 20 EA            [ 2]  748     JRA DRSHIFT1  
      002A1A                        749 DRSHIFT2:
      002A1A 81               [ 4]  750     RET 
                                    751 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;   D* ( d1 d2 -- d3 )
                                    755 ;   double product 
                                    756 ;   d3 = d1 * d2
                                    757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A1B                        758     _HEADER DSTAR,2,"D*"
      002A1B 29 F5                    1         .word LINK 
                           002A1D     2         LINK=.
      002A1D 02                       3         .byte 2  
      002A1E 44 2A                    4         .ascii "D*"
      002A20                          5         DSTAR:
      002A20 CD 06 19         [ 4]  759     CALL DUPP 
      002A23 CD 06 50         [ 4]  760     CALL ZLESS  
      002A26 CD 05 E2         [ 4]  761     CALL TOR    ; R: d2sign 
      002A29 CD 26 46         [ 4]  762     CALL DABS   
      002A2C CD 05 34         [ 4]  763     CALL RFROM 
      002A2F CD 07 FC         [ 4]  764     CALL NROT  ; d1 d2s ud2
      002A32 CD 28 B1         [ 4]  765     CALL DTOR  ; d1 d2s R: ud2  
      002A35 CD 05 E2         [ 4]  766     CALL TOR   ; d1 R: ud2 d2s   
      002A38 CD 06 19         [ 4]  767     CALL DUPP 
      002A3B CD 06 50         [ 4]  768     CALL ZLESS 
      002A3E CD 05 34         [ 4]  769     CALL RFROM 
      002A41 CD 06 9F         [ 4]  770     CALL XORR   
      002A44 CD 05 E2         [ 4]  771     CALL TOR   ; d1 R: ud2 prod_sign  
      002A47 CD 26 46         [ 4]  772     CALL DABS ; ud1 R: ud2 ps  
      002A4A CD 05 34         [ 4]  773     CALL RFROM  
      002A4D CD 07 FC         [ 4]  774     CALL NROT   ; ps ud1 
      002A50 CD 08 27         [ 4]  775     CALL DDUP   ; ps ud1 ud1  
      002A53 CD 05 34         [ 4]  776     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002A56 CD 27 3C         [ 4]  777     CALL DSSTAR ; ps ud1 dprodhi 
                                    778 ; shift partial product 16 bits left 
      002A59                        779     _DROP   ; drop overflow 
      002A59 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002A5C CD 0B FF         [ 4]  780     CALL ZERO   ; ps ud1 prodhi 
      002A5F CD 06 29         [ 4]  781     CALL SWAPP  
      002A62 CD 27 62         [ 4]  782     CALL DSWAP  ; ps dprodhi ud1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A65 CD 05 34         [ 4]  783     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002A68 CD 27 3C         [ 4]  784     CALL DSSTAR ; ps  dprodhi dprodlo 
      002A6B CD 2B 74         [ 4]  785     CALL DPLUS
      002A6E CD 07 DD         [ 4]  786     CALL ROT    ; dprod ps 
      002A71                        787     _QBRAN DDSTAR3 
      002A71 CD 04 98         [ 4]    1     CALL QBRAN
      002A74 2A 79                    2     .word DDSTAR3
      002A76 CD 08 98         [ 4]  788     CALL DNEGA 
      002A79                        789 DDSTAR3:  
      002A79 81               [ 4]  790     RET 
                                    791 
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    793 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A7A                        795     _HEADER UDSLMOD,6,"UD/MOD"
      002A7A 2A 1D                    1         .word LINK 
                           002A7C     2         LINK=.
      002A7C 06                       3         .byte 6  
      002A7D 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002A83                          5         UDSLMOD:
                                    796 ; unsigned double division 
      002A83 CD 0B FF         [ 4]  797     CALL ZERO 
      002A86 CD 0B FF         [ 4]  798     CALL ZERO
      002A89 CD 28 B1         [ 4]  799     CALL DTOR ; quotient  R: qlo qhi 
      002A8C CD 29 78         [ 4]  800     CALL DOVER 
      002A8F CD 27 90         [ 4]  801     CALL DCLZ ; n2, dividend leading zeros  
      002A92 CD 05 E2         [ 4]  802     CALL TOR 
      002A95 CD 08 27         [ 4]  803     CALL DDUP    
      002A98 CD 27 90         [ 4]  804     CALL DCLZ  ; n1, divisor leading zeros
      002A9B CD 05 34         [ 4]  805     CALL RFROM ; n1 n2 
      002A9E CD 08 D2         [ 4]  806     CALL SUBB  ; loop count 
      002AA1 CD 06 19         [ 4]  807     CALL DUPP
      002AA4 CD 28 B1         [ 4]  808     CALL DTOR  ; ud1 ud2 R: qlo qhi cntr cntr 
      002AA7 CD 05 45         [ 4]  809     CALL RAT    
      002AAA CD 06 50         [ 4]  810     CALL ZLESS 
      002AAD                        811     _TBRAN UDSLA7 ; quotient is null 
      002AAD CD 04 A6         [ 4]    1     CALL TBRAN 
      002AB0 2B 0F                    2     .word UDSLA7 
      002AB2 CD 05 45         [ 4]  812     CALL RAT 
      002AB5 CD 29 C4         [ 4]  813     CALL DLSHIFT ; align divisor with dividend 
      002AB8                        814 UDSLA3: ; division loop -- dividend divisor  
      002AB8 90 5F            [ 1]  815     CLRW Y 
      002ABA 90 89            [ 2]  816     PUSHW Y  
      002ABC CD 29 78         [ 4]  817     CALL DOVER 
      002ABF CD 29 78         [ 4]  818     CALL DOVER 
      002AC2 CD 28 7F         [ 4]  819     CALL DLESS 
      002AC5                        820     _TBRAN UDSLA4 
      002AC5 CD 04 A6         [ 4]    1     CALL TBRAN 
      002AC8 2A DE                    2     .word UDSLA4 
      002ACA 90 85            [ 2]  821     POPW Y 
      002ACC 72 A9 00 01      [ 2]  822     ADDW Y,#1 
      002AD0 90 89            [ 2]  823     PUSHW Y    ; quotiend least bit 
      002AD2 CD 08 27         [ 4]  824     CALL DDUP  ; dividend divisor divisor 
      002AD5 CD 28 B1         [ 4]  825     CALL DTOR  
      002AD8 CD 2B A6         [ 4]  826     CALL DSUB  ; dividend-divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002ADB CD 28 CF         [ 4]  827     CALL DRFROM  ; dividend- divisor  
      002ADE                        828 UDSLA4: ; shift quotient and add 1 bit 
      002ADE 90 85            [ 2]  829     POPW Y 
      002AE0 90 BF 26         [ 2]  830     LDW YTEMP,Y 
      002AE3 16 07            [ 2]  831     LDW Y,(7,SP) ; quotient low 
      002AE5 98               [ 1]  832     RCF 
      002AE6 90 59            [ 2]  833     RLCW Y
      002AE8 17 07            [ 2]  834     LDW (7,SP),Y 
      002AEA 16 05            [ 2]  835     LDW Y,(5,SP) ; quotient hi 
      002AEC 90 59            [ 2]  836     RLCW Y 
      002AEE 17 05            [ 2]  837     LDW (5,SP),Y 
      002AF0 16 07            [ 2]  838     LDW Y,(7,SP) 
      002AF2 72 B9 00 26      [ 2]  839     ADDW Y,YTEMP
      002AF6 17 07            [ 2]  840     LDW (7,SP),Y 
      002AF8 16 01            [ 2]  841     LDW Y,(1,SP) ; loop counter 
      002AFA 90 5D            [ 2]  842     TNZW Y 
      002AFC 27 1C            [ 1]  843     JREQ UDSLA8
      002AFE 72 A2 00 01      [ 2]  844     SUBW Y,#1  
      002B02 17 01            [ 2]  845     LDW (1,SP),Y  
                                    846 ; shift dividend left 1 bit      
      002B04 CD 27 62         [ 4]  847     CALL DSWAP 
      002B07 CD 29 A8         [ 4]  848     CALL D2STAR 
      002B0A CD 27 62         [ 4]  849     CALL DSWAP 
      002B0D 20 A9            [ 2]  850     JRA UDSLA3 
      002B0F                        851 UDSLA7:
      002B0F CD 0B FF         [ 4]  852     CALL ZERO 
      002B12                        853     _DOLIT 1 
      002B12 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B15 00 01                    2     .word 1 
      002B17 CD 05 BE         [ 4]  854     CALL NRSTO ; R: 0 0 0 cntr    
      002B1A                        855 UDSLA8:
      002B1A 1C 00 04         [ 2]  856     ADDW X,#4 ; drop divisor
      002B1D CD 05 34         [ 4]  857     CALL RFROM  
      002B20                        858     _DROP ; drop cntr 
      002B20 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B23 CD 05 34         [ 4]  859     CALL RFROM   ; shift count
      002B26 CD 29 FD         [ 4]  860     CALL DRSHIFT 
                                    861     ; quotient replace dividend 
      002B29 CD 28 CF         [ 4]  862     CALL DRFROM  ; quotient 
      002B2C 81               [ 4]  863     RET 
                                    864 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    866 ;   D/MOD  ( d1 d2 -- dr dq )
                                    867 ;   double division dq=d1/d2
                                    868 ;   dr remainder double 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B2D                        870     _HEADER DDSLMOD,5,"D/MOD"  
      002B2D 2A 7C                    1         .word LINK 
                           002B2F     2         LINK=.
      002B2F 05                       3         .byte 5  
      002B30 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B35                          5         DDSLMOD:
      002B35 CD 26 57         [ 4]  871     CALL DSIGN 
      002B38 CD 05 E2         [ 4]  872     CALL TOR   ; R: divisor sign 
      002B3B CD 26 46         [ 4]  873     CALL DABS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002B3E CD 27 62         [ 4]  874     CALL DSWAP 
      002B41 CD 26 57         [ 4]  875     CALL DSIGN ; dividend sign 
      002B44 CD 05 34         [ 4]  876     CALL RFROM 
      002B47 CD 06 9F         [ 4]  877     CALL XORR  ; quotient sign
      002B4A CD 05 E2         [ 4]  878     CALL TOR   ; 
      002B4D CD 26 46         [ 4]  879     CALL DABS  ; d2 ud1 R: sign 
      002B50 CD 27 62         [ 4]  880     CALL DSWAP  ; ud1 ud2 
      002B53 CD 2A 83         [ 4]  881     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002B56 90 85            [ 2]  882     POPW Y ; sign 
      002B58 90 5D            [ 2]  883     TNZW Y 
      002B5A 2A 03            [ 1]  884     JRPL DSLA9 
      002B5C CD 08 98         [ 4]  885     CALL DNEGA ; remainder quotient 
      002B5F                        886 DSLA9: 
      002B5F 81               [ 4]  887     RET 
                                    888 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    890 ;   D/  ( d1 d2 -- dq )
                                    891 ;   division double by double 
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B60                        893     _HEADER DSLASH,2,"D/"
      002B60 2B 2F                    1         .word LINK 
                           002B62     2         LINK=.
      002B62 02                       3         .byte 2  
      002B63 44 2F                    4         .ascii "D/"
      002B65                          5         DSLASH:
      002B65 CD 2B 35         [ 4]  894     CALL DDSLMOD
      002B68 CD 27 62         [ 4]  895     CALL DSWAP
      002B6B                        896     _DDROP 
      002B6B 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002B6E 81               [ 4]  897     RET 
                                    898 
                                    899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    900 ;   D+ ( d1 d2 -- d3 )
                                    901 ;   add 2 doubles 
                                    902 ;   d3=d1+d2 
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B6F                        904     _HEADER DPLUS,2,"D+"
      002B6F 2B 62                    1         .word LINK 
                           002B71     2         LINK=.
      002B71 02                       3         .byte 2  
      002B72 44 2B                    4         .ascii "D+"
      002B74                          5         DPLUS:
      002B74 90 93            [ 1]  905     LDW Y,X 
      002B76 90 FE            [ 2]  906     LDW Y,(Y)
      002B78 90 BF 26         [ 2]  907     LDW YTEMP,Y ; d2 hi 
      002B7B 90 93            [ 1]  908     LDW Y,X 
      002B7D 90 EE 02         [ 2]  909     LDW Y,(2,Y)
      002B80 90 BF 24         [ 2]  910     LDW XTEMP,Y ; d2 lo 
      002B83 1C 00 04         [ 2]  911     ADDW X,#4 
      002B86 90 93            [ 1]  912     LDW Y,X 
      002B88 90 EE 02         [ 2]  913     LDW Y,(2,Y) ; d1 lo
      002B8B 72 B9 00 24      [ 2]  914     ADDW Y,XTEMP
      002B8F EF 02            [ 2]  915     LDW (2,X),Y 
      002B91 90 93            [ 1]  916     LDW Y,X 
      002B93 90 FE            [ 2]  917     LDW Y,(Y) ; d1 hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B95 24 04            [ 1]  918     JRNC DPLUS1 
      002B97 72 A9 00 01      [ 2]  919     ADDW Y,#1 
      002B9B                        920 DPLUS1: 
      002B9B 72 B9 00 26      [ 2]  921     ADDW Y,YTEMP 
      002B9F FF               [ 2]  922     LDW (X),Y 
      002BA0 81               [ 4]  923     RET 
                                    924 
                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;   D- ( d1 d2 -- d3 )
                                    927 ;   d3=d1-d2 
                                    928 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BA1                        929     _HEADER DSUB,2,"D-"
      002BA1 2B 71                    1         .word LINK 
                           002BA3     2         LINK=.
      002BA3 02                       3         .byte 2  
      002BA4 44 2D                    4         .ascii "D-"
      002BA6                          5         DSUB:
      002BA6 90 93            [ 1]  930     LDW Y,X 
      002BA8 90 FE            [ 2]  931     LDW Y,(Y)
      002BAA 90 BF 26         [ 2]  932     LDW YTEMP,Y ; d2 hi 
      002BAD 90 93            [ 1]  933     LDW Y,X 
      002BAF 90 EE 02         [ 2]  934     LDW Y,(2,Y)
      002BB2 90 BF 24         [ 2]  935     LDW XTEMP,Y ; d2 lo 
      002BB5 1C 00 04         [ 2]  936     ADDW X,#4 
      002BB8 90 93            [ 1]  937     LDW Y,X 
      002BBA 90 EE 02         [ 2]  938     LDW Y,(2,Y) ; d1 lo
      002BBD 72 B2 00 24      [ 2]  939     SUBW Y,XTEMP
      002BC1 EF 02            [ 2]  940     LDW (2,X),Y 
      002BC3 90 93            [ 1]  941     LDW Y,X 
      002BC5 90 FE            [ 2]  942     LDW Y,(Y) ; d1 hi 
      002BC7 24 04            [ 1]  943     JRNC DSUB1 
      002BC9 72 A2 00 01      [ 2]  944     SUBW Y,#1 
      002BCD                        945 DSUB1: 
      002BCD 72 B2 00 26      [ 2]  946     SUBW Y,YTEMP 
      002BD1 FF               [ 2]  947     LDW (X),Y 
      002BD2 81               [ 4]  948     RET 
                                    949 
                                    950 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   4565 .endif 
                           000001  4566 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   4567         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD3                         56     _HEADER FVER,9,"FLOAT-VER"
      002BD3 2B A3                    1         .word LINK 
                           002BD5     2         LINK=.
      002BD5 09                       3         .byte 9  
      002BD6 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002BDF                          5         FVER:
      002BDF CD 0F 77         [ 4]   57     CALL CR 
      002BE2 CD 0F A4         [ 4]   58     CALL DOTQP 
      002BE5 11                      59     .byte  17 
      002BE6 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002BF7 CD 1A F5         [ 4]   61     CALL PRT_LICENCE 
      002BFA CD 1A CD         [ 4]   62     CALL COPYRIGHT 
      002BFD                         63     _DOLIT FLOAT_MAJOR     
      002BFD CD 04 6F         [ 4]    1     CALL DOLIT 
      002C00 00 01                    2     .word FLOAT_MAJOR 
      002C02                         64     _DOLIT FLOAT_MINOR 
      002C02 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C05 00 00                    2     .word FLOAT_MINOR 
      002C07 CC 1B 09         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C0A                         75     _HEADER FPSW,4,"FPSW"
      002C0A 2B D5                    1         .word LINK 
                           002C0C     2         LINK=.
      002C0C 04                       3         .byte 4  
      002C0D 46 50 53 57              4         .ascii "FPSW"
      002C11                          5         FPSW:
      002C11 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C15 1D 00 02         [ 2]   77 	SUBW X,#2
      002C18 FF               [ 2]   78     LDW (X),Y
      002C19 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C1A                         85     _HEADER FRESET,6,"FRESET"
      002C1A 2C 0C                    1         .word LINK 
                           002C1C     2         LINK=.
      002C1C 06                       3         .byte 6  
      002C1D 46 52 45 53 45 54        4         .ascii "FRESET"
      002C23                          5         FRESET:
      002C23 CD 0B FF         [ 4]   86     CALL ZERO  
      002C26 CD 2C 11         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002C29 CD 04 D1         [ 4]   88     CALL STORE 
      002C2C 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C2D                         96     _HEADER FINIT,5,"FINIT"
      002C2D 2C 1C                    1         .word LINK 
                           002C2F     2         LINK=.
      002C2F 05                       3         .byte 5  
      002C30 46 49 4E 49 54           4         .ascii "FINIT"
      002C35                          5         FINIT:
      002C35 CD 2C 23         [ 4]   97     CALL FRESET 
      002C38 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C39                        104     _HEADER FER,3,"FER"
      002C39 2C 2F                    1         .word LINK 
                           002C3B     2         LINK=.
      002C3B 03                       3         .byte 3  
      002C3C 46 45 52                 4         .ascii "FER"
      002C3F                          5         FER:
      002C3F CD 2C 11         [ 4]  105     CALL FPSW 
      002C42 CD 04 E3         [ 4]  106     CALL AT 
      002C45 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C46                        113     _HEADER FZE,3,"FZE"
      002C46 2C 3B                    1         .word LINK 
                           002C48     2         LINK=.
      002C48 03                       3         .byte 3  
      002C49 46 5A 45                 4         .ascii "FZE"
      002C4C                          5         FZE:
      002C4C CD 2C 11         [ 4]  114     CALL FPSW
      002C4F CD 04 E3         [ 4]  115     CALL AT  
      002C52 CD 0C 0A         [ 4]  116     CALL ONE 
      002C55 CD 06 76         [ 4]  117     CALL ANDD
      002C58 CD 08 86         [ 4]  118     CALL NEGAT  
      002C5B 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C5C                        125     _HEADER FNE,3,"FNE"
      002C5C 2C 48                    1         .word LINK 
                           002C5E     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002C5E 03                       3         .byte 3  
      002C5F 46 4E 45                 4         .ascii "FNE"
      002C62                          5         FNE:
      002C62 CD 2C 11         [ 4]  126     CALL FPSW 
      002C65 CD 04 E3         [ 4]  127     CALL AT 
      002C68                        128     _DOLIT 2 
      002C68 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C6B 00 02                    2     .word 2 
      002C6D CD 06 76         [ 4]  129     CALL ANDD
      002C70 CD 0B E5         [ 4]  130     CALL TWOSL
      002C73 CD 08 86         [ 4]  131     CALL NEGAT   
      002C76 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C77                        138     _HEADER FOV,3,"FOV"
      002C77 2C 5E                    1         .word LINK 
                           002C79     2         LINK=.
      002C79 03                       3         .byte 3  
      002C7A 46 4F 56                 4         .ascii "FOV"
      002C7D                          5         FOV:
      002C7D CD 2C 11         [ 4]  139     CALL FPSW
      002C80 CD 04 E3         [ 4]  140     CALL AT  
      002C83                        141     _DOLIT 4 
      002C83 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C86 00 04                    2     .word 4 
      002C88 CD 06 76         [ 4]  142     CALL ANDD
      002C8B                        143     _DOLIT 2 
      002C8B CD 04 6F         [ 4]    1     CALL DOLIT 
      002C8E 00 02                    2     .word 2 
      002C90 CD 0B CD         [ 4]  144     CALL RSHIFT 
      002C93 CD 08 86         [ 4]  145     CALL NEGAT  
      002C96 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C97                        152     _HEADER SFZ,3,"SFZ"
      002C97 2C 79                    1         .word LINK 
                           002C99     2         LINK=.
      002C99 03                       3         .byte 3  
      002C9A 53 46 5A                 4         .ascii "SFZ"
      002C9D                          5         SFZ:
      002C9D CD 2C 3F         [ 4]  153     CALL FER 
      002CA0                        154     _DOLIT 0xfffe 
      002CA0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CA3 FF FE                    2     .word 0xfffe 
      002CA5 CD 06 76         [ 4]  155     CALL ANDD 
      002CA8 CD 05 E2         [ 4]  156     CALL TOR    
      002CAB CD 08 27         [ 4]  157     CALL DDUP 
      002CAE                        158     _DOLIT 0xFF  
      002CAE CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002CB1 00 FF                    2     .word 0xFF 
      002CB3 CD 06 76         [ 4]  159     CALL ANDD
      002CB6 CD 28 37         [ 4]  160     CALL DZEQUAL 
      002CB9                        161     _DOLIT 1 
      002CB9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CBC 00 01                    2     .word 1 
      002CBE CD 06 76         [ 4]  162     CALL ANDD 
      002CC1 CD 05 34         [ 4]  163     CALL RFROM 
      002CC4 CD 06 8A         [ 4]  164     CALL ORR 
      002CC7 CD 2C 11         [ 4]  165     CALL FPSW 
      002CCA CD 04 D1         [ 4]  166     CALL STORE 
      002CCD 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CCE                        174     _HEADER SFN,3,"SFN"
      002CCE 2C 99                    1         .word LINK 
                           002CD0     2         LINK=.
      002CD0 03                       3         .byte 3  
      002CD1 53 46 4E                 4         .ascii "SFN"
      002CD4                          5         SFN:
      002CD4 CD 2C 3F         [ 4]  175     CALL FER 
      002CD7                        176     _DOLIT 0xFFFD 
      002CD7 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CDA FF FD                    2     .word 0xFFFD 
      002CDC CD 06 76         [ 4]  177     CALL ANDD  
      002CDF CD 05 E2         [ 4]  178     CALL TOR 
      002CE2 CD 06 19         [ 4]  179     CALL DUPP 
      002CE5                        180     _DOLIT 0X80 
      002CE5 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CE8 00 80                    2     .word 0X80 
      002CEA CD 06 76         [ 4]  181     CALL ANDD 
      002CED                        182     _DOLIT 6 
      002CED CD 04 6F         [ 4]    1     CALL DOLIT 
      002CF0 00 06                    2     .word 6 
      002CF2 CD 0B CD         [ 4]  183     CALL RSHIFT 
      002CF5 CD 05 34         [ 4]  184     CALL RFROM 
      002CF8 CD 06 8A         [ 4]  185     CALL ORR 
      002CFB CD 2C 11         [ 4]  186     CALL FPSW 
      002CFE CD 04 D1         [ 4]  187     CALL STORE 
      002D01 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D02                        195     _HEADER SFV,3,"SFV"
      002D02 2C D0                    1         .word LINK 
                           002D04     2         LINK=.
      002D04 03                       3         .byte 3  
      002D05 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002D08                          5         SFV:
      002D08 CD 2C 3F         [ 4]  196     CALL FER 
      002D0B                        197     _DOLIT 4 
      002D0B CD 04 6F         [ 4]    1     CALL DOLIT 
      002D0E 00 04                    2     .word 4 
      002D10 CD 06 8A         [ 4]  198     CALL ORR 
      002D13 CD 2C 11         [ 4]  199     CALL FPSW 
      002D16 CD 04 D1         [ 4]  200     CALL STORE 
      002D19 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D1A                        209     _HEADER ATEXP,4,"F>ME"             
      002D1A 2D 04                    1         .word LINK 
                           002D1C     2         LINK=.
      002D1C 04                       3         .byte 4  
      002D1D 46 3E 4D 45              4         .ascii "F>ME"
      002D21                          5         ATEXP:
      002D21 CD 2C 23         [ 4]  210     CALL FRESET
      002D24 CD 2C D4         [ 4]  211     CALL SFN
      002D27 CD 2C 9D         [ 4]  212     CALL SFZ 
      002D2A 90 93            [ 1]  213     LDW Y,X 
      002D2C 90 FE            [ 2]  214     LDW Y,(Y)
      002D2E 90 89            [ 2]  215     PUSHW Y 
      002D30 4F               [ 1]  216     CLR A  
      002D31 90 5E            [ 1]  217     SWAPW Y 
      002D33 2A 01            [ 1]  218     JRPL ATEXP1 
      002D35 43               [ 1]  219     CPL A 
      002D36                        220 ATEXP1: ; sign extend mantissa 
      002D36 90 5E            [ 1]  221     SWAPW Y 
      002D38 90 95            [ 1]  222     LD YH,A 
      002D3A FF               [ 2]  223     LDW (X),Y 
      002D3B 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002D3E 90 85            [ 2]  225     POPW Y 
      002D40 4F               [ 1]  226     CLR A 
      002D41 90 5D            [ 2]  227     TNZW Y 
      002D43 2A 01            [ 1]  228     JRPL ATEXP2 
      002D45 43               [ 1]  229     CPL A 
      002D46                        230 ATEXP2:
      002D46 90 5E            [ 1]  231     SWAPW Y 
      002D48 90 95            [ 1]  232     LD YH,A 
      002D4A FF               [ 2]  233     LDW (X),Y 
      002D4B 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D4C                        241     _HEADER STEXP,4,"ME>F"
      002D4C 2D 1C                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                           002D4E     2         LINK=.
      002D4E 04                       3         .byte 4  
      002D4F 4D 45 3E 46              4         .ascii "ME>F"
      002D53                          5         STEXP:
      002D53 CD 06 19         [ 4]  242     CALL DUPP 
      002D56 CD 08 EC         [ 4]  243     CALL ABSS 
      002D59                        244     _DOLIT 127 
      002D59 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D5C 00 7F                    2     .word 127 
      002D5E CD 09 53         [ 4]  245     CALL GREAT
      002D61                        246     _QBRAN STEXP1
      002D61 CD 04 98         [ 4]    1     CALL QBRAN
      002D64 2D 69                    2     .word STEXP1
      002D66 CD 2D 08         [ 4]  247     CALL SFV
      002D69                        248 STEXP1:
      002D69 90 93            [ 1]  249     LDW Y,X 
      002D6B 90 FE            [ 2]  250     LDW Y,(Y)
      002D6D 4F               [ 1]  251     CLR A 
      002D6E 90 95            [ 1]  252     LD YH,A
      002D70 90 5E            [ 1]  253     SWAPW Y 
      002D72 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002D74 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002D77 CD 08 27         [ 4]  256     CALL DDUP 
      002D7A CD 26 46         [ 4]  257     CALL DABS
      002D7D CD 06 29         [ 4]  258     CALL SWAPP 
      002D80                        259     _DROP  
      002D80 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002D83                        260     _DOLIT 127 
      002D83 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D86 00 7F                    2     .word 127 
      002D88 CD 09 53         [ 4]  261     CALL GREAT 
      002D8B                        262     _QBRAN STEXP2 
      002D8B CD 04 98         [ 4]    1     CALL QBRAN
      002D8E 2D 93                    2     .word STEXP2
      002D90 CD 2D 08         [ 4]  263     CALL SFV 
      002D93                        264 STEXP2: 
      002D93 4F               [ 1]  265     CLR A 
      002D94 F7               [ 1]  266     LD (X),A     
      002D95 CD 05 34         [ 4]  267     CALL RFROM 
      002D98 CD 06 8A         [ 4]  268     CALL ORR
      002D9B CD 2C 9D         [ 4]  269     CALL SFZ 
      002D9E CD 2C D4         [ 4]  270     CALL SFN 
      002DA1 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DA2                        279     _HEADER EDOT,2,"E."
      002DA2 2D 4E                    1         .word LINK 
                           002DA4     2         LINK=.
      002DA4 02                       3         .byte 2  
      002DA5 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002DA7                          5         EDOT:
      002DA7 CD 06 DF         [ 4]  280     CALL BASE 
      002DAA CD 04 E3         [ 4]  281     CALL AT 
      002DAD CD 05 E2         [ 4]  282     CALL TOR 
      002DB0                        283     _DOLIT 10 
      002DB0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DB3 00 0A                    2     .word 10 
      002DB5 CD 06 DF         [ 4]  284     CALL BASE 
      002DB8 CD 04 D1         [ 4]  285     CALL STORE 
      002DBB CD 2D 21         [ 4]  286     CALL ATEXP ; m e 
      002DBE                        287 EDOT0:
      002DBE CD 05 E2         [ 4]  288     CALL TOR   
      002DC1 CD 26 46         [ 4]  289     CALL DABS 
      002DC4 CD 0F 35         [ 4]  290     CALL SPACE 
      002DC7 CD 0D F9         [ 4]  291     CALL BDIGS     
      002DCA                        292 EDOT2: 
      002DCA CD 26 B2         [ 4]  293     CALL DDIG
      002DCD CD 05 34         [ 4]  294     CALL RFROM 
      002DD0 CD 0B 93         [ 4]  295     CALL ONEP 
      002DD3 CD 05 E2         [ 4]  296     CALL TOR 
      002DD6 CD 06 19         [ 4]  297     CALL DUPP
      002DD9                        298     _QBRAN EDOT3 
      002DD9 CD 04 98         [ 4]    1     CALL QBRAN
      002DDC 2D E3                    2     .word EDOT3
      002DDE                        299     _BRAN EDOT2  
      002DDE CD 04 B4         [ 4]    1     CALL BRAN 
      002DE1 2D CA                    2     .word EDOT2 
      002DE3                        300 EDOT3:
      002DE3 CD 06 41         [ 4]  301     CALL OVER 
      002DE6 CD 06 DF         [ 4]  302     CALL BASE 
      002DE9 CD 04 E3         [ 4]  303     CALL AT 
      002DEC CD 09 10         [ 4]  304     CALL ULESS 
      002DEF                        305     _QBRAN EDOT2 
      002DEF CD 04 98         [ 4]    1     CALL QBRAN
      002DF2 2D CA                    2     .word EDOT2
      002DF4                        306     _DOLIT '.'
      002DF4 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DF7 00 2E                    2     .word '.' 
      002DF9 CD 0E 09         [ 4]  307     CALL HOLD  
      002DFC CD 26 B2         [ 4]  308     CALL DDIG
      002DFF CD 2C 62         [ 4]  309     CALL FNE 
      002E02                        310     _QBRAN EDOT4 
      002E02 CD 04 98         [ 4]    1     CALL QBRAN
      002E05 2E 0F                    2     .word EDOT4
      002E07                        311     _DOLIT '-'
      002E07 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E0A 00 2D                    2     .word '-' 
      002E0C CD 0E 09         [ 4]  312     CALL HOLD 
      002E0F                        313 EDOT4:       
      002E0F                        314     _DROP 
      002E0F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E12 CD 0E 5E         [ 4]  315     CALL EDIGS 
      002E15 CD 0F 5F         [ 4]  316     CALL TYPES
      002E18 CD 05 34         [ 4]  317     CALL RFROM 
      002E1B CD 07 CC         [ 4]  318     CALL QDUP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002E1E                        319     _QBRAN EDOT5     
      002E1E CD 04 98         [ 4]    1     CALL QBRAN
      002E21 2E 2E                    2     .word EDOT5
      002E23                        320     _DOLIT 'E'
      002E23 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E26 00 45                    2     .word 'E' 
      002E28 CD 04 36         [ 4]  321     CALL EMIT 
      002E2B CD 10 1E         [ 4]  322     CALL DOT
      002E2E                        323 EDOT5: 
      002E2E CD 05 34         [ 4]  324     CALL RFROM 
      002E31 CD 06 DF         [ 4]  325     CALL BASE 
      002E34 CD 04 D1         [ 4]  326     CALL STORE  
      002E37 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E38                        334     _HEADER FDOT,2,"F."
      002E38 2D A4                    1         .word LINK 
                           002E3A     2         LINK=.
      002E3A 02                       3         .byte 2  
      002E3B 46 2E                    4         .ascii "F."
      002E3D                          5         FDOT:
      002E3D CD 06 DF         [ 4]  335     CALL BASE 
      002E40 CD 04 E3         [ 4]  336     CALL AT 
      002E43 CD 05 E2         [ 4]  337     CALL TOR 
      002E46                        338     _DOLIT 10 
      002E46 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E49 00 0A                    2     .word 10 
      002E4B CD 06 DF         [ 4]  339     CALL BASE 
      002E4E CD 04 D1         [ 4]  340     CALL STORE 
      002E51 CD 2D 21         [ 4]  341     CALL    ATEXP
      002E54 CD 06 19         [ 4]  342     CALL    DUPP  
      002E57 CD 08 EC         [ 4]  343     CALL    ABSS 
      002E5A                        344     _DOLIT  8
      002E5A CD 04 6F         [ 4]    1     CALL DOLIT 
      002E5D 00 08                    2     .word 8 
      002E5F CD 09 53         [ 4]  345     CALL    GREAT 
      002E62                        346     _QBRAN  FDOT1 
      002E62 CD 04 98         [ 4]    1     CALL QBRAN
      002E65 2E 6A                    2     .word FDOT1
      002E67 CC 2D BE         [ 2]  347     JP      EDOT0 
      002E6A                        348 FDOT1:
      002E6A CD 0F 35         [ 4]  349     CALL    SPACE 
      002E6D CD 05 E2         [ 4]  350     CALL    TOR 
      002E70 CD 2C 62         [ 4]  351     CALL    FNE 
      002E73                        352     _QBRAN  FDOT0 
      002E73 CD 04 98         [ 4]    1     CALL QBRAN
      002E76 2E 7B                    2     .word FDOT0
      002E78 CD 08 98         [ 4]  353     CALL    DNEGA 
      002E7B                        354 FDOT0: 
      002E7B CD 0D F9         [ 4]  355     CALL    BDIGS
      002E7E CD 05 45         [ 4]  356     CALL    RAT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002E81 CD 06 50         [ 4]  357     CALL    ZLESS 
      002E84                        358     _QBRAN  FDOT6 
      002E84 CD 04 98         [ 4]    1     CALL QBRAN
      002E87 2E B2                    2     .word FDOT6
      002E89                        359 FDOT2: ; e<0 
      002E89 CD 26 B2         [ 4]  360     CALL    DDIG 
      002E8C CD 05 34         [ 4]  361     CALL    RFROM
      002E8F CD 0B 93         [ 4]  362     CALL    ONEP 
      002E92 CD 07 CC         [ 4]  363     CALL    QDUP 
      002E95                        364     _QBRAN  FDOT3 
      002E95 CD 04 98         [ 4]    1     CALL QBRAN
      002E98 2E A2                    2     .word FDOT3
      002E9A CD 05 E2         [ 4]  365     CALL    TOR 
      002E9D                        366     _BRAN   FDOT2 
      002E9D CD 04 B4         [ 4]    1     CALL BRAN 
      002EA0 2E 89                    2     .word FDOT2 
      002EA2                        367 FDOT3:
      002EA2                        368     _DOLIT  '.' 
      002EA2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EA5 00 2E                    2     .word '.' 
      002EA7 CD 0E 09         [ 4]  369     CALL    HOLD 
      002EAA CD 26 CB         [ 4]  370     CALL    DDIGS
      002EAD                        371     _BRAN   FDOT9  
      002EAD CD 04 B4         [ 4]    1     CALL BRAN 
      002EB0 2E C7                    2     .word FDOT9 
      002EB2                        372 FDOT6: ; e>=0 
      002EB2                        373     _BRAN   FDOT8
      002EB2 CD 04 B4         [ 4]    1     CALL BRAN 
      002EB5 2E BF                    2     .word FDOT8 
      002EB7                        374 FDOT7:     
      002EB7                        375     _DOLIT  '0'
      002EB7 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EBA 00 30                    2     .word '0' 
      002EBC CD 0E 09         [ 4]  376     CALL    HOLD 
      002EBF                        377 FDOT8:
      002EBF CD 04 83         [ 4]  378     CALL    DONXT 
      002EC2 2E B7                  379     .word   FDOT7
      002EC4 CD 26 CB         [ 4]  380     CALL    DDIGS 
      002EC7                        381 FDOT9:
      002EC7 CD 2C 62         [ 4]  382     CALL    FNE 
      002ECA                        383     _QBRAN  FDOT10 
      002ECA CD 04 98         [ 4]    1     CALL QBRAN
      002ECD 2E D7                    2     .word FDOT10
      002ECF                        384     _DOLIT '-' 
      002ECF CD 04 6F         [ 4]    1     CALL DOLIT 
      002ED2 00 2D                    2     .word '-' 
      002ED4 CD 0E 09         [ 4]  385     CALL   HOLD 
      002ED7                        386 FDOT10:
      002ED7 CD 0E 5E         [ 4]  387     CALL    EDIGS 
      002EDA CD 0F 5F         [ 4]  388     CALL    TYPES 
      002EDD CD 05 34         [ 4]  389     CALL    RFROM 
      002EE0 CD 06 DF         [ 4]  390     CALL    BASE 
      002EE3 CD 04 D1         [ 4]  391     CALL    STORE 
      002EE6 81               [ 4]  392     RET 
                                    393 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002EE7                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002EE7 CD 05 E2         [ 4]  400     CALL TOR   ; R: cntr 
      002EEA CD 06 19         [ 4]  401     CALL DUPP 
      002EED CD 05 01         [ 4]  402     CALL CAT 
      002EF0                        403     _DOLIT 'E' 
      002EF0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EF3 00 45                    2     .word 'E' 
      002EF5 CD 08 FA         [ 4]  404     CALL EQUAL 
      002EF8                        405     _QBRAN 1$
      002EF8 CD 04 98         [ 4]    1     CALL QBRAN
      002EFB 2F 28                    2     .word 1$
      002EFD CD 0B 93         [ 4]  406     CALL ONEP 
      002F00 CD 05 34         [ 4]  407     CALL RFROM  ; a cntr 
      002F03 CD 0B A0         [ 4]  408     CALL ONEM
      002F06 CD 06 19         [ 4]  409     CALL DUPP 
      002F09                        410     _QBRAN 2$ ; a cntr 
      002F09 CD 04 98         [ 4]    1     CALL QBRAN
      002F0C 2F 2B                    2     .word 2$
      002F0E CD 0B FF         [ 4]  411     CALL ZERO
      002F11 CD 06 19         [ 4]  412     CALL DUPP 
      002F14 CD 27 62         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F17 CD 24 FE         [ 4]  414     CALL nsign 
      002F1A CD 05 E2         [ 4]  415     CALL TOR   ; R: esign  
      002F1D CD 25 2B         [ 4]  416     CALL parse_digits
      002F20                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F20 CD 04 98         [ 4]    1     CALL QBRAN
      002F23 2F 32                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F25                        419     _DDROP ; 0 a 
      002F25 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F28                        420 1$: 
      002F28 CD 05 34         [ 4]  421     CALL RFROM ; sign||cntr  
      002F2B                        422 2$:
      002F2B                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F2B 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F2E CD 0B FF         [ 4]  424     CALL ZERO   ; return only 0 
      002F31 81               [ 4]  425     RET 
      002F32                        426 PARSEXP_SUCCESS: 
      002F32                        427     _DDROP ; drop dhi a 
      002F32 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F35 CD 05 34         [ 4]  428     CALL RFROM ; es 
      002F38                        429     _QBRAN 1$
      002F38 CD 04 98         [ 4]    1     CALL QBRAN
      002F3B 2F 40                    2     .word 1$
      002F3D CD 08 86         [ 4]  430     CALL NEGAT
      002F40                        431 1$:
      002F40                        432     _DOLIT -1 ; -- e -1 
      002F40 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F43 FF FF                    2     .word -1 
      002F45 81               [ 4]  433     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F46                        441     _HEADER FLOATQ,5,"FLOAT?"
      002F46 2E 3A                    1         .word LINK 
                           002F48     2         LINK=.
      002F48 05                       3         .byte 5  
      002F49 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F4F                          5         FLOATQ:
      002F4F                        442     _QBRAN FLOATQ0 
      002F4F CD 04 98         [ 4]    1     CALL QBRAN
      002F52 2F 59                    2     .word FLOATQ0
      002F54                        443     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002F54 CD 04 B4         [ 4]    1     CALL BRAN 
      002F57 2F FE                    2     .word FLOAT_ERROR 
      002F59                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002F59 CD 06 DF         [ 4]  446     CALL BASE 
      002F5C CD 04 E3         [ 4]  447     CALL AT 
      002F5F                        448     _DOLIT 10 
      002F5F CD 04 6F         [ 4]    1     CALL DOLIT 
      002F62 00 0A                    2     .word 10 
      002F64 CD 08 FA         [ 4]  449     CALL EQUAL 
      002F67                        450     _QBRAN FLOAT_ERROR 
      002F67 CD 04 98         [ 4]    1     CALL QBRAN
      002F6A 2F FE                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002F6C CD 05 E2         [ 4]  452     CALL TOR ; R: sign  
      002F6F CD 05 E2         [ 4]  453     CALL TOR ; R: sign cntr 
      002F72 CD 06 19         [ 4]  454     CALL DUPP
      002F75 CD 05 01         [ 4]  455     CALL CAT 
      002F78                        456     _DOLIT '.' 
      002F78 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F7B 00 2E                    2     .word '.' 
      002F7D CD 08 FA         [ 4]  457     CALL EQUAL 
      002F80                        458     _QBRAN FLOATQ1 ; not a dot 
      002F80 CD 04 98         [ 4]    1     CALL QBRAN
      002F83 2F BE                    2     .word FLOATQ1
      002F85 CD 0B 93         [ 4]  459     CALL ONEP 
      002F88 CD 05 34         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002F8B CD 0B A0         [ 4]  461     CALL ONEM 
      002F8E CD 06 19         [ 4]  462     CALL DUPP 
      002F91 CD 05 E2         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002F94 CD 25 2B         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002F97 CD 06 19         [ 4]  466     CALL DUPP 
      002F9A CD 05 34         [ 4]  467     CALL RFROM 
      002F9D CD 06 29         [ 4]  468     CALL SWAPP 
      002FA0 CD 08 D2         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002FA3 CD 05 E2         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002FA6 CD 06 19         [ 4]  471     CALL DUPP ; cntr cntr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002FA9                        472     _QBRAN 1$ ; end of string, no exponent
      002FA9 CD 04 98         [ 4]    1     CALL QBRAN
      002FAC 2F B3                    2     .word 1$
      002FAE                        473     _BRAN FLOATQ2
      002FAE CD 04 B4         [ 4]    1     CALL BRAN 
      002FB1 2F C7                    2     .word FLOATQ2 
      002FB3 CD 06 29         [ 4]  474 1$: CALL SWAPP 
      002FB6                        475     _DROP ; a
      002FB6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002FB9                        476     _BRAN FLOATQ3        
      002FB9 CD 04 B4         [ 4]    1     CALL BRAN 
      002FBC 2F CF                    2     .word FLOATQ3 
      002FBE                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      002FBE CD 05 34         [ 4]  478     CALL RFROM ; cntr 
      002FC1 CD 0B FF         [ 4]  479     CALL ZERO  ; fd 
      002FC4 CD 05 E2         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      002FC7                        481 FLOATQ2: 
      002FC7 CD 2E E7         [ 4]  482     CALL parse_exponent 
      002FCA                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002FCA CD 04 98         [ 4]    1     CALL QBRAN
      002FCD 2F FB                    2     .word FLOAT_ERROR0
      002FCF                        484 FLOATQ3: ; dm 0 || dm e  
      002FCF CD 05 34         [ 4]  485     CALL RFROM ;  fd  
      002FD2 CD 08 D2         [ 4]  486     CALL SUBB  ; exp=e-fd 
      002FD5 CD 07 FC         [ 4]  487     CALL NROT 
      002FD8 CD 05 34         [ 4]  488     CALL RFROM  ; sign 
      002FDB                        489     _QBRAN FLOATQ4 
      002FDB CD 04 98         [ 4]    1     CALL QBRAN
      002FDE 2F E3                    2     .word FLOATQ4
      002FE0 CD 08 98         [ 4]  490     CALL DNEGA 
      002FE3                        491 FLOATQ4:
      002FE3 CD 07 DD         [ 4]  492     CALL ROT 
      002FE6 CD 2D 53         [ 4]  493     CALL STEXP 
      002FE9 CD 07 DD         [ 4]  494     CALL ROT 
      002FEC                        495     _DROP 
      002FEC 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002FEF CD 2C D4         [ 4]  496     CALL SFN 
      002FF2 CD 2C 9D         [ 4]  497     CALL SFZ 
      002FF5                        498     _DOLIT -3 
      002FF5 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FF8 FF FD                    2     .word -3 
      002FFA 81               [ 4]  499     RET       
      002FFB                        500 FLOAT_ERROR0: 
      002FFB CD 28 CF         [ 4]  501     CALL DRFROM ; sign df      
      002FFE                        502 FLOAT_ERROR: 
      002FFE CD 0C 41         [ 4]  503     CALL DEPTH 
      003001 CD 0B 86         [ 4]  504     CALL CELLS 
      003004 CD 05 F9         [ 4]  505     CALL SPAT 
      003007 CD 06 29         [ 4]  506     CALL SWAPP 
      00300A CD 08 3C         [ 4]  507     CALL PLUS  
      00300D CD 06 06         [ 4]  508     CALL SPSTO 
      003010 CD 0B FF         [ 4]  509     CALL ZERO 
      003013 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003014                        516     _HEADER LSCALE,6,"LSCALE"
      003014 2F 48                    1         .word LINK 
                           003016     2         LINK=.
      003016 06                       3         .byte 6  
      003017 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      00301D                          5         LSCALE:
      00301D CD 2D 21         [ 4]  517     CALL ATEXP 
      003020 CD 0C 0A         [ 4]  518     CALL ONE 
      003023 CD 08 D2         [ 4]  519     CALL SUBB 
      003026 CD 05 E2         [ 4]  520     CALL TOR
      003029                        521     _DOLIT 10 
      003029 CD 04 6F         [ 4]    1     CALL DOLIT 
      00302C 00 0A                    2     .word 10 
      00302E CD 27 3C         [ 4]  522     CALL DSSTAR
      003031 CD 05 34         [ 4]  523     CALL RFROM 
      003034 CD 2D 53         [ 4]  524     CALL STEXP 
      003037 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003038                        531     _HEADER RSCALE,6,"RSCALE"
      003038 30 16                    1         .word LINK 
                           00303A     2         LINK=.
      00303A 06                       3         .byte 6  
      00303B 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003041                          5         RSCALE:
      003041 CD 2D 21         [ 4]  532     CALL ATEXP 
      003044 CD 0C 0A         [ 4]  533     CALL ONE 
      003047 CD 08 3C         [ 4]  534     CALL PLUS 
      00304A CD 05 E2         [ 4]  535     CALL TOR 
      00304D                        536     _DOLIT 10 
      00304D CD 04 6F         [ 4]    1     CALL DOLIT 
      003050 00 0A                    2     .word 10 
      003052 CD 26 71         [ 4]  537     CALL DSLMOD 
      003055 CD 07 DD         [ 4]  538     CALL ROT 
      003058                        539     _DROP 
      003058 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00305B CD 05 34         [ 4]  540     CALL RFROM 
      00305E CD 2D 53         [ 4]  541     CALL STEXP 
      003061 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003062                        551 SCALEUP:
      003062 CD 08 27         [ 4]  552     CALL DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      003065 CD 09 26         [ 4]  553     CALL LESS  
      003068                        554     _QBRAN SCALEUP3
      003068 CD 04 98         [ 4]    1     CALL QBRAN
      00306B 30 98                    2     .word SCALEUP3
      00306D CD 28 B1         [ 4]  555     CALL DTOR   ; R: u1 u2  
      003070 CD 08 27         [ 4]  556     CALL DDUP 
      003073                        557     _DOLIT 0XCCCC 
      003073 CD 04 6F         [ 4]    1     CALL DOLIT 
      003076 CC CC                    2     .word 0XCCCC 
      003078                        558     _DOLIT 0XCCC 
      003078 CD 04 6F         [ 4]    1     CALL DOLIT 
      00307B 0C CC                    2     .word 0XCCC 
      00307D CD 28 74         [ 4]  559     CALL DGREAT  
      003080                        560     _TBRAN SCALEUP2 
      003080 CD 04 A6         [ 4]    1     CALL TBRAN 
      003083 30 95                    2     .word SCALEUP2 
      003085                        561     _DOLIT 10 
      003085 CD 04 6F         [ 4]    1     CALL DOLIT 
      003088 00 0A                    2     .word 10 
      00308A CD 27 1A         [ 4]  562     CALL UDSSTAR 
      00308D CD 28 CF         [ 4]  563     CALL DRFROM 
      003090 CD 0B A0         [ 4]  564     CALL ONEM
      003093 20 CD            [ 2]  565     JRA SCALEUP
      003095                        566 SCALEUP2:
      003095 CD 28 CF         [ 4]  567     CALL DRFROM
      003098                        568 SCALEUP3: 
      003098 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003099                        578 SCALEDOWN: 
      003099 CD 08 27         [ 4]  579     CALL DDUP 
      00309C CD 09 53         [ 4]  580     CALL GREAT 
      00309F                        581     _QBRAN SCALDN3 
      00309F CD 04 98         [ 4]    1     CALL QBRAN
      0030A2 30 C8                    2     .word SCALDN3
      0030A4 CD 28 B1         [ 4]  582     CALL DTOR 
      0030A7 CD 08 27         [ 4]  583     CALL DDUP 
      0030AA CD 28 37         [ 4]  584     CALL DZEQUAL 
      0030AD                        585     _TBRAN SCALDN2  
      0030AD CD 04 A6         [ 4]    1     CALL TBRAN 
      0030B0 30 C5                    2     .word SCALDN2 
      0030B2                        586     _DOLIT 10
      0030B2 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030B5 00 0A                    2     .word 10 
      0030B7 CD 0B FF         [ 4]  587     CALL ZERO  
      0030BA CD 2B 65         [ 4]  588     CALL DSLASH 
      0030BD CD 28 CF         [ 4]  589     CALL DRFROM 
      0030C0 CD 0B 93         [ 4]  590     CALL ONEP  
      0030C3 20 D4            [ 2]  591     JRA SCALEDOWN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0030C5                        592 SCALDN2:
      0030C5 CD 28 CF         [ 4]  593     CALL DRFROM 
      0030C8                        594 SCALDN3:
      0030C8 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030C9                        602     _HEADER FALIGN,7,"F-ALIGN"
      0030C9 30 3A                    1         .word LINK 
                           0030CB     2         LINK=.
      0030CB 07                       3         .byte 7  
      0030CC 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      0030D3                          5         FALIGN:
      0030D3 CD 2D 21         [ 4]  603     CALL ATEXP 
      0030D6 CD 05 E2         [ 4]  604     CALL TOR 
      0030D9 CD 27 62         [ 4]  605     CALL DSWAP 
      0030DC CD 2D 21         [ 4]  606     CALL ATEXP 
      0030DF CD 05 E2         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      0030E2 CD 27 62         [ 4]  608     CALL DSWAP 
      0030E5 CD 28 E7         [ 4]  609     CALL DRAT 
      0030E8 CD 08 FA         [ 4]  610     CALL EQUAL 
      0030EB                        611     _TBRAN FALGN8
      0030EB CD 04 A6         [ 4]    1     CALL TBRAN 
      0030EE 31 70                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      0030F0 CD 28 E7         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      0030F3 CD 09 53         [ 4]  616     CALL GREAT 
      0030F6                        617     _QBRAN FALGN4 ; e2<e1 
      0030F6 CD 04 98         [ 4]    1     CALL QBRAN
      0030F9 31 0C                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      0030FB CD 28 CF         [ 4]  619     CALL DRFROM 
      0030FE CD 06 29         [ 4]  620     CALL SWAPP 
      003101 CD 30 62         [ 4]  621     CALL SCALEUP 
      003104 CD 06 29         [ 4]  622     CALL SWAPP 
      003107 CD 28 B1         [ 4]  623     CALL DTOR 
      00310A 20 0F            [ 2]  624     JRA FALGN6
      00310C                        625 FALGN4: ; e2<e1 then scaleup m1 
      00310C CD 27 62         [ 4]  626     CALL DSWAP 
      00310F CD 28 CF         [ 4]  627     CALL DRFROM 
      003112 CD 30 62         [ 4]  628     CALL SCALEUP 
      003115 CD 28 B1         [ 4]  629     CALL DTOR
      003118 CD 27 62         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      00311B                        635 FALGN6: 
      00311B CD 28 E7         [ 4]  636     CALL DRAT 
      00311E CD 08 FA         [ 4]  637     CALL EQUAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      003121                        638     _TBRAN FALGN8 
      003121 CD 04 A6         [ 4]    1     CALL TBRAN 
      003124 31 70                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003126 CD 28 E7         [ 4]  640     CALL DRAT 
      003129 CD 09 53         [ 4]  641     CALL GREAT 
      00312C                        642     _QBRAN FALGN7 ; e2<e1 
      00312C CD 04 98         [ 4]    1     CALL QBRAN
      00312F 31 42                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      003131 CD 27 62         [ 4]  644     CALL DSWAP 
      003134 CD 28 CF         [ 4]  645     CALL DRFROM 
      003137 CD 30 99         [ 4]  646     CALL SCALEDOWN
      00313A CD 06 29         [ 4]  647     CALL SWAPP 
      00313D CD 28 B1         [ 4]  648     CALL DTOR 
      003140 20 0F            [ 2]  649     JRA FALGN71  
      003142                        650 FALGN7: ; e2<e1 scaledown m2 
      003142 CD 28 CF         [ 4]  651     CALL DRFROM 
      003145 CD 06 29         [ 4]  652     CALL SWAPP 
      003148 CD 30 99         [ 4]  653     CALL SCALEDOWN 
      00314B CD 06 29         [ 4]  654     CALL SWAPP 
      00314E CD 28 B1         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      003151                        660 FALGN71:
      003151 CD 28 E7         [ 4]  661     CALL DRAT 
      003154 CD 08 FA         [ 4]  662     CALL EQUAL
      003157                        663     _TBRAN FALGN8 
      003157 CD 04 A6         [ 4]    1     CALL TBRAN 
      00315A 31 70                    2     .word FALGN8 
      00315C CD 28 CF         [ 4]  664     CALL DRFROM 
      00315F CD 08 27         [ 4]  665     CALL DDUP 
      003162 CD 09 53         [ 4]  666     CALL GREAT 
      003165                        667     _TBRAN FALGN72
      003165 CD 04 A6         [ 4]    1     CALL TBRAN 
      003168 31 6D                    2     .word FALGN72 
      00316A CD 06 29         [ 4]  668     CALL SWAPP     
      00316D                        669 FALGN72:
      00316D CD 28 B1         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      003170                        671 FALGN8:
      003170 CD 28 CF         [ 4]  672     CALL DRFROM 
      003173                        673     _DROP 
      003173 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003176 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003177                        680     _HEADER FPLUS,2,"F+"
      003177 30 CB                    1         .word LINK 
                           003179     2         LINK=.
      003179 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00317A 46 2B                    4         .ascii "F+"
      00317C                          5         FPLUS:
      00317C CD 30 D3         [ 4]  681     CALL FALIGN 
      00317F CD 05 E2         [ 4]  682     CALL TOR 
      003182 CD 2B 74         [ 4]  683     CALL DPLUS
      003185 CD 26 57         [ 4]  684     CALL DSIGN 
      003188 CD 05 E2         [ 4]  685     CALL TOR 
      00318B CD 26 46         [ 4]  686     CALL DABS 
      00318E CD 31 F1         [ 4]  687     CALL SCALETOM
      003191 CD 05 34         [ 4]  688     CALL RFROM 
      003194                        689     _QBRAN FPLUS1 
      003194 CD 04 98         [ 4]    1     CALL QBRAN
      003197 31 9C                    2     .word FPLUS1
      003199 CD 08 98         [ 4]  690     CALL DNEGA  
      00319C                        691 FPLUS1: 
      00319C CD 07 DD         [ 4]  692     CALL ROT   
      00319F CD 05 34         [ 4]  693     CALL RFROM
      0031A2 CD 08 3C         [ 4]  694     CALL PLUS  
      0031A5 CD 2D 53         [ 4]  695     CALL STEXP 
      0031A8 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031A9                        702     _HEADER FSUB,2,"F-"
      0031A9 31 79                    1         .word LINK 
                           0031AB     2         LINK=.
      0031AB 02                       3         .byte 2  
      0031AC 46 2D                    4         .ascii "F-"
      0031AE                          5         FSUB:
      0031AE CD 30 D3         [ 4]  703     CALL FALIGN 
      0031B1 CD 05 E2         [ 4]  704     CALL TOR 
      0031B4 CD 2B A6         [ 4]  705     CALL DSUB
      0031B7 CD 26 57         [ 4]  706     CALL DSIGN 
      0031BA CD 05 E2         [ 4]  707     CALL TOR 
      0031BD CD 26 46         [ 4]  708     CALL DABS 
      0031C0 CD 31 F1         [ 4]  709     CALL SCALETOM 
      0031C3 CD 05 34         [ 4]  710     CALL RFROM 
      0031C6                        711     _QBRAN FSUB1 
      0031C6 CD 04 98         [ 4]    1     CALL QBRAN
      0031C9 31 CE                    2     .word FSUB1
      0031CB CD 08 98         [ 4]  712     CALL DNEGA 
      0031CE                        713 FSUB1:
      0031CE CD 07 DD         [ 4]  714     CALL ROT 
      0031D1 CD 05 34         [ 4]  715     CALL RFROM
      0031D4 CD 08 3C         [ 4]  716     CALL PLUS  
      0031D7 CD 2D 53         [ 4]  717     CALL STEXP 
      0031DA 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0031DB                        725 UMOD10:
      0031DB                        726     _DOLIT 10 
      0031DB CD 04 6F         [ 4]    1     CALL DOLIT 
      0031DE 00 0A                    2     .word 10 
      0031E0 CD 26 71         [ 4]  727     CALL DSLMOD
      0031E3 CD 07 DD         [ 4]  728     CALL ROT  
      0031E6 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031E7                        739     _HEADER SCALETOM,7,"SCALE>M"
      0031E7 31 AB                    1         .word LINK 
                           0031E9     2         LINK=.
      0031E9 07                       3         .byte 7  
      0031EA 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      0031F1                          5         SCALETOM:
      0031F1 CD 0B FF         [ 4]  740     CALL ZERO 
      0031F4 CD 07 FC         [ 4]  741     CALL NROT 
      0031F7                        742 SCAL1:
      0031F7 CD 06 19         [ 4]  743     CALL DUPP 
      0031FA                        744     _DOLIT 0X7F 
      0031FA CD 04 6F         [ 4]    1     CALL DOLIT 
      0031FD 00 7F                    2     .word 0X7F 
      0031FF CD 09 3D         [ 4]  745     CALL UGREAT 
      003202                        746     _QBRAN SCAL2  
      003202 CD 04 98         [ 4]    1     CALL QBRAN
      003205 32 1B                    2     .word SCAL2
      003207 CD 31 DB         [ 4]  747     CALL UMOD10 
      00320A                        748     _DROP 
      00320A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00320D CD 07 DD         [ 4]  749     CALL ROT 
      003210 CD 0B 93         [ 4]  750     CALL ONEP 
      003213 CD 07 FC         [ 4]  751     CALL NROT  
      003216                        752     _BRAN SCAL1 
      003216 CD 04 B4         [ 4]    1     CALL BRAN 
      003219 31 F7                    2     .word SCAL1 
      00321B                        753 SCAL2: 
      00321B 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00321C                        761 UDIV10:
      00321C 90 93            [ 1]  762     LDW Y,X 
      00321E 90 FE            [ 2]  763     LDW Y,(Y)
      003220 A6 0A            [ 1]  764     LD A,#10 
      003222 90 62            [ 2]  765     DIV Y,A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      003224 FF               [ 2]  766     LDW (X),Y 
      003225 90 95            [ 1]  767     LD YH,A 
      003227 E6 02            [ 1]  768     LD A,(2,X)
      003229 90 97            [ 1]  769     LD YL,A 
      00322B A6 0A            [ 1]  770     LD A,#10 
      00322D 90 62            [ 2]  771     DIV Y,A 
      00322F 90 95            [ 1]  772     LD YH,A 
      003231 90 9F            [ 1]  773     LD A,YL 
      003233 E7 02            [ 1]  774     LD (2,X),A 
      003235 E6 03            [ 1]  775     LD A,(3,X)
      003237 90 97            [ 1]  776     LD YL,A 
      003239 A6 0A            [ 1]  777     LD A,#10 
      00323B 90 62            [ 2]  778     DIV Y,A 
      00323D 90 95            [ 1]  779     LD YH,A 
      00323F 90 9F            [ 1]  780     LD A,YL 
      003241 E7 03            [ 1]  781     LD (3,X),A 
      003243 E6 04            [ 1]  782     LD A,(4,X)
      003245 90 97            [ 1]  783     LD YL,A 
      003247 A6 0A            [ 1]  784     LD A,#10 
      003249 90 62            [ 2]  785     DIV Y,A 
      00324B 90 95            [ 1]  786     LD YH,A 
      00324D 90 9F            [ 1]  787     LD A,YL 
      00324F E7 04            [ 1]  788     LD (4,X),A 
      003251 E6 05            [ 1]  789     LD A,(5,X)
      003253 90 97            [ 1]  790     LD YL,A 
      003255 A6 0A            [ 1]  791     LD A,#10 
      003257 90 62            [ 2]  792     DIV Y,A 
      003259 90 9F            [ 1]  793     LD A,YL 
      00325B E7 05            [ 1]  794     LD (5,X),A 
      00325D 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00325E                        806     _HEADER MMSTAR,3,"MM*"
      00325E 31 E9                    1         .word LINK 
                           003260     2         LINK=.
      003260 03                       3         .byte 3  
      003261 4D 4D 2A                 4         .ascii "MM*"
      003264                          5         MMSTAR:
      003264 CD 08 27         [ 4]  807     CALL DDUP
      003267 CD 28 37         [ 4]  808     CALL DZEQUAL
      00326A                        809     _TBRAN MMSTA2
      00326A CD 04 A6         [ 4]    1     CALL TBRAN 
      00326D 32 7A                    2     .word MMSTA2 
      00326F                        810 MMSTA1:
      00326F CD 29 78         [ 4]  811     CALL DOVER 
      003272 CD 28 37         [ 4]  812     CALL DZEQUAL 
      003275                        813     _QBRAN MMSTA3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      003275 CD 04 98         [ 4]    1     CALL QBRAN
      003278 32 85                    2     .word MMSTA3
      00327A                        814 MMSTA2: ; ( -- 0 0 0 )
      00327A 1C 00 02         [ 2]  815     ADDW X,#2 
      00327D 90 5F            [ 1]  816     CLRW Y 
      00327F FF               [ 2]  817     LDW (X),Y 
      003280 EF 02            [ 2]  818     LDW (2,X),Y
      003282 EF 04            [ 2]  819     LDW (4,X),Y 
      003284 81               [ 4]  820     RET 
      003285                        821 MMSTA3:
      003285 CD 26 57         [ 4]  822     CALL DSIGN 
      003288 CD 05 E2         [ 4]  823     CALL TOR    ; R: m2sign 
      00328B CD 26 46         [ 4]  824     CALL DABS   ; m1 um2 
      00328E CD 27 62         [ 4]  825     CALL DSWAP  ; um2 m1 
      003291 CD 26 57         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      003294 CD 05 34         [ 4]  827     CALL RFROM 
      003297 CD 06 9F         [ 4]  828     CALL XORR 
      00329A CD 05 E2         [ 4]  829     CALL TOR   ; R: product_sign 
      00329D CD 26 46         [ 4]  830     CALL DABS  ; um2 um1  
      0032A0 CD 28 B1         [ 4]  831     CALL DTOR  ; um2 
      0032A3 CD 06 19         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032A6 CD 05 45         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      0032A9 CD 0B 12         [ 4]  836     CALL STAR 
      0032AC CD 0B FF         [ 4]  837     CALL ZERO 
      0032AF CD 06 29         [ 4]  838     CALL SWAPP ; pd1<<16  
      0032B2 CD 27 62         [ 4]  839     CALL DSWAP ; pd1 um2 
      0032B5 CD 06 41         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      0032B8 CD 05 34         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      0032BB CD 0A C8         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      0032BE CD 27 62         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      0032C1 CD 05 45         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      0032C4 CD 0A C8         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      0032C7 CD 07 DD         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      0032CA CD 05 E2         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      0032CD CD 2B 74         [ 4]  851     CALL DPLUS 
      0032D0 CD 2B 74         [ 4]  852     CALL DPLUS  
      0032D3 CD 28 CF         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      0032D6 CD 0A C8         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      0032D9 CD 28 B1         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      0032DC 90 93            [ 1]  859     LDW Y,X 
      0032DE 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      0032E1 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      0032E4 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      0032E6 90 93            [ 1]  863     LDW Y,X
      0032E8 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      0032EA 24 04            [ 1]  865     JRNC MMSTA4
      0032EC 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0032F0                        867 MMSTA4:     
      0032F0 1D 00 02         [ 2]  868     SUBW X,#2 
      0032F3 FF               [ 2]  869     LDW (X),Y 
      0032F4 90 85            [ 2]  870     POPW Y 
      0032F6 EF 02            [ 2]  871     LDW (2,X),Y 
      0032F8 90 85            [ 2]  872     POPW Y 
      0032FA EF 04            [ 2]  873     LDW (4,X),Y
      0032FC CD 0B FF         [ 4]  874     CALL ZERO 
      0032FF CD 05 E2         [ 4]  875     CALL TOR 
      003302                        876 MMSTA5:
      003302 CD 07 CC         [ 4]  877     CALL QDUP 
      003305                        878     _QBRAN MMSTA6 
      003305 CD 04 98         [ 4]    1     CALL QBRAN
      003308 33 1B                    2     .word MMSTA6
      00330A CD 32 1C         [ 4]  879     CALL UDIV10 
      00330D CD 05 34         [ 4]  880     CALL RFROM 
      003310 CD 0B 93         [ 4]  881     CALL ONEP 
      003313 CD 05 E2         [ 4]  882     CALL TOR 
      003316                        883     _BRAN MMSTA5 
      003316 CD 04 B4         [ 4]    1     CALL BRAN 
      003319 33 02                    2     .word MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      00331B                        886 MMSTA6: 
      00331B CD 05 34         [ 4]  887     CALL RFROM 
      00331E CD 07 FC         [ 4]  888     CALL NROT 
      003321 CD 31 F1         [ 4]  889     CALL SCALETOM
      003324 CD 28 B1         [ 4]  890     CALL DTOR 
      003327 CD 08 3C         [ 4]  891     CALL PLUS 
      00332A CD 28 CF         [ 4]  892     CALL DRFROM 
      00332D CD 05 34         [ 4]  893     CALL RFROM
      003330                        894     _QBRAN MMSTA7
      003330 CD 04 98         [ 4]    1     CALL QBRAN
      003333 33 38                    2     .word MMSTA7
      003335 CD 08 98         [ 4]  895     CALL DNEGA
      003338                        896 MMSTA7:
      003338 CD 07 DD         [ 4]  897     CALL ROT ; m e 
      00333B 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00333C                        905     _HEADER FSTAR,2,"F*"
      00333C 32 60                    1         .word LINK 
                           00333E     2         LINK=.
      00333E 02                       3         .byte 2  
      00333F 46 2A                    4         .ascii "F*"
      003341                          5         FSTAR:
      003341 CD 2D 21         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      003344 CD 05 E2         [ 4]  907     CALL TOR   
      003347 CD 27 62         [ 4]  908     CALL DSWAP ; m2 f#1
      00334A CD 2D 21         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      00334D CD 05 34         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      003350 CD 08 3C         [ 4]  911     CALL PLUS  ; m2 m1 e 
      003353 CD 05 E2         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      003356 CD 32 64         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      003359 CD 05 34         [ 4]  914     CALL RFROM 
      00335C CD 08 3C         [ 4]  915     CALL PLUS 
      00335F CD 2D 53         [ 4]  916     CALL STEXP ; f#3 
      003362 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003363                        924     _HEADER FSLASH,2,"F/"
      003363 33 3E                    1         .word LINK 
                           003365     2         LINK=.
      003365 02                       3         .byte 2  
      003366 46 2F                    4         .ascii "F/"
      003368                          5         FSLASH:
      003368 CD 2D 21         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      00336B CD 05 E2         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      00336E CD 26 57         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      003371 CD 05 E2         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      003374 CD 26 46         [ 4]  929     CALL DABS   ; F#1 um2 
      003377 CD 27 62         [ 4]  930     CALL DSWAP  ; m2 f#1 
      00337A CD 2D 21         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      00337D CD 0C 0A         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      003380 CD 05 9F         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      003383 CD 08 D2         [ 4]  934     CALL SUBB   ; m2 m1 e 
      003386 CD 0C 0A         [ 4]  935     CALL ONE    ; e slot on rstack 
      003389 CD 05 BE         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      00338C CD 26 57         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      00338F CD 05 34         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      003392 CD 06 9F         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      003395 CD 05 34         [ 4]  940     CALL RFROM   
      003398 CD 28 B1         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      00339B CD 26 46         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      00339E CD 27 62         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033A1 CD 08 27         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033A4 CD 28 B1         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033A7 CD 2A 83         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0033AA                        947 FSLASH1: 
      0033AA CD 29 78         [ 4]  948     CALL DOVER ; if remainder null done 
      0033AD CD 28 37         [ 4]  949     CALL DZEQUAL 
      0033B0                        950     _TBRAN FSLASH8 
      0033B0 CD 04 A6         [ 4]    1     CALL TBRAN 
      0033B3 34 10                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      0033B5 CD 08 27         [ 4]  954     CALL DDUP 
      0033B8                        955     _DOLIT 0XCCCC 
      0033B8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033BB CC CC                    2     .word 0XCCCC 
      0033BD                        956     _DOLIT 0xC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0033BD CD 04 6F         [ 4]    1     CALL DOLIT 
      0033C0 00 0C                    2     .word 0xC 
      0033C2 CD 28 74         [ 4]  957     CALL DGREAT 
      0033C5                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      0033C5 CD 04 A6         [ 4]    1     CALL TBRAN 
      0033C8 34 10                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      0033CA                        960     _DOLIT 10 
      0033CA CD 04 6F         [ 4]    1     CALL DOLIT 
      0033CD 00 0A                    2     .word 10 
      0033CF CD 0B FF         [ 4]  961     CALL ZERO 
      0033D2 CD 2A 20         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      0033D5 CD 27 62         [ 4]  964     CALL DSWAP 
      0033D8                        965     _DOLIT 10 
      0033D8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033DB 00 0A                    2     .word 10 
      0033DD CD 0B FF         [ 4]  966     CALL ZERO 
      0033E0 CD 2A 20         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      0033E3 CD 28 E7         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      0033E6 CD 2A 83         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      0033E9 CD 27 62         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      0033EC CD 28 B1         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      0033EF CD 2B 74         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      0033F2 CD 28 CF         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      0033F5 CD 27 62         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      0033F8                        977     _DOLIT 2    ; e slot on rstack 
      0033F8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0033FB 00 02                    2     .word 2 
      0033FD CD 05 9F         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      003400 CD 0B 93         [ 4]  979     CALL ONEP   ; increment exponent 
      003403                        980     _DOLIT 2 
      003403 CD 04 6F         [ 4]    1     CALL DOLIT 
      003406 00 02                    2     .word 2 
      003408 CD 05 BE         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      00340B                        982     _BRAN FSLASH1
      00340B CD 04 B4         [ 4]    1     CALL BRAN 
      00340E 33 AA                    2     .word FSLASH1 
      003410                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      003410 CD 27 62         [ 4]  984     CALL DSWAP  
      003413                        985     _DDROP  ; drop remainder     
      003413 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003416 CD 28 CF         [ 4]  986     CALL DRFROM
      003419                        987     _DDROP  ; drop divisor 
      003419 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00341C CD 15 D8         [ 4]  988     CALL JFETCH    ; quotient sign 
      00341F                        989     _QBRAN FSLASH9 
      00341F CD 04 98         [ 4]    1     CALL QBRAN
      003422 34 27                    2     .word FSLASH9
      003424 CD 08 98         [ 4]  990     CALL DNEGA  
      003427                        991 FSLASH9:
      003427 CD 05 34         [ 4]  992     CALL RFROM  ; exponent 
      00342A CD 2D 53         [ 4]  993     CALL STEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00342D CD 05 34         [ 4]  994     CALL RFROM 
      003430                        995     _DROP ; drop qs 
      003430 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003433 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003434                       1002     _HEADER DTOF,3,"D>F"
      003434 33 65                    1         .word LINK 
                           003436     2         LINK=.
      003436 03                       3         .byte 3  
      003437 44 3E 46                 4         .ascii "D>F"
      00343A                          5         DTOF:
      00343A CD 26 57         [ 4] 1003     CALL DSIGN 
      00343D CD 05 E2         [ 4] 1004     CALL TOR
      003440 CD 26 46         [ 4] 1005     CALL DABS  
      003443                       1006 DTOF1:      
      003443 CD 31 F1         [ 4] 1007     CALL SCALETOM 
      003446 CD 05 34         [ 4] 1008     CALL RFROM
      003449                       1009     _QBRAN DTOF2 
      003449 CD 04 98         [ 4]    1     CALL QBRAN
      00344C 34 51                    2     .word DTOF2
      00344E CD 08 98         [ 4] 1010     CALL DNEGA 
      003451                       1011 DTOF2: 
      003451 CD 07 DD         [ 4] 1012     CALL ROT 
      003454 CD 2D 53         [ 4] 1013     CALL STEXP 
      003457 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003458                       1020     _HEADER FTOD,3,"F>D"
      003458 34 36                    1         .word LINK 
                           00345A     2         LINK=.
      00345A 03                       3         .byte 3  
      00345B 46 3E 44                 4         .ascii "F>D"
      00345E                          5         FTOD:
      00345E CD 2D 21         [ 4] 1021     CALL ATEXP ; m e 
      003461 CD 07 CC         [ 4] 1022     CALL QDUP
      003464                       1023     _QBRAN FTOD9
      003464 CD 04 98         [ 4]    1     CALL QBRAN
      003467 34 F4                    2     .word FTOD9
      003469 CD 05 E2         [ 4] 1024     CALL TOR 
      00346C CD 26 57         [ 4] 1025     CALL DSIGN 
      00346F CD 07 FC         [ 4] 1026     CALL NROT 
      003472 CD 26 46         [ 4] 1027     CALL DABS
      003475 CD 05 34         [ 4] 1028     CALL RFROM  
      003478 CD 06 19         [ 4] 1029     CALL DUPP   
      00347B CD 06 50         [ 4] 1030     CALL ZLESS 
      00347E                       1031     _QBRAN FTOD4 
      00347E CD 04 98         [ 4]    1     CALL QBRAN
      003481 34 BC                    2     .word FTOD4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   1032 ; negative exponent 
      003483 CD 08 EC         [ 4] 1033     CALL ABSS 
      003486 CD 05 E2         [ 4] 1034     CALL TOR
      003489                       1035     _BRAN FTOD2  
      003489 CD 04 B4         [ 4]    1     CALL BRAN 
      00348C 34 A7                    2     .word FTOD2 
      00348E                       1036 FTOD1:
      00348E CD 08 27         [ 4] 1037     CALL DDUP 
      003491 CD 28 37         [ 4] 1038     CALL DZEQUAL 
      003494                       1039     _TBRAN FTOD3 
      003494 CD 04 A6         [ 4]    1     CALL TBRAN 
      003497 34 B1                    2     .word FTOD3 
      003499                       1040     _DOLIT 10 
      003499 CD 04 6F         [ 4]    1     CALL DOLIT 
      00349C 00 0A                    2     .word 10 
      00349E CD 26 71         [ 4] 1041     CALL DSLMOD 
      0034A1 CD 07 DD         [ 4] 1042     CALL ROT 
      0034A4                       1043     _DROP
      0034A4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034A7                       1044 FTOD2:      
      0034A7                       1045     _DONXT FTOD1
      0034A7 CD 04 83         [ 4]    1     CALL DONXT 
      0034AA 34 8E                    2     .word FTOD1 
      0034AC                       1046     _BRAN FTOD8   
      0034AC CD 04 B4         [ 4]    1     CALL BRAN 
      0034AF 34 E9                    2     .word FTOD8 
      0034B1                       1047 FTOD3: 
      0034B1 CD 05 34         [ 4] 1048     CALL RFROM 
      0034B4                       1049     _DROP 
      0034B4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034B7                       1050     _BRAN FTOD8  
      0034B7 CD 04 B4         [ 4]    1     CALL BRAN 
      0034BA 34 E9                    2     .word FTOD8 
                                   1051 ; positive exponent 
      0034BC                       1052 FTOD4:
      0034BC CD 05 E2         [ 4] 1053     CALL TOR 
      0034BF                       1054     _BRAN FTOD6
      0034BF CD 04 B4         [ 4]    1     CALL BRAN 
      0034C2 34 E4                    2     .word FTOD6 
      0034C4                       1055 FTOD5:
      0034C4 CD 08 27         [ 4] 1056     CALL DDUP 
      0034C7                       1057     _DOLIT 0XCCCC
      0034C7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034CA CC CC                    2     .word 0XCCCC 
      0034CC                       1058     _DOLIT 0XCCC  
      0034CC CD 04 6F         [ 4]    1     CALL DOLIT 
      0034CF 0C CC                    2     .word 0XCCC 
      0034D1 CD 28 74         [ 4] 1059     CALL DGREAT 
      0034D4                       1060     _TBRAN FTOD3 
      0034D4 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034D7 34 B1                    2     .word FTOD3 
      0034D9                       1061     _DOLIT 10 
      0034D9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034DC 00 0A                    2     .word 10 
      0034DE CD 0B FF         [ 4] 1062     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0034E1 CD 2A 20         [ 4] 1063     CALL DSTAR 
      0034E4                       1064 FTOD6: 
      0034E4                       1065     _DONXT FTOD5 
      0034E4 CD 04 83         [ 4]    1     CALL DONXT 
      0034E7 34 C4                    2     .word FTOD5 
      0034E9                       1066 FTOD8:
      0034E9 CD 07 DD         [ 4] 1067     CALL ROT 
      0034EC                       1068     _QBRAN FTOD9 
      0034EC CD 04 98         [ 4]    1     CALL QBRAN
      0034EF 34 F4                    2     .word FTOD9
      0034F1 CD 08 98         [ 4] 1069     CALL DNEGA
      0034F4                       1070 FTOD9:          
      0034F4 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      0034F5                       1078     _HEADER FZLESS,3,"F0<"
      0034F5 34 5A                    1         .word LINK 
                           0034F7     2         LINK=.
      0034F7 03                       3         .byte 3  
      0034F8 46 30 3C                 4         .ascii "F0<"
      0034FB                          5         FZLESS:
      0034FB CD 2D 21         [ 4] 1079     CALL ATEXP 
      0034FE                       1080     _DROP 
      0034FE 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003501 CD 06 29         [ 4] 1081     CALL SWAPP 
      003504                       1082     _DROP 
      003504 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003507 CD 06 50         [ 4] 1083     CALL ZLESS 
      00350A 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      00350B                       1090     _HEADER FLESS,2,"F<"
      00350B 34 F7                    1         .word LINK 
                           00350D     2         LINK=.
      00350D 02                       3         .byte 2  
      00350E 46 3C                    4         .ascii "F<"
      003510                          5         FLESS:
      003510 CD 31 AE         [ 4] 1091     CALL FSUB  
      003513 CC 34 FB         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003516                       1098     _HEADER FGREAT,2,"F>"
      003516 35 0D                    1         .word LINK 
                           003518     2         LINK=.
      003518 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      003519 46 3E                    4         .ascii "F>"
      00351B                          5         FGREAT:
      00351B CD 27 62         [ 4] 1099     CALL DSWAP 
      00351E CC 35 10         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003521                       1106     _HEADER FEQUAL,2,"F="
      003521 35 18                    1         .word LINK 
                           003523     2         LINK=.
      003523 02                       3         .byte 2  
      003524 46 3D                    4         .ascii "F="
      003526                          5         FEQUAL:
      003526 CC 28 53         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003529                       1113     _HEADER FZEQUAL,3,"F0="
      003529 35 23                    1         .word LINK 
                           00352B     2         LINK=.
      00352B 03                       3         .byte 3  
      00352C 46 30 3D                 4         .ascii "F0="
      00352F                          5         FZEQUAL:
      00352F CD 2D 21         [ 4] 1114     CALL ATEXP 
      003532                       1115     _DROP 
      003532 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003535 CC 28 37         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003538                       1122     _HEADER FNEGA,7,"FNEGATE"
      003538 35 2B                    1         .word LINK 
                           00353A     2         LINK=.
      00353A 07                       3         .byte 7  
      00353B 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003542                          5         FNEGA:
      003542 CD 2D 21         [ 4] 1123     CALL ATEXP 
      003545 CD 05 E2         [ 4] 1124     CALL TOR 
      003548 CD 08 98         [ 4] 1125     CALL DNEGA
      00354B CD 05 34         [ 4] 1126     CALL RFROM 
      00354E CD 2D 53         [ 4] 1127     CALL STEXP 
      003551 CD 2C D4         [ 4] 1128     CALL SFN 
      003554 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003555                       1134     _HEADER FABS,4,"FABS"
      003555 35 3A                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                           003557     2         LINK=.
      003557 04                       3         .byte 4  
      003558 46 41 42 53              4         .ascii "FABS"
      00355C                          5         FABS:
      00355C CD 2D 21         [ 4] 1135     CALL ATEXP 
      00355F CD 05 E2         [ 4] 1136     CALL TOR 
      003562 CD 06 19         [ 4] 1137     CALL DUPP 
      003565                       1138     _DOLIT 0X80 
      003565 CD 04 6F         [ 4]    1     CALL DOLIT 
      003568 00 80                    2     .word 0X80 
      00356A CD 06 76         [ 4] 1139     CALL ANDD 
      00356D                       1140     _QBRAN FABS1
      00356D CD 04 98         [ 4]    1     CALL QBRAN
      003570 35 75                    2     .word FABS1
      003572 CD 08 98         [ 4] 1141     CALL DNEGA 
      003575                       1142 FABS1: 
      003575 CD 05 34         [ 4] 1143     CALL RFROM 
      003578 CD 2D 53         [ 4] 1144     CALL STEXP 
      00357B CD 2C D4         [ 4] 1145     CALL SFN 
      00357E 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   4568 .endif 
                                   4569 
                                   4570 ;===============================================================
                                   4571 
                           003557  4572 LASTN =	LINK   ;last name defined
                                   4573 
                                   4574 ; application code begin here
      003580                       4575 	.bndry 128 ; align on flash block  
      003580                       4576 app_space: 
                                   4577 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F5 R   |   6 ABOR1      0013EA R
  6 ABOR2      001401 R   |   6 ABORQ      0013E2 R   |   6 ABORT      0013D3 R
  6 ABRTQ      0016C4 R   |   6 ABSS       0008EC R   |   6 ACCEP      001369 R
  6 ACCP1      001372 R   |   6 ACCP2      001398 R   |   6 ACCP3      00139B R
  6 ACCP4      00139D R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0007BC R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0016AF R   |   6 AGAIN      001605 R   |   6 AHEAD      001662 R
  6 ALLOT      001512 R   |   6 ANDD       000676 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000D12 R   |   6 ATEXP      002D21 R
  6 ATEXP1     002D36 R   |   6 ATEXP2     002D46 R   |   6 AUTORUN    000129 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003E0 R
    B19200  =  000003     |   6 B19K2      0003BD R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038E R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039C R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CE R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AC R
  6 BACK1      001311 R   |   6 BASE       0006DF R   |     BASEE   =  00000A 
  6 BAUD       0003F0 R   |     BCNT    =  000001     |   6 BCOMP      001555 R
  6 BDIGS      000DF9 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      0015E7 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      001166 R
  6 BKSP       0012E1 R   |     BKSPP   =  000008     |   6 BLANK      000BF2 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004B4 R   |     BTW     =  000001     |   6 BUF2ROW    002195 R
  6 BYE        0000B6 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0023DE R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  00002A     |     CASE_SEN=  000000 
  6 CAT        000501 R   |   6 CCOMMA     001537 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    CELLL   =  000002     |   6 CELLM      000B77 R   |   6 CELLP      000B68 R
  6 CELLS      000B86 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000F4F R   |   6 CHAR2      000F52 R
  6 CHKIVEC    002083 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000D31 R   |   6 CMOV2      000D49 R
  6 CMOVE      000D29 R   |     CNTDWN  =  000032     |   6 CNTXT      000762 R
  6 COLD       001B84 R   |   6 COLD1      001B84 R   |   6 COLON      001867 R
  6 COMMA      001520 R   |   6 COMPI      001565 R   |     COMPO   =  000040 
  6 CONSTANT   001911 R   |   6 COPYRIGH   001ACD R   |   6 COUNT      000CC5 R
  6 CPP        00077E R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F77 R   |   6 CREAT      0018AD R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     0023FF R   |   6 CTAT       002420 R
  6 CTINIT     002448 R   |   6 D2SLASH    002991 R   |   6 D2STAR     0029A8 R
  6 DABS       002646 R   |   6 DABS1      00264E R   |   6 DAT        000CA9 R
    DATSTK  =  001680     |   6 DBLVER     0024CC R   |   6 DCLZ       002790 R
  6 DCLZ1      002799 R   |   6 DCLZ4      0027A2 R   |   6 DCLZ8      0027AF R
  6 DCONST     001946 R   |   6 DDIG       0026B2 R   |   6 DDIGS      0026CB R
  6 DDOT       0026E2 R   |   6 DDOT0      0026F6 R   |   6 DDOT1      00270C R
  6 DDROP      00081C R   |   6 DDSLMOD    002B35 R   |   6 DDSTAR3    002A79 R
  6 DDUP       000827 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000EA9 R   |   6 DEPTH      000C41 R   |   6 DEQU4      002868 R
  6 DEQUAL     002853 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     002874 R   |   6 DGTQ1      000EEE R   |   6 DI         0000C4 R
  6 DIG        000E22 R   |   6 DIGIT      000DBD R   |   6 DIGS       000E33 R
  6 DIGS1      000E33 R   |   6 DIGS2      000E40 R   |   6 DIGTQ      000EBD R
    DISCOVER=  000000     |   6 DLESS      00287F R   |   6 DLESS4     002893 R
  6 DLITER     002951 R   |   6 DLSHIFT    0029C4 R   |   6 DLSHIFT1   0029D7 R
  6 DLSHIFT2   0029EC R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0008B3 R   |   6 DNEGA      000898 R   |   6 DOCONST    001931 R
  6 DOLIT      00046F R   |   6 DONXT      000483 R   |     DOORBELL=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

  6 DOSTR      000F87 R   |   6 DOT        00101E R   |   6 DOT1       001034 R
  6 DOTI1      001A96 R   |   6 DOTID      001A80 R   |   6 DOTO1      001476 R
  6 DOTOK      00145C R   |   6 DOTPR      001147 R   |   6 DOTQ       0016DE R
  6 DOTQP      000FA4 R   |   6 DOTR       000FB2 R   |   6 DOTS       001A22 R
  6 DOTS1      001A2D R   |   6 DOTS2      001A36 R   |   6 DOVAR      0006CF R
  6 DOVER      002978 R   |   6 DO_DCONS   001969 R   |   6 DPLUS      002B74 R
  6 DPLUS1     002B9B R   |   6 DRAT       0028E7 R   |   6 DRFROM     0028CF R
  6 DROP       00060F R   |   6 DROT       0027FC R   |   6 DRSHIFT    0029FD R
  6 DRSHIFT1   002A04 R   |   6 DRSHIFT2   002A1A R   |   6 DSIGN      002657 R
  6 DSIGN1     002661 R   |   6 DSLA9      002B5F R   |   6 DSLASH     002B65 R
  6 DSLMOD     002671 R   |   6 DSLMOD3    00268C R   |   6 DSLMOD4    002698 R
  6 DSLMODa    002693 R   |   6 DSLMODb    00269E R   |   6 DSSTAR     00273C R
  6 DSSTAR3    002759 R   |   6 DSTAR      002A20 R   |   6 DSTOR      000C90 R
  6 DSUB       002BA6 R   |   6 DSUB1      002BCD R   |   6 DSWAP      002762 R
  6 DTOF       00343A R   |   6 DTOF1      003443 R   |   6 DTOF2      003451 R
  6 DTOR       0028B1 R   |   6 DUMP       0019D8 R   |   6 DUMP1      0019EF R
  6 DUMP3      001A11 R   |   6 DUMPP      0019A7 R   |   6 DUPP       000619 R
  6 DVARIA     002905 R   |     DVER_MAJ=  000001     |     DVER_MIN=  000000 
  6 DZEQUAL    002837 R   |   6 DZLESS     00289A R   |   6 DZLESS1    0028A4 R
  6 EDIGS      000E5E R   |   6 EDOT       002DA7 R   |   6 EDOT0      002DBE R
  6 EDOT2      002DCA R   |   6 EDOT3      002DE3 R   |   6 EDOT4      002E0F R
  6 EDOT5      002E2E R   |   6 EECSTORE   001E34 R   |   6 EEPCP      001C5A R
  6 EEPLAST    001C2D R   |   6 EEPROM     001C15 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001C44 R   |   6 EEPVP      001C70 R   |   6 EESTORE    001E80 R
  6 EE_CCOMM   00214A R   |   6 EE_COMMA   002129 R   |   6 EE_CREAD   001DC5 R
  6 EE_READ    001DA3 R   |   6 EI         0000BD R   |   6 ELSEE      00163D R
  6 EMIT       000436 R   |   6 ENEPER     00236A R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        000907 R   |   6 EQUAL      0008FA R
  6 ERASE      000D8B R   |     ERR     =  00001B     |   6 EVAL       00149F R
  6 EVAL1      00149F R   |   6 EVAL2      0014BB R   |   6 EXE1       000D20 R
  6 EXECU      0004C4 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000DE5 R   |   6 FABS       00355C R
  6 FABS1      003575 R   |   6 FADDR      002217 R   |   6 FALGN4     00310C R
  6 FALGN6     00311B R   |   6 FALGN7     003142 R   |   6 FALGN71    003151 R
  6 FALGN72    00316D R   |   6 FALGN8     003170 R   |   6 FALIGN     0030D3 R
  6 FALSE      000868 R   |   6 FARAT      001CDB R   |   6 FARCAT     001CE7 R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002E3D R
  6 FDOT0      002E7B R   |   6 FDOT1      002E6A R   |   6 FDOT10     002ED7 R
  6 FDOT2      002E89 R   |   6 FDOT3      002EA2 R   |   6 FDOT6      002EB2 R
  6 FDOT7      002EB7 R   |   6 FDOT8      002EBF R   |   6 FDOT9      002EC7 R
  6 FEQUAL     003526 R   |   6 FER        002C3F R   |   6 FGREAT     00351B R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000D58 R
  6 FILL1      000D75 R   |   6 FILL2      000D7E R   |   6 FIND       00123D R
  6 FIND1      00125B R   |   6 FIND2      001289 R   |   6 FIND3      001295 R
  6 FIND4      0012A9 R   |   6 FIND5      0012B6 R   |   6 FIND6      00129A R
  6 FINIT      002C35 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |   6 FLESS      003510 R   |   6 FLOATQ     002F4F R
  6 FLOATQ0    002F59 R   |   6 FLOATQ1    002FBE R   |   6 FLOATQ2    002FC7 R
  6 FLOATQ3    002FCF R   |   6 FLOATQ4    002FE3 R   |   6 FLOAT_ER   002FFE R
  6 FLOAT_ER   002FFB R   |     FLOAT_MA=  000001     |     FLOAT_MI=  000000 
    FLSI    =  01F400     |   6 FMOVE      002222 R   |   6 FMOVE2     002253 R
  6 FNE        002C62 R   |   6 FNEGA      003542 R   |   6 FOR        0015AF R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002C7D R
  6 FPLUS      00317C R   |   6 FPLUS1     00319C R   |   6 FPSTOR     001BF6 R
  6 FPSW       002C11 R   |     FPTR    =  000034     |   6 FREEVAR    000225 R
  6 FREEVAR4   00025B R   |   6 FRESET     002C23 R   |   6 FSLASH     003368 R
  6 FSLASH1    0033AA R   |   6 FSLASH8    003410 R   |   6 FSLASH9    003427 R
  6 FSTAR      003341 R   |   6 FSUB       0031AE R   |   6 FSUB1      0031CE R
  6 FTOD       00345E R   |   6 FTOD1      00348E R   |   6 FTOD2      0034A7 R
  6 FTOD3      0034B1 R   |   6 FTOD4      0034BC R   |   6 FTOD5      0034C4 R
  6 FTOD6      0034E4 R   |   6 FTOD8      0034E9 R   |   6 FTOD9      0034F4 R
  6 FVER       002BDF R   |   6 FZE        002C4C R   |   6 FZEQUAL    00352F R
  6 FZLESS     0034FB R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 GREAT      000953 R
  6 GREAT1     00095E R   |   6 HDOT       001001 R   |   6 HERE       000CDC R
  6 HEX        000E94 R   |   6 HI         001B39 R   |   6 HLD        00074F R
  6 HOLD       000E09 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     001878 R
  6 IFETCH     0015CD R   |   6 IFF        001615 R   |   6 IFMOVE     0022FB R
    IMEDD   =  000080     |   6 IMMED      00188A R   |   6 INCH       00042A R
  6 INC_FPTR   001D70 R   |   6 INITOFS    001840 R   |   6 INN        0006FD R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_PU=  000001     |   6 INTE1      00143E R   |   6 INTER      001414 R
  6 INTQ       0024A4 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      000875 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0017D5 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JFETCH     0015D8 R   |   6 JSRC       00182A R   |   6 KEY        000EFD R
  6 KTAP       00132E R   |   6 KTAP1      001351 R   |   6 KTAP2      001354 R
  6 LAST       00078E R   |   6 LASTN   =  003557 R   |   6 LBRAC      00144B R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       000926 R   |     LF      =  00000A     |   6 LINK    =  003557 R
  6 LITER      001587 R   |   6 LN2S       0023C6 R   |   6 LOCAL      000554 R
  6 LOCK       001D5C R   |   6 LOG2S      0023B0 R   |   6 LSCALE     00301D R
  6 LSHIFT     000BB1 R   |   6 LSHIFT1    000BBA R   |   6 LSHIFT4    000BC2 R
  6 LT1        000931 R   |     MASKK   =  001F7F     |   6 MAX        00096B R
  6 MAX1       000975 R   |     MAX_MANT=  7FFFFF     |   6 MIN        00097F R
  6 MIN1       000989 R   |   6 MMOD1      000A34 R   |   6 MMOD2      000A48 R
  6 MMOD3      000A5F R   |   6 MMSM0      0009C4 R   |   6 MMSM1      0009D4 R
  6 MMSM3      0009D8 R   |   6 MMSM4      0009E4 R   |   6 MMSMa      0009DF R
  6 MMSMb      0009EA R   |   6 MMSTA1     00326F R   |   6 MMSTA2     00327A R
  6 MMSTA3     003285 R   |   6 MMSTA4     0032F0 R   |   6 MMSTA5     003302 R
  6 MMSTA6     00331B R   |   6 MMSTA7     003338 R   |   6 MMSTAR     003264 R
  6 MODD       000AAF R   |   6 MONE       000C18 R   |     MS      =  000030 
  6 MSEC       0002D0 R   |   6 MSMOD      000A17 R   |   6 MSTA1      000B40 R
  6 MSTAR      000B1D R   |     NAFR    =  004804     |   6 NAMEQ      0012D6 R
  6 NAMET      0011E7 R   |     NCLKOPT =  004808     |   6 NDROT      0027C0 R
  6 NEGAT      000886 R   |   6 NEG_SIGN   00250F R   |   6 NEX1       000490 R
  6 NEXT       0015BE R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NRAT       00059F R
  6 NRDROP     00057B R   |   6 NROT       0007FC R   |   6 NRSTO      0005BE R
  6 NTIB       00070D R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000F13 R   |   6 NUFQ1      000F2C R   |   6 NUMBQ      00257E R
  6 NUMQ0      0025BF R   |   6 NUMQ1      0025E1 R   |   6 NUMQ3      00260B R
  6 NUMQ4      00262C R   |   6 NUMQ8      002635 R   |     NWDGOPT =  004806 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007B3 R
    OFS     =  000005     |   6 ONE        000C0A R   |   6 ONEM       000BA0 R
  6 ONEP       000B93 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        00068A R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000641 R   |   6 OVERT      0017A3 R
    PA      =  000000     |   6 PACKS      000D9C R   |   6 PAD        000CED R
  6 PAREN      001156 R   |   6 PARS       00104F R   |   6 PARS1      00107A R
  6 PARS2      0010A5 R   |   6 PARS3      0010A8 R   |   6 PARS4      0010B1 R
  6 PARS5      0010D4 R   |   6 PARS6      0010E9 R   |   6 PARS7      0010F8 R
  6 PARS8      001107 R   |   6 PARSE      001118 R   |   6 PARSEXP_   002F32 R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      0019BA R   |   6 PDUM2      0019CB R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000C58 R
  6 PII        002329 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00083C R   |   6 PNAM1      001748 R
  6 PRESE      0014CA R   |   6 PRINT_VE   001B09 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PRT_LICE   001AF5 R   |   6 PSTOR      000C6F R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001D88 R   |   6 QBRAN      000498 R
  6 QDUP       0007CC R   |   6 QDUP1      0007D6 R   |   6 QKEY       000418 R
  6 QSTAC      001482 R   |   6 QUERY      0013AE R   |   6 QUEST      001041 R
  6 QUIT       0014E7 R   |   6 QUIT1      0014EF R   |   6 QUIT2      0014F2 R
  6 RAM2EE     0021C3 R   |     RAMBASE =  000000     |   6 RAMLAST    0007A1 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027E R   |   6 RAT        000545 R   |   6 RBRAC      001817 R
  6 REPEA      001692 R   |   6 RFREE      0021AA R   |   6 RFROM      000534 R
    ROP     =  004800     |   6 ROT        0007DD R   |   6 ROW2BUF    00216C R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000511 R
    RPP     =  0017FF     |   6 RPSTO      00051E R   |   6 RSCALE     003041 R
  6 RSHIFT     000BCD R   |   6 RSHIFT1    000BD6 R   |   6 RSHIFT4    000BDE R
    RST_SR  =  0050B3     |   6 RT12_2     002399 R   |   6 SAME1      001205 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 SAME2      00122E R   |   6 SAMEQ      0011FD R   |   6 SCAL1      0031F7 R
  6 SCAL2      00321B R   |   6 SCALDN2    0030C5 R   |   6 SCALDN3    0030C8 R
  6 SCALEDOW   003099 R   |   6 SCALETOM   0031F1 R   |   6 SCALEUP    003062 R
  6 SCALEUP2   003095 R   |   6 SCALEUP3   003098 R   |   6 SCOM1      00177D R
  6 SCOM2      001780 R   |   6 SCOMP      00175F R   |   6 SEED       000265 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      0017B3 R
  6 SETISP     0000D0 R   |   6 SET_RAML   0018FA R   |   6 SFN        002CD4 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002D08 R
  6 SFZ        002C9D R   |   6 SIGN       000E48 R   |   6 SIGN1      000E58 R
  6 SLASH      000AB9 R   |   6 SLMOD      000A67 R   |   6 SLMOD1     000A99 R
  6 SLMOD8     000AA6 R   |   6 SNAME      001712 R   |     SP0     =  00002C 
  6 SPACE      000F35 R   |   6 SPACS      000F44 R   |   6 SPAT       0005F9 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000606 R   |   6 SQRT10     002382 R
  6 SQRT2      002340 R   |   6 SQRT3      002357 R   |   6 SSMOD      000B49 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000B12 R
  6 STASL      000B5A R   |   6 STEXP      002D53 R   |   6 STEXP1     002D69 R
  6 STEXP2     002D93 R   |   6 STOD       0008BB R   |   6 STORE      0004D1 R
  6 STO_SIGN   002527 R   |   6 STR        000E76 R   |   6 STRCQ      00158F R
  6 STRQ       0016D1 R   |   6 STRQP      000FA0 R   |   6 SUBB       0008D2 R
  6 SWAPP      000629 R   |     SWIM_CSR=  007F80     |   6 TAP        001318 R
  6 TBOOT      001B78 R   |   6 TBRAN      0004A6 R   |   6 TBUF       00071D R
    TBUFFBAS=  001680     |   6 TCHAR      000C29 R   |   6 TEMP       0006EE R
  6 TEVAL      000740 R   |   6 TFLASH     00072F R   |   6 THENN      00162A R
  6 TIB        000CFE R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0014FE R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R
  6 TIMER      0002FA R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001A50 R   |   6 TNAM3      001A6E R   |   6 TNAM4      001A74 R
  6 TNAME      001A4D R   |   6 TOFLASH    000335 R   |   6 TOKEN      0011D9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

  6 TOR        0005E2 R   |   6 TORAM      000375 R   |   6 TRUE       000857 R
    TRUEE   =  00FFFF     |   6 TWOSL      000BE5 R   |   6 TYPE1      000F64 R
  6 TYPE2      000F6A R   |   6 TYPES      000F5F R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDIV10     00321C R   |   6 UDOT       000FED R
  6 UDOTR      000FCD R   |   6 UDSLA3     002AB8 R   |   6 UDSLA4     002ADE R
  6 UDSLA7     002B0F R   |   6 UDSLA8     002B1A R   |   6 UDSLMOD    002A83 R
  6 UDSSTAR    00271A R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     00093D R   |   6 UGREAT1    000948 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00091B R   |   6 ULESS      000910 R   |   6 UMMOD      0009B1 R
  6 UMOD10     0031DB R   |   6 UMSTA      000AC8 R   |   6 UNIQ1      00170F R
  6 UNIQU      0016F0 R   |   6 UNLKEE     001CF6 R   |   6 UNLKFL     001D15 R
  6 UNLOCK     001D34 R   |   6 UNTIL      0015F2 R   |     UOFFSET =  00001E 
  6 UPDATCP    001CB3 R   |   6 UPDATLAS   001C8A R   |   6 UPDATPTR   0022B6 R
  6 UPDATRUN   001CA2 R   |   6 UPDATVP    001CCA R   |   6 UPL1       0006CB R
  6 UPLUS      0006B4 R   |     UPP     =  000006     |   6 UPPER      00119C R
  6 UPPER1     0011BF R   |   6 UPPER2     0011C8 R   |     URLAST  =  000022 
  6 USLMOD     0009FC R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      00198A R   |   6 UTYP2      001999 R
  6 UTYPE      001985 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      0018C7 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

    VER     =  000004     |   6 VPP        000770 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      001678 R
  6 WITHI      000996 R   |   6 WORDD      001182 R   |   6 WORDS      001AAA R
  6 WORS1      001AB0 R   |   6 WORS2      001ACC R   |   6 WR_BYTE    001DDF R
  6 WR_WORD    001E04 R   |   6 WTABLE     00240E R   |   6 WTAT       002432 R
  6 WTINIT     002477 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       00069F R   |     XTEMP   =  000024     |     YTEMP   =  000026 
  6 ZEQ1       002847 R   |   6 ZEQU1      00066C R   |   6 ZEQUAL     000662 R
  6 ZERO       000BFF R   |   6 ZL1        000659 R   |   6 ZLESS      000650 R
  6 app_spac   003580 R   |   6 baudrate   00037B R   |   6 block_er   001ECA R
  6 clear_ra   000019 R   |   6 clock_in   000064 R   |   6 copy_buf   001F2A R
  6 copy_buf   001F49 R   |   6 copy_pro   001F49 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 do2lit     00295C R   |   6 erase_fl   001EEC R   |   6 fmove_do   00229F R
  6 main       000016 R   |   6 next_row   00225C R   |   6 no_move    0022A6 R
  6 nsign      0024FE R   |   6 parse_di   00252B R   |   6 parse_ex   002EE7 R
  6 pristine   001FCA R   |   6 proceed_   001EEF R   |   6 reboot     000327 R
  6 reset_ve   002031 R   |   6 row_eras   001EAA R   |   6 row_eras   001F03 R
  6 row_eras   001F2A R   |   6 set_opti   001F9E R   |   6 set_vect   0020D2 R
  6 uart_ini   000076 R   |   6 write_ro   001F6E R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3580   flags    0

