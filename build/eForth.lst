ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        	.include "inc/stm8s208.inc"
                                        
                                        XMEM_SIZE=96304 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART1_SR
                                        UART_DR=UART1_DR
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 µC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                 
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                 
                                 
                                 
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000000    89 .if NUCLEO 
                                     90 STACK   =	0x17FF 	;system (return) stack empty 
                                     91 DATSTK  =	0x1680	;data stack  empty
                                     92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                                     93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000001    94 .else ; DISCOVERY
                           0007FF    95 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    96 DATSTK  =	0x680	;data stack  empty
                           000680    97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           000011   169 XON     =     17
                           000013   170 XOFF    =     19
                           00001B   171 ERR     =     27      ;error escape
                           000027   172 TIC     =     39      ;tick
                           0000CD   173 CALLL   =     0xCD     ;CALL opcodes
                           000080   174 IRET_CODE =   0x80    ; IRET opcode 
                                    175 
                                    176         .macro _ledon
                                    177         .if NUCLEO
                                    178         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .else ;DISCOVERY 
                                    180         .if DISCOVERY
                                    181         bres PD_ODR,#LD1_BIT 
                                    182         .endif
                                    183         .endif
                                    184         .endm
                                    185 
                                    186         .macro _ledoff
                                    187         .if NUCLEO 
                                    188         bres PC_ODR,#LED2_BIT
                                    189         .else ;DISCOVERY 
                                    190         .if DISCOVERY
                                    191         bset PD_ODR,#LD1_BIT 
                                    192         .endif 
                                    193         .endif
                                    194         .endm
                                    195 
                                    196 ;**********************************************************
                                    197         .area DATA (ABS)
      000000                        198         .org RAMBASE 
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area SSEG (ABS) ; STACK
      001700                        203         .org 0x1700
      001700                        204         .ds 256 
                                    205 ; space for DATSTK,TIB and STACK         
                                    206 ;**********************************************************
                                    207 
                                    208 ;**********************************************************
                                    209         .area HOME ; vectors table
                                    210 ;**********************************************************
      000000 82 00 00 16            211 	int main	        ; reset
      000004 82 00 00 00            212 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            213 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            214 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            215 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            216 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            217 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            218 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            219 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            220 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            221 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            222 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            223 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            224 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            225 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            226 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            227 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            228 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            229 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            230 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            231 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            232 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            233 	int NonHandledInterrupt	; irq20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00005C 82 00 00 00            234 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            235 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            236 	int Timer4Handler	; irq23
      000068 82 00 00 00            237 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            238 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            239 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            240 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            241 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            242 	int NonHandledInterrupt	; irq29
                                    243 
                                    244 ;**********************************************************
                                    245         .area CODE
                                    246 ;**********************************************************
                                    247 
                                    248 ; non handled interrupt reset MCU
      000000                        249 NonHandledInterrupt:
      000000 A6 80            [ 1]  250         ld a, #0x80
      000002 C7 50 D1         [ 1]  251         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    252 	;iret
                                    253 
                                    254 ; used for milliseconds counter 
                                    255 ; MS is 16 bits counter 
      000005                        256 Timer4Handler:
      000005 72 5F 53 42      [ 1]  257 	clr TIM4_SR 
      000009 BE 2E            [ 2]  258         ldw x,MS 
      00000B 5C               [ 1]  259         incw x 
      00000C BF 2E            [ 2]  260         ldw MS,x
      00000E BE 30            [ 2]  261         ldw x,CNTDWN 
      000010 27 03            [ 1]  262         jreq 1$
      000012 5A               [ 2]  263         decw x 
      000013 BF 30            [ 2]  264         ldw CNTDWN,x 
      000015                        265 1$:         
      000015 80               [11]  266         iret 
                                    267 
                                    268 
                                    269 ;; Main entry points and COLD start data
      000016                        270 main:
                                    271 ; clear all RAM
      000016 AE 00 00         [ 2]  272 	ldw X,#RAMBASE
      000019                        273 clear_ram0:
      000019 7F               [ 1]  274 	clr (X)
      00001A 5C               [ 1]  275 	incw X
      00001B A3 07 FF         [ 2]  276 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  277 	jrule clear_ram0
      000020 AE 07 FF         [ 2]  278         ldw x,#RPP
      000023 94               [ 1]  279         ldw sp,x
                                    280 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  281         inc SEEDX+1 
      000026 3C 39            [ 1]  282         inc SEEDY+1          
      000028 CC 00 47         [ 2]  283 	jp ORIG
                                    284 
                                    285 ; COLD initialize these variables.
      00002B                        286 UZERO:
      00002B 00 0A                  287         .word      BASEE   ;BASE
      00002D 00 00                  288         .word      0       ;tmp
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002F 00 00                  289         .word      0       ;>IN
      000031 00 00                  290         .word      0       ;#TIB
      000033 07 00                  291         .word      TIBB    ;TIB
      000035 13 9E                  292         .word      INTER   ;'EVAL
      000037 00 00                  293         .word      0       ;HLD
      000039 23 A1                  294         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  295         .word      VAR_BASE   ;variables free space pointer 
      00003D 24 00                  296         .word      app_space ; FLASH free space pointer 
      00003F 23 A1                  297         .word      LASTN   ;LAST
      000041 00 00                  298         .word      0        ; OFFSET 
      000043 00 00                  299         .word      0       ; TFLASH
                                    300 ;       .word      0       ; URLAST   
      000045 00 00                  301 UEND:   .word      0
                                    302 
      000047                        303 ORIG:   
                                    304 ; initialize SP
      000047 AE 07 FF         [ 2]  305         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  306         LDW     SP,X
      00004B BF 2C            [ 2]  307         LDW     RP0,X
      00004D AE 06 80         [ 2]  308         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  309         LDW     SP0,X
                           000000   310 .if NUCLEO        
                                    311 ; initialize PC_5 as output to control LED2
                                    312 ; added by Picatout 
                                    313         bset PC_CR1,#LED2_BIT
                                    314         bset PC_CR2,#LED2_BIT
                                    315         bset PC_DDR,#LED2_BIT
                                    316 .endif 
                           000000   317 .if DISCOVERY
                                    318         bset PD_CR1,#LD1_BIT
                                    319         bset PD_CR2,#LD1_BIT
                                    320         bset PD_DDR,#LD1_BIT 
                                    321 .endif
      000052                        322         _ledoff
                           000000     1         .if NUCLEO 
                                      2         bres PC_ODR,#LED2_BIT
                           000001     3         .else ;DISCOVERY 
                           000000     4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    323 ; initialize clock to HSI
                                    324 ; no divisor 16Mhz 
                                    325 ; Added by Picatout 
      000052                        326 clock_init:
      000052 72 5F 50 C6      [ 1]  327         clr CLK_CKDIVR
      000056 72 12 50 C5      [ 1]  328 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   329 .if NUCLEO|DOORBELL
      00005A A6 E1            [ 1]  330 	ld a,#CLK_SWR_HSI
                           000000   331 .else ; DISCOVERY as 16Mhz crystal
                                    332 	ld a,#CLK_SWR_HSE
                                    333 .endif 
      00005C C7 50 C4         [ 1]  334 	ld CLK_SWR,a
      00005F C1 50 C3         [ 1]  335 1$:	cp a,CLK_CMSR
      000062 26 FB            [ 1]  336 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    337         
                                    338 ; initialize UART, 115200 8N1
      000064                        339 uart_init:
                           000000   340 .if NUCLEO 
                                    341 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    342 	; configure tx pin
                                    343 	bset PA_DDR,#UART1_TX_PIN ; tx pin
                                    344 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
                                    345 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    346 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    347 	mov UART1_BRR2,#0x0b ; must be loaded first
                                    348 	mov UART1_BRR1,#0x8
                                    349 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000001   350 .else ; DISCOVERY use UART2 
      000064 72 16 50 C7      [ 1]  351 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    352 	; configure tx pin
      000068 72 1A 50 11      [ 1]  353 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      00006C 72 1A 50 12      [ 1]  354 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000070 72 1A 50 13      [ 1]  355 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    356 	; baud rate 115200 Fmaster=8Mhz  
      000074 35 0B 52 43      [ 1]  357 	mov UART2_BRR2,#0x0b ; must be loaded first
      000078 35 08 52 42      [ 1]  358 	mov UART2_BRR1,#0x8
      00007C 35 0C 52 45      [ 1]  359 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    360 .endif
                                    361 ; initialize timer4, used for millisecond interrupt  
      000080 35 07 53 45      [ 1]  362 	mov TIM4_PSCR,#7 ; prescale 128  
      000084 35 7D 53 46      [ 1]  363 	mov TIM4_ARR,#125 ; set for 1msec.
      000088 35 05 53 40      [ 1]  364 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00008C 72 10 53 41      [ 1]  365 	bset TIM4_IER,#TIM4_IER_UIE 
                                    366 ; set TIM4 interrupt priority to highest
      000090 A6 3F            [ 1]  367         ld a,#~(IPR_MASK<<6)
      000092 C4 7F 75         [ 1]  368         and a,ITC_SPR6
      000095 AA C0            [ 1]  369         or a,#(IPR3<<6)
      000097 C7 7F 75         [ 1]  370         ld ITC_SPR6,a 
      00009A 9A               [ 1]  371         rim
      00009B CC 1A A0         [ 2]  372         jp  COLD   ;default=MN1
                                    373 
                                    374 
                                    375 ;; place MCU in sleep mode with
                                    376 ;; halt opcode 
                                    377 ;; BYE ( -- )
      00009E 00 00                  378         .word 0
                           0000A0   379         LINK=.
      0000A0 03                     380         .byte 3 
      0000A1 42 59 45               381         .ascii "BYE"
      0000A4                        382 BYE: 
      0000A4 8E               [10]  383         halt 
      0000A5 81               [ 4]  384         ret 
                                    385 
                                    386 ; Enable interrupts 
                                    387 ; EI ( -- )
      0000A6 00 A0                  388         .word LINK 
                           0000A8   389         LINK=.
      0000A8 02                     390         .byte 2
      0000A9 45 49                  391         .ascii "EI"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000AB                        392 EI:
      0000AB 9A               [ 1]  393         rim 
      0000AC 81               [ 4]  394         ret 
                                    395 
                                    396 ; Disable interrupts
                                    397 ; DI ( -- )
      0000AD 00 A8                  398         .word LINK 
                           0000AF   399         LINK=.
      0000AF 02                     400         .byte 2 
      0000B0 44 49                  401         .ascii "DI"
      0000B2                        402 DI:
      0000B2 9B               [ 1]  403         sim 
      0000B3 81               [ 4]  404         ret 
                                    405 
                                    406 ; set interrupt priority level 
                                    407 ; SET-ISP ( n1 n2 -- )
                                    408 ; n1 level {1..3}
                                    409 ; n2 vector {0..29}
      0000B4 00 AF                  410         .word LINK 
                           0000B6   411         LINK=.
      0000B6 07                     412         .byte 7 
      0000B7 53 45 54 2D 49 53 50   413         .ascii "SET-ISP"
      0000BE                        414 SETISP:
      0000BE 90 93            [ 1]  415         ldw y,x 
      0000C0 90 FE            [ 2]  416         ldw y,(y)
      0000C2 A6 04            [ 1]  417         ld a,#4 ; 4 slot per register 
                                    418 ;  quotient select register, remainder select slot in register.        
      0000C4 90 62            [ 2]  419         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000C6 A4 03            [ 1]  420         and a,#3 
      0000C8 48               [ 1]  421         sll a ; 2*SLOT  lshift 
      0000C9 72 A9 7F 70      [ 2]  422         addw y,#ITC_SPR1 
      0000CD FF               [ 2]  423         ldw (x),y  ; ( level reg -- )
      0000CE 90 5F            [ 1]  424         clrw y 
      0000D0 90 97            [ 1]  425         ld yl,a 
      0000D2 1D 00 02         [ 2]  426         subw x,#CELLL 
      0000D5 FF               [ 2]  427         ldw (x),y  ; ( level reg lshift -- )
      0000D6 90 93            [ 1]  428         ldw y,x 
      0000D8 90 EE 02         [ 2]  429         ldw y,(2,y) 
      0000DB 90 F6            [ 1]  430         ld a,(y)   ; reg_value
      0000DD 1D 00 02         [ 2]  431         subw x,#CELLL 
      0000E0 FF               [ 2]  432         ldw (x),y ; ( level reg lshift rval -- )
      0000E1 CD 05 B4         [ 4]  433         call OVER ; ( level reg lshift rval lshift -- )
      0000E4 CD 04 65         [ 4]  434         call DOLIT 
      0000E7 00 03                  435         .word 3
      0000E9 CD 05 9A         [ 4]  436         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000EC CD 0A 9D         [ 4]  437         call LSHIFT ; creat slot mask 
      0000EF CD 07 9F         [ 4]  438         call INVER  ; ( level reg lshift rval mask )
      0000F2 CD 05 D6         [ 4]  439         call ANDD ; ( level reg lshift slot_masked )
      0000F5 CD 05 53         [ 4]  440         call TOR  ; ( level reg lshift -- R: slot_masked )
      0000F8 CD 07 45         [ 4]  441         call ROT  ; ( reg lshift level )
      0000FB CD 05 9A         [ 4]  442         call SWAPP ; ( reg level lshift )
      0000FE CD 0A 9D         [ 4]  443         call LSHIFT  ; ( reg slot_level -- )
      000101 CD 05 34         [ 4]  444         call RFROM ; ( reg slot_level masked_val )
      000104 CD 05 EA         [ 4]  445         call ORR   ; ( reg updated_rval )
      000107 CD 05 9A         [ 4]  446         call SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00010A CD 04 F0         [ 4]  447         call CSTOR
                                    448 
                                    449 ; sélectionne l'application 
                                    450 ; qui démarre automatique lors 
                                    451 ; d'un COLD start 
      00010D 00 B6                  452         .word LINK 
                           00010F   453         LINK=.
      00010F 07                     454         .byte 7
      000110 41 55 54 4F 52 55 4E   455         .ascii "AUTORUN"
      000117                        456 AUTORUN:
      000117 CD 11 63         [ 4]  457         call TOKEN 
      00011A CD 05 8A         [ 4]  458         call DUPP 
      00011D CD 04 98         [ 4]  459         call QBRAN 
      000120 01 FD                  460         .word FORGET2
      000122 CD 12 60         [ 4]  461         call NAMEQ
      000125 CD 07 34         [ 4]  462         call QDUP 
      000128 CD 04 98         [ 4]  463         call QBRAN 
      00012B 01 FD                  464         .word FORGET2
      00012D CD 05 80         [ 4]  465         call DROP 
      000130 1D 00 04         [ 2]  466         subw x,#2*CELLL 
      000133 90 5F            [ 1]  467         clrw y 
      000135 FF               [ 2]  468         ldw (x),y 
      000136 90 AE 40 02      [ 2]  469         ldw y,#APP_RUN 
      00013A EF 02            [ 2]  470         ldw (2,x),y 
      00013C CC 1D 82         [ 2]  471         jp EESTORE 
                                    472 
                                    473 ;; Reset dictionary pointer before 
                                    474 ;; forgotten word. RAM space and 
                                    475 ;; interrupt vector defined after 
                                    476 ;; must be resetted also.
      00013F 01 0F                  477         .word LINK 
                           000141   478         LINK=.
      000141 06                     479         .byte 6
      000142 46 4F 52 47 45 54      480         .ascii "FORGET" 
      000148                        481 FORGET: 
      000148 CD 11 63         [ 4]  482         call TOKEN
      00014B CD 05 8A         [ 4]  483         call DUPP 
      00014E CD 04 98         [ 4]  484         call QBRAN 
      000151 01 FD                  485         .word FORGET2
      000153 CD 12 60         [ 4]  486         call NAMEQ ; ( a -- ca na | a F )
      000156 CD 07 34         [ 4]  487         call QDUP 
      000159 CD 04 98         [ 4]  488         call QBRAN 
      00015C 01 FD                  489         .word FORGET2
                                    490 ; only forget users words 
      00015E CD 05 8A         [ 4]  491         call DUPP ; ( ca na na )
      000161 CD 04 65         [ 4]  492         call DOLIT 
      000164 24 00                  493         .word app_space 
      000166 CD 05 9A         [ 4]  494         call SWAPP 
      000169 CD 08 45         [ 4]  495         call  ULESS 
      00016C CD 04 98         [ 4]  496         call QBRAN 
      00016F 01 BF                  497         .word FORGET6 
                                    498 ; ( ca na -- )        
                                    499 ;reset ivec with address >= ca
      000171 CD 05 9A         [ 4]  500         call SWAPP ; ( na ca -- ) 
      000174 CD 1F 85         [ 4]  501         call CHKIVEC ; ( na -- ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    502 ; start at LAST and link back to na 
                                    503 ; if variable found reset VP at that point.
      000177                        504 FORGET1:
      000177 CD 06 F6         [ 4]  505         call LAST 
      00017A CD 04 E3         [ 4]  506         call AT 
      00017D CD 05 8A         [ 4]  507         call DUPP  ; ( -- na last last )
      000180 CD 02 13         [ 4]  508         call FREEVAR ; ( -- na last )
      000183 CD 05 8A         [ 4]  509         call DUPP 
      000186 CD 04 65         [ 4]  510         call DOLIT 
      000189 00 02                  511         .word 2 
      00018B CD 07 FE         [ 4]  512         call SUBB ; ( na last -- na last lfa ) link address 
      00018E CD 04 E3         [ 4]  513         call AT 
      000191 CD 05 8A         [ 4]  514         call DUPP ; ( -- na last a a )
      000194 CD 06 CA         [ 4]  515         call CNTXT 
      000197 CD 04 CC         [ 4]  516         call STORE
      00019A CD 06 F6         [ 4]  517         call LAST  
      00019D CD 04 CC         [ 4]  518         call STORE ; ( --  na last )
      0001A0 CD 05 B4         [ 4]  519         call OVER 
      0001A3 CD 08 26         [ 4]  520         call EQUAL ; ( na last na -- na T|F ) 
      0001A6 CD 04 98         [ 4]  521         call QBRAN 
      0001A9 01 77                  522         .word FORGET1 
                                    523 ; ( na -- )
      0001AB CD 04 65         [ 4]  524         call DOLIT 
      0001AE 00 02                  525         .word 2 
      0001B0 CD 07 FE         [ 4]  526         call SUBB 
      0001B3 CD 06 E6         [ 4]  527         call CPP 
      0001B6 CD 04 CC         [ 4]  528         call STORE  
      0001B9 CD 1B CC         [ 4]  529         call UPDATCP 
      0001BC CC 1B A3         [ 2]  530         jp UPDATLAST 
      0001BF                        531 FORGET6: ; tried to forget a RAM or system word 
                                    532 ; ( ca na -- )
      0001BF 1D 00 02         [ 2]  533         subw x,#CELLL 
      0001C2 90 BE 2A         [ 2]  534         ldw y,SP0 
      0001C5 FF               [ 2]  535         ldw (x),y  
      0001C6 CD 08 45         [ 4]  536         call ULESS
      0001C9 CD 04 98         [ 4]  537         call QBRAN 
      0001CC 01 EF                  538         .word PROTECTED 
      0001CE CD 13 6C         [ 4]  539         call ABORQ 
      0001D1 1D                     540         .byte 29
      0001D2 20 46 6F 72 20 52 41   541         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001EF                        542 PROTECTED:
      0001EF CD 13 6C         [ 4]  543         call ABORQ
      0001F2 0A                     544         .byte 10
      0001F3 20 50 72 6F 74 65 63   545         .ascii " Protected"
             74 65 64
      0001FD                        546 FORGET2: ; no name or not found in dictionary 
      0001FD CD 13 6C         [ 4]  547         call ABORQ
      000200 05                     548         .byte 5
      000201 20 77 68 61 74         549         .ascii " what"
      000206                        550 FORGET4:
      000206 CC 05 80         [ 2]  551         jp DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    552 
                                    553 
                                    554 ;---------------------------------
                                    555 ; if na is variable 
                                    556 ; free variable data  
                                    557 ; FREEVAR ( na -- )
                                    558 ;---------------------------------
      000209 01 41                  559         .word LINK 
                           00020B   560         LINK=.
      00020B 07                     561         .byte 7 
      00020C 46 52 45 45 56 41 52   562         .ascii "FREEVAR"
      000213                        563 FREEVAR:
      000213 CD 05 8A         [ 4]  564         call DUPP ; ( na na -- )
      000216 CD 05 01         [ 4]  565         CALL CAT  ; ( na c -- )
      000219 CD 0A 7F         [ 4]  566         call ONEP ;
      00021C CD 07 85         [ 4]  567         CALL PLUS ; ( na c+1 -- ca ) 
      00021F CD 0A 7F         [ 4]  568         call ONEP ; ( ca+ -- ) to get routne address 
      000222 CD 05 8A         [ 4]  569         call DUPP ; ( ca+ ca+ -- )
      000225 CD 04 E3         [ 4]  570         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000228 CD 04 65         [ 4]  571         call DOLIT 
      00022B 06 37                  572         .word DOVAR ; if routine address is DOVAR then variable 
      00022D CD 08 26         [ 4]  573         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000230 CD 04 98         [ 4]  574         call QBRAN 
      000233 02 49                  575         .word FREEVAR4 
      000235 CD 04 65         [ 4]  576         call DOLIT 
      000238 00 02                  577         .word 2 
      00023A CD 07 85         [ 4]  578         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00023D CD 04 E3         [ 4]  579         call AT 
      000240 CD 06 D8         [ 4]  580         call VPP   
      000243 CD 04 CC         [ 4]  581         call STORE 
      000246 CC 1B E3         [ 2]  582         jp UPDATVP 
      000249                        583 FREEVAR4: ; not variable
      000249 CC 05 80         [ 2]  584         jp  DROP 
                                    585 
                                    586 ;    SEED ( n -- )
                                    587 ; Initialize PRNG seed with n 
      00024C 02 0B                  588         .word LINK 
                           00024E   589         LINK=. 
      00024E 04                     590         .byte 4 
      00024F 53 45 45 44            591         .ascii "SEED" 
      000253                        592 SEED:
      000253 90 93            [ 1]  593         ldw y,x 
      000255 1C 00 02         [ 2]  594         addw x,#CELLL
      000258 90 FE            [ 2]  595         ldw y,(y)
      00025A 90 9E            [ 1]  596         ld a,yh 
      00025C B7 36            [ 1]  597         ld SEEDX,a 
      00025E 90 9F            [ 1]  598         ld a,yl 
      000260 B7 38            [ 1]  599         ld SEEDY,a 
      000262 81               [ 4]  600         ret 
                                    601 
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
      000263 02 4E                  604         .word LINK 
                           000265   605         LINK=.
      000265 06                     606         .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000266 52 41 4E 44 4F 4D      607         .ascii "RANDOM" 
      00026C                        608 RANDOM:
                                    609 ;local variable 
                           000001   610         SPSAVE=1
                           000002   611         VSIZE=2 
      00026C 52 02            [ 2]  612         sub sp,#VSIZE
      00026E 1F 01            [ 2]  613         ldw (SPSAVE,sp),x  
                                    614 ; XTEMP=(SEEDX<<5)^SEEDX 
      000270 90 93            [ 1]  615         ldw y,x 
      000272 90 FE            [ 2]  616         ldw y,(y)
      000274 90 BF 24         [ 2]  617         ldw YTEMP,y 
      000277 BE 36            [ 2]  618 	ldw x,SEEDX 
      000279 58               [ 2]  619 	sllw x 
      00027A 58               [ 2]  620 	sllw x 
      00027B 58               [ 2]  621 	sllw x 
      00027C 58               [ 2]  622 	sllw x 
      00027D 58               [ 2]  623 	sllw x 
      00027E 9E               [ 1]  624 	ld a,xh 
      00027F B8 36            [ 1]  625 	xor a,SEEDX 
      000281 B7 22            [ 1]  626 	ld XTEMP,a 
      000283 9F               [ 1]  627 	ld a,xl 
      000284 B8 37            [ 1]  628 	xor a,SEEDX+1 
      000286 B7 23            [ 1]  629 	ld XTEMP+1,a 
                                    630 ; SEEDX=SEEDY 
      000288 BE 38            [ 2]  631 	ldw x,SEEDY 
      00028A BF 36            [ 2]  632 	ldw SEEDX,x  
                                    633 ; SEEDY=SEEDY^(SEEDY>>1)
      00028C 54               [ 2]  634 	srlw x 
      00028D 9E               [ 1]  635 	ld a,xh 
      00028E B8 38            [ 1]  636 	xor a,SEEDY 
      000290 B7 38            [ 1]  637 	ld SEEDY,a  
      000292 9F               [ 1]  638 	ld a,xl 
      000293 B8 39            [ 1]  639 	xor a,SEEDY+1 
      000295 B7 39            [ 1]  640 	ld SEEDY+1,a 
                                    641 ; XTEMP>>3 
      000297 BE 22            [ 2]  642 	ldw x,XTEMP 
      000299 54               [ 2]  643 	srlw x 
      00029A 54               [ 2]  644 	srlw x 
      00029B 54               [ 2]  645 	srlw x 
                                    646 ; x=XTEMP^x 
      00029C 9E               [ 1]  647 	ld a,xh 
      00029D B8 22            [ 1]  648 	xor a,XTEMP 
      00029F 95               [ 1]  649 	ld xh,a 
      0002A0 9F               [ 1]  650 	ld a,xl 
      0002A1 B8 23            [ 1]  651 	xor a,XTEMP+1  
      0002A3 97               [ 1]  652 	ld xl,a 
                                    653 ; SEEDY=x^SEEDY 
      0002A4 B8 39            [ 1]  654 	xor a,SEEDY+1
      0002A6 97               [ 1]  655 	ld xl,a 
      0002A7 9E               [ 1]  656 	ld a,xh 
      0002A8 B8 38            [ 1]  657 	xor a,SEEDY
      0002AA 95               [ 1]  658 	ld xh,a 
      0002AB BF 38            [ 2]  659 	ldw SEEDY,x 
                                    660 ; return SEEDY modulo YTEMP  
      0002AD 90 BE 24         [ 2]  661 	ldw y,YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002B0 65               [ 2]  662 	divw x,y 
      0002B1 1E 01            [ 2]  663 	ldw x,(SPSAVE,sp)
      0002B3 FF               [ 2]  664         ldw (x),y 
      0002B4 5B 02            [ 2]  665         addw sp,#VSIZE 
      0002B6 81               [ 4]  666 	ret 
                                    667 
                                    668 
                                    669 ;;
                                    670 ;; get millisecond counter 
                                    671 ;; msec ( -- u )
                                    672 ;; Added by Picatout 2020-04-26
      0002B7 02 65                  673         .word LINK  
                           0002B9   674         LINK = . 
      0002B9 04                     675         .byte 4
      0002BA 4D 53 45 43            676         .ascii "MSEC"
      0002BE                        677 MSEC: 
      0002BE 1D 00 02         [ 2]  678         subw x,#CELLL 
      0002C1 90 BE 2E         [ 2]  679         ldw y,MS 
      0002C4 FF               [ 2]  680         ldw (x),y 
      0002C5 81               [ 4]  681         ret 
                                    682 
                                    683 ; suspend execution for u msec 
                                    684 ;  pause ( u -- )
      0002C6 02 B9                  685         .word LINK 
                           0002C8   686         LINK=.
      0002C8 05                     687         .byte 5 
      0002C9 50 41 55 53 45         688         .ascii "PAUSE"
      0002CE                        689 PAUSE:
      0002CE 90 93            [ 1]  690         ldw y,x
      0002D0 90 FE            [ 2]  691         ldw y,(y)
      0002D2 72 B9 00 2E      [ 2]  692         addw y,MS 
      0002D6 8F               [10]  693 1$:     wfi  
      0002D7 90 B3 2E         [ 2]  694         cpw y,MS  
      0002DA 26 FA            [ 1]  695         jrne 1$        
      0002DC 1C 00 02         [ 2]  696         addw x,#CELLL 
      0002DF 81               [ 4]  697         ret 
                                    698 
                                    699 ; initialize count down timer 
                                    700 ;  TIMER ( u -- )  milliseconds 
      0002E0 02 C8                  701         .word LINK 
                           0002E2   702         LINK=.
      0002E2 05                     703         .byte 5 
      0002E3 54 49 4D 45 52         704         .ascii "TIMER" 
      0002E8                        705 TIMER:
      0002E8 90 93            [ 1]  706         ldw y,x
      0002EA 90 FE            [ 2]  707         ldw y,(y) 
      0002EC 90 BF 30         [ 2]  708         ldw CNTDWN,y
      0002EF 1C 00 02         [ 2]  709         addw x,#CELLL 
      0002F2 81               [ 4]  710         ret 
                                    711 
                                    712 ; check for TIMER exiparition 
                                    713 ;  TIMEOUT? ( -- 0|-1 )
      0002F3 02 E2                  714         .word LINK 
                           0002F5   715         LINK=. 
      0002F5 08                     716         .byte 8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002F6 54 49 4D 45 4F 55 54   717         .ascii "TIMEOUT?"
             3F
      0002FE                        718 TIMEOUTQ: 
      0002FE 4F               [ 1]  719         clr a
      0002FF 1D 00 02         [ 2]  720         subw x,#CELLL 
      000302 90 BE 30         [ 2]  721         ldw y,CNTDWN 
      000305 26 01            [ 1]  722         jrne 1$ 
      000307 43               [ 1]  723         cpl a 
      000308 E7 01            [ 1]  724 1$:     ld (1,x),a 
      00030A F7               [ 1]  725         ld (x),a 
      00030B 81               [ 4]  726         ret         
                                    727 
                                    728 ; reboot MCU 
                                    729 ; REBOOT ( -- )
      00030C 02 F5                  730         .word LINK 
                           00030E   731         LINK=. 
      00030E 06                     732         .byte 6 
      00030F 52 45 42 4F 4F 54      733         .ascii "REBOOT"
      000315                        734 reboot:
      000315 CC 00 00         [ 2]  735         jp NonHandledInterrupt
                                    736 
                                    737 ; compile to flash memory 
                                    738 ; TO-FLASH ( -- )
      000318 03 0E                  739         .word LINK 
                           00031A   740         LINK=.
      00031A 08                     741         .byte 8
      00031B 54 4F 2D 46 4C 41 53   742         .ascii "TO-FLASH"
             48
      000323                        743 TOFLASH:
      000323 CD 07 09         [ 4]  744         call RAMLAST 
      000326 CD 04 E3         [ 4]  745         call AT 
      000329 CD 07 34         [ 4]  746         call QDUP 
      00032C CD 04 98         [ 4]  747         call QBRAN
      00032F 03 52                  748         .word 1$
      000331 CD 13 6C         [ 4]  749         call ABORQ 
      000334 1D                     750         .byte 29
      000335 20 4E 6F 74 20 77 68   751         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000352 90 AE FF FF      [ 2]  752 1$:     ldw y,#-1 
      000356 90 BF 1E         [ 2]  753         ldw UTFLASH,y
      000359 81               [ 4]  754         ret 
                                    755 
                                    756 ; compile to RAM 
                                    757 ; TO-RAM ( -- )
      00035A 03 1A                  758         .word LINK 
                           00035C   759         LINK=.
      00035C 06                     760         .byte 6 
      00035D 54 4F 2D 52 41 4D      761         .ascii "TO-RAM"
      000363                        762 TORAM:
      000363 90 5F            [ 1]  763         clrw y 
      000365 90 BF 1E         [ 2]  764         ldw UTFLASH,y 
      000368 81               [ 4]  765         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    766 
                                    767 ;; BAUD RATE constants table
                                    768 ; values to put in BRR1 & BRR2 
      000369                        769 baudrate: 
      000369 A0 1B                  770 	.byte 0xa0,0x1b ; 2400
      00036B D0 05                  771 	.byte 0xd0,0x5  ; 4800 
      00036D 68 03                  772 	.byte 0x68,0x3  ; 9600
      00036F 34 01                  773 	.byte 0x34,0x1  ; 19200
      000371 11 06                  774 	.byte 0x11,0x6  ; 57600
      000373 08 0B                  775 	.byte 0x8,0xb   ; 115200
                                    776 
                                    777 ; BAUD RATE CONSTANTS names 
                                    778 ; 2400 baud
      000375 03 5C                  779 	.word LINK
                           000377   780 LINK	= .
      000377 04                     781 	.byte 4
      000378 42 32 4B 34            782 	.ascii "B2K4" 
      00037C                        783 B2K4:
      00037C 1D 00 02         [ 2]  784 	subw x,#CELLL 
      00037F 90 5F            [ 1]  785         clrw y
      000381 FF               [ 2]  786         ldw (x),y
      000382 81               [ 4]  787 	ret
                                    788 ; 4800 baud	
      000383 03 77                  789 	.word LINK
                           000385   790 LINK	= .
      000385 04                     791 	.byte 4
      000386 42 34 4B 38            792 	.ascii "B4K8" 
      00038A                        793 B4K8:
      00038A 1D 00 02         [ 2]  794         subw x,#CELLL 
      00038D 90 AE 00 02      [ 2]  795         ldw y,#2 
      000391 FF               [ 2]  796         ldw (x),y
      000392 81               [ 4]  797         ret 
                                    798 ; 9600 baud
      000393 03 85                  799 	.word LINK
                           000395   800 LINK	= .
      000395 04                     801 	.byte 4
      000396 42 39 4B 36            802 	.ascii "B9K6" 
      00039A                        803 B9K6:
      00039A 1D 00 02         [ 2]  804         subw x,#CELLL 
      00039D 90 AE 00 04      [ 2]  805         ldw y,#4 
      0003A1 FF               [ 2]  806         ldw (x),y 
      0003A2 81               [ 4]  807         ret 
                                    808 ; 19200 baud
      0003A3 03 95                  809 	.word LINK
                           0003A5   810 LINK	= .
      0003A5 05                     811 	.byte 5
      0003A6 42 31 39 4B 32         812 	.ascii "B19K2" 
      0003AB                        813 B19K2:
      0003AB 1D 00 02         [ 2]  814         subw x,#CELLL
      0003AE 90 AE 00 06      [ 2]  815         ldw y,#6 
      0003B2 FF               [ 2]  816         ldw (x),y 
      0003B3 81               [ 4]  817         ret 
                                    818 ; 57600 baud        
      0003B4 03 A5                  819 	.word LINK
                           0003B6   820 LINK	= .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003B6 05                     821 	.byte 5
      0003B7 42 35 37 4B 36         822 	.ascii "B57K6" 
      0003BC                        823 B57K6:
      0003BC 1D 00 02         [ 2]  824         subw x,#CELLL 
      0003BF 90 AE 00 08      [ 2]  825         ldw y,#8 
      0003C3 FF               [ 2]  826         ldw (x),y 
      0003C4 81               [ 4]  827         ret 
                                    828 ; 115200 baud 
      0003C5 03 B6                  829 	.word LINK
                           0003C7   830 LINK	= .
      0003C7 06                     831 	.byte 6
      0003C8 42 31 31 35 4B 32      832 	.ascii "B115K2" 
      0003CE                        833 B115K2:
      0003CE 1D 00 02         [ 2]  834 	subw x,#CELLL 
      0003D1 90 AE 00 0A      [ 2]  835         ldw y,#10 
      0003D5 FF               [ 2]  836         ldw (x),y 
      0003D6 81               [ 4]  837         ret 
                                    838 	
                                    839        
                                    840 ;; set UART2 BAUD rate
                                    841 ;	BAUD ( u -- )
      0003D7 03 C7                  842 	.word LINK 
                           0003D9   843 LINK	= .
      0003D9 04                     844 	.byte 4
      0003DA 42 41 55 44            845 	.ascii "BAUD" 
      0003DE                        846 BAUD:
      0003DE 1D 00 02         [ 2]  847 	subw x,#CELLL
      0003E1 90 AE 03 69      [ 2]  848         ldw y,#baudrate 
      0003E5 FF               [ 2]  849         ldw (x),y 
      0003E6 CD 07 85         [ 4]  850         call PLUS
      0003E9 90 93            [ 1]  851         ldw y,x  
      0003EB 90 FE            [ 2]  852         ldw y,(y)
      0003ED 90 F6            [ 1]  853         ld a,(y)
      0003EF 88               [ 1]  854         push a 
      0003F0 90 5C            [ 1]  855         incw y 
      0003F2 90 F6            [ 1]  856         ld a,(y)
      0003F4 C7 52 43         [ 1]  857         ld UART2_BRR2,a 
      0003F7 84               [ 1]  858         pop a
      0003F8 C7 52 42         [ 1]  859         ld UART2_BRR1,a 
      0003FB 1C 00 02         [ 2]  860         addw x,#CELLL 
      0003FE 81               [ 4]  861         ret 
                                    862 
                                    863 ;; Device dependent I/O
                                    864 ;       ?RX     ( -- c T | F )
                                    865 ;         Return input byte and true, or false.
      0003FF 03 D9                  866         .word      LINK 
                           000401   867 LINK	= .
      000401 04                     868         .byte      4
      000402 3F 4B 45 59            869         .ascii     "?KEY"
      000406                        870 QKEY:
      000406 90 5F            [ 1]  871         CLRW Y 
      000408 72 0B 52 40 0B   [ 2]  872         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00040D C6 52 41         [ 1]  873         LD    A,UART_DR   ;get char in A
      000410 1D 00 02         [ 2]  874 	SUBW	X,#2
      000413 E7 01            [ 1]  875         LD     (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000415 7F               [ 1]  876 	CLR	(X)
      000416 90 53            [ 2]  877         CPLW     Y
      000418                        878 INCH:
      000418 1D 00 02         [ 2]  879 		SUBW	X,#2
      00041B FF               [ 2]  880         LDW     (X),Y
      00041C 81               [ 4]  881         RET
                                    882 
                                    883 ;       TX!     ( c -- )
                                    884 ;       Send character c to  output device.
      00041D 04 01                  885         .word      LINK
                           00041F   886 LINK	= .
      00041F 04                     887         .byte      4
      000420 45 4D 49 54            888         .ascii     "EMIT"
      000424                        889 EMIT:
      000424 E6 01            [ 1]  890         LD     A,(1,X)
      000426 1C 00 02         [ 2]  891 	ADDW	X,#2
      000429 72 0F 52 40 FB   [ 2]  892 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      00042E C7 52 41         [ 1]  893         LD    UART_DR,A   ;send A
      000431 81               [ 4]  894         RET
                                    895 
                                    896 ;       FC-XON  ( -- )
                                    897 ;       send XON character 
      000432 04 1F                  898         .word LINK
                           000434   899 LINK    = .
      000434 06                     900         .byte 6 
      000435 46 43 2D 58 4F 4E      901         .ascii "FC-XON"
      00043B                        902 FC_XON:
      00043B 1D 00 02         [ 2]  903         subw x,#CELLL 
      00043E 7F               [ 1]  904         clr (x)
      00043F A6 11            [ 1]  905         ld a,#XON 
      000441 E7 01            [ 1]  906         ld (1,x),a 
      000443 CD 04 24         [ 4]  907         call EMIT 
      000446 81               [ 4]  908         ret 
                                    909 
                                    910 ;       FC-XOFF ( -- )
                                    911 ;       Send XOFF character 
      000447 04 34                  912         .word LINK
                           000449   913 LINK    = .
      000449 07                     914         .byte 7
      00044A 46 43 2D 58 4F 46 46   915         .ascii "FC-XOFF"
      000451                        916 FC_XOFF:
      000451 1D 00 02         [ 2]  917         subw x,#CELLL 
      000454 7F               [ 1]  918         clr (x)
      000455 A6 13            [ 1]  919         ld a,#XOFF 
      000457 E7 01            [ 1]  920         ld (1,x),a 
      000459 CD 04 24         [ 4]  921         call EMIT 
      00045C 81               [ 4]  922         ret
                                    923 
                                    924 ;; The kernel
                                    925 
                                    926 ;       doLIT   ( -- w )
                                    927 ;       Push an inline literal.
      00045D 04 49                  928         .word      LINK
                           00045F   929 LINK	= 	.
      00045F 45                     930 	.byte      COMPO+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000460 44 4F 4C 49 54         931         .ascii     "DOLIT"
      000465                        932 DOLIT:
      000465 1D 00 02         [ 2]  933 	SUBW X,#2
      000468 16 01            [ 2]  934         ldw y,(1,sp)
      00046A 90 FE            [ 2]  935         ldw y,(y)
      00046C FF               [ 2]  936         ldw (x),y
      00046D 90 85            [ 2]  937         popw y 
      00046F 90 EC 02         [ 2]  938         jp (2,y)
                                    939 
                                    940 ;       next    ( -- )
                                    941 ;       Code for  single index loop.
      000472 04 5F                  942         .word      LINK
                           000474   943 LINK	= 	.
      000474 44                     944 	.byte      COMPO+4
      000475 6E 65 78 74            945         .ascii     "next"
      000479                        946 DONXT:
      000479 16 03            [ 2]  947 	LDW Y,(3,SP)
      00047B 90 5A            [ 2]  948 	DECW Y
      00047D 2A 07            [ 1]  949 	JRPL NEX1 ; jump if N=0
      00047F 90 85            [ 2]  950 	POPW Y
      000481 5B 02            [ 2]  951         addw sp,#2
      000483 90 EC 02         [ 2]  952         JP (2,Y)
      000486                        953 NEX1:
      000486 17 03            [ 2]  954         LDW (3,SP),Y
      000488 90 85            [ 2]  955         POPW Y
      00048A 90 FE            [ 2]  956 	LDW Y,(Y)
      00048C 90 FC            [ 2]  957 	JP (Y)
                                    958 
                                    959 ;       ?branch ( f -- )
                                    960 ;       Branch if flag is zero.
      00048E 04 74                  961         .word      LINK
                           000490   962 LINK	= 	.
      000490 47                     963 	.byte      COMPO+7
      000491 3F 42 52 41 4E 43 48   964         .ascii     "?BRANCH"
      000498                        965 QBRAN:	
      000498 90 93            [ 1]  966         LDW Y,X
      00049A 1C 00 02         [ 2]  967 	ADDW X,#2
      00049D 90 FE            [ 2]  968 	LDW Y,(Y)
      00049F 27 0E            [ 1]  969         JREQ     BRAN
      0004A1 90 85            [ 2]  970 	POPW Y
      0004A3 90 EC 02         [ 2]  971 	JP (2,Y)
                                    972         
                                    973 ;       branch  ( -- )
                                    974 ;       Branch to an inline address.
      0004A6 04 90                  975         .word      LINK
                           0004A8   976 LINK	= 	.
      0004A8 46                     977 	.byte      COMPO+6
      0004A9 42 52 41 4E 43 48      978         .ascii     "BRANCH"
      0004AF                        979 BRAN:
      0004AF 90 85            [ 2]  980         POPW Y
      0004B1 90 FE            [ 2]  981 	LDW Y,(Y)
      0004B3 90 FC            [ 2]  982         JP     (Y)
                                    983 
                                    984 ;       EXECUTE ( ca -- )
                                    985 ;       Execute  word at ca.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004B5 04 A8                  986         .word      LINK
                           0004B7   987 LINK	= 	.
      0004B7 07                     988         .byte       7
      0004B8 45 58 45 43 55 54 45   989         .ascii     "EXECUTE"
      0004BF                        990 EXECU:
      0004BF 90 93            [ 1]  991         LDW Y,X
      0004C1 1C 00 02         [ 2]  992 	ADDW X,#2
      0004C4 90 FE            [ 2]  993 	LDW  Y,(Y)
      0004C6 90 FC            [ 2]  994         JP   (Y)
                                    995 
                           000001   996 OPTIMIZE = 1
                           000001   997 .if OPTIMIZE 
                                    998 ; remplacement de CALL EXIT par 
                                    999 ; le opcode de RET.
                                   1000 ; Voir modification au code de ";"
                           000000  1001 .else 
                                   1002 ;       EXIT    ( -- )
                                   1003 ;       Terminate a colon definition.
                                   1004         .word      LINK
                                   1005 LINK = .
                                   1006         .byte      4
                                   1007         .ascii     "EXIT"
                                   1008 EXIT:
                                   1009         POPW Y
                                   1010         RET
                                   1011 .endif 
                                   1012 
                                   1013 ;       !       ( w a -- )
                                   1014 ;       Pop  data stack to memory.
      0004C8 04 B7                 1015         .word      LINK
                           0004CA  1016 LINK = .
      0004CA 01                    1017         .byte      1
      0004CB 21                    1018         .ascii     "!"
      0004CC                       1019 STORE:
      0004CC 90 93            [ 1] 1020         LDW Y,X
      0004CE 90 FE            [ 2] 1021         LDW Y,(Y)    ;Y=a
      0004D0 90 BF 24         [ 2] 1022         LDW YTEMP,Y
      0004D3 90 93            [ 1] 1023         LDW Y,X
      0004D5 90 EE 02         [ 2] 1024         LDW Y,(2,Y)
      0004D8 91 CF 24         [ 5] 1025         LDW [YTEMP],Y ;store w at a
      0004DB 1C 00 04         [ 2] 1026         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;       @       ( a -- w )
                                   1030 ;       Push memory location to stack.
      0004DF 04 CA                 1031         .word      LINK
                           0004E1  1032 LINK	= 	.
      0004E1 01                    1033         .byte    1
      0004E2 40                    1034         .ascii	"@"
      0004E3                       1035 AT:
      0004E3 90 93            [ 1] 1036         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1037         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1038         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1039         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1040         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1041 
                                   1042 ;       C!      ( c b -- )
                                   1043 ;       Pop  data stack to byte memory.
      0004EB 04 E1                 1044         .word      LINK
                           0004ED  1045 LINK	= .
      0004ED 02                    1046         .byte      2
      0004EE 43 21                 1047         .ascii     "C!"
      0004F0                       1048 CSTOR:
      0004F0 90 93            [ 1] 1049         LDW Y,X
      0004F2 90 FE            [ 2] 1050 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1051         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1052         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1053 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1054         RET     
                                   1055 
                                   1056 ;       C@      ( b -- c )
                                   1057 ;       Push byte in memory to  stack.
      0004FC 04 ED                 1058         .word      LINK
                           0004FE  1059 LINK	= 	.
      0004FE 02                    1060         .byte      2
      0004FF 43 40                 1061         .ascii     "C@"
      000501                       1062 CAT:
      000501 90 93            [ 1] 1063         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1064         LDW Y,(Y)
      000505 90 F6            [ 1] 1065         LD A,(Y)
      000507 E7 01            [ 1] 1066         LD (1,X),A
      000509 7F               [ 1] 1067         CLR (X)
      00050A 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;       RP@     ( -- a )
                                   1071 ;       Push current RP to data stack.
      00050B 04 FE                 1072         .word      LINK
                           00050D  1073 LINK	= .
      00050D 03                    1074         .byte      3
      00050E 52 50 40              1075         .ascii     "RP@"
      000511                       1076 RPAT:
      000511 90 96            [ 1] 1077         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1078         SUBW X,#2
      000516 FF               [ 2] 1079         LDW (X),Y
      000517 81               [ 4] 1080         RET     
                                   1081 
                                   1082 ;       RP!     ( a -- )
                                   1083 ;       Set  return stack pointer.
      000518 05 0D                 1084         .word      LINK
                           00051A  1085 LINK	= 	. 
      00051A 43                    1086 	.byte      COMPO+3
      00051B 52 50 21              1087         .ascii     "RP!"
      00051E                       1088 RPSTO:
      00051E 90 85            [ 2] 1089         POPW Y
      000520 90 BF 24         [ 2] 1090         LDW YTEMP,Y
      000523 90 93            [ 1] 1091         LDW Y,X
      000525 90 FE            [ 2] 1092         LDW Y,(Y)
      000527 90 94            [ 1] 1093         LDW SP,Y
      000529 1C 00 02         [ 2] 1094         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 24         [ 5] 1095         JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1096 
                                   1097 ;       R>      ( -- w )
                                   1098 ;       Pop return stack to data stack.
      00052F 05 1A                 1099         .word      LINK
                           000531  1100 LINK	= 	. 
      000531 42                    1101 	.byte      COMPO+2
      000532 52 3E                 1102         .ascii     "R>"
      000534                       1103 RFROM:
      000534 90 85            [ 2] 1104         POPW Y    ;save return addr
      000536 90 BF 24         [ 2] 1105         LDW YTEMP,Y
      000539 90 85            [ 2] 1106         POPW Y
      00053B 1D 00 02         [ 2] 1107         SUBW X,#2
      00053E FF               [ 2] 1108         LDW (X),Y
      00053F 92 CC 24         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;       R@      ( -- w )
                                   1112 ;       Copy top of return stack to stack.
      000542 05 31                 1113         .word      LINK
                           000544  1114 LINK	= 	. 
      000544 02                    1115         .byte      2
      000545 52 40                 1116         .ascii     "R@"
      000547                       1117 RAT:
      000547 16 03            [ 2] 1118         ldw y,(3,sp)
      000549 1D 00 02         [ 2] 1119         subw x,#CELLL 
      00054C FF               [ 2] 1120         ldw (x),y 
      00054D 81               [ 4] 1121         ret 
                                   1122 
                                   1123 ;       >R      ( w -- )
                                   1124 ;       Push data stack to return stack.
      00054E 05 44                 1125         .word      LINK
                           000550  1126 LINK	= 	. 
      000550 42                    1127 	.byte      COMPO+2
      000551 3E 52                 1128         .ascii     ">R"
      000553                       1129 TOR:
      000553 90 85            [ 2] 1130         POPW Y    ;save return addr
      000555 90 BF 24         [ 2] 1131         LDW YTEMP,Y
      000558 90 93            [ 1] 1132         LDW Y,X
      00055A 90 FE            [ 2] 1133         LDW Y,(Y)
      00055C 90 89            [ 2] 1134         PUSHW Y    ;restore return addr
      00055E 1C 00 02         [ 2] 1135         ADDW X,#2
      000561 92 CC 24         [ 5] 1136         JP [YTEMP]
                                   1137 
                                   1138 ;       SP@     ( -- a )
                                   1139 ;       Push current stack pointer.
      000564 05 50                 1140         .word      LINK
                           000566  1141 LINK	= 	. 
      000566 03                    1142         .byte      3
      000567 53 50 40              1143         .ascii     "SP@"
      00056A                       1144 SPAT:
      00056A 90 93            [ 1] 1145 	LDW Y,X
      00056C 1D 00 02         [ 2] 1146         SUBW X,#2
      00056F FF               [ 2] 1147 	LDW (X),Y
      000570 81               [ 4] 1148         RET     
                                   1149 
                                   1150 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1151 ;       Set  data stack pointer.
      000571 05 66                 1152         .word      LINK
                           000573  1153 LINK	= 	. 
      000573 03                    1154         .byte      3
      000574 53 50 21              1155         .ascii     "SP!"
      000577                       1156 SPSTO:
      000577 FE               [ 2] 1157         LDW     X,(X)     ;X = a
      000578 81               [ 4] 1158         RET     
                                   1159 
                                   1160 ;       DROP    ( w -- )
                                   1161 ;       Discard top stack item.
      000579 05 73                 1162         .word      LINK
                           00057B  1163 LINK	= 	. 
      00057B 04                    1164         .byte      4
      00057C 44 52 4F 50           1165         .ascii     "DROP"
      000580                       1166 DROP:
      000580 1C 00 02         [ 2] 1167         ADDW X,#2     
      000583 81               [ 4] 1168         RET     
                                   1169 
                                   1170 ;       DUP     ( w -- w w )
                                   1171 ;       Duplicate  top stack item.
      000584 05 7B                 1172         .word      LINK
                           000586  1173 LINK	= 	. 
      000586 03                    1174         .byte      3
      000587 44 55 50              1175         .ascii     "DUP"
      00058A                       1176 DUPP:
      00058A 90 93            [ 1] 1177 	LDW Y,X
      00058C 1D 00 02         [ 2] 1178         SUBW X,#2
      00058F 90 FE            [ 2] 1179 	LDW Y,(Y)
      000591 FF               [ 2] 1180 	LDW (X),Y
      000592 81               [ 4] 1181         RET     
                                   1182 
                                   1183 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1184 ;       Exchange top two stack items.
      000593 05 86                 1185         .word      LINK
                           000595  1186 LINK	= 	. 
      000595 04                    1187         .byte      4
      000596 53 57 41 50           1188         .ascii     "SWAP"
      00059A                       1189 SWAPP:
      00059A 90 93            [ 1] 1190         LDW Y,X
      00059C 90 FE            [ 2] 1191         LDW Y,(Y)
      00059E 90 BF 24         [ 2] 1192         LDW YTEMP,Y
      0005A1 90 93            [ 1] 1193         LDW Y,X
      0005A3 90 EE 02         [ 2] 1194         LDW Y,(2,Y)
      0005A6 FF               [ 2] 1195         LDW (X),Y
      0005A7 90 BE 24         [ 2] 1196         LDW Y,YTEMP
      0005AA EF 02            [ 2] 1197         LDW (2,X),Y
      0005AC 81               [ 4] 1198         RET     
                                   1199 
                                   1200 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1201 ;       Copy second stack item to top.
      0005AD 05 95                 1202         .word      LINK
                           0005AF  1203 LINK	= . 
      0005AF 04                    1204         .byte      4
      0005B0 4F 56 45 52           1205         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005B4                       1206 OVER:
      0005B4 1D 00 02         [ 2] 1207         SUBW X,#2
      0005B7 90 93            [ 1] 1208         LDW Y,X
      0005B9 90 EE 04         [ 2] 1209         LDW Y,(4,Y)
      0005BC FF               [ 2] 1210         LDW (X),Y
      0005BD 81               [ 4] 1211         RET     
                                   1212 
                                   1213 ;       0<      ( n -- t )
                                   1214 ;       Return true if n is negative.
      0005BE 05 AF                 1215         .word      LINK
                           0005C0  1216 LINK	= . 
      0005C0 02                    1217         .byte      2
      0005C1 30 3C                 1218         .ascii     "0<"
      0005C3                       1219 ZLESS:
      0005C3 A6 FF            [ 1] 1220         LD A,#0xFF
      0005C5 90 93            [ 1] 1221         LDW Y,X
      0005C7 90 FE            [ 2] 1222         LDW Y,(Y)
      0005C9 2B 01            [ 1] 1223         JRMI     ZL1
      0005CB 4F               [ 1] 1224         CLR A   ;false
      0005CC F7               [ 1] 1225 ZL1:    LD     (X),A
      0005CD E7 01            [ 1] 1226         LD (1,X),A
      0005CF 81               [ 4] 1227 	RET     
                                   1228 
                                   1229 ;       AND     ( w w -- w )
                                   1230 ;       Bitwise AND.
      0005D0 05 C0                 1231         .word      LINK
                           0005D2  1232 LINK	= . 
      0005D2 03                    1233         .byte      3
      0005D3 41 4E 44              1234         .ascii     "AND"
      0005D6                       1235 ANDD:
      0005D6 F6               [ 1] 1236         LD  A,(X)    ;D=w
      0005D7 E4 02            [ 1] 1237         AND A,(2,X)
      0005D9 E7 02            [ 1] 1238         LD (2,X),A
      0005DB E6 01            [ 1] 1239         LD A,(1,X)
      0005DD E4 03            [ 1] 1240         AND A,(3,X)
      0005DF E7 03            [ 1] 1241         LD (3,X),A
      0005E1 1C 00 02         [ 2] 1242         ADDW X,#2
      0005E4 81               [ 4] 1243         RET
                                   1244 
                                   1245 ;       OR      ( w w -- w )
                                   1246 ;       Bitwise inclusive OR.
      0005E5 05 D2                 1247         .word      LINK
                           0005E7  1248 LINK = . 
      0005E7 02                    1249         .byte      2
      0005E8 4F 52                 1250         .ascii     "OR"
      0005EA                       1251 ORR:
      0005EA F6               [ 1] 1252         LD A,(X)    ;D=w
      0005EB EA 02            [ 1] 1253         OR A,(2,X)
      0005ED E7 02            [ 1] 1254         LD (2,X),A
      0005EF E6 01            [ 1] 1255         LD A,(1,X)
      0005F1 EA 03            [ 1] 1256         OR A,(3,X)
      0005F3 E7 03            [ 1] 1257         LD (3,X),A
      0005F5 1C 00 02         [ 2] 1258         ADDW X,#2
      0005F8 81               [ 4] 1259         RET
                                   1260 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1261 ;       XOR     ( w w -- w )
                                   1262 ;       Bitwise exclusive OR.
      0005F9 05 E7                 1263         .word      LINK
                           0005FB  1264 LINK	= . 
      0005FB 03                    1265         .byte      3
      0005FC 58 4F 52              1266         .ascii     "XOR"
      0005FF                       1267 XORR:
      0005FF F6               [ 1] 1268         LD A,(X)    ;D=w
      000600 E8 02            [ 1] 1269         XOR A,(2,X)
      000602 E7 02            [ 1] 1270         LD (2,X),A
      000604 E6 01            [ 1] 1271         LD A,(1,X)
      000606 E8 03            [ 1] 1272         XOR A,(3,X)
      000608 E7 03            [ 1] 1273         LD (3,X),A
      00060A 1C 00 02         [ 2] 1274         ADDW X,#2
      00060D 81               [ 4] 1275         RET
                                   1276 
                                   1277 ;       UM+     ( u u -- udsum )
                                   1278 ;       Add two unsigned single
                                   1279 ;       and return a double sum.
      00060E 05 FB                 1280         .word      LINK
                           000610  1281 LINK	= . 
      000610 03                    1282         .byte      3
      000611 55 4D 2B              1283         .ascii     "UM+"
      000614                       1284 UPLUS:
      000614 A6 01            [ 1] 1285         LD A,#1
      000616 90 93            [ 1] 1286         LDW Y,X
      000618 90 EE 02         [ 2] 1287         LDW Y,(2,Y)
      00061B 90 BF 24         [ 2] 1288         LDW YTEMP,Y
      00061E 90 93            [ 1] 1289         LDW Y,X
      000620 90 FE            [ 2] 1290         LDW Y,(Y)
      000622 72 B9 00 24      [ 2] 1291         ADDW Y,YTEMP
      000626 EF 02            [ 2] 1292         LDW (2,X),Y
      000628 25 01            [ 1] 1293         JRC     UPL1
      00062A 4F               [ 1] 1294         CLR A
      00062B E7 01            [ 1] 1295 UPL1:   LD     (1,X),A
      00062D 7F               [ 1] 1296         CLR (X)
      00062E 81               [ 4] 1297         RET
                                   1298 
                                   1299 ;; System and user variables
                                   1300 
                                   1301 ;       doVAR   ( -- a )
                                   1302 ;       Code for VARIABLE and CREATE.
      00062F 06 10                 1303         .word      LINK
                           000631  1304 LINK	= . 
      000631 45                    1305 	.byte      COMPO+5
      000632 44 4F 56 41 52        1306         .ascii     "DOVAR"
      000637                       1307 DOVAR:
      000637 1D 00 02         [ 2] 1308 	SUBW X,#2
      00063A 90 85            [ 2] 1309         POPW Y    ;get return addr (pfa)
      00063C 90 FE            [ 2] 1310         LDW Y,(Y) ; indirect address 
      00063E FF               [ 2] 1311         LDW (X),Y    ;push on stack
      00063F 81               [ 4] 1312         RET     ;go to RET of EXEC
                                   1313 
                                   1314 ;       BASE    ( -- a )
                                   1315 ;       Radix base for numeric I/O.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000640 06 31                 1316         .word      LINK        
                           000642  1317 LINK = . 
      000642 04                    1318         .byte      4
      000643 42 41 53 45           1319         .ascii     "BASE"
      000647                       1320 BASE:
      000647 90 AE 00 06      [ 2] 1321 	LDW Y,#UBASE 
      00064B 1D 00 02         [ 2] 1322 	SUBW X,#2
      00064E FF               [ 2] 1323         LDW (X),Y
      00064F 81               [ 4] 1324         RET
                                   1325 
                                   1326 ;       tmp     ( -- a )
                                   1327 ;       A temporary storage.
      000650 06 42                 1328         .word      LINK
                                   1329         
                           000652  1330 LINK = . 
      000652 03                    1331 	.byte      3
      000653 54 4D 50              1332         .ascii     "TMP"
      000656                       1333 TEMP:
      000656 90 AE 00 08      [ 2] 1334 	LDW Y,#UTMP
      00065A 1D 00 02         [ 2] 1335 	SUBW X,#2
      00065D FF               [ 2] 1336         LDW (X),Y
      00065E 81               [ 4] 1337         RET
                                   1338 
                                   1339 ;       >IN     ( -- a )
                                   1340 ;        Hold parsing pointer.
      00065F 06 52                 1341         .word      LINK
                           000661  1342 LINK = . 
      000661 03                    1343         .byte      3
      000662 3E 49 4E              1344         .ascii    ">IN"
      000665                       1345 INN:
      000665 90 AE 00 0A      [ 2] 1346 	LDW Y,#UINN 
      000669 1D 00 02         [ 2] 1347 	SUBW X,#2
      00066C FF               [ 2] 1348         LDW (X),Y
      00066D 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;       #TIB    ( -- a )
                                   1352 ;       Count in terminal input buffer.
      00066E 06 61                 1353         .word      LINK
                           000670  1354 LINK = . 
      000670 04                    1355         .byte      4
      000671 23 54 49 42           1356         .ascii     "#TIB"
      000675                       1357 NTIB:
      000675 90 AE 00 0C      [ 2] 1358 	LDW Y,#UCTIB 
      000679 1D 00 02         [ 2] 1359 	SUBW X,#2
      00067C FF               [ 2] 1360         LDW (X),Y
      00067D 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;       TBUF ( -- a )
                                   1364 ;       address of 128 bytes transaction buffer 
      00067E 06 70                 1365         .word LINK 
                           000680  1366         LINK=.
      000680 04                    1367         .byte 4 
      000681 54 42 55 46           1368         .ascii "TBUF"
      000685                       1369 TBUF:
      000685 90 AE 06 80      [ 2] 1370         ldw y,#ROWBUFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000689 1D 00 02         [ 2] 1371         subw x,#CELLL
      00068C FF               [ 2] 1372         ldw (x),y 
      00068D 81               [ 4] 1373         ret 
                                   1374 
                                   1375 ; systeme variable 
                                   1376 ; compilation destination 
                                   1377 ; TFLASH ( -- A )
      00068E 06 80                 1378         .word LINK 
                           000690  1379         LINK=.
      000690 06                    1380         .byte 6 
      000691 54 46 4C 41 53 48     1381         .ascii "TFLASH"         
      000697                       1382 TFLASH:
      000697 1D 00 02         [ 2] 1383         subw x,#CELLL 
      00069A 90 AE 00 1E      [ 2] 1384         ldw y,#UTFLASH
      00069E FF               [ 2] 1385         ldw (x),y 
      00069F 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ;       "EVAL   ( -- a )
                                   1389 ;       Execution vector of EVAL.
      0006A0 06 90                 1390         .word      LINK
                           0006A2  1391 LINK = . 
      0006A2 05                    1392         .byte      5
      0006A3 27 45 56 41 4C        1393         .ascii     "'EVAL"
      0006A8                       1394 TEVAL:
      0006A8 90 AE 00 10      [ 2] 1395 	LDW Y,#UINTER 
      0006AC 1D 00 02         [ 2] 1396 	SUBW X,#2
      0006AF FF               [ 2] 1397         LDW (X),Y
      0006B0 81               [ 4] 1398         RET
                                   1399 
                                   1400 ;       HLD     ( -- a )
                                   1401 ;       Hold a pointer of output string.
      0006B1 06 A2                 1402         .word      LINK
                           0006B3  1403 LINK = . 
      0006B3 03                    1404         .byte      3
      0006B4 48 4C 44              1405         .ascii     "HLD"
      0006B7                       1406 HLD:
      0006B7 90 AE 00 12      [ 2] 1407 	LDW Y,#UHLD 
      0006BB 1D 00 02         [ 2] 1408 	SUBW X,#2
      0006BE FF               [ 2] 1409         LDW (X),Y
      0006BF 81               [ 4] 1410         RET
                                   1411 
                                   1412 ;       CONTEXT ( -- a )
                                   1413 ;       Start vocabulary search.
      0006C0 06 B3                 1414         .word      LINK
                           0006C2  1415 LINK = . 
      0006C2 07                    1416         .byte      7
      0006C3 43 4F 4E 54 45 58 54  1417         .ascii     "CONTEXT"
      0006CA                       1418 CNTXT:
      0006CA 90 AE 00 14      [ 2] 1419 	LDW Y,#UCNTXT
      0006CE 1D 00 02         [ 2] 1420 	SUBW X,#2
      0006D1 FF               [ 2] 1421         LDW (X),Y
      0006D2 81               [ 4] 1422         RET
                                   1423 
                                   1424 ;       VP      ( -- a )
                                   1425 ;       Point to top of variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006D3 06 C2                 1426         .word      LINK
                           0006D5  1427 LINK = . 
      0006D5 02                    1428         .byte      2
      0006D6 56 50                 1429         .ascii     "VP"
      0006D8                       1430 VPP:
      0006D8 90 AE 00 16      [ 2] 1431 	LDW Y,#UVP 
      0006DC 1D 00 02         [ 2] 1432 	SUBW X,#2
      0006DF FF               [ 2] 1433         LDW (X),Y
      0006E0 81               [ 4] 1434         RET
                                   1435 
                                   1436 ;       CP    ( -- a )
                                   1437 ;       Pointer to top of FLASH 
      0006E1 06 D5                 1438         .word LINK 
                           0006E3  1439         LINK=.
      0006E3 02                    1440         .byte 2 
      0006E4 43 50                 1441         .ascii "CP"
      0006E6                       1442 CPP: 
      0006E6 90 AE 00 18      [ 2] 1443         ldw y,#UCP 
      0006EA 1D 00 02         [ 2] 1444         subw x,#CELLL 
      0006ED FF               [ 2] 1445         ldw (x),y 
      0006EE 81               [ 4] 1446         ret                
                                   1447 
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in dictionary.
      0006EF 06 E3                 1450         .word      LINK
                           0006F1  1451 LINK = . 
      0006F1 04                    1452         .byte      4
      0006F2 4C 41 53 54           1453         .ascii     "LAST"
      0006F6                       1454 LAST:
      0006F6 90 AE 00 1A      [ 2] 1455 	LDW Y,#ULAST 
      0006FA 1D 00 02         [ 2] 1456 	SUBW X,#2
      0006FD FF               [ 2] 1457         LDW (X),Y
      0006FE 81               [ 4] 1458         RET
                                   1459 
                                   1460 ; address of system variable URLAST 
                                   1461 ;       RAMLAST ( -- a )
                                   1462 ; RAM dictionary context 
      0006FF 06 F1                 1463         .word LINK 
                           000701  1464         LINK=. 
      000701 07                    1465         .byte 7  
      000702 52 41 4D 4C 41 53 54  1466         .ascii "RAMLAST" 
      000709                       1467 RAMLAST: 
      000709 90 AE 00 20      [ 2] 1468         ldw y,#URLAST 
      00070D 1D 00 02         [ 2] 1469         subw x,#CELLL 
      000710 FF               [ 2] 1470         ldw (x),y 
      000711 81               [ 4] 1471         ret 
                                   1472 
                                   1473 ; OFFSET ( -- a )
                                   1474 ; address of system variable OFFSET 
      000712 07 01                 1475         .word LINK 
                           000714  1476         LINK=.
      000714 06                    1477         .byte 6
      000715 4F 46 46 53 45 54     1478         .ascii "OFFSET" 
      00071B                       1479 OFFSET: 
      00071B 1D 00 02         [ 2] 1480         subw x,#CELLL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00071E 90 AE 00 1C      [ 2] 1481         ldw y,#UOFFSET 
      000722 FF               [ 2] 1482         ldw (x),y 
      000723 81               [ 4] 1483         ret 
                                   1484 
                                   1485 ; adjust jump address adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
      000724                       1487 ADRADJ: 
      000724 CD 07 1B         [ 4] 1488         call OFFSET 
      000727 CD 04 E3         [ 4] 1489         call AT 
      00072A CC 07 85         [ 2] 1490         jp PLUS 
                                   1491 
                                   1492 
                                   1493 ;; Common functions
                                   1494 
                                   1495 ;       ?DUP    ( w -- w w | 0 )
                                   1496 ;       Dup tos if its is not zero.
      00072D 07 14                 1497         .word      LINK
                           00072F  1498 LINK = . 
      00072F 04                    1499         .byte      4
      000730 3F 44 55 50           1500         .ascii     "?DUP"
      000734                       1501 QDUP:
      000734 90 93            [ 1] 1502         LDW Y,X
      000736 90 FE            [ 2] 1503 	LDW Y,(Y)
      000738 27 04            [ 1] 1504         JREQ     QDUP1
      00073A 1D 00 02         [ 2] 1505 	SUBW X,#2
      00073D FF               [ 2] 1506         LDW (X),Y
      00073E 81               [ 4] 1507 QDUP1:  RET
                                   1508 
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
      00073F 07 2F                 1511         .word      LINK
                           000741  1512 LINK = . 
      000741 03                    1513         .byte      3
      000742 52 4F 54              1514         .ascii     "ROT"
      000745                       1515 ROT:
      000745 90 93            [ 1] 1516         ldw y,x 
      000747 90 FE            [ 2] 1517         ldw y,(y)
      000749 90 89            [ 2] 1518         pushw y 
      00074B 90 93            [ 1] 1519         ldw y,x 
      00074D 90 EE 04         [ 2] 1520         ldw y,(4,y)
      000750 FF               [ 2] 1521         ldw (x),y 
      000751 90 93            [ 1] 1522         ldw y,x 
      000753 90 EE 02         [ 2] 1523         ldw y,(2,y)
      000756 EF 04            [ 2] 1524         ldw (4,x),y 
      000758 90 85            [ 2] 1525         popw y 
      00075A EF 02            [ 2] 1526         ldw (2,x),y
      00075C 81               [ 4] 1527         ret 
                                   1528 
                                   1529 ;       2DROP   ( w w -- )
                                   1530 ;       Discard two items on stack.
      00075D 07 41                 1531         .word      LINK
                           00075F  1532 LINK = . 
      00075F 05                    1533         .byte      5
      000760 32 44 52 4F 50        1534         .ascii     "2DROP"
      000765                       1535 DDROP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000765 1C 00 04         [ 2] 1536         ADDW X,#4
      000768 81               [ 4] 1537         RET
                                   1538 
                                   1539 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1540 ;       Duplicate top two items.
      000769 07 5F                 1541         .word      LINK
                           00076B  1542 LINK = . 
      00076B 04                    1543         .byte      4
      00076C 32 44 55 50           1544         .ascii     "2DUP"
      000770                       1545 DDUP:
      000770 1D 00 04         [ 2] 1546         SUBW X,#4
      000773 90 93            [ 1] 1547         LDW Y,X
      000775 90 EE 06         [ 2] 1548         LDW Y,(6,Y)
      000778 EF 02            [ 2] 1549         LDW (2,X),Y
      00077A 90 93            [ 1] 1550         LDW Y,X
      00077C 90 EE 04         [ 2] 1551         LDW Y,(4,Y)
      00077F FF               [ 2] 1552         LDW (X),Y
      000780 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;       +       ( w w -- sum )
                                   1556 ;       Add top two items.
      000781 07 6B                 1557         .word      LINK
                           000783  1558 LINK = . 
      000783 01                    1559         .byte      1
      000784 2B                    1560         .ascii     "+"
      000785                       1561 PLUS:
      000785 90 93            [ 1] 1562         LDW Y,X
      000787 90 FE            [ 2] 1563         LDW Y,(Y)
      000789 90 BF 24         [ 2] 1564         LDW YTEMP,Y
      00078C 1C 00 02         [ 2] 1565         ADDW X,#2
      00078F 90 93            [ 1] 1566         LDW Y,X
      000791 90 FE            [ 2] 1567         LDW Y,(Y)
      000793 72 B9 00 24      [ 2] 1568         ADDW Y,YTEMP
      000797 FF               [ 2] 1569         LDW (X),Y
      000798 81               [ 4] 1570         RET
                                   1571 
                                   1572 ;       NOT     ( w -- w )
                                   1573 ;       One's complement of tos.
      000799 07 83                 1574         .word      LINK
                           00079B  1575 LINK = . 
      00079B 03                    1576         .byte      3
      00079C 4E 4F 54              1577         .ascii     "NOT"
      00079F                       1578 INVER:
      00079F 90 93            [ 1] 1579         LDW Y,X
      0007A1 90 FE            [ 2] 1580         LDW Y,(Y)
      0007A3 90 53            [ 2] 1581         CPLW Y
      0007A5 FF               [ 2] 1582         LDW (X),Y
      0007A6 81               [ 4] 1583         RET
                                   1584 
                                   1585 ;       NEGATE  ( n -- -n )
                                   1586 ;       Two's complement of tos.
      0007A7 07 9B                 1587         .word      LINK
                           0007A9  1588 LINK = . 
      0007A9 06                    1589         .byte      6
      0007AA 4E 45 47 41 54 45     1590         .ascii     "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B0                       1591 NEGAT:
      0007B0 90 93            [ 1] 1592         LDW Y,X
      0007B2 90 FE            [ 2] 1593         LDW Y,(Y)
      0007B4 90 50            [ 2] 1594         NEGW Y
      0007B6 FF               [ 2] 1595         LDW (X),Y
      0007B7 81               [ 4] 1596         RET
                                   1597 
                                   1598 ;       DNEGATE ( d -- -d )
                                   1599 ;       Two's complement of top double.
      0007B8 07 A9                 1600         .word      LINK
                           0007BA  1601 LINK = . 
      0007BA 07                    1602         .byte      7
      0007BB 44 4E 45 47 41 54 45  1603         .ascii     "DNEGATE"
      0007C2                       1604 DNEGA:
      0007C2 90 93            [ 1] 1605         LDW Y,X
      0007C4 90 FE            [ 2] 1606 	LDW Y,(Y)
      0007C6 90 53            [ 2] 1607         CPLW Y     
      0007C8 90 BF 24         [ 2] 1608 	LDW YTEMP,Y
      0007CB 90 93            [ 1] 1609         LDW Y,X
      0007CD 90 EE 02         [ 2] 1610         LDW Y,(2,Y)
      0007D0 90 53            [ 2] 1611         CPLW Y
      0007D2 72 A9 00 01      [ 2] 1612         addw y,#1
      0007D6 EF 02            [ 2] 1613         LDW (2,X),Y
      0007D8 90 BE 24         [ 2] 1614         LDW Y,YTEMP
      0007DB 24 02            [ 1] 1615         JRNC DN1 
      0007DD 90 5C            [ 1] 1616         INCW Y
      0007DF FF               [ 2] 1617 DN1:    LDW (X),Y
      0007E0 81               [ 4] 1618         RET
                                   1619 
                                   1620 
                                   1621 ;       S>D ( n -- d )
                                   1622 ; convert single integer to double 
      0007E1 07 BA                 1623         .word LINK 
                           0007E3  1624         LINK=. 
      0007E3 03                    1625         .byte 3 
      0007E4 53 3E 44              1626         .ascii "S>D"
      0007E7                       1627 STOD: 
      0007E7 1D 00 02         [ 2] 1628         subw x,#CELLL 
      0007EA 90 5F            [ 1] 1629         clrw y 
      0007EC FF               [ 2] 1630         ldw (x),y 
      0007ED 90 93            [ 1] 1631         ldw y,x 
      0007EF 90 EE 02         [ 2] 1632         ldw y,(2,y)
      0007F2 2A 05            [ 1] 1633         jrpl 1$ 
      0007F4 90 AE FF FF      [ 2] 1634         ldw y,#-1
      0007F8 FF               [ 2] 1635         ldw (x),y 
      0007F9 81               [ 4] 1636 1$:     ret 
                                   1637 
                                   1638 
                                   1639 
                                   1640 
                                   1641 ;       -       ( n1 n2 -- n1-n2 )
                                   1642 ;       Subtraction.
      0007FA 07 E3                 1643         .word      LINK
                           0007FC  1644 LINK = . 
      0007FC 01                    1645         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0007FD 2D                    1646         .ascii     "-"
      0007FE                       1647 SUBB:
      0007FE 90 93            [ 1] 1648         LDW Y,X
      000800 90 FE            [ 2] 1649         LDW Y,(Y)
      000802 90 BF 24         [ 2] 1650         LDW YTEMP,Y
      000805 1C 00 02         [ 2] 1651         ADDW X,#2
      000808 90 93            [ 1] 1652         LDW Y,X
      00080A 90 FE            [ 2] 1653         LDW Y,(Y)
      00080C 72 B2 00 24      [ 2] 1654         SUBW Y,YTEMP
      000810 FF               [ 2] 1655         LDW (X),Y
      000811 81               [ 4] 1656         RET
                                   1657 
                                   1658 ;       ABS     ( n -- n )
                                   1659 ;       Return  absolute value of n.
      000812 07 FC                 1660         .word      LINK
                           000814  1661 LINK = . 
      000814 03                    1662         .byte      3
      000815 41 42 53              1663         .ascii     "ABS"
      000818                       1664 ABSS:
      000818 90 93            [ 1] 1665         LDW Y,X
      00081A 90 FE            [ 2] 1666 	LDW Y,(Y)
      00081C 2A 03            [ 1] 1667         JRPL     AB1     ;negate:
      00081E 90 50            [ 2] 1668         NEGW     Y     ;else negate hi byte
      000820 FF               [ 2] 1669         LDW (X),Y
      000821 81               [ 4] 1670 AB1:    RET
                                   1671 
                                   1672 ;       =       ( w w -- t )
                                   1673 ;       Return true if top two are =al.
      000822 08 14                 1674         .word      LINK
                           000824  1675 LINK = . 
      000824 01                    1676         .byte      1
      000825 3D                    1677         .ascii     "="
      000826                       1678 EQUAL:
      000826 A6 FF            [ 1] 1679         LD A,#0xFF  ;true
      000828 90 93            [ 1] 1680         LDW Y,X    ;D = n2
      00082A 90 FE            [ 2] 1681         LDW Y,(Y)
      00082C 90 BF 24         [ 2] 1682         LDW YTEMP,Y
      00082F 1C 00 02         [ 2] 1683         ADDW X,#2
      000832 90 93            [ 1] 1684         LDW Y,X
      000834 90 FE            [ 2] 1685         LDW Y,(Y)
      000836 90 B3 24         [ 2] 1686         CPW Y,YTEMP     ;if n2 <> n1
      000839 27 01            [ 1] 1687         JREQ     EQ1
      00083B 4F               [ 1] 1688         CLR A
      00083C F7               [ 1] 1689 EQ1:    LD (X),A
      00083D E7 01            [ 1] 1690         LD (1,X),A
      00083F 81               [ 4] 1691 	RET     
                                   1692 
                                   1693 ;       U<      ( u u -- t )
                                   1694 ;       Unsigned compare of top two items.
      000840 08 24                 1695         .word      LINK
                           000842  1696 LINK = . 
      000842 02                    1697         .byte      2
      000843 55 3C                 1698         .ascii     "U<"
      000845                       1699 ULESS:
      000845 A6 FF            [ 1] 1700         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000847 90 93            [ 1] 1701         LDW Y,X    ;D = n2
      000849 90 FE            [ 2] 1702         LDW Y,(Y)
      00084B 90 BF 24         [ 2] 1703         LDW YTEMP,Y
      00084E 1C 00 02         [ 2] 1704         ADDW X,#2
      000851 90 93            [ 1] 1705         LDW Y,X
      000853 90 FE            [ 2] 1706         LDW Y,(Y)
      000855 90 B3 24         [ 2] 1707         CPW Y,YTEMP     ;if n2 <> n1
      000858 25 01            [ 1] 1708         JRULT     ULES1
      00085A 4F               [ 1] 1709         CLR A
      00085B F7               [ 1] 1710 ULES1:  LD (X),A
      00085C E7 01            [ 1] 1711         LD (1,X),A
      00085E 81               [ 4] 1712 	RET     
                                   1713 
                                   1714 ;       <       ( n1 n2 -- t )
                                   1715 ;       Signed compare of top two items.
      00085F 08 42                 1716         .word      LINK
                           000861  1717 LINK = . 
      000861 01                    1718         .byte      1
      000862 3C                    1719         .ascii     "<"
      000863                       1720 LESS:
      000863 A6 FF            [ 1] 1721         LD A,#0xFF  ;true
      000865 90 93            [ 1] 1722         LDW Y,X    ;D = n2
      000867 90 FE            [ 2] 1723         LDW Y,(Y)
      000869 90 BF 24         [ 2] 1724         LDW YTEMP,Y
      00086C 1C 00 02         [ 2] 1725         ADDW X,#2
      00086F 90 93            [ 1] 1726         LDW Y,X
      000871 90 FE            [ 2] 1727         LDW Y,(Y)
      000873 90 B3 24         [ 2] 1728         CPW Y,YTEMP     ;if n2 <> n1
      000876 2F 01            [ 1] 1729         JRSLT     LT1
      000878 4F               [ 1] 1730         CLR A
      000879 F7               [ 1] 1731 LT1:    LD (X),A
      00087A E7 01            [ 1] 1732         LD (1,X),A
      00087C 81               [ 4] 1733 	RET     
                                   1734 
                                   1735 ;       MAX     ( n n -- n )
                                   1736 ;       Return greater of two top items.
      00087D 08 61                 1737         .word      LINK
                           00087F  1738 LINK = . 
      00087F 03                    1739         .byte      3
      000880 4D 41 58              1740         .ascii     "MAX"
      000883                       1741 MAX:
      000883 90 93            [ 1] 1742         LDW Y,X    ;D = n2
      000885 90 EE 02         [ 2] 1743         LDW Y,(2,Y)
      000888 90 BF 24         [ 2] 1744         LDW YTEMP,Y
      00088B 90 93            [ 1] 1745         LDW Y,X
      00088D 90 FE            [ 2] 1746         LDW Y,(Y)
      00088F 90 B3 24         [ 2] 1747         CPW Y,YTEMP     ;if n2 <> n1
      000892 2F 02            [ 1] 1748         JRSLT     MAX1
      000894 EF 02            [ 2] 1749         LDW (2,X),Y
      000896 1C 00 02         [ 2] 1750 MAX1:   ADDW X,#2
      000899 81               [ 4] 1751 	RET     
                                   1752 
                                   1753 ;       MIN     ( n n -- n )
                                   1754 ;       Return smaller of top two items.
      00089A 08 7F                 1755         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           00089C  1756 LINK = . 
      00089C 03                    1757         .byte      3
      00089D 4D 49 4E              1758         .ascii     "MIN"
      0008A0                       1759 MIN:
      0008A0 90 93            [ 1] 1760         LDW Y,X    ;D = n2
      0008A2 90 EE 02         [ 2] 1761         LDW Y,(2,Y)
      0008A5 90 BF 24         [ 2] 1762         LDW YTEMP,Y
      0008A8 90 93            [ 1] 1763         LDW Y,X
      0008AA 90 FE            [ 2] 1764         LDW Y,(Y)
      0008AC 90 B3 24         [ 2] 1765         CPW Y,YTEMP     ;if n2 <> n1
      0008AF 2C 02            [ 1] 1766         JRSGT     MIN1
      0008B1 EF 02            [ 2] 1767         LDW (2,X),Y
      0008B3 1C 00 02         [ 2] 1768 MIN1:	ADDW X,#2
      0008B6 81               [ 4] 1769 	RET     
                                   1770 
                                   1771 ;       WITHIN  ( u ul uh -- t )
                                   1772 ;       Return true if u is within
                                   1773 ;       range of ul and uh. ( ul <= u < uh )
      0008B7 08 9C                 1774         .word      LINK
                           0008B9  1775 LINK = . 
      0008B9 06                    1776         .byte      6
      0008BA 57 49 54 48 49 4E     1777         .ascii     "WITHIN"
      0008C0                       1778 WITHI:
      0008C0 CD 05 B4         [ 4] 1779         CALL     OVER
      0008C3 CD 07 FE         [ 4] 1780         CALL     SUBB
      0008C6 CD 05 53         [ 4] 1781         CALL     TOR
      0008C9 CD 07 FE         [ 4] 1782         CALL     SUBB
      0008CC CD 05 34         [ 4] 1783         CALL     RFROM
      0008CF CC 08 45         [ 2] 1784         JP     ULESS
                                   1785 
                                   1786 ;; Divide
                                   1787 
                                   1788 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1789 ;       Unsigned divide of a double by a
                                   1790 ;       single. Return mod and quotient.
      0008D2 08 B9                 1791         .word      LINK
                           0008D4  1792 LINK = . 
      0008D4 06                    1793         .byte      6
      0008D5 55 4D 2F 4D 4F 44     1794         .ascii     "UM/MOD"
      0008DB                       1795 UMMOD:
      0008DB BF 22            [ 2] 1796 	LDW XTEMP,X	; save stack pointer
      0008DD FE               [ 2] 1797 	LDW X,(X)	; un
      0008DE BF 24            [ 2] 1798 	LDW YTEMP,X     ; save un
      0008E0 90 BE 22         [ 2] 1799 	LDW Y,XTEMP	; stack pointer
      0008E3 90 EE 04         [ 2] 1800 	LDW Y,(4,Y)     ; Y=udl
      0008E6 BE 22            [ 2] 1801 	LDW X,XTEMP
      0008E8 EE 02            [ 2] 1802 	LDW X,(2,X)	; X=udh
      0008EA B3 24            [ 2] 1803 	CPW X,YTEMP
      0008EC 23 0F            [ 2] 1804 	JRULE MMSM1
      0008EE BE 22            [ 2] 1805 	LDW X,XTEMP
      0008F0 1C 00 02         [ 2] 1806 	ADDW X,#2	; pop off 1 level
      0008F3 90 AE FF FF      [ 2] 1807 	LDW Y,#0xFFFF
      0008F7 FF               [ 2] 1808 	LDW (X),Y
      0008F8 90 5F            [ 1] 1809 	CLRW Y
      0008FA EF 02            [ 2] 1810 	LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008FC 81               [ 4] 1811 	RET
      0008FD                       1812 MMSM1:
                                   1813 ; take advantage of divw x,y when udh==0
      0008FD 5D               [ 2] 1814         tnzw x  ; is udh==0?
      0008FE 26 11            [ 1] 1815         jrne MMSM2 
      000900 93               [ 1] 1816         ldw x,y    ;udl 
      000901 90 BE 24         [ 2] 1817         ldw y,YTEMP ; divisor 
      000904 65               [ 2] 1818         divw x,y 
      000905 89               [ 2] 1819         pushw x     ; quotient 
      000906 BE 22            [ 2] 1820         ldw x,XTEMP 
      000908 1C 00 02         [ 2] 1821         addw x,#CELLL 
      00090B EF 02            [ 2] 1822         ldw (2,x),y  ; ur
      00090D 90 85            [ 2] 1823         popw y 
      00090F FF               [ 2] 1824         ldw (x),y ; uq 
      000910 81               [ 4] 1825         ret 
      000911                       1826 MMSM2:        
      000911 A6 11            [ 1] 1827 	LD A,#17	; loop count
      000913                       1828 MMSM3:
      000913 B3 24            [ 2] 1829 	CPW X,YTEMP	; compare udh to un
      000915 25 04            [ 1] 1830 	JRULT MMSM4	; can't subtract
      000917 72 B0 00 24      [ 2] 1831 	SUBW X,YTEMP	; can subtract
      00091B                       1832 MMSM4:
      00091B 8C               [ 1] 1833 	CCF	; quotient bit
      00091C 90 59            [ 2] 1834 	RLCW Y	; rotate into quotient
      00091E 59               [ 2] 1835 	RLCW X	; rotate into remainder
      00091F 4A               [ 1] 1836 	DEC A	; repeat
      000920 22 F1            [ 1] 1837 	JRUGT MMSM3
      000922 56               [ 2] 1838         RRCW X 
      000923 BF 24            [ 2] 1839 	LDW YTEMP,X	; done, save remainder
      000925 BE 22            [ 2] 1840 	LDW X,XTEMP
      000927 1C 00 02         [ 2] 1841 	ADDW X,#2	; drop
      00092A FF               [ 2] 1842 	LDW (X),Y
      00092B 90 BE 24         [ 2] 1843 	LDW Y,YTEMP	; save quotient
      00092E EF 02            [ 2] 1844 	LDW (2,X),Y
      000930 81               [ 4] 1845 	RET
                                   1846 	
                                   1847 ;       M/MOD   ( d n -- r q )
                                   1848 ;       Signed floored divide of double by
                                   1849 ;       single. Return mod and quotient.
      000931 08 D4                 1850         .word      LINK
                           000933  1851 LINK = . 
      000933 05                    1852         .byte      5
      000934 4D 2F 4D 4F 44        1853         .ascii     "M/MOD"
      000939                       1854 MSMOD:  
      000939 CD 05 8A         [ 4] 1855         CALL	DUPP
      00093C CD 05 C3         [ 4] 1856         CALL	ZLESS
      00093F CD 05 8A         [ 4] 1857         CALL	DUPP
      000942 CD 05 53         [ 4] 1858         CALL	TOR
      000945 CD 04 98         [ 4] 1859         CALL	QBRAN
      000948 09 56                 1860         .word	MMOD1
      00094A CD 07 B0         [ 4] 1861         CALL	NEGAT
      00094D CD 05 53         [ 4] 1862         CALL	TOR
      000950 CD 07 C2         [ 4] 1863         CALL	DNEGA
      000953 CD 05 34         [ 4] 1864         CALL	RFROM
      000956 CD 05 53         [ 4] 1865 MMOD1:	CALL	TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000959 CD 05 8A         [ 4] 1866         CALL	DUPP
      00095C CD 05 C3         [ 4] 1867         CALL	ZLESS
      00095F CD 04 98         [ 4] 1868         CALL	QBRAN
      000962 09 6A                 1869         .word	MMOD2
      000964 CD 05 47         [ 4] 1870         CALL	RAT
      000967 CD 07 85         [ 4] 1871         CALL	PLUS
      00096A CD 05 34         [ 4] 1872 MMOD2:	CALL	RFROM
      00096D CD 08 DB         [ 4] 1873         CALL	UMMOD
      000970 CD 05 34         [ 4] 1874         CALL	RFROM
      000973 CD 04 98         [ 4] 1875         CALL	QBRAN
      000976 09 81                 1876         .word	MMOD3
      000978 CD 05 9A         [ 4] 1877         CALL	SWAPP
      00097B CD 07 B0         [ 4] 1878         CALL	NEGAT
      00097E CD 05 9A         [ 4] 1879         CALL	SWAPP
      000981 81               [ 4] 1880 MMOD3:	RET
                                   1881 
                                   1882 ;       /MOD    ( n n -- r q )
                                   1883 ;       Signed divide. Return mod and quotient.
      000982 09 33                 1884         .word      LINK
                           000984  1885 LINK = . 
      000984 04                    1886         .byte      4
      000985 2F 4D 4F 44           1887         .ascii     "/MOD"
      000989                       1888 SLMOD:
      000989 CD 05 B4         [ 4] 1889         CALL	OVER
      00098C CD 05 C3         [ 4] 1890         CALL	ZLESS
      00098F CD 05 9A         [ 4] 1891         CALL	SWAPP
      000992 CC 09 39         [ 2] 1892         JP	MSMOD
                                   1893 
                                   1894 ;       MOD     ( n n -- r )
                                   1895 ;       Signed divide. Return mod only.
      000995 09 84                 1896         .word      LINK
                           000997  1897 LINK = . 
      000997 03                    1898         .byte      3
      000998 4D 4F 44              1899         .ascii     "MOD"
      00099B                       1900 MODD:
      00099B CD 09 89         [ 4] 1901 	CALL	SLMOD
      00099E CC 05 80         [ 2] 1902 	JP	DROP
                                   1903 
                                   1904 ;       /       ( n n -- q )
                                   1905 ;       Signed divide. Return quotient only.
      0009A1 09 97                 1906         .word      LINK
                           0009A3  1907 LINK = . 
      0009A3 01                    1908         .byte      1
      0009A4 2F                    1909         .ascii     "/"
      0009A5                       1910 SLASH:
      0009A5 CD 09 89         [ 4] 1911         CALL	SLMOD
      0009A8 CD 05 9A         [ 4] 1912         CALL	SWAPP
      0009AB CC 05 80         [ 2] 1913         JP	DROP
                                   1914 
                                   1915 ;; Multiply
                                   1916 
                                   1917 ;       UM*     ( u u -- ud )
                                   1918 ;       Unsigned multiply. Return double product.
      0009AE 09 A3                 1919         .word      LINK
                           0009B0  1920 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009B0 03                    1921         .byte      3
      0009B1 55 4D 2A              1922         .ascii     "UM*"
      0009B4                       1923 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1924 ; take advantage of SP addressing modes
                                   1925 ; these PRODx in RAM are not required
                                   1926 ; the product is kept on stack as local variable 
                                   1927         ;; bytes offset on data stack 
                           000002  1928         da=2 
                           000003  1929         db=3 
                           000000  1930         dc=0 
                           000001  1931         dd=1 
                                   1932         ;; product bytes offset on return stack 
                           000001  1933         UD1=1  ; ud bits 31..24
                           000002  1934         UD2=2  ; ud bits 23..16
                           000003  1935         UD3=3  ; ud bits 15..8 
                           000004  1936         UD4=4  ; ud bits 7..0 
                                   1937         ;; local variable for product set to zero   
      0009B4 90 5F            [ 1] 1938         clrw y 
      0009B6 90 89            [ 2] 1939         pushw y  ; bits 15..0
      0009B8 90 89            [ 2] 1940         pushw y  ; bits 31..16 
      0009BA E6 03            [ 1] 1941         ld a,(db,x) ; b 
      0009BC 90 97            [ 1] 1942         ld yl,a 
      0009BE E6 01            [ 1] 1943         ld a,(dd,x)   ; d
      0009C0 90 42            [ 4] 1944         mul y,a    ; b*d  
      0009C2 17 03            [ 2] 1945         ldw (UD3,sp),y ; lowest weight product 
      0009C4 E6 03            [ 1] 1946         ld a,(db,x)
      0009C6 90 97            [ 1] 1947         ld yl,a 
      0009C8 E6 00            [ 1] 1948         ld a,(dc,x)
      0009CA 90 42            [ 4] 1949         mul y,a  ; b*c 
                                   1950         ;;; do the partial sum 
      0009CC 72 F9 02         [ 2] 1951         addw y,(UD2,sp)
      0009CF 4F               [ 1] 1952         clr a 
      0009D0 49               [ 1] 1953         rlc a
      0009D1 6B 01            [ 1] 1954         ld (UD1,sp),a 
      0009D3 17 02            [ 2] 1955         ldw (UD2,sp),y 
      0009D5 E6 02            [ 1] 1956         ld a,(da,x)
      0009D7 90 97            [ 1] 1957         ld yl,a 
      0009D9 E6 01            [ 1] 1958         ld a,(dd,x)
      0009DB 90 42            [ 4] 1959         mul y,a   ; a*d 
                                   1960         ;; do partial sum 
      0009DD 72 F9 02         [ 2] 1961         addw y,(UD2,sp)
      0009E0 4F               [ 1] 1962         clr a 
      0009E1 19 01            [ 1] 1963         adc a,(UD1,sp)
      0009E3 6B 01            [ 1] 1964         ld (UD1,sp),a  
      0009E5 17 02            [ 2] 1965         ldw (UD2,sp),y 
      0009E7 E6 02            [ 1] 1966         ld a,(da,x)
      0009E9 90 97            [ 1] 1967         ld yl,a 
      0009EB E6 00            [ 1] 1968         ld a,(dc,x)
      0009ED 90 42            [ 4] 1969         mul y,a  ;  a*c highest weight product 
                                   1970         ;;; do partial sum 
      0009EF 72 F9 01         [ 2] 1971         addw y,(UD1,sp)
      0009F2 FF               [ 2] 1972         ldw (x),y  ; udh 
      0009F3 16 03            [ 2] 1973         ldw y,(UD3,sp)
      0009F5 EF 02            [ 2] 1974         ldw (2,x),y  ; udl  
      0009F7 5B 04            [ 2] 1975         addw sp,#4 ; drop local variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009F9 81               [ 4] 1976         ret  
                                   1977 
                                   1978 
                                   1979 ;       *       ( n n -- n )
                                   1980 ;       Signed multiply. Return single product.
      0009FA 09 B0                 1981         .word      LINK
                           0009FC  1982 LINK = . 
      0009FC 01                    1983         .byte      1
      0009FD 2A                    1984         .ascii     "*"
      0009FE                       1985 STAR:
      0009FE CD 09 B4         [ 4] 1986 	CALL	UMSTA
      000A01 CC 05 80         [ 2] 1987 	JP	DROP
                                   1988 
                                   1989 ;       M*      ( n n -- d )
                                   1990 ;       Signed multiply. Return double product.
      000A04 09 FC                 1991         .word      LINK
                           000A06  1992 LINK = . 
      000A06 02                    1993         .byte      2
      000A07 4D 2A                 1994         .ascii     "M*"
      000A09                       1995 MSTAR:      
      000A09 CD 07 70         [ 4] 1996         CALL	DDUP
      000A0C CD 05 FF         [ 4] 1997         CALL	XORR
      000A0F CD 05 C3         [ 4] 1998         CALL	ZLESS
      000A12 CD 05 53         [ 4] 1999         CALL	TOR
      000A15 CD 08 18         [ 4] 2000         CALL	ABSS
      000A18 CD 05 9A         [ 4] 2001         CALL	SWAPP
      000A1B CD 08 18         [ 4] 2002         CALL	ABSS
      000A1E CD 09 B4         [ 4] 2003         CALL	UMSTA
      000A21 CD 05 34         [ 4] 2004         CALL	RFROM
      000A24 CD 04 98         [ 4] 2005         CALL	QBRAN
      000A27 0A 2C                 2006         .word	MSTA1
      000A29 CD 07 C2         [ 4] 2007         CALL	DNEGA
      000A2C 81               [ 4] 2008 MSTA1:	RET
                                   2009 
                                   2010 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2011 ;       Multiply n1 and n2, then divide
                                   2012 ;       by n3. Return mod and quotient.
      000A2D 0A 06                 2013         .word      LINK
                           000A2F  2014 LINK = . 
      000A2F 05                    2015         .byte      5
      000A30 2A 2F 4D 4F 44        2016         .ascii     "*/MOD"
      000A35                       2017 SSMOD:
      000A35 CD 05 53         [ 4] 2018         CALL     TOR
      000A38 CD 0A 09         [ 4] 2019         CALL     MSTAR
      000A3B CD 05 34         [ 4] 2020         CALL     RFROM
      000A3E CC 09 39         [ 2] 2021         JP     MSMOD
                                   2022 
                                   2023 ;       */      ( n1 n2 n3 -- q )
                                   2024 ;       Multiply n1 by n2, then divide
                                   2025 ;       by n3. Return quotient only.
      000A41 0A 2F                 2026         .word      LINK
                           000A43  2027 LINK = . 
      000A43 02                    2028         .byte      2
      000A44 2A 2F                 2029         .ascii     "*/"
      000A46                       2030 STASL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A46 CD 0A 35         [ 4] 2031         CALL	SSMOD
      000A49 CD 05 9A         [ 4] 2032         CALL	SWAPP
      000A4C CC 05 80         [ 2] 2033         JP	DROP
                                   2034 
                                   2035 ;; Miscellaneous
                                   2036 
                                   2037 ;       CELL+   ( a -- a )
                                   2038 ;       Add cell size in byte to address.
      000A4F 0A 43                 2039         .word      LINK
                           000A51  2040 LINK = . 
      000A51 02                    2041         .byte       2
      000A52 32 2B                 2042         .ascii     "2+"
      000A54                       2043 CELLP:
      000A54 90 93            [ 1] 2044         LDW Y,X
      000A56 90 FE            [ 2] 2045 	LDW Y,(Y)
      000A58 72 A9 00 02      [ 2] 2046         ADDW Y,#CELLL 
      000A5C FF               [ 2] 2047         LDW (X),Y
      000A5D 81               [ 4] 2048         RET
                                   2049 
                                   2050 ;       CELL-   ( a -- a )
                                   2051 ;       Subtract 2 from address.
      000A5E 0A 51                 2052         .word      LINK
                           000A60  2053 LINK = . 
      000A60 02                    2054         .byte       2
      000A61 32 2D                 2055         .ascii     "2-"
      000A63                       2056 CELLM:
      000A63 90 93            [ 1] 2057         LDW Y,X
      000A65 90 FE            [ 2] 2058 	LDW Y,(Y)
      000A67 72 A2 00 02      [ 2] 2059         SUBW Y,#CELLL
      000A6B FF               [ 2] 2060         LDW (X),Y
      000A6C 81               [ 4] 2061         RET
                                   2062 
                                   2063 ;       CELLS   ( n -- n )
                                   2064 ;       Multiply tos by 2.
      000A6D 0A 60                 2065         .word      LINK
                           000A6F  2066 LINK = . 
      000A6F 02                    2067         .byte       2
      000A70 32 2A                 2068         .ascii     "2*"
      000A72                       2069 CELLS:
      000A72 90 93            [ 1] 2070         LDW Y,X
      000A74 90 FE            [ 2] 2071 	LDW Y,(Y)
      000A76 90 58            [ 2] 2072         SLAW Y
      000A78 FF               [ 2] 2073         LDW (X),Y
      000A79 81               [ 4] 2074         RET
                                   2075 
                                   2076 ;       1+      ( a -- a )
                                   2077 ;       Add cell size in byte to address.
      000A7A 0A 6F                 2078         .word      LINK
                           000A7C  2079 LINK = . 
      000A7C 02                    2080         .byte      2
      000A7D 31 2B                 2081         .ascii     "1+"
      000A7F                       2082 ONEP:
      000A7F 90 93            [ 1] 2083         LDW Y,X
      000A81 90 FE            [ 2] 2084 	LDW Y,(Y)
      000A83 90 5C            [ 1] 2085         INCW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A85 FF               [ 2] 2086         LDW (X),Y
      000A86 81               [ 4] 2087         RET
                                   2088 
                                   2089 ;       1-      ( a -- a )
                                   2090 ;       Subtract 2 from address.
      000A87 0A 7C                 2091         .word      LINK
                           000A89  2092 LINK = . 
      000A89 02                    2093         .byte      2
      000A8A 31 2D                 2094         .ascii     "1-"
      000A8C                       2095 ONEM:
      000A8C 90 93            [ 1] 2096         LDW Y,X
      000A8E 90 FE            [ 2] 2097 	LDW Y,(Y)
      000A90 90 5A            [ 2] 2098         DECW Y
      000A92 FF               [ 2] 2099         LDW (X),Y
      000A93 81               [ 4] 2100         RET
                                   2101 
                                   2102 ;  shift left n times 
                                   2103 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000A94 0A 89                 2104         .word LINK 
                           000A96  2105         LINK=.
      000A96 06                    2106         .byte 6 
      000A97 4C 53 48 49 46 54     2107         .ascii "LSHIFT"
      000A9D                       2108 LSHIFT:
      000A9D E6 01            [ 1] 2109         ld a,(1,x)
      000A9F 1C 00 02         [ 2] 2110         addw x,#CELLL 
      000AA2 90 93            [ 1] 2111         ldw y,x 
      000AA4 90 FE            [ 2] 2112         ldw y,(y)
      000AA6                       2113 LSHIFT1:
      000AA6 4D               [ 1] 2114         tnz a 
      000AA7 27 05            [ 1] 2115         jreq LSHIFT4 
      000AA9 90 58            [ 2] 2116         sllw y 
      000AAB 4A               [ 1] 2117         dec a 
      000AAC 20 F8            [ 2] 2118         jra LSHIFT1 
      000AAE                       2119 LSHIFT4:
      000AAE FF               [ 2] 2120         ldw (x),y 
      000AAF 81               [ 4] 2121         ret 
                                   2122 
                                   2123 ; shift right n times                 
                                   2124 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AB0 0A 96                 2125         .word LINK 
                           000AB2  2126         LINK=.
      000AB2 06                    2127         .byte 6
      000AB3 52 53 48 49 46 54     2128         .ascii "RSHIFT"
      000AB9                       2129 RSHIFT:
      000AB9 E6 01            [ 1] 2130         ld a,(1,x)
      000ABB 1C 00 02         [ 2] 2131         addw x,#CELLL 
      000ABE 90 93            [ 1] 2132         ldw y,x 
      000AC0 90 FE            [ 2] 2133         ldw y,(y)
      000AC2                       2134 RSHIFT1:
      000AC2 4D               [ 1] 2135         tnz a 
      000AC3 27 05            [ 1] 2136         jreq RSHIFT4 
      000AC5 90 54            [ 2] 2137         srlw y 
      000AC7 4A               [ 1] 2138         dec a 
      000AC8 20 F8            [ 2] 2139         jra RSHIFT1 
      000ACA                       2140 RSHIFT4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000ACA FF               [ 2] 2141         ldw (x),y 
      000ACB 81               [ 4] 2142         ret 
                                   2143 
                                   2144 
                                   2145 ;       2/      ( n -- n )
                                   2146 ;       divide  tos by 2.
      000ACC 0A B2                 2147         .word      LINK
                           000ACE  2148 LINK = . 
      000ACE 02                    2149         .byte      2
      000ACF 32 2F                 2150         .ascii     "2/"
      000AD1                       2151 TWOSL:
      000AD1 90 93            [ 1] 2152         LDW Y,X
      000AD3 90 FE            [ 2] 2153 	LDW Y,(Y)
      000AD5 90 57            [ 2] 2154         SRAW Y
      000AD7 FF               [ 2] 2155         LDW (X),Y
      000AD8 81               [ 4] 2156         RET
                                   2157 
                                   2158 ;       BL      ( -- 32 )
                                   2159 ;       Return 32,  blank character.
      000AD9 0A CE                 2160         .word      LINK
                           000ADB  2161 LINK = . 
      000ADB 02                    2162         .byte      2
      000ADC 42 4C                 2163         .ascii     "BL"
      000ADE                       2164 BLANK:
      000ADE 1D 00 02         [ 2] 2165         SUBW X,#2
      000AE1 90 AE 00 20      [ 2] 2166 	LDW Y,#32
      000AE5 FF               [ 2] 2167         LDW (X),Y
      000AE6 81               [ 4] 2168         RET
                                   2169 
                                   2170 ;         0     ( -- 0)
                                   2171 ;         Return 0.
      000AE7 0A DB                 2172         .word      LINK
                           000AE9  2173 LINK = . 
      000AE9 01                    2174         .byte       1
      000AEA 30                    2175         .ascii     "0"
      000AEB                       2176 ZERO:
      000AEB 1D 00 02         [ 2] 2177         SUBW X,#2
      000AEE 90 5F            [ 1] 2178 	CLRW Y
      000AF0 FF               [ 2] 2179         LDW (X),Y
      000AF1 81               [ 4] 2180         RET
                                   2181 
                                   2182 ;         1     ( -- 1)
                                   2183 ;         Return 1.
      000AF2 0A E9                 2184         .word      LINK
                           000AF4  2185 LINK = . 
      000AF4 01                    2186         .byte       1
      000AF5 31                    2187         .ascii     "1"
      000AF6                       2188 ONE:
      000AF6 1D 00 02         [ 2] 2189         SUBW X,#2
      000AF9 90 AE 00 01      [ 2] 2190 	LDW Y,#1
      000AFD FF               [ 2] 2191         LDW (X),Y
      000AFE 81               [ 4] 2192         RET
                                   2193 
                                   2194 ;         -1    ( -- -1)
                                   2195 ;         Return 32,  blank character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000AFF 0A F4                 2196         .word      LINK
                           000B01  2197 LINK = . 
      000B01 02                    2198         .byte       2
      000B02 2D 31                 2199         .ascii     "-1"
      000B04                       2200 MONE:
      000B04 1D 00 02         [ 2] 2201         SUBW X,#2
      000B07 90 AE FF FF      [ 2] 2202 	LDW Y,#0xFFFF
      000B0B FF               [ 2] 2203         LDW (X),Y
      000B0C 81               [ 4] 2204         RET
                                   2205 
                                   2206 ;       >CHAR   ( c -- c )
                                   2207 ;       Filter non-printing characters.
      000B0D 0B 01                 2208         .word      LINK
                           000B0F  2209 LINK = . 
      000B0F 05                    2210         .byte      5
      000B10 3E 43 48 41 52        2211         .ascii     ">CHAR"
      000B15                       2212 TCHAR:
      000B15 E6 01            [ 1] 2213         ld a,(1,x)
      000B17 A1 20            [ 1] 2214         cp a,#32  
      000B19 2B 05            [ 1] 2215         jrmi 1$ 
      000B1B A1 7F            [ 1] 2216         cp a,#127 
      000B1D 2A 01            [ 1] 2217         jrpl 1$ 
      000B1F 81               [ 4] 2218         ret 
      000B20 A6 5F            [ 1] 2219 1$:     ld a,#'_ 
      000B22 E7 01            [ 1] 2220         ld (1,x),a 
      000B24 81               [ 4] 2221         ret 
                                   2222 
                                   2223 ;       DEPTH   ( -- n )
                                   2224 ;       Return  depth of  data stack.
      000B25 0B 0F                 2225         .word      LINK
                           000B27  2226 LINK = . 
      000B27 05                    2227         .byte      5
      000B28 44 45 50 54 48        2228         .ascii     "DEPTH"
      000B2D                       2229 DEPTH: 
      000B2D 90 BE 2A         [ 2] 2230         LDW Y,SP0    ;save data stack ptr
      000B30 BF 22            [ 2] 2231 	LDW XTEMP,X
      000B32 72 B2 00 22      [ 2] 2232         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B36 90 57            [ 2] 2233         SRAW Y    ;Y = #stack items
      000B38 1D 00 02         [ 2] 2234 	SUBW X,#2
      000B3B FF               [ 2] 2235         LDW (X),Y     ; if neg, underflow
      000B3C 81               [ 4] 2236         RET
                                   2237 
                                   2238 ;       PICK    ( ... +n -- ... w )
                                   2239 ;       Copy  nth stack item to tos.
      000B3D 0B 27                 2240         .word      LINK
                           000B3F  2241 LINK = . 
      000B3F 04                    2242         .byte      4
      000B40 50 49 43 4B           2243         .ascii     "PICK"
      000B44                       2244 PICK:
      000B44 90 93            [ 1] 2245         LDW Y,X   ;D = n1
      000B46 90 FE            [ 2] 2246         LDW Y,(Y)
                                   2247 ; modified for standard compliance          
                                   2248 ; 0 PICK must be equivalent to DUP 
      000B48 90 5C            [ 1] 2249         INCW Y 
      000B4A 90 58            [ 2] 2250         SLAW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B4C BF 22            [ 2] 2251         LDW XTEMP,X
      000B4E 72 B9 00 22      [ 2] 2252         ADDW Y,XTEMP
      000B52 90 FE            [ 2] 2253         LDW Y,(Y)
      000B54 FF               [ 2] 2254         LDW (X),Y
      000B55 81               [ 4] 2255         RET
                                   2256 
                                   2257 ;; Memory access
                                   2258 
                                   2259 ;       +!      ( n a -- )
                                   2260 ;       Add n to  contents at address a.
      000B56 0B 3F                 2261         .word      LINK
                           000B58  2262 LINK = . 
      000B58 02                    2263         .byte      2
      000B59 2B 21                 2264         .ascii     "+!"
      000B5B                       2265 PSTOR:
      000B5B 90 93            [ 1] 2266         ldw y,x 
      000B5D 90 FE            [ 2] 2267         ldw y,(y)
      000B5F 90 BF 24         [ 2] 2268         ldw YTEMP,y  ; address
      000B62 90 FE            [ 2] 2269         ldw y,(y)  
      000B64 90 89            [ 2] 2270         pushw y  ; value at address 
      000B66 90 93            [ 1] 2271         ldw y,x 
      000B68 90 EE 02         [ 2] 2272         ldw y,(2,y) ; n 
      000B6B 72 F9 01         [ 2] 2273         addw y,(1,sp) ; n+value
      000B6E 91 CF 24         [ 5] 2274         ldw [YTEMP],y ;  a!
      000B71 90 85            [ 2] 2275         popw y    ;drop local var
      000B73 1C 00 04         [ 2] 2276         addw x,#4 ; DDROP 
      000B76 81               [ 4] 2277         ret 
                                   2278 
                                   2279 ;       2!      ( d a -- )
                                   2280 ;       Store  double integer to address a.
      000B77 0B 58                 2281         .word      LINK
                           000B79  2282 LINK = . 
      000B79 02                    2283         .byte      2
      000B7A 32 21                 2284         .ascii     "2!"
      000B7C                       2285 DSTOR:
      000B7C 90 93            [ 1] 2286         ldw y,x 
      000B7E 90 FE            [ 2] 2287         ldw y,(y)
      000B80 90 BF 24         [ 2] 2288         ldw YTEMP,y ; address 
      000B83 1C 00 02         [ 2] 2289         addw x,#CELLL ; drop a 
      000B86 90 93            [ 1] 2290         ldw y,x 
      000B88 90 FE            [ 2] 2291         ldw y,(y) ; hi word 
      000B8A 89               [ 2] 2292         pushw x 
      000B8B EE 02            [ 2] 2293         ldw x,(2,x) ; lo word 
      000B8D 91 CF 24         [ 5] 2294         ldw [YTEMP],y
      000B90 90 93            [ 1] 2295         ldw y,x 
      000B92 AE 00 02         [ 2] 2296         ldw x,#2 
      000B95 92 DF 24         [ 5] 2297         ldw ([YTEMP],x),y 
      000B98 85               [ 2] 2298         popw x 
      000B99 1C 00 04         [ 2] 2299         addw x,#4 ; DDROP 
      000B9C 81               [ 4] 2300         ret 
                                   2301 
                                   2302 ;       2@      ( a -- d )
                                   2303 ;       Fetch double integer from address a.
      000B9D 0B 79                 2304         .word      LINK
                           000B9F  2305 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B9F 02                    2306         .byte      2
      000BA0 32 40                 2307         .ascii     "2@"
      000BA2                       2308 DAT:
      000BA2 90 93            [ 1] 2309         ldw y,x 
      000BA4 90 FE            [ 2] 2310         ldw y,(y) ;address 
      000BA6 90 BF 24         [ 2] 2311         ldw YTEMP,y 
      000BA9 1D 00 02         [ 2] 2312         subw x,#CELLL ; space for udh 
      000BAC 91 CE 24         [ 5] 2313         ldw y,[YTEMP] ; udh 
      000BAF FF               [ 2] 2314         ldw (x),y 
      000BB0 90 AE 00 02      [ 2] 2315         ldw y,#2
      000BB4 91 DE 24         [ 5] 2316         ldw y,([YTEMP],y) ; udl 
      000BB7 EF 02            [ 2] 2317         ldw (2,x),y
      000BB9 81               [ 4] 2318         ret 
                                   2319 
                                   2320 ;       COUNT   ( b -- b +n )
                                   2321 ;       Return count byte of a string
                                   2322 ;       and add 1 to byte address.
      000BBA 0B 9F                 2323         .word      LINK
                           000BBC  2324 LINK = . 
      000BBC 05                    2325         .byte      5
      000BBD 43 4F 55 4E 54        2326         .ascii     "COUNT"
      000BC2                       2327 COUNT:
      000BC2 90 93            [ 1] 2328         ldw y,x 
      000BC4 90 FE            [ 2] 2329         ldw y,(y) ; address 
      000BC6 90 F6            [ 1] 2330         ld a,(y)  ; count 
      000BC8 90 5C            [ 1] 2331         incw y 
      000BCA FF               [ 2] 2332         ldw (x),y 
      000BCB 1D 00 02         [ 2] 2333         subw x,#CELLL 
      000BCE E7 01            [ 1] 2334         ld (1,x),a 
      000BD0 7F               [ 1] 2335         clr (x)
      000BD1 81               [ 4] 2336         ret 
                                   2337 
                                   2338 ;       HERE    ( -- a )
                                   2339 ;       Return  top of  variables
      000BD2 0B BC                 2340         .word      LINK
                           000BD4  2341 LINK = . 
      000BD4 04                    2342         .byte      4
      000BD5 48 45 52 45           2343         .ascii     "HERE"
      000BD9                       2344 HERE:
      000BD9 90 AE 00 16      [ 2] 2345       	ldw y,#UVP 
      000BDD 90 FE            [ 2] 2346         ldw y,(y)
      000BDF 1D 00 02         [ 2] 2347         subw x,#CELLL 
      000BE2 FF               [ 2] 2348         ldw (x),y 
      000BE3 81               [ 4] 2349         ret 
                                   2350 
                                   2351 ;       PAD     ( -- a )
                                   2352 ;       Return address of text buffer
                                   2353 ;       above  code dictionary.
      000BE4 0B D4                 2354         .word      LINK
                           000BE6  2355 LINK = . 
      000BE6 03                    2356         .byte      3
      000BE7 50 41 44              2357         .ascii     "PAD"
      000BEA                       2358 PAD:
      000BEA CD 0B D9         [ 4] 2359         CALL     HERE
      000BED CD 04 65         [ 4] 2360         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BF0 00 50                 2361         .word      80
      000BF2 CC 07 85         [ 2] 2362         JP     PLUS
                                   2363 
                                   2364 ;       TIB     ( -- a )
                                   2365 ;       Return address of terminal input buffer.
      000BF5 0B E6                 2366         .word      LINK
                           000BF7  2367 LINK = . 
      000BF7 03                    2368         .byte      3
      000BF8 54 49 42              2369         .ascii     "TIB"
      000BFB                       2370 TIB:
      000BFB CD 06 75         [ 4] 2371         CALL     NTIB
      000BFE CD 0A 54         [ 4] 2372         CALL     CELLP
      000C01 CC 04 E3         [ 2] 2373         JP     AT
                                   2374 
                                   2375 ;       @EXECUTE        ( a -- )
                                   2376 ;       Execute vector stored in address a.
      000C04 0B F7                 2377         .word      LINK
                           000C06  2378 LINK = . 
      000C06 08                    2379         .byte      8
      000C07 40 45 58 45 43 55 54  2380         .ascii     "@EXECUTE"
             45
      000C0F                       2381 ATEXE:
      000C0F CD 04 E3         [ 4] 2382         CALL     AT
      000C12 CD 07 34         [ 4] 2383         CALL     QDUP    ;?address or zero
      000C15 CD 04 98         [ 4] 2384         CALL     QBRAN
      000C18 0C 1D                 2385         .word      EXE1
      000C1A CD 04 BF         [ 4] 2386         CALL     EXECU   ;execute if non-zero
      000C1D 81               [ 4] 2387 EXE1:   RET     ;do nothing if zero
                                   2388 
                                   2389 ;       CMOVE   ( b1 b2 u -- )
                                   2390 ;       Copy u bytes from b1 to b2.
      000C1E 0C 06                 2391         .word      LINK
                           000C20  2392 LINK = . 
      000C20 05                    2393         .byte      5
      000C21 43 4D 4F 56 45        2394         .ascii     "CMOVE"
      000C26                       2395 CMOVE:
      000C26 CD 05 53         [ 4] 2396         CALL	TOR
      000C29 CD 04 AF         [ 4] 2397         CALL	BRAN
      000C2C 0C 46                 2398         .word	CMOV2
      000C2E CD 05 53         [ 4] 2399 CMOV1:	CALL	TOR
      000C31 CD 05 8A         [ 4] 2400         CALL	DUPP
      000C34 CD 05 01         [ 4] 2401         CALL	CAT
      000C37 CD 05 47         [ 4] 2402         CALL	RAT
      000C3A CD 04 F0         [ 4] 2403         CALL	CSTOR
      000C3D CD 0A 7F         [ 4] 2404         CALL	ONEP
      000C40 CD 05 34         [ 4] 2405         CALL	RFROM
      000C43 CD 0A 7F         [ 4] 2406         CALL	ONEP
      000C46 CD 04 79         [ 4] 2407 CMOV2:	CALL	DONXT
      000C49 0C 2E                 2408         .word	CMOV1
      000C4B CC 07 65         [ 2] 2409         JP	DDROP
                                   2410 
                                   2411 ;       FILL    ( b u c -- )
                                   2412 ;       Fill u bytes of character c
                                   2413 ;       to area beginning at b.
      000C4E 0C 20                 2414         .word       LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                           000C50  2415 LINK = . 
      000C50 04                    2416         .byte       4
      000C51 46 49 4C 4C           2417         .ascii     "FILL"
      000C55                       2418 FILL:
      000C55 90 93            [ 1] 2419         ldw y,x 
      000C57 90 E6 01         [ 1] 2420         ld a,(1,y) ; c 
      000C5A 1C 00 02         [ 2] 2421         addw x,#CELLL ; drop c 
      000C5D 90 93            [ 1] 2422         ldw y,x 
      000C5F 90 FE            [ 2] 2423         ldw y,(y) ; count
      000C61 90 89            [ 2] 2424         pushw y 
      000C63 1C 00 02         [ 2] 2425         addw x,#CELLL ; drop u 
      000C66 90 93            [ 1] 2426         ldw y,x 
      000C68 1C 00 02         [ 2] 2427         addw x,#CELLL ; drop b 
      000C6B 90 FE            [ 2] 2428         ldw y,(y) ; address
      000C6D 90 BF 24         [ 2] 2429         ldw YTEMP,y
      000C70 90 85            [ 2] 2430         popw y ; count 
      000C72                       2431 FILL1:  
      000C72 92 C7 24         [ 4] 2432         ld [YTEMP],a 
      000C75 3C 25            [ 1] 2433         inc YTEMP+1
      000C77 24 02            [ 1] 2434         jrnc FILL2 
      000C79 3C 24            [ 1] 2435         inc YTEMP
      000C7B                       2436 FILL2: 
      000C7B 90 5A            [ 2] 2437         decw y ; count 
      000C7D 26 F3            [ 1] 2438         jrne FILL1  
      000C7F 81               [ 4] 2439         ret 
                                   2440 
                                   2441 ;       ERASE   ( b u -- )
                                   2442 ;       Erase u bytes beginning at b.
      000C80 0C 50                 2443         .word      LINK
                           000C82  2444 LINK = . 
      000C82 05                    2445         .byte      5
      000C83 45 52 41 53 45        2446         .ascii     "ERASE"
      000C88                       2447 ERASE:
      000C88 90 5F            [ 1] 2448         clrw y 
      000C8A 1D 00 02         [ 2] 2449         subw x,#CELLL 
      000C8D FF               [ 2] 2450         ldw (x),y 
      000C8E CC 0C 55         [ 2] 2451         jp FILL 
                                   2452 
                                   2453 
                                   2454 ;       PACK0   ( b u a -- a )
                                   2455 ;       Build a counted string with
                                   2456 ;       u characters from b. Null fill.
      000C91 0C 82                 2457         .word      LINK
                           000C93  2458 LINK = . 
      000C93 05                    2459         .byte      5
      000C94 50 41 43 4B 30        2460         .ascii     "PACK0"
      000C99                       2461 PACKS:
      000C99 CD 05 8A         [ 4] 2462         CALL     DUPP
      000C9C CD 05 53         [ 4] 2463         CALL     TOR     ;strings only on cell boundary
      000C9F CD 07 70         [ 4] 2464         CALL     DDUP
      000CA2 CD 04 F0         [ 4] 2465         CALL     CSTOR
      000CA5 CD 0A 7F         [ 4] 2466         CALL     ONEP ;save count
      000CA8 CD 05 9A         [ 4] 2467         CALL     SWAPP
      000CAB CD 0C 26         [ 4] 2468         CALL     CMOVE
      000CAE CD 05 34         [ 4] 2469         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CB1 81               [ 4] 2470         RET
                                   2471 
                                   2472 ;; Numeric output, single precision
                                   2473 
                                   2474 ;       DIGIT   ( u -- c )
                                   2475 ;       Convert digit u to a character.
      000CB2 0C 93                 2476         .word      LINK
                           000CB4  2477 LINK = . 
      000CB4 05                    2478         .byte      5
      000CB5 44 49 47 49 54        2479         .ascii     "DIGIT"
      000CBA                       2480 DIGIT:
      000CBA CD 04 65         [ 4] 2481         CALL	DOLIT
      000CBD 00 09                 2482         .word	9
      000CBF CD 05 B4         [ 4] 2483         CALL	OVER
      000CC2 CD 08 63         [ 4] 2484         CALL	LESS
      000CC5 CD 04 65         [ 4] 2485         CALL	DOLIT
      000CC8 00 07                 2486         .word	7
      000CCA CD 05 D6         [ 4] 2487         CALL	ANDD
      000CCD CD 07 85         [ 4] 2488         CALL	PLUS
      000CD0 CD 04 65         [ 4] 2489         CALL	DOLIT
      000CD3 00 30                 2490         .word	48	;'0'
      000CD5 CC 07 85         [ 2] 2491         JP	PLUS
                                   2492 
                                   2493 ;       EXTRACT ( n base -- n c )
                                   2494 ;       Extract least significant digit from n.
      000CD8 0C B4                 2495         .word      LINK
                           000CDA  2496 LINK = . 
      000CDA 07                    2497         .byte      7
      000CDB 45 58 54 52 41 43 54  2498         .ascii     "EXTRACT"
      000CE2                       2499 EXTRC:
      000CE2 CD 0A EB         [ 4] 2500         CALL     ZERO
      000CE5 CD 05 9A         [ 4] 2501         CALL     SWAPP
      000CE8 CD 08 DB         [ 4] 2502         CALL     UMMOD
      000CEB CD 05 9A         [ 4] 2503         CALL     SWAPP
      000CEE CC 0C BA         [ 2] 2504         JP     DIGIT
                                   2505 
                                   2506 ;       <#      ( -- )
                                   2507 ;       Initiate  numeric output process.
      000CF1 0C DA                 2508         .word      LINK
                           000CF3  2509 LINK = . 
      000CF3 02                    2510         .byte      2
      000CF4 3C 23                 2511         .ascii     "<#"
      000CF6                       2512 BDIGS:
      000CF6 CD 0B EA         [ 4] 2513         CALL     PAD
      000CF9 CD 06 B7         [ 4] 2514         CALL     HLD
      000CFC CC 04 CC         [ 2] 2515         JP     STORE
                                   2516 
                                   2517 ;       HOLD    ( c -- )
                                   2518 ;       Insert a character into output string.
      000CFF 0C F3                 2519         .word      LINK
                           000D01  2520 LINK = . 
      000D01 04                    2521         .byte      4
      000D02 48 4F 4C 44           2522         .ascii     "HOLD"
      000D06                       2523 HOLD:
      000D06 CD 06 B7         [ 4] 2524         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D09 CD 04 E3         [ 4] 2525         CALL     AT
      000D0C CD 0A 8C         [ 4] 2526         CALL     ONEM
      000D0F CD 05 8A         [ 4] 2527         CALL     DUPP
      000D12 CD 06 B7         [ 4] 2528         CALL     HLD
      000D15 CD 04 CC         [ 4] 2529         CALL     STORE
      000D18 CC 04 F0         [ 2] 2530         JP     CSTOR
                                   2531 
                                   2532 ;       #       ( u -- u )
                                   2533 ;       Extract one digit from u and
                                   2534 ;       append digit to output string.
      000D1B 0D 01                 2535         .word      LINK
                           000D1D  2536 LINK = . 
      000D1D 01                    2537         .byte      1
      000D1E 23                    2538         .ascii     "#"
      000D1F                       2539 DIG:
      000D1F CD 06 47         [ 4] 2540         CALL     BASE
      000D22 CD 04 E3         [ 4] 2541         CALL     AT
      000D25 CD 0C E2         [ 4] 2542         CALL     EXTRC
      000D28 CC 0D 06         [ 2] 2543         JP     HOLD
                                   2544 
                                   2545 ;       #S      ( u -- 0 )
                                   2546 ;       Convert u until all digits
                                   2547 ;       are added to output string.
      000D2B 0D 1D                 2548         .word      LINK
                           000D2D  2549 LINK = . 
      000D2D 02                    2550         .byte      2
      000D2E 23 53                 2551         .ascii     "#S"
      000D30                       2552 DIGS:
      000D30 CD 0D 1F         [ 4] 2553 DIGS1:  CALL     DIG
      000D33 CD 05 8A         [ 4] 2554         CALL     DUPP
      000D36 CD 04 98         [ 4] 2555         CALL     QBRAN
      000D39 0D 3D                 2556         .word      DIGS2
      000D3B 20 F3            [ 2] 2557         JRA     DIGS1
      000D3D 81               [ 4] 2558 DIGS2:  RET
                                   2559 
                                   2560 ;       SIGN    ( n -- )
                                   2561 ;       Add a minus sign to
                                   2562 ;       numeric output string.
      000D3E 0D 2D                 2563         .word      LINK
                           000D40  2564 LINK = . 
      000D40 04                    2565         .byte      4
      000D41 53 49 47 4E           2566         .ascii     "SIGN"
      000D45                       2567 SIGN:
      000D45 CD 05 C3         [ 4] 2568         CALL     ZLESS
      000D48 CD 04 98         [ 4] 2569         CALL     QBRAN
      000D4B 0D 55                 2570         .word      SIGN1
      000D4D CD 04 65         [ 4] 2571         CALL     DOLIT
      000D50 00 2D                 2572         .word      45	;"-"
      000D52 CC 0D 06         [ 2] 2573         JP     HOLD
      000D55 81               [ 4] 2574 SIGN1:  RET
                                   2575 
                                   2576 ;       #>      ( w -- b u )
                                   2577 ;       Prepare output string.
      000D56 0D 40                 2578         .word      LINK
                           000D58  2579 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D58 02                    2580         .byte      2
      000D59 23 3E                 2581         .ascii     "#>"
      000D5B                       2582 EDIGS:
      000D5B CD 05 80         [ 4] 2583         CALL     DROP
      000D5E CD 06 B7         [ 4] 2584         CALL     HLD
      000D61 CD 04 E3         [ 4] 2585         CALL     AT
      000D64 CD 0B EA         [ 4] 2586         CALL     PAD
      000D67 CD 05 B4         [ 4] 2587         CALL     OVER
      000D6A CC 07 FE         [ 2] 2588         JP     SUBB
                                   2589 
                                   2590 ;       str     ( w -- b u )
                                   2591 ;       Convert a signed integer
                                   2592 ;       to a numeric string.
      000D6D 0D 58                 2593         .word      LINK
                           000D6F  2594 LINK = . 
      000D6F 03                    2595         .byte      3
      000D70 53 54 52              2596         .ascii     "STR"
      000D73                       2597 STR:
      000D73 CD 05 8A         [ 4] 2598         CALL     DUPP
      000D76 CD 05 53         [ 4] 2599         CALL     TOR
      000D79 CD 08 18         [ 4] 2600         CALL     ABSS
      000D7C CD 0C F6         [ 4] 2601         CALL     BDIGS
      000D7F CD 0D 30         [ 4] 2602         CALL     DIGS
      000D82 CD 05 34         [ 4] 2603         CALL     RFROM
      000D85 CD 0D 45         [ 4] 2604         CALL     SIGN
      000D88 CC 0D 5B         [ 2] 2605         JP     EDIGS
                                   2606 
                                   2607 ;       HEX     ( -- )
                                   2608 ;       Use radix 16 as base for
                                   2609 ;       numeric conversions.
      000D8B 0D 6F                 2610         .word      LINK
                           000D8D  2611 LINK = . 
      000D8D 03                    2612         .byte      3
      000D8E 48 45 58              2613         .ascii     "HEX"
      000D91                       2614 HEX:
      000D91 CD 04 65         [ 4] 2615         CALL     DOLIT
      000D94 00 10                 2616         .word      16
      000D96 CD 06 47         [ 4] 2617         CALL     BASE
      000D99 CC 04 CC         [ 2] 2618         JP     STORE
                                   2619 
                                   2620 ;       DECIMAL ( -- )
                                   2621 ;       Use radix 10 as base
                                   2622 ;       for numeric conversions.
      000D9C 0D 8D                 2623         .word      LINK
                           000D9E  2624 LINK = . 
      000D9E 07                    2625         .byte      7
      000D9F 44 45 43 49 4D 41 4C  2626         .ascii     "DECIMAL"
      000DA6                       2627 DECIM:
      000DA6 CD 04 65         [ 4] 2628         CALL     DOLIT
      000DA9 00 0A                 2629         .word      10
      000DAB CD 06 47         [ 4] 2630         CALL     BASE
      000DAE CC 04 CC         [ 2] 2631         JP     STORE
                                   2632 
                                   2633 ;; Numeric input, single precision
                                   2634 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2635 ;       DIGIT?  ( c base -- u t )
                                   2636 ;       Convert a character to its numeric
                                   2637 ;       value. A flag indicates success.
      000DB1 0D 9E                 2638         .word      LINK
                           000DB3  2639 LINK = . 
      000DB3 06                    2640         .byte       6
      000DB4 44 49 47 49 54 3F     2641         .ascii     "DIGIT?"
      000DBA                       2642 DIGTQ:
      000DBA CD 05 53         [ 4] 2643         CALL     TOR
      000DBD CD 04 65         [ 4] 2644         CALL     DOLIT
      000DC0 00 30                 2645         .word     48	; "0"
      000DC2 CD 07 FE         [ 4] 2646         CALL     SUBB
      000DC5 CD 04 65         [ 4] 2647         CALL     DOLIT
      000DC8 00 09                 2648         .word      9
      000DCA CD 05 B4         [ 4] 2649         CALL     OVER
      000DCD CD 08 63         [ 4] 2650         CALL     LESS
      000DD0 CD 04 98         [ 4] 2651         CALL     QBRAN
      000DD3 0D EB                 2652         .word      DGTQ1
      000DD5 CD 04 65         [ 4] 2653         CALL     DOLIT
      000DD8 00 07                 2654         .word      7
      000DDA CD 07 FE         [ 4] 2655         CALL     SUBB
      000DDD CD 05 8A         [ 4] 2656         CALL     DUPP
      000DE0 CD 04 65         [ 4] 2657         CALL     DOLIT
      000DE3 00 0A                 2658         .word      10
      000DE5 CD 08 63         [ 4] 2659         CALL     LESS
      000DE8 CD 05 EA         [ 4] 2660         CALL     ORR
      000DEB CD 05 8A         [ 4] 2661 DGTQ1:  CALL     DUPP
      000DEE CD 05 34         [ 4] 2662         CALL     RFROM
      000DF1 CC 08 45         [ 2] 2663         JP     ULESS
                                   2664 
                                   2665 ;       NUMBER? ( a -- n T | a F )
                                   2666 ;       Convert a number string to
                                   2667 ;       integer. Push a flag on tos.
      000DF4 0D B3                 2668         .word      LINK
                           000DF6  2669 LINK = . 
      000DF6 07                    2670         .byte      7
      000DF7 4E 55 4D 42 45 52 3F  2671         .ascii     "NUMBER?"
      000DFE                       2672 NUMBQ:
      000DFE CD 06 47         [ 4] 2673         CALL     BASE
      000E01 CD 04 E3         [ 4] 2674         CALL     AT
      000E04 CD 05 53         [ 4] 2675         CALL     TOR
      000E07 CD 0A EB         [ 4] 2676         CALL     ZERO
      000E0A CD 05 B4         [ 4] 2677         CALL     OVER
      000E0D CD 0B C2         [ 4] 2678         CALL     COUNT
      000E10 CD 05 B4         [ 4] 2679         CALL     OVER
      000E13 CD 05 01         [ 4] 2680         CALL     CAT
      000E16 CD 04 65         [ 4] 2681         CALL     DOLIT
      000E19 00 24                 2682         .word     36	; "0x"
      000E1B CD 08 26         [ 4] 2683         CALL     EQUAL
      000E1E CD 04 98         [ 4] 2684         CALL     QBRAN
      000E21 0E 32                 2685         .word      NUMQ1
      000E23 CD 0D 91         [ 4] 2686         CALL     HEX
      000E26 CD 05 9A         [ 4] 2687         CALL     SWAPP
      000E29 CD 0A 7F         [ 4] 2688         CALL     ONEP
      000E2C CD 05 9A         [ 4] 2689         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E2F CD 0A 8C         [ 4] 2690         CALL     ONEM
      000E32 CD 05 B4         [ 4] 2691 NUMQ1:  CALL     OVER
      000E35 CD 05 01         [ 4] 2692         CALL     CAT
      000E38 CD 04 65         [ 4] 2693         CALL     DOLIT
      000E3B 00 2D                 2694         .word     45	; "-"
      000E3D CD 08 26         [ 4] 2695         CALL     EQUAL
      000E40 CD 05 53         [ 4] 2696         CALL     TOR
      000E43 CD 05 9A         [ 4] 2697         CALL     SWAPP
      000E46 CD 05 47         [ 4] 2698         CALL     RAT
      000E49 CD 07 FE         [ 4] 2699         CALL     SUBB
      000E4C CD 05 9A         [ 4] 2700         CALL     SWAPP
      000E4F CD 05 47         [ 4] 2701         CALL     RAT
      000E52 CD 07 85         [ 4] 2702         CALL     PLUS
      000E55 CD 07 34         [ 4] 2703         CALL     QDUP
      000E58 CD 04 98         [ 4] 2704         CALL     QBRAN
      000E5B 0E BC                 2705         .word      NUMQ6
      000E5D CD 0A 8C         [ 4] 2706         CALL     ONEM
      000E60 CD 05 53         [ 4] 2707         CALL     TOR
      000E63 CD 05 8A         [ 4] 2708 NUMQ2:  CALL     DUPP
      000E66 CD 05 53         [ 4] 2709         CALL     TOR
      000E69 CD 05 01         [ 4] 2710         CALL     CAT
      000E6C CD 06 47         [ 4] 2711         CALL     BASE
      000E6F CD 04 E3         [ 4] 2712         CALL     AT
      000E72 CD 0D BA         [ 4] 2713         CALL     DIGTQ
      000E75 CD 04 98         [ 4] 2714         CALL     QBRAN
      000E78 0E AA                 2715         .word      NUMQ4
      000E7A CD 05 9A         [ 4] 2716         CALL     SWAPP
      000E7D CD 06 47         [ 4] 2717         CALL     BASE
      000E80 CD 04 E3         [ 4] 2718         CALL     AT
      000E83 CD 09 FE         [ 4] 2719         CALL     STAR
      000E86 CD 07 85         [ 4] 2720         CALL     PLUS
      000E89 CD 05 34         [ 4] 2721         CALL     RFROM
      000E8C CD 0A 7F         [ 4] 2722         CALL     ONEP
      000E8F CD 04 79         [ 4] 2723         CALL     DONXT
      000E92 0E 63                 2724         .word      NUMQ2
      000E94 CD 05 47         [ 4] 2725         CALL     RAT
      000E97 CD 05 9A         [ 4] 2726         CALL     SWAPP
      000E9A CD 05 80         [ 4] 2727         CALL     DROP
      000E9D CD 04 98         [ 4] 2728         CALL     QBRAN
      000EA0 0E A5                 2729         .word      NUMQ3
      000EA2 CD 07 B0         [ 4] 2730         CALL     NEGAT
      000EA5 CD 05 9A         [ 4] 2731 NUMQ3:  CALL     SWAPP
      000EA8 20 0F            [ 2] 2732         JRA     NUMQ5
      000EAA CD 05 34         [ 4] 2733 NUMQ4:  CALL     RFROM
      000EAD CD 05 34         [ 4] 2734         CALL     RFROM
      000EB0 CD 07 65         [ 4] 2735         CALL     DDROP
      000EB3 CD 07 65         [ 4] 2736         CALL     DDROP
      000EB6 CD 0A EB         [ 4] 2737         CALL     ZERO
      000EB9 CD 05 8A         [ 4] 2738 NUMQ5:  CALL     DUPP
      000EBC CD 05 34         [ 4] 2739 NUMQ6:  CALL     RFROM
      000EBF CD 07 65         [ 4] 2740         CALL     DDROP
      000EC2 CD 05 34         [ 4] 2741         CALL     RFROM
      000EC5 CD 06 47         [ 4] 2742         CALL     BASE
      000EC8 CC 04 CC         [ 2] 2743         JP     STORE
                                   2744 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2745 ;; Basic I/O
                                   2746 
                                   2747 ;       KEY     ( -- c )
                                   2748 ;       Wait for and return an
                                   2749 ;       input character.
      000ECB 0D F6                 2750         .word      LINK
                           000ECD  2751 LINK = . 
      000ECD 03                    2752         .byte      3
      000ECE 4B 45 59              2753         .ascii     "KEY"
      000ED1                       2754 KEY:
      000ED1 72 0B 52 40 FB   [ 2] 2755         btjf UART_SR,#UART_SR_RXNE,. 
      000ED6 C6 52 41         [ 1] 2756         ld a,UART_DR 
      000ED9 1D 00 02         [ 2] 2757         subw x,#CELLL 
      000EDC E7 01            [ 1] 2758         ld (1,x),a 
      000EDE 7F               [ 1] 2759         clr (x)
      000EDF 81               [ 4] 2760         ret 
                                   2761 
                                   2762 ;       NUF?    ( -- t )
                                   2763 ;       Return false if no input,
                                   2764 ;       else pause and if CR return true.
      000EE0 0E CD                 2765         .word      LINK
                           000EE2  2766 LINK = . 
      000EE2 04                    2767         .byte      4
      000EE3 4E 55 46 3F           2768         .ascii     "NUF?"
      000EE7                       2769 NUFQ:
      000EE7 CD 04 06         [ 4] 2770         CALL     QKEY
      000EEA CD 05 8A         [ 4] 2771         CALL     DUPP
      000EED CD 04 98         [ 4] 2772         CALL     QBRAN
      000EF0 0F 00                 2773         .word    NUFQ1
      000EF2 CD 07 65         [ 4] 2774         CALL     DDROP
      000EF5 CD 0E D1         [ 4] 2775         CALL     KEY
      000EF8 CD 04 65         [ 4] 2776         CALL     DOLIT
      000EFB 00 0D                 2777         .word      CRR
      000EFD CC 08 26         [ 2] 2778         JP     EQUAL
      000F00 81               [ 4] 2779 NUFQ1:  RET
                                   2780 
                                   2781 ;       SPACE   ( -- )
                                   2782 ;       Send  blank character to
                                   2783 ;       output device.
      000F01 0E E2                 2784         .word      LINK
                           000F03  2785 LINK = . 
      000F03 05                    2786         .byte      5
      000F04 53 50 41 43 45        2787         .ascii     "SPACE"
      000F09                       2788 SPACE:
      000F09 CD 0A DE         [ 4] 2789         CALL     BLANK
      000F0C CC 04 24         [ 2] 2790         JP     EMIT
                                   2791 
                                   2792 ;       SPACES  ( +n -- )
                                   2793 ;       Send n spaces to output device.
      000F0F 0F 03                 2794         .word      LINK
                           000F11  2795 LINK = . 
      000F11 06                    2796         .byte      6
      000F12 53 50 41 43 45 53     2797         .ascii     "SPACES"
      000F18                       2798 SPACS:
      000F18 CD 0A EB         [ 4] 2799         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F1B CD 08 83         [ 4] 2800         CALL     MAX
      000F1E CD 05 53         [ 4] 2801         CALL     TOR
      000F21 20 03            [ 2] 2802         JRA      CHAR2
      000F23 CD 0F 09         [ 4] 2803 CHAR1:  CALL     SPACE
      000F26 CD 04 79         [ 4] 2804 CHAR2:  CALL     DONXT
      000F29 0F 23                 2805         .word    CHAR1
      000F2B 81               [ 4] 2806         RET
                                   2807 
                                   2808 ;       TYPE    ( b u -- )
                                   2809 ;       Output u characters from b.
      000F2C 0F 11                 2810         .word      LINK
                           000F2E  2811 LINK = . 
      000F2E 04                    2812         .byte      4
      000F2F 54 59 50 45           2813         .ascii     "TYPE"
      000F33                       2814 TYPES:
      000F33 CD 05 53         [ 4] 2815         CALL     TOR
      000F36 20 0C            [ 2] 2816         JRA     TYPE2
      000F38 CD 05 8A         [ 4] 2817 TYPE1:  CALL     DUPP
      000F3B CD 05 01         [ 4] 2818         CALL     CAT
      000F3E CD 04 24         [ 4] 2819         CALL     EMIT
      000F41 CD 0A 7F         [ 4] 2820         CALL     ONEP
      000F44 CD 04 79         [ 4] 2821 TYPE2:  CALL     DONXT
      000F47 0F 38                 2822         .word      TYPE1
      000F49 CC 05 80         [ 2] 2823         JP     DROP
                                   2824 
                                   2825 ;       CR      ( -- )
                                   2826 ;       Output a carriage return
                                   2827 ;       and a line feed.
      000F4C 0F 2E                 2828         .word      LINK
                           000F4E  2829 LINK = . 
      000F4E 02                    2830         .byte      2
      000F4F 43 52                 2831         .ascii     "CR"
      000F51                       2832 CR:
      000F51 CD 04 65         [ 4] 2833         CALL     DOLIT
      000F54 00 0D                 2834         .word      CRR
      000F56 CD 04 24         [ 4] 2835         CALL     EMIT
      000F59 CD 04 65         [ 4] 2836         CALL     DOLIT
      000F5C 00 0A                 2837         .word      LF
      000F5E CC 04 24         [ 2] 2838         JP     EMIT
                                   2839 
                                   2840 ;       do$     ( -- a )
                                   2841 ;       Return  address of a compiled
                                   2842 ;       string.
      000F61 0F 4E                 2843         .word      LINK
                           000F63  2844 LINK = . 
      000F63 43                    2845 	.byte      COMPO+3
      000F64 44 4F 24              2846         .ascii     "DO$"
      000F67                       2847 DOSTR:
      000F67 CD 05 34         [ 4] 2848         CALL     RFROM
      000F6A CD 05 47         [ 4] 2849         CALL     RAT
      000F6D CD 05 34         [ 4] 2850         CALL     RFROM
      000F70 CD 0B C2         [ 4] 2851         CALL     COUNT
      000F73 CD 07 85         [ 4] 2852         CALL     PLUS
      000F76 CD 05 53         [ 4] 2853         CALL     TOR
      000F79 CD 05 9A         [ 4] 2854         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F7C CD 05 53         [ 4] 2855         CALL     TOR
      000F7F 81               [ 4] 2856         RET
                                   2857 
                                   2858 ;       $"|     ( -- a )
                                   2859 ;       Run time routine compiled by $".
                                   2860 ;       Return address of a compiled string.
      000F80 0F 63                 2861         .word      LINK
                           000F82  2862 LINK = . 
      000F82 43                    2863 	.byte      COMPO+3
      000F83 24 22 7C              2864         .byte     '$','"','|'
      000F86                       2865 STRQP:
      000F86 CD 0F 67         [ 4] 2866         CALL     DOSTR
      000F89 81               [ 4] 2867         RET
                                   2868 
                                   2869 ;       ."|     ( -- )
                                   2870 ;       Run time routine of ." .
                                   2871 ;       Output a compiled string.
      000F8A 0F 82                 2872         .word      LINK
                           000F8C  2873 LINK = . 
      000F8C 43                    2874 	.byte      COMPO+3
      000F8D 2E 22 7C              2875         .byte     '.','"','|'
      000F90                       2876 DOTQP:
      000F90 CD 0F 67         [ 4] 2877         CALL     DOSTR
      000F93 CD 0B C2         [ 4] 2878         CALL     COUNT
      000F96 CC 0F 33         [ 2] 2879         JP     TYPES
                                   2880 
                                   2881 ;       .R      ( n +n -- )
                                   2882 ;       Display an integer in a field
                                   2883 ;       of n columns, right justified.
      000F99 0F 8C                 2884         .word      LINK
                           000F9B  2885 LINK = . 
      000F9B 02                    2886         .byte      2
      000F9C 2E 52                 2887         .ascii     ".R"
      000F9E                       2888 DOTR:
      000F9E CD 05 53         [ 4] 2889         CALL     TOR
      000FA1 CD 0D 73         [ 4] 2890         CALL     STR
      000FA4 CD 05 34         [ 4] 2891         CALL     RFROM
      000FA7 CD 05 B4         [ 4] 2892         CALL     OVER
      000FAA CD 07 FE         [ 4] 2893         CALL     SUBB
      000FAD CD 0F 18         [ 4] 2894         CALL     SPACS
      000FB0 CC 0F 33         [ 2] 2895         JP     TYPES
                                   2896 
                                   2897 ;       U.R     ( u +n -- )
                                   2898 ;       Display an unsigned integer
                                   2899 ;       in n column, right justified.
      000FB3 0F 9B                 2900         .word      LINK
                           000FB5  2901 LINK = . 
      000FB5 03                    2902         .byte      3
      000FB6 55 2E 52              2903         .ascii     "U.R"
      000FB9                       2904 UDOTR:
      000FB9 CD 05 53         [ 4] 2905         CALL     TOR
      000FBC CD 0C F6         [ 4] 2906         CALL     BDIGS
      000FBF CD 0D 30         [ 4] 2907         CALL     DIGS
      000FC2 CD 0D 5B         [ 4] 2908         CALL     EDIGS
      000FC5 CD 05 34         [ 4] 2909         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FC8 CD 05 B4         [ 4] 2910         CALL     OVER
      000FCB CD 07 FE         [ 4] 2911         CALL     SUBB
      000FCE CD 0F 18         [ 4] 2912         CALL     SPACS
      000FD1 CC 0F 33         [ 2] 2913         JP     TYPES
                                   2914 
                                   2915 ;       U.      ( u -- )
                                   2916 ;       Display an unsigned integer
                                   2917 ;       in free format.
      000FD4 0F B5                 2918         .word      LINK
                           000FD6  2919 LINK = . 
      000FD6 02                    2920         .byte      2
      000FD7 55 2E                 2921         .ascii     "U."
      000FD9                       2922 UDOT:
      000FD9 CD 0C F6         [ 4] 2923         CALL     BDIGS
      000FDC CD 0D 30         [ 4] 2924         CALL     DIGS
      000FDF CD 0D 5B         [ 4] 2925         CALL     EDIGS
      000FE2 CD 0F 09         [ 4] 2926         CALL     SPACE
      000FE5 CC 0F 33         [ 2] 2927         JP     TYPES
                                   2928 
                                   2929 ;       .       ( w -- )
                                   2930 ;       Display an integer in free
                                   2931 ;       format, preceeded by a space.
      000FE8 0F D6                 2932         .word      LINK
                           000FEA  2933 LINK = . 
      000FEA 01                    2934         .byte      1
      000FEB 2E                    2935         .ascii     "."
      000FEC                       2936 DOT:
      000FEC CD 06 47         [ 4] 2937         CALL     BASE
      000FEF CD 04 E3         [ 4] 2938         CALL     AT
      000FF2 CD 04 65         [ 4] 2939         CALL     DOLIT
      000FF5 00 0A                 2940         .word      10
      000FF7 CD 05 FF         [ 4] 2941         CALL     XORR    ;?decimal
      000FFA CD 04 98         [ 4] 2942         CALL     QBRAN
      000FFD 10 02                 2943         .word      DOT1
      000FFF CC 0F D9         [ 2] 2944         JP     UDOT
      001002 CD 0D 73         [ 4] 2945 DOT1:   CALL     STR
      001005 CD 0F 09         [ 4] 2946         CALL     SPACE
      001008 CC 0F 33         [ 2] 2947         JP     TYPES
                                   2948 
                                   2949 ;       ?       ( a -- )
                                   2950 ;       Display contents in memory cell.
      00100B 0F EA                 2951         .word      LINK
                                   2952         
                           00100D  2953 LINK = . 
      00100D 01                    2954         .byte      1
      00100E 3F                    2955         .ascii     "?"
      00100F                       2956 QUEST:
      00100F CD 04 E3         [ 4] 2957         CALL     AT
      001012 CC 0F EC         [ 2] 2958         JP     DOT
                                   2959 
                                   2960 ;; Parsing
                                   2961 
                                   2962 ;       parse   ( b u c -- b u delta ; <string> )
                                   2963 ;       Scan string delimited by c.
                                   2964 ;       Return found string and its offset.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001015 10 0D                 2965         .word      LINK
                           001017  2966 LINK = . 
      001017 05                    2967         .byte      5
      001018 70 61 72 73 65        2968         .ascii     "parse"
      00101D                       2969 PARS:
      00101D CD 06 56         [ 4] 2970         CALL     TEMP
      001020 CD 04 CC         [ 4] 2971         CALL     STORE
      001023 CD 05 B4         [ 4] 2972         CALL     OVER
      001026 CD 05 53         [ 4] 2973         CALL     TOR
      001029 CD 05 8A         [ 4] 2974         CALL     DUPP
      00102C CD 04 98         [ 4] 2975         CALL     QBRAN
      00102F 10 D5                 2976         .word    PARS8
      001031 CD 0A 8C         [ 4] 2977         CALL     ONEM
      001034 CD 06 56         [ 4] 2978         CALL     TEMP
      001037 CD 04 E3         [ 4] 2979         CALL     AT
      00103A CD 0A DE         [ 4] 2980         CALL     BLANK
      00103D CD 08 26         [ 4] 2981         CALL     EQUAL
      001040 CD 04 98         [ 4] 2982         CALL     QBRAN
      001043 10 76                 2983         .word      PARS3
      001045 CD 05 53         [ 4] 2984         CALL     TOR
      001048 CD 0A DE         [ 4] 2985 PARS1:  CALL     BLANK
      00104B CD 05 B4         [ 4] 2986         CALL     OVER
      00104E CD 05 01         [ 4] 2987         CALL     CAT     ;skip leading blanks ONLY
      001051 CD 07 FE         [ 4] 2988         CALL     SUBB
      001054 CD 05 C3         [ 4] 2989         CALL     ZLESS
      001057 CD 07 9F         [ 4] 2990         CALL     INVER
      00105A CD 04 98         [ 4] 2991         CALL     QBRAN
      00105D 10 73                 2992         .word      PARS2
      00105F CD 0A 7F         [ 4] 2993         CALL     ONEP
      001062 CD 04 79         [ 4] 2994         CALL     DONXT
      001065 10 48                 2995         .word      PARS1
      001067 CD 05 34         [ 4] 2996         CALL     RFROM
      00106A CD 05 80         [ 4] 2997         CALL     DROP
      00106D CD 0A EB         [ 4] 2998         CALL     ZERO
      001070 CC 05 8A         [ 2] 2999         JP     DUPP
      001073 CD 05 34         [ 4] 3000 PARS2:  CALL     RFROM
      001076 CD 05 B4         [ 4] 3001 PARS3:  CALL     OVER
      001079 CD 05 9A         [ 4] 3002         CALL     SWAPP
      00107C CD 05 53         [ 4] 3003         CALL     TOR
      00107F CD 06 56         [ 4] 3004 PARS4:  CALL     TEMP
      001082 CD 04 E3         [ 4] 3005         CALL     AT
      001085 CD 05 B4         [ 4] 3006         CALL     OVER
      001088 CD 05 01         [ 4] 3007         CALL     CAT
      00108B CD 07 FE         [ 4] 3008         CALL     SUBB    ;scan for delimiter
      00108E CD 06 56         [ 4] 3009         CALL     TEMP
      001091 CD 04 E3         [ 4] 3010         CALL     AT
      001094 CD 0A DE         [ 4] 3011         CALL     BLANK
      001097 CD 08 26         [ 4] 3012         CALL     EQUAL
      00109A CD 04 98         [ 4] 3013         CALL     QBRAN
      00109D 10 A2                 3014         .word      PARS5
      00109F CD 05 C3         [ 4] 3015         CALL     ZLESS
      0010A2 CD 04 98         [ 4] 3016 PARS5:  CALL     QBRAN
      0010A5 10 B7                 3017         .word      PARS6
      0010A7 CD 0A 7F         [ 4] 3018         CALL     ONEP
      0010AA CD 04 79         [ 4] 3019         CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010AD 10 7F                 3020         .word      PARS4
      0010AF CD 05 8A         [ 4] 3021         CALL     DUPP
      0010B2 CD 05 53         [ 4] 3022         CALL     TOR
      0010B5 20 0F            [ 2] 3023         JRA     PARS7
      0010B7 CD 05 34         [ 4] 3024 PARS6:  CALL     RFROM
      0010BA CD 05 80         [ 4] 3025         CALL     DROP
      0010BD CD 05 8A         [ 4] 3026         CALL     DUPP
      0010C0 CD 0A 7F         [ 4] 3027         CALL     ONEP
      0010C3 CD 05 53         [ 4] 3028         CALL     TOR
      0010C6 CD 05 B4         [ 4] 3029 PARS7:  CALL     OVER
      0010C9 CD 07 FE         [ 4] 3030         CALL     SUBB
      0010CC CD 05 34         [ 4] 3031         CALL     RFROM
      0010CF CD 05 34         [ 4] 3032         CALL     RFROM
      0010D2 CC 07 FE         [ 2] 3033         JP     SUBB
      0010D5 CD 05 B4         [ 4] 3034 PARS8:  CALL     OVER
      0010D8 CD 05 34         [ 4] 3035         CALL     RFROM
      0010DB CC 07 FE         [ 2] 3036         JP     SUBB
                                   3037 
                                   3038 ;       PARSE   ( c -- b u ; <string> )
                                   3039 ;       Scan input stream and return
                                   3040 ;       counted string delimited by c.
      0010DE 10 17                 3041         .word      LINK
                           0010E0  3042 LINK = . 
      0010E0 05                    3043         .byte      5
      0010E1 50 41 52 53 45        3044         .ascii     "PARSE"
      0010E6                       3045 PARSE:
      0010E6 CD 05 53         [ 4] 3046         CALL     TOR
      0010E9 CD 0B FB         [ 4] 3047         CALL     TIB
      0010EC CD 06 65         [ 4] 3048         CALL     INN
      0010EF CD 04 E3         [ 4] 3049         CALL     AT
      0010F2 CD 07 85         [ 4] 3050         CALL     PLUS    ;current input buffer pointer
      0010F5 CD 06 75         [ 4] 3051         CALL     NTIB
      0010F8 CD 04 E3         [ 4] 3052         CALL     AT
      0010FB CD 06 65         [ 4] 3053         CALL     INN
      0010FE CD 04 E3         [ 4] 3054         CALL     AT
      001101 CD 07 FE         [ 4] 3055         CALL     SUBB    ;remaining count
      001104 CD 05 34         [ 4] 3056         CALL     RFROM
      001107 CD 10 1D         [ 4] 3057         CALL     PARS
      00110A CD 06 65         [ 4] 3058         CALL     INN
      00110D CC 0B 5B         [ 2] 3059         JP     PSTOR
                                   3060 
                                   3061 ;       .(      ( -- )
                                   3062 ;       Output following string up to next ) .
      001110 10 E0                 3063         .word      LINK
                           001112  3064 LINK = . 
      001112 82                    3065 	.byte      IMEDD+2
      001113 2E 28                 3066         .ascii     ".("
      001115                       3067 DOTPR:
      001115 CD 04 65         [ 4] 3068         CALL     DOLIT
      001118 00 29                 3069         .word     41	; ")"
      00111A CD 10 E6         [ 4] 3070         CALL     PARSE
      00111D CC 0F 33         [ 2] 3071         JP     TYPES
                                   3072 
                                   3073 ;       (       ( -- )
                                   3074 ;       Ignore following string up to next ).
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3075 ;       A comment.
      001120 11 12                 3076         .word      LINK
                           001122  3077 LINK = . 
      001122 81                    3078 	.byte      IMEDD+1
      001123 28                    3079         .ascii     "("
      001124                       3080 PAREN:
      001124 CD 04 65         [ 4] 3081         CALL     DOLIT
      001127 00 29                 3082         .word     41	; ")"
      001129 CD 10 E6         [ 4] 3083         CALL     PARSE
      00112C CC 07 65         [ 2] 3084         JP     DDROP
                                   3085 
                                   3086 ;       \       ( -- )
                                   3087 ;       Ignore following text till
                                   3088 ;       end of line.
      00112F 11 22                 3089         .word      LINK
                           001131  3090 LINK = . 
      001131 81                    3091 	.byte      IMEDD+1
      001132 5C                    3092         .ascii     "\"
      001133                       3093 BKSLA:
      001133 90 AE 00 0C      [ 2] 3094         ldw y,#UCTIB ; #TIB  
      001137 90 FE            [ 2] 3095         ldw y,(y)
      001139 90 89            [ 2] 3096         pushw y ; count in TIB 
      00113B 90 AE 00 0A      [ 2] 3097         ldw y,#UINN ; >IN 
      00113F 90 BF 24         [ 2] 3098         ldw YTEMP,y
      001142 90 85            [ 2] 3099         popw y 
      001144 91 CF 24         [ 5] 3100         ldw [YTEMP],y
      001147 81               [ 4] 3101         ret 
                                   3102 
                                   3103 ;       WORD    ( c -- a ; <string> )
                                   3104 ;       Parse a word from input stream
                                   3105 ;       and copy it to code dictionary.
      001148 11 31                 3106         .word      LINK
                           00114A  3107 LINK = . 
      00114A 04                    3108         .byte      4
      00114B 57 4F 52 44           3109         .ascii     "WORD"
      00114F                       3110 WORDD:
      00114F CD 10 E6         [ 4] 3111         CALL     PARSE
      001152 CD 0B D9         [ 4] 3112         CALL     HERE
      001155 CD 0A 54         [ 4] 3113         CALL     CELLP
      001158 CC 0C 99         [ 2] 3114         JP     PACKS
                                   3115 
                                   3116 ;       TOKEN   ( -- a ; <string> )
                                   3117 ;       Parse a word from input stream
                                   3118 ;       and copy it to name dictionary.
      00115B 11 4A                 3119         .word      LINK
                           00115D  3120 LINK = . 
      00115D 05                    3121         .byte      5
      00115E 54 4F 4B 45 4E        3122         .ascii     "TOKEN"
      001163                       3123 TOKEN:
      001163 CD 0A DE         [ 4] 3124         CALL     BLANK
      001166 CC 11 4F         [ 2] 3125         JP     WORDD
                                   3126 
                                   3127 ;; Dictionary search
                                   3128 
                                   3129 ;       NAME>   ( na -- ca )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3130 ;       Return a code address given
                                   3131 ;       a name address.
      001169 11 5D                 3132         .word      LINK
                           00116B  3133 LINK = . 
      00116B 05                    3134         .byte      5
      00116C 4E 41 4D 45 3E        3135         .ascii     "NAME>"
      001171                       3136 NAMET:
      001171 CD 0B C2         [ 4] 3137         CALL     COUNT
      001174 CD 04 65         [ 4] 3138         CALL     DOLIT
      001177 00 1F                 3139         .word      31
      001179 CD 05 D6         [ 4] 3140         CALL     ANDD
      00117C CC 07 85         [ 2] 3141         JP     PLUS
                                   3142 
                                   3143 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3144 ;       Compare u cells in two
                                   3145 ;       strings. Return 0 if identical.
      00117F 11 6B                 3146         .word      LINK
                           001181  3147 LINK = . 
      001181 05                    3148         .byte       5
      001182 53 41 4D 45 3F        3149         .ascii     "SAME?"
      001187                       3150 SAMEQ:
      001187 CD 0A 8C         [ 4] 3151         CALL     ONEM
      00118A CD 05 53         [ 4] 3152         CALL     TOR
      00118D 20 29            [ 2] 3153         JRA     SAME2
      00118F CD 05 B4         [ 4] 3154 SAME1:  CALL     OVER
      001192 CD 05 47         [ 4] 3155         CALL     RAT
      001195 CD 07 85         [ 4] 3156         CALL     PLUS
      001198 CD 05 01         [ 4] 3157         CALL     CAT
      00119B CD 05 B4         [ 4] 3158         CALL     OVER
      00119E CD 05 47         [ 4] 3159         CALL     RAT
      0011A1 CD 07 85         [ 4] 3160         CALL     PLUS
      0011A4 CD 05 01         [ 4] 3161         CALL     CAT
      0011A7 CD 07 FE         [ 4] 3162         CALL     SUBB
      0011AA CD 07 34         [ 4] 3163         CALL     QDUP
      0011AD CD 04 98         [ 4] 3164         CALL     QBRAN
      0011B0 11 B8                 3165         .word      SAME2
      0011B2 CD 05 34         [ 4] 3166         CALL     RFROM
      0011B5 CC 05 80         [ 2] 3167         JP     DROP
      0011B8 CD 04 79         [ 4] 3168 SAME2:  CALL     DONXT
      0011BB 11 8F                 3169         .word      SAME1
      0011BD CC 0A EB         [ 2] 3170         JP     ZERO
                                   3171 
                                   3172 ;       find    ( a va -- ca na | a F )
                                   3173 ;       Search vocabulary for string.
                                   3174 ;       Return ca and na if succeeded.
      0011C0 11 81                 3175         .word      LINK
                           0011C2  3176 LINK = . 
      0011C2 04                    3177         .byte      4
      0011C3 46 49 4E 44           3178         .ascii     "FIND"
      0011C7                       3179 FIND:
      0011C7 CD 05 9A         [ 4] 3180         CALL     SWAPP
      0011CA CD 05 8A         [ 4] 3181         CALL     DUPP
      0011CD CD 05 01         [ 4] 3182         CALL     CAT
      0011D0 CD 06 56         [ 4] 3183         CALL     TEMP
      0011D3 CD 04 CC         [ 4] 3184         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011D6 CD 05 8A         [ 4] 3185         CALL     DUPP
      0011D9 CD 04 E3         [ 4] 3186         CALL     AT
      0011DC CD 05 53         [ 4] 3187         CALL     TOR
      0011DF CD 0A 54         [ 4] 3188         CALL     CELLP
      0011E2 CD 05 9A         [ 4] 3189         CALL     SWAPP
      0011E5 CD 04 E3         [ 4] 3190 FIND1:  CALL     AT
      0011E8 CD 05 8A         [ 4] 3191         CALL     DUPP
      0011EB CD 04 98         [ 4] 3192         CALL     QBRAN
      0011EE 12 24                 3193         .word      FIND6
      0011F0 CD 05 8A         [ 4] 3194         CALL     DUPP
      0011F3 CD 04 E3         [ 4] 3195         CALL     AT
      0011F6 CD 04 65         [ 4] 3196         CALL     DOLIT
      0011F9 1F 7F                 3197         .word      MASKK
      0011FB CD 05 D6         [ 4] 3198         CALL     ANDD
      0011FE CD 05 47         [ 4] 3199         CALL     RAT
      001201 CD 05 FF         [ 4] 3200         CALL     XORR
      001204 CD 04 98         [ 4] 3201         CALL     QBRAN
      001207 12 13                 3202         .word      FIND2
      001209 CD 0A 54         [ 4] 3203         CALL     CELLP
      00120C CD 04 65         [ 4] 3204         CALL     DOLIT
      00120F FF FF                 3205         .word     0xFFFF
      001211 20 0C            [ 2] 3206         JRA     FIND3
      001213 CD 0A 54         [ 4] 3207 FIND2:  CALL     CELLP
      001216 CD 06 56         [ 4] 3208         CALL     TEMP
      001219 CD 04 E3         [ 4] 3209         CALL     AT
      00121C CD 11 87         [ 4] 3210         CALL     SAMEQ
      00121F CD 04 AF         [ 4] 3211 FIND3:  CALL     BRAN
      001222 12 33                 3212         .word      FIND4
      001224 CD 05 34         [ 4] 3213 FIND6:  CALL     RFROM
      001227 CD 05 80         [ 4] 3214         CALL     DROP
      00122A CD 05 9A         [ 4] 3215         CALL     SWAPP
      00122D CD 0A 63         [ 4] 3216         CALL     CELLM
      001230 CC 05 9A         [ 2] 3217         JP     SWAPP
      001233 CD 04 98         [ 4] 3218 FIND4:  CALL     QBRAN
      001236 12 40                 3219         .word      FIND5
      001238 CD 0A 63         [ 4] 3220         CALL     CELLM
      00123B CD 0A 63         [ 4] 3221         CALL     CELLM
      00123E 20 A5            [ 2] 3222         JRA     FIND1
      001240 CD 05 34         [ 4] 3223 FIND5:  CALL     RFROM
      001243 CD 05 80         [ 4] 3224         CALL     DROP
      001246 CD 05 9A         [ 4] 3225         CALL     SWAPP
      001249 CD 05 80         [ 4] 3226         CALL     DROP
      00124C CD 0A 63         [ 4] 3227         CALL     CELLM
      00124F CD 05 8A         [ 4] 3228         CALL     DUPP
      001252 CD 11 71         [ 4] 3229         CALL     NAMET
      001255 CC 05 9A         [ 2] 3230         JP     SWAPP
                                   3231 
                                   3232 ;       NAME?   ( a -- ca na | a F )
                                   3233 ;       Search vocabularies for a string.
      001258 11 C2                 3234         .word      LINK
                           00125A  3235 LINK = . 
      00125A 05                    3236         .byte      5
      00125B 4E 41 4D 45 3F        3237         .ascii     "NAME?"
      001260                       3238 NAMEQ:
      001260 CD 06 CA         [ 4] 3239         CALL   CNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001263 CC 11 C7         [ 2] 3240         JP     FIND
                                   3241 
                                   3242 ;; Terminal response
                                   3243 
                                   3244 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3245 ;       Backup cursor by one character.
      001266 12 5A                 3246         .word      LINK
                           001268  3247 LINK = . 
      001268 02                    3248         .byte      2
      001269 5E 48                 3249         .ascii     "^H"
      00126B                       3250 BKSP:
      00126B CD 05 53         [ 4] 3251         CALL     TOR
      00126E CD 05 B4         [ 4] 3252         CALL     OVER
      001271 CD 05 34         [ 4] 3253         CALL     RFROM
      001274 CD 05 9A         [ 4] 3254         CALL     SWAPP
      001277 CD 05 B4         [ 4] 3255         CALL     OVER
      00127A CD 05 FF         [ 4] 3256         CALL     XORR
      00127D CD 04 98         [ 4] 3257         CALL     QBRAN
      001280 12 9B                 3258         .word      BACK1
      001282 CD 04 65         [ 4] 3259         CALL     DOLIT
      001285 00 08                 3260         .word      BKSPP
      001287 CD 04 24         [ 4] 3261         CALL     EMIT
      00128A CD 0A 8C         [ 4] 3262         CALL     ONEM
      00128D CD 0A DE         [ 4] 3263         CALL     BLANK
      001290 CD 04 24         [ 4] 3264         CALL     EMIT
      001293 CD 04 65         [ 4] 3265         CALL     DOLIT
      001296 00 08                 3266         .word      BKSPP
      001298 CC 04 24         [ 2] 3267         JP     EMIT
      00129B 81               [ 4] 3268 BACK1:  RET
                                   3269 
                                   3270 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3271 ;       Accept and echo key stroke
                                   3272 ;       and bump cursor.
      00129C 12 68                 3273         .word      LINK
                           00129E  3274 LINK = . 
      00129E 03                    3275         .byte      3
      00129F 54 41 50              3276         .ascii     "TAP"
      0012A2                       3277 TAP:
      0012A2 CD 05 8A         [ 4] 3278         CALL     DUPP
      0012A5 CD 04 24         [ 4] 3279         CALL     EMIT
      0012A8 CD 05 B4         [ 4] 3280         CALL     OVER
      0012AB CD 04 F0         [ 4] 3281         CALL     CSTOR
      0012AE CC 0A 7F         [ 2] 3282         JP     ONEP
                                   3283 
                                   3284 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3285 ;       Process a key stroke,
                                   3286 ;       CR,LF or backspace.
      0012B1 12 9E                 3287         .word      LINK
                           0012B3  3288 LINK = . 
      0012B3 04                    3289         .byte      4
      0012B4 4B 54 41 50           3290         .ascii     "KTAP"
      0012B8                       3291 KTAP:
      0012B8 CD 05 8A         [ 4] 3292         CALL     DUPP
      0012BB CD 04 65         [ 4] 3293         CALL     DOLIT
                           000001  3294 .if EOL_CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012BE 00 0D                 3295         .word   CRR
                           000000  3296 .else ; EOL_LF 
                                   3297         .word   LF
                                   3298 .endif 
      0012C0 CD 05 FF         [ 4] 3299         CALL     XORR
      0012C3 CD 04 98         [ 4] 3300         CALL     QBRAN
      0012C6 12 DE                 3301         .word      KTAP2
      0012C8 CD 04 65         [ 4] 3302         CALL     DOLIT
      0012CB 00 08                 3303         .word      BKSPP
      0012CD CD 05 FF         [ 4] 3304         CALL     XORR
      0012D0 CD 04 98         [ 4] 3305         CALL     QBRAN
      0012D3 12 DB                 3306         .word      KTAP1
      0012D5 CD 0A DE         [ 4] 3307         CALL     BLANK
      0012D8 CC 12 A2         [ 2] 3308         JP     TAP
      0012DB CC 12 6B         [ 2] 3309 KTAP1:  JP     BKSP
      0012DE CD 05 80         [ 4] 3310 KTAP2:  CALL     DROP
      0012E1 CD 05 9A         [ 4] 3311         CALL     SWAPP
      0012E4 CD 05 80         [ 4] 3312         CALL     DROP
      0012E7 CC 05 8A         [ 2] 3313         JP     DUPP
                                   3314 
                                   3315 ;       accept  ( b u -- b u )
                                   3316 ;       Accept characters to input
                                   3317 ;       buffer. Return with actual count.
      0012EA 12 B3                 3318         .word      LINK
                           0012EC  3319 LINK = . 
      0012EC 06                    3320         .byte      6
      0012ED 41 43 43 45 50 54     3321         .ascii     "ACCEPT"
      0012F3                       3322 ACCEP:
      0012F3 CD 05 B4         [ 4] 3323         CALL     OVER
      0012F6 CD 07 85         [ 4] 3324         CALL     PLUS
      0012F9 CD 05 B4         [ 4] 3325         CALL     OVER
      0012FC CD 07 70         [ 4] 3326 ACCP1:  CALL     DDUP
      0012FF CD 05 FF         [ 4] 3327         CALL     XORR
      001302 CD 04 98         [ 4] 3328         CALL     QBRAN
      001305 13 27                 3329         .word      ACCP4
      001307 CD 0E D1         [ 4] 3330         CALL     KEY
      00130A CD 05 8A         [ 4] 3331         CALL     DUPP
      00130D CD 0A DE         [ 4] 3332         CALL     BLANK
      001310 CD 04 65         [ 4] 3333         CALL     DOLIT
      001313 00 7F                 3334         .word      127
      001315 CD 08 C0         [ 4] 3335         CALL     WITHI
      001318 CD 04 98         [ 4] 3336         CALL     QBRAN
      00131B 13 22                 3337         .word      ACCP2
      00131D CD 12 A2         [ 4] 3338         CALL     TAP
      001320 20 03            [ 2] 3339         JRA     ACCP3
      001322 CD 12 B8         [ 4] 3340 ACCP2:  CALL     KTAP
      001325 20 D5            [ 2] 3341 ACCP3:  JRA     ACCP1
      001327 CD 05 80         [ 4] 3342 ACCP4:  CALL     DROP
      00132A CD 05 B4         [ 4] 3343         CALL     OVER
      00132D CC 07 FE         [ 2] 3344         JP     SUBB
                                   3345 
                                   3346 ;       QUERY   ( -- )
                                   3347 ;       Accept input stream to
                                   3348 ;       terminal input buffer.
      001330 12 EC                 3349         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3350         
                           001332  3351 LINK = . 
      001332 05                    3352         .byte      5
      001333 51 55 45 52 59        3353         .ascii     "QUERY"
      001338                       3354 QUERY:
      001338 CD 0B FB         [ 4] 3355         CALL     TIB
      00133B CD 04 65         [ 4] 3356         CALL     DOLIT
      00133E 00 50                 3357         .word      80
      001340 CD 12 F3         [ 4] 3358         CALL     ACCEP
      001343 CD 06 75         [ 4] 3359         CALL     NTIB
      001346 CD 04 CC         [ 4] 3360         CALL     STORE
      001349 CD 05 80         [ 4] 3361         CALL     DROP
      00134C CD 0A EB         [ 4] 3362         CALL     ZERO
      00134F CD 06 65         [ 4] 3363         CALL     INN
      001352 CC 04 CC         [ 2] 3364         JP     STORE
                                   3365 
                                   3366 ;       ABORT   ( -- )
                                   3367 ;       Reset data stack and
                                   3368 ;       jump to QUIT.
      001355 13 32                 3369         .word      LINK
                           001357  3370 LINK = . 
      001357 05                    3371         .byte      5
      001358 41 42 4F 52 54        3372         .ascii     "ABORT"
      00135D                       3373 ABORT:
      00135D CD 14 54         [ 4] 3374         CALL     PRESE
      001360 CC 14 71         [ 2] 3375         JP     QUIT
                                   3376 
                                   3377 ;       abort"  ( f -- )
                                   3378 ;       Run time routine of ABORT".
                                   3379 ;       Abort with a message.
      001363 13 57                 3380         .word      LINK
                           001365  3381 LINK = . 
      001365 46                    3382 	.byte      COMPO+6
      001366 41 42 4F 52 54        3383         .ascii     "ABORT"
      00136B 22                    3384         .byte      '"'
      00136C                       3385 ABORQ:
      00136C CD 04 98         [ 4] 3386         CALL     QBRAN
      00136F 13 8B                 3387         .word      ABOR2   ;text flag
      001371 CD 0F 67         [ 4] 3388         CALL     DOSTR
      001374 CD 0F 09         [ 4] 3389 ABOR1:  CALL     SPACE
      001377 CD 0B C2         [ 4] 3390         CALL     COUNT
      00137A CD 0F 33         [ 4] 3391         CALL     TYPES
      00137D CD 04 65         [ 4] 3392         CALL     DOLIT
      001380 00 3F                 3393         .word     63 ; "?"
      001382 CD 04 24         [ 4] 3394         CALL     EMIT
      001385 CD 0F 51         [ 4] 3395         CALL     CR
      001388 CC 13 5D         [ 2] 3396         JP     ABORT   ;pass error string
      00138B CD 0F 67         [ 4] 3397 ABOR2:  CALL     DOSTR
      00138E CC 05 80         [ 2] 3398         JP     DROP
                                   3399 
                                   3400 ;; The text interpreter
                                   3401 
                                   3402 ;       $INTERPRET      ( a -- )
                                   3403 ;       Interpret a word. If failed,
                                   3404 ;       try to convert it to an integer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001391 13 65                 3405         .word      LINK
                           001393  3406 LINK = . 
      001393 0A                    3407         .byte      10
      001394 24 49 4E 54 45 52 50  3408         .ascii     "$INTERPRET"
             52 45 54
      00139E                       3409 INTER:
      00139E CD 12 60         [ 4] 3410         CALL     NAMEQ
      0013A1 CD 07 34         [ 4] 3411         CALL     QDUP    ;?defined
      0013A4 CD 04 98         [ 4] 3412         CALL     QBRAN
      0013A7 13 C8                 3413         .word      INTE1
      0013A9 CD 04 E3         [ 4] 3414         CALL     AT
      0013AC CD 04 65         [ 4] 3415         CALL     DOLIT
      0013AF 40 00                 3416 	.word       0x4000	; COMPO*256
      0013B1 CD 05 D6         [ 4] 3417         CALL     ANDD    ;?compile only lexicon bits
      0013B4 CD 13 6C         [ 4] 3418         CALL     ABORQ
      0013B7 0D                    3419         .byte      13
      0013B8 20 63 6F 6D 70 69 6C  3420         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013C5 CC 04 BF         [ 2] 3421         JP     EXECU
      0013C8 CD 0D FE         [ 4] 3422 INTE1:  CALL     NUMBQ   ;convert a number
      0013CB CD 04 98         [ 4] 3423         CALL     QBRAN
      0013CE 13 74                 3424         .word    ABOR1
      0013D0 81               [ 4] 3425         RET
                                   3426 
                                   3427 ;       [       ( -- )
                                   3428 ;       Start  text interpreter.
      0013D1 13 93                 3429         .word      LINK
                           0013D3  3430 LINK = . 
      0013D3 81                    3431 	.byte      IMEDD+1
      0013D4 5B                    3432         .ascii     "["
      0013D5                       3433 LBRAC:
      0013D5 CD 04 65         [ 4] 3434         CALL   DOLIT
      0013D8 13 9E                 3435         .word  INTER
      0013DA CD 06 A8         [ 4] 3436         CALL   TEVAL
      0013DD CC 04 CC         [ 2] 3437         JP     STORE
                                   3438 
                                   3439 ;       .OK     ( -- )
                                   3440 ;       Display 'ok' while interpreting.
      0013E0 13 D3                 3441         .word      LINK
                           0013E2  3442 LINK = . 
      0013E2 03                    3443         .byte      3
      0013E3 2E 4F 4B              3444         .ascii     ".OK"
      0013E6                       3445 DOTOK:
      0013E6 CD 04 65         [ 4] 3446         CALL     DOLIT
      0013E9 13 9E                 3447         .word      INTER
      0013EB CD 06 A8         [ 4] 3448         CALL     TEVAL
      0013EE CD 04 E3         [ 4] 3449         CALL     AT
      0013F1 CD 08 26         [ 4] 3450         CALL     EQUAL
      0013F4 CD 04 98         [ 4] 3451         CALL     QBRAN
      0013F7 14 00                 3452         .word      DOTO1
      0013F9 CD 0F 90         [ 4] 3453         CALL     DOTQP
      0013FC 03                    3454         .byte      3
      0013FD 20 6F 6B              3455         .ascii     " ok"
      001400 CC 0F 51         [ 2] 3456 DOTO1:  JP     CR
                                   3457 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3458 ;       ?STACK  ( -- )
                                   3459 ;       Abort if stack underflows.
      001403 13 E2                 3460         .word      LINK
                           001405  3461 LINK = . 
      001405 06                    3462         .byte      6
      001406 3F 53 54 41 43 4B     3463         .ascii     "?STACK"
      00140C                       3464 QSTAC: 
      00140C CD 0B 2D         [ 4] 3465         CALL     DEPTH
      00140F CD 05 C3         [ 4] 3466         CALL     ZLESS   ;check only for underflow
      001412 CD 13 6C         [ 4] 3467         CALL     ABORQ
      001415 0B                    3468         .byte      11
      001416 20 75 6E 64 65 72 66  3469         .ascii     " underflow "
             6C 6F 77 20
      001421 81               [ 4] 3470         RET
                                   3471 
                                   3472 ;       EVAL    ( -- )
                                   3473 ;       Interpret  input stream.
      001422 14 05                 3474         .word      LINK
                           001424  3475 LINK = . 
      001424 04                    3476         .byte      4
      001425 45 56 41 4C           3477         .ascii     "EVAL"
      001429                       3478 EVAL:
      001429 CD 11 63         [ 4] 3479 EVAL1:  CALL     TOKEN
      00142C CD 05 8A         [ 4] 3480         CALL     DUPP
      00142F CD 05 01         [ 4] 3481         CALL     CAT     ;?input stream empty
      001432 CD 04 98         [ 4] 3482         CALL     QBRAN
      001435 14 45                 3483         .word    EVAL2
      001437 CD 06 A8         [ 4] 3484         CALL     TEVAL
      00143A CD 0C 0F         [ 4] 3485         CALL     ATEXE
      00143D CD 14 0C         [ 4] 3486         CALL     QSTAC   ;evaluate input, check stack
      001440 CD 04 AF         [ 4] 3487         CALL     BRAN
      001443 14 29                 3488         .word    EVAL1
      001445 CD 05 80         [ 4] 3489 EVAL2:  CALL     DROP
      001448 CC 13 E6         [ 2] 3490         JP       DOTOK
                                   3491 
                                   3492 ;       PRESET  ( -- )
                                   3493 ;       Reset data stack pointer and
                                   3494 ;       terminal input buffer.
      00144B 14 24                 3495         .word      LINK
                           00144D  3496 LINK = . 
      00144D 06                    3497         .byte      6
      00144E 50 52 45 53 45 54     3498         .ascii     "PRESET"
      001454                       3499 PRESE:
      001454 CD 04 65         [ 4] 3500         CALL     DOLIT
      001457 06 80                 3501         .word      SPP
      001459 CD 05 77         [ 4] 3502         CALL     SPSTO
      00145C CD 04 65         [ 4] 3503         CALL     DOLIT
      00145F 07 00                 3504         .word      TIBB
      001461 CD 06 75         [ 4] 3505         CALL     NTIB
      001464 CD 0A 54         [ 4] 3506         CALL     CELLP
      001467 CC 04 CC         [ 2] 3507         JP     STORE
                                   3508 
                                   3509 ;       QUIT    ( -- )
                                   3510 ;       Reset return stack pointer
                                   3511 ;       and start text interpreter.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00146A 14 4D                 3512         .word      LINK
                           00146C  3513 LINK = . 
      00146C 04                    3514         .byte      4
      00146D 51 55 49 54           3515         .ascii     "QUIT"
      001471                       3516 QUIT:
      001471 CD 04 65         [ 4] 3517         CALL     DOLIT
      001474 07 FF                 3518         .word      RPP
      001476 CD 05 1E         [ 4] 3519         CALL     RPSTO   ;reset return stack pointer
      001479 CD 13 D5         [ 4] 3520 QUIT1:  CALL     LBRAC   ;start interpretation
      00147C CD 13 38         [ 4] 3521 QUIT2:  CALL     QUERY   ;get input
      00147F CD 14 29         [ 4] 3522         CALL     EVAL
      001482 20 F8            [ 2] 3523         JRA     QUIT2   ;continue till error
                                   3524 
                                   3525 ;; The compiler
                                   3526 
                                   3527 ;       '       ( -- ca )
                                   3528 ;       Search vocabularies for
                                   3529 ;       next word in input stream.
      001484 14 6C                 3530         .word      LINK
                           001486  3531 LINK = . 
      001486 01                    3532         .byte      1
      001487 27                    3533         .ascii     "'"
      001488                       3534 TICK:
      001488 CD 11 63         [ 4] 3535         CALL     TOKEN
      00148B CD 12 60         [ 4] 3536         CALL     NAMEQ   ;?defined
      00148E CD 04 98         [ 4] 3537         CALL     QBRAN
      001491 13 74                 3538         .word      ABOR1
      001493 81               [ 4] 3539         RET     ;yes, push code address
                                   3540 
                                   3541 ;       ALLOT   ( n -- )
                                   3542 ;       Allocate n bytes to RAM 
      001494 14 86                 3543         .word      LINK
                           001496  3544         LINK = . 
      001496 05                    3545         .byte      5
      001497 41 4C 4C 4F 54        3546         .ascii     "ALLOT"
      00149C                       3547 ALLOT:
      00149C CD 06 D8         [ 4] 3548         CALL     VPP
                                   3549 ; must update APP_VP each time VP is modidied
      00149F CD 0B 5B         [ 4] 3550         call PSTOR 
      0014A2 CC 1B E3         [ 2] 3551         jp UPDATVP 
                                   3552 
                                   3553 ;       ,       ( w -- )
                                   3554 ;         Compile an integer into
                                   3555 ;         variable space.
      0014A5 14 96                 3556         .word      LINK
                           0014A7  3557 LINK = . 
      0014A7 01                    3558         .byte      1
      0014A8 2C                    3559         .ascii     ","
      0014A9                       3560 COMMA:
      0014A9 CD 0B D9         [ 4] 3561         CALL     HERE
      0014AC CD 05 8A         [ 4] 3562         CALL     DUPP
      0014AF CD 0A 54         [ 4] 3563         CALL     CELLP   ;cell boundary
      0014B2 CD 06 D8         [ 4] 3564         CALL     VPP
      0014B5 CD 04 CC         [ 4] 3565         CALL     STORE
      0014B8 CC 04 CC         [ 2] 3566         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3567 
                                   3568 ;       C,      ( c -- )
                                   3569 ;       Compile a byte into
                                   3570 ;       variables space.
      0014BB 14 A7                 3571        .word      LINK
                           0014BD  3572 LINK = . 
      0014BD 02                    3573         .byte      2
      0014BE 43 2C                 3574         .ascii     "C,"
      0014C0                       3575 CCOMMA:
      0014C0 CD 0B D9         [ 4] 3576         CALL     HERE
      0014C3 CD 05 8A         [ 4] 3577         CALL     DUPP
      0014C6 CD 0A 7F         [ 4] 3578         CALL     ONEP
      0014C9 CD 06 D8         [ 4] 3579         CALL     VPP
      0014CC CD 04 CC         [ 4] 3580         CALL     STORE
      0014CF CC 04 F0         [ 2] 3581         JP     CSTOR
                                   3582 
                                   3583 ;       [COMPILE]       ( -- ; <string> )
                                   3584 ;       Compile next immediate
                                   3585 ;       word into code dictionary.
      0014D2 14 BD                 3586         .word      LINK
                           0014D4  3587 LINK = . 
      0014D4 89                    3588 	.byte      IMEDD+9
      0014D5 5B 43 4F 4D 50 49 4C  3589         .ascii     "[COMPILE]"
             45 5D
      0014DE                       3590 BCOMP:
      0014DE CD 14 88         [ 4] 3591         CALL     TICK
      0014E1 CC 17 A4         [ 2] 3592         JP     JSRC
                                   3593 
                                   3594 ;       COMPILE ( -- )
                                   3595 ;       Compile next jsr in
                                   3596 ;       colon list to code dictionary.
      0014E4 14 D4                 3597         .word      LINK
                           0014E6  3598 LINK = . 
      0014E6 47                    3599 	.byte      COMPO+7
      0014E7 43 4F 4D 50 49 4C 45  3600         .ascii     "COMPILE"
      0014EE                       3601 COMPI:
      0014EE CD 05 34         [ 4] 3602         CALL     RFROM
      0014F1 CD 05 8A         [ 4] 3603         CALL     DUPP
      0014F4 CD 04 E3         [ 4] 3604         CALL     AT
      0014F7 CD 17 A4         [ 4] 3605         CALL     JSRC    ;compile subroutine
      0014FA CD 0A 54         [ 4] 3606         CALL     CELLP
      0014FD 90 93            [ 1] 3607         ldw y,x 
      0014FF 90 FE            [ 2] 3608         ldw y,(y)
      001501 1C 00 02         [ 2] 3609         addw x,#CELLL 
      001504 90 FC            [ 2] 3610         jp (y)
                                   3611 
                                   3612 ;       LITERAL ( w -- )
                                   3613 ;       Compile tos to dictionary
                                   3614 ;       as an integer literal.
      001506 14 E6                 3615         .word      LINK
                           001508  3616 LINK = . 
      001508 87                    3617 	.byte      IMEDD+7
      001509 4C 49 54 45 52 41 4C  3618         .ascii     "LITERAL"
      001510                       3619 LITER:
      001510 CD 14 EE         [ 4] 3620         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001513 04 65                 3621         .word DOLIT 
      001515 CC 14 A9         [ 2] 3622         JP     COMMA
                                   3623 
                                   3624 ;       $,"     ( -- )
                                   3625 ;       Compile a literal string
                                   3626 ;       up to next " .
      001518 15 08                 3627         .word      LINK
                           00151A  3628 LINK = . 
      00151A 03                    3629         .byte      3
      00151B 24 2C 22              3630         .byte     '$',',','"'
      00151E                       3631 STRCQ:
      00151E CD 04 65         [ 4] 3632         CALL     DOLIT
      001521 00 22                 3633         .word     34	; "
      001523 CD 10 E6         [ 4] 3634         CALL     PARSE
      001526 CD 0B D9         [ 4] 3635         CALL     HERE
      001529 CD 0C 99         [ 4] 3636         CALL     PACKS   ;string to code dictionary
      00152C CD 0B C2         [ 4] 3637         CALL     COUNT
      00152F CD 07 85         [ 4] 3638         CALL     PLUS    ;calculate aligned end of string
      001532 CD 06 D8         [ 4] 3639         CALL     VPP
      001535 CC 04 CC         [ 2] 3640         JP     STORE
                                   3641 
                                   3642 ;; Structures
                                   3643 
                                   3644 ;       FOR     ( -- a )
                                   3645 ;       Start a FOR-NEXT loop
                                   3646 ;       structure in a colon definition.
      001538 15 1A                 3647         .word      LINK
                           00153A  3648 LINK = . 
      00153A 83                    3649 	.byte      IMEDD+3
      00153B 46 4F 52              3650         .ascii     "FOR"
      00153E                       3651 FOR:
      00153E CD 14 EE         [ 4] 3652         CALL     COMPI
      001541 05 53                 3653         .word TOR 
      001543 CC 0B D9         [ 2] 3654         JP     HERE
                                   3655 
                                   3656 ;       NEXT    ( a -- )
                                   3657 ;       Terminate a FOR-NEXT loop.
      001546 15 3A                 3658         .word      LINK
                           001548  3659 LINK = . 
      001548 84                    3660 	.byte      IMEDD+4
      001549 4E 45 58 54           3661         .ascii     "NEXT"
      00154D                       3662 NEXT:
      00154D CD 14 EE         [ 4] 3663         CALL     COMPI
      001550 04 79                 3664         .word DONXT 
      001552 CD 07 24         [ 4] 3665         call ADRADJ
      001555 CC 14 A9         [ 2] 3666         JP     COMMA
                                   3667 
                                   3668 ;       I ( -- n )
                                   3669 ;       stack FOR-NEXT COUNTER 
      001558 15 48                 3670         .word LINK 
                           00155A  3671         LINK=.
      00155A 01                    3672         .byte 1 
      00155B 49                    3673         .ascii "I"
      00155C                       3674 IFETCH: 
      00155C 1D 00 02         [ 2] 3675         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00155F 16 03            [ 2] 3676         ldw y,(3,sp)
      001561 FF               [ 2] 3677         ldw (x),y 
      001562 81               [ 4] 3678         ret 
                                   3679 
                                   3680 ;       BEGIN   ( -- a )
                                   3681 ;       Start an infinite or
                                   3682 ;       indefinite loop structure.
      001563 15 5A                 3683         .word      LINK
                           001565  3684 LINK = . 
      001565 85                    3685 	.byte      IMEDD+5
      001566 42 45 47 49 4E        3686         .ascii     "BEGIN"
      00156B                       3687 BEGIN:
      00156B CC 0B D9         [ 2] 3688         JP     HERE
                                   3689 
                                   3690 ;       UNTIL   ( a -- )
                                   3691 ;       Terminate a BEGIN-UNTIL
                                   3692 ;       indefinite loop structure.
      00156E 15 65                 3693         .word      LINK
                           001570  3694 LINK = . 
      001570 85                    3695 	.byte      IMEDD+5
      001571 55 4E 54 49 4C        3696         .ascii     "UNTIL"
      001576                       3697 UNTIL:
      001576 CD 14 EE         [ 4] 3698         CALL     COMPI
      001579 04 98                 3699         .word    QBRAN 
      00157B CD 07 24         [ 4] 3700         call ADRADJ
      00157E CC 14 A9         [ 2] 3701         JP     COMMA
                                   3702 
                                   3703 ;       AGAIN   ( a -- )
                                   3704 ;       Terminate a BEGIN-AGAIN
                                   3705 ;       infinite loop structure.
      001581 15 70                 3706         .word      LINK
                           001583  3707 LINK = . 
      001583 85                    3708 	.byte      IMEDD+5
      001584 41 47 41 49 4E        3709         .ascii     "AGAIN"
      001589                       3710 AGAIN:
      001589 CD 14 EE         [ 4] 3711         CALL     COMPI
      00158C 04 AF                 3712         .word BRAN
      00158E CD 07 24         [ 4] 3713         call ADRADJ 
      001591 CC 14 A9         [ 2] 3714         JP     COMMA
                                   3715 
                                   3716 ;       IF      ( -- A )
                                   3717 ;       Begin a conditional branch.
      001594 15 83                 3718         .word      LINK
                           001596  3719 LINK = . 
      001596 82                    3720 	.byte      IMEDD+2
      001597 49 46                 3721         .ascii     "IF"
      001599                       3722 IFF:
      001599 CD 14 EE         [ 4] 3723         CALL     COMPI
      00159C 04 98                 3724         .word QBRAN
      00159E CD 0B D9         [ 4] 3725         CALL     HERE
      0015A1 CD 0A EB         [ 4] 3726         CALL     ZERO
      0015A4 CC 14 A9         [ 2] 3727         JP     COMMA
                                   3728 
                                   3729 ;       THEN        ( A -- )
                                   3730 ;       Terminate a conditional branch structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015A7 15 96                 3731         .word      LINK
                           0015A9  3732 LINK = . 
      0015A9 84                    3733 	.byte      IMEDD+4
      0015AA 54 48 45 4E           3734         .ascii     "THEN"
      0015AE                       3735 THENN:
      0015AE CD 0B D9         [ 4] 3736         CALL     HERE
      0015B1 CD 07 24         [ 4] 3737         call ADRADJ 
      0015B4 CD 05 9A         [ 4] 3738         CALL     SWAPP
      0015B7 CC 04 CC         [ 2] 3739         JP     STORE
                                   3740 
                                   3741 ;       ELSE        ( A -- A )
                                   3742 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015BA 15 A9                 3743         .word      LINK
                           0015BC  3744 LINK = . 
      0015BC 84                    3745 	.byte      IMEDD+4
      0015BD 45 4C 53 45           3746         .ascii     "ELSE"
      0015C1                       3747 ELSEE:
      0015C1 CD 14 EE         [ 4] 3748         CALL     COMPI
      0015C4 04 AF                 3749         .word BRAN
      0015C6 CD 0B D9         [ 4] 3750         CALL     HERE
      0015C9 CD 0A EB         [ 4] 3751         CALL     ZERO
      0015CC CD 14 A9         [ 4] 3752         CALL     COMMA
      0015CF CD 05 9A         [ 4] 3753         CALL     SWAPP
      0015D2 CD 0B D9         [ 4] 3754         CALL     HERE
      0015D5 CD 07 24         [ 4] 3755         call ADRADJ 
      0015D8 CD 05 9A         [ 4] 3756         CALL     SWAPP
      0015DB CC 04 CC         [ 2] 3757         JP     STORE
                                   3758 
                                   3759 ;       AHEAD       ( -- A )
                                   3760 ;       Compile a forward branch instruction.
      0015DE 15 BC                 3761         .word      LINK
                           0015E0  3762 LINK = . 
      0015E0 85                    3763 	.byte      IMEDD+5
      0015E1 41 48 45 41 44        3764         .ascii     "AHEAD"
      0015E6                       3765 AHEAD:
      0015E6 CD 14 EE         [ 4] 3766         CALL     COMPI
      0015E9 04 AF                 3767         .word BRAN
      0015EB CD 0B D9         [ 4] 3768         CALL     HERE
      0015EE CD 0A EB         [ 4] 3769         CALL     ZERO
      0015F1 CC 14 A9         [ 2] 3770         JP     COMMA
                                   3771 
                                   3772 ;       WHILE       ( a -- A a )
                                   3773 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015F4 15 E0                 3774         .word      LINK
                           0015F6  3775 LINK = . 
      0015F6 85                    3776 	.byte      IMEDD+5
      0015F7 57 48 49 4C 45        3777         .ascii     "WHILE"
      0015FC                       3778 WHILE:
      0015FC CD 14 EE         [ 4] 3779         CALL     COMPI
      0015FF 04 98                 3780         .word QBRAN
      001601 CD 0B D9         [ 4] 3781         CALL     HERE
      001604 CD 0A EB         [ 4] 3782         CALL     ZERO
      001607 CD 14 A9         [ 4] 3783         CALL     COMMA
      00160A CC 05 9A         [ 2] 3784         JP     SWAPP
                                   3785 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3786 ;       REPEAT      ( A a -- )
                                   3787 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00160D 15 F6                 3788         .word      LINK
                           00160F  3789 LINK = . 
      00160F 86                    3790         .byte      IMEDD+6
      001610 52 45 50 45 41 54     3791         .ascii     "REPEAT"
      001616                       3792 REPEA:
      001616 CD 14 EE         [ 4] 3793         CALL     COMPI
      001619 04 AF                 3794         .word BRAN
      00161B CD 07 24         [ 4] 3795         call ADRADJ 
      00161E CD 14 A9         [ 4] 3796         CALL     COMMA
      001621 CD 0B D9         [ 4] 3797         CALL     HERE
      001624 CD 07 24         [ 4] 3798         call ADRADJ 
      001627 CD 05 9A         [ 4] 3799         CALL     SWAPP
      00162A CC 04 CC         [ 2] 3800         JP     STORE
                                   3801 
                                   3802 ;       AFT         ( a -- a A )
                                   3803 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00162D 16 0F                 3804         .word      LINK
                           00162F  3805 LINK = . 
      00162F 83                    3806 	.byte      IMEDD+3
      001630 41 46 54              3807         .ascii     "AFT"
      001633                       3808 AFT:
      001633 CD 05 80         [ 4] 3809         CALL     DROP
      001636 CD 15 E6         [ 4] 3810         CALL     AHEAD
      001639 CD 0B D9         [ 4] 3811         CALL     HERE
      00163C CC 05 9A         [ 2] 3812         JP     SWAPP
                                   3813 
                                   3814 ;       ABORT"      ( -- ; <string> )
                                   3815 ;       Conditional abort with an error message.
      00163F 16 2F                 3816         .word      LINK
                           001641  3817 LINK = . 
      001641 86                    3818 	.byte      IMEDD+6
      001642 41 42 4F 52 54        3819         .ascii     "ABORT"
      001647 22                    3820         .byte      '"'
      001648                       3821 ABRTQ:
      001648 CD 14 EE         [ 4] 3822         CALL     COMPI
      00164B 13 6C                 3823         .word ABORQ
      00164D CC 15 1E         [ 2] 3824         JP     STRCQ
                                   3825 
                                   3826 ;       $"     ( -- ; <string> )
                                   3827 ;       Compile an inline string literal.
      001650 16 41                 3828         .word      LINK
                           001652  3829 LINK = . 
      001652 82                    3830 	.byte      IMEDD+2
      001653 24 22                 3831         .byte     '$','"'
      001655                       3832 STRQ:
      001655 CD 14 EE         [ 4] 3833         CALL     COMPI
      001658 0F 86                 3834         .word STRQP 
      00165A CC 15 1E         [ 2] 3835         JP     STRCQ
                                   3836 
                                   3837 ;       ."          ( -- ; <string> )
                                   3838 ;       Compile an inline string literal to be typed out at run time.
      00165D 16 52                 3839         .word      LINK
                           00165F  3840 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00165F 82                    3841 	.byte      IMEDD+2
      001660 2E 22                 3842         .byte     '.','"'
      001662                       3843 DOTQ:
      001662 CD 14 EE         [ 4] 3844         CALL     COMPI
      001665 0F 90                 3845         .word DOTQP 
      001667 CC 15 1E         [ 2] 3846         JP     STRCQ
                                   3847 
                                   3848 ;; Name compiler
                                   3849 
                                   3850 ;       ?UNIQUE ( a -- a )
                                   3851 ;       Display a warning message
                                   3852 ;       if word already exists.
      00166A 16 5F                 3853         .word      LINK
                           00166C  3854 LINK = . 
      00166C 07                    3855         .byte      7
      00166D 3F 55 4E 49 51 55 45  3856         .ascii     "?UNIQUE"
      001674                       3857 UNIQU:
      001674 CD 05 8A         [ 4] 3858         CALL     DUPP
      001677 CD 12 60         [ 4] 3859         CALL     NAMEQ   ;?name exists
      00167A CD 04 98         [ 4] 3860         CALL     QBRAN
      00167D 16 93                 3861         .word      UNIQ1
      00167F CD 0F 90         [ 4] 3862         CALL     DOTQP   ;redef are OK
      001682 07                    3863         .byte       7
      001683 20 72 65 44 65 66 20  3864         .ascii     " reDef "       
      00168A CD 05 B4         [ 4] 3865         CALL     OVER
      00168D CD 0B C2         [ 4] 3866         CALL     COUNT
      001690 CD 0F 33         [ 4] 3867         CALL     TYPES   ;just in case
      001693 CC 05 80         [ 2] 3868 UNIQ1:  JP     DROP
                                   3869 
                                   3870 ;       $,n     ( na -- )
                                   3871 ;       Build a new dictionary name
                                   3872 ;       using string at na.
                                   3873 ; compile dans l'espace des variables 
      001696 16 6C                 3874         .word      LINK
                           001698  3875 LINK = . 
      001698 03                    3876         .byte      3
      001699 24 2C 6E              3877         .ascii     "$,n"
      00169C                       3878 SNAME:
      00169C CD 05 8A         [ 4] 3879         CALL     DUPP
      00169F CD 05 01         [ 4] 3880         CALL     CAT     ;?null input
      0016A2 CD 04 98         [ 4] 3881         CALL     QBRAN
      0016A5 16 D2                 3882         .word      PNAM1
      0016A7 CD 16 74         [ 4] 3883         CALL     UNIQU   ;?redefinition
      0016AA CD 05 8A         [ 4] 3884         CALL     DUPP
      0016AD CD 0B C2         [ 4] 3885         CALL     COUNT
      0016B0 CD 07 85         [ 4] 3886         CALL     PLUS
      0016B3 CD 06 D8         [ 4] 3887         CALL     VPP
      0016B6 CD 04 CC         [ 4] 3888         CALL     STORE
      0016B9 CD 05 8A         [ 4] 3889         CALL     DUPP
      0016BC CD 06 F6         [ 4] 3890         CALL     LAST
      0016BF CD 04 CC         [ 4] 3891         CALL     STORE   ;save na for vocabulary link
      0016C2 CD 0A 63         [ 4] 3892         CALL     CELLM   ;link address
      0016C5 CD 06 CA         [ 4] 3893         CALL     CNTXT
      0016C8 CD 04 E3         [ 4] 3894         CALL     AT
      0016CB CD 05 9A         [ 4] 3895         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0016CE CD 04 CC         [ 4] 3896         CALL     STORE
      0016D1 81               [ 4] 3897         RET     ;save code pointer
      0016D2 CD 0F 86         [ 4] 3898 PNAM1:  CALL     STRQP
      0016D5 05                    3899         .byte      5
      0016D6 20 6E 61 6D 65        3900         .ascii     " name" ;null input
      0016DB CC 13 74         [ 2] 3901         JP     ABOR1
                                   3902 
                                   3903 ;; FORTH compiler
                                   3904 
                                   3905 ;       $COMPILE        ( a -- )
                                   3906 ;       Compile next word to
                                   3907 ;       dictionary as a token or literal.
      0016DE 16 98                 3908         .word      LINK
                           0016E0  3909 LINK = . 
      0016E0 08                    3910         .byte      8
      0016E1 24 43 4F 4D 50 49 4C  3911         .ascii     "$COMPILE"
             45
      0016E9                       3912 SCOMP:
      0016E9 CD 12 60         [ 4] 3913         CALL     NAMEQ
      0016EC CD 07 34         [ 4] 3914         CALL     QDUP    ;?defined
      0016EF CD 04 98         [ 4] 3915         CALL     QBRAN
      0016F2 17 0A                 3916         .word      SCOM2
      0016F4 CD 04 E3         [ 4] 3917         CALL     AT
      0016F7 CD 04 65         [ 4] 3918         CALL     DOLIT
      0016FA 80 00                 3919         .word     0x8000	;  IMEDD*256
      0016FC CD 05 D6         [ 4] 3920         CALL     ANDD    ;?immediate
      0016FF CD 04 98         [ 4] 3921         CALL     QBRAN
      001702 17 07                 3922         .word      SCOM1
      001704 CC 04 BF         [ 2] 3923         JP     EXECU
      001707 CC 17 A4         [ 2] 3924 SCOM1:  JP     JSRC
      00170A CD 0D FE         [ 4] 3925 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00170D CD 04 98         [ 4] 3926         CALL     QBRAN
      001710 13 74                 3927         .word      ABOR1
      001712 CC 15 10         [ 2] 3928         JP     LITER
                                   3929 
                                   3930 ;       OVERT   ( -- )
                                   3931 ;       Link a new word into vocabulary.
      001715 16 E0                 3932         .word      LINK
                           001717  3933 LINK = . 
      001717 05                    3934         .byte      5
      001718 4F 56 45 52 54        3935         .ascii     "OVERT"
      00171D                       3936 OVERT:
      00171D CD 06 F6         [ 4] 3937         CALL     LAST
      001720 CD 04 E3         [ 4] 3938         CALL     AT
      001723 CD 06 CA         [ 4] 3939         CALL     CNTXT
      001726 CC 04 CC         [ 2] 3940         JP     STORE
                                   3941 
                                   3942 ;       ;       ( -- )
                                   3943 ;       Terminate a colon definition.
      001729 17 17                 3944         .word      LINK
                           00172B  3945 LINK = . 
      00172B C1                    3946 	.byte      IMEDD+COMPO+1
      00172C 3B                    3947         .ascii     ";"
      00172D                       3948 SEMIS:
                           000001  3949 .if OPTIMIZE ; more compact and faster
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00172D CD 04 65         [ 4] 3950         call DOLIT 
      001730 00 81                 3951         .word 0x81   ; opcode for RET 
      001732 CD 14 C0         [ 4] 3952         call CCOMMA 
                           000000  3953 .else
                                   3954         CALL     COMPI
                                   3955         .word EXIT 
                                   3956 .endif 
      001735 CD 13 D5         [ 4] 3957         CALL     LBRAC
      001738 CD 17 1D         [ 4] 3958         call OVERT 
      00173B CD 21 24         [ 4] 3959         CALL FMOVE
      00173E CD 07 34         [ 4] 3960         call QDUP 
      001741 CD 04 98         [ 4] 3961         call QBRAN 
      001744 18 74                 3962         .word SET_RAMLAST 
      001746 CD 21 B8         [ 4] 3963         CALL UPDATPTR
      001749 81               [ 4] 3964         RET 
                                   3965 
                                   3966 
                                   3967 ;       Terminate an ISR definition 
                                   3968 ;       retourn ca of ISR as double
                                   3969 ;       I; ( -- ud )
      00174A 17 2B                 3970         .word LINK 
                           00174C  3971         LINK=.
      00174C C2                    3972         .byte 2+IMEDD+COMPO 
      00174D 49 3B                 3973         .ascii "I;" 
      00174F                       3974 ISEMI:
      00174F 1D 00 02         [ 2] 3975         subw x,#CELLL  
      001752 90 AE 00 80      [ 2] 3976         ldw y,#IRET_CODE 
      001756 FF               [ 2] 3977         ldw (x),y 
      001757 CD 14 C0         [ 4] 3978         call CCOMMA
      00175A CD 13 D5         [ 4] 3979         call LBRAC 
      00175D CD 21 FD         [ 4] 3980         call IFMOVE
      001760 CD 07 34         [ 4] 3981         call QDUP 
      001763 CD 04 98         [ 4] 3982         CALL QBRAN 
      001766 18 74                 3983         .word SET_RAMLAST
      001768 CD 06 E6         [ 4] 3984         CALL CPP
      00176B CD 04 E3         [ 4] 3985         call AT 
      00176E CD 05 9A         [ 4] 3986         call SWAPP 
      001771 CD 06 E6         [ 4] 3987         CALL CPP 
      001774 CD 04 CC         [ 4] 3988         call STORE 
      001777 CD 1B CC         [ 4] 3989         call UPDATCP 
      00177A CD 1B 89         [ 4] 3990         call EEPVP 
      00177D CD 05 80         [ 4] 3991         call DROP 
      001780 CD 04 E3         [ 4] 3992         call AT 
      001783 CD 06 D8         [ 4] 3993         call VPP 
      001786 CD 04 CC         [ 4] 3994         call STORE 
      001789 CC 0A EB         [ 2] 3995         jp ZERO
      00178C 81               [ 4] 3996         ret           
                                   3997         
                                   3998 
                                   3999 ;       ]       ( -- )
                                   4000 ;       Start compiling words in
                                   4001 ;       input stream.
      00178D 17 4C                 4002         .word      LINK
                           00178F  4003 LINK = . 
      00178F 01                    4004         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001790 5D                    4005         .ascii     "]"
      001791                       4006 RBRAC:
      001791 CD 04 65         [ 4] 4007         CALL   DOLIT
      001794 16 E9                 4008         .word  SCOMP
      001796 CD 06 A8         [ 4] 4009         CALL   TEVAL
      001799 CC 04 CC         [ 2] 4010         JP     STORE
                                   4011 
                                   4012 ;       CALL,    ( ca -- )
                                   4013 ;       Compile a subroutine call.
      00179C 17 8F                 4014         .word      LINK
                           00179E  4015 LINK = . 
      00179E 05                    4016         .byte      5
      00179F 43 41 4C 4C 2C        4017         .ascii     "CALL,"
      0017A4                       4018 JSRC:
      0017A4 CD 04 65         [ 4] 4019         CALL     DOLIT
      0017A7 00 CD                 4020         .word     CALLL     ;CALL
      0017A9 CD 14 C0         [ 4] 4021         CALL     CCOMMA
      0017AC CC 14 A9         [ 2] 4022         JP     COMMA
                                   4023 
                                   4024 ;       INIT-OFS ( -- )
                                   4025 ;       compute offset to adjust jump address 
                                   4026 ;       set variable OFFSET 
      0017AF 17 9E                 4027         .word LINK 
                           0017B1  4028         LINK=.
      0017B1 08                    4029         .byte 8 
      0017B2 49 4E 49 54 2D 4F 46  4030         .ascii "INIT-OFS" 
             53
      0017BA                       4031 INITOFS:
      0017BA CD 06 97         [ 4] 4032         call TFLASH 
      0017BD CD 04 E3         [ 4] 4033         CALL AT 
      0017C0 CD 05 8A         [ 4] 4034         CALL DUPP 
      0017C3 CD 04 98         [ 4] 4035         call QBRAN
      0017C6 17 D7                 4036         .word 1$
      0017C8 CD 05 80         [ 4] 4037         call DROP  
      0017CB CD 06 E6         [ 4] 4038         call CPP 
      0017CE CD 04 E3         [ 4] 4039         call AT 
      0017D1 CD 0B D9         [ 4] 4040         call HERE
      0017D4 CD 07 FE         [ 4] 4041         call SUBB 
      0017D7 CD 07 1B         [ 4] 4042 1$:     call OFFSET 
      0017DA CC 04 CC         [ 2] 4043         jp STORE  
                                   4044 
                                   4045 ;       :       ( -- ; <string> )
                                   4046 ;       Start a new colon definition
                                   4047 ;       using next word as its name.
      0017DD 17 B1                 4048         .word      LINK
                           0017DF  4049 LINK = . 
      0017DF 01                    4050         .byte      1
      0017E0 3A                    4051         .ascii     ":"
      0017E1                       4052 COLON:
      0017E1 CD 17 BA         [ 4] 4053         call INITOFS       
      0017E4 CD 11 63         [ 4] 4054         CALL   TOKEN
      0017E7 CD 16 9C         [ 4] 4055         CALL   SNAME
      0017EA CC 17 91         [ 2] 4056         JP     RBRAC
                                   4057 
                                   4058 ;       I:  ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4059 ;       Start interrupt service routine definition
                                   4060 ;       those definition have no name.
      0017ED 17 DF                 4061         .word LINK
                           0017EF  4062         LINK=.
      0017EF 02                    4063         .byte 2 
      0017F0 49 3A                 4064         .ascii "I:" 
      0017F2                       4065 ICOLON:
      0017F2 CD 17 BA         [ 4] 4066         call INITOFS 
      0017F5 CC 17 91         [ 2] 4067         jp RBRAC  
                                   4068 
                                   4069 ;       IMMEDIATE       ( -- )
                                   4070 ;       Make last compiled word
                                   4071 ;       an immediate word.
      0017F8 17 EF                 4072         .word      LINK
                           0017FA  4073 LINK = . 
      0017FA 09                    4074         .byte      9
      0017FB 49 4D 4D 45 44 49 41  4075         .ascii     "IMMEDIATE"
             54 45
      001804                       4076 IMMED:
      001804 CD 04 65         [ 4] 4077         CALL     DOLIT
      001807 80 00                 4078         .word     0x8000	;  IMEDD*256
      001809 CD 06 F6         [ 4] 4079         CALL     LAST
      00180C CD 04 E3         [ 4] 4080         CALL     AT
      00180F CD 04 E3         [ 4] 4081         CALL     AT
      001812 CD 05 EA         [ 4] 4082         CALL     ORR
      001815 CD 06 F6         [ 4] 4083         CALL     LAST
      001818 CD 04 E3         [ 4] 4084         CALL     AT
      00181B CC 04 CC         [ 2] 4085         JP     STORE
                                   4086 
                                   4087 ;; Defining words
                                   4088 
                                   4089 ;       CREATE  ( -- ; <string> )
                                   4090 ;       Compile a new array
                                   4091 ;       without allocating space.
      00181E 17 FA                 4092         .word      LINK
                           001820  4093 LINK = . 
      001820 06                    4094         .byte      6
      001821 43 52 45 41 54 45     4095         .ascii     "CREATE"
      001827                       4096 CREAT:
      001827 CD 11 63         [ 4] 4097         CALL     TOKEN
      00182A CD 16 9C         [ 4] 4098         CALL     SNAME
      00182D CD 17 1D         [ 4] 4099         CALL     OVERT        
      001830 CD 14 EE         [ 4] 4100         CALL     COMPI 
      001833 06 37                 4101         .word DOVAR 
      001835 81               [ 4] 4102         RET
                                   4103 
                                   4104 ;       VARIABLE        ( -- ; <string> )
                                   4105 ;       Compile a new variable
                                   4106 ;       initialized to 0.
      001836 18 20                 4107         .word      LINK
                           001838  4108 LINK = . 
      001838 08                    4109         .byte      8
      001839 56 41 52 49 41 42 4C  4110         .ascii     "VARIABLE"
             45
      001841                       4111 VARIA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4112 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001841 CD 0B D9         [ 4] 4113         CALL HERE
      001844 CD 05 8A         [ 4] 4114         CALL DUPP 
      001847 CD 0A 54         [ 4] 4115         CALL CELLP
      00184A CD 06 D8         [ 4] 4116         CALL VPP 
      00184D CD 04 CC         [ 4] 4117         CALL STORE
      001850 CD 18 27         [ 4] 4118         CALL CREAT
      001853 CD 05 8A         [ 4] 4119         CALL DUPP
      001856 CD 14 A9         [ 4] 4120         CALL COMMA
      001859 CD 0A EB         [ 4] 4121         CALL ZERO
      00185C CD 05 9A         [ 4] 4122         call SWAPP 
      00185F CD 04 CC         [ 4] 4123         CALL STORE
      001862 CD 21 24         [ 4] 4124         CALL FMOVE ; move definition to FLASH
      001865 CD 07 34         [ 4] 4125         CALL QDUP 
      001868 CD 04 98         [ 4] 4126         CALL QBRAN 
      00186B 18 74                 4127         .word SET_RAMLAST   
      00186D CD 1B E3         [ 4] 4128         call UPDATVP  ; don't update if variable kept in RAM.
      001870 CD 21 B8         [ 4] 4129         CALL UPDATPTR
      001873 81               [ 4] 4130         RET         
      001874                       4131 SET_RAMLAST: 
      001874 CD 06 F6         [ 4] 4132         CALL LAST 
      001877 CD 04 E3         [ 4] 4133         CALL AT 
      00187A CD 07 09         [ 4] 4134         CALL RAMLAST 
      00187D CC 04 CC         [ 2] 4135         jp STORE  
                                   4136 
                                   4137 
                                   4138 ;       CONSTANT  ( n -- ; <string> )
                                   4139 ;       Compile a new constant 
                                   4140 ;       n CONSTANT name 
      001880 18 38                 4141         .word LINK 
                           001882  4142         LINK=. 
      001882 08                    4143         .byte 8 
      001883 43 4F 4E 53 54 41 4E  4144         .ascii "CONSTANT" 
             54
      00188B                       4145 CONSTANT:          
      00188B CD 11 63         [ 4] 4146         CALL TOKEN
      00188E CD 16 9C         [ 4] 4147         CALL SNAME 
      001891 CD 17 1D         [ 4] 4148         CALL OVERT 
      001894 CD 14 EE         [ 4] 4149         CALL COMPI 
      001897 18 B5                 4150         .word DOCONST
      001899 CD 14 A9         [ 4] 4151         CALL COMMA 
      00189C CD 21 24         [ 4] 4152         CALL FMOVE
      00189F CD 07 34         [ 4] 4153         CALL QDUP 
      0018A2 CD 04 98         [ 4] 4154         CALL QBRAN 
      0018A5 18 74                 4155         .word SET_RAMLAST  
      0018A7 CD 21 B8         [ 4] 4156         CALL UPDATPTR  
      0018AA 81               [ 4] 4157 1$:     RET          
                                   4158 
                                   4159 ; CONSTANT runtime semantic 
                                   4160 ; doCONST  ( -- n )
      0018AB 18 82                 4161         .word LINK 
                           0018AD  4162         LINK=.
      0018AD 07                    4163         .byte 7
      0018AE 44 4F 43 4F 4E 53 54  4164         .ascii "DOCONST"
      0018B5                       4165 DOCONST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0018B5 1D 00 02         [ 2] 4166         subw x,#CELLL
      0018B8 90 85            [ 2] 4167         popw y 
      0018BA 90 FE            [ 2] 4168         ldw y,(y) 
      0018BC FF               [ 2] 4169         ldw (x),y 
      0018BD 81               [ 4] 4170         ret 
                                   4171 
                                   4172 ;----------------------------------
                                   4173 ; create double constant 
                                   4174 ; DCONST ( d -- ; <string> )
                                   4175 ;----------------------------------
      0018BE 18 AD                 4176     .word LINK 
                           0018C0  4177     LINK=.
      0018C0 06                    4178     .byte 6 
      0018C1 44 43 4F 4E 53 54     4179     .ascii "DCONST"
      0018C7                       4180 DCONST:
      0018C7 CD 11 63         [ 4] 4181         CALL TOKEN
      0018CA CD 16 9C         [ 4] 4182         CALL SNAME 
      0018CD CD 17 1D         [ 4] 4183         CALL OVERT 
      0018D0 CD 14 EE         [ 4] 4184         CALL COMPI 
      0018D3 18 F6                 4185         .word DO_DCONST
      0018D5 CD 14 A9         [ 4] 4186         CALL COMMA
      0018D8 CD 14 A9         [ 4] 4187         CALL COMMA  
      0018DB CD 21 24         [ 4] 4188         CALL FMOVE
      0018DE CD 07 34         [ 4] 4189         CALL QDUP 
      0018E1 CD 04 98         [ 4] 4190         CALL QBRAN 
      0018E4 18 74                 4191         .word SET_RAMLAST  
      0018E6 CD 21 B8         [ 4] 4192         CALL UPDATPTR  
      0018E9 81               [ 4] 4193 1$:     RET          
                                   4194     
                                   4195 ;----------------------------------
                                   4196 ; runtime for DCONST 
                                   4197 ; stack double constant 
                                   4198 ; DO-DCONST ( -- d )
                                   4199 ;-----------------------------------
      0018EA 18 C0                 4200         .word LINK 
                           0018EC  4201         LINK=.
      0018EC 09                    4202         .byte 9 
      0018ED 44 4F 2D 44 43 4F 4E  4203         .ascii "DO-DCONST"
             53 54
      0018F6                       4204 DO_DCONST:
      0018F6 90 85            [ 2] 4205     popw y 
      0018F8 90 BF 24         [ 2] 4206     ldw YTEMP,y 
      0018FB 1D 00 04         [ 2] 4207     subw x,#2*CELLL 
      0018FE 90 FE            [ 2] 4208     ldw y,(y)
      001900 FF               [ 2] 4209     ldw (x),y 
      001901 90 BE 24         [ 2] 4210     ldw y,YTEMP 
      001904 90 EE 02         [ 2] 4211     ldw y,(2,y)
      001907 EF 02            [ 2] 4212     ldw (2,x),y 
      001909 81               [ 4] 4213     ret 
                                   4214 
                                   4215 ;; Tools
                                   4216 
                                   4217 ;       _TYPE   ( b u -- )
                                   4218 ;       Display a string. Filter
                                   4219 ;       non-printing characters.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00190A 18 EC                 4220         .word      LINK
                           00190C  4221 LINK = . 
      00190C 05                    4222         .byte      5
      00190D 5F 54 59 50 45        4223         .ascii     "_TYPE"
      001912                       4224 UTYPE:
      001912 CD 05 53         [ 4] 4225         CALL     TOR     ;start count down loop
      001915 20 0F            [ 2] 4226         JRA     UTYP2   ;skip first pass
      001917 CD 05 8A         [ 4] 4227 UTYP1:  CALL     DUPP
      00191A CD 05 01         [ 4] 4228         CALL     CAT
      00191D CD 0B 15         [ 4] 4229         CALL     TCHAR
      001920 CD 04 24         [ 4] 4230         CALL     EMIT    ;display only printable
      001923 CD 0A 7F         [ 4] 4231         CALL     ONEP    ;increment address
      001926 CD 04 79         [ 4] 4232 UTYP2:  CALL     DONXT
      001929 19 17                 4233         .word      UTYP1   ;loop till done
      00192B CC 05 80         [ 2] 4234         JP     DROP
                                   4235 
                                   4236 ;       dm+     ( a u -- a )
                                   4237 ;       Dump u bytes from ,
                                   4238 ;       leaving a+u on  stack.
      00192E 19 0C                 4239         .word      LINK
                           001930  4240 LINK = . 
      001930 03                    4241         .byte      3
      001931 64 6D 2B              4242         .ascii     "dm+"
      001934                       4243 DUMPP:
      001934 CD 05 B4         [ 4] 4244         CALL     OVER
      001937 CD 04 65         [ 4] 4245         CALL     DOLIT
      00193A 00 04                 4246         .word      4
      00193C CD 0F B9         [ 4] 4247         CALL     UDOTR   ;display address
      00193F CD 0F 09         [ 4] 4248         CALL     SPACE
      001942 CD 05 53         [ 4] 4249         CALL     TOR     ;start count down loop
      001945 20 11            [ 2] 4250         JRA     PDUM2   ;skip first pass
      001947 CD 05 8A         [ 4] 4251 PDUM1:  CALL     DUPP
      00194A CD 05 01         [ 4] 4252         CALL     CAT
      00194D CD 04 65         [ 4] 4253         CALL     DOLIT
      001950 00 03                 4254         .word      3
      001952 CD 0F B9         [ 4] 4255         CALL     UDOTR   ;display numeric data
      001955 CD 0A 7F         [ 4] 4256         CALL     ONEP    ;increment address
      001958 CD 04 79         [ 4] 4257 PDUM2:  CALL     DONXT
      00195B 19 47                 4258         .word      PDUM1   ;loop till done
      00195D 81               [ 4] 4259         RET
                                   4260 
                                   4261 ;       DUMP    ( a u -- )
                                   4262 ;       Dump u bytes from a,
                                   4263 ;       in a formatted manner.
      00195E 19 30                 4264         .word      LINK
                           001960  4265 LINK = . 
      001960 04                    4266         .byte      4
      001961 44 55 4D 50           4267         .ascii     "DUMP"
      001965                       4268 DUMP:
      001965 CD 06 47         [ 4] 4269         CALL     BASE
      001968 CD 04 E3         [ 4] 4270         CALL     AT
      00196B CD 05 53         [ 4] 4271         CALL     TOR
      00196E CD 0D 91         [ 4] 4272         CALL     HEX     ;save radix, set hex
      001971 CD 04 65         [ 4] 4273         CALL     DOLIT
      001974 00 10                 4274         .word      16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001976 CD 09 A5         [ 4] 4275         CALL     SLASH   ;change count to lines
      001979 CD 05 53         [ 4] 4276         CALL     TOR     ;start count down loop
      00197C CD 0F 51         [ 4] 4277 DUMP1:  CALL     CR
      00197F CD 04 65         [ 4] 4278         CALL     DOLIT
      001982 00 10                 4279         .word      16
      001984 CD 07 70         [ 4] 4280         CALL     DDUP
      001987 CD 19 34         [ 4] 4281         CALL     DUMPP   ;display numeric
      00198A CD 07 45         [ 4] 4282         CALL     ROT
      00198D CD 07 45         [ 4] 4283         CALL     ROT
      001990 CD 0F 09         [ 4] 4284         CALL     SPACE
      001993 CD 0F 09         [ 4] 4285         CALL     SPACE
      001996 CD 19 12         [ 4] 4286         CALL     UTYPE   ;display printable characters
      001999 CD 04 79         [ 4] 4287         CALL     DONXT
      00199C 19 7C                 4288         .word      DUMP1   ;loop till done
      00199E CD 05 80         [ 4] 4289 DUMP3:  CALL     DROP
      0019A1 CD 05 34         [ 4] 4290         CALL     RFROM
      0019A4 CD 06 47         [ 4] 4291         CALL     BASE
      0019A7 CC 04 CC         [ 2] 4292         JP     STORE   ;restore radix
                                   4293 
                                   4294 ;       .S      ( ... -- ... )
                                   4295 ;        Display  contents of stack.
      0019AA 19 60                 4296         .word      LINK
                           0019AC  4297 LINK = . 
      0019AC 02                    4298         .byte      2
      0019AD 2E 53                 4299         .ascii     ".S"
      0019AF                       4300 DOTS:
      0019AF CD 0F 51         [ 4] 4301         CALL     CR
      0019B2 CD 0B 2D         [ 4] 4302         CALL     DEPTH   ;stack depth
      0019B5 CD 05 53         [ 4] 4303         CALL     TOR     ;start count down loop
      0019B8 20 09            [ 2] 4304         JRA     DOTS2   ;skip first pass
      0019BA CD 05 47         [ 4] 4305 DOTS1:  CALL     RAT
      0019BD CD 0B 44         [ 4] 4306 	CALL     PICK
      0019C0 CD 0F EC         [ 4] 4307         CALL     DOT     ;index stack, display contents
      0019C3 CD 04 79         [ 4] 4308 DOTS2:  CALL     DONXT
      0019C6 19 BA                 4309         .word      DOTS1   ;loop till done
      0019C8 CD 0F 90         [ 4] 4310         CALL     DOTQP
      0019CB 05                    4311         .byte      5
      0019CC 20 3C 73 70 20        4312         .ascii     " <sp "
      0019D1 81               [ 4] 4313         RET
                                   4314 
                                   4315 ;       >NAME   ( ca -- na | F )
                                   4316 ;       Convert code address
                                   4317 ;       to a name address.
      0019D2 19 AC                 4318         .word      LINK
                           0019D4  4319 LINK = . 
      0019D4 05                    4320         .byte      5
      0019D5 3E 4E 41 4D 45        4321         .ascii     ">NAME"
      0019DA                       4322 TNAME:
      0019DA CD 06 CA         [ 4] 4323         CALL     CNTXT   ;vocabulary link
      0019DD CD 04 E3         [ 4] 4324 TNAM2:  CALL     AT
      0019E0 CD 05 8A         [ 4] 4325         CALL     DUPP    ;?last word in a vocabulary
      0019E3 CD 04 98         [ 4] 4326         CALL     QBRAN
      0019E6 1A 01                 4327         .word      TNAM4
      0019E8 CD 07 70         [ 4] 4328         CALL     DDUP
      0019EB CD 11 71         [ 4] 4329         CALL     NAMET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0019EE CD 05 FF         [ 4] 4330         CALL     XORR    ;compare
      0019F1 CD 04 98         [ 4] 4331         CALL     QBRAN
      0019F4 19 FB                 4332         .word      TNAM3
      0019F6 CD 0A 63         [ 4] 4333         CALL     CELLM   ;continue with next word
      0019F9 20 E2            [ 2] 4334         JRA     TNAM2
      0019FB CD 05 9A         [ 4] 4335 TNAM3:  CALL     SWAPP
      0019FE CC 05 80         [ 2] 4336         JP     DROP
      001A01 CD 07 65         [ 4] 4337 TNAM4:  CALL     DDROP
      001A04 CC 0A EB         [ 2] 4338         JP     ZERO
                                   4339 
                                   4340 ;       .ID     ( na -- )
                                   4341 ;        Display  name at address.
      001A07 19 D4                 4342         .word      LINK
                           001A09  4343 LINK = . 
      001A09 03                    4344         .byte      3
      001A0A 2E 49 44              4345         .ascii     ".ID"
      001A0D                       4346 DOTID:
      001A0D CD 07 34         [ 4] 4347         CALL     QDUP    ;if zero no name
      001A10 CD 04 98         [ 4] 4348         CALL     QBRAN
      001A13 1A 23                 4349         .word      DOTI1
      001A15 CD 0B C2         [ 4] 4350         CALL     COUNT
      001A18 CD 04 65         [ 4] 4351         CALL     DOLIT
      001A1B 00 1F                 4352         .word      0x1F
      001A1D CD 05 D6         [ 4] 4353         CALL     ANDD    ;mask lexicon bits
      001A20 CC 19 12         [ 2] 4354         JP     UTYPE
      001A23 CD 0F 90         [ 4] 4355 DOTI1:  CALL     DOTQP
      001A26 09                    4356         .byte      9
      001A27 20 6E 6F 4E 61 6D 65  4357         .ascii     " noName"
      001A2E 81               [ 4] 4358         RET
                                   4359 
                           000000  4360 WANT_SEE=0
                           000000  4361 .if WANT_SEE 
                                   4362 ;       SEE     ( -- ; <string> )
                                   4363 ;       A simple decompiler.
                                   4364 ;       Updated for byte machines.
                                   4365         .word      LINK
                                   4366 LINK = . 
                                   4367         .byte      3
                                   4368         .ascii     "SEE"
                                   4369 SEE:
                                   4370         CALL     TICK    ;starting address
                                   4371         CALL     CR
                                   4372         CALL     ONEM
                                   4373 SEE1:   CALL     ONEP
                                   4374         CALL     DUPP
                                   4375         CALL     AT
                                   4376         CALL     DUPP
                                   4377         CALL     QBRAN
                                   4378         .word    SEE2
                                   4379         CALL     TNAME   ;?is it a name
                                   4380 SEE2:   CALL     QDUP    ;name address or zero
                                   4381         CALL     QBRAN
                                   4382         .word    SEE3
                                   4383         CALL     SPACE
                                   4384         CALL     DOTID   ;display name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4385         CALL     ONEP
                                   4386         JRA      SEE4
                                   4387 SEE3:   CALL     DUPP
                                   4388         CALL     CAT
                                   4389         CALL     UDOT    ;display number
                                   4390 SEE4:   CALL     NUFQ    ;user control
                                   4391         CALL     QBRAN
                                   4392         .word    SEE1
                                   4393         JP     DROP
                                   4394 .endif ; WANT_SEE 
                                   4395 
                                   4396 ;       WORDS   ( -- )
                                   4397 ;       Display names in vocabulary.
      001A2F 1A 09                 4398         .word      LINK
                           001A31  4399 LINK = . 
      001A31 05                    4400         .byte      5
      001A32 57 4F 52 44 53        4401         .ascii     "WORDS"
      001A37                       4402 WORDS:
      001A37 CD 0F 51         [ 4] 4403         CALL     CR
      001A3A CD 06 CA         [ 4] 4404         CALL     CNTXT   ;only in context
      001A3D CD 04 E3         [ 4] 4405 WORS1:  CALL     AT
      001A40 CD 07 34         [ 4] 4406         CALL     QDUP    ;?at end of list
      001A43 CD 04 98         [ 4] 4407         CALL     QBRAN
      001A46 1A 59                 4408         .word      WORS2
      001A48 CD 05 8A         [ 4] 4409         CALL     DUPP
      001A4B CD 0F 09         [ 4] 4410         CALL     SPACE
      001A4E CD 1A 0D         [ 4] 4411         CALL     DOTID   ;display a name
      001A51 CD 0A 63         [ 4] 4412         CALL     CELLM
      001A54 CD 04 AF         [ 4] 4413         CALL     BRAN
      001A57 1A 3D                 4414         .word      WORS1
      001A59 81               [ 4] 4415 WORS2:  RET
                                   4416 
                                   4417         
                                   4418 ;; Hardware reset
                                   4419 
                                   4420 ;       hi      ( -- )
                                   4421 ;       Display sign-on message.
      001A5A 1A 31                 4422         .word      LINK
                           001A5C  4423 LINK = . 
      001A5C 02                    4424         .byte      2
      001A5D 68 69                 4425         .ascii     "hi"
      001A5F                       4426 HI:
      001A5F CD 0F 51         [ 4] 4427         CALL     CR
      001A62 CD 0F 90         [ 4] 4428         CALL     DOTQP   ;initialize I/O
      001A65 0F                    4429         .byte      15
      001A66 73 74 6D 38 65 46 6F  4430         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A72 33                    4431 	.byte      VER+'0'
      001A73 2E                    4432         .byte      '.' 
      001A74 30                    4433 	.byte      EXT+'0' ;version
      001A75 CD 0F 90         [ 4] 4434         CALL    DOTQP
                           000000  4435 .if NUCLEO          
                                   4436         .byte 18
                                   4437         .ascii  " on NUCLEO-8S208RB"
                                   4438 .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                           000000  4439 .if DISCOVERY
                                   4440         .byte 19
                                   4441         .ascii  " on STM8S-DISCOVERY"
                                   4442 .endif
                           000001  4443 .if DOORBELL
      001A78 10                    4444         .byte 16
      001A79 20 6F 6E 20 73 74 6D  4445         .ascii " on stm8s105k6b6"
             38 73 31 30 35 6B 36
             62 36
                                   4446 .endif
      001A89 CC 0F 51         [ 2] 4447         JP     CR
                                   4448 
                           000000  4449 WANT_DEBUG=0
                           000000  4450 .if WANT_DEBUG 
                                   4451 ;       DEBUG      ( -- )
                                   4452 ;       Display sign-on message.
                                   4453 ;        .word      LINK
                                   4454 LINK = . 
                                   4455         .byte      5
                                   4456         .ascii     "DEBUG"
                                   4457 DEBUG:
                                   4458 	CALL DOLIT
                                   4459 	.word 0x65
                                   4460 	CALL EMIT
                                   4461 	CALL DOLIT
                                   4462 	.word 0
                                   4463  	CALL ZLESS 
                                   4464 	CALL DOLIT
                                   4465 	.word 0xFFFE
                                   4466 	CALL ZLESS 
                                   4467 	CALL UPLUS 
                                   4468  	CALL DROP 
                                   4469 	CALL DOLIT
                                   4470 	.word 3
                                   4471 	CALL UPLUS 
                                   4472 	CALL UPLUS 
                                   4473  	CALL DROP
                                   4474 	CALL DOLIT
                                   4475 	.word 0x43
                                   4476 	CALL UPLUS 
                                   4477  	CALL DROP
                                   4478 	CALL EMIT
                                   4479 	CALL DOLIT
                                   4480 	.word 0x4F
                                   4481 	CALL DOLIT
                                   4482 	.word 0x6F
                                   4483  	CALL XORR
                                   4484 	CALL DOLIT
                                   4485 	.word 0xF0
                                   4486  	CALL ANDD
                                   4487 	CALL DOLIT
                                   4488 	.word 0x4F
                                   4489  	CALL ORR
                                   4490 	CALL EMIT
                                   4491 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4492 	.word 8
                                   4493 	CALL DOLIT
                                   4494 	.word 6
                                   4495  	CALL SWAPP
                                   4496 	CALL OVER
                                   4497 	CALL XORR
                                   4498 	CALL DOLIT
                                   4499 	.word 3
                                   4500 	CALL ANDD 
                                   4501 	CALL ANDD
                                   4502 	CALL DOLIT
                                   4503 	.word 0x70
                                   4504 	CALL UPLUS 
                                   4505 	CALL DROP
                                   4506 	CALL EMIT
                                   4507 	CALL DOLIT
                                   4508 	.word 0
                                   4509 	CALL QBRAN
                                   4510 	.word DEBUG1
                                   4511 	CALL DOLIT
                                   4512 	.word 0x3F
                                   4513 DEBUG1:
                                   4514 	CALL DOLIT
                                   4515 	.word 0xFFFF
                                   4516 	CALL QBRAN
                                   4517 	.word DEBUG2
                                   4518 	CALL DOLIT
                                   4519 	.word 0x74
                                   4520 	CALL BRAN
                                   4521 	.word DEBUG3
                                   4522 DEBUG2:
                                   4523 	CALL DOLIT
                                   4524 	.word 0x21
                                   4525 DEBUG3:
                                   4526 	CALL EMIT
                                   4527 	CALL DOLIT
                                   4528 	.word 0x68
                                   4529 	CALL DOLIT
                                   4530 	.word 0x80
                                   4531 	CALL STORE
                                   4532 	CALL DOLIT
                                   4533 	.word 0x80
                                   4534 	CALL AT
                                   4535 	CALL EMIT
                                   4536 	CALL DOLIT
                                   4537 	.word 0x4D
                                   4538 	CALL TOR
                                   4539 	CALL RAT
                                   4540 	CALL RFROM
                                   4541 	CALL ANDD
                                   4542 	CALL EMIT
                                   4543 	CALL DOLIT
                                   4544 	.word 0x61
                                   4545 	CALL DOLIT
                                   4546 	.word 0xA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 	CALL TOR
                                   4548 DEBUG4:
                                   4549 	CALL DOLIT
                                   4550 	.word 1
                                   4551 	CALL UPLUS 
                                   4552 	CALL DROP
                                   4553 	CALL DONXT
                                   4554 	.word DEBUG4
                                   4555 	CALL EMIT
                                   4556 	CALL DOLIT
                                   4557 	.word 0x656D
                                   4558 	CALL DOLIT
                                   4559 	.word 0x100
                                   4560 	CALL UMSTA
                                   4561 	CALL SWAPP
                                   4562 	CALL DOLIT
                                   4563 	.word 0x100
                                   4564 	CALL UMSTA
                                   4565 	CALL SWAPP 
                                   4566 	CALL DROP
                                   4567 	CALL EMIT
                                   4568 	CALL EMIT
                                   4569 	CALL DOLIT
                                   4570 	.word 0x2043
                                   4571 	CALL DOLIT
                                   4572 	.word 0
                                   4573 	CALL DOLIT
                                   4574 	.word 0x100
                                   4575 	CALL UMMOD
                                   4576 	CALL EMIT
                                   4577 	CALL EMIT
                                   4578 	;JP ORIG
                                   4579 	RET
                                   4580 .endif ; WANT_DEBUG 
                                   4581 
                                   4582 
                                   4583 ;       'BOOT   ( -- a )
                                   4584 ;       The application startup vector.
      001A8C 1A 5C                 4585         .word      LINK
                           001A8E  4586 LINK = . 
      001A8E 05                    4587         .byte      5
      001A8F 27 42 4F 4F 54        4588         .ascii     "'BOOT"
      001A94                       4589 TBOOT:
      001A94 CD 06 37         [ 4] 4590         CALL     DOVAR
      001A97 40 02                 4591         .word    APP_RUN      ;application to boot
                                   4592 
                                   4593 ;       COLD    ( -- )
                                   4594 ;       The hilevel cold start s=ence.
      001A99 1A 8E                 4595         .word      LINK
                           001A9B  4596         LINK = . 
      001A9B 04                    4597         .byte      4
      001A9C 43 4F 4C 44           4598         .ascii     "COLD"
      001AA0                       4599 COLD:
                           000000  4600 .if WANT_DEBUG
                                   4601         CALL DEBUG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4602 .endif ; WANT_DEBUG
      001AA0 CD 04 65         [ 4] 4603 COLD1:  CALL     DOLIT
      001AA3 00 2B                 4604         .word      UZERO
      001AA5 CD 04 65         [ 4] 4605 	CALL     DOLIT
      001AA8 00 06                 4606         .word      UPP
      001AAA CD 04 65         [ 4] 4607         CALL     DOLIT
      001AAD 00 1A                 4608 	.word      UEND-UZERO
      001AAF CD 0C 26         [ 4] 4609         CALL     CMOVE   ;initialize user area
                                   4610 
                                   4611 ; if APP_RUN==0 initialize with ca de 'hi'  
      001AB2 90 CE 40 02      [ 2] 4612         ldw y,APP_RUN 
      001AB6 26 0B            [ 1] 4613         jrne 0$
      001AB8 1D 00 02         [ 2] 4614         subw x,#CELLL 
      001ABB 90 AE 1A 5F      [ 2] 4615         ldw y,#HI  
      001ABF FF               [ 2] 4616         ldw (x),y
      001AC0 CD 1B BB         [ 4] 4617         call UPDATRUN 
      001AC3                       4618 0$:        
                                   4619 ; update LAST with APP_LAST 
                                   4620 ; if APP_LAST > LAST else do the opposite
      001AC3 90 CE 40 00      [ 2] 4621         ldw y,APP_LAST 
      001AC7 90 B3 1A         [ 2] 4622         cpw y,ULAST 
      001ACA 22 05            [ 1] 4623         jrugt 1$ 
                                   4624 ; save LAST at APP_LAST  
      001ACC CD 1B A3         [ 4] 4625         call UPDATLAST 
      001ACF 20 06            [ 2] 4626         jra 2$
      001AD1                       4627 1$: ; update LAST with APP_LAST 
      001AD1 90 BF 1A         [ 2] 4628         ldw ULAST,y
      001AD4 90 BF 14         [ 2] 4629         ldw UCNTXT,y
      001AD7                       4630 2$:  
                                   4631 ; update APP_CP if < app_space 
      001AD7 90 CE 40 04      [ 2] 4632         ldw y,APP_CP  
      001ADB 90 B3 18         [ 2] 4633         cpw y,UCP   
      001ADE 24 06            [ 1] 4634         jruge 3$ 
      001AE0 CD 1B CC         [ 4] 4635         call UPDATCP
      001AE3 90 BE 18         [ 2] 4636         ldw y,UCP   
      001AE6                       4637 3$:
      001AE6 90 BF 18         [ 2] 4638         ldw UCP,y                 
                                   4639 ; update UVP with APP_VP  
                                   4640 ; if APP_VP>UVP else do the opposite 
      001AE9 90 CE 40 06      [ 2] 4641         ldw y,APP_VP 
      001AED 90 B3 16         [ 2] 4642         cpw y,UVP 
      001AF0 22 05            [ 1] 4643         jrugt 4$
      001AF2 CD 1B E3         [ 4] 4644         call UPDATVP 
      001AF5 20 03            [ 2] 4645         jra 6$
      001AF7                       4646 4$: ; update UVP with APP_VP 
      001AF7 90 BF 16         [ 2] 4647         ldw UVP,y 
      001AFA                       4648 6$:      
      001AFA CD 14 54         [ 4] 4649         CALL     PRESE   ;initialize data stack and TIB
      001AFD CD 1A 94         [ 4] 4650         CALL     TBOOT
      001B00 CD 0C 0F         [ 4] 4651         CALL     ATEXE   ;application boot
      001B03 CD 17 1D         [ 4] 4652         CALL     OVERT
      001B06 CC 14 71         [ 2] 4653         JP     QUIT    ;start interpretation
                                   4654 
                                   4655 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4656         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B09 1A 9B                   30     .word LINK 
                           001B0B    31     LINK=.
      001B0B 03                      32     .byte 3 
      001B0C 46 50 21                33     .ascii "FP!"
      001B0F                         34 FPSTOR:
      001B0F 90 93            [ 1]   35     ldw y,x
      001B11 90 FE            [ 2]   36     ldw y,(y)
      001B13 90 9F            [ 1]   37     ld a,yl 
      001B15 B7 32            [ 1]   38     ld FPTR,a 
      001B17 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B1A 90 93            [ 1]   40     ldw y,x 
      001B1C 90 FE            [ 2]   41     ldw y,(y)
      001B1E 90 BF 33         [ 2]   42     ldw PTR16,y
      001B21 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B24 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B25 1B 0B                   51     .word LINK 
                           001B27    52 LINK=.
      001B27 06                      53     .byte 6 
      001B28 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B2E                         55 EEPROM: 
      001B2E 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B32 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B35 EF 02            [ 2]   58     ldw (2,x),y 
      001B37 90 5F            [ 1]   59     clrw y 
      001B39 FF               [ 2]   60     ldw (x),y 
      001B3A 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B3B 1B 27                   67 	.word LINK 
                           001B3D    68 	LINK=.
      001B3D 08                      69 	.byte 8 
      001B3E 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B46                         71 EEPLAST:
      001B46 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B49 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B4D EF 02            [ 2]   74 	ldw (2,x),y 
      001B4F 90 5F            [ 1]   75 	clrw y 
      001B51 FF               [ 2]   76 	ldw (x),y 
      001B52 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B53 1B 3D                   83 	.word LINK 
                           001B55    84 	LINK=.
      001B55 07                      85 	.byte 7
      001B56 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B5D                         87 EEPRUN:
      001B5D 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B60 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B64 EF 02            [ 2]   90 	ldw (2,x),y 
      001B66 90 5F            [ 1]   91 	clrw y 
      001B68 FF               [ 2]   92 	ldw (x),y 
      001B69 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B6A 1B 55                   99 	.word LINK
                           001B6C   100 	LINK=.
      001B6C 06                     101 	.byte 6 
      001B6D 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B73                        103 EEPCP:
      001B73 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B76 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B7A EF 02            [ 2]  106 	ldw (2,x),y 
      001B7C 90 5F            [ 1]  107 	clrw y 
      001B7E FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B7F 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B80 1B 6C                  115 	.word LINK
                           001B82   116 	LINK=.
      001B82 06                     117 	.byte 6
      001B83 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B89                        119 EEPVP:
      001B89 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B8C 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B90 EF 02            [ 2]  122 	ldw (2,x),y 
      001B92 90 5F            [ 1]  123 	clrw y 
      001B94 FF               [ 2]  124 	ldw (x),y 
      001B95 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B96 1B 82                  131 	.word LINK 
                           001B98   132 	LINK=.
      001B98 0A                     133 	.byte 10
      001B99 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001BA3                        135 UPDATLAST:
      001BA3 CD 06 F6         [ 4]  136 	call LAST
      001BA6 CD 04 E3         [ 4]  137 	call AT  
      001BA9 CD 1B 46         [ 4]  138 	call EEPLAST
      001BAC CC 1D 82         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001BAF 1B 98                  145 	.word LINK
                           001BB1   146 	LINK=.
      001BB1 09                     147 	.byte 9
      001BB2 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001BBB                        149 UPDATRUN:
      001BBB CD 1B 5D         [ 4]  150 	call EEPRUN
      001BBE CC 1D 82         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001BC1 1B B1                  157 	.word LINK 
                           001BC3   158 	LINK=.
      001BC3 08                     159 	.byte 8 
      001BC4 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001BCC                        161 UPDATCP:
      001BCC CD 06 E6         [ 4]  162 	call CPP 
      001BCF CD 04 E3         [ 4]  163 	call AT 
      001BD2 CD 1B 73         [ 4]  164 	call EEPCP 
      001BD5 CC 1D 82         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BD8 1B C3                  171 	.word LINK
                           001BDA   172 	LINK=.
      001BDA 08                     173 	.byte 8 
      001BDB 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BE3                        175 UPDATVP:
      001BE3 CD 06 D8         [ 4]  176 	call VPP 
      001BE6 CD 04 E3         [ 4]  177 	call AT
      001BE9 CD 1B 89         [ 4]  178 	call EEPVP 
      001BEC CC 1D 82         [ 2]  179 	jp EESTORE
                                    180 	
                           000000   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
                                    186     .word LINK 
                                    187 LINK=.
                                    188     .byte 2
                                    189     .ascii "F@"
                                    190 FARAT:
                                    191     call FPSTOR
                                    192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
                                    199     .word LINK
                                    200     LINK=.
                                    201     .byte 3 
                                    202     .ascii "FC@" 
                                    203 FARCAT:
                                    204     call FPSTOR
                                    205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BEF 1B DA                  213     .word LINK 
                           001BF1   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BF1 06                     215     .byte 6 
      001BF2 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001BF8                        217 UNLKEE:
      001BF8 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001BFC 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C00 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C04 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C08 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C0D 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C0E 1B F1                  230     .word LINK 
                           001C10   231 LINK=. 
      001C10 06                     232     .byte 6 
      001C11 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C17                        234 UNLKFL:
      001C17 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C1B 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C1F 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C23 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C27 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C2C 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C2D 1C 10                  247 	.word LINK 
                           001C2F   248 	LINK=.
      001C2F 06                     249 	.byte 6
      001C30 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C36                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C36 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C39 3D 32            [ 1]  255 	tnz FPTR 
      001C3B 26 16            [ 1]  256 	jrne 4$
      001C3D 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C41 24 10            [ 1]  258     jruge 4$
      001C43 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C47 25 0D            [ 1]  260     jrult 9$
      001C49 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C4D 22 07            [ 1]  262 	jrugt 9$
      001C4F CD 1B F8         [ 4]  263 	call UNLKEE
      001C52 81               [ 4]  264 	ret 
      001C53 CD 1C 17         [ 4]  265 4$: call UNLKFL
      001C56 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C57 1C 2F                  273 	.word LINK 
                           001C59   274 	LINK=.
      001C59 04                     275 	.byte 4 
      001C5A 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C5E                        277 LOCK: 
      001C5E 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C62 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C66 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C67 1C 59                  286 	.word LINK 
                           001C69   287 	LINK=. 
      001C69 08                     288 	.byte 8 
      001C6A 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C72                        290 INC_FPTR:
      001C72 3C 34            [ 1]  291 	inc PTR8 
      001C74 26 0C            [ 1]  292 	jrne 1$
      001C76 90 89            [ 2]  293 	pushw y 
      001C78 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001C7B 90 5C            [ 1]  295 	incw y 
      001C7D 90 BF 32         [ 2]  296 	ldw FPTR,y
      001C80 90 85            [ 2]  297 	popw y  
      001C82 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C83 1C 69                  304 	.word LINK 
                           001C85   305 	LINK=.
      001C85 04                     306 	.byte 4 
      001C86 50 54 52 2B            307 	.ascii "PTR+"
      001C8A                        308 PTRPLUS:
      001C8A 90 93            [ 1]  309 	ldw y,x 
      001C8C 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C8F 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001C93 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001C96 24 02            [ 1]  313 	jrnc 1$
      001C98 3C 32            [ 1]  314 	inc FPTR 
      001C9A 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C9B 1C 85                  322 	.word LINK 
                           001C9D   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C9D 07                     324 	.byte 7 
      001C9E 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001CA5                        326 EE_READ:
      001CA5 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001CA8 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001CAC 90 95            [ 1]  329 	ld yh,a 
      001CAE CD 1C 72         [ 4]  330 	call INC_FPTR 
      001CB1 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001CB5 CD 1C 72         [ 4]  332 	call INC_FPTR 
      001CB8 90 97            [ 1]  333 	ld yl,a 
      001CBA FF               [ 2]  334 	ldw (x),y 
      001CBB 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CBC 1C 9D                  341 	.word LINK 
                           001CBE   342 	LINK=.
      001CBE 08                     343 	.byte 8
      001CBF 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CC7                        345 EE_CREAD:
      001CC7 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CCA 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001CCE CD 1C 72         [ 4]  348 	call INC_FPTR
      001CD1 90 5F            [ 1]  349 	clrw y 
      001CD3 90 97            [ 1]  350 	ld yl,a 
      001CD5 FF               [ 2]  351 	ldw (x),y 
      001CD6 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CD7 1C BE                  361 	.word LINK 
                           001CD9   362 	LINK=. 
      001CD9 07                     363 	.byte 7 
      001CDA 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CE1                        366 WR_BYTE:
      001CE1 CD 04 51         [ 4]  367 	call FC_XOFF
      001CE4 90 93            [ 1]  368 	ldw y,x 
      001CE6 90 FE            [ 2]  369 	ldw y,(y)
      001CE8 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CEB 90 9F            [ 1]  371 	ld a,yl
      001CED 92 BD 00 32      [ 4]  372 	ldf [FPTR],a
      001CF1 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF6 CD 04 3B         [ 4]  374 	call FC_XON
      001CF9 CC 1C 72         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001CFC 1C D9                  384 	.word LINK 
                           001CFE   385 	LINK=.
      001CFE 07                     386 	.byte 7 
      001CFF 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D06                        388 WR_WORD:
      001D06 CD 04 51         [ 4]  389 	call FC_XOFF
      001D09 90 93            [ 1]  390 	ldw y,x
      001D0B 90 FE            [ 2]  391 	ldw y,(y)
      001D0D 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D10 90 9E            [ 1]  393 	ld a,yh 
      001D12 92 BD 00 32      [ 4]  394 	ldf [FPTR],a
      001D16 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D1B CD 1C 72         [ 4]  396 	call INC_FPTR 
      001D1E 90 9F            [ 1]  397 	ld a,yl 
      001D20 92 BD 00 32      [ 4]  398 	ldf [FPTR],a
      001D24 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D29 CD 04 3B         [ 4]  400 	call FC_XON
      001D2C CC 1C 72         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D2F 1C FE                  408     .word LINK 
                           001D31   409 	LINK=.
      001D31 04                     410     .byte 4 
      001D32 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D36                        416 EECSTORE:
      001D36 52 02            [ 2]  417 	sub sp,#VSIZE
      001D38 CD 1B 0F         [ 4]  418     call FPSTOR
      001D3B E6 01            [ 1]  419 	ld a,(1,x)
      001D3D 43               [ 1]  420 	cpl a 
      001D3E 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D40 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D42 CD 1C 36         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D45 3D 32            [ 1]  425 	tnz FPTR 
      001D47 26 19            [ 1]  426 	jrne 2$
      001D49 90 BE 33         [ 2]  427 	ldw y,PTR16 
      001D4C 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D50 2B 10            [ 1]  429 	jrmi 2$
      001D52 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D56 2A 0A            [ 1]  431 	jrpl 2$
      001D58 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D5A 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D5E 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D62                        436 2$: 
      001D62 CD 1C E1         [ 4]  437 	call WR_BYTE 	
      001D65 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D67 27 0D            [ 1]  439 	jreq 3$ 
      001D69 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D6B 90 5F            [ 1]  441     clrw y
      001D6D 90 97            [ 1]  442 	ld yl,a 
      001D6F 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D72 FF               [ 2]  444 	ldw (x),y 
      001D73 CD 1C E1         [ 4]  445 	call WR_BYTE
      001D76                        446 3$: 
      001D76 CD 1C 5E         [ 4]  447 	call LOCK 
      001D79 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D7B 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D7C 1D 31                  455 	.word LINK 
                           001D7E   456 	LINK=.
      001D7E 03                     457 	.byte 3 
      001D7F 45 45 21               458 	.ascii "EE!"
      001D82                        459 EESTORE:
      001D82 CD 1B 0F         [ 4]  460 	call FPSTOR 
      001D85 CD 1C 36         [ 4]  461 	call UNLOCK 
      001D88 90 93            [ 1]  462 	ldw y,x 
      001D8A 90 FE            [ 2]  463 	ldw y,(y)
      001D8C 90 89            [ 2]  464 	pushw y 
      001D8E 90 5E            [ 1]  465 	swapw y 
      001D90 FF               [ 2]  466 	ldw (x),y 
      001D91 CD 1C E1         [ 4]  467 	call WR_BYTE 
      001D94 90 85            [ 2]  468 	popw y 
      001D96 1D 00 02         [ 2]  469 	subw x,#CELLL
      001D99 FF               [ 2]  470 	ldw (x),y 
      001D9A CD 1C E1         [ 4]  471 	call WR_BYTE
      001D9D CC 1C 5E         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001DA0 1D 7E                  480 	.word LINK 
                           001DA2   481 	LINK=. 
      001DA2 09                     482 	.byte 9 
      001DA3 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001DAC                        484 row_erase:
      001DAC CD 04 51         [ 4]  485 	call FC_XOFF
      001DAF CD 1B 0F         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001DB2 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001DB5 90 AE 1E 05      [ 2]  490 	ldw y,#row_erase_proc
      001DB9 FF               [ 2]  491 	ldw (x),y 
      001DBA CD 0B EA         [ 4]  492 	call PAD 
      001DBD 90 AE 1E 2C      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DC1 72 A2 1E 05      [ 2]  494 	subw y,#row_erase_proc
      001DC5 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DC8 FF               [ 2]  496 	ldw (x),y 
      001DC9 CD 0C 26         [ 4]  497 	call CMOVE 
      001DCC                        498 block_erase:
      001DCC 90 BE 33         [ 2]  499 	ldw y,FPTR+1
      001DCF 90 A3 24 00      [ 2]  500 	cpw y,#app_space 
      001DD3 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DD5 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DD9 24 04            [ 1]  504 	jruge 1$
      001DDB CD 04 3B         [ 4]  505 	call FC_XON
      001DDE 81               [ 4]  506 	ret ; bad address 
      001DDF 90 A3 43 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DE3 23 04            [ 2]  508 	jrule 2$ 
      001DE5 CD 04 3B         [ 4]  509 	call FC_XON
      001DE8 81               [ 4]  510 	ret ; bad address 
      001DE9                        511 2$:	
      001DE9 CD 1B F8         [ 4]  512 	call UNLKEE 
      001DEC 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001DEE                        515 erase_flash:
      001DEE CD 1C 17         [ 4]  516 	call UNLKFL 
      001DF1                        517 proceed_erase:
      001DF1 CD 0B EA         [ 4]  518 	call PAD 
      001DF4 90 93            [ 1]  519 	ldw y,x
      001DF6 90 FE            [ 2]  520 	ldw y,(y)
      001DF8 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001DFB 90 FD            [ 4]  522 	call (y) 
      001DFD 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E01 CD 04 3B         [ 4]  524 	call FC_XON
      001E04 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E05                        528 row_erase_proc:
      001E05 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E09 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E0D 4F               [ 1]  531 	clr a 
      001E0E 90 5F            [ 1]  532 	clrw y 
      001E10 91 A7 00 32      [ 1]  533 	ldf ([FPTR],y),a
      001E14 90 5C            [ 1]  534     incw y
      001E16 91 A7 00 32      [ 1]  535 	ldf ([FPTR],y),a
      001E1A 90 5C            [ 1]  536     incw y
      001E1C 91 A7 00 32      [ 1]  537 	ldf ([FPTR],y),a
      001E20 90 5C            [ 1]  538     incw y
      001E22 91 A7 00 32      [ 1]  539 	ldf ([FPTR],y),a
      001E26 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E2B 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E2C                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E2C                        555 copy_buffer:
      001E2C 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E2E 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E32 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E36 90 5F            [ 1]  560 	clrw y
      001E38 F6               [ 1]  561 1$:	ld a,(x)
      001E39 91 A7 00 32      [ 1]  562 	ldf ([FPTR],y),a
      001E3D 5C               [ 1]  563 	incw x 
      001E3E 90 5C            [ 1]  564 	incw y 
      001E40 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E42 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E44 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E49 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E4A 81               [ 4]  570 	ret 
      001E4B                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E4B                        577 copy_prog_to_ram:
      001E4B 1D 00 06         [ 2]  578 	subw x,#6
      001E4E 90 AE 1E 2C      [ 2]  579 	ldw y,#copy_buffer 
      001E52 EF 04            [ 2]  580 	ldw (4,x),y 
      001E54 90 AE 07 00      [ 2]  581 	ldw y,#TIBBASE
      001E58 EF 02            [ 2]  582 	ldw (2,x),y 
      001E5A 90 AE 1E 4B      [ 2]  583 	ldw y,#copy_buffer_end 
      001E5E 72 A2 1E 2C      [ 2]  584 	subw y,#copy_buffer  
      001E62 FF               [ 2]  585 	ldw (x),y 
      001E63 CD 0C 26         [ 4]  586 	call CMOVE 
      001E66 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E67 1D A2                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001E69   597 	LINK=.
      001E69 06                     598 	.byte 6 
      001E6A 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E70                        600 write_row:
      001E70 CD 04 51         [ 4]  601 	call FC_XOFF
      001E73 CD 1B 0F         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E76 A6 80            [ 1]  604 	ld a,#0x80 
      001E78 B4 34            [ 1]  605 	and a,PTR8 
      001E7A B7 34            [ 1]  606 	ld PTR8,a  
      001E7C CD 1E 4B         [ 4]  607 	call copy_prog_to_ram
      001E7F CD 1C 36         [ 4]  608 	call UNLOCK
      001E82 90 93            [ 1]  609 	ldw y,x 
      001E84 90 FE            [ 2]  610 	ldw y,(y)
      001E86 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E89 89               [ 2]  612 	pushw x 
      001E8A 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E8B CD 07 00         [ 4]  614 	call TIBBASE
      001E8E CD 1C 5E         [ 4]  615 	call LOCK
      001E91 85               [ 2]  616 	popw x 
      001E92 CD 04 3B         [ 4]  617 	call FC_XON 
      001E95 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001E96 1E 69                  626 		.word LINK 
                           001E98   627 		LINK=.
      001E98 07                     628 		.byte 7 
      001E99 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001EA0                        630 set_option: 
      001EA0 90 93            [ 1]  631 		ldw y,x 
      001EA2 90 FE            [ 2]  632 		ldw y,(y)
      001EA4 27 06            [ 1]  633 		jreq 1$
      001EA6 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001EAA 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001EAC 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001EAF 81               [ 4]  638 		ret
      001EB0 90 58            [ 2]  639 2$:		sllw y 
      001EB2 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001EB6 FF               [ 2]  641 		ldw (x),y 
      001EB7 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001EBA 90 5F            [ 1]  643 		clrw y 
      001EBC FF               [ 2]  644 		ldw (x),y 
      001EBD CD 1D 36         [ 4]  645 		call EECSTORE
      001EC0 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001EC1 1E 98                  655 	.word LINK  
                           001EC3   656 	LINK=.
      001EC3 08                     657 	.byte 8 
      001EC4 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001ECC                        659 pristine:
                                    660 ;;; erase EEPROM
      001ECC CD 1B 2E         [ 4]  661 	call EEPROM 
      001ECF CD 07 70         [ 4]  662 1$:	call DDUP 
      001ED2 CD 1D AC         [ 4]  663 	call row_erase
      001ED5 90 93            [ 1]  664 	ldw y,x 
      001ED7 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EDA 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EDE EF 02            [ 2]  667 	ldw (2,x),y
      001EE0 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EE4 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EE6 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001EEA FF               [ 2]  672 2$:	ldw (x),y   
      001EEB 90 5F            [ 1]  673 	clrw y 
      001EED EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EEF CD 07 70         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001EF2 CD 1E A0         [ 4]  676 	call set_option
      001EF5 90 93            [ 1]  677 	ldw y,x 
      001EF7 90 FE            [ 2]  678 	ldw y,(y)
      001EF9 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001EFB 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001EFF 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F01 90 AE 24 00      [ 2]  683 	ldw y,#app_space
      001F05 EF 02            [ 2]  684 	ldw (2,x),y  
      001F07 90 5F            [ 1]  685 	clrw y 
      001F09 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F0A CD 1D AC         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F0D 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F10 90 5F            [ 1]  690 	clrw y  
      001F12 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F13 CD 05 8A         [ 4]  692 	call DUPP  
      001F16 CD 1F 33         [ 4]  693 	call reset_vector
      001F19 90 93            [ 1]  694 	ldw y,x 
      001F1B 90 FE            [ 2]  695 	ldw y,(y)
      001F1D 90 5C            [ 1]  696 	incw y   ; next vector 
      001F1F 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F23 25 ED            [ 1]  698 	jrult 4$
      001F25 CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F28 1E C3                  707 	.word LINK 
                           001F2A   708 	LINK=. 
      001F2A 08                     709 	.byte 8 
      001F2B 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F33                        711 reset_vector:
      001F33 90 93            [ 1]  712 	ldw y,x
      001F35 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F38 90 FE            [ 2]  714 	ldw y,(y)
      001F3A 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F3E 27 3A            [ 1]  716 	jreq 9$
      001F40 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F44 22 34            [ 1]  718 	jrugt 9$  
      001F46 90 58            [ 2]  719 	sllw y 
      001F48 90 58            [ 2]  720 	sllw y 
      001F4A 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F4E 90 BF 24         [ 2]  722 	ldw YTEMP,y
      001F51 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F54 EF 02            [ 2]  724 	ldw (2,x),y 
      001F56 90 5F            [ 1]  725 	clrw y
      001F58 FF               [ 2]  726 	ldw (x),y 
      001F59 A6 82            [ 1]  727 	ld a,#0x82 
      001F5B 90 95            [ 1]  728 	ld yh,a
      001F5D EF 04            [ 2]  729 	ldw (4,x),y
      001F5F CD 1D 82         [ 4]  730 	call EESTORE
      001F62 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F65 90 5F            [ 1]  732 	clrw y 
      001F67 FF               [ 2]  733 	ldw (x),y 
      001F68 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F6C EF 04            [ 2]  735 	ldw (4,x),y 
      001F6E 90 BE 24         [ 2]  736 	ldw y,YTEMP  
      001F71 72 A9 00 02      [ 2]  737 	addw y,#2
      001F75 EF 02            [ 2]  738 	ldw (2,x),y 
      001F77 CD 1D 82         [ 4]  739 	call EESTORE
      001F7A 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F7B 1F 2A                  749 	.word LINK 
                           001F7D   750 	LINK=.
      001F7D 07                     751 	.byte 7
      001F7E 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F85                        758 CHKIVEC:
      001F85 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F87 90 93            [ 1]  760 	ldw y,x 
      001F89 90 FE            [ 2]  761 	ldw y,(y)
      001F8B 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001F8D 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001F8F AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001F92 BF 33            [ 2]  765 	ldw PTR16,X
      001F94 AE FF FC         [ 2]  766 	ldw x,#-4 
      001F97 1C 00 04         [ 2]  767 1$:	addw x,#4
      001F9A A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001F9D 27 22            [ 1]  769 	jreq 9$
      001F9F 90 93            [ 1]  770 	ldw y,x  
      001FA1 91 D6 33         [ 4]  771 	ld a,([PTR16],y)
      001FA4 11 03            [ 1]  772 	cp a,(CADR,sp)
      001FA6 25 EF            [ 1]  773 	jrult 1$
      001FA8 90 5C            [ 1]  774 	incw y 
      001FAA 91 D6 33         [ 4]  775 	ld a,([PTR16],y)
      001FAD 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001FAF 25 E6            [ 1]  777 	jrult 1$ 
      001FB1 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001FB3 54               [ 2]  779 	srlw x
      001FB4 54               [ 2]  780 	srlw x 
      001FB5 90 93            [ 1]  781 	ldw y,x 
      001FB7 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FB9 FF               [ 2]  783 	ldw (x),y
      001FBA CD 1F 33         [ 4]  784 	call reset_vector
      001FBD 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FBF 20 D6            [ 2]  786 	jra 1$
      001FC1 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FC3 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FC6 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FC8 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FC9 1F 7D                  798 	.word LINK
                           001FCB   799 	LINK=.
      001FCB 08                     800 	.byte 8 
      001FCC 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FD4                        802 set_vector:
      001FD4 90 93            [ 1]  803     ldw y,x 
      001FD6 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FD9 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FDB 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FDF 23 04            [ 2]  807 	jrule 2$
      001FE1 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FE4 81               [ 4]  809 	ret
      001FE5 90 58            [ 2]  810 2$:	sllw y 
      001FE7 90 58            [ 2]  811 	sllw y 
      001FE9 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      001FED 90 BF 24         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FF0 A6 82            [ 1]  814 	ld a,#0x82 
      001FF2 90 95            [ 1]  815 	ld yh,a 
      001FF4 E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      001FF6 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      001FF8 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      001FFB EF 04            [ 2]  820 	ldw (4,x),y 
      001FFD 90 BE 24         [ 2]  821 	ldw y,YTEMP
      002000 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002002 90 5F            [ 1]  823 	clrw y 
      002004 FF               [ 2]  824 	ldw (x),y   ; as a double 
      002005 CD 1D 82         [ 4]  825 	call EESTORE 
      002008 90 93            [ 1]  826 	ldw y,x 
      00200A 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      00200D 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      002010 EF 04            [ 2]  829 	ldw (4,x),y 
      002012 90 BE 24         [ 2]  830 	ldw y,YTEMP 
      002015 72 A9 00 02      [ 2]  831 	addw y,#2 
      002019 EF 02            [ 2]  832 	ldw (2,x),y 
      00201B 90 5F            [ 1]  833 	clrw y 
      00201D FF               [ 2]  834 	ldw (x),y 
      00201E CD 1D 82         [ 4]  835 	call EESTORE
      002021 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      002024 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      002025 1F CB                  844 	.word LINK
                           002027   845 	LINK=.
      002027 03                     846 	.byte 3
      002028 45 45 2C               847 	.ascii "EE,"
      00202B                        848 EE_COMMA:
      00202B 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      00202E 90 BE 18         [ 2]  850 	ldw y,UCP
      002031 90 89            [ 2]  851 	pushw y 
      002033 EF 02            [ 2]  852 	ldw (2,x),y 
      002035 90 5F            [ 1]  853 	clrw y 
      002037 FF               [ 2]  854 	ldw (x),y
      002038 CD 1D 82         [ 4]  855 	call EESTORE
      00203B 90 85            [ 2]  856 	popw y 
      00203D 72 A9 00 02      [ 2]  857 	addw y,#2
      002041 90 BF 18         [ 2]  858 	ldw UCP,y
      002044 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      002045 20 27                  866 	.word LINK 
                           002047   867 	LINK=.
      002047 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002048 45 45 43 2C            869 	.ascii "EEC,"
      00204C                        870 EE_CCOMMA:
      00204C 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      00204F 90 BE 18         [ 2]  872 	ldw y,UCP
      002052 90 89            [ 2]  873 	pushw y 
      002054 EF 02            [ 2]  874 	ldw (2,x),y 
      002056 90 5F            [ 1]  875 	clrw y 
      002058 FF               [ 2]  876 	ldw (x),y
      002059 CD 1D 36         [ 4]  877 	call EECSTORE
      00205C 90 85            [ 2]  878 	popw y 
      00205E 90 5C            [ 1]  879 	incw y 
      002060 90 BF 18         [ 2]  880 	ldw UCP,y
      002063 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      002064 20 47                  888 	.word LINK 
                           002066   889 	LINK=.
      002066 07                     890 	.byte 7 
      002067 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      00206E                        892 ROW2BUF: 
      00206E CD 1B 0F         [ 4]  893 	call FPSTOR 
      002071 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      002073 88               [ 1]  895 	push a 
      002074 B4 34            [ 1]  896 	and a,PTR8 ; block align 
      002076 B7 34            [ 1]  897 	ld PTR8,a
      002078 90 AE 06 80      [ 2]  898 	ldw y,#ROWBUFF 
      00207C 92 BC 00 32      [ 5]  899 1$: ldf a,[FPTR]
      002080 90 F7            [ 1]  900 	ld (y),a
      002082 CD 1C 72         [ 4]  901 	call INC_FPTR
      002085 90 5C            [ 1]  902 	incw y 
      002087 0A 01            [ 1]  903 	dec (1,sp)
      002089 26 F1            [ 1]  904 	jrne 1$ 
      00208B 84               [ 1]  905 	pop a 
      00208C 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      00208D 20 66                  914 	.word LINK 
                           00208F   915 	LINK=.
      00208F 07                     916 	.byte 7 
      002090 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      002097                        918 BUF2ROW:
      002097 CD 06 85         [ 4]  919 	call TBUF ; ( ud rb -- )
      00209A CD 07 45         [ 4]  920 	call ROT 
      00209D CD 07 45         [ 4]  921 	call ROT  ; ( rb ud -- )
      0020A0 CD 1E 70         [ 4]  922 	call write_row 
      0020A3 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      0020A4 20 8F                  930 	.word LINK 
                           0020A6   931 	LINK=.
      0020A6 05                     932 	.byte 5 
      0020A7 52 46 52 45 45         933 	.ascii "RFREE"
      0020AC                        934 RFREE:
      0020AC E6 01            [ 1]  935 	ld a,(1,x)
      0020AE A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      0020B0 B7 24            [ 1]  937 	ld YTEMP,a 
      0020B2 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      0020B4 B0 24            [ 1]  939 	sub a,YTEMP 
      0020B6 90 5F            [ 1]  940 	clrw y 
      0020B8 90 97            [ 1]  941 	ld yl,a
      0020BA FF               [ 2]  942 	ldw (x),y 
      0020BB 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020BC 20 A6                  954 	.word LINK 
                           0020BE   955 	LINK=. 
      0020BE 06                     956 	.byte 6
      0020BF 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020C5                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020C5 90 93            [ 1]  961 	ldw y,x 
      0020C7 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020CA 90 BF 24         [ 2]  963 	ldw YTEMP,y 
      0020CD 90 93            [ 1]  964 	ldw y,x 
      0020CF 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020D2 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020D5 FF               [ 2]  967 	ldw (x),y 
      0020D6 90 BE 24         [ 2]  968 	ldw y,YTEMP 
      0020D9 EF 02            [ 2]  969 	ldw (2,x),y 
      0020DB CD 20 6E         [ 4]  970 	call ROW2BUF 
      0020DE 90 93            [ 1]  971 	ldw y,x 
      0020E0 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020E3 90 89            [ 2]  973 	pushw y ; udl 
      0020E5 90 9F            [ 1]  974 	ld a,yl
      0020E7 A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020E9 90 5F            [ 1]  976 	clrw y 
      0020EB 90 97            [ 1]  977 	ld yl,a 
      0020ED 72 A9 06 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020F1 1D 00 02         [ 2]  979 	subw x,#CELLL 
      0020F4 FF               [ 2]  980 	ldw (x),y  
      0020F5 CD 05 9A         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      0020F8 CD 05 34         [ 4]  982 	call RFROM  
      0020FB CD 20 AC         [ 4]  983 	call RFREE 
      0020FE CD 08 A0         [ 4]  984 	call MIN
      002101 CD 05 8A         [ 4]  985 	call DUPP 
      002104 CD 05 53         [ 4]  986 	call TOR  
      002107 CD 0C 26         [ 4]  987 	call CMOVE
      00210A CD 20 97         [ 4]  988 	call BUF2ROW 
      00210D CD 05 34         [ 4]  989 	call RFROM 
      002110 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002111 20 BE                  998 	.word LINK 
                           002113   999 	LINK=. 
      002113 05                    1000 	.byte 5 
      002114 46 41 44 44 52        1001 	.ascii "FADDR"
      002119                       1002 FADDR:
      002119 CC 0A EB         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      00211C 21 13                 1019 	.word LINK 
                           00211E  1020 	LINK=.
      00211E 05                    1021 	.byte 5 
      00211F 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      002124                       1023 FMOVE:
      002124 CD 06 97         [ 4] 1024 	call TFLASH 
      002127 CD 04 E3         [ 4] 1025 	CALL AT 
      00212A CD 04 98         [ 4] 1026 	CALL QBRAN 
      00212D 21 A8                 1027 	.word no_move  
      00212F CD 06 E6         [ 4] 1028 	call CPP
      002132 CD 04 E3         [ 4] 1029 	call AT  
      002135 CD 05 8A         [ 4] 1030 	call DUPP ; ( udl udl -- )
      002138 CD 06 CA         [ 4] 1031 	call CNTXT 
      00213B CD 04 E3         [ 4] 1032 	call AT 
      00213E CD 04 65         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002141 00 02                 1034 	.word 2 
      002143 CD 07 FE         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      002146 CD 05 9A         [ 4] 1036 	call SWAPP 
      002149 CD 21 19         [ 4] 1037 	call FADDR 
      00214C CD 07 45         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      00214F CD 05 8A         [ 4] 1039 	call DUPP 
      002152 CD 05 53         [ 4] 1040 	call TOR    ; R: a 
      002155                       1041 FMOVE2: 
      002155 CD 0B D9         [ 4] 1042 	call HERE 
      002158 CD 05 47         [ 4] 1043 	call RAT 
      00215B CD 07 FE         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      00215E                       1045 next_row:
      00215E CD 05 8A         [ 4] 1046 	call DUPP 
      002161 CD 05 53         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002164 CD 20 C5         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002167 CD 05 8A         [ 4] 1049 	call DUPP 
      00216A CD 05 53         [ 4] 1050 	call TOR
      00216D CD 07 85         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      002170 CD 05 8A         [ 4] 1052 	call DUPP 
      002173 CD 0A EB         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      002176 CD 05 34         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002179 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00217C CD 05 B4         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00217F CD 07 FE         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002182 CD 05 8A         [ 4] 1058 	call DUPP 
      002185 CD 04 98         [ 4] 1059 	call QBRAN
      002188 21 A1                 1060 	.word fmove_done 
      00218A CD 05 9A         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00218D CD 05 34         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002190 CD 07 85         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      002193 CD 05 8A         [ 4] 1064 	call DUPP 
      002196 CD 05 53         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002199 CD 05 9A         [ 4] 1066 	call SWAPP 
      00219C CD 04 AF         [ 4] 1067 	call BRAN
      00219F 21 5E                 1068 	.word next_row  
      0021A1                       1069 fmove_done:	
      0021A1 CD 05 34         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021A4 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021A7 81               [ 4] 1072  	ret  
      0021A8                       1073 no_move:
      0021A8 CD 0A EB         [ 4] 1074 	call ZERO
      0021AB 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      0021AC 21 1E                 1082 	.word LINK 
                           0021AE  1083 	LINK=.
      0021AE 09                    1084 	.byte 9
      0021AF 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      0021B8                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      0021B8 CD 1B 89         [ 4] 1088 	call EEPVP 
      0021BB CD 05 80         [ 4] 1089 	call DROP 
      0021BE CD 04 E3         [ 4] 1090 	call AT
      0021C1 CD 06 D8         [ 4] 1091 	call VPP 
      0021C4 CD 04 CC         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021C7 CD 1B 73         [ 4] 1094 	call EEPCP 
      0021CA CD 05 80         [ 4] 1095 	call DROP
      0021CD CD 04 E3         [ 4] 1096 	call AT
      0021D0 CD 04 65         [ 4] 1097 	call DOLIT 
      0021D3 00 02                 1098 	.word 2 
      0021D5 CD 07 85         [ 4] 1099 	call PLUS 
      0021D8 CD 05 8A         [ 4] 1100 	call DUPP 
      0021DB CD 06 CA         [ 4] 1101 	call CNTXT 
      0021DE CD 04 CC         [ 4] 1102 	call STORE
      0021E1 CD 06 F6         [ 4] 1103 	call LAST
      0021E4 CD 04 CC         [ 4] 1104 	call STORE 
      0021E7 CD 1B A3         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021EA CD 06 E6         [ 4] 1107 	call CPP 
      0021ED CD 04 CC         [ 4] 1108 	call STORE
      0021F0 CD 1B CC         [ 4] 1109 	call UPDATCP 
      0021F3 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      0021F4 21 AE                 1116 	.word LINK 
                           0021F6  1117 	LINK=. 
      0021F6 06                    1118 	.byte 6
      0021F7 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      0021FD                       1120 IFMOVE:
      0021FD CD 06 97         [ 4] 1121 	call TFLASH 
      002200 CD 04 E3         [ 4] 1122 	CALL AT 
      002203 CD 04 98         [ 4] 1123 	CALL QBRAN 
      002206 21 A8                 1124 	.word no_move 
      002208 CD 06 E6         [ 4] 1125 	call CPP 
      00220B CD 04 E3         [ 4] 1126 	call AT 
      00220E CD 05 8A         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002211 CD 1B 89         [ 4] 1128 	call EEPVP 
      002214 CD 05 80         [ 4] 1129 	call DROP
      002217 CD 04 E3         [ 4] 1130 	call AT  ; ( udl udl a )
      00221A CD 05 53         [ 4] 1131 	call TOR 
      00221D CD 21 19         [ 4] 1132 	call FADDR
      002220 CD 05 47         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      002223 CC 21 55         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           000001  4657 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4658         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002226 21 F6                   31         .word LINK 
                           002228    32         LINK=.
      002228 02                      33         .byte 2
      002229 50 49                   34         .ascii "PI" 
      00222B                         35 PII:
      00222B 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      00222E 90 AE 01 63      [ 2]   37         ldw y,#355 
      002232 EF 02            [ 2]   38         ldw (2,x),y 
      002234 90 AE 00 71      [ 2]   39         ldw y,#113 
      002238 FF               [ 2]   40         ldw (x),y 
      002239 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      00223A 22 28                   48         .word LINK 
                           00223C    49         LINK=.
      00223C 05                      50         .byte 5 
      00223D 53 51 52 54 32          51         .ascii "SQRT2" 
      002242                         52 SQRT2:
      002242 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002245 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002249 EF 02            [ 2]   55         ldw (2,x),y 
      00224B 90 AE 36 24      [ 2]   56         ldw y,#13860 
      00224F FF               [ 2]   57         ldw (x),y 
      002250 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002251 22 3C                   63         .word LINK 
                           002253    64         LINK=.
      002253 05                      65         .byte 5
      002254 53 51 52 54 33          66         .ascii "SQRT3" 
      002259                         67 SQRT3: 
      002259 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      00225C 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002260 EF 02            [ 2]   70     ldw (2,x),y 
      002262 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      002266 FF               [ 2]   72     ldw (x),y 
      002267 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      002268 22 53                   78         .word LINK 
                           00226A    79         LINK=.
      00226A 01                      80         .byte 1
      00226B 45                      81         .ascii "E" 
      00226C                         82 ENEPER:
      00226C 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      00226F 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      002273 EF 02            [ 2]   85     ldw (2,x),y 
      002275 90 AE 29 32      [ 2]   86     ldw y,#10546 
      002279 FF               [ 2]   87     ldw (x),y 
      00227A 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      00227B 22 6A                   92         .word LINK 
                           00227D    93         LINK=.
      00227D 06                      94         .byte 6 
      00227E 53 51 52 54 31 30       95         .ascii "SQRT10" 
      002284                         96 SQRT10:
      002284 1D 00 04         [ 2]   97     subw x,#2*CELLL
      002287 90 AE 59 98      [ 2]   98     ldw y,#22936 
      00228B EF 02            [ 2]   99     ldw (2,x),y 
      00228D 90 AE 1C 55      [ 2]  100     ldw y,#7253
      002291 FF               [ 2]  101     ldw (x),y 
      002292 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      002293 22 7D                  107         .word LINK 
                           002295   108         LINK=. 
      002295 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      002296 31 32 52 54 32         110         .ascii "12RT2"
      00229B                        111 RT12_2:
      00229B 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      00229E 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0022A2 EF 02            [ 2]  114     ldw (2,x),y 
      0022A4 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0022A8 FF               [ 2]  116     ldw (x),y 
      0022A9 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0022AA 22 95                  122         .word LINK 
                           0022AC   123         LINK=.
      0022AC 05                     124         .byte 5 
      0022AD 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0022B2                        126 LOG2S:
      0022B2 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0022B5 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0022B9 EF 02            [ 2]  129     ldw (2,x),y 
      0022BB 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0022BF FF               [ 2]  131     ldw (x),y 
      0022C0 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0022C1 22 AC                  137         .word LINK 
                           0022C3   138         LINK=.
      0022C3 04                     139         .byte 4 
      0022C4 4C 4E 32 53            140         .ascii "LN2S" 
      0022C8                        141 LN2S: 
      0022C8 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022CB 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022CF EF 02            [ 2]  144     ldw (2,x),y 
      0022D1 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022D5 FF               [ 2]  146     ldw (x),y 
      0022D6 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4659 .endif
                           000001  4660 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4661         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022D7 22 C3                   32     .word LINK 
                           0022D9    33     LINK=.
      0022D9 06                      34     .byte 6
      0022DA 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022E0                         36 CALLOT:
      0022E0 CD 06 E6         [ 4]   37     CALL CPP
      0022E3 CD 05 8A         [ 4]   38     CALL DUPP 
      0022E6 CD 04 E3         [ 4]   39     CALL AT 
      0022E9 CD 05 53         [ 4]   40     CALL TOR 
      0022EC CD 0B 5B         [ 4]   41     CALL PSTOR 
      0022EF CD 1B CC         [ 4]   42     CALL UPDATCP 
      0022F2 CD 05 34         [ 4]   43     CALL RFROM
      0022F5 CC 0A EB         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      0022F8 22 D9                   52     .word LINK 
                           0022FA    53     LINK=.
      0022FA 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0022FB 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002301                         56 CTABLE:
      002301 CD 22 E0         [ 4]   57     CALL CALLOT     
      002304 CC 18 C7         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      002307 22 FA                   67     .word LINK 
                           002309    68     LINK=.
      002309 06                      69     .byte 6
      00230A 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002310                         71 WTABLE:
      002310 CD 0A 72         [ 4]   72     CALL CELLS  
      002313 CD 22 E0         [ 4]   73     CALL CALLOT 
      002316 CC 18 C7         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002319 23 09                   82     .word LINK 
                           00231B    83     LINK=.
      00231B 06                      84     .byte 6
      00231C 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002322                         86 CTAT:
      002322 CD 1B 0F         [ 4]   87     call FPSTOR 
      002325 CD 1C 8A         [ 4]   88     call PTRPLUS 
      002328 CC 1C C7         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00232B 23 1B                   97     .word LINK 
                           00232D    98     LINK=.
      00232D 06                      99     .byte 6
      00232E 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002334                        101 WTAT:
      002334 CD 1B 0F         [ 4]  102     call FPSTOR 
      002337 CD 0A 72         [ 4]  103     call CELLS 
      00233A CD 1C 8A         [ 4]  104     call PTRPLUS 
      00233D CD 1C A5         [ 4]  105     call EE_READ 
      002340 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002341 23 2D                  113     .word LINK 
                           002343   114     LINK=.
      002343 06                     115     .byte 6 
      002344 43 54 49 4E 49 54      116     .ascii "CTINIT"
      00234A                        117 CTINIT:
      00234A CD 1B 0F         [ 4]  118     CALL FPSTOR
      00234D CD 1C 36         [ 4]  119     CALL UNLOCK
      002350 CD 0A EB         [ 4]  120     CALL ZERO 
      002353 CD 0A 7F         [ 4]  121 1$: CALL ONEP 
      002356 CD 05 8A         [ 4]  122     CALL DUPP 
      002359 CD 23 A6         [ 4]  123     CALL INTQ 
      00235C CD 04 98         [ 4]  124     CALL QBRAN 
      00235F 23 69                  125     .word 2$
      002361 CD 1C E1         [ 4]  126     call WR_BYTE 
      002364 CD 04 AF         [ 4]  127     CALL BRAN 
      002367 23 53                  128     .word 1$ 
      002369 CD 07 65         [ 4]  129 2$: CALL DDROP 
      00236C CD 1C 5E         [ 4]  130     CALL LOCK 
      00236F 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002370 23 43                  138     .word LINK 
                           002372   139     LINK=.
      002372 06                     140     .byte 6 
      002373 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002379                        142 WTINIT:
      002379 CD 1B 0F         [ 4]  143     CALL FPSTOR
      00237C CD 1C 36         [ 4]  144     CALL UNLOCK
      00237F CD 0A EB         [ 4]  145     CALL ZERO 
      002382 CD 0A 7F         [ 4]  146 1$: CALL ONEP 
      002385 CD 05 8A         [ 4]  147     CALL DUPP
      002388 CD 23 A6         [ 4]  148     CALL INTQ
      00238B CD 04 98         [ 4]  149     CALL QBRAN 
      00238E 23 98                  150     .word 2$
      002390 CD 1D 06         [ 4]  151     call WR_WORD 
      002393 CD 04 AF         [ 4]  152     CALL BRAN 
      002396 23 82                  153     .word 1$ 
      002398 CD 07 65         [ 4]  154 2$: CALL DDROP 
      00239B CD 1C 5E         [ 4]  155     CALL LOCK 
      00239E 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      00239F 23 72                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           0023A1   165     LINK=.
      0023A1 04                     166     .byte 4
      0023A2 5B 4E 5D 3F            167     .ascii "[N]?" 
      0023A6                        168 INTQ:
      0023A6 CD 0F 51         [ 4]  169     CALL CR 
      0023A9 CD 04 65         [ 4]  170     call DOLIT 
      0023AC 00 5B                  171     .word '[
      0023AE CD 04 24         [ 4]  172     CALL EMIT 
      0023B1 CD 0F EC         [ 4]  173     CALL DOT 
      0023B4 CD 0F 90         [ 4]  174     CALL  DOTQP
      0023B7 03                     175     .byte 3
      0023B8 5D 3F 20               176     .ascii "]? " 
      0023BB CD 13 38         [ 4]  177     CALL QUERY 
      0023BE CD 11 63         [ 4]  178     call TOKEN 
      0023C1 CC 0D FE         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4662 .endif
                                   4663 
                                   4664 ;===============================================================
                                   4665 
                           0023A1  4666 LASTN =	LINK   ;last name defined
                                   4667 
                                   4668 ; application code begin here
      002400                       4669 	.bndry 128 ; align on flash block  
      002400                       4670 app_space: 
                                   4671 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000821 R   |   6 ABOR1      001374 R
  6 ABOR2      00138B R   |   6 ABORQ      00136C R   |   6 ABORT      00135D R
  6 ABRTQ      001648 R   |   6 ABSS       000818 R   |   6 ACCEP      0012F3 R
  6 ACCP1      0012FC R   |   6 ACCP2      001322 R   |   6 ACCP3      001325 R
  6 ACCP4      001327 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000724 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001633 R   |   6 AGAIN      001589 R
  6 AHEAD      0015E6 R   |   6 ALLOT      00149C R   |   6 ANDD       0005D6 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E3 R   |   6 ATEXE      000C0F R
  6 AUTORUN    000117 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |   6 B115K2     0003CE R
    B19200  =  000003     |   6 B19K2      0003AB R   |     B230400 =  000007 
    B2400   =  000000     |   6 B2K4       00037C R   |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00038A R
    B57600  =  000005     |   6 B57K6      0003BC R   |     B921600 =  000009 
    B9600   =  000002     |   6 B9K6       00039A R   |   6 BACK1      00129B R
  6 BASE       000647 R   |     BASEE   =  00000A     |   6 BAUD       0003DE R
    BCNT    =  000001     |   6 BCOMP      0014DE R   |   6 BDIGS      000CF6 R
    BEEP_CSR=  0050F3     |   6 BEGIN      00156B R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001133 R   |   6 BKSP       00126B R
    BKSPP   =  000008     |   6 BLANK      000ADE R   |     BLOCK_SI=  000080 
  6 BRAN       0004AF R   |     BTW     =  000001     |   6 BUF2ROW    002097 R
  6 BYE        0000A4 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0022E0 R   |     CARRY   =  000028     |   6 CAT        000501 R
  6 CCOMMA     0014C0 R   |     CELLL   =  000002     |   6 CELLM      000A63 R
  6 CELLP      000A54 R   |   6 CELLS      000A72 R   |     CFG_GCR =  007F60 
  6 CHAR1      000F23 R   |   6 CHAR2      000F26 R   |   6 CHKIVEC    001F85 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000C2E R   |   6 CMOV2      000C46 R
  6 CMOVE      000C26 R   |     CNTDWN  =  000030     |   6 CNTXT      0006CA R
  6 COLD       001AA0 R   |   6 COLD1      001AA0 R   |   6 COLON      0017E1 R
  6 COMMA      0014A9 R   |   6 COMPI      0014EE R   |     COMPO   =  000040 
  6 CONSTANT   00188B R   |   6 COUNT      000BC2 R   |   6 CPP        0006E6 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F51 R
  6 CREAT      001827 R   |     CRR     =  00000D     |   6 CSTOR      0004F0 R
  6 CTABLE     002301 R   |   6 CTAT       002322 R   |   6 CTINIT     00234A R
  6 DAT        000BA2 R   |     DATSTK  =  000680     |   6 DCONST     0018C7 R
  6 DDROP      000765 R   |   6 DDUP       000770 R   |   6 DECIM      000DA6 R
  6 DEPTH      000B2D R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000DEB R   |   6 DI         0000B2 R   |   6 DIG        000D1F R
  6 DIGIT      000CBA R   |   6 DIGS       000D30 R   |   6 DIGS1      000D30 R
  6 DIGS2      000D3D R   |   6 DIGTQ      000DBA R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0007DF R
  6 DNEGA      0007C2 R   |   6 DOCONST    0018B5 R   |   6 DOLIT      000465 R
  6 DONXT      000479 R   |     DOORBELL=  000001     |   6 DOSTR      000F67 R
  6 DOT        000FEC R   |   6 DOT1       001002 R   |   6 DOTI1      001A23 R
  6 DOTID      001A0D R   |   6 DOTO1      001400 R   |   6 DOTOK      0013E6 R
  6 DOTPR      001115 R   |   6 DOTQ       001662 R   |   6 DOTQP      000F90 R
  6 DOTR       000F9E R   |   6 DOTS       0019AF R   |   6 DOTS1      0019BA R
  6 DOTS2      0019C3 R   |   6 DOVAR      000637 R   |   6 DO_DCONS   0018F6 R
  6 DROP       000580 R   |   6 DSTOR      000B7C R   |   6 DUMP       001965 R
  6 DUMP1      00197C R   |   6 DUMP3      00199E R   |   6 DUMPP      001934 R
  6 DUPP       00058A R   |   6 EDIGS      000D5B R   |   6 EECSTORE   001D36 R
  6 EEPCP      001B73 R   |   6 EEPLAST    001B46 R   |   6 EEPROM     001B2E R
    EEPROM_B=  004000     |     EEPROM_E=  0043FF     |     EEPROM_R=  000010 
    EEPROM_S=  000400     |   6 EEPRUN     001B5D R   |   6 EEPVP      001B89 R
  6 EESTORE    001D82 R   |   6 EE_CCOMM   00204C R   |   6 EE_COMMA   00202B R
  6 EE_CREAD   001CC7 R   |   6 EE_READ    001CA5 R   |   6 EI         0000AB R
  6 ELSEE      0015C1 R   |   6 EMIT       000424 R   |   6 ENEPER     00226C R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        00083C R
  6 EQUAL      000826 R   |   6 ERASE      000C88 R   |     ERR     =  00001B 
  6 EVAL       001429 R   |   6 EVAL1      001429 R   |   6 EVAL2      001445 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  6 EXE1       000C1D R   |   6 EXECU      0004BF R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000CE2 R
  6 FADDR      002119 R   |   6 FC_XOFF    000451 R   |   6 FC_XON     00043B R
  6 FILL       000C55 R   |   6 FILL1      000C72 R   |   6 FILL2      000C7B R
  6 FIND       0011C7 R   |   6 FIND1      0011E5 R   |   6 FIND2      001213 R
  6 FIND3      00121F R   |   6 FIND4      001233 R   |   6 FIND5      001240 R
  6 FIND6      001224 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |   6 FMOVE      002124 R   |   6 FMOVE2     002155 R
  6 FOR        00153E R   |   6 FORGET     000148 R   |   6 FORGET1    000177 R
  6 FORGET2    0001FD R   |   6 FORGET4    000206 R   |   6 FORGET6    0001BF R
  6 FPSTOR     001B0F R   |     FPTR    =  000032     |   6 FREEVAR    000213 R
  6 FREEVAR4   000249 R   |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  6 HERE       000BD9 R   |   6 HEX        000D91 R   |   6 HI         001A5F R
  6 HLD        0006B7 R   |   6 HOLD       000D06 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0017F2 R   |   6 IFETCH     00155C R   |   6 IFF        001599 R
  6 IFMOVE     0021FD R   |     IMEDD   =  000080     |   6 IMMED      001804 R
  6 INCH       000418 R   |   6 INC_FPTR   001C72 R   |   6 INITOFS    0017BA R
  6 INN        000665 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      0013C8 R
  6 INTER      00139E R   |   6 INTQ       0023A6 R   |     INT_ADC1=  000016 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    INT_AWU =  000001     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_RES1=  000008     |     INT_RES2=  000009     |     INT_RES3=  000011 
    INT_RES4=  000012     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      00079F R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      00174F R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0017A4 R   |   6 KEY        000ED1 R   |   6 KTAP       0012B8 R
  6 KTAP1      0012DB R   |   6 KTAP2      0012DE R   |   6 LAST       0006F6 R
  6 LASTN   =  0023A1 R   |   6 LBRAC      0013D5 R   |   6 LESS       000863 R
    LF      =  00000A     |   6 LINK    =  0023A1 R   |   6 LITER      001510 R
  6 LN2S       0022C8 R   |   6 LOCK       001C5E R   |   6 LOG2S      0022B2 R
  6 LSHIFT     000A9D R   |   6 LSHIFT1    000AA6 R   |   6 LSHIFT4    000AAE R
  6 LT1        000879 R   |     MASKK   =  001F7F     |   6 MAX        000883 R
  6 MAX1       000896 R   |   6 MIN        0008A0 R   |   6 MIN1       0008B3 R
    MISCOPT =  004805     |     MISCOPT_=  000004     |     MISCOPT_=  000002 
    MISCOPT_=  000003     |     MISCOPT_=  000000     |     MISCOPT_=  000001 
  6 MMOD1      000956 R   |   6 MMOD2      00096A R   |   6 MMOD3      000981 R
  6 MMSM1      0008FD R   |   6 MMSM2      000911 R   |   6 MMSM3      000913 R
  6 MMSM4      00091B R   |   6 MODD       00099B R   |   6 MONE       000B04 R
    MS      =  00002E     |   6 MSEC       0002BE R   |   6 MSMOD      000939 R
  6 MSTA1      000A2C R   |   6 MSTAR      000A09 R   |     NAFR    =  004804 
  6 NAMEQ      001260 R   |   6 NAMET      001171 R   |     NCLKOPT =  004808 
  6 NEGAT      0007B0 R   |   6 NEX1       000486 R   |   6 NEXT       00154D R
    NHSECNT =  00480A     |     NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB 
    NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF 
    NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPTBL  =  00487F     |   6 NTIB       000675 R   |     NUBC    =  004802 
    NUCLEO  =  000000     |   6 NUFQ       000EE7 R   |   6 NUFQ1      000F00 R
  6 NUMBQ      000DFE R   |   6 NUMQ1      000E32 R   |   6 NUMQ2      000E63 R
  6 NUMQ3      000EA5 R   |   6 NUMQ4      000EAA R   |   6 NUMQ5      000EB9 R
  6 NUMQ6      000EBC R   |   6 NonHandl   000000 R   |   6 OFFSET     00071B R
    OFS     =  000005     |   6 ONE        000AF6 R   |   6 ONEM       000A8C R
  6 ONEP       000A7F R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |   6 ORIG       000047 R   |   6 ORR        0005EA R
  6 OUTPUT     000429 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       0005B4 R
  6 OVERT      00171D R   |     PA      =  000000     |   6 PACKS      000C99 R
  6 PAD        000BEA R   |   6 PAREN      001124 R   |   6 PARS       00101D R
  6 PARS1      001048 R   |   6 PARS2      001073 R   |   6 PARS3      001076 R
  6 PARS4      00107F R   |   6 PARS5      0010A2 R   |   6 PARS6      0010B7 R
  6 PARS7      0010C6 R   |   6 PARS8      0010D5 R   |   6 PARSE      0010E6 R
  6 PAUSE      0002CE R   |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001947 R   |   6 PDUM2      001958 R
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |   6 PICK       000B44 R
  6 PII        00222B R   |     PIN0    =  000000     |     PIN1    =  000001 
    PIN2    =  000002     |     PIN3    =  000003     |     PIN4    =  000004 
    PIN5    =  000005     |     PIN6    =  000006     |     PIN7    =  000007 
  6 PLUS       000785 R   |   6 PNAM1      0016D2 R   |   6 PRESE      001454 R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001EF R   |   6 PSTOR      000B5B R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 PTRPLUS    001C8A R   |   6 QBRAN      000498 R
  6 QDUP       000734 R   |   6 QDUP1      00073E R   |   6 QKEY       000406 R
  6 QSTAC      00140C R   |   6 QUERY      001338 R   |   6 QUEST      00100F R
  6 QUIT       001471 R   |   6 QUIT1      001479 R   |   6 QUIT2      00147C R
  6 RAM2EE     0020C5 R   |     RAMBASE =  000000     |   6 RAMLAST    000709 R
    RAM_BASE=  000000     |     RAM_END =  0007FF     |     RAM_SIZE=  000800 
  6 RANDOM     00026C R   |   6 RAT        000547 R   |   6 RBRAC      001791 R
  6 REPEA      001616 R   |   6 RFREE      0020AC R   |   6 RFROM      000534 R
    ROP     =  004800     |   6 ROT        000745 R   |   6 ROW2BUF    00206E R
    ROWBUFF =  000680     |     RP0     =  00002C     |   6 RPAT       000511 R
    RPP     =  0007FF     |   6 RPSTO      00051E R   |   6 RSHIFT     000AB9 R
  6 RSHIFT1    000AC2 R   |   6 RSHIFT4    000ACA R   |     RST_SR  =  0050B3 
  6 RT12_2     00229B R   |   6 SAME1      00118F R   |   6 SAME2      0011B8 R
  6 SAMEQ      001187 R   |   6 SCOM1      001707 R   |   6 SCOM2      00170A R
  6 SCOMP      0016E9 R   |   6 SEED       000253 R   |     SEEDX   =  000036 
    SEEDY   =  000038     |   6 SEMIS      00172D R   |   6 SETISP     0000BE R
  6 SET_RAML   001874 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000D45 R   |   6 SIGN1      000D55 R   |   6 SLASH      0009A5 R
  6 SLMOD      000989 R   |   6 SNAME      00169C R   |     SP0     =  00002A 
  6 SPACE      000F09 R   |   6 SPACS      000F18 R   |   6 SPAT       00056A R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  000680 
    SPSAVE  =  000001     |   6 SPSTO      000577 R   |   6 SQRT10     002284 R
  6 SQRT2      002242 R   |   6 SQRT3      002259 R   |   6 SSMOD      000A35 R
    SSP     =  000001     |     STACK   =  0007FF     |   6 STAR       0009FE R
  6 STASL      000A46 R   |   6 STOD       0007E7 R   |   6 STORE      0004CC R
  6 STR        000D73 R   |   6 STRCQ      00151E R   |   6 STRQ       001655 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  6 STRQP      000F86 R   |   6 SUBB       0007FE R   |   6 SWAPP      00059A R
    SWIM_CSR=  007F80     |   6 TAP        0012A2 R   |   6 TBOOT      001A94 R
  6 TBUF       000685 R   |     TBUFFBAS=  000680     |   6 TCHAR      000B15 R
  6 TEMP       000656 R   |   6 TEVAL      0006A8 R   |   6 TFLASH     000697 R
  6 THENN      0015AE R   |   6 TIB        000BFB R   |     TIBB    =  000700 
    TIBBASE =  000700     |     TIC     =  000027     |   6 TICK       001488 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   0002FE R   |   6 TIMER      0002E8 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0019DD R
  6 TNAM3      0019FB R   |   6 TNAM4      001A01 R   |   6 TNAME      0019DA R
  6 TOFLASH    000323 R   |   6 TOKEN      001163 R   |   6 TOR        000553 R
  6 TORAM      000363 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000AD1 R
  6 TYPE1      000F38 R   |   6 TYPE2      000F44 R   |   6 TYPES      000F33 R
  6 Timer4Ha   000005 R   |     UART2_BR=  005242     |     UART2_BR=  005243 
    UART2_CR=  005244     |     UART2_CR=  005245     |     UART2_CR=  005246 
    UART2_CR=  005247     |     UART2_CR=  005248     |     UART2_CR=  004249 
    UART2_DR=  005241     |     UART2_GT=  00524A     |     UART2_PO=  00500F 
    UART2_PS=  00524B     |     UART2_RX=  000006     |     UART2_SR=  005240 
    UART2_TX=  000005     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_DR =  005241     |     UART_SR =  005240     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000FD9 R   |   6 UDOTR      000FB9 R
  6 UEND       000045 R   |     UHLD    =  000012     |     UINN    =  00000A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      00085B R
  6 ULESS      000845 R   |   6 UMMOD      0008DB R   |   6 UMSTA      0009B4 R
  6 UNIQ1      001693 R   |   6 UNIQU      001674 R   |   6 UNLKEE     001BF8 R
  6 UNLKFL     001C17 R   |   6 UNLOCK     001C36 R   |   6 UNTIL      001576 R
    UOFFSET =  00001C     |   6 UPDATCP    001BCC R   |   6 UPDATLAS   001BA3 R
  6 UPDATPTR   0021B8 R   |   6 UPDATRUN   001BBB R   |   6 UPDATVP    001BE3 R
  6 UPL1       00062B R   |   6 UPLUS      000614 R   |     UPP     =  000006 
    URLAST  =  000020     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001917 R   |   6 UTYP2      001926 R
  6 UTYPE      001912 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001841 R   |     VAR_BASE=  000080     |     VAR_TOP =  0007BF 
    VER     =  000003     |   6 VPP        0006D8 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |   6 WHILE      0015FC R   |   6 WITHI      0008C0 R
  6 WORDD      00114F R   |   6 WORDS      001A37 R   |   6 WORS1      001A3D R
  6 WORS2      001A59 R   |   6 WR_BYTE    001CE1 R   |   6 WR_WORD    001D06 R
  6 WTABLE     002310 R   |   6 WTAT       002334 R   |   6 WTINIT     002379 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF 
    X4_FLASH=  004000     |     X6_FLASH=  00FFFF     |     X6_FLASH=  008000 
    XMEM_SIZ=  000000     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       0005FF R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000AEB R   |   6 ZL1        0005CC R   |   6 ZLESS      0005C3 R
  6 app_spac   002400 R   |   6 baudrate   000369 R   |   6 block_er   001DCC R
  6 clear_ra   000019 R   |   6 clock_in   000052 R   |   6 copy_buf   001E2C R
  6 copy_buf   001E4B R   |   6 copy_pro   001E4B R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001DEE R   |   6 fmove_do   0021A1 R   |   6 main       000016 R
  6 next_row   00215E R   |   6 no_move    0021A8 R   |   6 pristine   001ECC R
  6 proceed_   001DF1 R   |   6 reboot     000315 R   |   6 reset_ve   001F33 R
  6 row_eras   001DAC R   |   6 row_eras   001E05 R   |   6 row_eras   001E2C R
  6 set_opti   001EA0 R   |   6 set_vect   001FD4 R   |   6 uart_ini   000064 R
  6 write_ro   001E70 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2400   flags    0

