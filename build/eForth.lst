ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART2 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85       
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           000001    90 .if NUCLEO 
                           0017FF    91 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    92 DATSTK  =	0x1680	;data stack  empty
                           001680    93 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    94 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    95 .else ; DISCOVERY
                                     96 STACK   =	0x7FF 	;system (return) stack empty 
                                     97 DATSTK  =	0x680	;data stack  empty
                                     98 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     99 TIBBASE =       0X700  ; transaction input buffer addr.
                                    100 .endif
                                    101 
                                    102 ;; Memory allocation
                           000006   103 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   104 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   105 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   106 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   107 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   108 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   109 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    110 
                                    111 ; user variables constants 
                           000006   112 UBASE = UPP       ; numeric base 
                           000008   113 UFPSW = UBASE+2  ; floating point state word 
                           00000A   114 UTMP = UFPSW+2    ; temporary storage
                           00000C   115 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   116 UCTIB = UINN+2    ; tib count 
                           000010   117 UTIB = UCTIB+2    ; tib address 
                           000012   118 UINTER = UTIB+2   ; interpreter vector 
                           000014   119 UHLD = UINTER+2   ; hold 
                           000016   120 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   121 UVP = UCNTXT+2    ; variable pointer 
                           00001A   122 UCP = UVP+2      ; code pointer
                           00001C   123 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   124 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   125 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   126 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    127 
                                    128 ;******  System Variables  ******
                           000024   129 XTEMP	=	URLAST +2;address called by CREATE
                           000026   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   131 PROD1 = XTEMP	;space for UM*
                           000026   132 PROD2 = PROD1+2
                           000028   133 PROD3 = PROD2+2
                           00002A   134 CARRY = PROD3+2
                           00002C   135 SP0	= CARRY+2	;initial data stack pointer
                           00002E   136 RP0	= SP0+2		;initial return stack pointer
                           000030   137 MS    =   RP0+2         ; millisecond counter 
                           000032   138 CNTDWN =  MS+2          ; count down timer 
                           000034   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   141 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   142 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   143 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    144 
                                    145 ; EEPROM persistant data  
                           004000   146 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   147 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   148 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   149 APP_VP = APP_CP+2  ; free data space pointer 
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000003   155 VER     =     3         ;major release version
                           000000   156 EXT     =     0         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           000011   171 XON     =     17
                           000013   172 XOFF    =     19
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
                                    179         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         bset PC_ODR,#LED2_BIT
                                    181         .else ;DISCOVERY 
                                    182         .if DISCOVERY
                                    183         bres PD_ODR,#LD1_BIT 
                                    184         .endif
                                    185         .endif
                                    186         .endm
                                    187 
                                    188         .macro _ledoff
                                    189         .if NUCLEO 
                                    190         bres PC_ODR,#LED2_BIT
                                    191         .else ;DISCOVERY 
                                    192         .if DISCOVERY
                                    193         bset PD_ODR,#LD1_BIT 
                                    194         .endif 
                                    195         .endif
                                    196         .endm
                                    197 
                                    198 ;**********************************************************
                                    199         .area DATA (ABS)
      000000                        200         .org RAMBASE 
                                    201 ;**********************************************************
                                    202 
                                    203 ;**********************************************************
                                    204         .area SSEG (ABS) ; STACK
      001700                        205         .org 0x1700
      001700                        206         .ds 256 
                                    207 ; space for DATSTK,TIB and STACK         
                                    208 ;**********************************************************
                                    209 
                                    210 ;**********************************************************
                                    211         .area HOME ; vectors table
                                    212 ;**********************************************************
      000000 82 00 00 16            213 	int main	        ; reset
      000004 82 00 00 00            214 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            215 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            216 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            217 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            218 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            219 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            220 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            221 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            222 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            223 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            224 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            225 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            226 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            227 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            228 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            229 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            230 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            231 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            232 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            233 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            234 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            235 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            236 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            237 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            238 	int Timer4Handler	; irq23
      000068 82 00 00 00            239 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            240 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            241 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            242 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            243 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            244 	int NonHandledInterrupt	; irq29
                                    245 
                                    246 ;**********************************************************
                                    247         .area CODE
                                    248 ;**********************************************************
                                    249 
                                    250 ; non handled interrupt reset MCU
      000000                        251 NonHandledInterrupt:
      000000 A6 80            [ 1]  252         ld a, #0x80
      000002 C7 50 D1         [ 1]  253         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    254 	;iret
                                    255 
                                    256 ; used for milliseconds counter 
                                    257 ; MS is 16 bits counter 
      000005                        258 Timer4Handler:
      000005 72 5F 53 42      [ 1]  259 	clr TIM4_SR 
      000009 BE 30            [ 2]  260         ldw x,MS 
      00000B 5C               [ 1]  261         incw x 
      00000C BF 30            [ 2]  262         ldw MS,x
      00000E BE 32            [ 2]  263         ldw x,CNTDWN 
      000010 27 03            [ 1]  264         jreq 1$
      000012 5A               [ 2]  265         decw x 
      000013 BF 32            [ 2]  266         ldw CNTDWN,x 
      000015                        267 1$:         
      000015 80               [11]  268         iret 
                                    269 
                                    270 
                                    271 ;; Main entry points and COLD start data
      000016                        272 main:
                                    273 ; clear all RAM
      000016 AE 00 00         [ 2]  274 	ldw X,#RAMBASE
      000019                        275 clear_ram0:
      000019 7F               [ 1]  276 	clr (X)
      00001A 5C               [ 1]  277 	incw X
      00001B A3 17 FF         [ 2]  278 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  279 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  280         ldw x,#RPP
      000023 94               [ 1]  281         ldw sp,x
                                    282 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  283         inc SEEDX+1 
      000026 3C 3B            [ 1]  284         inc SEEDY+1          
      000028 CC 00 49         [ 2]  285 	jp ORIG
                                    286 
                                    287 ; COLD initialize these variables.
      00002B                        288 UZERO:
      00002B 00 0A                  289         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  290         .word      0       ; floating point state 
      00002F 00 00                  291         .word      0       ;tmp
      000031 00 00                  292         .word      0       ;>IN
      000033 00 00                  293         .word      0       ;#TIB
      000035 17 00                  294         .word      TIBB    ;TIB
      000037 13 6C                  295         .word      INTER   ;'EVAL
      000039 00 00                  296         .word      0       ;HLD
      00003B 32 06                  297         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  298         .word      VAR_BASE   ;variables free space pointer 
      00003F 32 80                  299         .word      app_space ; FLASH free space pointer 
      000041 32 06                  300         .word      LASTN   ;LAST
      000043 00 00                  301         .word      0        ; OFFSET 
      000045 00 00                  302         .word      0       ; TFLASH
                                    303 ;       .word      0       ; URLAST   
      000047 00 00                  304 UEND:   .word      0
                                    305 
      000049                        306 ORIG:   
                                    307 ; initialize SP
      000049 AE 17 FF         [ 2]  308         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  309         LDW     SP,X
      00004D BF 2E            [ 2]  310         LDW     RP0,X
      00004F AE 16 80         [ 2]  311         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  312         LDW     SP0,X
                           000001   313 .if NUCLEO        
                                    314 ; initialize PC_5 as output to control LED2
                                    315 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  316         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  317         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  318         bset PC_DDR,#LED2_BIT
                                    319 .endif 
                           000000   320 .if DISCOVERY
                                    321         bset PD_CR1,#LD1_BIT
                                    322         bset PD_CR2,#LD1_BIT
                                    323         bset PD_DDR,#LD1_BIT 
                                    324 .endif
      000060                        325         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    326 ; initialize clock to HSI
                                    327 ; no divisor 16Mhz 
                                    328 ; Added by Picatout 
      000064                        329 clock_init:
      000064 72 5F 50 C6      [ 1]  330         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  331 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   332 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  333 	ld a,#CLK_SWR_HSI
                           000000   334 .else ; DISCOVERY as 16Mhz crystal
                                    335 	ld a,#CLK_SWR_HSE
                                    336 .endif 
      00006E C7 50 C4         [ 1]  337 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  338 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  339 	jrne 1$
                                    340         
                                    341 ; initialize UART, 115200 8N1
      000076                        342 uart_init:
                           000001   343 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  344 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    345 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  346 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  347 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  348 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    349 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   350 .else ; DISCOVERY use UART2 
                                    351 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    352 	; configure tx pin
                                    353 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    354 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    355 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    356 .endif
                                    357 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  358 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  359 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  360 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    361 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  362 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  363 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  364 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  365 	bset TIM4_IER,#TIM4_IER_UIE 
                                    366 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  367         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  368         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  369         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  370         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  371         rim
      0000AD CC 1A 6D         [ 2]  372         jp  COLD   ;default=MN1
                                    373 
                                    374 
                                    375 ;; place MCU in sleep mode with
                                    376 ;; halt opcode 
                                    377 ;; BYE ( -- )
      0000B0 00 00                  378         .word 0
                           0000B2   379         LINK=.
      0000B2 03                     380         .byte 3 
      0000B3 42 59 45               381         .ascii "BYE"
      0000B6                        382 BYE: 
      0000B6 8E               [10]  383         halt 
      0000B7 81               [ 4]  384         ret 
                                    385 
                                    386 ; Enable interrupts 
                                    387 ; EI ( -- )
      0000B8 00 B2                  388         .word LINK 
                           0000BA   389         LINK=.
      0000BA 02                     390         .byte 2
      0000BB 45 49                  391         .ascii "EI"
      0000BD                        392 EI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 9A               [ 1]  393         rim 
      0000BE 81               [ 4]  394         ret 
                                    395 
                                    396 ; Disable interrupts
                                    397 ; DI ( -- )
      0000BF 00 BA                  398         .word LINK 
                           0000C1   399         LINK=.
      0000C1 02                     400         .byte 2 
      0000C2 44 49                  401         .ascii "DI"
      0000C4                        402 DI:
      0000C4 9B               [ 1]  403         sim 
      0000C5 81               [ 4]  404         ret 
                                    405 
                                    406 ; set interrupt priority level 
                                    407 ; SET-ISP ( n1 n2 -- )
                                    408 ; n1 level {1..3}
                                    409 ; n2 vector {0..29}
      0000C6 00 C1                  410         .word LINK 
                           0000C8   411         LINK=.
      0000C8 07                     412         .byte 7 
      0000C9 53 45 54 2D 49 53 50   413         .ascii "SET-ISP"
      0000D0                        414 SETISP:
      0000D0 90 93            [ 1]  415         ldw y,x 
      0000D2 90 FE            [ 2]  416         ldw y,(y)
      0000D4 A6 04            [ 1]  417         ld a,#4 ; 4 slot per register 
                                    418 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  419         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  420         and a,#3 
      0000DA 48               [ 1]  421         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  422         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  423         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  424         clrw y 
      0000E2 90 97            [ 1]  425         ld yl,a 
      0000E4 1D 00 02         [ 2]  426         subw x,#CELLL 
      0000E7 FF               [ 2]  427         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  428         ldw y,x 
      0000EA 90 EE 02         [ 2]  429         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  430         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  431         subw x,#CELLL 
      0000F2 FF               [ 2]  432         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 05 C0         [ 4]  433         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 71         [ 4]  434         call DOLIT 
      0000F9 00 03                  435         .word 3
      0000FB CD 05 A6         [ 4]  436         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0A E1         [ 4]  437         call LSHIFT ; creat slot mask 
      000101 CD 07 DF         [ 4]  438         call INVER  ; ( level reg lshift rval mask )
      000104 CD 05 F5         [ 4]  439         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 5F         [ 4]  440         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 64         [ 4]  441         call ROT  ; ( reg lshift level )
      00010D CD 05 A6         [ 4]  442         call SWAPP ; ( reg level lshift )
      000110 CD 0A E1         [ 4]  443         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 40         [ 4]  444         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 09         [ 4]  445         call ORR   ; ( reg updated_rval )
      000119 CD 05 A6         [ 4]  446         call SWAPP 
      00011C CD 04 FC         [ 4]  447         call CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    448 
                                    449 ; sélectionne l'application 
                                    450 ; qui démarre automatique lors 
                                    451 ; d'un COLD start 
      00011F 00 C8                  452         .word LINK 
                           000121   453         LINK=.
      000121 07                     454         .byte 7
      000122 41 55 54 4F 52 55 4E   455         .ascii "AUTORUN"
      000129                        456 AUTORUN:
      000129 CD 11 31         [ 4]  457         call TOKEN 
      00012C CD 05 96         [ 4]  458         call DUPP 
      00012F CD 04 A4         [ 4]  459         call QBRAN 
      000132 02 0F                  460         .word FORGET2
      000134 CD 12 2E         [ 4]  461         call NAMEQ
      000137 CD 07 53         [ 4]  462         call QDUP 
      00013A CD 04 A4         [ 4]  463         call QBRAN 
      00013D 02 0F                  464         .word FORGET2
      00013F CD 05 8C         [ 4]  465         call DROP 
      000142 1D 00 04         [ 2]  466         subw x,#2*CELLL 
      000145 90 5F            [ 1]  467         clrw y 
      000147 FF               [ 2]  468         ldw (x),y 
      000148 90 AE 40 02      [ 2]  469         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  470         ldw (2,x),y 
      00014E CC 1D 69         [ 2]  471         jp EESTORE 
                                    472 
                                    473 ;; Reset dictionary pointer before 
                                    474 ;; forgotten word. RAM space and 
                                    475 ;; interrupt vector defined after 
                                    476 ;; must be resetted also.
      000151 01 21                  477         .word LINK 
                           000153   478         LINK=.
      000153 06                     479         .byte 6
      000154 46 4F 52 47 45 54      480         .ascii "FORGET" 
      00015A                        481 FORGET: 
      00015A CD 11 31         [ 4]  482         call TOKEN
      00015D CD 05 96         [ 4]  483         call DUPP 
      000160 CD 04 A4         [ 4]  484         call QBRAN 
      000163 02 0F                  485         .word FORGET2
      000165 CD 12 2E         [ 4]  486         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 53         [ 4]  487         call QDUP 
      00016B CD 04 A4         [ 4]  488         call QBRAN 
      00016E 02 0F                  489         .word FORGET2
                                    490 ; only forget users words 
      000170 CD 05 96         [ 4]  491         call DUPP ; ( ca na na )
      000173 CD 04 71         [ 4]  492         call DOLIT 
      000176 32 80                  493         .word app_space 
      000178 CD 05 A6         [ 4]  494         call SWAPP 
      00017B CD 08 85         [ 4]  495         call  ULESS 
      00017E CD 04 A4         [ 4]  496         call QBRAN 
      000181 01 D1                  497         .word FORGET6 
                                    498 ; ( ca na -- )        
                                    499 ;reset ivec with address >= ca
      000183 CD 05 A6         [ 4]  500         call SWAPP ; ( na ca -- ) 
      000186 CD 1F 6C         [ 4]  501         call CHKIVEC ; ( na -- ) 
                                    502 ; start at LAST and link back to na 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    503 ; if variable found reset VP at that point.
      000189                        504 FORGET1:
      000189 CD 07 15         [ 4]  505         call LAST 
      00018C CD 04 EF         [ 4]  506         call AT 
      00018F CD 05 96         [ 4]  507         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  508         call FREEVAR ; ( -- na last )
      000195 CD 05 96         [ 4]  509         call DUPP 
      000198 CD 04 71         [ 4]  510         call DOLIT 
      00019B 00 02                  511         .word 2 
      00019D CD 08 3E         [ 4]  512         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 EF         [ 4]  513         call AT 
      0001A3 CD 05 96         [ 4]  514         call DUPP ; ( -- na last a a )
      0001A6 CD 06 E9         [ 4]  515         call CNTXT 
      0001A9 CD 04 D8         [ 4]  516         call STORE
      0001AC CD 07 15         [ 4]  517         call LAST  
      0001AF CD 04 D8         [ 4]  518         call STORE ; ( --  na last )
      0001B2 CD 05 C0         [ 4]  519         call OVER 
      0001B5 CD 08 66         [ 4]  520         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 A4         [ 4]  521         call QBRAN 
      0001BB 01 89                  522         .word FORGET1 
                                    523 ; ( na -- )
      0001BD CD 04 71         [ 4]  524         call DOLIT 
      0001C0 00 02                  525         .word 2 
      0001C2 CD 08 3E         [ 4]  526         call SUBB 
      0001C5 CD 07 05         [ 4]  527         call CPP 
      0001C8 CD 04 D8         [ 4]  528         call STORE  
      0001CB CD 1B 9C         [ 4]  529         call UPDATCP 
      0001CE CC 1B 73         [ 2]  530         jp UPDATLAST 
      0001D1                        531 FORGET6: ; tried to forget a RAM or system word 
                                    532 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  533         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  534         ldw y,SP0 
      0001D7 FF               [ 2]  535         ldw (x),y  
      0001D8 CD 08 85         [ 4]  536         call ULESS
      0001DB CD 04 A4         [ 4]  537         call QBRAN 
      0001DE 02 01                  538         .word PROTECTED 
      0001E0 CD 13 3A         [ 4]  539         call ABORQ 
      0001E3 1D                     540         .byte 29
      0001E4 20 46 6F 72 20 52 41   541         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        542 PROTECTED:
      000201 CD 13 3A         [ 4]  543         call ABORQ
      000204 0A                     544         .byte 10
      000205 20 50 72 6F 74 65 63   545         .ascii " Protected"
             74 65 64
      00020F                        546 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 3A         [ 4]  547         call ABORQ
      000212 05                     548         .byte 5
      000213 20 77 68 61 74         549         .ascii " what"
      000218                        550 FORGET4:
      000218 CC 05 8C         [ 2]  551         jp DROP 
                                    552 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    553 
                                    554 ;---------------------------------
                                    555 ; if na is variable 
                                    556 ; free variable data  
                                    557 ; FREEVAR ( na -- )
                                    558 ;---------------------------------
      00021B 01 53                  559         .word LINK 
                           00021D   560         LINK=.
      00021D 07                     561         .byte 7 
      00021E 46 52 45 45 56 41 52   562         .ascii "FREEVAR"
      000225                        563 FREEVAR:
      000225 CD 05 96         [ 4]  564         call DUPP ; ( na na -- )
      000228 CD 05 0D         [ 4]  565         CALL CAT  ; ( na c -- )
      00022B CD 0A C3         [ 4]  566         call ONEP ;
      00022E CD 07 C5         [ 4]  567         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0A C3         [ 4]  568         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 05 96         [ 4]  569         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 EF         [ 4]  570         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 71         [ 4]  571         call DOLIT 
      00023D 06 56                  572         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 66         [ 4]  573         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 A4         [ 4]  574         call QBRAN 
      000245 02 5B                  575         .word FREEVAR4 
      000247 CD 04 71         [ 4]  576         call DOLIT 
      00024A 00 02                  577         .word 2 
      00024C CD 07 C5         [ 4]  578         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 EF         [ 4]  579         call AT 
      000252 CD 06 F7         [ 4]  580         call VPP   
      000255 CD 04 D8         [ 4]  581         call STORE 
      000258 CC 1B B3         [ 2]  582         jp UPDATVP 
      00025B                        583 FREEVAR4: ; not variable
      00025B CC 05 8C         [ 2]  584         jp  DROP 
                                    585 
                                    586 ;    SEED ( n -- )
                                    587 ; Initialize PRNG seed with n 
      00025E 02 1D                  588         .word LINK 
                           000260   589         LINK=. 
      000260 04                     590         .byte 4 
      000261 53 45 45 44            591         .ascii "SEED" 
      000265                        592 SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
      000275 02 60                  604         .word LINK 
                           000277   605         LINK=.
      000277 06                     606         .byte 6
      000278 52 41 4E 44 4F 4D      607         .ascii "RANDOM" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00027E                        608 RANDOM:
                                    609 ;local variable 
                           000001   610         SPSAVE=1
                           000002   611         VSIZE=2 
      00027E 52 02            [ 2]  612         sub sp,#VSIZE
      000280 1F 01            [ 2]  613         ldw (SPSAVE,sp),x  
                                    614 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  615         ldw y,x 
      000284 90 FE            [ 2]  616         ldw y,(y)
      000286 90 BF 26         [ 2]  617         ldw YTEMP,y 
      000289 BE 38            [ 2]  618 	ldw x,SEEDX 
      00028B 58               [ 2]  619 	sllw x 
      00028C 58               [ 2]  620 	sllw x 
      00028D 58               [ 2]  621 	sllw x 
      00028E 58               [ 2]  622 	sllw x 
      00028F 58               [ 2]  623 	sllw x 
      000290 9E               [ 1]  624 	ld a,xh 
      000291 B8 38            [ 1]  625 	xor a,SEEDX 
      000293 B7 24            [ 1]  626 	ld XTEMP,a 
      000295 9F               [ 1]  627 	ld a,xl 
      000296 B8 39            [ 1]  628 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  629 	ld XTEMP+1,a 
                                    630 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  631 	ldw x,SEEDY 
      00029C BF 38            [ 2]  632 	ldw SEEDX,x  
                                    633 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  634 	srlw x 
      00029F 9E               [ 1]  635 	ld a,xh 
      0002A0 B8 3A            [ 1]  636 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  637 	ld SEEDY,a  
      0002A4 9F               [ 1]  638 	ld a,xl 
      0002A5 B8 3B            [ 1]  639 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  640 	ld SEEDY+1,a 
                                    641 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  642 	ldw x,XTEMP 
      0002AB 54               [ 2]  643 	srlw x 
      0002AC 54               [ 2]  644 	srlw x 
      0002AD 54               [ 2]  645 	srlw x 
                                    646 ; x=XTEMP^x 
      0002AE 9E               [ 1]  647 	ld a,xh 
      0002AF B8 24            [ 1]  648 	xor a,XTEMP 
      0002B1 95               [ 1]  649 	ld xh,a 
      0002B2 9F               [ 1]  650 	ld a,xl 
      0002B3 B8 25            [ 1]  651 	xor a,XTEMP+1  
      0002B5 97               [ 1]  652 	ld xl,a 
                                    653 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  654 	xor a,SEEDY+1
      0002B8 97               [ 1]  655 	ld xl,a 
      0002B9 9E               [ 1]  656 	ld a,xh 
      0002BA B8 3A            [ 1]  657 	xor a,SEEDY
      0002BC 95               [ 1]  658 	ld xh,a 
      0002BD BF 3A            [ 2]  659 	ldw SEEDY,x 
                                    660 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  661 	ldw y,YTEMP  
      0002C2 65               [ 2]  662 	divw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C3 1E 01            [ 2]  663 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  664         ldw (x),y 
      0002C6 5B 02            [ 2]  665         addw sp,#VSIZE 
      0002C8 81               [ 4]  666 	ret 
                                    667 
                                    668 
                                    669 ;;
                                    670 ;; get millisecond counter 
                                    671 ;; msec ( -- u )
                                    672 ;; Added by Picatout 2020-04-26
      0002C9 02 77                  673         .word LINK  
                           0002CB   674         LINK = . 
      0002CB 04                     675         .byte 4
      0002CC 4D 53 45 43            676         .ascii "MSEC"
      0002D0                        677 MSEC: 
      0002D0 1D 00 02         [ 2]  678         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  679         ldw y,MS 
      0002D6 FF               [ 2]  680         ldw (x),y 
      0002D7 81               [ 4]  681         ret 
                                    682 
                                    683 ; suspend execution for u msec 
                                    684 ;  pause ( u -- )
      0002D8 02 CB                  685         .word LINK 
                           0002DA   686         LINK=.
      0002DA 05                     687         .byte 5 
      0002DB 50 41 55 53 45         688         .ascii "PAUSE"
      0002E0                        689 PAUSE:
      0002E0 90 93            [ 1]  690         ldw y,x
      0002E2 90 FE            [ 2]  691         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  692         addw y,MS 
      0002E8 8F               [10]  693 1$:     wfi  
      0002E9 90 B3 30         [ 2]  694         cpw y,MS  
      0002EC 26 FA            [ 1]  695         jrne 1$        
      0002EE 1C 00 02         [ 2]  696         addw x,#CELLL 
      0002F1 81               [ 4]  697         ret 
                                    698 
                                    699 ; initialize count down timer 
                                    700 ;  TIMER ( u -- )  milliseconds 
      0002F2 02 DA                  701         .word LINK 
                           0002F4   702         LINK=.
      0002F4 05                     703         .byte 5 
      0002F5 54 49 4D 45 52         704         .ascii "TIMER" 
      0002FA                        705 TIMER:
      0002FA 90 93            [ 1]  706         ldw y,x
      0002FC 90 FE            [ 2]  707         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  708         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  709         addw x,#CELLL 
      000304 81               [ 4]  710         ret 
                                    711 
                                    712 ; check for TIMER exiparition 
                                    713 ;  TIMEOUT? ( -- 0|-1 )
      000305 02 F4                  714         .word LINK 
                           000307   715         LINK=. 
      000307 08                     716         .byte 8 
      000308 54 49 4D 45 4F 55 54   717         .ascii "TIMEOUT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             3F
      000310                        718 TIMEOUTQ: 
      000310 4F               [ 1]  719         clr a
      000311 1D 00 02         [ 2]  720         subw x,#CELLL 
      000314 90 BE 32         [ 2]  721         ldw y,CNTDWN 
      000317 26 01            [ 1]  722         jrne 1$ 
      000319 43               [ 1]  723         cpl a 
      00031A E7 01            [ 1]  724 1$:     ld (1,x),a 
      00031C F7               [ 1]  725         ld (x),a 
      00031D 81               [ 4]  726         ret         
                                    727 
                                    728 ; reboot MCU 
                                    729 ; REBOOT ( -- )
      00031E 03 07                  730         .word LINK 
                           000320   731         LINK=. 
      000320 06                     732         .byte 6 
      000321 52 45 42 4F 4F 54      733         .ascii "REBOOT"
      000327                        734 reboot:
      000327 CC 00 00         [ 2]  735         jp NonHandledInterrupt
                                    736 
                                    737 ; compile to flash memory 
                                    738 ; TO-FLASH ( -- )
      00032A 03 20                  739         .word LINK 
                           00032C   740         LINK=.
      00032C 08                     741         .byte 8
      00032D 54 4F 2D 46 4C 41 53   742         .ascii "TO-FLASH"
             48
      000335                        743 TOFLASH:
      000335 CD 07 28         [ 4]  744         call RAMLAST 
      000338 CD 04 EF         [ 4]  745         call AT 
      00033B CD 07 53         [ 4]  746         call QDUP 
      00033E CD 04 A4         [ 4]  747         call QBRAN
      000341 03 64                  748         .word 1$
      000343 CD 13 3A         [ 4]  749         call ABORQ 
      000346 1D                     750         .byte 29
      000347 20 4E 6F 74 20 77 68   751         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  752 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  753         ldw UTFLASH,y
      00036B 81               [ 4]  754         ret 
                                    755 
                                    756 ; compile to RAM 
                                    757 ; TO-RAM ( -- )
      00036C 03 2C                  758         .word LINK 
                           00036E   759         LINK=.
      00036E 06                     760         .byte 6 
      00036F 54 4F 2D 52 41 4D      761         .ascii "TO-RAM"
      000375                        762 TORAM:
      000375 90 5F            [ 1]  763         clrw y 
      000377 90 BF 20         [ 2]  764         ldw UTFLASH,y 
      00037A 81               [ 4]  765         ret 
                                    766 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    767 ;; BAUD RATE constants table
                                    768 ; values to put in BRR1 & BRR2 
      00037B                        769 baudrate: 
      00037B A0 1B                  770 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  771 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  772 	.byte 0x68,0x3  ; 9600
      000381 34 01                  773 	.byte 0x34,0x1  ; 19200
      000383 11 06                  774 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  775 	.byte 0x8,0xb   ; 115200
                                    776 
                                    777 ; BAUD RATE CONSTANTS names 
                                    778 ; 2400 baud
      000387 03 6E                  779 	.word LINK
                           000389   780 LINK	= .
      000389 04                     781 	.byte 4
      00038A 42 32 4B 34            782 	.ascii "B2K4" 
      00038E                        783 B2K4:
      00038E 1D 00 02         [ 2]  784 	subw x,#CELLL 
      000391 90 5F            [ 1]  785         clrw y
      000393 FF               [ 2]  786         ldw (x),y
      000394 81               [ 4]  787 	ret
                                    788 ; 4800 baud	
      000395 03 89                  789 	.word LINK
                           000397   790 LINK	= .
      000397 04                     791 	.byte 4
      000398 42 34 4B 38            792 	.ascii "B4K8" 
      00039C                        793 B4K8:
      00039C 1D 00 02         [ 2]  794         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  795         ldw y,#2 
      0003A3 FF               [ 2]  796         ldw (x),y
      0003A4 81               [ 4]  797         ret 
                                    798 ; 9600 baud
      0003A5 03 97                  799 	.word LINK
                           0003A7   800 LINK	= .
      0003A7 04                     801 	.byte 4
      0003A8 42 39 4B 36            802 	.ascii "B9K6" 
      0003AC                        803 B9K6:
      0003AC 1D 00 02         [ 2]  804         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  805         ldw y,#4 
      0003B3 FF               [ 2]  806         ldw (x),y 
      0003B4 81               [ 4]  807         ret 
                                    808 ; 19200 baud
      0003B5 03 A7                  809 	.word LINK
                           0003B7   810 LINK	= .
      0003B7 05                     811 	.byte 5
      0003B8 42 31 39 4B 32         812 	.ascii "B19K2" 
      0003BD                        813 B19K2:
      0003BD 1D 00 02         [ 2]  814         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  815         ldw y,#6 
      0003C4 FF               [ 2]  816         ldw (x),y 
      0003C5 81               [ 4]  817         ret 
                                    818 ; 57600 baud        
      0003C6 03 B7                  819 	.word LINK
                           0003C8   820 LINK	= .
      0003C8 05                     821 	.byte 5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003C9 42 35 37 4B 36         822 	.ascii "B57K6" 
      0003CE                        823 B57K6:
      0003CE 1D 00 02         [ 2]  824         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  825         ldw y,#8 
      0003D5 FF               [ 2]  826         ldw (x),y 
      0003D6 81               [ 4]  827         ret 
                                    828 ; 115200 baud 
      0003D7 03 C8                  829 	.word LINK
                           0003D9   830 LINK	= .
      0003D9 06                     831 	.byte 6
      0003DA 42 31 31 35 4B 32      832 	.ascii "B115K2" 
      0003E0                        833 B115K2:
      0003E0 1D 00 02         [ 2]  834 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  835         ldw y,#10 
      0003E7 FF               [ 2]  836         ldw (x),y 
      0003E8 81               [ 4]  837         ret 
                                    838 	
                                    839 ;; set UART2 BAUD rate
                                    840 ;	BAUD ( u -- )
      0003E9 03 D9                  841 	.word LINK 
                           0003EB   842 LINK	= .
      0003EB 04                     843 	.byte 4
      0003EC 42 41 55 44            844 	.ascii "BAUD" 
      0003F0                        845 BAUD:
      0003F0 1D 00 02         [ 2]  846 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  847         ldw y,#baudrate 
      0003F7 FF               [ 2]  848         ldw (x),y 
      0003F8 CD 07 C5         [ 4]  849         call PLUS
      0003FB 90 93            [ 1]  850         ldw y,x  
      0003FD 90 FE            [ 2]  851         ldw y,(y)
      0003FF 90 F6            [ 1]  852         ld a,(y)
      000401 88               [ 1]  853         push a 
      000402 90 5C            [ 1]  854         incw y 
      000404 90 F6            [ 1]  855         ld a,(y)
      000406 C7 52 33         [ 1]  856         ld UART_BRR2,a 
      000409 84               [ 1]  857         pop a
      00040A C7 52 32         [ 1]  858         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  859         addw x,#CELLL 
      000410 81               [ 4]  860         ret 
                                    861 
                                    862 ;; Device dependent I/O
                                    863 ;       ?RX     ( -- c T | F )
                                    864 ;         Return input byte and true, or false.
      000411 03 EB                  865         .word      LINK 
                           000413   866 LINK	= .
      000413 04                     867         .byte      4
      000414 3F 4B 45 59            868         .ascii     "?KEY"
      000418                        869 QKEY:
      000418 90 5F            [ 1]  870         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  871         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  872         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  873 	SUBW	X,#2
      000425 E7 01            [ 1]  874         LD     (1,X),A
      000427 7F               [ 1]  875 	CLR	(X)
      000428 90 53            [ 2]  876         CPLW     Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042A                        877 INCH:
      00042A 1D 00 02         [ 2]  878 		SUBW	X,#2
      00042D FF               [ 2]  879         LDW     (X),Y
      00042E 81               [ 4]  880         RET
                                    881 
                                    882 ;       TX!     ( c -- )
                                    883 ;       Send character c to  output device.
      00042F 04 13                  884         .word      LINK
                           000431   885 LINK	= .
      000431 04                     886         .byte      4
      000432 45 4D 49 54            887         .ascii     "EMIT"
      000436                        888 EMIT:
      000436 E6 01            [ 1]  889         LD     A,(1,X)
      000438 1C 00 02         [ 2]  890 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  891 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  892         LD    UART_DR,A   ;send A
      000443 81               [ 4]  893         RET
                                    894 
                                    895 ;       FC-XON  ( -- )
                                    896 ;       send XON character 
      000444 04 31                  897         .word LINK
                           000446   898 LINK    = .
      000446 06                     899         .byte 6 
      000447 46 43 2D 58 4F 4E      900         .ascii "FC-XON"
      00044D                        901 FC_XON:
      00044D 1D 00 02         [ 2]  902         subw x,#CELLL 
      000450 7F               [ 1]  903         clr (x)
      000451 A6 11            [ 1]  904         ld a,#XON 
      000453 E7 01            [ 1]  905         ld (1,x),a 
      000455 CD 04 36         [ 4]  906         call EMIT 
      000458 81               [ 4]  907         ret 
                                    908 
                                    909 ;       FC-XOFF ( -- )
                                    910 ;       Send XOFF character 
      000459 04 46                  911         .word LINK
                           00045B   912 LINK    = .
      00045B 07                     913         .byte 7
      00045C 46 43 2D 58 4F 46 46   914         .ascii "FC-XOFF"
      000463                        915 FC_XOFF:
      000463 1D 00 02         [ 2]  916         subw x,#CELLL 
      000466 7F               [ 1]  917         clr (x)
      000467 A6 13            [ 1]  918         ld a,#XOFF 
      000469 E7 01            [ 1]  919         ld (1,x),a 
      00046B CD 04 36         [ 4]  920         call EMIT 
      00046E 81               [ 4]  921         ret
                                    922 
                                    923 ;; The kernel
                                    924 
                                    925 ;       doLIT   ( -- w )
                                    926 ;       Push an inline literal.
      00046F 04 5B                  927         .word      LINK
                                    928 ;LINK	= 	.
                                    929 ;	.byte      COMPO+5
                                    930 ;        .ascii     "DOLIT"
      000471                        931 DOLIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000471 1D 00 02         [ 2]  932 	SUBW X,#2
      000474 16 01            [ 2]  933         ldw y,(1,sp)
      000476 90 FE            [ 2]  934         ldw y,(y)
      000478 FF               [ 2]  935         ldw (x),y
      000479 90 85            [ 2]  936         popw y 
      00047B 90 EC 02         [ 2]  937         jp (2,y)
                                    938 
                                    939 ;       next    ( -- )
                                    940 ;       Code for  single index loop.
      00047E 04 5B                  941         .word      LINK
                           000480   942 LINK	= 	.
      000480 44                     943 	.byte      COMPO+4
      000481 6E 65 78 74            944         .ascii     "next"
      000485                        945 DONXT:
      000485 16 03            [ 2]  946 	LDW Y,(3,SP)
      000487 90 5A            [ 2]  947 	DECW Y
      000489 2A 07            [ 1]  948 	JRPL NEX1 ; jump if N=0
      00048B 90 85            [ 2]  949 	POPW Y
      00048D 5B 02            [ 2]  950         addw sp,#2
      00048F 90 EC 02         [ 2]  951         JP (2,Y)
      000492                        952 NEX1:
      000492 17 03            [ 2]  953         LDW (3,SP),Y
      000494 90 85            [ 2]  954         POPW Y
      000496 90 FE            [ 2]  955 	LDW Y,(Y)
      000498 90 FC            [ 2]  956 	JP (Y)
                                    957 
                                    958 ;       ?branch ( f -- )
                                    959 ;       Branch if flag is zero.
      00049A 04 80                  960         .word      LINK
                           00049C   961 LINK	= 	.
      00049C 47                     962 	.byte      COMPO+7
      00049D 3F 42 52 41 4E 43 48   963         .ascii     "?BRANCH"
      0004A4                        964 QBRAN:	
      0004A4 90 93            [ 1]  965         LDW Y,X
      0004A6 1C 00 02         [ 2]  966 	ADDW X,#2
      0004A9 90 FE            [ 2]  967 	LDW Y,(Y)
      0004AB 27 0E            [ 1]  968         JREQ     BRAN
      0004AD 90 85            [ 2]  969 	POPW Y
      0004AF 90 EC 02         [ 2]  970 	JP (2,Y)
                                    971         
                                    972 ;       branch  ( -- )
                                    973 ;       Branch to an inline address.
      0004B2 04 9C                  974         .word      LINK
                           0004B4   975 LINK	= 	.
      0004B4 46                     976 	.byte      COMPO+6
      0004B5 42 52 41 4E 43 48      977         .ascii     "BRANCH"
      0004BB                        978 BRAN:
      0004BB 90 85            [ 2]  979         POPW Y
      0004BD 90 FE            [ 2]  980 	LDW Y,(Y)
      0004BF 90 FC            [ 2]  981         JP     (Y)
                                    982 
                                    983 ;       EXECUTE ( ca -- )
                                    984 ;       Execute  word at ca.
      0004C1 04 B4                  985         .word      LINK
                           0004C3   986 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C3 07                     987         .byte       7
      0004C4 45 58 45 43 55 54 45   988         .ascii     "EXECUTE"
      0004CB                        989 EXECU:
      0004CB 90 93            [ 1]  990         LDW Y,X
      0004CD 1C 00 02         [ 2]  991 	ADDW X,#2
      0004D0 90 FE            [ 2]  992 	LDW  Y,(Y)
      0004D2 90 FC            [ 2]  993         JP   (Y)
                                    994 
                           000001   995 OPTIMIZE = 1
                           000001   996 .if OPTIMIZE 
                                    997 ; remplacement de CALL EXIT par 
                                    998 ; le opcode de RET.
                                    999 ; Voir modification au code de ";"
                           000000  1000 .else 
                                   1001 ;       EXIT    ( -- )
                                   1002 ;       Terminate a colon definition.
                                   1003         .word      LINK
                                   1004 LINK = .
                                   1005         .byte      4
                                   1006         .ascii     "EXIT"
                                   1007 EXIT:
                                   1008         POPW Y
                                   1009         RET
                                   1010 .endif 
                                   1011 
                                   1012 ;       !       ( w a -- )
                                   1013 ;       Pop  data stack to memory.
      0004D4 04 C3                 1014         .word      LINK
                           0004D6  1015 LINK = .
      0004D6 01                    1016         .byte      1
      0004D7 21                    1017         .ascii     "!"
      0004D8                       1018 STORE:
      0004D8 90 93            [ 1] 1019         LDW Y,X
      0004DA 90 FE            [ 2] 1020         LDW Y,(Y)    ;Y=a
      0004DC 90 BF 26         [ 2] 1021         LDW YTEMP,Y
      0004DF 90 93            [ 1] 1022         LDW Y,X
      0004E1 90 EE 02         [ 2] 1023         LDW Y,(2,Y)
      0004E4 91 CF 26         [ 5] 1024         LDW [YTEMP],Y ;store w at a
      0004E7 1C 00 04         [ 2] 1025         ADDW X,#4 ; DDROP 
      0004EA 81               [ 4] 1026         RET     
                                   1027 
                                   1028 ;       @       ( a -- w )
                                   1029 ;       Push memory location to stack.
      0004EB 04 D6                 1030         .word      LINK
                           0004ED  1031 LINK	= 	.
      0004ED 01                    1032         .byte    1
      0004EE 40                    1033         .ascii	"@"
      0004EF                       1034 AT:
      0004EF 90 93            [ 1] 1035         LDW Y,X     ;Y = a
      0004F1 90 FE            [ 2] 1036         LDW Y,(Y)   ; address 
      0004F3 90 FE            [ 2] 1037         LDW Y,(Y)   ; value 
      0004F5 FF               [ 2] 1038         LDW (X),Y ;w = @Y
      0004F6 81               [ 4] 1039         RET     
                                   1040 
                                   1041 ;       C!      ( c b -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1042 ;       Pop  data stack to byte memory.
      0004F7 04 ED                 1043         .word      LINK
                           0004F9  1044 LINK	= .
      0004F9 02                    1045         .byte      2
      0004FA 43 21                 1046         .ascii     "C!"
      0004FC                       1047 CSTOR:
      0004FC 90 93            [ 1] 1048         LDW Y,X
      0004FE 90 FE            [ 2] 1049 	LDW Y,(Y)    ;Y=b
      000500 E6 03            [ 1] 1050         LD A,(3,X)    ;D = c
      000502 90 F7            [ 1] 1051         LD  (Y),A     ;store c at b
      000504 1C 00 04         [ 2] 1052 	ADDW X,#4 ; DDROP 
      000507 81               [ 4] 1053         RET     
                                   1054 
                                   1055 ;       C@      ( b -- c )
                                   1056 ;       Push byte in memory to  stack.
      000508 04 F9                 1057         .word      LINK
                           00050A  1058 LINK	= 	.
      00050A 02                    1059         .byte      2
      00050B 43 40                 1060         .ascii     "C@"
      00050D                       1061 CAT:
      00050D 90 93            [ 1] 1062         LDW Y,X     ;Y=b
      00050F 90 FE            [ 2] 1063         LDW Y,(Y)
      000511 90 F6            [ 1] 1064         LD A,(Y)
      000513 E7 01            [ 1] 1065         LD (1,X),A
      000515 7F               [ 1] 1066         CLR (X)
      000516 81               [ 4] 1067         RET     
                                   1068 
                                   1069 ;       RP@     ( -- a )
                                   1070 ;       Push current RP to data stack.
      000517 05 0A                 1071         .word      LINK
                           000519  1072 LINK	= .
      000519 03                    1073         .byte      3
      00051A 52 50 40              1074         .ascii     "RP@"
      00051D                       1075 RPAT:
      00051D 90 96            [ 1] 1076         LDW Y,SP    ;save return addr
      00051F 1D 00 02         [ 2] 1077         SUBW X,#2
      000522 FF               [ 2] 1078         LDW (X),Y
      000523 81               [ 4] 1079         RET     
                                   1080 
                                   1081 ;       RP!     ( a -- )
                                   1082 ;       Set  return stack pointer.
      000524 05 19                 1083         .word      LINK
                           000526  1084 LINK	= 	. 
      000526 43                    1085 	.byte      COMPO+3
      000527 52 50 21              1086         .ascii     "RP!"
      00052A                       1087 RPSTO:
      00052A 90 85            [ 2] 1088         POPW Y
      00052C 90 BF 26         [ 2] 1089         LDW YTEMP,Y
      00052F 90 93            [ 1] 1090         LDW Y,X
      000531 90 FE            [ 2] 1091         LDW Y,(Y)
      000533 90 94            [ 1] 1092         LDW SP,Y
      000535 1C 00 02         [ 2] 1093         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000538 92 CC 26         [ 5] 1094         JP [YTEMP]
                                   1095 
                                   1096 ;       R>      ( -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1097 ;       Pop return stack to data stack.
      00053B 05 26                 1098         .word      LINK
                           00053D  1099 LINK	= 	. 
      00053D 42                    1100 	.byte      COMPO+2
      00053E 52 3E                 1101         .ascii     "R>"
      000540                       1102 RFROM:
      000540 90 85            [ 2] 1103         POPW Y    ;save return addr
      000542 90 BF 26         [ 2] 1104         LDW YTEMP,Y
      000545 90 85            [ 2] 1105         POPW Y
      000547 1D 00 02         [ 2] 1106         SUBW X,#2
      00054A FF               [ 2] 1107         LDW (X),Y
      00054B 92 CC 26         [ 5] 1108         JP [YTEMP]
                                   1109 
                                   1110 ;       R@      ( -- w )
                                   1111 ;       Copy top of return stack to stack.
      00054E 05 3D                 1112         .word      LINK
                           000550  1113 LINK	= 	. 
      000550 02                    1114         .byte      2
      000551 52 40                 1115         .ascii     "R@"
      000553                       1116 RAT:
      000553 16 03            [ 2] 1117         ldw y,(3,sp)
      000555 1D 00 02         [ 2] 1118         subw x,#CELLL 
      000558 FF               [ 2] 1119         ldw (x),y 
      000559 81               [ 4] 1120         ret 
                                   1121 
                                   1122 ;       >R      ( w -- )
                                   1123 ;       Push data stack to return stack.
      00055A 05 50                 1124         .word      LINK
                           00055C  1125 LINK	= 	. 
      00055C 42                    1126 	.byte      COMPO+2
      00055D 3E 52                 1127         .ascii     ">R"
      00055F                       1128 TOR:
      00055F 90 85            [ 2] 1129         POPW Y    ;save return addr
      000561 90 BF 26         [ 2] 1130         LDW YTEMP,Y
      000564 90 93            [ 1] 1131         LDW Y,X
      000566 90 FE            [ 2] 1132         LDW Y,(Y)
      000568 90 89            [ 2] 1133         PUSHW Y    ;restore return addr
      00056A 1C 00 02         [ 2] 1134         ADDW X,#2
      00056D 92 CC 26         [ 5] 1135         JP [YTEMP]
                                   1136 
                                   1137 ;       SP@     ( -- a )
                                   1138 ;       Push current stack pointer.
      000570 05 5C                 1139         .word      LINK
                           000572  1140 LINK	= 	. 
      000572 03                    1141         .byte      3
      000573 53 50 40              1142         .ascii     "SP@"
      000576                       1143 SPAT:
      000576 90 93            [ 1] 1144 	LDW Y,X
      000578 1D 00 02         [ 2] 1145         SUBW X,#2
      00057B FF               [ 2] 1146 	LDW (X),Y
      00057C 81               [ 4] 1147         RET     
                                   1148 
                                   1149 ;       SP!     ( a -- )
                                   1150 ;       Set  data stack pointer.
      00057D 05 72                 1151         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           00057F  1152 LINK	= 	. 
      00057F 03                    1153         .byte      3
      000580 53 50 21              1154         .ascii     "SP!"
      000583                       1155 SPSTO:
      000583 FE               [ 2] 1156         LDW     X,(X)     ;X = a
      000584 81               [ 4] 1157         RET     
                                   1158 
                                   1159 ;       DROP    ( w -- )
                                   1160 ;       Discard top stack item.
      000585 05 7F                 1161         .word      LINK
                           000587  1162 LINK	= 	. 
      000587 04                    1163         .byte      4
      000588 44 52 4F 50           1164         .ascii     "DROP"
      00058C                       1165 DROP:
      00058C 1C 00 02         [ 2] 1166         ADDW X,#2     
      00058F 81               [ 4] 1167         RET     
                                   1168 
                                   1169 ;       DUP     ( w -- w w )
                                   1170 ;       Duplicate  top stack item.
      000590 05 87                 1171         .word      LINK
                           000592  1172 LINK	= 	. 
      000592 03                    1173         .byte      3
      000593 44 55 50              1174         .ascii     "DUP"
      000596                       1175 DUPP:
      000596 90 93            [ 1] 1176 	LDW Y,X
      000598 1D 00 02         [ 2] 1177         SUBW X,#2
      00059B 90 FE            [ 2] 1178 	LDW Y,(Y)
      00059D FF               [ 2] 1179 	LDW (X),Y
      00059E 81               [ 4] 1180         RET     
                                   1181 
                                   1182 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1183 ;       Exchange top two stack items.
      00059F 05 92                 1184         .word      LINK
                           0005A1  1185 LINK	= 	. 
      0005A1 04                    1186         .byte      4
      0005A2 53 57 41 50           1187         .ascii     "SWAP"
      0005A6                       1188 SWAPP:
      0005A6 90 93            [ 1] 1189         LDW Y,X
      0005A8 90 FE            [ 2] 1190         LDW Y,(Y)
      0005AA 90 BF 26         [ 2] 1191         LDW YTEMP,Y
      0005AD 90 93            [ 1] 1192         LDW Y,X
      0005AF 90 EE 02         [ 2] 1193         LDW Y,(2,Y)
      0005B2 FF               [ 2] 1194         LDW (X),Y
      0005B3 90 BE 26         [ 2] 1195         LDW Y,YTEMP
      0005B6 EF 02            [ 2] 1196         LDW (2,X),Y
      0005B8 81               [ 4] 1197         RET     
                                   1198 
                                   1199 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1200 ;       Copy second stack item to top.
      0005B9 05 A1                 1201         .word      LINK
                           0005BB  1202 LINK	= . 
      0005BB 04                    1203         .byte      4
      0005BC 4F 56 45 52           1204         .ascii     "OVER"
      0005C0                       1205 OVER:
      0005C0 1D 00 02         [ 2] 1206         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C3 90 93            [ 1] 1207         LDW Y,X
      0005C5 90 EE 04         [ 2] 1208         LDW Y,(4,Y)
      0005C8 FF               [ 2] 1209         LDW (X),Y
      0005C9 81               [ 4] 1210         RET     
                                   1211 
                                   1212 ;       0<      ( n -- t )
                                   1213 ;       Return true if n is negative.
      0005CA 05 BB                 1214         .word      LINK
                           0005CC  1215 LINK	= . 
      0005CC 02                    1216         .byte      2
      0005CD 30 3C                 1217         .ascii     "0<"
      0005CF                       1218 ZLESS:
      0005CF A6 FF            [ 1] 1219         LD A,#0xFF
      0005D1 90 93            [ 1] 1220         LDW Y,X
      0005D3 90 FE            [ 2] 1221         LDW Y,(Y)
      0005D5 2B 01            [ 1] 1222         JRMI     ZL1
      0005D7 4F               [ 1] 1223         CLR A   ;false
      0005D8 F7               [ 1] 1224 ZL1:    LD     (X),A
      0005D9 E7 01            [ 1] 1225         LD (1,X),A
      0005DB 81               [ 4] 1226 	RET     
                                   1227 
                                   1228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1229 ;       0= ( n -- f )
                                   1230 ;   n==0?
                                   1231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DC                       1232         _HEADER ZEQUAL,2,"0="
      0005DC 05 CC                    1         .word LINK 
                           0005DE     2         LINK=.
      0005DE 02                       3         .byte 2  
      0005DF 30 3D                    4         .ascii "0="
      0005E1                          5         ZEQUAL:
      0005E1 A6 FF            [ 1] 1233         LD A,#0XFF 
      0005E3 90 93            [ 1] 1234         LDW Y,X 
      0005E5 90 FE            [ 2] 1235         LDW Y,(Y)
      0005E7 27 02            [ 1] 1236         JREQ ZEQU1 
      0005E9 A6 00            [ 1] 1237         LD A,#0 
      0005EB                       1238 ZEQU1:  
      0005EB F7               [ 1] 1239         LD (X),A 
      0005EC E7 01            [ 1] 1240         LD (1,X),A         
      0005EE 81               [ 4] 1241         RET 
                                   1242 
                                   1243 
                                   1244 ;       AND     ( w w -- w )
                                   1245 ;       Bitwise AND.
      0005EF 05 DE                 1246         .word      LINK
                           0005F1  1247 LINK	= . 
      0005F1 03                    1248         .byte      3
      0005F2 41 4E 44              1249         .ascii     "AND"
      0005F5                       1250 ANDD:
      0005F5 F6               [ 1] 1251         LD  A,(X)    ;D=w
      0005F6 E4 02            [ 1] 1252         AND A,(2,X)
      0005F8 E7 02            [ 1] 1253         LD (2,X),A
      0005FA E6 01            [ 1] 1254         LD A,(1,X)
      0005FC E4 03            [ 1] 1255         AND A,(3,X)
      0005FE E7 03            [ 1] 1256         LD (3,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000600 1C 00 02         [ 2] 1257         ADDW X,#2
      000603 81               [ 4] 1258         RET
                                   1259 
                                   1260 ;       OR      ( w w -- w )
                                   1261 ;       Bitwise inclusive OR.
      000604 05 F1                 1262         .word      LINK
                           000606  1263 LINK = . 
      000606 02                    1264         .byte      2
      000607 4F 52                 1265         .ascii     "OR"
      000609                       1266 ORR:
      000609 F6               [ 1] 1267         LD A,(X)    ;D=w
      00060A EA 02            [ 1] 1268         OR A,(2,X)
      00060C E7 02            [ 1] 1269         LD (2,X),A
      00060E E6 01            [ 1] 1270         LD A,(1,X)
      000610 EA 03            [ 1] 1271         OR A,(3,X)
      000612 E7 03            [ 1] 1272         LD (3,X),A
      000614 1C 00 02         [ 2] 1273         ADDW X,#2
      000617 81               [ 4] 1274         RET
                                   1275 
                                   1276 ;       XOR     ( w w -- w )
                                   1277 ;       Bitwise exclusive OR.
      000618 06 06                 1278         .word      LINK
                           00061A  1279 LINK	= . 
      00061A 03                    1280         .byte      3
      00061B 58 4F 52              1281         .ascii     "XOR"
      00061E                       1282 XORR:
      00061E F6               [ 1] 1283         LD A,(X)    ;D=w
      00061F E8 02            [ 1] 1284         XOR A,(2,X)
      000621 E7 02            [ 1] 1285         LD (2,X),A
      000623 E6 01            [ 1] 1286         LD A,(1,X)
      000625 E8 03            [ 1] 1287         XOR A,(3,X)
      000627 E7 03            [ 1] 1288         LD (3,X),A
      000629 1C 00 02         [ 2] 1289         ADDW X,#2
      00062C 81               [ 4] 1290         RET
                                   1291 
                                   1292 ;       UM+     ( u u -- udsum )
                                   1293 ;       Add two unsigned single
                                   1294 ;       and return a double sum.
      00062D 06 1A                 1295         .word      LINK
                           00062F  1296 LINK	= . 
      00062F 03                    1297         .byte      3
      000630 55 4D 2B              1298         .ascii     "UM+"
      000633                       1299 UPLUS:
      000633 A6 01            [ 1] 1300         LD A,#1
      000635 90 93            [ 1] 1301         LDW Y,X
      000637 90 EE 02         [ 2] 1302         LDW Y,(2,Y)
      00063A 90 BF 26         [ 2] 1303         LDW YTEMP,Y
      00063D 90 93            [ 1] 1304         LDW Y,X
      00063F 90 FE            [ 2] 1305         LDW Y,(Y)
      000641 72 B9 00 26      [ 2] 1306         ADDW Y,YTEMP
      000645 EF 02            [ 2] 1307         LDW (2,X),Y
      000647 25 01            [ 1] 1308         JRC     UPL1
      000649 4F               [ 1] 1309         CLR A
      00064A E7 01            [ 1] 1310 UPL1:   LD     (1,X),A
      00064C 7F               [ 1] 1311         CLR (X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00064D 81               [ 4] 1312         RET
                                   1313 
                                   1314 ;; System and user variables
                                   1315 
                                   1316 ;       doVAR   ( -- a )
                                   1317 ;       Code for VARIABLE and CREATE.
      00064E 06 2F                 1318         .word      LINK
                           000650  1319 LINK	= . 
      000650 45                    1320 	.byte      COMPO+5
      000651 44 4F 56 41 52        1321         .ascii     "DOVAR"
      000656                       1322 DOVAR:
      000656 1D 00 02         [ 2] 1323 	SUBW X,#2
      000659 90 85            [ 2] 1324         POPW Y    ;get return addr (pfa)
      00065B 90 FE            [ 2] 1325         LDW Y,(Y) ; indirect address 
      00065D FF               [ 2] 1326         LDW (X),Y    ;push on stack
      00065E 81               [ 4] 1327         RET     ;go to RET of EXEC
                                   1328 
                                   1329 ;       BASE    ( -- a )
                                   1330 ;       Radix base for numeric I/O.
      00065F 06 50                 1331         .word      LINK        
                           000661  1332 LINK = . 
      000661 04                    1333         .byte      4
      000662 42 41 53 45           1334         .ascii     "BASE"
      000666                       1335 BASE:
      000666 90 AE 00 06      [ 2] 1336 	LDW Y,#UBASE 
      00066A 1D 00 02         [ 2] 1337 	SUBW X,#2
      00066D FF               [ 2] 1338         LDW (X),Y
      00066E 81               [ 4] 1339         RET
                                   1340 
                                   1341 ;       tmp     ( -- a )
                                   1342 ;       A temporary storage.
      00066F 06 61                 1343         .word      LINK
                                   1344         
                           000671  1345 LINK = . 
      000671 03                    1346 	.byte      3
      000672 54 4D 50              1347         .ascii     "TMP"
      000675                       1348 TEMP:
      000675 90 AE 00 0A      [ 2] 1349 	LDW Y,#UTMP
      000679 1D 00 02         [ 2] 1350 	SUBW X,#2
      00067C FF               [ 2] 1351         LDW (X),Y
      00067D 81               [ 4] 1352         RET
                                   1353 
                                   1354 ;       >IN     ( -- a )
                                   1355 ;        Hold parsing pointer.
      00067E 06 71                 1356         .word      LINK
                           000680  1357 LINK = . 
      000680 03                    1358         .byte      3
      000681 3E 49 4E              1359         .ascii    ">IN"
      000684                       1360 INN:
      000684 90 AE 00 0C      [ 2] 1361 	LDW Y,#UINN 
      000688 1D 00 02         [ 2] 1362 	SUBW X,#2
      00068B FF               [ 2] 1363         LDW (X),Y
      00068C 81               [ 4] 1364         RET
                                   1365 
                                   1366 ;       #TIB    ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1367 ;       Count in terminal input buffer.
      00068D 06 80                 1368         .word      LINK
                           00068F  1369 LINK = . 
      00068F 04                    1370         .byte      4
      000690 23 54 49 42           1371         .ascii     "#TIB"
      000694                       1372 NTIB:
      000694 90 AE 00 0E      [ 2] 1373 	LDW Y,#UCTIB 
      000698 1D 00 02         [ 2] 1374 	SUBW X,#2
      00069B FF               [ 2] 1375         LDW (X),Y
      00069C 81               [ 4] 1376         RET
                                   1377 
                                   1378 ;       TBUF ( -- a )
                                   1379 ;       address of 128 bytes transaction buffer 
      00069D 06 8F                 1380         .word LINK 
                           00069F  1381         LINK=.
      00069F 04                    1382         .byte 4 
      0006A0 54 42 55 46           1383         .ascii "TBUF"
      0006A4                       1384 TBUF:
      0006A4 90 AE 16 80      [ 2] 1385         ldw y,#ROWBUFF
      0006A8 1D 00 02         [ 2] 1386         subw x,#CELLL
      0006AB FF               [ 2] 1387         ldw (x),y 
      0006AC 81               [ 4] 1388         ret 
                                   1389 
                                   1390 ; systeme variable 
                                   1391 ; compilation destination 
                                   1392 ; TFLASH ( -- A )
      0006AD 06 9F                 1393         .word LINK 
                           0006AF  1394         LINK=.
      0006AF 06                    1395         .byte 6 
      0006B0 54 46 4C 41 53 48     1396         .ascii "TFLASH"         
      0006B6                       1397 TFLASH:
      0006B6 1D 00 02         [ 2] 1398         subw x,#CELLL 
      0006B9 90 AE 00 20      [ 2] 1399         ldw y,#UTFLASH
      0006BD FF               [ 2] 1400         ldw (x),y 
      0006BE 81               [ 4] 1401         ret 
                                   1402 
                                   1403 ;       "EVAL   ( -- a )
                                   1404 ;       Execution vector of EVAL.
      0006BF 06 AF                 1405         .word      LINK
                           0006C1  1406 LINK = . 
      0006C1 05                    1407         .byte      5
      0006C2 27 45 56 41 4C        1408         .ascii     "'EVAL"
      0006C7                       1409 TEVAL:
      0006C7 90 AE 00 12      [ 2] 1410 	LDW Y,#UINTER 
      0006CB 1D 00 02         [ 2] 1411 	SUBW X,#2
      0006CE FF               [ 2] 1412         LDW (X),Y
      0006CF 81               [ 4] 1413         RET
                                   1414 
                                   1415 ;       HLD     ( -- a )
                                   1416 ;       Hold a pointer of output string.
      0006D0 06 C1                 1417         .word      LINK
                           0006D2  1418 LINK = . 
      0006D2 03                    1419         .byte      3
      0006D3 48 4C 44              1420         .ascii     "HLD"
      0006D6                       1421 HLD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006D6 90 AE 00 14      [ 2] 1422 	LDW Y,#UHLD 
      0006DA 1D 00 02         [ 2] 1423 	SUBW X,#2
      0006DD FF               [ 2] 1424         LDW (X),Y
      0006DE 81               [ 4] 1425         RET
                                   1426 
                                   1427 ;       CONTEXT ( -- a )
                                   1428 ;       Start vocabulary search.
      0006DF 06 D2                 1429         .word      LINK
                           0006E1  1430 LINK = . 
      0006E1 07                    1431         .byte      7
      0006E2 43 4F 4E 54 45 58 54  1432         .ascii     "CONTEXT"
      0006E9                       1433 CNTXT:
      0006E9 90 AE 00 16      [ 2] 1434 	LDW Y,#UCNTXT
      0006ED 1D 00 02         [ 2] 1435 	SUBW X,#2
      0006F0 FF               [ 2] 1436         LDW (X),Y
      0006F1 81               [ 4] 1437         RET
                                   1438 
                                   1439 ;       VP      ( -- a )
                                   1440 ;       Point to top of variables
      0006F2 06 E1                 1441         .word      LINK
                           0006F4  1442 LINK = . 
      0006F4 02                    1443         .byte      2
      0006F5 56 50                 1444         .ascii     "VP"
      0006F7                       1445 VPP:
      0006F7 90 AE 00 18      [ 2] 1446 	LDW Y,#UVP 
      0006FB 1D 00 02         [ 2] 1447 	SUBW X,#2
      0006FE FF               [ 2] 1448         LDW (X),Y
      0006FF 81               [ 4] 1449         RET
                                   1450 
                                   1451 ;       CP    ( -- a )
                                   1452 ;       Pointer to top of FLASH 
      000700 06 F4                 1453         .word LINK 
                           000702  1454         LINK=.
      000702 02                    1455         .byte 2 
      000703 43 50                 1456         .ascii "CP"
      000705                       1457 CPP: 
      000705 90 AE 00 1A      [ 2] 1458         ldw y,#UCP 
      000709 1D 00 02         [ 2] 1459         subw x,#CELLL 
      00070C FF               [ 2] 1460         ldw (x),y 
      00070D 81               [ 4] 1461         ret                
                                   1462 
                                   1463 ;       LAST    ( -- a )
                                   1464 ;       Point to last name in dictionary.
      00070E 07 02                 1465         .word      LINK
                           000710  1466 LINK = . 
      000710 04                    1467         .byte      4
      000711 4C 41 53 54           1468         .ascii     "LAST"
      000715                       1469 LAST:
      000715 90 AE 00 1C      [ 2] 1470 	LDW Y,#ULAST 
      000719 1D 00 02         [ 2] 1471 	SUBW X,#2
      00071C FF               [ 2] 1472         LDW (X),Y
      00071D 81               [ 4] 1473         RET
                                   1474 
                                   1475 ; address of system variable URLAST 
                                   1476 ;       RAMLAST ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1477 ; RAM dictionary context 
      00071E 07 10                 1478         .word LINK 
                           000720  1479         LINK=. 
      000720 07                    1480         .byte 7  
      000721 52 41 4D 4C 41 53 54  1481         .ascii "RAMLAST" 
      000728                       1482 RAMLAST: 
      000728 90 AE 00 22      [ 2] 1483         ldw y,#URLAST 
      00072C 1D 00 02         [ 2] 1484         subw x,#CELLL 
      00072F FF               [ 2] 1485         ldw (x),y 
      000730 81               [ 4] 1486         ret 
                                   1487 
                                   1488 ; OFFSET ( -- a )
                                   1489 ; address of system variable OFFSET 
      000731 07 20                 1490         .word LINK 
                           000733  1491         LINK=.
      000733 06                    1492         .byte 6
      000734 4F 46 46 53 45 54     1493         .ascii "OFFSET" 
      00073A                       1494 OFFSET: 
      00073A 1D 00 02         [ 2] 1495         subw x,#CELLL
      00073D 90 AE 00 1E      [ 2] 1496         ldw y,#UOFFSET 
      000741 FF               [ 2] 1497         ldw (x),y 
      000742 81               [ 4] 1498         ret 
                                   1499 
                                   1500 ; adjust jump address adding OFFSET
                                   1501 ; ADR-ADJ ( a -- a+offset )
      000743                       1502 ADRADJ: 
      000743 CD 07 3A         [ 4] 1503         call OFFSET 
      000746 CD 04 EF         [ 4] 1504         call AT 
      000749 CC 07 C5         [ 2] 1505         jp PLUS 
                                   1506 
                                   1507 
                                   1508 ;; Common functions
                                   1509 
                                   1510 ;       ?DUP    ( w -- w w | 0 )
                                   1511 ;       Dup tos if its is not zero.
      00074C 07 33                 1512         .word      LINK
                           00074E  1513 LINK = . 
      00074E 04                    1514         .byte      4
      00074F 3F 44 55 50           1515         .ascii     "?DUP"
      000753                       1516 QDUP:
      000753 90 93            [ 1] 1517         LDW Y,X
      000755 90 FE            [ 2] 1518 	LDW Y,(Y)
      000757 27 04            [ 1] 1519         JREQ     QDUP1
      000759 1D 00 02         [ 2] 1520 	SUBW X,#2
      00075C FF               [ 2] 1521         LDW (X),Y
      00075D 81               [ 4] 1522 QDUP1:  RET
                                   1523 
                                   1524 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1525 ;       Rot 3rd item to top.
      00075E 07 4E                 1526         .word      LINK
                           000760  1527 LINK = . 
      000760 03                    1528         .byte      3
      000761 52 4F 54              1529         .ascii     "ROT"
      000764                       1530 ROT:
      000764 90 93            [ 1] 1531         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000766 90 FE            [ 2] 1532         ldw y,(y)
      000768 90 89            [ 2] 1533         pushw y 
      00076A 90 93            [ 1] 1534         ldw y,x 
      00076C 90 EE 04         [ 2] 1535         ldw y,(4,y)
      00076F FF               [ 2] 1536         ldw (x),y 
      000770 90 93            [ 1] 1537         ldw y,x 
      000772 90 EE 02         [ 2] 1538         ldw y,(2,y)
      000775 EF 04            [ 2] 1539         ldw (4,x),y 
      000777 90 85            [ 2] 1540         popw y 
      000779 EF 02            [ 2] 1541         ldw (2,x),y
      00077B 81               [ 4] 1542         ret 
                                   1543 
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1545 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1546 ;    rotate left 3 top elements 
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077C                       1548     _HEADER NROT,4,"<ROT"
      00077C 07 60                    1         .word LINK 
                           00077E     2         LINK=.
      00077E 04                       3         .byte 4  
      00077F 3C 52 4F 54              4         .ascii "<ROT"
      000783                          5         NROT:
      000783 90 93            [ 1] 1549     LDW Y,X 
      000785 90 FE            [ 2] 1550     LDW Y,(Y)
      000787 90 BF 26         [ 2] 1551     LDW YTEMP,Y ; n3  
      00078A 90 93            [ 1] 1552     LDW Y,X 
      00078C 90 EE 02         [ 2] 1553     LDW Y,(2,Y) ; Y = n2 
      00078F FF               [ 2] 1554     LDW (X),Y   ; TOS = n2 
      000790 90 93            [ 1] 1555     LDW Y,X    
      000792 90 EE 04         [ 2] 1556     LDW Y,(4,Y) ; Y = n1 
      000795 EF 02            [ 2] 1557     LDW (2,X),Y ;   = n1 
      000797 90 BE 26         [ 2] 1558     LDW Y,YTEMP 
      00079A EF 04            [ 2] 1559     LDW (4,X),Y ; = n3 
      00079C 81               [ 4] 1560     RET 
                                   1561 
                                   1562 ;       2DROP   ( w w -- )
                                   1563 ;       Discard two items on stack.
      00079D 07 7E                 1564         .word      LINK
                           00079F  1565 LINK = . 
      00079F 05                    1566         .byte      5
      0007A0 32 44 52 4F 50        1567         .ascii     "2DROP"
      0007A5                       1568 DDROP:
      0007A5 1C 00 04         [ 2] 1569         ADDW X,#4
      0007A8 81               [ 4] 1570         RET
                                   1571 
                                   1572 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1573 ;       Duplicate top two items.
      0007A9 07 9F                 1574         .word      LINK
                           0007AB  1575 LINK = . 
      0007AB 04                    1576         .byte      4
      0007AC 32 44 55 50           1577         .ascii     "2DUP"
      0007B0                       1578 DDUP:
      0007B0 1D 00 04         [ 2] 1579         SUBW X,#4
      0007B3 90 93            [ 1] 1580         LDW Y,X
      0007B5 90 EE 06         [ 2] 1581         LDW Y,(6,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B8 EF 02            [ 2] 1582         LDW (2,X),Y
      0007BA 90 93            [ 1] 1583         LDW Y,X
      0007BC 90 EE 04         [ 2] 1584         LDW Y,(4,Y)
      0007BF FF               [ 2] 1585         LDW (X),Y
      0007C0 81               [ 4] 1586         RET
                                   1587 
                                   1588 ;       +       ( w w -- sum )
                                   1589 ;       Add top two items.
      0007C1 07 AB                 1590         .word      LINK
                           0007C3  1591 LINK = . 
      0007C3 01                    1592         .byte      1
      0007C4 2B                    1593         .ascii     "+"
      0007C5                       1594 PLUS:
      0007C5 90 93            [ 1] 1595         LDW Y,X
      0007C7 90 FE            [ 2] 1596         LDW Y,(Y)
      0007C9 90 BF 26         [ 2] 1597         LDW YTEMP,Y
      0007CC 1C 00 02         [ 2] 1598         ADDW X,#2
      0007CF 90 93            [ 1] 1599         LDW Y,X
      0007D1 90 FE            [ 2] 1600         LDW Y,(Y)
      0007D3 72 B9 00 26      [ 2] 1601         ADDW Y,YTEMP
      0007D7 FF               [ 2] 1602         LDW (X),Y
      0007D8 81               [ 4] 1603         RET
                                   1604 
                                   1605 ;       NOT     ( w -- w )
                                   1606 ;       One's complement of tos.
      0007D9 07 C3                 1607         .word      LINK
                           0007DB  1608 LINK = . 
      0007DB 03                    1609         .byte      3
      0007DC 4E 4F 54              1610         .ascii     "NOT"
      0007DF                       1611 INVER:
      0007DF 90 93            [ 1] 1612         LDW Y,X
      0007E1 90 FE            [ 2] 1613         LDW Y,(Y)
      0007E3 90 53            [ 2] 1614         CPLW Y
      0007E5 FF               [ 2] 1615         LDW (X),Y
      0007E6 81               [ 4] 1616         RET
                                   1617 
                                   1618 ;       NEGATE  ( n -- -n )
                                   1619 ;       Two's complement of tos.
      0007E7 07 DB                 1620         .word      LINK
                           0007E9  1621 LINK = . 
      0007E9 06                    1622         .byte      6
      0007EA 4E 45 47 41 54 45     1623         .ascii     "NEGATE"
      0007F0                       1624 NEGAT:
      0007F0 90 93            [ 1] 1625         LDW Y,X
      0007F2 90 FE            [ 2] 1626         LDW Y,(Y)
      0007F4 90 50            [ 2] 1627         NEGW Y
      0007F6 FF               [ 2] 1628         LDW (X),Y
      0007F7 81               [ 4] 1629         RET
                                   1630 
                                   1631 ;       DNEGATE ( d -- -d )
                                   1632 ;       Two's complement of top double.
      0007F8 07 E9                 1633         .word      LINK
                           0007FA  1634 LINK = . 
      0007FA 07                    1635         .byte      7
      0007FB 44 4E 45 47 41 54 45  1636         .ascii     "DNEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000802                       1637 DNEGA:
      000802 90 93            [ 1] 1638         LDW Y,X
      000804 90 FE            [ 2] 1639 	LDW Y,(Y)
      000806 90 53            [ 2] 1640         CPLW Y     
      000808 90 BF 26         [ 2] 1641 	LDW YTEMP,Y
      00080B 90 93            [ 1] 1642         LDW Y,X
      00080D 90 EE 02         [ 2] 1643         LDW Y,(2,Y)
      000810 90 53            [ 2] 1644         CPLW Y
      000812 72 A9 00 01      [ 2] 1645         addw y,#1
      000816 EF 02            [ 2] 1646         LDW (2,X),Y
      000818 90 BE 26         [ 2] 1647         LDW Y,YTEMP
      00081B 24 02            [ 1] 1648         JRNC DN1 
      00081D 90 5C            [ 1] 1649         INCW Y
      00081F FF               [ 2] 1650 DN1:    LDW (X),Y
      000820 81               [ 4] 1651         RET
                                   1652 
                                   1653 
                                   1654 ;       S>D ( n -- d )
                                   1655 ; convert single integer to double 
      000821 07 FA                 1656         .word LINK 
                           000823  1657         LINK=. 
      000823 03                    1658         .byte 3 
      000824 53 3E 44              1659         .ascii "S>D"
      000827                       1660 STOD: 
      000827 1D 00 02         [ 2] 1661         subw x,#CELLL 
      00082A 90 5F            [ 1] 1662         clrw y 
      00082C FF               [ 2] 1663         ldw (x),y 
      00082D 90 93            [ 1] 1664         ldw y,x 
      00082F 90 EE 02         [ 2] 1665         ldw y,(2,y)
      000832 2A 05            [ 1] 1666         jrpl 1$ 
      000834 90 AE FF FF      [ 2] 1667         ldw y,#-1
      000838 FF               [ 2] 1668         ldw (x),y 
      000839 81               [ 4] 1669 1$:     ret 
                                   1670 
                                   1671 
                                   1672 
                                   1673 
                                   1674 ;       -       ( n1 n2 -- n1-n2 )
                                   1675 ;       Subtraction.
      00083A 08 23                 1676         .word      LINK
                           00083C  1677 LINK = . 
      00083C 01                    1678         .byte      1
      00083D 2D                    1679         .ascii     "-"
      00083E                       1680 SUBB:
      00083E 90 93            [ 1] 1681         LDW Y,X
      000840 90 FE            [ 2] 1682         LDW Y,(Y)
      000842 90 BF 26         [ 2] 1683         LDW YTEMP,Y
      000845 1C 00 02         [ 2] 1684         ADDW X,#2
      000848 90 93            [ 1] 1685         LDW Y,X
      00084A 90 FE            [ 2] 1686         LDW Y,(Y)
      00084C 72 B2 00 26      [ 2] 1687         SUBW Y,YTEMP
      000850 FF               [ 2] 1688         LDW (X),Y
      000851 81               [ 4] 1689         RET
                                   1690 
                                   1691 ;       ABS     ( n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1692 ;       Return  absolute value of n.
      000852 08 3C                 1693         .word      LINK
                           000854  1694 LINK = . 
      000854 03                    1695         .byte      3
      000855 41 42 53              1696         .ascii     "ABS"
      000858                       1697 ABSS:
      000858 90 93            [ 1] 1698         LDW Y,X
      00085A 90 FE            [ 2] 1699 	LDW Y,(Y)
      00085C 2A 03            [ 1] 1700         JRPL     AB1     ;negate:
      00085E 90 50            [ 2] 1701         NEGW     Y     ;else negate hi byte
      000860 FF               [ 2] 1702         LDW (X),Y
      000861 81               [ 4] 1703 AB1:    RET
                                   1704 
                                   1705 ;       =       ( w w -- t )
                                   1706 ;       Return true if top two are =al.
      000862 08 54                 1707         .word      LINK
                           000864  1708 LINK = . 
      000864 01                    1709         .byte      1
      000865 3D                    1710         .ascii     "="
      000866                       1711 EQUAL:
      000866 A6 FF            [ 1] 1712         LD A,#0xFF  ;true
      000868 90 93            [ 1] 1713         LDW Y,X    ;D = n2
      00086A 90 FE            [ 2] 1714         LDW Y,(Y)
      00086C 90 BF 26         [ 2] 1715         LDW YTEMP,Y
      00086F 1C 00 02         [ 2] 1716         ADDW X,#2
      000872 90 93            [ 1] 1717         LDW Y,X
      000874 90 FE            [ 2] 1718         LDW Y,(Y)
      000876 90 B3 26         [ 2] 1719         CPW Y,YTEMP     ;if n2 <> n1
      000879 27 01            [ 1] 1720         JREQ     EQ1
      00087B 4F               [ 1] 1721         CLR A
      00087C F7               [ 1] 1722 EQ1:    LD (X),A
      00087D E7 01            [ 1] 1723         LD (1,X),A
      00087F 81               [ 4] 1724 	RET     
                                   1725 
                                   1726 ;       U<      ( u u -- t )
                                   1727 ;       Unsigned compare of top two items.
      000880 08 64                 1728         .word      LINK
                           000882  1729 LINK = . 
      000882 02                    1730         .byte      2
      000883 55 3C                 1731         .ascii     "U<"
      000885                       1732 ULESS:
      000885 A6 FF            [ 1] 1733         LD A,#0xFF  ;true
      000887 90 93            [ 1] 1734         LDW Y,X    ;D = n2
      000889 90 FE            [ 2] 1735         LDW Y,(Y)
      00088B 90 BF 26         [ 2] 1736         LDW YTEMP,Y
      00088E 1C 00 02         [ 2] 1737         ADDW X,#2
      000891 90 93            [ 1] 1738         LDW Y,X
      000893 90 FE            [ 2] 1739         LDW Y,(Y)
      000895 90 B3 26         [ 2] 1740         CPW Y,YTEMP     ;if n2 <> n1
      000898 25 01            [ 1] 1741         JRULT     ULES1
      00089A 4F               [ 1] 1742         CLR A
      00089B F7               [ 1] 1743 ULES1:  LD (X),A
      00089C E7 01            [ 1] 1744         LD (1,X),A
      00089E 81               [ 4] 1745 	RET     
                                   1746 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1747 ;       <       ( n1 n2 -- t )
                                   1748 ;       Signed compare of top two items.
      00089F 08 82                 1749         .word      LINK
                           0008A1  1750 LINK = . 
      0008A1 01                    1751         .byte      1
      0008A2 3C                    1752         .ascii     "<"
      0008A3                       1753 LESS:
      0008A3 A6 FF            [ 1] 1754         LD A,#0xFF  ;true
      0008A5 90 93            [ 1] 1755         LDW Y,X    ;D = n2
      0008A7 90 FE            [ 2] 1756         LDW Y,(Y)
      0008A9 90 BF 26         [ 2] 1757         LDW YTEMP,Y
      0008AC 1C 00 02         [ 2] 1758         ADDW X,#2
      0008AF 90 93            [ 1] 1759         LDW Y,X
      0008B1 90 FE            [ 2] 1760         LDW Y,(Y)
      0008B3 90 B3 26         [ 2] 1761         CPW Y,YTEMP     ;if n2 <> n1
      0008B6 2F 01            [ 1] 1762         JRSLT     LT1
      0008B8 4F               [ 1] 1763         CLR A
      0008B9 F7               [ 1] 1764 LT1:    LD (X),A
      0008BA E7 01            [ 1] 1765         LD (1,X),A
      0008BC 81               [ 4] 1766 	RET     
                                   1767 
                                   1768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1769 ;       >   (n1 n2 -- f )
                                   1770 ;  signed compare n1 n2 
                                   1771 ;  true if n1 > n2 
                                   1772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008BD 08 A1                 1773         .word   LINK 
                           0008BF  1774         LINK = . 
      0008BF 01                    1775         .byte 1
      0008C0 3E                    1776         .ascii ">"
      0008C1                       1777 GREAT:
      0008C1 A6 FF            [ 1] 1778         LD A,#0xFF ;
      0008C3 90 93            [ 1] 1779         LDW Y,X 
      0008C5 90 FE            [ 2] 1780         LDW Y,(Y)
      0008C7 90 BF 26         [ 2] 1781         LDW YTEMP,Y 
      0008CA 1C 00 02         [ 2] 1782         ADDW X,#2 
      0008CD 90 93            [ 1] 1783         LDW Y,X 
      0008CF 90 FE            [ 2] 1784         LDW Y,(Y)
      0008D1 90 B3 26         [ 2] 1785         CPW  Y,YTEMP 
      0008D4 2C 01            [ 1] 1786         JRSGT GREAT1 
      0008D6 4F               [ 1] 1787         CLR  A
      0008D7                       1788 GREAT1:
      0008D7 F7               [ 1] 1789         LD (X),A 
      0008D8 E7 01            [ 1] 1790         LD (1,X),A 
      0008DA 81               [ 4] 1791         RET 
                                   1792 
                                   1793 
                                   1794 ;       MAX     ( n n -- n )
                                   1795 ;       Return greater of two top items.
      0008DB 08 BF                 1796         .word      LINK
                           0008DD  1797 LINK = . 
      0008DD 03                    1798         .byte      3
      0008DE 4D 41 58              1799         .ascii     "MAX"
      0008E1                       1800 MAX:
      0008E1 90 93            [ 1] 1801         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008E3 90 EE 02         [ 2] 1802         LDW Y,(2,Y)
      0008E6 90 BF 26         [ 2] 1803         LDW YTEMP,Y
      0008E9 90 93            [ 1] 1804         LDW Y,X
      0008EB 90 FE            [ 2] 1805         LDW Y,(Y)
      0008ED 90 B3 26         [ 2] 1806         CPW Y,YTEMP     ;if n2 <> n1
      0008F0 2F 02            [ 1] 1807         JRSLT     MAX1
      0008F2 EF 02            [ 2] 1808         LDW (2,X),Y
      0008F4 1C 00 02         [ 2] 1809 MAX1:   ADDW X,#2
      0008F7 81               [ 4] 1810 	RET     
                                   1811 
                                   1812 ;       MIN     ( n n -- n )
                                   1813 ;       Return smaller of top two items.
      0008F8 08 DD                 1814         .word      LINK
                           0008FA  1815 LINK = . 
      0008FA 03                    1816         .byte      3
      0008FB 4D 49 4E              1817         .ascii     "MIN"
      0008FE                       1818 MIN:
      0008FE 90 93            [ 1] 1819         LDW Y,X    ;D = n2
      000900 90 EE 02         [ 2] 1820         LDW Y,(2,Y)
      000903 90 BF 26         [ 2] 1821         LDW YTEMP,Y
      000906 90 93            [ 1] 1822         LDW Y,X
      000908 90 FE            [ 2] 1823         LDW Y,(Y)
      00090A 90 B3 26         [ 2] 1824         CPW Y,YTEMP     ;if n2 <> n1
      00090D 2C 02            [ 1] 1825         JRSGT     MIN1
      00090F EF 02            [ 2] 1826         LDW (2,X),Y
      000911 1C 00 02         [ 2] 1827 MIN1:	ADDW X,#2
      000914 81               [ 4] 1828 	RET     
                                   1829 
                                   1830 ;       WITHIN  ( u ul uh -- t )
                                   1831 ;       Return true if u is within
                                   1832 ;       range of ul and uh. ( ul <= u < uh )
      000915 08 FA                 1833         .word      LINK
                           000917  1834 LINK = . 
      000917 06                    1835         .byte      6
      000918 57 49 54 48 49 4E     1836         .ascii     "WITHIN"
      00091E                       1837 WITHI:
      00091E CD 05 C0         [ 4] 1838         CALL     OVER
      000921 CD 08 3E         [ 4] 1839         CALL     SUBB
      000924 CD 05 5F         [ 4] 1840         CALL     TOR
      000927 CD 08 3E         [ 4] 1841         CALL     SUBB
      00092A CD 05 40         [ 4] 1842         CALL     RFROM
      00092D CC 08 85         [ 2] 1843         JP     ULESS
                                   1844 
                                   1845 ;; Divide
                                   1846 
                                   1847 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1848 ;       Unsigned divide of a double by a
                                   1849 ;       single. Return mod and quotient.
      000930 09 17                 1850         .word      LINK
                           000932  1851 LINK = . 
      000932 06                    1852         .byte      6
      000933 55 4D 2F 4D 4F 44     1853         .ascii     "UM/MOD"
                                   1854 ; 2021-02-22
                                   1855 ; changed algortihm for Jeeek one 
                                   1856 ; ref: https://github.com/TG9541/stm8ef/pull/406        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000939                       1857 UMMOD:
      000939 90 93            [ 1] 1858         LDW     Y,X             ; stack pointer to Y
      00093B FE               [ 2] 1859         LDW     X,(X)           ; un
      00093C BF 26            [ 2] 1860         LDW     YTEMP,X         ; save un
      00093E 93               [ 1] 1861         LDW     X,Y
      00093F 5C               [ 1] 1862         INCW    X               ; drop un
      000940 5C               [ 1] 1863         INCW    X
      000941 89               [ 2] 1864         PUSHW   X               ; save stack pointer
      000942 FE               [ 2] 1865         LDW     X,(X)           ; X=udh
      000943 90 EE 04         [ 2] 1866         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      000946 B3 26            [ 2] 1867         CPW     X,YTEMP
      000948 25 0B            [ 1] 1868         JRULT   MMSM1           ; X is still on the R-stack
      00094A 85               [ 2] 1869         POPW    X               ; restore stack pointer
      00094B 90 AE FF FF      [ 2] 1870         LDW     Y,#0xFFFF       ; overflow result:
      00094F FF               [ 2] 1871         LDW     (X),Y           ; quotient max. 16 bit value
      000950 90 5F            [ 1] 1872         CLRW    Y
      000952 EF 02            [ 2] 1873         LDW     (2,X),Y         ; remainder 0
      000954 81               [ 4] 1874         RET
      000955                       1875 MMSM1:
      000955 A6 10            [ 1] 1876         LD      A,#16           ; loop count
      000957 90 58            [ 2] 1877         SLLW    Y               ; udl shift udl into udh
      000959                       1878 MMSM3:
      000959 59               [ 2] 1879         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00095A 25 04            [ 1] 1880         JRC     MMSMa           ; if carry out of rotate
      00095C B3 26            [ 2] 1881         CPW     X,YTEMP         ; compare udh to un
      00095E 25 05            [ 1] 1882         JRULT   MMSM4           ; can't subtract
      000960                       1883 MMSMa:
      000960 72 B0 00 26      [ 2] 1884         SUBW    X,YTEMP         ; can subtract
      000964 98               [ 1] 1885         RCF
      000965                       1886 MMSM4:
      000965 8C               [ 1] 1887         CCF                     ; quotient bit
      000966 90 59            [ 2] 1888         RLCW    Y               ; rotate into quotient, rotate out udl
      000968 4A               [ 1] 1889         DEC     A               ; repeat
      000969 26 EE            [ 1] 1890         JRNE    MMSM3           ; if A == 0
      00096B                       1891 MMSMb:
      00096B BF 26            [ 2] 1892         LDW     YTEMP,X         ; done, save remainder
      00096D 85               [ 2] 1893         POPW    X               ; restore stack pointer
      00096E FF               [ 2] 1894         LDW     (X),Y           ; save quotient
      00096F 90 BE 26         [ 2] 1895         LDW     Y,YTEMP         ; remainder onto stack
      000972 EF 02            [ 2] 1896         LDW     (2,X),Y
      000974 81               [ 4] 1897         RET
                                   1898 
                                   1899 
                                   1900 ;----------------------------------------------	
                                   1901 ;       M/MOD   ( d n -- r q )
                                   1902 ;       Signed floored divide of double by
                                   1903 ;       single. Return mod and quotient.
                                   1904 ;----------------------------------------------	
      000975 09 32                 1905         .word      LINK
                           000977  1906 LINK = . 
      000977 05                    1907         .byte      5
      000978 4D 2F 4D 4F 44        1908         .ascii     "M/MOD"
      00097D                       1909 MSMOD:  
      00097D CD 05 96         [ 4] 1910         CALL	DUPP
      000980 CD 05 CF         [ 4] 1911         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000983 CD 05 96         [ 4] 1912         CALL	DUPP
      000986 CD 05 5F         [ 4] 1913         CALL	TOR
      000989 CD 04 A4         [ 4] 1914         CALL	QBRAN
      00098C 09 9A                 1915         .word	MMOD1
      00098E CD 07 F0         [ 4] 1916         CALL	NEGAT
      000991 CD 05 5F         [ 4] 1917         CALL	TOR
      000994 CD 08 02         [ 4] 1918         CALL	DNEGA
      000997 CD 05 40         [ 4] 1919         CALL	RFROM
      00099A CD 05 5F         [ 4] 1920 MMOD1:	CALL	TOR
      00099D CD 05 96         [ 4] 1921         CALL	DUPP
      0009A0 CD 05 CF         [ 4] 1922         CALL	ZLESS
      0009A3 CD 04 A4         [ 4] 1923         CALL	QBRAN
      0009A6 09 AE                 1924         .word	MMOD2
      0009A8 CD 05 53         [ 4] 1925         CALL	RAT
      0009AB CD 07 C5         [ 4] 1926         CALL	PLUS
      0009AE CD 05 40         [ 4] 1927 MMOD2:	CALL	RFROM
      0009B1 CD 09 39         [ 4] 1928         CALL	UMMOD
      0009B4 CD 05 40         [ 4] 1929         CALL	RFROM
      0009B7 CD 04 A4         [ 4] 1930         CALL	QBRAN
      0009BA 09 C5                 1931         .word	MMOD3
      0009BC CD 05 A6         [ 4] 1932         CALL	SWAPP
      0009BF CD 07 F0         [ 4] 1933         CALL	NEGAT
      0009C2 CD 05 A6         [ 4] 1934         CALL	SWAPP
      0009C5 81               [ 4] 1935 MMOD3:	RET
                                   1936 
                                   1937 ;       /MOD    ( n n -- r q )
                                   1938 ;       Signed divide. Return mod and quotient.
      0009C6 09 77                 1939         .word      LINK
                           0009C8  1940 LINK = . 
      0009C8 04                    1941         .byte      4
      0009C9 2F 4D 4F 44           1942         .ascii     "/MOD"
      0009CD                       1943 SLMOD:
      0009CD CD 05 C0         [ 4] 1944         CALL	OVER
      0009D0 CD 05 CF         [ 4] 1945         CALL	ZLESS
      0009D3 CD 05 A6         [ 4] 1946         CALL	SWAPP
      0009D6 CC 09 7D         [ 2] 1947         JP	MSMOD
                                   1948 
                                   1949 ;       MOD     ( n n -- r )
                                   1950 ;       Signed divide. Return mod only.
      0009D9 09 C8                 1951         .word      LINK
                           0009DB  1952 LINK = . 
      0009DB 03                    1953         .byte      3
      0009DC 4D 4F 44              1954         .ascii     "MOD"
      0009DF                       1955 MODD:
      0009DF CD 09 CD         [ 4] 1956 	CALL	SLMOD
      0009E2 CC 05 8C         [ 2] 1957 	JP	DROP
                                   1958 
                                   1959 ;       /       ( n n -- q )
                                   1960 ;       Signed divide. Return quotient only.
      0009E5 09 DB                 1961         .word      LINK
                           0009E7  1962 LINK = . 
      0009E7 01                    1963         .byte      1
      0009E8 2F                    1964         .ascii     "/"
      0009E9                       1965 SLASH:
      0009E9 CD 09 CD         [ 4] 1966         CALL	SLMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009EC CD 05 A6         [ 4] 1967         CALL	SWAPP
      0009EF CC 05 8C         [ 2] 1968         JP	DROP
                                   1969 
                                   1970 ;; Multiply
                                   1971 
                                   1972 ;       UM*     ( u u -- ud )
                                   1973 ;       Unsigned multiply. Return double product.
      0009F2 09 E7                 1974         .word      LINK
                           0009F4  1975 LINK = . 
      0009F4 03                    1976         .byte      3
      0009F5 55 4D 2A              1977         .ascii     "UM*"
      0009F8                       1978 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1979 ; take advantage of SP addressing modes
                                   1980 ; these PRODx in RAM are not required
                                   1981 ; the product is kept on stack as local variable 
                                   1982         ;; bytes offset on data stack 
                           000002  1983         da=2 
                           000003  1984         db=3 
                           000000  1985         dc=0 
                           000001  1986         dd=1 
                                   1987         ;; product bytes offset on return stack 
                           000001  1988         UD1=1  ; ud bits 31..24
                           000002  1989         UD2=2  ; ud bits 23..16
                           000003  1990         UD3=3  ; ud bits 15..8 
                           000004  1991         UD4=4  ; ud bits 7..0 
                                   1992         ;; local variable for product set to zero   
      0009F8 90 5F            [ 1] 1993         clrw y 
      0009FA 90 89            [ 2] 1994         pushw y  ; bits 15..0
      0009FC 90 89            [ 2] 1995         pushw y  ; bits 31..16 
      0009FE E6 03            [ 1] 1996         ld a,(db,x) ; b 
      000A00 90 97            [ 1] 1997         ld yl,a 
      000A02 E6 01            [ 1] 1998         ld a,(dd,x)   ; d
      000A04 90 42            [ 4] 1999         mul y,a    ; b*d  
      000A06 17 03            [ 2] 2000         ldw (UD3,sp),y ; lowest weight product 
      000A08 E6 03            [ 1] 2001         ld a,(db,x)
      000A0A 90 97            [ 1] 2002         ld yl,a 
      000A0C E6 00            [ 1] 2003         ld a,(dc,x)
      000A0E 90 42            [ 4] 2004         mul y,a  ; b*c 
                                   2005         ;;; do the partial sum 
      000A10 72 F9 02         [ 2] 2006         addw y,(UD2,sp)
      000A13 4F               [ 1] 2007         clr a 
      000A14 49               [ 1] 2008         rlc a
      000A15 6B 01            [ 1] 2009         ld (UD1,sp),a 
      000A17 17 02            [ 2] 2010         ldw (UD2,sp),y 
      000A19 E6 02            [ 1] 2011         ld a,(da,x)
      000A1B 90 97            [ 1] 2012         ld yl,a 
      000A1D E6 01            [ 1] 2013         ld a,(dd,x)
      000A1F 90 42            [ 4] 2014         mul y,a   ; a*d 
                                   2015         ;; do partial sum 
      000A21 72 F9 02         [ 2] 2016         addw y,(UD2,sp)
      000A24 4F               [ 1] 2017         clr a 
      000A25 19 01            [ 1] 2018         adc a,(UD1,sp)
      000A27 6B 01            [ 1] 2019         ld (UD1,sp),a  
      000A29 17 02            [ 2] 2020         ldw (UD2,sp),y 
      000A2B E6 02            [ 1] 2021         ld a,(da,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A2D 90 97            [ 1] 2022         ld yl,a 
      000A2F E6 00            [ 1] 2023         ld a,(dc,x)
      000A31 90 42            [ 4] 2024         mul y,a  ;  a*c highest weight product 
                                   2025         ;;; do partial sum 
      000A33 72 F9 01         [ 2] 2026         addw y,(UD1,sp)
      000A36 FF               [ 2] 2027         ldw (x),y  ; udh 
      000A37 16 03            [ 2] 2028         ldw y,(UD3,sp)
      000A39 EF 02            [ 2] 2029         ldw (2,x),y  ; udl  
      000A3B 5B 04            [ 2] 2030         addw sp,#4 ; drop local variable 
      000A3D 81               [ 4] 2031         ret  
                                   2032 
                                   2033 
                                   2034 ;       *       ( n n -- n )
                                   2035 ;       Signed multiply. Return single product.
      000A3E 09 F4                 2036         .word      LINK
                           000A40  2037 LINK = . 
      000A40 01                    2038         .byte      1
      000A41 2A                    2039         .ascii     "*"
      000A42                       2040 STAR:
      000A42 CD 09 F8         [ 4] 2041 	CALL	UMSTA
      000A45 CC 05 8C         [ 2] 2042 	JP	DROP
                                   2043 
                                   2044 ;       M*      ( n n -- d )
                                   2045 ;       Signed multiply. Return double product.
      000A48 0A 40                 2046         .word      LINK
                           000A4A  2047 LINK = . 
      000A4A 02                    2048         .byte      2
      000A4B 4D 2A                 2049         .ascii     "M*"
      000A4D                       2050 MSTAR:      
      000A4D CD 07 B0         [ 4] 2051         CALL	DDUP
      000A50 CD 06 1E         [ 4] 2052         CALL	XORR
      000A53 CD 05 CF         [ 4] 2053         CALL	ZLESS
      000A56 CD 05 5F         [ 4] 2054         CALL	TOR
      000A59 CD 08 58         [ 4] 2055         CALL	ABSS
      000A5C CD 05 A6         [ 4] 2056         CALL	SWAPP
      000A5F CD 08 58         [ 4] 2057         CALL	ABSS
      000A62 CD 09 F8         [ 4] 2058         CALL	UMSTA
      000A65 CD 05 40         [ 4] 2059         CALL	RFROM
      000A68 CD 04 A4         [ 4] 2060         CALL	QBRAN
      000A6B 0A 70                 2061         .word	MSTA1
      000A6D CD 08 02         [ 4] 2062         CALL	DNEGA
      000A70 81               [ 4] 2063 MSTA1:	RET
                                   2064 
                                   2065 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2066 ;       Multiply n1 and n2, then divide
                                   2067 ;       by n3. Return mod and quotient.
      000A71 0A 4A                 2068         .word      LINK
                           000A73  2069 LINK = . 
      000A73 05                    2070         .byte      5
      000A74 2A 2F 4D 4F 44        2071         .ascii     "*/MOD"
      000A79                       2072 SSMOD:
      000A79 CD 05 5F         [ 4] 2073         CALL     TOR
      000A7C CD 0A 4D         [ 4] 2074         CALL     MSTAR
      000A7F CD 05 40         [ 4] 2075         CALL     RFROM
      000A82 CC 09 7D         [ 2] 2076         JP     MSMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2077 
                                   2078 ;       */      ( n1 n2 n3 -- q )
                                   2079 ;       Multiply n1 by n2, then divide
                                   2080 ;       by n3. Return quotient only.
      000A85 0A 73                 2081         .word      LINK
                           000A87  2082 LINK = . 
      000A87 02                    2083         .byte      2
      000A88 2A 2F                 2084         .ascii     "*/"
      000A8A                       2085 STASL:
      000A8A CD 0A 79         [ 4] 2086         CALL	SSMOD
      000A8D CD 05 A6         [ 4] 2087         CALL	SWAPP
      000A90 CC 05 8C         [ 2] 2088         JP	DROP
                                   2089 
                                   2090 ;; Miscellaneous
                                   2091 
                                   2092 ;       CELL+   ( a -- a )
                                   2093 ;       Add cell size in byte to address.
      000A93 0A 87                 2094         .word      LINK
                           000A95  2095 LINK = . 
      000A95 02                    2096         .byte       2
      000A96 32 2B                 2097         .ascii     "2+"
      000A98                       2098 CELLP:
      000A98 90 93            [ 1] 2099         LDW Y,X
      000A9A 90 FE            [ 2] 2100 	LDW Y,(Y)
      000A9C 72 A9 00 02      [ 2] 2101         ADDW Y,#CELLL 
      000AA0 FF               [ 2] 2102         LDW (X),Y
      000AA1 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;       CELL-   ( a -- a )
                                   2106 ;       Subtract 2 from address.
      000AA2 0A 95                 2107         .word      LINK
                           000AA4  2108 LINK = . 
      000AA4 02                    2109         .byte       2
      000AA5 32 2D                 2110         .ascii     "2-"
      000AA7                       2111 CELLM:
      000AA7 90 93            [ 1] 2112         LDW Y,X
      000AA9 90 FE            [ 2] 2113 	LDW Y,(Y)
      000AAB 72 A2 00 02      [ 2] 2114         SUBW Y,#CELLL
      000AAF FF               [ 2] 2115         LDW (X),Y
      000AB0 81               [ 4] 2116         RET
                                   2117 
                                   2118 ;       CELLS   ( n -- n )
                                   2119 ;       Multiply tos by 2.
      000AB1 0A A4                 2120         .word      LINK
                           000AB3  2121 LINK = . 
      000AB3 02                    2122         .byte       2
      000AB4 32 2A                 2123         .ascii     "2*"
      000AB6                       2124 CELLS:
      000AB6 90 93            [ 1] 2125         LDW Y,X
      000AB8 90 FE            [ 2] 2126 	LDW Y,(Y)
      000ABA 90 58            [ 2] 2127         SLAW Y
      000ABC FF               [ 2] 2128         LDW (X),Y
      000ABD 81               [ 4] 2129         RET
                                   2130 
                                   2131 ;       1+      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2132 ;       Add cell size in byte to address.
      000ABE 0A B3                 2133         .word      LINK
                           000AC0  2134 LINK = . 
      000AC0 02                    2135         .byte      2
      000AC1 31 2B                 2136         .ascii     "1+"
      000AC3                       2137 ONEP:
      000AC3 90 93            [ 1] 2138         LDW Y,X
      000AC5 90 FE            [ 2] 2139 	LDW Y,(Y)
      000AC7 90 5C            [ 1] 2140         INCW Y
      000AC9 FF               [ 2] 2141         LDW (X),Y
      000ACA 81               [ 4] 2142         RET
                                   2143 
                                   2144 ;       1-      ( a -- a )
                                   2145 ;       Subtract 2 from address.
      000ACB 0A C0                 2146         .word      LINK
                           000ACD  2147 LINK = . 
      000ACD 02                    2148         .byte      2
      000ACE 31 2D                 2149         .ascii     "1-"
      000AD0                       2150 ONEM:
      000AD0 90 93            [ 1] 2151         LDW Y,X
      000AD2 90 FE            [ 2] 2152 	LDW Y,(Y)
      000AD4 90 5A            [ 2] 2153         DECW Y
      000AD6 FF               [ 2] 2154         LDW (X),Y
      000AD7 81               [ 4] 2155         RET
                                   2156 
                                   2157 ;  shift left n times 
                                   2158 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000AD8 0A CD                 2159         .word LINK 
                           000ADA  2160         LINK=.
      000ADA 06                    2161         .byte 6 
      000ADB 4C 53 48 49 46 54     2162         .ascii "LSHIFT"
      000AE1                       2163 LSHIFT:
      000AE1 E6 01            [ 1] 2164         ld a,(1,x)
      000AE3 1C 00 02         [ 2] 2165         addw x,#CELLL 
      000AE6 90 93            [ 1] 2166         ldw y,x 
      000AE8 90 FE            [ 2] 2167         ldw y,(y)
      000AEA                       2168 LSHIFT1:
      000AEA 4D               [ 1] 2169         tnz a 
      000AEB 27 05            [ 1] 2170         jreq LSHIFT4 
      000AED 90 58            [ 2] 2171         sllw y 
      000AEF 4A               [ 1] 2172         dec a 
      000AF0 20 F8            [ 2] 2173         jra LSHIFT1 
      000AF2                       2174 LSHIFT4:
      000AF2 FF               [ 2] 2175         ldw (x),y 
      000AF3 81               [ 4] 2176         ret 
                                   2177 
                                   2178 ; shift right n times                 
                                   2179 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AF4 0A DA                 2180         .word LINK 
                           000AF6  2181         LINK=.
      000AF6 06                    2182         .byte 6
      000AF7 52 53 48 49 46 54     2183         .ascii "RSHIFT"
      000AFD                       2184 RSHIFT:
      000AFD E6 01            [ 1] 2185         ld a,(1,x)
      000AFF 1C 00 02         [ 2] 2186         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B02 90 93            [ 1] 2187         ldw y,x 
      000B04 90 FE            [ 2] 2188         ldw y,(y)
      000B06                       2189 RSHIFT1:
      000B06 4D               [ 1] 2190         tnz a 
      000B07 27 05            [ 1] 2191         jreq RSHIFT4 
      000B09 90 54            [ 2] 2192         srlw y 
      000B0B 4A               [ 1] 2193         dec a 
      000B0C 20 F8            [ 2] 2194         jra RSHIFT1 
      000B0E                       2195 RSHIFT4:
      000B0E FF               [ 2] 2196         ldw (x),y 
      000B0F 81               [ 4] 2197         ret 
                                   2198 
                                   2199 
                                   2200 ;       2/      ( n -- n )
                                   2201 ;       divide  tos by 2.
      000B10 0A F6                 2202         .word      LINK
                           000B12  2203 LINK = . 
      000B12 02                    2204         .byte      2
      000B13 32 2F                 2205         .ascii     "2/"
      000B15                       2206 TWOSL:
      000B15 90 93            [ 1] 2207         LDW Y,X
      000B17 90 FE            [ 2] 2208 	LDW Y,(Y)
      000B19 90 57            [ 2] 2209         SRAW Y
      000B1B FF               [ 2] 2210         LDW (X),Y
      000B1C 81               [ 4] 2211         RET
                                   2212 
                                   2213 ;       BL      ( -- 32 )
                                   2214 ;       Return 32,  blank character.
      000B1D 0B 12                 2215         .word      LINK
                           000B1F  2216 LINK = . 
      000B1F 02                    2217         .byte      2
      000B20 42 4C                 2218         .ascii     "BL"
      000B22                       2219 BLANK:
      000B22 1D 00 02         [ 2] 2220         SUBW X,#2
      000B25 90 AE 00 20      [ 2] 2221 	LDW Y,#32
      000B29 FF               [ 2] 2222         LDW (X),Y
      000B2A 81               [ 4] 2223         RET
                                   2224 
                                   2225 ;         0     ( -- 0)
                                   2226 ;         Return 0.
      000B2B 0B 1F                 2227         .word      LINK
                           000B2D  2228 LINK = . 
      000B2D 01                    2229         .byte       1
      000B2E 30                    2230         .ascii     "0"
      000B2F                       2231 ZERO:
      000B2F 1D 00 02         [ 2] 2232         SUBW X,#2
      000B32 90 5F            [ 1] 2233 	CLRW Y
      000B34 FF               [ 2] 2234         LDW (X),Y
      000B35 81               [ 4] 2235         RET
                                   2236 
                                   2237 ;         1     ( -- 1)
                                   2238 ;         Return 1.
      000B36 0B 2D                 2239         .word      LINK
                           000B38  2240 LINK = . 
      000B38 01                    2241         .byte       1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B39 31                    2242         .ascii     "1"
      000B3A                       2243 ONE:
      000B3A 1D 00 02         [ 2] 2244         SUBW X,#2
      000B3D 90 AE 00 01      [ 2] 2245 	LDW Y,#1
      000B41 FF               [ 2] 2246         LDW (X),Y
      000B42 81               [ 4] 2247         RET
                                   2248 
                                   2249 ;         -1    ( -- -1)
                                   2250 ;         Return 32,  blank character.
      000B43 0B 38                 2251         .word      LINK
                           000B45  2252 LINK = . 
      000B45 02                    2253         .byte       2
      000B46 2D 31                 2254         .ascii     "-1"
      000B48                       2255 MONE:
      000B48 1D 00 02         [ 2] 2256         SUBW X,#2
      000B4B 90 AE FF FF      [ 2] 2257 	LDW Y,#0xFFFF
      000B4F FF               [ 2] 2258         LDW (X),Y
      000B50 81               [ 4] 2259         RET
                                   2260 
                                   2261 ;       >CHAR   ( c -- c )
                                   2262 ;       Filter non-printing characters.
      000B51 0B 45                 2263         .word      LINK
                           000B53  2264 LINK = . 
      000B53 05                    2265         .byte      5
      000B54 3E 43 48 41 52        2266         .ascii     ">CHAR"
      000B59                       2267 TCHAR:
      000B59 E6 01            [ 1] 2268         ld a,(1,x)
      000B5B A1 20            [ 1] 2269         cp a,#32  
      000B5D 2B 05            [ 1] 2270         jrmi 1$ 
      000B5F A1 7F            [ 1] 2271         cp a,#127 
      000B61 2A 01            [ 1] 2272         jrpl 1$ 
      000B63 81               [ 4] 2273         ret 
      000B64 A6 5F            [ 1] 2274 1$:     ld a,#'_ 
      000B66 E7 01            [ 1] 2275         ld (1,x),a 
      000B68 81               [ 4] 2276         ret 
                                   2277 
                                   2278 ;       DEPTH   ( -- n )
                                   2279 ;       Return  depth of  data stack.
      000B69 0B 53                 2280         .word      LINK
                           000B6B  2281 LINK = . 
      000B6B 05                    2282         .byte      5
      000B6C 44 45 50 54 48        2283         .ascii     "DEPTH"
      000B71                       2284 DEPTH: 
      000B71 90 BE 2C         [ 2] 2285         LDW Y,SP0    ;save data stack ptr
      000B74 BF 24            [ 2] 2286 	LDW XTEMP,X
      000B76 72 B2 00 24      [ 2] 2287         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B7A 90 57            [ 2] 2288         SRAW Y    ;Y = #stack items
      000B7C 1D 00 02         [ 2] 2289 	SUBW X,#2
      000B7F FF               [ 2] 2290         LDW (X),Y     ; if neg, underflow
      000B80 81               [ 4] 2291         RET
                                   2292 
                                   2293 ;       PICK    ( ... +n -- ... w )
                                   2294 ;       Copy  nth stack item to tos.
      000B81 0B 6B                 2295         .word      LINK
                           000B83  2296 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B83 04                    2297         .byte      4
      000B84 50 49 43 4B           2298         .ascii     "PICK"
      000B88                       2299 PICK:
      000B88 90 93            [ 1] 2300         LDW Y,X   ;D = n1
      000B8A 90 FE            [ 2] 2301         LDW Y,(Y)
                                   2302 ; modified for standard compliance          
                                   2303 ; 0 PICK must be equivalent to DUP 
      000B8C 90 5C            [ 1] 2304         INCW Y 
      000B8E 90 58            [ 2] 2305         SLAW Y
      000B90 BF 24            [ 2] 2306         LDW XTEMP,X
      000B92 72 B9 00 24      [ 2] 2307         ADDW Y,XTEMP
      000B96 90 FE            [ 2] 2308         LDW Y,(Y)
      000B98 FF               [ 2] 2309         LDW (X),Y
      000B99 81               [ 4] 2310         RET
                                   2311 
                                   2312 ;; Memory access
                                   2313 
                                   2314 ;       +!      ( n a -- )
                                   2315 ;       Add n to  contents at address a.
      000B9A 0B 83                 2316         .word      LINK
                           000B9C  2317 LINK = . 
      000B9C 02                    2318         .byte      2
      000B9D 2B 21                 2319         .ascii     "+!"
      000B9F                       2320 PSTOR:
      000B9F 90 93            [ 1] 2321         ldw y,x 
      000BA1 90 FE            [ 2] 2322         ldw y,(y)
      000BA3 90 BF 26         [ 2] 2323         ldw YTEMP,y  ; address
      000BA6 90 FE            [ 2] 2324         ldw y,(y)  
      000BA8 90 89            [ 2] 2325         pushw y  ; value at address 
      000BAA 90 93            [ 1] 2326         ldw y,x 
      000BAC 90 EE 02         [ 2] 2327         ldw y,(2,y) ; n 
      000BAF 72 F9 01         [ 2] 2328         addw y,(1,sp) ; n+value
      000BB2 91 CF 26         [ 5] 2329         ldw [YTEMP],y ;  a!
      000BB5 90 85            [ 2] 2330         popw y    ;drop local var
      000BB7 1C 00 04         [ 2] 2331         addw x,#4 ; DDROP 
      000BBA 81               [ 4] 2332         ret 
                                   2333 
                                   2334 ;       2!      ( d a -- )
                                   2335 ;       Store  double integer to address a.
      000BBB 0B 9C                 2336         .word      LINK
                           000BBD  2337 LINK = . 
      000BBD 02                    2338         .byte      2
      000BBE 32 21                 2339         .ascii     "2!"
      000BC0                       2340 DSTOR:
      000BC0 90 93            [ 1] 2341         ldw y,x 
      000BC2 90 FE            [ 2] 2342         ldw y,(y)
      000BC4 90 BF 26         [ 2] 2343         ldw YTEMP,y ; address 
      000BC7 1C 00 02         [ 2] 2344         addw x,#CELLL ; drop a 
      000BCA 90 93            [ 1] 2345         ldw y,x 
      000BCC 90 FE            [ 2] 2346         ldw y,(y) ; hi word 
      000BCE 89               [ 2] 2347         pushw x 
      000BCF EE 02            [ 2] 2348         ldw x,(2,x) ; lo word 
      000BD1 91 CF 26         [ 5] 2349         ldw [YTEMP],y
      000BD4 90 93            [ 1] 2350         ldw y,x 
      000BD6 AE 00 02         [ 2] 2351         ldw x,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BD9 92 DF 26         [ 5] 2352         ldw ([YTEMP],x),y 
      000BDC 85               [ 2] 2353         popw x 
      000BDD 1C 00 04         [ 2] 2354         addw x,#4 ; DDROP 
      000BE0 81               [ 4] 2355         ret 
                                   2356 
                                   2357 ;       2@      ( a -- d )
                                   2358 ;       Fetch double integer from address a.
      000BE1 0B BD                 2359         .word      LINK
                           000BE3  2360 LINK = . 
      000BE3 02                    2361         .byte      2
      000BE4 32 40                 2362         .ascii     "2@"
      000BE6                       2363 DAT:
      000BE6 90 93            [ 1] 2364         ldw y,x 
      000BE8 90 FE            [ 2] 2365         ldw y,(y) ;address 
      000BEA 90 BF 26         [ 2] 2366         ldw YTEMP,y 
      000BED 1D 00 02         [ 2] 2367         subw x,#CELLL ; space for udh 
      000BF0 91 CE 26         [ 5] 2368         ldw y,[YTEMP] ; udh 
      000BF3 FF               [ 2] 2369         ldw (x),y 
      000BF4 90 AE 00 02      [ 2] 2370         ldw y,#2
      000BF8 91 DE 26         [ 5] 2371         ldw y,([YTEMP],y) ; udl 
      000BFB EF 02            [ 2] 2372         ldw (2,x),y
      000BFD 81               [ 4] 2373         ret 
                                   2374 
                                   2375 ;       COUNT   ( b -- b +n )
                                   2376 ;       Return count byte of a string
                                   2377 ;       and add 1 to byte address.
      000BFE 0B E3                 2378         .word      LINK
                           000C00  2379 LINK = . 
      000C00 05                    2380         .byte      5
      000C01 43 4F 55 4E 54        2381         .ascii     "COUNT"
      000C06                       2382 COUNT:
      000C06 90 93            [ 1] 2383         ldw y,x 
      000C08 90 FE            [ 2] 2384         ldw y,(y) ; address 
      000C0A 90 F6            [ 1] 2385         ld a,(y)  ; count 
      000C0C 90 5C            [ 1] 2386         incw y 
      000C0E FF               [ 2] 2387         ldw (x),y 
      000C0F 1D 00 02         [ 2] 2388         subw x,#CELLL 
      000C12 E7 01            [ 1] 2389         ld (1,x),a 
      000C14 7F               [ 1] 2390         clr (x)
      000C15 81               [ 4] 2391         ret 
                                   2392 
                                   2393 ;       HERE    ( -- a )
                                   2394 ;       Return  top of  variables
      000C16 0C 00                 2395         .word      LINK
                           000C18  2396 LINK = . 
      000C18 04                    2397         .byte      4
      000C19 48 45 52 45           2398         .ascii     "HERE"
      000C1D                       2399 HERE:
      000C1D 90 AE 00 18      [ 2] 2400       	ldw y,#UVP 
      000C21 90 FE            [ 2] 2401         ldw y,(y)
      000C23 1D 00 02         [ 2] 2402         subw x,#CELLL 
      000C26 FF               [ 2] 2403         ldw (x),y 
      000C27 81               [ 4] 2404         ret 
                                   2405 
                                   2406 ;       PAD     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2407 ;       Return address of text buffer
                                   2408 ;       above  code dictionary.
      000C28 0C 18                 2409         .word      LINK
                           000C2A  2410 LINK = . 
      000C2A 03                    2411         .byte      3
      000C2B 50 41 44              2412         .ascii     "PAD"
      000C2E                       2413 PAD:
      000C2E CD 0C 1D         [ 4] 2414         CALL     HERE
      000C31 CD 04 71         [ 4] 2415         CALL     DOLIT
      000C34 00 50                 2416         .word      80
      000C36 CC 07 C5         [ 2] 2417         JP     PLUS
                                   2418 
                                   2419 ;       TIB     ( -- a )
                                   2420 ;       Return address of terminal input buffer.
      000C39 0C 2A                 2421         .word      LINK
                           000C3B  2422 LINK = . 
      000C3B 03                    2423         .byte      3
      000C3C 54 49 42              2424         .ascii     "TIB"
      000C3F                       2425 TIB:
      000C3F CD 06 94         [ 4] 2426         CALL     NTIB
      000C42 CD 0A 98         [ 4] 2427         CALL     CELLP
      000C45 CC 04 EF         [ 2] 2428         JP     AT
                                   2429 
                                   2430 ;       @EXECUTE        ( a -- )
                                   2431 ;       Execute vector stored in address a.
      000C48 0C 3B                 2432         .word      LINK
                           000C4A  2433 LINK = . 
      000C4A 08                    2434         .byte      8
      000C4B 40 45 58 45 43 55 54  2435         .ascii     "@EXECUTE"
             45
      000C53                       2436 ATEXE:
      000C53 CD 04 EF         [ 4] 2437         CALL     AT
      000C56 CD 07 53         [ 4] 2438         CALL     QDUP    ;?address or zero
      000C59 CD 04 A4         [ 4] 2439         CALL     QBRAN
      000C5C 0C 61                 2440         .word      EXE1
      000C5E CD 04 CB         [ 4] 2441         CALL     EXECU   ;execute if non-zero
      000C61 81               [ 4] 2442 EXE1:   RET     ;do nothing if zero
                                   2443 
                                   2444 ;       CMOVE   ( b1 b2 u -- )
                                   2445 ;       Copy u bytes from b1 to b2.
      000C62 0C 4A                 2446         .word      LINK
                           000C64  2447 LINK = . 
      000C64 05                    2448         .byte      5
      000C65 43 4D 4F 56 45        2449         .ascii     "CMOVE"
      000C6A                       2450 CMOVE:
      000C6A CD 05 5F         [ 4] 2451         CALL	TOR
      000C6D CD 04 BB         [ 4] 2452         CALL	BRAN
      000C70 0C 8A                 2453         .word	CMOV2
      000C72 CD 05 5F         [ 4] 2454 CMOV1:	CALL	TOR
      000C75 CD 05 96         [ 4] 2455         CALL	DUPP
      000C78 CD 05 0D         [ 4] 2456         CALL	CAT
      000C7B CD 05 53         [ 4] 2457         CALL	RAT
      000C7E CD 04 FC         [ 4] 2458         CALL	CSTOR
      000C81 CD 0A C3         [ 4] 2459         CALL	ONEP
      000C84 CD 05 40         [ 4] 2460         CALL	RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C87 CD 0A C3         [ 4] 2461         CALL	ONEP
      000C8A CD 04 85         [ 4] 2462 CMOV2:	CALL	DONXT
      000C8D 0C 72                 2463         .word	CMOV1
      000C8F CC 07 A5         [ 2] 2464         JP	DDROP
                                   2465 
                                   2466 ;       FILL    ( b u c -- )
                                   2467 ;       Fill u bytes of character c
                                   2468 ;       to area beginning at b.
      000C92 0C 64                 2469         .word       LINK
                           000C94  2470 LINK = . 
      000C94 04                    2471         .byte       4
      000C95 46 49 4C 4C           2472         .ascii     "FILL"
      000C99                       2473 FILL:
      000C99 90 93            [ 1] 2474         ldw y,x 
      000C9B 90 E6 01         [ 1] 2475         ld a,(1,y) ; c 
      000C9E 1C 00 02         [ 2] 2476         addw x,#CELLL ; drop c 
      000CA1 90 93            [ 1] 2477         ldw y,x 
      000CA3 90 FE            [ 2] 2478         ldw y,(y) ; count
      000CA5 90 89            [ 2] 2479         pushw y 
      000CA7 1C 00 02         [ 2] 2480         addw x,#CELLL ; drop u 
      000CAA 90 93            [ 1] 2481         ldw y,x 
      000CAC 1C 00 02         [ 2] 2482         addw x,#CELLL ; drop b 
      000CAF 90 FE            [ 2] 2483         ldw y,(y) ; address
      000CB1 90 BF 26         [ 2] 2484         ldw YTEMP,y
      000CB4 90 85            [ 2] 2485         popw y ; count 
      000CB6                       2486 FILL1:  
      000CB6 92 C7 26         [ 4] 2487         ld [YTEMP],a 
      000CB9 3C 27            [ 1] 2488         inc YTEMP+1
      000CBB 24 02            [ 1] 2489         jrnc FILL2 
      000CBD 3C 26            [ 1] 2490         inc YTEMP
      000CBF                       2491 FILL2: 
      000CBF 90 5A            [ 2] 2492         decw y ; count 
      000CC1 26 F3            [ 1] 2493         jrne FILL1  
      000CC3 81               [ 4] 2494         ret 
                                   2495 
                                   2496 ;       ERASE   ( b u -- )
                                   2497 ;       Erase u bytes beginning at b.
      000CC4 0C 94                 2498         .word      LINK
                           000CC6  2499 LINK = . 
      000CC6 05                    2500         .byte      5
      000CC7 45 52 41 53 45        2501         .ascii     "ERASE"
      000CCC                       2502 ERASE:
      000CCC 90 5F            [ 1] 2503         clrw y 
      000CCE 1D 00 02         [ 2] 2504         subw x,#CELLL 
      000CD1 FF               [ 2] 2505         ldw (x),y 
      000CD2 CC 0C 99         [ 2] 2506         jp FILL 
                                   2507 
                                   2508 
                                   2509 ;       PACK0   ( b u a -- a )
                                   2510 ;       Build a counted string with
                                   2511 ;       u characters from b. Null fill.
      000CD5 0C C6                 2512         .word      LINK
                           000CD7  2513 LINK = . 
      000CD7 05                    2514         .byte      5
      000CD8 50 41 43 4B 30        2515         .ascii     "PACK0"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CDD                       2516 PACKS:
      000CDD CD 05 96         [ 4] 2517         CALL     DUPP
      000CE0 CD 05 5F         [ 4] 2518         CALL     TOR     ;strings only on cell boundary
      000CE3 CD 07 B0         [ 4] 2519         CALL     DDUP
      000CE6 CD 04 FC         [ 4] 2520         CALL     CSTOR
      000CE9 CD 0A C3         [ 4] 2521         CALL     ONEP ;save count
      000CEC CD 05 A6         [ 4] 2522         CALL     SWAPP
      000CEF CD 0C 6A         [ 4] 2523         CALL     CMOVE
      000CF2 CD 05 40         [ 4] 2524         CALL     RFROM
      000CF5 81               [ 4] 2525         RET
                                   2526 
                                   2527 ;; Numeric output, single precision
                                   2528 
                                   2529 ;       DIGIT   ( u -- c )
                                   2530 ;       Convert digit u to a character.
      000CF6 0C D7                 2531         .word      LINK
                           000CF8  2532 LINK = . 
      000CF8 05                    2533         .byte      5
      000CF9 44 49 47 49 54        2534         .ascii     "DIGIT"
      000CFE                       2535 DIGIT:
      000CFE CD 04 71         [ 4] 2536         CALL	DOLIT
      000D01 00 09                 2537         .word	9
      000D03 CD 05 C0         [ 4] 2538         CALL	OVER
      000D06 CD 08 A3         [ 4] 2539         CALL	LESS
      000D09 CD 04 71         [ 4] 2540         CALL	DOLIT
      000D0C 00 07                 2541         .word	7
      000D0E CD 05 F5         [ 4] 2542         CALL	ANDD
      000D11 CD 07 C5         [ 4] 2543         CALL	PLUS
      000D14 CD 04 71         [ 4] 2544         CALL	DOLIT
      000D17 00 30                 2545         .word	48	;'0'
      000D19 CC 07 C5         [ 2] 2546         JP	PLUS
                                   2547 
                                   2548 ;       EXTRACT ( n base -- n c )
                                   2549 ;       Extract least significant digit from n.
      000D1C 0C F8                 2550         .word      LINK
                           000D1E  2551 LINK = . 
      000D1E 07                    2552         .byte      7
      000D1F 45 58 54 52 41 43 54  2553         .ascii     "EXTRACT"
      000D26                       2554 EXTRC:
      000D26 CD 0B 2F         [ 4] 2555         CALL     ZERO
      000D29 CD 05 A6         [ 4] 2556         CALL     SWAPP
      000D2C CD 09 39         [ 4] 2557         CALL     UMMOD
      000D2F CD 05 A6         [ 4] 2558         CALL     SWAPP
      000D32 CC 0C FE         [ 2] 2559         JP     DIGIT
                                   2560 
                                   2561 ;       <#      ( -- )
                                   2562 ;       Initiate  numeric output process.
      000D35 0D 1E                 2563         .word      LINK
                           000D37  2564 LINK = . 
      000D37 02                    2565         .byte      2
      000D38 3C 23                 2566         .ascii     "<#"
      000D3A                       2567 BDIGS:
      000D3A CD 0C 2E         [ 4] 2568         CALL     PAD
      000D3D CD 06 D6         [ 4] 2569         CALL     HLD
      000D40 CC 04 D8         [ 2] 2570         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2571 
                                   2572 ;       HOLD    ( c -- )
                                   2573 ;       Insert a character into output string.
      000D43 0D 37                 2574         .word      LINK
                           000D45  2575 LINK = . 
      000D45 04                    2576         .byte      4
      000D46 48 4F 4C 44           2577         .ascii     "HOLD"
      000D4A                       2578 HOLD:
      000D4A CD 06 D6         [ 4] 2579         CALL     HLD
      000D4D CD 04 EF         [ 4] 2580         CALL     AT
      000D50 CD 0A D0         [ 4] 2581         CALL     ONEM
      000D53 CD 05 96         [ 4] 2582         CALL     DUPP
      000D56 CD 06 D6         [ 4] 2583         CALL     HLD
      000D59 CD 04 D8         [ 4] 2584         CALL     STORE
      000D5C CC 04 FC         [ 2] 2585         JP     CSTOR
                                   2586 
                                   2587 ;       #       ( u -- u )
                                   2588 ;       Extract one digit from u and
                                   2589 ;       append digit to output string.
      000D5F 0D 45                 2590         .word      LINK
                           000D61  2591 LINK = . 
      000D61 01                    2592         .byte      1
      000D62 23                    2593         .ascii     "#"
      000D63                       2594 DIG:
      000D63 CD 06 66         [ 4] 2595         CALL     BASE
      000D66 CD 04 EF         [ 4] 2596         CALL     AT
      000D69 CD 0D 26         [ 4] 2597         CALL     EXTRC
      000D6C CC 0D 4A         [ 2] 2598         JP     HOLD
                                   2599 
                                   2600 ;       #S      ( u -- 0 )
                                   2601 ;       Convert u until all digits
                                   2602 ;       are added to output string.
      000D6F 0D 61                 2603         .word      LINK
                           000D71  2604 LINK = . 
      000D71 02                    2605         .byte      2
      000D72 23 53                 2606         .ascii     "#S"
      000D74                       2607 DIGS:
      000D74 CD 0D 63         [ 4] 2608 DIGS1:  CALL     DIG
      000D77 CD 05 96         [ 4] 2609         CALL     DUPP
      000D7A CD 04 A4         [ 4] 2610         CALL     QBRAN
      000D7D 0D 81                 2611         .word      DIGS2
      000D7F 20 F3            [ 2] 2612         JRA     DIGS1
      000D81 81               [ 4] 2613 DIGS2:  RET
                                   2614 
                                   2615 ;       SIGN    ( n -- )
                                   2616 ;       Add a minus sign to
                                   2617 ;       numeric output string.
      000D82 0D 71                 2618         .word      LINK
                           000D84  2619 LINK = . 
      000D84 04                    2620         .byte      4
      000D85 53 49 47 4E           2621         .ascii     "SIGN"
      000D89                       2622 SIGN:
      000D89 CD 05 CF         [ 4] 2623         CALL     ZLESS
      000D8C CD 04 A4         [ 4] 2624         CALL     QBRAN
      000D8F 0D 99                 2625         .word      SIGN1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D91 CD 04 71         [ 4] 2626         CALL     DOLIT
      000D94 00 2D                 2627         .word      45	;"-"
      000D96 CC 0D 4A         [ 2] 2628         JP     HOLD
      000D99 81               [ 4] 2629 SIGN1:  RET
                                   2630 
                                   2631 ;       #>      ( w -- b u )
                                   2632 ;       Prepare output string.
      000D9A 0D 84                 2633         .word      LINK
                           000D9C  2634 LINK = . 
      000D9C 02                    2635         .byte      2
      000D9D 23 3E                 2636         .ascii     "#>"
      000D9F                       2637 EDIGS:
      000D9F CD 05 8C         [ 4] 2638         CALL     DROP
      000DA2 CD 06 D6         [ 4] 2639         CALL     HLD
      000DA5 CD 04 EF         [ 4] 2640         CALL     AT
      000DA8 CD 0C 2E         [ 4] 2641         CALL     PAD
      000DAB CD 05 C0         [ 4] 2642         CALL     OVER
      000DAE CC 08 3E         [ 2] 2643         JP     SUBB
                                   2644 
                                   2645 ;       str     ( w -- b u )
                                   2646 ;       Convert a signed integer
                                   2647 ;       to a numeric string.
      000DB1 0D 9C                 2648         .word      LINK
                           000DB3  2649 LINK = . 
      000DB3 03                    2650         .byte      3
      000DB4 53 54 52              2651         .ascii     "STR"
      000DB7                       2652 STR:
      000DB7 CD 05 96         [ 4] 2653         CALL     DUPP
      000DBA CD 05 5F         [ 4] 2654         CALL     TOR
      000DBD CD 08 58         [ 4] 2655         CALL     ABSS
      000DC0 CD 0D 3A         [ 4] 2656         CALL     BDIGS
      000DC3 CD 0D 74         [ 4] 2657         CALL     DIGS
      000DC6 CD 05 40         [ 4] 2658         CALL     RFROM
      000DC9 CD 0D 89         [ 4] 2659         CALL     SIGN
      000DCC CC 0D 9F         [ 2] 2660         JP     EDIGS
                                   2661 
                                   2662 ;       HEX     ( -- )
                                   2663 ;       Use radix 16 as base for
                                   2664 ;       numeric conversions.
      000DCF 0D B3                 2665         .word      LINK
                           000DD1  2666 LINK = . 
      000DD1 03                    2667         .byte      3
      000DD2 48 45 58              2668         .ascii     "HEX"
      000DD5                       2669 HEX:
      000DD5 CD 04 71         [ 4] 2670         CALL     DOLIT
      000DD8 00 10                 2671         .word      16
      000DDA CD 06 66         [ 4] 2672         CALL     BASE
      000DDD CC 04 D8         [ 2] 2673         JP     STORE
                                   2674 
                                   2675 ;       DECIMAL ( -- )
                                   2676 ;       Use radix 10 as base
                                   2677 ;       for numeric conversions.
      000DE0 0D D1                 2678         .word      LINK
                           000DE2  2679 LINK = . 
      000DE2 07                    2680         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DE3 44 45 43 49 4D 41 4C  2681         .ascii     "DECIMAL"
      000DEA                       2682 DECIM:
      000DEA CD 04 71         [ 4] 2683         CALL     DOLIT
      000DED 00 0A                 2684         .word      10
      000DEF CD 06 66         [ 4] 2685         CALL     BASE
      000DF2 CC 04 D8         [ 2] 2686         JP     STORE
                                   2687 
                                   2688 ;; Numeric input, single precision
                                   2689 
                                   2690 ;       DIGIT?  ( c base -- u t )
                                   2691 ;       Convert a character to its numeric
                                   2692 ;       value. A flag indicates success.
      000DF5 0D E2                 2693         .word      LINK
                           000DF7  2694 LINK = . 
      000DF7 06                    2695         .byte       6
      000DF8 44 49 47 49 54 3F     2696         .ascii     "DIGIT?"
      000DFE                       2697 DIGTQ:
      000DFE CD 05 5F         [ 4] 2698         CALL     TOR
      000E01 CD 04 71         [ 4] 2699         CALL     DOLIT
      000E04 00 30                 2700         .word     48	; "0"
      000E06 CD 08 3E         [ 4] 2701         CALL     SUBB
      000E09 CD 04 71         [ 4] 2702         CALL     DOLIT
      000E0C 00 09                 2703         .word      9
      000E0E CD 05 C0         [ 4] 2704         CALL     OVER
      000E11 CD 08 A3         [ 4] 2705         CALL     LESS
      000E14 CD 04 A4         [ 4] 2706         CALL     QBRAN
      000E17 0E 2F                 2707         .word      DGTQ1
      000E19 CD 04 71         [ 4] 2708         CALL     DOLIT
      000E1C 00 07                 2709         .word      7
      000E1E CD 08 3E         [ 4] 2710         CALL     SUBB
      000E21 CD 05 96         [ 4] 2711         CALL     DUPP
      000E24 CD 04 71         [ 4] 2712         CALL     DOLIT
      000E27 00 0A                 2713         .word      10
      000E29 CD 08 A3         [ 4] 2714         CALL     LESS
      000E2C CD 06 09         [ 4] 2715         CALL     ORR
      000E2F CD 05 96         [ 4] 2716 DGTQ1:  CALL     DUPP
      000E32 CD 05 40         [ 4] 2717         CALL     RFROM
      000E35 CC 08 85         [ 2] 2718         JP     ULESS
                                   2719 
                           000001  2720 .if  WANT_DOUBLE
                           000000  2721 .else 
                                   2722 ;       NUMBER? ( a -- n T | a F )
                                   2723 ;       Convert a number string to
                                   2724 ;       integer. Push a flag on tos.
                                   2725         .word      LINK
                                   2726 LINK = . 
                                   2727         .byte      7
                                   2728         .ascii     "NUMBER?"
                                   2729 NUMBQ:
                                   2730         CALL     BASE
                                   2731         CALL     AT
                                   2732         CALL     TOR
                                   2733         CALL     ZERO
                                   2734         CALL     OVER
                                   2735         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2736         CALL     OVER
                                   2737         CALL     CAT
                                   2738         CALL     DOLIT
                                   2739         .word     36	; "0x"
                                   2740         CALL     EQUAL
                                   2741         CALL     QBRAN
                                   2742         .word      NUMQ1
                                   2743         CALL     HEX
                                   2744         CALL     SWAPP
                                   2745         CALL     ONEP
                                   2746         CALL     SWAPP
                                   2747         CALL     ONEM
                                   2748 NUMQ1:  CALL     OVER
                                   2749         CALL     CAT
                                   2750         CALL     DOLIT
                                   2751         .word     45	; "-"
                                   2752         CALL     EQUAL
                                   2753         CALL     TOR
                                   2754         CALL     SWAPP
                                   2755         CALL     RAT
                                   2756         CALL     SUBB
                                   2757         CALL     SWAPP
                                   2758         CALL     RAT
                                   2759         CALL     PLUS
                                   2760         CALL     QDUP
                                   2761         CALL     QBRAN
                                   2762         .word      NUMQ6
                                   2763         CALL     ONEM
                                   2764         CALL     TOR
                                   2765 NUMQ2:  CALL     DUPP
                                   2766         CALL     TOR
                                   2767         CALL     CAT
                                   2768         CALL     BASE
                                   2769         CALL     AT
                                   2770         CALL     DIGTQ
                                   2771         CALL     QBRAN
                                   2772         .word      NUMQ4
                                   2773         CALL     SWAPP
                                   2774         CALL     BASE
                                   2775         CALL     AT
                                   2776         CALL     STAR
                                   2777         CALL     PLUS
                                   2778         CALL     RFROM
                                   2779         CALL     ONEP
                                   2780         CALL     DONXT
                                   2781         .word      NUMQ2
                                   2782         CALL     RAT
                                   2783         CALL     SWAPP
                                   2784         CALL     DROP
                                   2785         CALL     QBRAN
                                   2786         .word      NUMQ3
                                   2787         CALL     NEGAT
                                   2788 NUMQ3:  CALL     SWAPP
                                   2789         JRA     NUMQ5
                                   2790 NUMQ4:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2791         CALL     RFROM
                                   2792         CALL     DDROP
                                   2793         CALL     DDROP
                                   2794         CALL     ZERO
                                   2795 NUMQ5:  CALL     DUPP
                                   2796 NUMQ6:  CALL     RFROM
                                   2797         CALL     DDROP
                                   2798         CALL     RFROM
                                   2799         CALL     BASE
                                   2800         JP     STORE
                                   2801 .endif ; WANT_DOUBLE  
                                   2802 
                                   2803 ;; Basic I/O
                                   2804 
                                   2805 ;       KEY     ( -- c )
                                   2806 ;       Wait for and return an
                                   2807 ;       input character.
      000E38 0D F7                 2808         .word      LINK
                           000E3A  2809 LINK = . 
      000E3A 03                    2810         .byte      3
      000E3B 4B 45 59              2811         .ascii     "KEY"
      000E3E                       2812 KEY:
      000E3E 72 0B 52 30 FB   [ 2] 2813         btjf UART_SR,#UART_SR_RXNE,. 
      000E43 C6 52 31         [ 1] 2814         ld a,UART_DR 
      000E46 1D 00 02         [ 2] 2815         subw x,#CELLL 
      000E49 E7 01            [ 1] 2816         ld (1,x),a 
      000E4B 7F               [ 1] 2817         clr (x)
      000E4C 81               [ 4] 2818         ret 
                                   2819 
                                   2820 ;       NUF?    ( -- t )
                                   2821 ;       Return false if no input,
                                   2822 ;       else pause and if CR return true.
      000E4D 0E 3A                 2823         .word      LINK
                           000E4F  2824 LINK = . 
      000E4F 04                    2825         .byte      4
      000E50 4E 55 46 3F           2826         .ascii     "NUF?"
      000E54                       2827 NUFQ:
      000E54 CD 04 18         [ 4] 2828         CALL     QKEY
      000E57 CD 05 96         [ 4] 2829         CALL     DUPP
      000E5A CD 04 A4         [ 4] 2830         CALL     QBRAN
      000E5D 0E 6D                 2831         .word    NUFQ1
      000E5F CD 07 A5         [ 4] 2832         CALL     DDROP
      000E62 CD 0E 3E         [ 4] 2833         CALL     KEY
      000E65 CD 04 71         [ 4] 2834         CALL     DOLIT
      000E68 00 0D                 2835         .word      CRR
      000E6A CC 08 66         [ 2] 2836         JP     EQUAL
      000E6D 81               [ 4] 2837 NUFQ1:  RET
                                   2838 
                                   2839 ;       SPACE   ( -- )
                                   2840 ;       Send  blank character to
                                   2841 ;       output device.
      000E6E 0E 4F                 2842         .word      LINK
                           000E70  2843 LINK = . 
      000E70 05                    2844         .byte      5
      000E71 53 50 41 43 45        2845         .ascii     "SPACE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000E76                       2846 SPACE:
      000E76 CD 0B 22         [ 4] 2847         CALL     BLANK
      000E79 CC 04 36         [ 2] 2848         JP     EMIT
                                   2849 
                                   2850 ;       SPACES  ( +n -- )
                                   2851 ;       Send n spaces to output device.
      000E7C 0E 70                 2852         .word      LINK
                           000E7E  2853 LINK = . 
      000E7E 06                    2854         .byte      6
      000E7F 53 50 41 43 45 53     2855         .ascii     "SPACES"
      000E85                       2856 SPACS:
      000E85 CD 0B 2F         [ 4] 2857         CALL     ZERO
      000E88 CD 08 E1         [ 4] 2858         CALL     MAX
      000E8B CD 05 5F         [ 4] 2859         CALL     TOR
      000E8E 20 03            [ 2] 2860         JRA      CHAR2
      000E90 CD 0E 76         [ 4] 2861 CHAR1:  CALL     SPACE
      000E93 CD 04 85         [ 4] 2862 CHAR2:  CALL     DONXT
      000E96 0E 90                 2863         .word    CHAR1
      000E98 81               [ 4] 2864         RET
                                   2865 
                                   2866 ;       TYPE    ( b u -- )
                                   2867 ;       Output u characters from b.
      000E99 0E 7E                 2868         .word      LINK
                           000E9B  2869 LINK = . 
      000E9B 04                    2870         .byte      4
      000E9C 54 59 50 45           2871         .ascii     "TYPE"
      000EA0                       2872 TYPES:
      000EA0 CD 05 5F         [ 4] 2873         CALL     TOR
      000EA3 20 0C            [ 2] 2874         JRA     TYPE2
      000EA5 CD 05 96         [ 4] 2875 TYPE1:  CALL     DUPP
      000EA8 CD 05 0D         [ 4] 2876         CALL     CAT
      000EAB CD 04 36         [ 4] 2877         CALL     EMIT
      000EAE CD 0A C3         [ 4] 2878         CALL     ONEP
      000EB1 CD 04 85         [ 4] 2879 TYPE2:  CALL     DONXT
      000EB4 0E A5                 2880         .word      TYPE1
      000EB6 CC 05 8C         [ 2] 2881         JP     DROP
                                   2882 
                                   2883 ;       CR      ( -- )
                                   2884 ;       Output a carriage return
                                   2885 ;       and a line feed.
      000EB9 0E 9B                 2886         .word      LINK
                           000EBB  2887 LINK = . 
      000EBB 02                    2888         .byte      2
      000EBC 43 52                 2889         .ascii     "CR"
      000EBE                       2890 CR:
      000EBE CD 04 71         [ 4] 2891         CALL     DOLIT
      000EC1 00 0D                 2892         .word      CRR
      000EC3 CD 04 36         [ 4] 2893         CALL     EMIT
      000EC6 CD 04 71         [ 4] 2894         CALL     DOLIT
      000EC9 00 0A                 2895         .word      LF
      000ECB CC 04 36         [ 2] 2896         JP     EMIT
                                   2897 
                                   2898 ;       do$     ( -- a )
                                   2899 ;       Return  address of a compiled
                                   2900 ;       string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000ECE 0E BB                 2901         .word      LINK
                           000ED0  2902 LINK = . 
      000ED0 43                    2903 	.byte      COMPO+3
      000ED1 44 4F 24              2904         .ascii     "DO$"
      000ED4                       2905 DOSTR:
      000ED4 CD 05 40         [ 4] 2906         CALL     RFROM
      000ED7 CD 05 53         [ 4] 2907         CALL     RAT
      000EDA CD 05 40         [ 4] 2908         CALL     RFROM
      000EDD CD 0C 06         [ 4] 2909         CALL     COUNT
      000EE0 CD 07 C5         [ 4] 2910         CALL     PLUS
      000EE3 CD 05 5F         [ 4] 2911         CALL     TOR
      000EE6 CD 05 A6         [ 4] 2912         CALL     SWAPP
      000EE9 CD 05 5F         [ 4] 2913         CALL     TOR
      000EEC 81               [ 4] 2914         RET
                                   2915 
                                   2916 ;       $"|     ( -- a )
                                   2917 ;       Run time routine compiled by $".
                                   2918 ;       Return address of a compiled string.
      000EED 0E D0                 2919         .word      LINK
                           000EEF  2920 LINK = . 
      000EEF 43                    2921 	.byte      COMPO+3
      000EF0 24 22 7C              2922         .byte     '$','"','|'
      000EF3                       2923 STRQP:
      000EF3 CD 0E D4         [ 4] 2924         CALL     DOSTR
      000EF6 81               [ 4] 2925         RET
                                   2926 
                                   2927 ;       ."|     ( -- )
                                   2928 ;       Run time routine of ." .
                                   2929 ;       Output a compiled string.
      000EF7 0E EF                 2930         .word      LINK
                           000EF9  2931 LINK = . 
      000EF9 43                    2932 	.byte      COMPO+3
      000EFA 2E 22 7C              2933         .byte     '.','"','|'
      000EFD                       2934 DOTQP:
      000EFD CD 0E D4         [ 4] 2935         CALL     DOSTR
      000F00 CD 0C 06         [ 4] 2936         CALL     COUNT
      000F03 CC 0E A0         [ 2] 2937         JP     TYPES
                                   2938 
                                   2939 ;       .R      ( n +n -- )
                                   2940 ;       Display an integer in a field
                                   2941 ;       of n columns, right justified.
      000F06 0E F9                 2942         .word      LINK
                           000F08  2943 LINK = . 
      000F08 02                    2944         .byte      2
      000F09 2E 52                 2945         .ascii     ".R"
      000F0B                       2946 DOTR:
      000F0B CD 05 5F         [ 4] 2947         CALL     TOR
      000F0E CD 0D B7         [ 4] 2948         CALL     STR
      000F11 CD 05 40         [ 4] 2949         CALL     RFROM
      000F14 CD 05 C0         [ 4] 2950         CALL     OVER
      000F17 CD 08 3E         [ 4] 2951         CALL     SUBB
      000F1A CD 0E 85         [ 4] 2952         CALL     SPACS
      000F1D CC 0E A0         [ 2] 2953         JP     TYPES
                                   2954 
                                   2955 ;       U.R     ( u +n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2956 ;       Display an unsigned integer
                                   2957 ;       in n column, right justified.
      000F20 0F 08                 2958         .word      LINK
                           000F22  2959 LINK = . 
      000F22 03                    2960         .byte      3
      000F23 55 2E 52              2961         .ascii     "U.R"
      000F26                       2962 UDOTR:
      000F26 CD 05 5F         [ 4] 2963         CALL     TOR
      000F29 CD 0D 3A         [ 4] 2964         CALL     BDIGS
      000F2C CD 0D 74         [ 4] 2965         CALL     DIGS
      000F2F CD 0D 9F         [ 4] 2966         CALL     EDIGS
      000F32 CD 05 40         [ 4] 2967         CALL     RFROM
      000F35 CD 05 C0         [ 4] 2968         CALL     OVER
      000F38 CD 08 3E         [ 4] 2969         CALL     SUBB
      000F3B CD 0E 85         [ 4] 2970         CALL     SPACS
      000F3E CC 0E A0         [ 2] 2971         JP     TYPES
                                   2972 
                                   2973 ;       U.      ( u -- )
                                   2974 ;       Display an unsigned integer
                                   2975 ;       in free format.
      000F41 0F 22                 2976         .word      LINK
                           000F43  2977 LINK = . 
      000F43 02                    2978         .byte      2
      000F44 55 2E                 2979         .ascii     "U."
      000F46                       2980 UDOT:
      000F46 CD 0D 3A         [ 4] 2981         CALL     BDIGS
      000F49 CD 0D 74         [ 4] 2982         CALL     DIGS
      000F4C CD 0D 9F         [ 4] 2983         CALL     EDIGS
      000F4F CD 0E 76         [ 4] 2984         CALL     SPACE
      000F52 CC 0E A0         [ 2] 2985         JP     TYPES
                                   2986 
                                   2987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2988 ;   H. ( n -- )
                                   2989 ;   display n in hexadecimal 
                                   2990 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F55                       2991         _HEADER HDOT,2,"H."
      000F55 0F 43                    1         .word LINK 
                           000F57     2         LINK=.
      000F57 02                       3         .byte 2  
      000F58 48 2E                    4         .ascii "H."
      000F5A                          5         HDOT:
      000F5A CD 06 66         [ 4] 2992         CALL BASE 
      000F5D CD 04 EF         [ 4] 2993         CALL AT 
      000F60 CD 05 5F         [ 4] 2994         CALL TOR 
      000F63 CD 0D D5         [ 4] 2995         CALL HEX 
      000F66 CD 0F 46         [ 4] 2996         CALL UDOT 
      000F69 CD 05 40         [ 4] 2997         CALL RFROM 
      000F6C CD 06 66         [ 4] 2998         CALL BASE 
      000F6F CD 04 D8         [ 4] 2999         CALL STORE 
      000F72 81               [ 4] 3000         RET 
                                   3001 
                                   3002 
                                   3003 ;       .       ( w -- )
                                   3004 ;       Display an integer in free
                                   3005 ;       format, preceeded by a space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000F73 0F 57                 3006         .word      LINK
                           000F75  3007 LINK = . 
      000F75 01                    3008         .byte      1
      000F76 2E                    3009         .ascii     "."
      000F77                       3010 DOT:
      000F77 CD 06 66         [ 4] 3011         CALL     BASE
      000F7A CD 04 EF         [ 4] 3012         CALL     AT
      000F7D CD 04 71         [ 4] 3013         CALL     DOLIT
      000F80 00 0A                 3014         .word      10
      000F82 CD 06 1E         [ 4] 3015         CALL     XORR    ;?decimal
      000F85 CD 04 A4         [ 4] 3016         CALL     QBRAN
      000F88 0F 8D                 3017         .word      DOT1
      000F8A CC 0F 46         [ 2] 3018         JP     UDOT
      000F8D CD 0D B7         [ 4] 3019 DOT1:   CALL     STR
      000F90 CD 0E 76         [ 4] 3020         CALL     SPACE
      000F93 CC 0E A0         [ 2] 3021         JP     TYPES
                                   3022 
                                   3023 ;       ?       ( a -- )
                                   3024 ;       Display contents in memory cell.
      000F96 0F 75                 3025         .word      LINK
                                   3026         
                           000F98  3027 LINK = . 
      000F98 01                    3028         .byte      1
      000F99 3F                    3029         .ascii     "?"
      000F9A                       3030 QUEST:
      000F9A CD 04 EF         [ 4] 3031         CALL     AT
      000F9D CC 0F 77         [ 2] 3032         JP     DOT
                                   3033 
                                   3034 ;; Parsing
                                   3035 
                                   3036 ;       parse   ( b u c -- b u delta ; <string> )
                                   3037 ;       Scan string delimited by c.
                                   3038 ;       Return found string and its offset.
      000FA0 0F 98                 3039         .word      LINK
                           000FA2  3040 LINK = . 
      000FA2 05                    3041         .byte      5
      000FA3 70 61 72 73 65        3042         .ascii     "parse"
      000FA8                       3043 PARS:
      000FA8 CD 06 75         [ 4] 3044         CALL     TEMP
      000FAB CD 04 D8         [ 4] 3045         CALL     STORE
      000FAE CD 05 C0         [ 4] 3046         CALL     OVER
      000FB1 CD 05 5F         [ 4] 3047         CALL     TOR
      000FB4 CD 05 96         [ 4] 3048         CALL     DUPP
      000FB7 CD 04 A4         [ 4] 3049         CALL     QBRAN
      000FBA 10 60                 3050         .word    PARS8
      000FBC CD 0A D0         [ 4] 3051         CALL     ONEM
      000FBF CD 06 75         [ 4] 3052         CALL     TEMP
      000FC2 CD 04 EF         [ 4] 3053         CALL     AT
      000FC5 CD 0B 22         [ 4] 3054         CALL     BLANK
      000FC8 CD 08 66         [ 4] 3055         CALL     EQUAL
      000FCB CD 04 A4         [ 4] 3056         CALL     QBRAN
      000FCE 10 01                 3057         .word      PARS3
      000FD0 CD 05 5F         [ 4] 3058         CALL     TOR
      000FD3 CD 0B 22         [ 4] 3059 PARS1:  CALL     BLANK
      000FD6 CD 05 C0         [ 4] 3060         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000FD9 CD 05 0D         [ 4] 3061         CALL     CAT     ;skip leading blanks ONLY
      000FDC CD 08 3E         [ 4] 3062         CALL     SUBB
      000FDF CD 05 CF         [ 4] 3063         CALL     ZLESS
      000FE2 CD 07 DF         [ 4] 3064         CALL     INVER
      000FE5 CD 04 A4         [ 4] 3065         CALL     QBRAN
      000FE8 0F FE                 3066         .word      PARS2
      000FEA CD 0A C3         [ 4] 3067         CALL     ONEP
      000FED CD 04 85         [ 4] 3068         CALL     DONXT
      000FF0 0F D3                 3069         .word      PARS1
      000FF2 CD 05 40         [ 4] 3070         CALL     RFROM
      000FF5 CD 05 8C         [ 4] 3071         CALL     DROP
      000FF8 CD 0B 2F         [ 4] 3072         CALL     ZERO
      000FFB CC 05 96         [ 2] 3073         JP     DUPP
      000FFE CD 05 40         [ 4] 3074 PARS2:  CALL     RFROM
      001001 CD 05 C0         [ 4] 3075 PARS3:  CALL     OVER
      001004 CD 05 A6         [ 4] 3076         CALL     SWAPP
      001007 CD 05 5F         [ 4] 3077         CALL     TOR
      00100A CD 06 75         [ 4] 3078 PARS4:  CALL     TEMP
      00100D CD 04 EF         [ 4] 3079         CALL     AT
      001010 CD 05 C0         [ 4] 3080         CALL     OVER
      001013 CD 05 0D         [ 4] 3081         CALL     CAT
      001016 CD 08 3E         [ 4] 3082         CALL     SUBB    ;scan for delimiter
      001019 CD 06 75         [ 4] 3083         CALL     TEMP
      00101C CD 04 EF         [ 4] 3084         CALL     AT
      00101F CD 0B 22         [ 4] 3085         CALL     BLANK
      001022 CD 08 66         [ 4] 3086         CALL     EQUAL
      001025 CD 04 A4         [ 4] 3087         CALL     QBRAN
      001028 10 2D                 3088         .word      PARS5
      00102A CD 05 CF         [ 4] 3089         CALL     ZLESS
      00102D CD 04 A4         [ 4] 3090 PARS5:  CALL     QBRAN
      001030 10 42                 3091         .word      PARS6
      001032 CD 0A C3         [ 4] 3092         CALL     ONEP
      001035 CD 04 85         [ 4] 3093         CALL     DONXT
      001038 10 0A                 3094         .word      PARS4
      00103A CD 05 96         [ 4] 3095         CALL     DUPP
      00103D CD 05 5F         [ 4] 3096         CALL     TOR
      001040 20 0F            [ 2] 3097         JRA     PARS7
      001042 CD 05 40         [ 4] 3098 PARS6:  CALL     RFROM
      001045 CD 05 8C         [ 4] 3099         CALL     DROP
      001048 CD 05 96         [ 4] 3100         CALL     DUPP
      00104B CD 0A C3         [ 4] 3101         CALL     ONEP
      00104E CD 05 5F         [ 4] 3102         CALL     TOR
      001051 CD 05 C0         [ 4] 3103 PARS7:  CALL     OVER
      001054 CD 08 3E         [ 4] 3104         CALL     SUBB
      001057 CD 05 40         [ 4] 3105         CALL     RFROM
      00105A CD 05 40         [ 4] 3106         CALL     RFROM
      00105D CC 08 3E         [ 2] 3107         JP     SUBB
      001060 CD 05 C0         [ 4] 3108 PARS8:  CALL     OVER
      001063 CD 05 40         [ 4] 3109         CALL     RFROM
      001066 CC 08 3E         [ 2] 3110         JP     SUBB
                                   3111 
                                   3112 ;       PARSE   ( c -- b u ; <string> )
                                   3113 ;       Scan input stream and return
                                   3114 ;       counted string delimited by c.
      001069 0F A2                 3115         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                           00106B  3116 LINK = . 
      00106B 05                    3117         .byte      5
      00106C 50 41 52 53 45        3118         .ascii     "PARSE"
      001071                       3119 PARSE:
      001071 CD 05 5F         [ 4] 3120         CALL     TOR
      001074 CD 0C 3F         [ 4] 3121         CALL     TIB
      001077 CD 06 84         [ 4] 3122         CALL     INN
      00107A CD 04 EF         [ 4] 3123         CALL     AT
      00107D CD 07 C5         [ 4] 3124         CALL     PLUS    ;current input buffer pointer
      001080 CD 06 94         [ 4] 3125         CALL     NTIB
      001083 CD 04 EF         [ 4] 3126         CALL     AT
      001086 CD 06 84         [ 4] 3127         CALL     INN
      001089 CD 04 EF         [ 4] 3128         CALL     AT
      00108C CD 08 3E         [ 4] 3129         CALL     SUBB    ;remaining count
      00108F CD 05 40         [ 4] 3130         CALL     RFROM
      001092 CD 0F A8         [ 4] 3131         CALL     PARS
      001095 CD 06 84         [ 4] 3132         CALL     INN
      001098 CC 0B 9F         [ 2] 3133         JP     PSTOR
                                   3134 
                                   3135 ;       .(      ( -- )
                                   3136 ;       Output following string up to next ) .
      00109B 10 6B                 3137         .word      LINK
                           00109D  3138 LINK = . 
      00109D 82                    3139 	.byte      IMEDD+2
      00109E 2E 28                 3140         .ascii     ".("
      0010A0                       3141 DOTPR:
      0010A0 CD 04 71         [ 4] 3142         CALL     DOLIT
      0010A3 00 29                 3143         .word     41	; ")"
      0010A5 CD 10 71         [ 4] 3144         CALL     PARSE
      0010A8 CC 0E A0         [ 2] 3145         JP     TYPES
                                   3146 
                                   3147 ;       (       ( -- )
                                   3148 ;       Ignore following string up to next ).
                                   3149 ;       A comment.
      0010AB 10 9D                 3150         .word      LINK
                           0010AD  3151 LINK = . 
      0010AD 81                    3152 	.byte      IMEDD+1
      0010AE 28                    3153         .ascii     "("
      0010AF                       3154 PAREN:
      0010AF CD 04 71         [ 4] 3155         CALL     DOLIT
      0010B2 00 29                 3156         .word     41	; ")"
      0010B4 CD 10 71         [ 4] 3157         CALL     PARSE
      0010B7 CC 07 A5         [ 2] 3158         JP     DDROP
                                   3159 
                                   3160 ;       \       ( -- )
                                   3161 ;       Ignore following text till
                                   3162 ;       end of line.
      0010BA 10 AD                 3163         .word      LINK
                           0010BC  3164 LINK = . 
      0010BC 81                    3165 	.byte      IMEDD+1
      0010BD 5C                    3166         .ascii     "\"
      0010BE                       3167 BKSLA:
      0010BE 90 AE 00 0E      [ 2] 3168         ldw y,#UCTIB ; #TIB  
      0010C2 90 FE            [ 2] 3169         ldw y,(y)
      0010C4 90 89            [ 2] 3170         pushw y ; count in TIB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0010C6 90 AE 00 0C      [ 2] 3171         ldw y,#UINN ; >IN 
      0010CA 90 BF 26         [ 2] 3172         ldw YTEMP,y
      0010CD 90 85            [ 2] 3173         popw y 
      0010CF 91 CF 26         [ 5] 3174         ldw [YTEMP],y
      0010D2 81               [ 4] 3175         ret 
                                   3176 
                                   3177 ;       WORD    ( c -- a ; <string> )
                                   3178 ;       Parse a word from input stream
                                   3179 ;       and copy it to code dictionary.
      0010D3 10 BC                 3180         .word      LINK
                           0010D5  3181 LINK = . 
      0010D5 04                    3182         .byte      4
      0010D6 57 4F 52 44           3183         .ascii     "WORD"
      0010DA                       3184 WORDD:
      0010DA CD 10 71         [ 4] 3185         CALL     PARSE
      0010DD CD 0C 1D         [ 4] 3186         CALL     HERE
      0010E0 CD 0A 98         [ 4] 3187         CALL     CELLP
                           000000  3188 .IF CASE_SENSE 
                                   3189         JP      PACKS 
                           000001  3190 .ELSE                 
      0010E3 CD 0C DD         [ 4] 3191         CALL     PACKS
                                   3192 ; uppercase TOKEN 
      0010E6 CD 05 96         [ 4] 3193         CALL    DUPP 
      0010E9 CD 0C 06         [ 4] 3194         CALL    COUNT 
      0010EC CD 05 5F         [ 4] 3195         CALL    TOR 
      0010EF CD 04 BB         [ 4] 3196         CALL    BRAN 
      0010F2 11 20                 3197         .word   UPPER2  
      0010F4                       3198 UPPER:
      0010F4 CD 05 96         [ 4] 3199         CALL    DUPP 
      0010F7 CD 05 0D         [ 4] 3200         CALL    CAT
      0010FA CD 05 96         [ 4] 3201         CALL    DUPP 
      0010FD CD 04 71         [ 4] 3202         CALL   DOLIT
      001100 00 61                 3203         .word   'a' 
      001102 CD 04 71         [ 4] 3204         CALL    DOLIT
      001105 00 7B                 3205         .word   'z'+1 
      001107 CD 09 1E         [ 4] 3206         CALL   WITHI 
      00110A CD 04 A4         [ 4] 3207         CALL   QBRAN
      00110D 11 17                 3208         .word  UPPER1  
      00110F CD 04 71         [ 4] 3209         CALL    DOLIT 
      001112 00 DF                 3210         .word   0xDF 
      001114 CD 05 F5         [ 4] 3211         CALL    ANDD 
      001117                       3212 UPPER1:
      001117 CD 05 C0         [ 4] 3213         CALL    OVER 
      00111A CD 04 FC         [ 4] 3214         CALL    CSTOR          
      00111D CD 0A C3         [ 4] 3215         CALL    ONEP 
      001120                       3216 UPPER2: 
      001120 CD 04 85         [ 4] 3217         CALL    DONXT
      001123 10 F4                 3218         .word   UPPER  
      001125 CD 05 8C         [ 4] 3219         CALL    DROP  
      001128 81               [ 4] 3220         RET 
                                   3221 .ENDIF 
                                   3222 
                                   3223 ;       TOKEN   ( -- a ; <string> )
                                   3224 ;       Parse a word from input stream
                                   3225 ;       and copy it to name dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001129 10 D5                 3226         .word      LINK
                           00112B  3227 LINK = . 
      00112B 05                    3228         .byte      5
      00112C 54 4F 4B 45 4E        3229         .ascii     "TOKEN"
      001131                       3230 TOKEN:
      001131 CD 0B 22         [ 4] 3231         CALL     BLANK
      001134 CC 10 DA         [ 2] 3232         JP     WORDD
                                   3233 
                                   3234 ;; Dictionary search
                                   3235 
                                   3236 ;       NAME>   ( na -- ca )
                                   3237 ;       Return a code address given
                                   3238 ;       a name address.
      001137 11 2B                 3239         .word      LINK
                           001139  3240 LINK = . 
      001139 05                    3241         .byte      5
      00113A 4E 41 4D 45 3E        3242         .ascii     "NAME>"
      00113F                       3243 NAMET:
      00113F CD 0C 06         [ 4] 3244         CALL     COUNT
      001142 CD 04 71         [ 4] 3245         CALL     DOLIT
      001145 00 1F                 3246         .word      31
      001147 CD 05 F5         [ 4] 3247         CALL     ANDD
      00114A CC 07 C5         [ 2] 3248         JP     PLUS
                                   3249 
                                   3250 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3251 ;       Compare u cells in two
                                   3252 ;       strings. Return 0 if identical.
      00114D 11 39                 3253         .word      LINK
                           00114F  3254 LINK = . 
      00114F 05                    3255         .byte       5
      001150 53 41 4D 45 3F        3256         .ascii     "SAME?"
      001155                       3257 SAMEQ:
      001155 CD 0A D0         [ 4] 3258         CALL     ONEM
      001158 CD 05 5F         [ 4] 3259         CALL     TOR
      00115B 20 29            [ 2] 3260         JRA     SAME2
      00115D CD 05 C0         [ 4] 3261 SAME1:  CALL     OVER
      001160 CD 05 53         [ 4] 3262         CALL     RAT
      001163 CD 07 C5         [ 4] 3263         CALL     PLUS
      001166 CD 05 0D         [ 4] 3264         CALL     CAT
      001169 CD 05 C0         [ 4] 3265         CALL     OVER
      00116C CD 05 53         [ 4] 3266         CALL     RAT
      00116F CD 07 C5         [ 4] 3267         CALL     PLUS
      001172 CD 05 0D         [ 4] 3268         CALL     CAT
      001175 CD 08 3E         [ 4] 3269         CALL     SUBB
      001178 CD 07 53         [ 4] 3270         CALL     QDUP
      00117B CD 04 A4         [ 4] 3271         CALL     QBRAN
      00117E 11 86                 3272         .word      SAME2
      001180 CD 05 40         [ 4] 3273         CALL     RFROM
      001183 CC 05 8C         [ 2] 3274         JP     DROP
      001186 CD 04 85         [ 4] 3275 SAME2:  CALL     DONXT
      001189 11 5D                 3276         .word      SAME1
      00118B CC 0B 2F         [ 2] 3277         JP     ZERO
                                   3278 
                                   3279 ;       find    ( a va -- ca na | a F )
                                   3280 ;       Search vocabulary for string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3281 ;       Return ca and na if succeeded.
      00118E 11 4F                 3282         .word      LINK
                           001190  3283 LINK = . 
      001190 04                    3284         .byte      4
      001191 46 49 4E 44           3285         .ascii     "FIND"
      001195                       3286 FIND:
      001195 CD 05 A6         [ 4] 3287         CALL     SWAPP
      001198 CD 05 96         [ 4] 3288         CALL     DUPP
      00119B CD 05 0D         [ 4] 3289         CALL     CAT
      00119E CD 06 75         [ 4] 3290         CALL     TEMP
      0011A1 CD 04 D8         [ 4] 3291         CALL     STORE
      0011A4 CD 05 96         [ 4] 3292         CALL     DUPP
      0011A7 CD 04 EF         [ 4] 3293         CALL     AT
      0011AA CD 05 5F         [ 4] 3294         CALL     TOR
      0011AD CD 0A 98         [ 4] 3295         CALL     CELLP
      0011B0 CD 05 A6         [ 4] 3296         CALL     SWAPP
      0011B3 CD 04 EF         [ 4] 3297 FIND1:  CALL     AT
      0011B6 CD 05 96         [ 4] 3298         CALL     DUPP
      0011B9 CD 04 A4         [ 4] 3299         CALL     QBRAN
      0011BC 11 F2                 3300         .word      FIND6
      0011BE CD 05 96         [ 4] 3301         CALL     DUPP
      0011C1 CD 04 EF         [ 4] 3302         CALL     AT
      0011C4 CD 04 71         [ 4] 3303         CALL     DOLIT
      0011C7 1F 7F                 3304         .word      MASKK
      0011C9 CD 05 F5         [ 4] 3305         CALL     ANDD
      0011CC CD 05 53         [ 4] 3306         CALL     RAT
      0011CF CD 06 1E         [ 4] 3307         CALL     XORR
      0011D2 CD 04 A4         [ 4] 3308         CALL     QBRAN
      0011D5 11 E1                 3309         .word      FIND2
      0011D7 CD 0A 98         [ 4] 3310         CALL     CELLP
      0011DA CD 04 71         [ 4] 3311         CALL     DOLIT
      0011DD FF FF                 3312         .word     0xFFFF
      0011DF 20 0C            [ 2] 3313         JRA     FIND3
      0011E1 CD 0A 98         [ 4] 3314 FIND2:  CALL     CELLP
      0011E4 CD 06 75         [ 4] 3315         CALL     TEMP
      0011E7 CD 04 EF         [ 4] 3316         CALL     AT
      0011EA CD 11 55         [ 4] 3317         CALL     SAMEQ
      0011ED CD 04 BB         [ 4] 3318 FIND3:  CALL     BRAN
      0011F0 12 01                 3319         .word      FIND4
      0011F2 CD 05 40         [ 4] 3320 FIND6:  CALL     RFROM
      0011F5 CD 05 8C         [ 4] 3321         CALL     DROP
      0011F8 CD 05 A6         [ 4] 3322         CALL     SWAPP
      0011FB CD 0A A7         [ 4] 3323         CALL     CELLM
      0011FE CC 05 A6         [ 2] 3324         JP     SWAPP
      001201 CD 04 A4         [ 4] 3325 FIND4:  CALL     QBRAN
      001204 12 0E                 3326         .word      FIND5
      001206 CD 0A A7         [ 4] 3327         CALL     CELLM
      001209 CD 0A A7         [ 4] 3328         CALL     CELLM
      00120C 20 A5            [ 2] 3329         JRA     FIND1
      00120E CD 05 40         [ 4] 3330 FIND5:  CALL     RFROM
      001211 CD 05 8C         [ 4] 3331         CALL     DROP
      001214 CD 05 A6         [ 4] 3332         CALL     SWAPP
      001217 CD 05 8C         [ 4] 3333         CALL     DROP
      00121A CD 0A A7         [ 4] 3334         CALL     CELLM
      00121D CD 05 96         [ 4] 3335         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001220 CD 11 3F         [ 4] 3336         CALL     NAMET
      001223 CC 05 A6         [ 2] 3337         JP     SWAPP
                                   3338 
                                   3339 ;       NAME?   ( a -- ca na | a F )
                                   3340 ;       Search vocabularies for a string.
      001226 11 90                 3341         .word      LINK
                           001228  3342 LINK = . 
      001228 05                    3343         .byte      5
      001229 4E 41 4D 45 3F        3344         .ascii     "NAME?"
      00122E                       3345 NAMEQ:
      00122E CD 06 E9         [ 4] 3346         CALL   CNTXT
      001231 CC 11 95         [ 2] 3347         JP     FIND
                                   3348 
                                   3349 ;; Terminal response
                                   3350 
                                   3351 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3352 ;       Backup cursor by one character.
      001234 12 28                 3353         .word      LINK
                           001236  3354 LINK = . 
      001236 02                    3355         .byte      2
      001237 5E 48                 3356         .ascii     "^H"
      001239                       3357 BKSP:
      001239 CD 05 5F         [ 4] 3358         CALL     TOR
      00123C CD 05 C0         [ 4] 3359         CALL     OVER
      00123F CD 05 40         [ 4] 3360         CALL     RFROM
      001242 CD 05 A6         [ 4] 3361         CALL     SWAPP
      001245 CD 05 C0         [ 4] 3362         CALL     OVER
      001248 CD 06 1E         [ 4] 3363         CALL     XORR
      00124B CD 04 A4         [ 4] 3364         CALL     QBRAN
      00124E 12 69                 3365         .word      BACK1
      001250 CD 04 71         [ 4] 3366         CALL     DOLIT
      001253 00 08                 3367         .word      BKSPP
      001255 CD 04 36         [ 4] 3368         CALL     EMIT
      001258 CD 0A D0         [ 4] 3369         CALL     ONEM
      00125B CD 0B 22         [ 4] 3370         CALL     BLANK
      00125E CD 04 36         [ 4] 3371         CALL     EMIT
      001261 CD 04 71         [ 4] 3372         CALL     DOLIT
      001264 00 08                 3373         .word      BKSPP
      001266 CC 04 36         [ 2] 3374         JP     EMIT
      001269 81               [ 4] 3375 BACK1:  RET
                                   3376 
                                   3377 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3378 ;       Accept and echo key stroke
                                   3379 ;       and bump cursor.
      00126A 12 36                 3380         .word      LINK
                           00126C  3381 LINK = . 
      00126C 03                    3382         .byte      3
      00126D 54 41 50              3383         .ascii     "TAP"
      001270                       3384 TAP:
      001270 CD 05 96         [ 4] 3385         CALL     DUPP
      001273 CD 04 36         [ 4] 3386         CALL     EMIT
      001276 CD 05 C0         [ 4] 3387         CALL     OVER
      001279 CD 04 FC         [ 4] 3388         CALL     CSTOR
      00127C CC 0A C3         [ 2] 3389         JP     ONEP
                                   3390 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3391 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3392 ;       Process a key stroke,
                                   3393 ;       CR,LF or backspace.
      00127F 12 6C                 3394         .word      LINK
                           001281  3395 LINK = . 
      001281 04                    3396         .byte      4
      001282 4B 54 41 50           3397         .ascii     "KTAP"
      001286                       3398 KTAP:
      001286 CD 05 96         [ 4] 3399         CALL     DUPP
      001289 CD 04 71         [ 4] 3400         CALL     DOLIT
                           000001  3401 .if EOL_CR
      00128C 00 0D                 3402         .word   CRR
                           000000  3403 .else ; EOL_LF 
                                   3404         .word   LF
                                   3405 .endif 
      00128E CD 06 1E         [ 4] 3406         CALL     XORR
      001291 CD 04 A4         [ 4] 3407         CALL     QBRAN
      001294 12 AC                 3408         .word      KTAP2
      001296 CD 04 71         [ 4] 3409         CALL     DOLIT
      001299 00 08                 3410         .word      BKSPP
      00129B CD 06 1E         [ 4] 3411         CALL     XORR
      00129E CD 04 A4         [ 4] 3412         CALL     QBRAN
      0012A1 12 A9                 3413         .word      KTAP1
      0012A3 CD 0B 22         [ 4] 3414         CALL     BLANK
      0012A6 CC 12 70         [ 2] 3415         JP     TAP
      0012A9 CC 12 39         [ 2] 3416 KTAP1:  JP     BKSP
      0012AC CD 05 8C         [ 4] 3417 KTAP2:  CALL     DROP
      0012AF CD 05 A6         [ 4] 3418         CALL     SWAPP
      0012B2 CD 05 8C         [ 4] 3419         CALL     DROP
      0012B5 CC 05 96         [ 2] 3420         JP     DUPP
                                   3421 
                                   3422 ;       accept  ( b u -- b u )
                                   3423 ;       Accept characters to input
                                   3424 ;       buffer. Return with actual count.
      0012B8 12 81                 3425         .word      LINK
                           0012BA  3426 LINK = . 
      0012BA 06                    3427         .byte      6
      0012BB 41 43 43 45 50 54     3428         .ascii     "ACCEPT"
      0012C1                       3429 ACCEP:
      0012C1 CD 05 C0         [ 4] 3430         CALL     OVER
      0012C4 CD 07 C5         [ 4] 3431         CALL     PLUS
      0012C7 CD 05 C0         [ 4] 3432         CALL     OVER
      0012CA CD 07 B0         [ 4] 3433 ACCP1:  CALL     DDUP
      0012CD CD 06 1E         [ 4] 3434         CALL     XORR
      0012D0 CD 04 A4         [ 4] 3435         CALL     QBRAN
      0012D3 12 F5                 3436         .word      ACCP4
      0012D5 CD 0E 3E         [ 4] 3437         CALL     KEY
      0012D8 CD 05 96         [ 4] 3438         CALL     DUPP
      0012DB CD 0B 22         [ 4] 3439         CALL     BLANK
      0012DE CD 04 71         [ 4] 3440         CALL     DOLIT
      0012E1 00 7F                 3441         .word      127
      0012E3 CD 09 1E         [ 4] 3442         CALL     WITHI
      0012E6 CD 04 A4         [ 4] 3443         CALL     QBRAN
      0012E9 12 F0                 3444         .word      ACCP2
      0012EB CD 12 70         [ 4] 3445         CALL     TAP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012EE 20 03            [ 2] 3446         JRA     ACCP3
      0012F0 CD 12 86         [ 4] 3447 ACCP2:  CALL     KTAP
      0012F3 20 D5            [ 2] 3448 ACCP3:  JRA     ACCP1
      0012F5 CD 05 8C         [ 4] 3449 ACCP4:  CALL     DROP
      0012F8 CD 05 C0         [ 4] 3450         CALL     OVER
      0012FB CC 08 3E         [ 2] 3451         JP     SUBB
                                   3452 
                                   3453 ;       QUERY   ( -- )
                                   3454 ;       Accept input stream to
                                   3455 ;       terminal input buffer.
      0012FE 12 BA                 3456         .word      LINK
                                   3457         
                           001300  3458 LINK = . 
      001300 05                    3459         .byte      5
      001301 51 55 45 52 59        3460         .ascii     "QUERY"
      001306                       3461 QUERY:
      001306 CD 0C 3F         [ 4] 3462         CALL     TIB
      001309 CD 04 71         [ 4] 3463         CALL     DOLIT
      00130C 00 50                 3464         .word      80
      00130E CD 12 C1         [ 4] 3465         CALL     ACCEP
      001311 CD 06 94         [ 4] 3466         CALL     NTIB
      001314 CD 04 D8         [ 4] 3467         CALL     STORE
      001317 CD 05 8C         [ 4] 3468         CALL     DROP
      00131A CD 0B 2F         [ 4] 3469         CALL     ZERO
      00131D CD 06 84         [ 4] 3470         CALL     INN
      001320 CC 04 D8         [ 2] 3471         JP     STORE
                                   3472 
                                   3473 ;       ABORT   ( -- )
                                   3474 ;       Reset data stack and
                                   3475 ;       jump to QUIT.
      001323 13 00                 3476         .word      LINK
                           001325  3477 LINK = . 
      001325 05                    3478         .byte      5
      001326 41 42 4F 52 54        3479         .ascii     "ABORT"
      00132B                       3480 ABORT:
      00132B CD 14 22         [ 4] 3481         CALL     PRESE
      00132E CC 14 3F         [ 2] 3482         JP     QUIT
                                   3483 
                                   3484 ;       abort"  ( f -- )
                                   3485 ;       Run time routine of ABORT".
                                   3486 ;       Abort with a message.
      001331 13 25                 3487         .word      LINK
                           001333  3488 LINK = . 
      001333 46                    3489 	.byte      COMPO+6
      001334 41 42 4F 52 54        3490         .ascii     "ABORT"
      001339 22                    3491         .byte      '"'
      00133A                       3492 ABORQ:
      00133A CD 04 A4         [ 4] 3493         CALL     QBRAN
      00133D 13 59                 3494         .word      ABOR2   ;text flag
      00133F CD 0E D4         [ 4] 3495         CALL     DOSTR
      001342 CD 0E 76         [ 4] 3496 ABOR1:  CALL     SPACE
      001345 CD 0C 06         [ 4] 3497         CALL     COUNT
      001348 CD 0E A0         [ 4] 3498         CALL     TYPES
      00134B CD 04 71         [ 4] 3499         CALL     DOLIT
      00134E 00 3F                 3500         .word     63 ; "?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001350 CD 04 36         [ 4] 3501         CALL     EMIT
      001353 CD 0E BE         [ 4] 3502         CALL     CR
      001356 CC 13 2B         [ 2] 3503         JP     ABORT   ;pass error string
      001359 CD 0E D4         [ 4] 3504 ABOR2:  CALL     DOSTR
      00135C CC 05 8C         [ 2] 3505         JP     DROP
                                   3506 
                                   3507 ;; The text interpreter
                                   3508 
                                   3509 ;       $INTERPRET      ( a -- )
                                   3510 ;       Interpret a word. If failed,
                                   3511 ;       try to convert it to an integer.
      00135F 13 33                 3512         .word      LINK
                           001361  3513 LINK = . 
      001361 0A                    3514         .byte      10
      001362 24 49 4E 54 45 52 50  3515         .ascii     "$INTERPRET"
             52 45 54
      00136C                       3516 INTER:
      00136C CD 12 2E         [ 4] 3517         CALL     NAMEQ
      00136F CD 07 53         [ 4] 3518         CALL     QDUP    ;?defined
      001372 CD 04 A4         [ 4] 3519         CALL     QBRAN
      001375 13 96                 3520         .word      INTE1
      001377 CD 04 EF         [ 4] 3521         CALL     AT
      00137A CD 04 71         [ 4] 3522         CALL     DOLIT
      00137D 40 00                 3523 	.word       0x4000	; COMPO*256
      00137F CD 05 F5         [ 4] 3524         CALL     ANDD    ;?compile only lexicon bits
      001382 CD 13 3A         [ 4] 3525         CALL     ABORQ
      001385 0D                    3526         .byte      13
      001386 20 63 6F 6D 70 69 6C  3527         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001393 CC 04 CB         [ 2] 3528         JP     EXECU
      001396 CD 24 36         [ 4] 3529 INTE1:  CALL     NUMBQ   ;convert a number
      001399 CD 04 A4         [ 4] 3530         CALL     QBRAN
      00139C 13 42                 3531         .word    ABOR1
      00139E 81               [ 4] 3532         RET
                                   3533 
                                   3534 ;       [       ( -- )
                                   3535 ;       Start  text interpreter.
      00139F 13 61                 3536         .word      LINK
                           0013A1  3537 LINK = . 
      0013A1 81                    3538 	.byte      IMEDD+1
      0013A2 5B                    3539         .ascii     "["
      0013A3                       3540 LBRAC:
      0013A3 CD 04 71         [ 4] 3541         CALL   DOLIT
      0013A6 13 6C                 3542         .word  INTER
      0013A8 CD 06 C7         [ 4] 3543         CALL   TEVAL
      0013AB CC 04 D8         [ 2] 3544         JP     STORE
                                   3545 
                                   3546 ;       .OK     ( -- )
                                   3547 ;       Display 'ok' while interpreting.
      0013AE 13 A1                 3548         .word      LINK
                           0013B0  3549 LINK = . 
      0013B0 03                    3550         .byte      3
      0013B1 2E 4F 4B              3551         .ascii     ".OK"
      0013B4                       3552 DOTOK:
      0013B4 CD 04 71         [ 4] 3553         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013B7 13 6C                 3554         .word      INTER
      0013B9 CD 06 C7         [ 4] 3555         CALL     TEVAL
      0013BC CD 04 EF         [ 4] 3556         CALL     AT
      0013BF CD 08 66         [ 4] 3557         CALL     EQUAL
      0013C2 CD 04 A4         [ 4] 3558         CALL     QBRAN
      0013C5 13 CE                 3559         .word      DOTO1
      0013C7 CD 0E FD         [ 4] 3560         CALL     DOTQP
      0013CA 03                    3561         .byte      3
      0013CB 20 6F 6B              3562         .ascii     " ok"
      0013CE CC 0E BE         [ 2] 3563 DOTO1:  JP     CR
                                   3564 
                                   3565 ;       ?STACK  ( -- )
                                   3566 ;       Abort if stack underflows.
      0013D1 13 B0                 3567         .word      LINK
                           0013D3  3568 LINK = . 
      0013D3 06                    3569         .byte      6
      0013D4 3F 53 54 41 43 4B     3570         .ascii     "?STACK"
      0013DA                       3571 QSTAC: 
      0013DA CD 0B 71         [ 4] 3572         CALL     DEPTH
      0013DD CD 05 CF         [ 4] 3573         CALL     ZLESS   ;check only for underflow
      0013E0 CD 13 3A         [ 4] 3574         CALL     ABORQ
      0013E3 0B                    3575         .byte      11
      0013E4 20 75 6E 64 65 72 66  3576         .ascii     " underflow "
             6C 6F 77 20
      0013EF 81               [ 4] 3577         RET
                                   3578 
                                   3579 ;       EVAL    ( -- )
                                   3580 ;       Interpret  input stream.
      0013F0 13 D3                 3581         .word      LINK
                           0013F2  3582 LINK = . 
      0013F2 04                    3583         .byte      4
      0013F3 45 56 41 4C           3584         .ascii     "EVAL"
      0013F7                       3585 EVAL:
      0013F7 CD 11 31         [ 4] 3586 EVAL1:  CALL     TOKEN
      0013FA CD 05 96         [ 4] 3587         CALL     DUPP
      0013FD CD 05 0D         [ 4] 3588         CALL     CAT     ;?input stream empty
      001400 CD 04 A4         [ 4] 3589         CALL     QBRAN
      001403 14 13                 3590         .word    EVAL2
      001405 CD 06 C7         [ 4] 3591         CALL     TEVAL
      001408 CD 0C 53         [ 4] 3592         CALL     ATEXE
      00140B CD 13 DA         [ 4] 3593         CALL     QSTAC   ;evaluate input, check stack
      00140E CD 04 BB         [ 4] 3594         CALL     BRAN
      001411 13 F7                 3595         .word    EVAL1
      001413 CD 05 8C         [ 4] 3596 EVAL2:  CALL     DROP
      001416 CC 13 B4         [ 2] 3597         JP       DOTOK
                                   3598 
                                   3599 ;       PRESET  ( -- )
                                   3600 ;       Reset data stack pointer and
                                   3601 ;       terminal input buffer.
      001419 13 F2                 3602         .word      LINK
                           00141B  3603 LINK = . 
      00141B 06                    3604         .byte      6
      00141C 50 52 45 53 45 54     3605         .ascii     "PRESET"
      001422                       3606 PRESE:
      001422 CD 04 71         [ 4] 3607         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001425 16 80                 3608         .word      SPP
      001427 CD 05 83         [ 4] 3609         CALL     SPSTO
      00142A CD 04 71         [ 4] 3610         CALL     DOLIT
      00142D 17 00                 3611         .word      TIBB
      00142F CD 06 94         [ 4] 3612         CALL     NTIB
      001432 CD 0A 98         [ 4] 3613         CALL     CELLP
      001435 CC 04 D8         [ 2] 3614         JP     STORE
                                   3615 
                                   3616 ;       QUIT    ( -- )
                                   3617 ;       Reset return stack pointer
                                   3618 ;       and start text interpreter.
      001438 14 1B                 3619         .word      LINK
                           00143A  3620 LINK = . 
      00143A 04                    3621         .byte      4
      00143B 51 55 49 54           3622         .ascii     "QUIT"
      00143F                       3623 QUIT:
      00143F CD 04 71         [ 4] 3624         CALL     DOLIT
      001442 17 FF                 3625         .word      RPP
      001444 CD 05 2A         [ 4] 3626         CALL     RPSTO   ;reset return stack pointer
      001447 CD 13 A3         [ 4] 3627 QUIT1:  CALL     LBRAC   ;start interpretation
      00144A CD 13 06         [ 4] 3628 QUIT2:  CALL     QUERY   ;get input
      00144D CD 13 F7         [ 4] 3629         CALL     EVAL
      001450 20 F8            [ 2] 3630         JRA     QUIT2   ;continue till error
                                   3631 
                                   3632 ;; The compiler
                                   3633 
                                   3634 ;       '       ( -- ca )
                                   3635 ;       Search vocabularies for
                                   3636 ;       next word in input stream.
      001452 14 3A                 3637         .word      LINK
                           001454  3638 LINK = . 
      001454 01                    3639         .byte      1
      001455 27                    3640         .ascii     "'"
      001456                       3641 TICK:
      001456 CD 11 31         [ 4] 3642         CALL     TOKEN
      001459 CD 12 2E         [ 4] 3643         CALL     NAMEQ   ;?defined
      00145C CD 04 A4         [ 4] 3644         CALL     QBRAN
      00145F 13 42                 3645         .word      ABOR1
      001461 81               [ 4] 3646         RET     ;yes, push code address
                                   3647 
                                   3648 ;       ALLOT   ( n -- )
                                   3649 ;       Allocate n bytes to RAM 
      001462 14 54                 3650         .word      LINK
                           001464  3651         LINK = . 
      001464 05                    3652         .byte      5
      001465 41 4C 4C 4F 54        3653         .ascii     "ALLOT"
      00146A                       3654 ALLOT:
      00146A CD 06 F7         [ 4] 3655         CALL     VPP
                                   3656 ; must update APP_VP each time VP is modidied
      00146D CD 0B 9F         [ 4] 3657         call PSTOR 
      001470 CC 1B B3         [ 2] 3658         jp UPDATVP 
                                   3659 
                                   3660 ;       ,       ( w -- )
                                   3661 ;         Compile an integer into
                                   3662 ;         variable space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001473 14 64                 3663         .word      LINK
                           001475  3664 LINK = . 
      001475 01                    3665         .byte      1
      001476 2C                    3666         .ascii     ","
      001477                       3667 COMMA:
      001477 CD 0C 1D         [ 4] 3668         CALL     HERE
      00147A CD 05 96         [ 4] 3669         CALL     DUPP
      00147D CD 0A 98         [ 4] 3670         CALL     CELLP   ;cell boundary
      001480 CD 06 F7         [ 4] 3671         CALL     VPP
      001483 CD 04 D8         [ 4] 3672         CALL     STORE
      001486 CC 04 D8         [ 2] 3673         JP     STORE
                                   3674 
                                   3675 ;       C,      ( c -- )
                                   3676 ;       Compile a byte into
                                   3677 ;       variables space.
      001489 14 75                 3678        .word      LINK
                           00148B  3679 LINK = . 
      00148B 02                    3680         .byte      2
      00148C 43 2C                 3681         .ascii     "C,"
      00148E                       3682 CCOMMA:
      00148E CD 0C 1D         [ 4] 3683         CALL     HERE
      001491 CD 05 96         [ 4] 3684         CALL     DUPP
      001494 CD 0A C3         [ 4] 3685         CALL     ONEP
      001497 CD 06 F7         [ 4] 3686         CALL     VPP
      00149A CD 04 D8         [ 4] 3687         CALL     STORE
      00149D CC 04 FC         [ 2] 3688         JP     CSTOR
                                   3689 
                                   3690 ;       [COMPILE]       ( -- ; <string> )
                                   3691 ;       Compile next immediate
                                   3692 ;       word into code dictionary.
      0014A0 14 8B                 3693         .word      LINK
                           0014A2  3694 LINK = . 
      0014A2 89                    3695 	.byte      IMEDD+9
      0014A3 5B 43 4F 4D 50 49 4C  3696         .ascii     "[COMPILE]"
             45 5D
      0014AC                       3697 BCOMP:
      0014AC CD 14 56         [ 4] 3698         CALL     TICK
      0014AF CC 17 82         [ 2] 3699         JP     JSRC
                                   3700 
                                   3701 ;       COMPILE ( -- )
                                   3702 ;       Compile next jsr in
                                   3703 ;       colon list to code dictionary.
      0014B2 14 A2                 3704         .word      LINK
                           0014B4  3705 LINK = . 
      0014B4 47                    3706 	.byte      COMPO+7
      0014B5 43 4F 4D 50 49 4C 45  3707         .ascii     "COMPILE"
      0014BC                       3708 COMPI:
      0014BC CD 05 40         [ 4] 3709         CALL     RFROM
      0014BF CD 05 96         [ 4] 3710         CALL     DUPP
      0014C2 CD 04 EF         [ 4] 3711         CALL     AT
      0014C5 CD 17 82         [ 4] 3712         CALL     JSRC    ;compile subroutine
      0014C8 CD 0A 98         [ 4] 3713         CALL     CELLP
      0014CB 90 93            [ 1] 3714         ldw y,x 
      0014CD 90 FE            [ 2] 3715         ldw y,(y)
      0014CF 1C 00 02         [ 2] 3716         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014D2 90 FC            [ 2] 3717         jp (y)
                                   3718 
                                   3719 ;       LITERAL ( w -- )
                                   3720 ;       Compile tos to dictionary
                                   3721 ;       as an integer literal.
      0014D4 14 B4                 3722         .word      LINK
                           0014D6  3723 LINK = . 
      0014D6 87                    3724 	.byte      IMEDD+7
      0014D7 4C 49 54 45 52 41 4C  3725         .ascii     "LITERAL"
      0014DE                       3726 LITER:
      0014DE CD 14 BC         [ 4] 3727         CALL     COMPI
      0014E1 04 71                 3728         .word DOLIT 
      0014E3 CC 14 77         [ 2] 3729         JP     COMMA
                                   3730 
                                   3731 ;       $,"     ( -- )
                                   3732 ;       Compile a literal string
                                   3733 ;       up to next " .
      0014E6 14 D6                 3734         .word      LINK
                           0014E8  3735 LINK = . 
      0014E8 03                    3736         .byte      3
      0014E9 24 2C 22              3737         .byte     '$',',','"'
      0014EC                       3738 STRCQ:
      0014EC CD 04 71         [ 4] 3739         CALL     DOLIT
      0014EF 00 22                 3740         .word     34	; "
      0014F1 CD 10 71         [ 4] 3741         CALL     PARSE
      0014F4 CD 0C 1D         [ 4] 3742         CALL     HERE
      0014F7 CD 0C DD         [ 4] 3743         CALL     PACKS   ;string to code dictionary
      0014FA CD 0C 06         [ 4] 3744         CALL     COUNT
      0014FD CD 07 C5         [ 4] 3745         CALL     PLUS    ;calculate aligned end of string
      001500 CD 06 F7         [ 4] 3746         CALL     VPP
      001503 CC 04 D8         [ 2] 3747         JP     STORE
                                   3748 
                                   3749 ;; Structures
                                   3750 
                                   3751 ;       FOR     ( -- a )
                                   3752 ;       Start a FOR-NEXT loop
                                   3753 ;       structure in a colon definition.
      001506 14 E8                 3754         .word      LINK
                           001508  3755 LINK = . 
      001508 83                    3756 	.byte      IMEDD+3
      001509 46 4F 52              3757         .ascii     "FOR"
      00150C                       3758 FOR:
      00150C CD 14 BC         [ 4] 3759         CALL     COMPI
      00150F 05 5F                 3760         .word TOR 
      001511 CC 0C 1D         [ 2] 3761         JP     HERE
                                   3762 
                                   3763 ;       NEXT    ( a -- )
                                   3764 ;       Terminate a FOR-NEXT loop.
      001514 15 08                 3765         .word      LINK
                           001516  3766 LINK = . 
      001516 84                    3767 	.byte      IMEDD+4
      001517 4E 45 58 54           3768         .ascii     "NEXT"
      00151B                       3769 NEXT:
      00151B CD 14 BC         [ 4] 3770         CALL     COMPI
      00151E 04 85                 3771         .word DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001520 CD 07 43         [ 4] 3772         call ADRADJ
      001523 CC 14 77         [ 2] 3773         JP     COMMA
                                   3774 
                                   3775 ;       I ( -- n )
                                   3776 ;       stack FOR-NEXT COUNTER 
      001526 15 16                 3777         .word LINK 
                           001528  3778         LINK=.
      001528 01                    3779         .byte 1 
      001529 49                    3780         .ascii "I"
      00152A                       3781 IFETCH: 
      00152A 1D 00 02         [ 2] 3782         subw x,#CELLL 
      00152D 16 03            [ 2] 3783         ldw y,(3,sp)
      00152F FF               [ 2] 3784         ldw (x),y 
      001530 81               [ 4] 3785         ret 
                                   3786 
                                   3787 ;       BEGIN   ( -- a )
                                   3788 ;       Start an infinite or
                                   3789 ;       indefinite loop structure.
      001531 15 28                 3790         .word      LINK
                           001533  3791 LINK = . 
      001533 85                    3792 	.byte      IMEDD+5
      001534 42 45 47 49 4E        3793         .ascii     "BEGIN"
      001539                       3794 BEGIN:
      001539 CC 0C 1D         [ 2] 3795         JP     HERE
                                   3796 
                                   3797 ;       UNTIL   ( a -- )
                                   3798 ;       Terminate a BEGIN-UNTIL
                                   3799 ;       indefinite loop structure.
      00153C 15 33                 3800         .word      LINK
                           00153E  3801 LINK = . 
      00153E 85                    3802 	.byte      IMEDD+5
      00153F 55 4E 54 49 4C        3803         .ascii     "UNTIL"
      001544                       3804 UNTIL:
      001544 CD 14 BC         [ 4] 3805         CALL     COMPI
      001547 04 A4                 3806         .word    QBRAN 
      001549 CD 07 43         [ 4] 3807         call ADRADJ
      00154C CC 14 77         [ 2] 3808         JP     COMMA
                                   3809 
                                   3810 ;       AGAIN   ( a -- )
                                   3811 ;       Terminate a BEGIN-AGAIN
                                   3812 ;       infinite loop structure.
      00154F 15 3E                 3813         .word      LINK
                           001551  3814 LINK = . 
      001551 85                    3815 	.byte      IMEDD+5
      001552 41 47 41 49 4E        3816         .ascii     "AGAIN"
      001557                       3817 AGAIN:
      001557 CD 14 BC         [ 4] 3818         CALL     COMPI
      00155A 04 BB                 3819         .word BRAN
      00155C CD 07 43         [ 4] 3820         call ADRADJ 
      00155F CC 14 77         [ 2] 3821         JP     COMMA
                                   3822 
                                   3823 ;       IF      ( -- A )
                                   3824 ;       Begin a conditional branch.
      001562 15 51                 3825         .word      LINK
                           001564  3826 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001564 82                    3827 	.byte      IMEDD+2
      001565 49 46                 3828         .ascii     "IF"
      001567                       3829 IFF:
      001567 CD 14 BC         [ 4] 3830         CALL     COMPI
      00156A 04 A4                 3831         .word QBRAN
      00156C CD 0C 1D         [ 4] 3832         CALL     HERE
      00156F CD 0B 2F         [ 4] 3833         CALL     ZERO
      001572 CC 14 77         [ 2] 3834         JP     COMMA
                                   3835 
                                   3836 ;       THEN        ( A -- )
                                   3837 ;       Terminate a conditional branch structure.
      001575 15 64                 3838         .word      LINK
                           001577  3839 LINK = . 
      001577 84                    3840 	.byte      IMEDD+4
      001578 54 48 45 4E           3841         .ascii     "THEN"
      00157C                       3842 THENN:
      00157C CD 0C 1D         [ 4] 3843         CALL     HERE
      00157F CD 07 43         [ 4] 3844         call ADRADJ 
      001582 CD 05 A6         [ 4] 3845         CALL     SWAPP
      001585 CC 04 D8         [ 2] 3846         JP     STORE
                                   3847 
                                   3848 ;       ELSE        ( A -- A )
                                   3849 ;       Start the false clause in an IF-ELSE-THEN structure.
      001588 15 77                 3850         .word      LINK
                           00158A  3851 LINK = . 
      00158A 84                    3852 	.byte      IMEDD+4
      00158B 45 4C 53 45           3853         .ascii     "ELSE"
      00158F                       3854 ELSEE:
      00158F CD 14 BC         [ 4] 3855         CALL     COMPI
      001592 04 BB                 3856         .word BRAN
      001594 CD 0C 1D         [ 4] 3857         CALL     HERE
      001597 CD 0B 2F         [ 4] 3858         CALL     ZERO
      00159A CD 14 77         [ 4] 3859         CALL     COMMA
      00159D CD 05 A6         [ 4] 3860         CALL     SWAPP
      0015A0 CD 0C 1D         [ 4] 3861         CALL     HERE
      0015A3 CD 07 43         [ 4] 3862         call ADRADJ 
      0015A6 CD 05 A6         [ 4] 3863         CALL     SWAPP
      0015A9 CC 04 D8         [ 2] 3864         JP     STORE
                                   3865 
                                   3866 ;       AHEAD       ( -- A )
                                   3867 ;       Compile a forward branch instruction.
      0015AC 15 8A                 3868         .word      LINK
                           0015AE  3869 LINK = . 
      0015AE 85                    3870 	.byte      IMEDD+5
      0015AF 41 48 45 41 44        3871         .ascii     "AHEAD"
      0015B4                       3872 AHEAD:
      0015B4 CD 14 BC         [ 4] 3873         CALL     COMPI
      0015B7 04 BB                 3874         .word BRAN
      0015B9 CD 0C 1D         [ 4] 3875         CALL     HERE
      0015BC CD 0B 2F         [ 4] 3876         CALL     ZERO
      0015BF CC 14 77         [ 2] 3877         JP     COMMA
                                   3878 
                                   3879 ;       WHILE       ( a -- A a )
                                   3880 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015C2 15 AE                 3881         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                           0015C4  3882 LINK = . 
      0015C4 85                    3883 	.byte      IMEDD+5
      0015C5 57 48 49 4C 45        3884         .ascii     "WHILE"
      0015CA                       3885 WHILE:
      0015CA CD 14 BC         [ 4] 3886         CALL     COMPI
      0015CD 04 A4                 3887         .word QBRAN
      0015CF CD 0C 1D         [ 4] 3888         CALL     HERE
      0015D2 CD 0B 2F         [ 4] 3889         CALL     ZERO
      0015D5 CD 14 77         [ 4] 3890         CALL     COMMA
      0015D8 CC 05 A6         [ 2] 3891         JP     SWAPP
                                   3892 
                                   3893 ;       REPEAT      ( A a -- )
                                   3894 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015DB 15 C4                 3895         .word      LINK
                           0015DD  3896 LINK = . 
      0015DD 86                    3897         .byte      IMEDD+6
      0015DE 52 45 50 45 41 54     3898         .ascii     "REPEAT"
      0015E4                       3899 REPEA:
      0015E4 CD 14 BC         [ 4] 3900         CALL     COMPI
      0015E7 04 BB                 3901         .word BRAN
      0015E9 CD 07 43         [ 4] 3902         call ADRADJ 
      0015EC CD 14 77         [ 4] 3903         CALL     COMMA
      0015EF CD 0C 1D         [ 4] 3904         CALL     HERE
      0015F2 CD 07 43         [ 4] 3905         call ADRADJ 
      0015F5 CD 05 A6         [ 4] 3906         CALL     SWAPP
      0015F8 CC 04 D8         [ 2] 3907         JP     STORE
                                   3908 
                                   3909 ;       AFT         ( a -- a A )
                                   3910 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0015FB 15 DD                 3911         .word      LINK
                           0015FD  3912 LINK = . 
      0015FD 83                    3913 	.byte      IMEDD+3
      0015FE 41 46 54              3914         .ascii     "AFT"
      001601                       3915 AFT:
      001601 CD 05 8C         [ 4] 3916         CALL     DROP
      001604 CD 15 B4         [ 4] 3917         CALL     AHEAD
      001607 CD 0C 1D         [ 4] 3918         CALL     HERE
      00160A CC 05 A6         [ 2] 3919         JP     SWAPP
                                   3920 
                                   3921 ;       ABORT"      ( -- ; <string> )
                                   3922 ;       Conditional abort with an error message.
      00160D 15 FD                 3923         .word      LINK
                           00160F  3924 LINK = . 
      00160F 86                    3925 	.byte      IMEDD+6
      001610 41 42 4F 52 54        3926         .ascii     "ABORT"
      001615 22                    3927         .byte      '"'
      001616                       3928 ABRTQ:
      001616 CD 14 BC         [ 4] 3929         CALL     COMPI
      001619 13 3A                 3930         .word ABORQ
      00161B CC 14 EC         [ 2] 3931         JP     STRCQ
                                   3932 
                                   3933 ;       $"     ( -- ; <string> )
                                   3934 ;       Compile an inline string literal.
      00161E 16 0F                 3935         .word      LINK
                           001620  3936 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001620 82                    3937 	.byte      IMEDD+2
      001621 24 22                 3938         .byte     '$','"'
      001623                       3939 STRQ:
      001623 CD 14 BC         [ 4] 3940         CALL     COMPI
      001626 0E F3                 3941         .word STRQP 
      001628 CC 14 EC         [ 2] 3942         JP     STRCQ
                                   3943 
                                   3944 ;       ."          ( -- ; <string> )
                                   3945 ;       Compile an inline string literal to be typed out at run time.
      00162B 16 20                 3946         .word      LINK
                           00162D  3947 LINK = . 
      00162D 82                    3948 	.byte      IMEDD+2
      00162E 2E 22                 3949         .byte     '.','"'
      001630                       3950 DOTQ:
      001630 CD 14 BC         [ 4] 3951         CALL     COMPI
      001633 0E FD                 3952         .word DOTQP 
      001635 CC 14 EC         [ 2] 3953         JP     STRCQ
                                   3954 
                                   3955 ;; Name compiler
                                   3956 
                                   3957 ;       ?UNIQUE ( a -- a )
                                   3958 ;       Display a warning message
                                   3959 ;       if word already exists.
      001638 16 2D                 3960         .word      LINK
                           00163A  3961 LINK = . 
      00163A 07                    3962         .byte      7
      00163B 3F 55 4E 49 51 55 45  3963         .ascii     "?UNIQUE"
      001642                       3964 UNIQU:
      001642 CD 05 96         [ 4] 3965         CALL     DUPP
      001645 CD 12 2E         [ 4] 3966         CALL     NAMEQ   ;?name exists
      001648 CD 04 A4         [ 4] 3967         CALL     QBRAN
      00164B 16 61                 3968         .word      UNIQ1
      00164D CD 0E FD         [ 4] 3969         CALL     DOTQP   ;redef are OK
      001650 07                    3970         .byte       7
      001651 20 72 65 44 65 66 20  3971         .ascii     " reDef "       
      001658 CD 05 C0         [ 4] 3972         CALL     OVER
      00165B CD 0C 06         [ 4] 3973         CALL     COUNT
      00165E CD 0E A0         [ 4] 3974         CALL     TYPES   ;just in case
      001661 CC 05 8C         [ 2] 3975 UNIQ1:  JP     DROP
                                   3976 
                                   3977 ;       $,n     ( na -- )
                                   3978 ;       Build a new dictionary name
                                   3979 ;       using string at na.
                                   3980 ; compile dans l'espace des variables 
      001664 16 3A                 3981         .word      LINK
                           001666  3982 LINK = . 
      001666 03                    3983         .byte      3
      001667 24 2C 6E              3984         .ascii     "$,n"
      00166A                       3985 SNAME:
      00166A CD 05 96         [ 4] 3986         CALL     DUPP
      00166D CD 05 0D         [ 4] 3987         CALL     CAT     ;?null input
      001670 CD 04 A4         [ 4] 3988         CALL     QBRAN
      001673 16 A0                 3989         .word      PNAM1
      001675 CD 16 42         [ 4] 3990         CALL     UNIQU   ;?redefinition
      001678 CD 05 96         [ 4] 3991         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00167B CD 0C 06         [ 4] 3992         CALL     COUNT
      00167E CD 07 C5         [ 4] 3993         CALL     PLUS
      001681 CD 06 F7         [ 4] 3994         CALL     VPP
      001684 CD 04 D8         [ 4] 3995         CALL     STORE
      001687 CD 05 96         [ 4] 3996         CALL     DUPP
      00168A CD 07 15         [ 4] 3997         CALL     LAST
      00168D CD 04 D8         [ 4] 3998         CALL     STORE   ;save na for vocabulary link
      001690 CD 0A A7         [ 4] 3999         CALL     CELLM   ;link address
      001693 CD 06 E9         [ 4] 4000         CALL     CNTXT
      001696 CD 04 EF         [ 4] 4001         CALL     AT
      001699 CD 05 A6         [ 4] 4002         CALL     SWAPP
      00169C CD 04 D8         [ 4] 4003         CALL     STORE
      00169F 81               [ 4] 4004         RET     ;save code pointer
      0016A0 CD 0E F3         [ 4] 4005 PNAM1:  CALL     STRQP
      0016A3 05                    4006         .byte      5
      0016A4 20 6E 61 6D 65        4007         .ascii     " name" ;null input
      0016A9 CC 13 42         [ 2] 4008         JP     ABOR1
                                   4009 
                                   4010 ;; FORTH compiler
                                   4011 
                                   4012 ;       $COMPILE        ( a -- )
                                   4013 ;       Compile next word to
                                   4014 ;       dictionary as a token or literal.
      0016AC 16 66                 4015         .word      LINK
                           0016AE  4016 LINK = . 
      0016AE 08                    4017         .byte      8
      0016AF 24 43 4F 4D 50 49 4C  4018         .ascii     "$COMPILE"
             45
      0016B7                       4019 SCOMP:
      0016B7 CD 12 2E         [ 4] 4020         CALL     NAMEQ
      0016BA CD 07 53         [ 4] 4021         CALL     QDUP    ;?defined
      0016BD CD 04 A4         [ 4] 4022         CALL     QBRAN
      0016C0 16 D8                 4023         .word      SCOM2
      0016C2 CD 04 EF         [ 4] 4024         CALL     AT
      0016C5 CD 04 71         [ 4] 4025         CALL     DOLIT
      0016C8 80 00                 4026         .word     0x8000	;  IMEDD*256
      0016CA CD 05 F5         [ 4] 4027         CALL     ANDD    ;?immediate
      0016CD CD 04 A4         [ 4] 4028         CALL     QBRAN
      0016D0 16 D5                 4029         .word      SCOM1
      0016D2 CC 04 CB         [ 2] 4030         JP     EXECU
      0016D5 CC 17 82         [ 2] 4031 SCOM1:  JP     JSRC
      0016D8 CD 24 36         [ 4] 4032 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016DB CD 07 53         [ 4] 4033         CALL    QDUP  
      0016DE CD 04 A4         [ 4] 4034         CALL     QBRAN
      0016E1 13 42                 4035         .word      ABOR1
      0016E3                       4036         _DOLIT  -1
      0016E3 CD 04 71         [ 4]    1     CALL DOLIT 
      0016E6 FF FF                    2     .word -1 
      0016E8 CD 08 66         [ 4] 4037         CALL    EQUAL
      0016EB                       4038         _QBRAN DLITER  
      0016EB CD 04 A4         [ 4]    1     CALL QBRAN
      0016EE 28 86                    2     .word DLITER
      0016F0 CC 14 DE         [ 2] 4039         JP     LITER
                                   4040 
                                   4041 ;       OVERT   ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4042 ;       Link a new word into vocabulary.
      0016F3 16 AE                 4043         .word      LINK
                           0016F5  4044 LINK = . 
      0016F5 05                    4045         .byte      5
      0016F6 4F 56 45 52 54        4046         .ascii     "OVERT"
      0016FB                       4047 OVERT:
      0016FB CD 07 15         [ 4] 4048         CALL     LAST
      0016FE CD 04 EF         [ 4] 4049         CALL     AT
      001701 CD 06 E9         [ 4] 4050         CALL     CNTXT
      001704 CC 04 D8         [ 2] 4051         JP     STORE
                                   4052 
                                   4053 ;       ;       ( -- )
                                   4054 ;       Terminate a colon definition.
      001707 16 F5                 4055         .word      LINK
                           001709  4056 LINK = . 
      001709 C1                    4057 	.byte      IMEDD+COMPO+1
      00170A 3B                    4058         .ascii     ";"
      00170B                       4059 SEMIS:
                           000001  4060 .if OPTIMIZE ; more compact and faster
      00170B CD 04 71         [ 4] 4061         call DOLIT 
      00170E 00 81                 4062         .word 0x81   ; opcode for RET 
      001710 CD 14 8E         [ 4] 4063         call CCOMMA 
                           000000  4064 .else
                                   4065         CALL     COMPI
                                   4066         .word EXIT 
                                   4067 .endif 
      001713 CD 13 A3         [ 4] 4068         CALL     LBRAC
      001716 CD 16 FB         [ 4] 4069         call OVERT 
      001719 CD 21 0B         [ 4] 4070         CALL FMOVE
      00171C CD 07 53         [ 4] 4071         call QDUP 
      00171F CD 04 A4         [ 4] 4072         call QBRAN 
      001722 18 52                 4073         .word SET_RAMLAST 
      001724 CD 21 9F         [ 4] 4074         CALL UPDATPTR
      001727 81               [ 4] 4075         RET 
                                   4076 
                                   4077 
                                   4078 ;       Terminate an ISR definition 
                                   4079 ;       retourn ca of ISR as double
                                   4080 ;       I; ( -- ud )
      001728 17 09                 4081         .word LINK 
                           00172A  4082         LINK=.
      00172A C2                    4083         .byte 2+IMEDD+COMPO 
      00172B 49 3B                 4084         .ascii "I;" 
      00172D                       4085 ISEMI:
      00172D 1D 00 02         [ 2] 4086         subw x,#CELLL  
      001730 90 AE 00 80      [ 2] 4087         ldw y,#IRET_CODE 
      001734 FF               [ 2] 4088         ldw (x),y 
      001735 CD 14 8E         [ 4] 4089         call CCOMMA
      001738 CD 13 A3         [ 4] 4090         call LBRAC 
      00173B CD 21 E4         [ 4] 4091         call IFMOVE
      00173E CD 07 53         [ 4] 4092         call QDUP 
      001741 CD 04 A4         [ 4] 4093         CALL QBRAN 
      001744 18 52                 4094         .word SET_RAMLAST
      001746 CD 07 05         [ 4] 4095         CALL CPP
      001749 CD 04 EF         [ 4] 4096         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00174C CD 05 A6         [ 4] 4097         call SWAPP 
      00174F CD 07 05         [ 4] 4098         CALL CPP 
      001752 CD 04 D8         [ 4] 4099         call STORE 
      001755 CD 1B 9C         [ 4] 4100         call UPDATCP 
      001758 CD 1B 59         [ 4] 4101         call EEPVP 
      00175B CD 05 8C         [ 4] 4102         call DROP 
      00175E CD 04 EF         [ 4] 4103         call AT 
      001761 CD 06 F7         [ 4] 4104         call VPP 
      001764 CD 04 D8         [ 4] 4105         call STORE 
      001767 CC 0B 2F         [ 2] 4106         jp ZERO
      00176A 81               [ 4] 4107         ret           
                                   4108         
                                   4109 
                                   4110 ;       ]       ( -- )
                                   4111 ;       Start compiling words in
                                   4112 ;       input stream.
      00176B 17 2A                 4113         .word      LINK
                           00176D  4114 LINK = . 
      00176D 01                    4115         .byte      1
      00176E 5D                    4116         .ascii     "]"
      00176F                       4117 RBRAC:
      00176F CD 04 71         [ 4] 4118         CALL   DOLIT
      001772 16 B7                 4119         .word  SCOMP
      001774 CD 06 C7         [ 4] 4120         CALL   TEVAL
      001777 CC 04 D8         [ 2] 4121         JP     STORE
                                   4122 
                                   4123 ;       CALL,    ( ca -- )
                                   4124 ;       Compile a subroutine call.
      00177A 17 6D                 4125         .word      LINK
                           00177C  4126 LINK = . 
      00177C 05                    4127         .byte      5
      00177D 43 41 4C 4C 2C        4128         .ascii     "CALL,"
      001782                       4129 JSRC:
      001782 CD 04 71         [ 4] 4130         CALL     DOLIT
      001785 00 CD                 4131         .word     CALLL     ;CALL
      001787 CD 14 8E         [ 4] 4132         CALL     CCOMMA
      00178A CC 14 77         [ 2] 4133         JP     COMMA
                                   4134 
                                   4135 ;       INIT-OFS ( -- )
                                   4136 ;       compute offset to adjust jump address 
                                   4137 ;       set variable OFFSET 
      00178D 17 7C                 4138         .word LINK 
                           00178F  4139         LINK=.
      00178F 08                    4140         .byte 8 
      001790 49 4E 49 54 2D 4F 46  4141         .ascii "INIT-OFS" 
             53
      001798                       4142 INITOFS:
      001798 CD 06 B6         [ 4] 4143         call TFLASH 
      00179B CD 04 EF         [ 4] 4144         CALL AT 
      00179E CD 05 96         [ 4] 4145         CALL DUPP 
      0017A1 CD 04 A4         [ 4] 4146         call QBRAN
      0017A4 17 B5                 4147         .word 1$
      0017A6 CD 05 8C         [ 4] 4148         call DROP  
      0017A9 CD 07 05         [ 4] 4149         call CPP 
      0017AC CD 04 EF         [ 4] 4150         call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0017AF CD 0C 1D         [ 4] 4151         call HERE
      0017B2 CD 08 3E         [ 4] 4152         call SUBB 
      0017B5 CD 07 3A         [ 4] 4153 1$:     call OFFSET 
      0017B8 CC 04 D8         [ 2] 4154         jp STORE  
                                   4155 
                                   4156 ;       :       ( -- ; <string> )
                                   4157 ;       Start a new colon definition
                                   4158 ;       using next word as its name.
      0017BB 17 8F                 4159         .word      LINK
                           0017BD  4160 LINK = . 
      0017BD 01                    4161         .byte      1
      0017BE 3A                    4162         .ascii     ":"
      0017BF                       4163 COLON:
      0017BF CD 17 98         [ 4] 4164         call INITOFS       
      0017C2 CD 11 31         [ 4] 4165         CALL   TOKEN
      0017C5 CD 16 6A         [ 4] 4166         CALL   SNAME
      0017C8 CC 17 6F         [ 2] 4167         JP     RBRAC
                                   4168 
                                   4169 ;       I:  ( -- )
                                   4170 ;       Start interrupt service routine definition
                                   4171 ;       those definition have no name.
      0017CB 17 BD                 4172         .word LINK
                           0017CD  4173         LINK=.
      0017CD 02                    4174         .byte 2 
      0017CE 49 3A                 4175         .ascii "I:" 
      0017D0                       4176 ICOLON:
      0017D0 CD 17 98         [ 4] 4177         call INITOFS 
      0017D3 CC 17 6F         [ 2] 4178         jp RBRAC  
                                   4179 
                                   4180 ;       IMMEDIATE       ( -- )
                                   4181 ;       Make last compiled word
                                   4182 ;       an immediate word.
      0017D6 17 CD                 4183         .word      LINK
                           0017D8  4184 LINK = . 
      0017D8 09                    4185         .byte      9
      0017D9 49 4D 4D 45 44 49 41  4186         .ascii     "IMMEDIATE"
             54 45
      0017E2                       4187 IMMED:
      0017E2 CD 04 71         [ 4] 4188         CALL     DOLIT
      0017E5 80 00                 4189         .word     0x8000	;  IMEDD*256
      0017E7 CD 07 15         [ 4] 4190         CALL     LAST
      0017EA CD 04 EF         [ 4] 4191         CALL     AT
      0017ED CD 04 EF         [ 4] 4192         CALL     AT
      0017F0 CD 06 09         [ 4] 4193         CALL     ORR
      0017F3 CD 07 15         [ 4] 4194         CALL     LAST
      0017F6 CD 04 EF         [ 4] 4195         CALL     AT
      0017F9 CC 04 D8         [ 2] 4196         JP     STORE
                                   4197 
                                   4198 ;; Defining words
                                   4199 
                                   4200 ;       CREATE  ( -- ; <string> )
                                   4201 ;       Compile a new array
                                   4202 ;       without allocating space.
      0017FC 17 D8                 4203         .word      LINK
                           0017FE  4204 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017FE 06                    4205         .byte      6
      0017FF 43 52 45 41 54 45     4206         .ascii     "CREATE"
      001805                       4207 CREAT:
      001805 CD 11 31         [ 4] 4208         CALL     TOKEN
      001808 CD 16 6A         [ 4] 4209         CALL     SNAME
      00180B CD 16 FB         [ 4] 4210         CALL     OVERT        
      00180E CD 14 BC         [ 4] 4211         CALL     COMPI 
      001811 06 56                 4212         .word DOVAR 
      001813 81               [ 4] 4213         RET
                                   4214 
                                   4215 ;       VARIABLE        ( -- ; <string> )
                                   4216 ;       Compile a new variable
                                   4217 ;       initialized to 0.
      001814 17 FE                 4218         .word      LINK
                           001816  4219 LINK = . 
      001816 08                    4220         .byte      8
      001817 56 41 52 49 41 42 4C  4221         .ascii     "VARIABLE"
             45
      00181F                       4222 VARIA:
                                   4223 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00181F CD 0C 1D         [ 4] 4224         CALL HERE
      001822 CD 05 96         [ 4] 4225         CALL DUPP 
      001825 CD 0A 98         [ 4] 4226         CALL CELLP
      001828 CD 06 F7         [ 4] 4227         CALL VPP 
      00182B CD 04 D8         [ 4] 4228         CALL STORE
      00182E CD 18 05         [ 4] 4229         CALL CREAT
      001831 CD 05 96         [ 4] 4230         CALL DUPP
      001834 CD 14 77         [ 4] 4231         CALL COMMA
      001837 CD 0B 2F         [ 4] 4232         CALL ZERO
      00183A CD 05 A6         [ 4] 4233         call SWAPP 
      00183D CD 04 D8         [ 4] 4234         CALL STORE
      001840 CD 21 0B         [ 4] 4235         CALL FMOVE ; move definition to FLASH
      001843 CD 07 53         [ 4] 4236         CALL QDUP 
      001846 CD 04 A4         [ 4] 4237         CALL QBRAN 
      001849 18 52                 4238         .word SET_RAMLAST   
      00184B CD 1B B3         [ 4] 4239         call UPDATVP  ; don't update if variable kept in RAM.
      00184E CD 21 9F         [ 4] 4240         CALL UPDATPTR
      001851 81               [ 4] 4241         RET         
      001852                       4242 SET_RAMLAST: 
      001852 CD 07 15         [ 4] 4243         CALL LAST 
      001855 CD 04 EF         [ 4] 4244         CALL AT 
      001858 CD 07 28         [ 4] 4245         CALL RAMLAST 
      00185B CC 04 D8         [ 2] 4246         jp STORE  
                                   4247 
                                   4248 
                                   4249 ;       CONSTANT  ( n -- ; <string> )
                                   4250 ;       Compile a new constant 
                                   4251 ;       n CONSTANT name 
      00185E 18 16                 4252         .word LINK 
                           001860  4253         LINK=. 
      001860 08                    4254         .byte 8 
      001861 43 4F 4E 53 54 41 4E  4255         .ascii "CONSTANT" 
             54
      001869                       4256 CONSTANT:          
      001869 CD 11 31         [ 4] 4257         CALL TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00186C CD 16 6A         [ 4] 4258         CALL SNAME 
      00186F CD 16 FB         [ 4] 4259         CALL OVERT 
      001872 CD 14 BC         [ 4] 4260         CALL COMPI 
      001875 18 89                 4261         .word DOCONST
      001877 CD 14 77         [ 4] 4262         CALL COMMA 
      00187A CD 21 0B         [ 4] 4263         CALL FMOVE
      00187D CD 07 53         [ 4] 4264         CALL QDUP 
      001880 CD 04 A4         [ 4] 4265         CALL QBRAN 
      001883 18 52                 4266         .word SET_RAMLAST  
      001885 CD 21 9F         [ 4] 4267         CALL UPDATPTR  
      001888 81               [ 4] 4268 1$:     RET          
                                   4269 
                                   4270 ; CONSTANT runtime semantic 
                                   4271 ; doCONST  ( -- n )
                                   4272 ;        .word LINK 
                                   4273 ;        LINK=.
                                   4274 ;        .byte 7
                                   4275 ;        .ascii "DOCONST"
      001889                       4276 DOCONST:
      001889 1D 00 02         [ 2] 4277         subw x,#CELLL
      00188C 90 85            [ 2] 4278         popw y 
      00188E 90 FE            [ 2] 4279         ldw y,(y) 
      001890 FF               [ 2] 4280         ldw (x),y 
      001891 81               [ 4] 4281         ret 
                                   4282 
                                   4283 ;----------------------------------
                                   4284 ; create double constant 
                                   4285 ; 2CONSTANT ( d -- ; <string> )
                                   4286 ;----------------------------------
      001892 18 60                 4287     .word LINK 
                           001894  4288     LINK=.
      001894 09                    4289     .byte 9 
      001895 32 43 4F 4E 53 54 41  4290     .ascii "2CONSTANT"
             4E 54
      00189E                       4291 DCONST:
      00189E CD 11 31         [ 4] 4292         CALL TOKEN
      0018A1 CD 16 6A         [ 4] 4293         CALL SNAME 
      0018A4 CD 16 FB         [ 4] 4294         CALL OVERT 
      0018A7 CD 14 BC         [ 4] 4295         CALL COMPI 
      0018AA 18 C1                 4296         .word DO_DCONST
      0018AC CD 14 77         [ 4] 4297         CALL COMMA
      0018AF CD 14 77         [ 4] 4298         CALL COMMA  
      0018B2 CD 21 0B         [ 4] 4299         CALL FMOVE
      0018B5 CD 07 53         [ 4] 4300         CALL QDUP 
      0018B8 CD 04 A4         [ 4] 4301         CALL QBRAN 
      0018BB 18 52                 4302         .word SET_RAMLAST  
      0018BD CD 21 9F         [ 4] 4303         CALL UPDATPTR  
      0018C0 81               [ 4] 4304 1$:     RET          
                                   4305     
                                   4306 ;----------------------------------
                                   4307 ; runtime for DCONST 
                                   4308 ; stack double constant 
                                   4309 ; DO-DCONST ( -- d )
                                   4310 ;-----------------------------------
                                   4311 ;        .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4312 ;        LINK=.
                                   4313 ;        .byte 9 
                                   4314 ;        .ascii "DO-DCONST"
      0018C1                       4315 DO_DCONST:
      0018C1 90 85            [ 2] 4316     popw y 
      0018C3 90 BF 26         [ 2] 4317     ldw YTEMP,y 
      0018C6 1D 00 04         [ 2] 4318     subw x,#2*CELLL 
      0018C9 90 FE            [ 2] 4319     ldw y,(y)
      0018CB FF               [ 2] 4320     ldw (x),y 
      0018CC 90 BE 26         [ 2] 4321     ldw y,YTEMP 
      0018CF 90 EE 02         [ 2] 4322     ldw y,(2,y)
      0018D2 EF 02            [ 2] 4323     ldw (2,x),y 
      0018D4 81               [ 4] 4324     ret 
                                   4325 
                                   4326 ;; Tools
                                   4327 
                                   4328 ;       _TYPE   ( b u -- )
                                   4329 ;       Display a string. Filter
                                   4330 ;       non-printing characters.
      0018D5 18 94                 4331         .word      LINK
                           0018D7  4332 LINK = . 
      0018D7 05                    4333         .byte      5
      0018D8 5F 54 59 50 45        4334         .ascii     "_TYPE"
      0018DD                       4335 UTYPE:
      0018DD CD 05 5F         [ 4] 4336         CALL     TOR     ;start count down loop
      0018E0 20 0F            [ 2] 4337         JRA     UTYP2   ;skip first pass
      0018E2 CD 05 96         [ 4] 4338 UTYP1:  CALL     DUPP
      0018E5 CD 05 0D         [ 4] 4339         CALL     CAT
      0018E8 CD 0B 59         [ 4] 4340         CALL     TCHAR
      0018EB CD 04 36         [ 4] 4341         CALL     EMIT    ;display only printable
      0018EE CD 0A C3         [ 4] 4342         CALL     ONEP    ;increment address
      0018F1 CD 04 85         [ 4] 4343 UTYP2:  CALL     DONXT
      0018F4 18 E2                 4344         .word      UTYP1   ;loop till done
      0018F6 CC 05 8C         [ 2] 4345         JP     DROP
                                   4346 
                                   4347 ;       dm+     ( a u -- a )
                                   4348 ;       Dump u bytes from ,
                                   4349 ;       leaving a+u on  stack.
      0018F9 18 D7                 4350         .word      LINK
                           0018FB  4351 LINK = . 
      0018FB 03                    4352         .byte      3
      0018FC 64 6D 2B              4353         .ascii     "dm+"
      0018FF                       4354 DUMPP:
      0018FF CD 05 C0         [ 4] 4355         CALL     OVER
      001902 CD 04 71         [ 4] 4356         CALL     DOLIT
      001905 00 04                 4357         .word      4
      001907 CD 0F 26         [ 4] 4358         CALL     UDOTR   ;display address
      00190A CD 0E 76         [ 4] 4359         CALL     SPACE
      00190D CD 05 5F         [ 4] 4360         CALL     TOR     ;start count down loop
      001910 20 11            [ 2] 4361         JRA     PDUM2   ;skip first pass
      001912 CD 05 96         [ 4] 4362 PDUM1:  CALL     DUPP
      001915 CD 05 0D         [ 4] 4363         CALL     CAT
      001918 CD 04 71         [ 4] 4364         CALL     DOLIT
      00191B 00 03                 4365         .word      3
      00191D CD 0F 26         [ 4] 4366         CALL     UDOTR   ;display numeric data
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001920 CD 0A C3         [ 4] 4367         CALL     ONEP    ;increment address
      001923 CD 04 85         [ 4] 4368 PDUM2:  CALL     DONXT
      001926 19 12                 4369         .word      PDUM1   ;loop till done
      001928 81               [ 4] 4370         RET
                                   4371 
                                   4372 ;       DUMP    ( a u -- )
                                   4373 ;       Dump u bytes from a,
                                   4374 ;       in a formatted manner.
      001929 18 FB                 4375         .word      LINK
                           00192B  4376 LINK = . 
      00192B 04                    4377         .byte      4
      00192C 44 55 4D 50           4378         .ascii     "DUMP"
      001930                       4379 DUMP:
      001930 CD 06 66         [ 4] 4380         CALL     BASE
      001933 CD 04 EF         [ 4] 4381         CALL     AT
      001936 CD 05 5F         [ 4] 4382         CALL     TOR
      001939 CD 0D D5         [ 4] 4383         CALL     HEX     ;save radix, set hex
      00193C CD 04 71         [ 4] 4384         CALL     DOLIT
      00193F 00 10                 4385         .word      16
      001941 CD 09 E9         [ 4] 4386         CALL     SLASH   ;change count to lines
      001944 CD 05 5F         [ 4] 4387         CALL     TOR     ;start count down loop
      001947 CD 0E BE         [ 4] 4388 DUMP1:  CALL     CR
      00194A CD 04 71         [ 4] 4389         CALL     DOLIT
      00194D 00 10                 4390         .word      16
      00194F CD 07 B0         [ 4] 4391         CALL     DDUP
      001952 CD 18 FF         [ 4] 4392         CALL     DUMPP   ;display numeric
      001955 CD 07 64         [ 4] 4393         CALL     ROT
      001958 CD 07 64         [ 4] 4394         CALL     ROT
      00195B CD 0E 76         [ 4] 4395         CALL     SPACE
      00195E CD 0E 76         [ 4] 4396         CALL     SPACE
      001961 CD 18 DD         [ 4] 4397         CALL     UTYPE   ;display printable characters
      001964 CD 04 85         [ 4] 4398         CALL     DONXT
      001967 19 47                 4399         .word      DUMP1   ;loop till done
      001969 CD 05 8C         [ 4] 4400 DUMP3:  CALL     DROP
      00196C CD 05 40         [ 4] 4401         CALL     RFROM
      00196F CD 06 66         [ 4] 4402         CALL     BASE
      001972 CC 04 D8         [ 2] 4403         JP     STORE   ;restore radix
                                   4404 
                                   4405 ;       .S      ( ... -- ... )
                                   4406 ;        Display  contents of stack.
      001975 19 2B                 4407         .word      LINK
                           001977  4408 LINK = . 
      001977 02                    4409         .byte      2
      001978 2E 53                 4410         .ascii     ".S"
      00197A                       4411 DOTS:
      00197A CD 0E BE         [ 4] 4412         CALL     CR
      00197D CD 0B 71         [ 4] 4413         CALL     DEPTH   ;stack depth
      001980 CD 05 5F         [ 4] 4414         CALL     TOR     ;start count down loop
      001983 20 09            [ 2] 4415         JRA     DOTS2   ;skip first pass
      001985 CD 05 53         [ 4] 4416 DOTS1:  CALL     RAT
      001988 CD 0B 88         [ 4] 4417 	CALL     PICK
      00198B CD 0F 77         [ 4] 4418         CALL     DOT     ;index stack, display contents
      00198E CD 04 85         [ 4] 4419 DOTS2:  CALL     DONXT
      001991 19 85                 4420         .word      DOTS1   ;loop till done
      001993 CD 0E FD         [ 4] 4421         CALL     DOTQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001996 05                    4422         .byte      5
      001997 20 3C 73 70 20        4423         .ascii     " <sp "
      00199C 81               [ 4] 4424         RET
                                   4425 
                                   4426 ;       >NAME   ( ca -- na | F )
                                   4427 ;       Convert code address
                                   4428 ;       to a name address.
      00199D 19 77                 4429         .word      LINK
                           00199F  4430 LINK = . 
      00199F 05                    4431         .byte      5
      0019A0 3E 4E 41 4D 45        4432         .ascii     ">NAME"
      0019A5                       4433 TNAME:
      0019A5 CD 06 E9         [ 4] 4434         CALL     CNTXT   ;vocabulary link
      0019A8 CD 04 EF         [ 4] 4435 TNAM2:  CALL     AT
      0019AB CD 05 96         [ 4] 4436         CALL     DUPP    ;?last word in a vocabulary
      0019AE CD 04 A4         [ 4] 4437         CALL     QBRAN
      0019B1 19 CC                 4438         .word      TNAM4
      0019B3 CD 07 B0         [ 4] 4439         CALL     DDUP
      0019B6 CD 11 3F         [ 4] 4440         CALL     NAMET
      0019B9 CD 06 1E         [ 4] 4441         CALL     XORR    ;compare
      0019BC CD 04 A4         [ 4] 4442         CALL     QBRAN
      0019BF 19 C6                 4443         .word      TNAM3
      0019C1 CD 0A A7         [ 4] 4444         CALL     CELLM   ;continue with next word
      0019C4 20 E2            [ 2] 4445         JRA     TNAM2
      0019C6 CD 05 A6         [ 4] 4446 TNAM3:  CALL     SWAPP
      0019C9 CC 05 8C         [ 2] 4447         JP     DROP
      0019CC CD 07 A5         [ 4] 4448 TNAM4:  CALL     DDROP
      0019CF CC 0B 2F         [ 2] 4449         JP     ZERO
                                   4450 
                                   4451 ;       .ID     ( na -- )
                                   4452 ;        Display  name at address.
      0019D2 19 9F                 4453         .word      LINK
                           0019D4  4454 LINK = . 
      0019D4 03                    4455         .byte      3
      0019D5 2E 49 44              4456         .ascii     ".ID"
      0019D8                       4457 DOTID:
      0019D8 CD 07 53         [ 4] 4458         CALL     QDUP    ;if zero no name
      0019DB CD 04 A4         [ 4] 4459         CALL     QBRAN
      0019DE 19 EE                 4460         .word      DOTI1
      0019E0 CD 0C 06         [ 4] 4461         CALL     COUNT
      0019E3 CD 04 71         [ 4] 4462         CALL     DOLIT
      0019E6 00 1F                 4463         .word      0x1F
      0019E8 CD 05 F5         [ 4] 4464         CALL     ANDD    ;mask lexicon bits
      0019EB CC 18 DD         [ 2] 4465         JP     UTYPE
      0019EE CD 0E FD         [ 4] 4466 DOTI1:  CALL     DOTQP
      0019F1 09                    4467         .byte      9
      0019F2 20 6E 6F 4E 61 6D 65  4468         .ascii     " noName"
      0019F9 81               [ 4] 4469         RET
                                   4470 
                           000000  4471 WANT_SEE=0
                           000000  4472 .if WANT_SEE 
                                   4473 ;       SEE     ( -- ; <string> )
                                   4474 ;       A simple decompiler.
                                   4475 ;       Updated for byte machines.
                                   4476         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4477 LINK = . 
                                   4478         .byte      3
                                   4479         .ascii     "SEE"
                                   4480 SEE:
                                   4481         CALL     TICK    ;starting address
                                   4482         CALL     CR
                                   4483         CALL     ONEM
                                   4484 SEE1:   CALL     ONEP
                                   4485         CALL     DUPP
                                   4486         CALL     AT
                                   4487         CALL     DUPP
                                   4488         CALL     QBRAN
                                   4489         .word    SEE2
                                   4490         CALL     TNAME   ;?is it a name
                                   4491 SEE2:   CALL     QDUP    ;name address or zero
                                   4492         CALL     QBRAN
                                   4493         .word    SEE3
                                   4494         CALL     SPACE
                                   4495         CALL     DOTID   ;display name
                                   4496         CALL     ONEP
                                   4497         JRA      SEE4
                                   4498 SEE3:   CALL     DUPP
                                   4499         CALL     CAT
                                   4500         CALL     UDOT    ;display number
                                   4501 SEE4:   CALL     NUFQ    ;user control
                                   4502         CALL     QBRAN
                                   4503         .word    SEE1
                                   4504         JP     DROP
                                   4505 .endif ; WANT_SEE 
                                   4506 
                                   4507 ;       WORDS   ( -- )
                                   4508 ;       Display names in vocabulary.
      0019FA 19 D4                 4509         .word      LINK
                           0019FC  4510 LINK = . 
      0019FC 05                    4511         .byte      5
      0019FD 57 4F 52 44 53        4512         .ascii     "WORDS"
      001A02                       4513 WORDS:
      001A02 CD 0E BE         [ 4] 4514         CALL     CR
      001A05 CD 06 E9         [ 4] 4515         CALL     CNTXT   ;only in context
      001A08 CD 04 EF         [ 4] 4516 WORS1:  CALL     AT
      001A0B CD 07 53         [ 4] 4517         CALL     QDUP    ;?at end of list
      001A0E CD 04 A4         [ 4] 4518         CALL     QBRAN
      001A11 1A 24                 4519         .word      WORS2
      001A13 CD 05 96         [ 4] 4520         CALL     DUPP
      001A16 CD 0E 76         [ 4] 4521         CALL     SPACE
      001A19 CD 19 D8         [ 4] 4522         CALL     DOTID   ;display a name
      001A1C CD 0A A7         [ 4] 4523         CALL     CELLM
      001A1F CD 04 BB         [ 4] 4524         CALL     BRAN
      001A22 1A 08                 4525         .word      WORS1
      001A24 81               [ 4] 4526 WORS2:  RET
                                   4527 
                                   4528         
                                   4529 ;; Hardware reset
                                   4530 
                                   4531 ;       hi      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4532 ;       Display sign-on message.
      001A25 19 FC                 4533         .word      LINK
                           001A27  4534 LINK = . 
      001A27 02                    4535         .byte      2
      001A28 68 69                 4536         .ascii     "hi"
      001A2A                       4537 HI:
      001A2A CD 0E BE         [ 4] 4538         CALL     CR
      001A2D CD 0E FD         [ 4] 4539         CALL     DOTQP   ;initialize I/O
      001A30 0F                    4540         .byte      15
      001A31 73 74 6D 38 65 46 6F  4541         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A3D 33                    4542 	.byte      VER+'0'
      001A3E 2E                    4543         .byte      '.' 
      001A3F 30                    4544 	.byte      EXT+'0' ;version
      001A40 CD 0E FD         [ 4] 4545         CALL    DOTQP
                           000001  4546 .if NUCLEO          
      001A43 12                    4547         .byte 18
      001A44 20 6F 6E 20 4E 55 43  4548         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4549 .endif
                           000000  4550 .if DISCOVERY
                                   4551         .byte 19
                                   4552         .ascii  " on STM8S-DISCOVERY"
                                   4553 .endif
                           000000  4554 .if DOORBELL
                                   4555         .byte 16
                                   4556         .ascii " on stm8s105k6b6"
                                   4557 .endif
      001A56 CC 0E BE         [ 2] 4558         JP     CR
                                   4559 
                           000000  4560 WANT_DEBUG=0
                           000000  4561 .if WANT_DEBUG 
                                   4562 ;       DEBUG      ( -- )
                                   4563 ;       Display sign-on message.
                                   4564 ;        .word      LINK
                                   4565 LINK = . 
                                   4566         .byte      5
                                   4567         .ascii     "DEBUG"
                                   4568 DEBUG:
                                   4569 	CALL DOLIT
                                   4570 	.word 0x65
                                   4571 	CALL EMIT
                                   4572 	CALL DOLIT
                                   4573 	.word 0
                                   4574  	CALL ZLESS 
                                   4575 	CALL DOLIT
                                   4576 	.word 0xFFFE
                                   4577 	CALL ZLESS 
                                   4578 	CALL UPLUS 
                                   4579  	CALL DROP 
                                   4580 	CALL DOLIT
                                   4581 	.word 3
                                   4582 	CALL UPLUS 
                                   4583 	CALL UPLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4584  	CALL DROP
                                   4585 	CALL DOLIT
                                   4586 	.word 0x43
                                   4587 	CALL UPLUS 
                                   4588  	CALL DROP
                                   4589 	CALL EMIT
                                   4590 	CALL DOLIT
                                   4591 	.word 0x4F
                                   4592 	CALL DOLIT
                                   4593 	.word 0x6F
                                   4594  	CALL XORR
                                   4595 	CALL DOLIT
                                   4596 	.word 0xF0
                                   4597  	CALL ANDD
                                   4598 	CALL DOLIT
                                   4599 	.word 0x4F
                                   4600  	CALL ORR
                                   4601 	CALL EMIT
                                   4602 	CALL DOLIT
                                   4603 	.word 8
                                   4604 	CALL DOLIT
                                   4605 	.word 6
                                   4606  	CALL SWAPP
                                   4607 	CALL OVER
                                   4608 	CALL XORR
                                   4609 	CALL DOLIT
                                   4610 	.word 3
                                   4611 	CALL ANDD 
                                   4612 	CALL ANDD
                                   4613 	CALL DOLIT
                                   4614 	.word 0x70
                                   4615 	CALL UPLUS 
                                   4616 	CALL DROP
                                   4617 	CALL EMIT
                                   4618 	CALL DOLIT
                                   4619 	.word 0
                                   4620 	CALL QBRAN
                                   4621 	.word DEBUG1
                                   4622 	CALL DOLIT
                                   4623 	.word 0x3F
                                   4624 DEBUG1:
                                   4625 	CALL DOLIT
                                   4626 	.word 0xFFFF
                                   4627 	CALL QBRAN
                                   4628 	.word DEBUG2
                                   4629 	CALL DOLIT
                                   4630 	.word 0x74
                                   4631 	CALL BRAN
                                   4632 	.word DEBUG3
                                   4633 DEBUG2:
                                   4634 	CALL DOLIT
                                   4635 	.word 0x21
                                   4636 DEBUG3:
                                   4637 	CALL EMIT
                                   4638 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4639 	.word 0x68
                                   4640 	CALL DOLIT
                                   4641 	.word 0x80
                                   4642 	CALL STORE
                                   4643 	CALL DOLIT
                                   4644 	.word 0x80
                                   4645 	CALL AT
                                   4646 	CALL EMIT
                                   4647 	CALL DOLIT
                                   4648 	.word 0x4D
                                   4649 	CALL TOR
                                   4650 	CALL RAT
                                   4651 	CALL RFROM
                                   4652 	CALL ANDD
                                   4653 	CALL EMIT
                                   4654 	CALL DOLIT
                                   4655 	.word 0x61
                                   4656 	CALL DOLIT
                                   4657 	.word 0xA
                                   4658 	CALL TOR
                                   4659 DEBUG4:
                                   4660 	CALL DOLIT
                                   4661 	.word 1
                                   4662 	CALL UPLUS 
                                   4663 	CALL DROP
                                   4664 	CALL DONXT
                                   4665 	.word DEBUG4
                                   4666 	CALL EMIT
                                   4667 	CALL DOLIT
                                   4668 	.word 0x656D
                                   4669 	CALL DOLIT
                                   4670 	.word 0x100
                                   4671 	CALL UMSTA
                                   4672 	CALL SWAPP
                                   4673 	CALL DOLIT
                                   4674 	.word 0x100
                                   4675 	CALL UMSTA
                                   4676 	CALL SWAPP 
                                   4677 	CALL DROP
                                   4678 	CALL EMIT
                                   4679 	CALL EMIT
                                   4680 	CALL DOLIT
                                   4681 	.word 0x2043
                                   4682 	CALL DOLIT
                                   4683 	.word 0
                                   4684 	CALL DOLIT
                                   4685 	.word 0x100
                                   4686 	CALL UMMOD
                                   4687 	CALL EMIT
                                   4688 	CALL EMIT
                                   4689 	;JP ORIG
                                   4690 	RET
                                   4691 .endif ; WANT_DEBUG 
                                   4692 
                                   4693 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4694 ;       'BOOT   ( -- a )
                                   4695 ;       The application startup vector.
      001A59 1A 27                 4696         .word      LINK
                           001A5B  4697 LINK = . 
      001A5B 05                    4698         .byte      5
      001A5C 27 42 4F 4F 54        4699         .ascii     "'BOOT"
      001A61                       4700 TBOOT:
      001A61 CD 06 56         [ 4] 4701         CALL     DOVAR
      001A64 40 02                 4702         .word    APP_RUN      ;application to boot
                                   4703 
                                   4704 ;       COLD    ( -- )
                                   4705 ;       The hilevel cold start s=ence.
      001A66 1A 5B                 4706         .word      LINK
                           001A68  4707         LINK = . 
      001A68 04                    4708         .byte      4
      001A69 43 4F 4C 44           4709         .ascii     "COLD"
      001A6D                       4710 COLD:
                           000000  4711 .if WANT_DEBUG
                                   4712         CALL DEBUG
                                   4713 .endif ; WANT_DEBUG
      001A6D CD 04 71         [ 4] 4714 COLD1:  CALL     DOLIT
      001A70 00 2B                 4715         .word      UZERO
      001A72 CD 04 71         [ 4] 4716 	CALL     DOLIT
      001A75 00 06                 4717         .word      UPP
      001A77 CD 04 71         [ 4] 4718         CALL     DOLIT
      001A7A 00 1C                 4719 	.word      UEND-UZERO
      001A7C CD 0C 6A         [ 4] 4720         CALL     CMOVE   ;initialize user area
                           000001  4721 .if WANT_FLOAT 
      001A7F CD 2B B5         [ 4] 4722         CALL    FINIT 
                                   4723 .endif 
                                   4724 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A82 90 CE 40 02      [ 2] 4725         ldw y,APP_RUN 
      001A86 26 0B            [ 1] 4726         jrne 0$
      001A88 1D 00 02         [ 2] 4727         subw x,#CELLL 
      001A8B 90 AE 1A 2A      [ 2] 4728         ldw y,#HI  
      001A8F FF               [ 2] 4729         ldw (x),y
      001A90 CD 1B 8B         [ 4] 4730         call UPDATRUN 
      001A93                       4731 0$:        
                                   4732 ; update LAST with APP_LAST 
                                   4733 ; if APP_LAST > LAST else do the opposite
      001A93 90 CE 40 00      [ 2] 4734         ldw y,APP_LAST 
      001A97 90 B3 1C         [ 2] 4735         cpw y,ULAST 
      001A9A 22 05            [ 1] 4736         jrugt 1$ 
                                   4737 ; save LAST at APP_LAST  
      001A9C CD 1B 73         [ 4] 4738         call UPDATLAST 
      001A9F 20 06            [ 2] 4739         jra 2$
      001AA1                       4740 1$: ; update LAST with APP_LAST 
      001AA1 90 BF 1C         [ 2] 4741         ldw ULAST,y
      001AA4 90 BF 16         [ 2] 4742         ldw UCNTXT,y
      001AA7                       4743 2$:  
                                   4744 ; update APP_CP if < app_space 
      001AA7 90 CE 40 04      [ 2] 4745         ldw y,APP_CP  
      001AAB 90 B3 1A         [ 2] 4746         cpw y,UCP   
      001AAE 24 06            [ 1] 4747         jruge 3$ 
      001AB0 CD 1B 9C         [ 4] 4748         call UPDATCP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AB3 90 BE 1A         [ 2] 4749         ldw y,UCP   
      001AB6                       4750 3$:
      001AB6 90 BF 1A         [ 2] 4751         ldw UCP,y                 
                                   4752 ; update UVP with APP_VP  
                                   4753 ; if APP_VP>UVP else do the opposite 
      001AB9 90 CE 40 06      [ 2] 4754         ldw y,APP_VP 
      001ABD 90 B3 18         [ 2] 4755         cpw y,UVP 
      001AC0 22 05            [ 1] 4756         jrugt 4$
      001AC2 CD 1B B3         [ 4] 4757         call UPDATVP 
      001AC5 20 03            [ 2] 4758         jra 6$
      001AC7                       4759 4$: ; update UVP with APP_VP 
      001AC7 90 BF 18         [ 2] 4760         ldw UVP,y 
      001ACA                       4761 6$:      
      001ACA CD 14 22         [ 4] 4762         CALL     PRESE   ;initialize data stack and TIB
      001ACD CD 1A 61         [ 4] 4763         CALL     TBOOT
      001AD0 CD 0C 53         [ 4] 4764         CALL     ATEXE   ;application boot
      001AD3 CD 16 FB         [ 4] 4765         CALL     OVERT
      001AD6 CC 14 3F         [ 2] 4766         JP     QUIT    ;start interpretation
                                   4767 
                                   4768 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4769         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001AD9 1A 68                   30     .word LINK 
                           001ADB    31     LINK=.
      001ADB 03                      32     .byte 3 
      001ADC 46 50 21                33     .ascii "FP!"
      001ADF                         34 FPSTOR:
      001ADF 90 93            [ 1]   35     ldw y,x
      001AE1 90 FE            [ 2]   36     ldw y,(y)
      001AE3 90 9F            [ 1]   37     ld a,yl 
      001AE5 B7 34            [ 1]   38     ld FPTR,a 
      001AE7 1C 00 02         [ 2]   39     addw x,#CELLL 
      001AEA 90 93            [ 1]   40     ldw y,x 
      001AEC 90 FE            [ 2]   41     ldw y,(y)
      001AEE 90 BF 35         [ 2]   42     ldw PTR16,y
      001AF1 1C 00 02         [ 2]   43     addw x,#CELLL 
      001AF4 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001AF5 1A DB                   51     .word LINK 
                           001AF7    52 LINK=.
      001AF7 06                      53     .byte 6 
      001AF8 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001AFE                         55 EEPROM: 
      001AFE 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B02 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B05 EF 02            [ 2]   58     ldw (2,x),y 
      001B07 90 5F            [ 1]   59     clrw y 
      001B09 FF               [ 2]   60     ldw (x),y 
      001B0A 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B0B 1A F7                   67 	.word LINK 
                           001B0D    68 	LINK=.
      001B0D 08                      69 	.byte 8 
      001B0E 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B16                         71 EEPLAST:
      001B16 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B19 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B1D EF 02            [ 2]   74 	ldw (2,x),y 
      001B1F 90 5F            [ 1]   75 	clrw y 
      001B21 FF               [ 2]   76 	ldw (x),y 
      001B22 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B23 1B 0D                   83 	.word LINK 
                           001B25    84 	LINK=.
      001B25 07                      85 	.byte 7
      001B26 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B2D                         87 EEPRUN:
      001B2D 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B30 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B34 EF 02            [ 2]   90 	ldw (2,x),y 
      001B36 90 5F            [ 1]   91 	clrw y 
      001B38 FF               [ 2]   92 	ldw (x),y 
      001B39 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B3A 1B 25                   99 	.word LINK
                           001B3C   100 	LINK=.
      001B3C 06                     101 	.byte 6 
      001B3D 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B43                        103 EEPCP:
      001B43 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B46 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B4A EF 02            [ 2]  106 	ldw (2,x),y 
      001B4C 90 5F            [ 1]  107 	clrw y 
      001B4E FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B4F 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B50 1B 3C                  115 	.word LINK
                           001B52   116 	LINK=.
      001B52 06                     117 	.byte 6
      001B53 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B59                        119 EEPVP:
      001B59 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B5C 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B60 EF 02            [ 2]  122 	ldw (2,x),y 
      001B62 90 5F            [ 1]  123 	clrw y 
      001B64 FF               [ 2]  124 	ldw (x),y 
      001B65 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B66 1B 52                  131 	.word LINK 
                           001B68   132 	LINK=.
      001B68 0A                     133 	.byte 10
      001B69 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B73                        135 UPDATLAST:
      001B73 CD 07 15         [ 4]  136 	call LAST
      001B76 CD 04 EF         [ 4]  137 	call AT  
      001B79 CD 1B 16         [ 4]  138 	call EEPLAST
      001B7C CC 1D 69         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B7F 1B 68                  145 	.word LINK
                           001B81   146 	LINK=.
      001B81 09                     147 	.byte 9
      001B82 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B8B                        149 UPDATRUN:
      001B8B CD 1B 2D         [ 4]  150 	call EEPRUN
      001B8E CC 1D 69         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B91 1B 81                  157 	.word LINK 
                           001B93   158 	LINK=.
      001B93 08                     159 	.byte 8 
      001B94 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B9C                        161 UPDATCP:
      001B9C CD 07 05         [ 4]  162 	call CPP 
      001B9F CD 04 EF         [ 4]  163 	call AT 
      001BA2 CD 1B 43         [ 4]  164 	call EEPCP 
      001BA5 CC 1D 69         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BA8 1B 93                  171 	.word LINK
                           001BAA   172 	LINK=.
      001BAA 08                     173 	.byte 8 
      001BAB 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BB3                        175 UPDATVP:
      001BB3 CD 06 F7         [ 4]  176 	call VPP 
      001BB6 CD 04 EF         [ 4]  177 	call AT
      001BB9 CD 1B 59         [ 4]  178 	call EEPVP 
      001BBC CC 1D 69         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BBF 1B AA                  186     .word LINK 
                           001BC1   187 LINK=.
      001BC1 02                     188     .byte 2
      001BC2 46 40                  189     .ascii "F@"
      001BC4                        190 FARAT:
      001BC4 CD 1A DF         [ 4]  191     call FPSTOR
      001BC7 CC 1C 8C         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BCA 1B C1                  199     .word LINK
                           001BCC   200     LINK=.
      001BCC 03                     201     .byte 3 
      001BCD 46 43 40               202     .ascii "FC@" 
      001BD0                        203 FARCAT:
      001BD0 CD 1A DF         [ 4]  204     call FPSTOR
      001BD3 CC 1C AE         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BD6 1B CC                  213     .word LINK 
                           001BD8   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BD8 06                     215     .byte 6 
      001BD9 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001BDF                        217 UNLKEE:
      001BDF 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001BE3 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001BE7 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BEB 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BEF 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BF4 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001BF5 1B D8                  230     .word LINK 
                           001BF7   231 LINK=. 
      001BF7 06                     232     .byte 6 
      001BF8 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001BFE                        234 UNLKFL:
      001BFE 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C02 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C06 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C0A 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C0E 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C13 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C14 1B F7                  247 	.word LINK 
                           001C16   248 	LINK=.
      001C16 06                     249 	.byte 6
      001C17 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C1D                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C1D 90 BE 35         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C20 3D 34            [ 1]  255 	tnz FPTR 
      001C22 26 16            [ 1]  256 	jrne 4$
      001C24 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C28 24 10            [ 1]  258     jruge 4$
      001C2A 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C2E 25 0D            [ 1]  260     jrult 9$
      001C30 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C34 22 07            [ 1]  262 	jrugt 9$
      001C36 CD 1B DF         [ 4]  263 	call UNLKEE
      001C39 81               [ 4]  264 	ret 
      001C3A CD 1B FE         [ 4]  265 4$: call UNLKFL
      001C3D 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C3E 1C 16                  273 	.word LINK 
                           001C40   274 	LINK=.
      001C40 04                     275 	.byte 4 
      001C41 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C45                        277 LOCK: 
      001C45 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C49 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C4D 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C4E 1C 40                  286 	.word LINK 
                           001C50   287 	LINK=. 
      001C50 08                     288 	.byte 8 
      001C51 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C59                        290 INC_FPTR:
      001C59 3C 36            [ 1]  291 	inc PTR8 
      001C5B 26 0C            [ 1]  292 	jrne 1$
      001C5D 90 89            [ 2]  293 	pushw y 
      001C5F 90 BE 34         [ 2]  294 	ldw y,FPTR 
      001C62 90 5C            [ 1]  295 	incw y 
      001C64 90 BF 34         [ 2]  296 	ldw FPTR,y
      001C67 90 85            [ 2]  297 	popw y  
      001C69 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C6A 1C 50                  304 	.word LINK 
                           001C6C   305 	LINK=.
      001C6C 04                     306 	.byte 4 
      001C6D 50 54 52 2B            307 	.ascii "PTR+"
      001C71                        308 PTRPLUS:
      001C71 90 93            [ 1]  309 	ldw y,x 
      001C73 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C76 72 B9 00 35      [ 2]  311 	addw y,PTR16 
      001C7A 90 BF 35         [ 2]  312 	ldw PTR16,y  
      001C7D 24 02            [ 1]  313 	jrnc 1$
      001C7F 3C 34            [ 1]  314 	inc FPTR 
      001C81 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C82 1C 6C                  322 	.word LINK 
                           001C84   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C84 07                     324 	.byte 7 
      001C85 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001C8C                        326 EE_READ:
      001C8C 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001C8F 92 BC 00 34      [ 5]  328 	ldf a,[FPTR]
      001C93 90 95            [ 1]  329 	ld yh,a 
      001C95 CD 1C 59         [ 4]  330 	call INC_FPTR 
      001C98 92 BC 00 34      [ 5]  331 	ldf a,[FPTR]
      001C9C CD 1C 59         [ 4]  332 	call INC_FPTR 
      001C9F 90 97            [ 1]  333 	ld yl,a 
      001CA1 FF               [ 2]  334 	ldw (x),y 
      001CA2 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CA3 1C 84                  341 	.word LINK 
                           001CA5   342 	LINK=.
      001CA5 08                     343 	.byte 8
      001CA6 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CAE                        345 EE_CREAD:
      001CAE 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CB1 92 BC 00 34      [ 5]  347 	ldf a,[FPTR]	
      001CB5 CD 1C 59         [ 4]  348 	call INC_FPTR
      001CB8 90 5F            [ 1]  349 	clrw y 
      001CBA 90 97            [ 1]  350 	ld yl,a 
      001CBC FF               [ 2]  351 	ldw (x),y 
      001CBD 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CBE 1C A5                  361 	.word LINK 
                           001CC0   362 	LINK=. 
      001CC0 07                     363 	.byte 7 
      001CC1 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CC8                        366 WR_BYTE:
      001CC8 CD 04 63         [ 4]  367 	call FC_XOFF
      001CCB 90 93            [ 1]  368 	ldw y,x 
      001CCD 90 FE            [ 2]  369 	ldw y,(y)
      001CCF 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CD2 90 9F            [ 1]  371 	ld a,yl
      001CD4 92 BD 00 34      [ 4]  372 	ldf [FPTR],a
      001CD8 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CDD CD 04 4D         [ 4]  374 	call FC_XON
      001CE0 CC 1C 59         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001CE3 1C C0                  384 	.word LINK 
                           001CE5   385 	LINK=.
      001CE5 07                     386 	.byte 7 
      001CE6 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001CED                        388 WR_WORD:
      001CED CD 04 63         [ 4]  389 	call FC_XOFF
      001CF0 90 93            [ 1]  390 	ldw y,x
      001CF2 90 FE            [ 2]  391 	ldw y,(y)
      001CF4 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001CF7 90 9E            [ 1]  393 	ld a,yh 
      001CF9 92 BD 00 34      [ 4]  394 	ldf [FPTR],a
      001CFD 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D02 CD 1C 59         [ 4]  396 	call INC_FPTR 
      001D05 90 9F            [ 1]  397 	ld a,yl 
      001D07 92 BD 00 34      [ 4]  398 	ldf [FPTR],a
      001D0B 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D10 CD 04 4D         [ 4]  400 	call FC_XON
      001D13 CC 1C 59         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D16 1C E5                  408     .word LINK 
                           001D18   409 	LINK=.
      001D18 04                     410     .byte 4 
      001D19 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D1D                        416 EECSTORE:
      001D1D 52 02            [ 2]  417 	sub sp,#VSIZE
      001D1F CD 1A DF         [ 4]  418     call FPSTOR
      001D22 E6 01            [ 1]  419 	ld a,(1,x)
      001D24 43               [ 1]  420 	cpl a 
      001D25 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D27 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D29 CD 1C 1D         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D2C 3D 34            [ 1]  425 	tnz FPTR 
      001D2E 26 19            [ 1]  426 	jrne 2$
      001D30 90 BE 35         [ 2]  427 	ldw y,PTR16 
      001D33 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D37 2B 10            [ 1]  429 	jrmi 2$
      001D39 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D3D 2A 0A            [ 1]  431 	jrpl 2$
      001D3F 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D41 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D45 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D49                        436 2$: 
      001D49 CD 1C C8         [ 4]  437 	call WR_BYTE 	
      001D4C 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D4E 27 0D            [ 1]  439 	jreq 3$ 
      001D50 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D52 90 5F            [ 1]  441     clrw y
      001D54 90 97            [ 1]  442 	ld yl,a 
      001D56 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D59 FF               [ 2]  444 	ldw (x),y 
      001D5A CD 1C C8         [ 4]  445 	call WR_BYTE
      001D5D                        446 3$: 
      001D5D CD 1C 45         [ 4]  447 	call LOCK 
      001D60 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D62 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D63 1D 18                  455 	.word LINK 
                           001D65   456 	LINK=.
      001D65 03                     457 	.byte 3 
      001D66 45 45 21               458 	.ascii "EE!"
      001D69                        459 EESTORE:
      001D69 CD 1A DF         [ 4]  460 	call FPSTOR 
      001D6C CD 1C 1D         [ 4]  461 	call UNLOCK 
      001D6F 90 93            [ 1]  462 	ldw y,x 
      001D71 90 FE            [ 2]  463 	ldw y,(y)
      001D73 90 89            [ 2]  464 	pushw y 
      001D75 90 5E            [ 1]  465 	swapw y 
      001D77 FF               [ 2]  466 	ldw (x),y 
      001D78 CD 1C C8         [ 4]  467 	call WR_BYTE 
      001D7B 90 85            [ 2]  468 	popw y 
      001D7D 1D 00 02         [ 2]  469 	subw x,#CELLL
      001D80 FF               [ 2]  470 	ldw (x),y 
      001D81 CD 1C C8         [ 4]  471 	call WR_BYTE
      001D84 CC 1C 45         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001D87 1D 65                  480 	.word LINK 
                           001D89   481 	LINK=. 
      001D89 09                     482 	.byte 9 
      001D8A 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001D93                        484 row_erase:
      001D93 CD 04 63         [ 4]  485 	call FC_XOFF
      001D96 CD 1A DF         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001D99 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001D9C 90 AE 1D EC      [ 2]  490 	ldw y,#row_erase_proc
      001DA0 FF               [ 2]  491 	ldw (x),y 
      001DA1 CD 0C 2E         [ 4]  492 	call PAD 
      001DA4 90 AE 1E 13      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DA8 72 A2 1D EC      [ 2]  494 	subw y,#row_erase_proc
      001DAC 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DAF FF               [ 2]  496 	ldw (x),y 
      001DB0 CD 0C 6A         [ 4]  497 	call CMOVE 
      001DB3                        498 block_erase:
      001DB3 90 BE 35         [ 2]  499 	ldw y,FPTR+1
      001DB6 90 A3 32 80      [ 2]  500 	cpw y,#app_space 
      001DBA 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DBC 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DC0 24 04            [ 1]  504 	jruge 1$
      001DC2 CD 04 4D         [ 4]  505 	call FC_XON
      001DC5 81               [ 4]  506 	ret ; bad address 
      001DC6 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DCA 23 04            [ 2]  508 	jrule 2$ 
      001DCC CD 04 4D         [ 4]  509 	call FC_XON
      001DCF 81               [ 4]  510 	ret ; bad address 
      001DD0                        511 2$:	
      001DD0 CD 1B DF         [ 4]  512 	call UNLKEE 
      001DD3 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001DD5                        515 erase_flash:
      001DD5 CD 1B FE         [ 4]  516 	call UNLKFL 
      001DD8                        517 proceed_erase:
      001DD8 CD 0C 2E         [ 4]  518 	call PAD 
      001DDB 90 93            [ 1]  519 	ldw y,x
      001DDD 90 FE            [ 2]  520 	ldw y,(y)
      001DDF 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001DE2 90 FD            [ 4]  522 	call (y) 
      001DE4 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DE8 CD 04 4D         [ 4]  524 	call FC_XON
      001DEB 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001DEC                        528 row_erase_proc:
      001DEC 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DF0 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DF4 4F               [ 1]  531 	clr a 
      001DF5 90 5F            [ 1]  532 	clrw y 
      001DF7 91 A7 00 34      [ 1]  533 	ldf ([FPTR],y),a
      001DFB 90 5C            [ 1]  534     incw y
      001DFD 91 A7 00 34      [ 1]  535 	ldf ([FPTR],y),a
      001E01 90 5C            [ 1]  536     incw y
      001E03 91 A7 00 34      [ 1]  537 	ldf ([FPTR],y),a
      001E07 90 5C            [ 1]  538     incw y
      001E09 91 A7 00 34      [ 1]  539 	ldf ([FPTR],y),a
      001E0D 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E12 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E13                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E13                        555 copy_buffer:
      001E13 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E15 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E19 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E1D 90 5F            [ 1]  560 	clrw y
      001E1F F6               [ 1]  561 1$:	ld a,(x)
      001E20 91 A7 00 34      [ 1]  562 	ldf ([FPTR],y),a
      001E24 5C               [ 1]  563 	incw x 
      001E25 90 5C            [ 1]  564 	incw y 
      001E27 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E29 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E2B 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E30 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E31 81               [ 4]  570 	ret 
      001E32                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E32                        577 copy_prog_to_ram:
      001E32 1D 00 06         [ 2]  578 	subw x,#6
      001E35 90 AE 1E 13      [ 2]  579 	ldw y,#copy_buffer 
      001E39 EF 04            [ 2]  580 	ldw (4,x),y 
      001E3B 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E3F EF 02            [ 2]  582 	ldw (2,x),y 
      001E41 90 AE 1E 32      [ 2]  583 	ldw y,#copy_buffer_end 
      001E45 72 A2 1E 13      [ 2]  584 	subw y,#copy_buffer  
      001E49 FF               [ 2]  585 	ldw (x),y 
      001E4A CD 0C 6A         [ 4]  586 	call CMOVE 
      001E4D 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E4E 1D 89                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                           001E50   597 	LINK=.
      001E50 06                     598 	.byte 6 
      001E51 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E57                        600 write_row:
      001E57 CD 04 63         [ 4]  601 	call FC_XOFF
      001E5A CD 1A DF         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E5D A6 80            [ 1]  604 	ld a,#0x80 
      001E5F B4 36            [ 1]  605 	and a,PTR8 
      001E61 B7 36            [ 1]  606 	ld PTR8,a  
      001E63 CD 1E 32         [ 4]  607 	call copy_prog_to_ram
      001E66 CD 1C 1D         [ 4]  608 	call UNLOCK
      001E69 90 93            [ 1]  609 	ldw y,x 
      001E6B 90 FE            [ 2]  610 	ldw y,(y)
      001E6D 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E70 89               [ 2]  612 	pushw x 
      001E71 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E72 CD 17 00         [ 4]  614 	call TIBBASE
      001E75 CD 1C 45         [ 4]  615 	call LOCK
      001E78 85               [ 2]  616 	popw x 
      001E79 CD 04 4D         [ 4]  617 	call FC_XON 
      001E7C 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001E7D 1E 50                  626 		.word LINK 
                           001E7F   627 		LINK=.
      001E7F 07                     628 		.byte 7 
      001E80 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001E87                        630 set_option: 
      001E87 90 93            [ 1]  631 		ldw y,x 
      001E89 90 FE            [ 2]  632 		ldw y,(y)
      001E8B 27 06            [ 1]  633 		jreq 1$
      001E8D 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001E91 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001E93 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001E96 81               [ 4]  638 		ret
      001E97 90 58            [ 2]  639 2$:		sllw y 
      001E99 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001E9D FF               [ 2]  641 		ldw (x),y 
      001E9E 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001EA1 90 5F            [ 1]  643 		clrw y 
      001EA3 FF               [ 2]  644 		ldw (x),y 
      001EA4 CD 1D 1D         [ 4]  645 		call EECSTORE
      001EA7 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001EA8 1E 7F                  655 	.word LINK  
                           001EAA   656 	LINK=.
      001EAA 08                     657 	.byte 8 
      001EAB 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EB3                        659 pristine:
                                    660 ;;; erase EEPROM
      001EB3 CD 1A FE         [ 4]  661 	call EEPROM 
      001EB6 CD 07 B0         [ 4]  662 1$:	call DDUP 
      001EB9 CD 1D 93         [ 4]  663 	call row_erase
      001EBC 90 93            [ 1]  664 	ldw y,x 
      001EBE 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EC1 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EC5 EF 02            [ 2]  667 	ldw (2,x),y
      001EC7 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001ECB 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001ECD 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001ED1 FF               [ 2]  672 2$:	ldw (x),y   
      001ED2 90 5F            [ 1]  673 	clrw y 
      001ED4 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001ED6 CD 07 B0         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001ED9 CD 1E 87         [ 4]  676 	call set_option
      001EDC 90 93            [ 1]  677 	ldw y,x 
      001EDE 90 FE            [ 2]  678 	ldw y,(y)
      001EE0 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001EE2 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001EE6 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001EE8 90 AE 32 80      [ 2]  683 	ldw y,#app_space
      001EEC EF 02            [ 2]  684 	ldw (2,x),y  
      001EEE 90 5F            [ 1]  685 	clrw y 
      001EF0 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001EF1 CD 1D 93         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001EF4 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001EF7 90 5F            [ 1]  690 	clrw y  
      001EF9 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001EFA CD 05 96         [ 4]  692 	call DUPP  
      001EFD CD 1F 1A         [ 4]  693 	call reset_vector
      001F00 90 93            [ 1]  694 	ldw y,x 
      001F02 90 FE            [ 2]  695 	ldw y,(y)
      001F04 90 5C            [ 1]  696 	incw y   ; next vector 
      001F06 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F0A 25 ED            [ 1]  698 	jrult 4$
      001F0C CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F0F 1E AA                  707 	.word LINK 
                           001F11   708 	LINK=. 
      001F11 08                     709 	.byte 8 
      001F12 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F1A                        711 reset_vector:
      001F1A 90 93            [ 1]  712 	ldw y,x
      001F1C 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F1F 90 FE            [ 2]  714 	ldw y,(y)
      001F21 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F25 27 3A            [ 1]  716 	jreq 9$
      001F27 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F2B 22 34            [ 1]  718 	jrugt 9$  
      001F2D 90 58            [ 2]  719 	sllw y 
      001F2F 90 58            [ 2]  720 	sllw y 
      001F31 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F35 90 BF 26         [ 2]  722 	ldw YTEMP,y
      001F38 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F3B EF 02            [ 2]  724 	ldw (2,x),y 
      001F3D 90 5F            [ 1]  725 	clrw y
      001F3F FF               [ 2]  726 	ldw (x),y 
      001F40 A6 82            [ 1]  727 	ld a,#0x82 
      001F42 90 95            [ 1]  728 	ld yh,a
      001F44 EF 04            [ 2]  729 	ldw (4,x),y
      001F46 CD 1D 69         [ 4]  730 	call EESTORE
      001F49 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F4C 90 5F            [ 1]  732 	clrw y 
      001F4E FF               [ 2]  733 	ldw (x),y 
      001F4F 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F53 EF 04            [ 2]  735 	ldw (4,x),y 
      001F55 90 BE 26         [ 2]  736 	ldw y,YTEMP  
      001F58 72 A9 00 02      [ 2]  737 	addw y,#2
      001F5C EF 02            [ 2]  738 	ldw (2,x),y 
      001F5E CD 1D 69         [ 4]  739 	call EESTORE
      001F61 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F62 1F 11                  749 	.word LINK 
                           001F64   750 	LINK=.
      001F64 07                     751 	.byte 7
      001F65 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F6C                        758 CHKIVEC:
      001F6C 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F6E 90 93            [ 1]  760 	ldw y,x 
      001F70 90 FE            [ 2]  761 	ldw y,(y)
      001F72 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001F74 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001F76 AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001F79 BF 35            [ 2]  765 	ldw PTR16,X
      001F7B AE FF FC         [ 2]  766 	ldw x,#-4 
      001F7E 1C 00 04         [ 2]  767 1$:	addw x,#4
      001F81 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001F84 27 22            [ 1]  769 	jreq 9$
      001F86 90 93            [ 1]  770 	ldw y,x  
      001F88 91 D6 35         [ 4]  771 	ld a,([PTR16],y)
      001F8B 11 03            [ 1]  772 	cp a,(CADR,sp)
      001F8D 25 EF            [ 1]  773 	jrult 1$
      001F8F 90 5C            [ 1]  774 	incw y 
      001F91 91 D6 35         [ 4]  775 	ld a,([PTR16],y)
      001F94 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001F96 25 E6            [ 1]  777 	jrult 1$ 
      001F98 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001F9A 54               [ 2]  779 	srlw x
      001F9B 54               [ 2]  780 	srlw x 
      001F9C 90 93            [ 1]  781 	ldw y,x 
      001F9E 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FA0 FF               [ 2]  783 	ldw (x),y
      001FA1 CD 1F 1A         [ 4]  784 	call reset_vector
      001FA4 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FA6 20 D6            [ 2]  786 	jra 1$
      001FA8 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FAA 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FAD 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FAF 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FB0 1F 64                  798 	.word LINK
                           001FB2   799 	LINK=.
      001FB2 08                     800 	.byte 8 
      001FB3 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FBB                        802 set_vector:
      001FBB 90 93            [ 1]  803     ldw y,x 
      001FBD 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FC0 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FC2 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FC6 23 04            [ 2]  807 	jrule 2$
      001FC8 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FCB 81               [ 4]  809 	ret
      001FCC 90 58            [ 2]  810 2$:	sllw y 
      001FCE 90 58            [ 2]  811 	sllw y 
      001FD0 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      001FD4 90 BF 26         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001FD7 A6 82            [ 1]  814 	ld a,#0x82 
      001FD9 90 95            [ 1]  815 	ld yh,a 
      001FDB E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      001FDD 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      001FDF 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      001FE2 EF 04            [ 2]  820 	ldw (4,x),y 
      001FE4 90 BE 26         [ 2]  821 	ldw y,YTEMP
      001FE7 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      001FE9 90 5F            [ 1]  823 	clrw y 
      001FEB FF               [ 2]  824 	ldw (x),y   ; as a double 
      001FEC CD 1D 69         [ 4]  825 	call EESTORE 
      001FEF 90 93            [ 1]  826 	ldw y,x 
      001FF1 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      001FF4 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      001FF7 EF 04            [ 2]  829 	ldw (4,x),y 
      001FF9 90 BE 26         [ 2]  830 	ldw y,YTEMP 
      001FFC 72 A9 00 02      [ 2]  831 	addw y,#2 
      002000 EF 02            [ 2]  832 	ldw (2,x),y 
      002002 90 5F            [ 1]  833 	clrw y 
      002004 FF               [ 2]  834 	ldw (x),y 
      002005 CD 1D 69         [ 4]  835 	call EESTORE
      002008 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      00200B 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      00200C 1F B2                  844 	.word LINK
                           00200E   845 	LINK=.
      00200E 03                     846 	.byte 3
      00200F 45 45 2C               847 	.ascii "EE,"
      002012                        848 EE_COMMA:
      002012 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      002015 90 BE 1A         [ 2]  850 	ldw y,UCP
      002018 90 89            [ 2]  851 	pushw y 
      00201A EF 02            [ 2]  852 	ldw (2,x),y 
      00201C 90 5F            [ 1]  853 	clrw y 
      00201E FF               [ 2]  854 	ldw (x),y
      00201F CD 1D 69         [ 4]  855 	call EESTORE
      002022 90 85            [ 2]  856 	popw y 
      002024 72 A9 00 02      [ 2]  857 	addw y,#2
      002028 90 BF 1A         [ 2]  858 	ldw UCP,y
      00202B 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      00202C 20 0E                  866 	.word LINK 
                           00202E   867 	LINK=.
      00202E 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      00202F 45 45 43 2C            869 	.ascii "EEC,"
      002033                        870 EE_CCOMMA:
      002033 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      002036 90 BE 1A         [ 2]  872 	ldw y,UCP
      002039 90 89            [ 2]  873 	pushw y 
      00203B EF 02            [ 2]  874 	ldw (2,x),y 
      00203D 90 5F            [ 1]  875 	clrw y 
      00203F FF               [ 2]  876 	ldw (x),y
      002040 CD 1D 1D         [ 4]  877 	call EECSTORE
      002043 90 85            [ 2]  878 	popw y 
      002045 90 5C            [ 1]  879 	incw y 
      002047 90 BF 1A         [ 2]  880 	ldw UCP,y
      00204A 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      00204B 20 2E                  888 	.word LINK 
                           00204D   889 	LINK=.
      00204D 07                     890 	.byte 7 
      00204E 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      002055                        892 ROW2BUF: 
      002055 CD 1A DF         [ 4]  893 	call FPSTOR 
      002058 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      00205A 88               [ 1]  895 	push a 
      00205B B4 36            [ 1]  896 	and a,PTR8 ; block align 
      00205D B7 36            [ 1]  897 	ld PTR8,a
      00205F 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      002063 92 BC 00 34      [ 5]  899 1$: ldf a,[FPTR]
      002067 90 F7            [ 1]  900 	ld (y),a
      002069 CD 1C 59         [ 4]  901 	call INC_FPTR
      00206C 90 5C            [ 1]  902 	incw y 
      00206E 0A 01            [ 1]  903 	dec (1,sp)
      002070 26 F1            [ 1]  904 	jrne 1$ 
      002072 84               [ 1]  905 	pop a 
      002073 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      002074 20 4D                  914 	.word LINK 
                           002076   915 	LINK=.
      002076 07                     916 	.byte 7 
      002077 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      00207E                        918 BUF2ROW:
      00207E CD 06 A4         [ 4]  919 	call TBUF ; ( ud rb -- )
      002081 CD 07 64         [ 4]  920 	call ROT 
      002084 CD 07 64         [ 4]  921 	call ROT  ; ( rb ud -- )
      002087 CD 1E 57         [ 4]  922 	call write_row 
      00208A 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      00208B 20 76                  930 	.word LINK 
                           00208D   931 	LINK=.
      00208D 05                     932 	.byte 5 
      00208E 52 46 52 45 45         933 	.ascii "RFREE"
      002093                        934 RFREE:
      002093 E6 01            [ 1]  935 	ld a,(1,x)
      002095 A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      002097 B7 26            [ 1]  937 	ld YTEMP,a 
      002099 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      00209B B0 26            [ 1]  939 	sub a,YTEMP 
      00209D 90 5F            [ 1]  940 	clrw y 
      00209F 90 97            [ 1]  941 	ld yl,a
      0020A1 FF               [ 2]  942 	ldw (x),y 
      0020A2 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020A3 20 8D                  954 	.word LINK 
                           0020A5   955 	LINK=. 
      0020A5 06                     956 	.byte 6
      0020A6 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020AC                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020AC 90 93            [ 1]  961 	ldw y,x 
      0020AE 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020B1 90 BF 26         [ 2]  963 	ldw YTEMP,y 
      0020B4 90 93            [ 1]  964 	ldw y,x 
      0020B6 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020B9 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020BC FF               [ 2]  967 	ldw (x),y 
      0020BD 90 BE 26         [ 2]  968 	ldw y,YTEMP 
      0020C0 EF 02            [ 2]  969 	ldw (2,x),y 
      0020C2 CD 20 55         [ 4]  970 	call ROW2BUF 
      0020C5 90 93            [ 1]  971 	ldw y,x 
      0020C7 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020CA 90 89            [ 2]  973 	pushw y ; udl 
      0020CC 90 9F            [ 1]  974 	ld a,yl
      0020CE A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020D0 90 5F            [ 1]  976 	clrw y 
      0020D2 90 97            [ 1]  977 	ld yl,a 
      0020D4 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0020D8 1D 00 02         [ 2]  979 	subw x,#CELLL 
      0020DB FF               [ 2]  980 	ldw (x),y  
      0020DC CD 05 A6         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      0020DF CD 05 40         [ 4]  982 	call RFROM  
      0020E2 CD 20 93         [ 4]  983 	call RFREE 
      0020E5 CD 08 FE         [ 4]  984 	call MIN
      0020E8 CD 05 96         [ 4]  985 	call DUPP 
      0020EB CD 05 5F         [ 4]  986 	call TOR  
      0020EE CD 0C 6A         [ 4]  987 	call CMOVE
      0020F1 CD 20 7E         [ 4]  988 	call BUF2ROW 
      0020F4 CD 05 40         [ 4]  989 	call RFROM 
      0020F7 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      0020F8 20 A5                  998 	.word LINK 
                           0020FA   999 	LINK=. 
      0020FA 05                    1000 	.byte 5 
      0020FB 46 41 44 44 52        1001 	.ascii "FADDR"
      002100                       1002 FADDR:
      002100 CC 0B 2F         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      002103 20 FA                 1019 	.word LINK 
                           002105  1020 	LINK=.
      002105 05                    1021 	.byte 5 
      002106 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      00210B                       1023 FMOVE:
      00210B CD 06 B6         [ 4] 1024 	call TFLASH 
      00210E CD 04 EF         [ 4] 1025 	CALL AT 
      002111 CD 04 A4         [ 4] 1026 	CALL QBRAN 
      002114 21 8F                 1027 	.word no_move  
      002116 CD 07 05         [ 4] 1028 	call CPP
      002119 CD 04 EF         [ 4] 1029 	call AT  
      00211C CD 05 96         [ 4] 1030 	call DUPP ; ( udl udl -- )
      00211F CD 06 E9         [ 4] 1031 	call CNTXT 
      002122 CD 04 EF         [ 4] 1032 	call AT 
      002125 CD 04 71         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002128 00 02                 1034 	.word 2 
      00212A CD 08 3E         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      00212D CD 05 A6         [ 4] 1036 	call SWAPP 
      002130 CD 21 00         [ 4] 1037 	call FADDR 
      002133 CD 07 64         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      002136 CD 05 96         [ 4] 1039 	call DUPP 
      002139 CD 05 5F         [ 4] 1040 	call TOR    ; R: a 
      00213C                       1041 FMOVE2: 
      00213C CD 0C 1D         [ 4] 1042 	call HERE 
      00213F CD 05 53         [ 4] 1043 	call RAT 
      002142 CD 08 3E         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      002145                       1045 next_row:
      002145 CD 05 96         [ 4] 1046 	call DUPP 
      002148 CD 05 5F         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00214B CD 20 AC         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00214E CD 05 96         [ 4] 1049 	call DUPP 
      002151 CD 05 5F         [ 4] 1050 	call TOR
      002154 CD 07 C5         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      002157 CD 05 96         [ 4] 1052 	call DUPP 
      00215A CD 0B 2F         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      00215D CD 05 40         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002160 CD 05 40         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002163 CD 05 C0         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002166 CD 08 3E         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002169 CD 05 96         [ 4] 1058 	call DUPP 
      00216C CD 04 A4         [ 4] 1059 	call QBRAN
      00216F 21 88                 1060 	.word fmove_done 
      002171 CD 05 A6         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002174 CD 05 40         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002177 CD 07 C5         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      00217A CD 05 96         [ 4] 1064 	call DUPP 
      00217D CD 05 5F         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002180 CD 05 A6         [ 4] 1066 	call SWAPP 
      002183 CD 04 BB         [ 4] 1067 	call BRAN
      002186 21 45                 1068 	.word next_row  
      002188                       1069 fmove_done:	
      002188 CD 05 40         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00218B 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00218E 81               [ 4] 1072  	ret  
      00218F                       1073 no_move:
      00218F CD 0B 2F         [ 4] 1074 	call ZERO
      002192 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      002193 21 05                 1082 	.word LINK 
                           002195  1083 	LINK=.
      002195 09                    1084 	.byte 9
      002196 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      00219F                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00219F CD 1B 59         [ 4] 1088 	call EEPVP 
      0021A2 CD 05 8C         [ 4] 1089 	call DROP 
      0021A5 CD 04 EF         [ 4] 1090 	call AT
      0021A8 CD 06 F7         [ 4] 1091 	call VPP 
      0021AB CD 04 D8         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021AE CD 1B 43         [ 4] 1094 	call EEPCP 
      0021B1 CD 05 8C         [ 4] 1095 	call DROP
      0021B4 CD 04 EF         [ 4] 1096 	call AT
      0021B7 CD 04 71         [ 4] 1097 	call DOLIT 
      0021BA 00 02                 1098 	.word 2 
      0021BC CD 07 C5         [ 4] 1099 	call PLUS 
      0021BF CD 05 96         [ 4] 1100 	call DUPP 
      0021C2 CD 06 E9         [ 4] 1101 	call CNTXT 
      0021C5 CD 04 D8         [ 4] 1102 	call STORE
      0021C8 CD 07 15         [ 4] 1103 	call LAST
      0021CB CD 04 D8         [ 4] 1104 	call STORE 
      0021CE CD 1B 73         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021D1 CD 07 05         [ 4] 1107 	call CPP 
      0021D4 CD 04 D8         [ 4] 1108 	call STORE
      0021D7 CD 1B 9C         [ 4] 1109 	call UPDATCP 
      0021DA 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      0021DB 21 95                 1116 	.word LINK 
                           0021DD  1117 	LINK=. 
      0021DD 06                    1118 	.byte 6
      0021DE 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      0021E4                       1120 IFMOVE:
      0021E4 CD 06 B6         [ 4] 1121 	call TFLASH 
      0021E7 CD 04 EF         [ 4] 1122 	CALL AT 
      0021EA CD 04 A4         [ 4] 1123 	CALL QBRAN 
      0021ED 21 8F                 1124 	.word no_move 
      0021EF CD 07 05         [ 4] 1125 	call CPP 
      0021F2 CD 04 EF         [ 4] 1126 	call AT 
      0021F5 CD 05 96         [ 4] 1127 	call DUPP ; ( udl udl -- )
      0021F8 CD 1B 59         [ 4] 1128 	call EEPVP 
      0021FB CD 05 8C         [ 4] 1129 	call DROP
      0021FE CD 04 EF         [ 4] 1130 	call AT  ; ( udl udl a )
      002201 CD 05 5F         [ 4] 1131 	call TOR 
      002204 CD 21 00         [ 4] 1132 	call FADDR
      002207 CD 05 53         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      00220A CC 21 3C         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           000001  4770 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4771         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
                                     31 
      00220D 21 DD                   32         .word LINK 
                           00220F    33         LINK=.
      00220F 02                      34         .byte 2
      002210 50 49                   35         .ascii "PI" 
      002212                         36 PII:
      002212 1D 00 04         [ 2]   37         subw x,#2*CELLL 
      002215 90 AE 01 63      [ 2]   38         ldw y,#355 
      002219 EF 02            [ 2]   39         ldw (2,x),y 
      00221B 90 AE 00 71      [ 2]   40         ldw y,#113 
      00221F FF               [ 2]   41         ldw (x),y 
      002220 81               [ 4]   42         ret 
                                     43 
                                     44 ;      SQRT2 ( -- 19601  13860 )
                                     45 ; precision: 1.5e-9 
                                     46 ; usage example to compute Voltage peek to peek from Vrms 
                                     47 ; : VPP SQRT2 */ 2 * ;
                                     48 ;
      002221 22 0F                   49         .word LINK 
                           002223    50         LINK=.
      002223 05                      51         .byte 5 
      002224 53 51 52 54 32          52         .ascii "SQRT2" 
      002229                         53 SQRT2:
      002229 1D 00 04         [ 2]   54         subw x,#2*CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00222C 90 AE 4C 91      [ 2]   55         ldw y,#19601 
      002230 EF 02            [ 2]   56         ldw (2,x),y 
      002232 90 AE 36 24      [ 2]   57         ldw y,#13860 
      002236 FF               [ 2]   58         ldw (x),y 
      002237 81               [ 4]   59         ret 
                                     60 
                                     61 ;   SQRT3 ( -- 18817 10864 )
                                     62 ; precision: 1.1e-9
                                     63 ;
      002238 22 23                   64         .word LINK 
                           00223A    65         LINK=.
      00223A 05                      66         .byte 5
      00223B 53 51 52 54 33          67         .ascii "SQRT3" 
      002240                         68 SQRT3: 
      002240 1D 00 04         [ 2]   69     subw x,#2*CELLL 
      002243 90 AE 49 81      [ 2]   70     ldw y,#18817 
      002247 EF 02            [ 2]   71     ldw (2,x),y 
      002249 90 AE 2A 70      [ 2]   72     ldw y,#10864 
      00224D FF               [ 2]   73     ldw (x),y 
      00224E 81               [ 4]   74     ret 
                                     75 
                                     76 ;   E ( -- 28667 10546 )
                                     77 ; precision: 5.5e-9 
                                     78 ; natural log base 
      00224F 22 3A                   79         .word LINK 
                           002251    80         LINK=.
      002251 01                      81         .byte 1
      002252 45                      82         .ascii "E" 
      002253                         83 ENEPER:
      002253 1D 00 04         [ 2]   84     subw x,#2*CELLL 
      002256 90 AE 6F FB      [ 2]   85     ldw y,#28667 
      00225A EF 02            [ 2]   86     ldw (2,x),y 
      00225C 90 AE 29 32      [ 2]   87     ldw y,#10546 
      002260 FF               [ 2]   88     ldw (x),y 
      002261 81               [ 4]   89     ret 
                                     90 
                                     91 ;   SQRT10 ( -- 22936 7253 )
                                     92 ; precision: 5.7e-9 
      002262 22 51                   93         .word LINK 
                           002264    94         LINK=.
      002264 06                      95         .byte 6 
      002265 53 51 52 54 31 30       96         .ascii "SQRT10" 
      00226B                         97 SQRT10:
      00226B 1D 00 04         [ 2]   98     subw x,#2*CELLL
      00226E 90 AE 59 98      [ 2]   99     ldw y,#22936 
      002272 EF 02            [ 2]  100     ldw (2,x),y 
      002274 90 AE 1C 55      [ 2]  101     ldw y,#7253
      002278 FF               [ 2]  102     ldw (x),y 
      002279 81               [ 4]  103     ret 
                                    104 
                                    105 ;   12RT2 ( -- 26797 25293 )
                                    106 ; precision: 1.0e-9 
                                    107 ; used in music to compute well tempered scale
      00227A 22 64                  108         .word LINK 
                           00227C   109         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00227C 05                     110         .byte 5 
      00227D 31 32 52 54 32         111         .ascii "12RT2"
      002282                        112 RT12_2:
      002282 1D 00 04         [ 2]  113     subw x,#2*CELLL 
      002285 90 AE 68 AD      [ 2]  114     ldw y,#26797
      002289 EF 02            [ 2]  115     ldw (2,x),y 
      00228B 90 AE 62 CD      [ 2]  116     ldw y,#25293
      00228F FF               [ 2]  117     ldw (x),y 
      002290 81               [ 4]  118     ret 
                                    119 
                                    120 ;   LOG2s ( -- 2040 11103 )
                                    121 ; log(2)/1.6384
                                    122 ; precision: 1.1e-8
      002291 22 7C                  123         .word LINK 
                           002293   124         LINK=.
      002293 05                     125         .byte 5 
      002294 4C 4F 47 32 53         126         .ascii "LOG2S" 
      002299                        127 LOG2S:
      002299 1D 00 04         [ 2]  128     subw x,#2*CELLL
      00229C 90 AE 07 F8      [ 2]  129     ldw y,#2040 
      0022A0 EF 02            [ 2]  130     ldw (2,x),y 
      0022A2 90 AE 2B 5F      [ 2]  131     ldw y,#11103 
      0022A6 FF               [ 2]  132     ldw (x),y 
      0022A7 81               [ 4]  133     ret 
                                    134 
                                    135 ;   LN2 ( -- 485 11464 )
                                    136 ; ln(2)/16.384 
                                    137 ; precision: 1.0e-7 
      0022A8 22 93                  138         .word LINK 
                           0022AA   139         LINK=.
      0022AA 04                     140         .byte 4 
      0022AB 4C 4E 32 53            141         .ascii "LN2S" 
      0022AF                        142 LN2S: 
      0022AF 1D 00 04         [ 2]  143     subw x,#2*CELLL
      0022B2 90 AE 01 E5      [ 2]  144     ldw y,#485
      0022B6 EF 02            [ 2]  145     ldw (2,x),y 
      0022B8 90 AE 2C C8      [ 2]  146     ldw y,#11464 
      0022BC FF               [ 2]  147     ldw (x),y 
      0022BD 81               [ 4]  148     ret 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4772 .endif
                           000001  4773 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   4774         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022BE 22 AA                   32     .word LINK 
                           0022C0    33     LINK=.
      0022C0 06                      34     .byte 6
      0022C1 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022C7                         36 CALLOT:
      0022C7 CD 07 05         [ 4]   37     CALL CPP
      0022CA CD 05 96         [ 4]   38     CALL DUPP 
      0022CD CD 04 EF         [ 4]   39     CALL AT 
      0022D0 CD 05 5F         [ 4]   40     CALL TOR 
      0022D3 CD 0B 9F         [ 4]   41     CALL PSTOR 
      0022D6 CD 1B 9C         [ 4]   42     CALL UPDATCP 
      0022D9 CD 05 40         [ 4]   43     CALL RFROM
      0022DC CC 0B 2F         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      0022DF 22 C0                   52     .word LINK 
                           0022E1    53     LINK=.
      0022E1 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0022E2 43 54 41 42 4C 45       55     .ascii "CTABLE"
      0022E8                         56 CTABLE:
      0022E8 CD 22 C7         [ 4]   57     CALL CALLOT     
      0022EB CC 18 9E         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      0022EE 22 E1                   67     .word LINK 
                           0022F0    68     LINK=.
      0022F0 06                      69     .byte 6
      0022F1 57 54 41 42 4C 45       70     .ascii "WTABLE"
      0022F7                         71 WTABLE:
      0022F7 CD 0A B6         [ 4]   72     CALL CELLS  
      0022FA CD 22 C7         [ 4]   73     CALL CALLOT 
      0022FD CC 18 9E         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002300 22 F0                   82     .word LINK 
                           002302    83     LINK=.
      002302 06                      84     .byte 6
      002303 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002309                         86 CTAT:
      002309 CD 1A DF         [ 4]   87     call FPSTOR 
      00230C CD 1C 71         [ 4]   88     call PTRPLUS 
      00230F CC 1C AE         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      002312 23 02                   97     .word LINK 
                           002314    98     LINK=.
      002314 06                      99     .byte 6
      002315 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      00231B                        101 WTAT:
      00231B CD 1A DF         [ 4]  102     call FPSTOR 
      00231E CD 0A B6         [ 4]  103     call CELLS 
      002321 CD 1C 71         [ 4]  104     call PTRPLUS 
      002324 CD 1C 8C         [ 4]  105     call EE_READ 
      002327 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002328 23 14                  113     .word LINK 
                           00232A   114     LINK=.
      00232A 06                     115     .byte 6 
      00232B 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002331                        117 CTINIT:
      002331 CD 1A DF         [ 4]  118     CALL FPSTOR
      002334 CD 1C 1D         [ 4]  119     CALL UNLOCK
      002337 CD 0B 2F         [ 4]  120     CALL ZERO 
      00233A CD 0A C3         [ 4]  121 1$: CALL ONEP 
      00233D CD 05 96         [ 4]  122     CALL DUPP 
      002340 CD 23 8D         [ 4]  123     CALL INTQ 
      002343 CD 04 A4         [ 4]  124     CALL QBRAN 
      002346 23 50                  125     .word 2$
      002348 CD 1C C8         [ 4]  126     call WR_BYTE 
      00234B CD 04 BB         [ 4]  127     CALL BRAN 
      00234E 23 3A                  128     .word 1$ 
      002350 CD 07 A5         [ 4]  129 2$: CALL DDROP 
      002353 CD 1C 45         [ 4]  130     CALL LOCK 
      002356 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002357 23 2A                  138     .word LINK 
                           002359   139     LINK=.
      002359 06                     140     .byte 6 
      00235A 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002360                        142 WTINIT:
      002360 CD 1A DF         [ 4]  143     CALL FPSTOR
      002363 CD 1C 1D         [ 4]  144     CALL UNLOCK
      002366 CD 0B 2F         [ 4]  145     CALL ZERO 
      002369 CD 0A C3         [ 4]  146 1$: CALL ONEP 
      00236C CD 05 96         [ 4]  147     CALL DUPP
      00236F CD 23 8D         [ 4]  148     CALL INTQ
      002372 CD 04 A4         [ 4]  149     CALL QBRAN 
      002375 23 7F                  150     .word 2$
      002377 CD 1C ED         [ 4]  151     call WR_WORD 
      00237A CD 04 BB         [ 4]  152     CALL BRAN 
      00237D 23 69                  153     .word 1$ 
      00237F CD 07 A5         [ 4]  154 2$: CALL DDROP 
      002382 CD 1C 45         [ 4]  155     CALL LOCK 
      002385 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      002386 23 59                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                           002388   165     LINK=.
      002388 04                     166     .byte 4
      002389 5B 4E 5D 3F            167     .ascii "[N]?" 
      00238D                        168 INTQ:
      00238D CD 0E BE         [ 4]  169     CALL CR 
      002390 CD 04 71         [ 4]  170     call DOLIT 
      002393 00 5B                  171     .word '[
      002395 CD 04 36         [ 4]  172     CALL EMIT 
      002398 CD 0F 77         [ 4]  173     CALL DOT 
      00239B CD 0E FD         [ 4]  174     CALL  DOTQP
      00239E 03                     175     .byte 3
      00239F 5D 3F 20               176     .ascii "]? " 
      0023A2 CD 13 06         [ 4]  177     CALL QUERY 
      0023A5 CD 11 31         [ 4]  178     call TOKEN 
      0023A8 CC 24 36         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   4775 .endif
                           000001  4776 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   4777         .include "double.asm"
                                      1 ;************************************
                                      2 ;    doubles integers library 
                                      3 ;    doubles are signed 32 bits 
                                      4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      5 
                                      6 
                                      7     .module DOUBLE 
                                      8 
                                      9 ; check for negative sign 
                                     10 ; ajust pointer and cntr 
      0023AB                         11 nsign: ; a cntr -- a cntr f 
      0023AB CD 0B 2F         [ 4]   12     CALL ZERO 
      0023AE CD 05 5F         [ 4]   13     CALL TOR  ; R: sign 
      0023B1 CD 05 5F         [ 4]   14     CALL TOR  ; R: sign cntr 
      0023B4 CD 05 96         [ 4]   15     CALL DUPP 
      0023B7 CD 05 0D         [ 4]   16     CALL CAT 
      0023BA                         17     _DOLIT '-'
      0023BA CD 04 71         [ 4]    1     CALL DOLIT 
      0023BD 00 2D                    2     .word '-' 
      0023BF CD 08 66         [ 4]   18     CALL EQUAL 
      0023C2                         19     _QBRAN nsign1 
      0023C2 CD 04 A4         [ 4]    1     CALL QBRAN
      0023C5 23 DC                    2     .word nsign1
      0023C7 CD 0A C3         [ 4]   20     CALL ONEP ; a+ 
      0023CA CD 05 40         [ 4]   21     CALL RFROM 
      0023CD CD 0A D0         [ 4]   22     CALL ONEM ; cntr-
      0023D0 CD 05 40         [ 4]   23     CALL RFROM ; sign 
      0023D3 CD 07 DF         [ 4]   24     CALL INVER ; -1
      0023D6 CD 05 5F         [ 4]   25     CALL TOR   ; R: sign 
      0023D9 CD 05 5F         [ 4]   26     CALL TOR   ; R: cntr 
      0023DC                         27 nsign1:
      0023DC CD 05 40         [ 4]   28     CALL RFROM 
      0023DF CD 05 40         [ 4]   29     CALL RFROM 
      0023E2 81               [ 4]   30     RET 
                                     31 
                                     32 
                                     33 ; get all digits in row 
                                     34 ; stop at first non-digit or end of string 
                                     35 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      0023E3                         36 parse_digits:
      0023E3                         37 1$:
      0023E3 CD 05 96         [ 4]   38     CALL DUPP 
      0023E6                         39     _QBRAN 5$ 
      0023E6 CD 04 A4         [ 4]    1     CALL QBRAN
      0023E9 24 2B                    2     .word 5$
      0023EB CD 05 5F         [ 4]   40     CALL TOR   ; dlo dhi a R: cntr 
      0023EE CD 0C 06         [ 4]   41     CALL COUNT ; dlo dhi a+ char 
      0023F1 CD 06 66         [ 4]   42     CALL BASE 
      0023F4 CD 04 EF         [ 4]   43     CALL AT 
      0023F7 CD 0D FE         [ 4]   44     CALL DIGTQ 
      0023FA                         45     _QBRAN 4$ ; not a digit
      0023FA CD 04 A4         [ 4]    1     CALL QBRAN
      0023FD 24 22                    2     .word 4$
      0023FF CD 27 E6         [ 4]   46     CALL DTOR  ; dlo dhi R: cntr a+ c  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002402 CD 06 66         [ 4]   47     CALL BASE 
      002405 CD 04 EF         [ 4]   48     CALL AT 
      002408 CD 26 20         [ 4]   49     CALL DSSTAR
      00240B CD 05 40         [ 4]   50     CALL RFROM 
      00240E CD 0B 2F         [ 4]   51     CALL ZERO 
      002411 CD 2A E0         [ 4]   52     CALL DPLUS 
      002414 CD 05 40         [ 4]   53     CALL RFROM  ; dlo dhi a+ 
      002417 CD 05 40         [ 4]   54     CALL RFROM ; dlo dhi a+ cntr 
      00241A CD 0A D0         [ 4]   55     CALL ONEM 
      00241D                         56     _BRAN 1$ ; dlo dhi a+ R: 
      00241D CD 04 BB         [ 4]    1     CALL BRAN 
      002420 23 E3                    2     .word 1$ 
      002422 CD 05 8C         [ 4]   57 4$: CALL DROP  ; dlo dhi a+ 
      002425 CD 0A D0         [ 4]   58     CALL ONEM  ; unget char 
      002428 CD 05 40         [ 4]   59     CALL RFROM ; dlo dhi a+ cntr-
      00242B                         60 5$:
      00242B 81               [ 4]   61     RET 
                                     62 
                                     63 
                                     64 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     65 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     66 ;   convert string to integer 
                                     67 ;   double begin with '#' 
                                     68 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00242C                         69     _HEADER NUMBQ,7,"NUMBER?"
      00242C 23 88                    1         .word LINK 
                           00242E     2         LINK=.
      00242E 07                       3         .byte 7  
      00242F 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      002436                          5         NUMBQ:
                                     70 ; save current base value 
      002436 CD 06 66         [ 4]   71     CALL BASE 
      002439 CD 04 EF         [ 4]   72     CALL AT 
      00243C CD 05 5F         [ 4]   73     CALL TOR 
                                     74 ; initialize integer to 0     
      00243F 1D 00 04         [ 2]   75     SUBW X,#4 
      002442 90 5F            [ 1]   76     CLRW Y 
      002444 FF               [ 2]   77     LDW (X),Y 
      002445 EF 02            [ 2]   78     LDW (2,X),Y ; a 0 0 R: base  
      002447                         79     _DOLIT 2 
      002447 CD 04 71         [ 4]    1     CALL DOLIT 
      00244A 00 02                    2     .word 2 
      00244C CD 0B 88         [ 4]   80     CALL PICK  ; a 0 0 a R: base    
      00244F CD 0C 06         [ 4]   81     CALL COUNT ; a 0 0 a+ n 
                                     82 ; check for '#' double integer 
      002452 CD 05 C0         [ 4]   83     CALL OVER  ; a 0 0 a+ n a+
      002455 CD 05 0D         [ 4]   84     CALL CAT   ; a 0 0 a+ n c 
      002458                         85     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002458 CD 04 71         [ 4]    1     CALL DOLIT 
      00245B 00 23                    2     .word '#' 
      00245D CD 08 66         [ 4]   86     CALL EQUAL 
      002460 CD 05 5F         [ 4]   87     CALL TOR   ; a 0 0 a+ n R: base d? 
      002463 CD 05 53         [ 4]   88     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002466                         89     _QBRAN NUMQ0
      002466 CD 04 A4         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002469 24 77                    2     .word NUMQ0
                                     90 ; update a and count
      00246B CD 05 A6         [ 4]   91     CALL SWAPP 
      00246E CD 0A C3         [ 4]   92     CALL ONEP 
      002471 CD 05 A6         [ 4]   93     CALL SWAPP 
      002474 CD 0A D0         [ 4]   94     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                     95 ; check for '$' hexadecimal  
      002477                         96 NUMQ0: 
      002477 CD 05 C0         [ 4]   97     CALL OVER   
      00247A CD 05 0D         [ 4]   98     CALL CAT   
      00247D                         99     _DOLIT '$'
      00247D CD 04 71         [ 4]    1     CALL DOLIT 
      002480 00 24                    2     .word '$' 
      002482 CD 08 66         [ 4]  100     CALL EQUAL ; a 0 0 a+ n- f  
      002485                        101     _QBRAN NUMQ1 
      002485 CD 04 A4         [ 4]    1     CALL QBRAN
      002488 24 99                    2     .word NUMQ1
      00248A CD 0D D5         [ 4]  102     CALL HEX   ; switch to hexadecimal base 
                                    103 ; update a and count 
      00248D CD 05 A6         [ 4]  104     CALL SWAPP 
      002490 CD 0A C3         [ 4]  105     CALL ONEP 
      002493 CD 05 A6         [ 4]  106     CALL SWAPP
      002496 CD 0A D0         [ 4]  107     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    108 ; check for minus sign 
      002499                        109 NUMQ1: 
      002499 CD 23 AB         [ 4]  110     CALL nsign 
      00249C CD 05 5F         [ 4]  111     CALL TOR ; R: base d? sign  
                                    112 ; check for end of string     
      00249F CD 07 53         [ 4]  113     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      0024A2                        114     _QBRAN NUMQ4 ; yes , not a number 
      0024A2 CD 04 A4         [ 4]    1     CALL QBRAN
      0024A5 24 E7                    2     .word NUMQ4
      0024A7 CD 23 E3         [ 4]  115     CALL parse_digits
      0024AA CD 07 53         [ 4]  116     CALL QDUP 
      0024AD CD 05 E1         [ 4]  117     CALL ZEQUAL  
      0024B0                        118     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      0024B0 CD 04 A4         [ 4]    1     CALL QBRAN
      0024B3 24 E7                    2     .word NUMQ4
      0024B5 CD 05 8C         [ 4]  119     CALL DROP  ; a dlo dhi 
      0024B8 CD 05 40         [ 4]  120     CALL RFROM  ; a dlo dhi sign 
      0024BB                        121     _QBRAN NUMQ3
      0024BB CD 04 A4         [ 4]    1     CALL QBRAN
      0024BE 24 C3                    2     .word NUMQ3
      0024C0 CD 08 02         [ 4]  122     CALL DNEGA
      0024C3                        123 NUMQ3: 
      0024C3 CD 07 64         [ 4]  124     CALL ROT ; dlo dhi a  R: base d?
      0024C6 CD 05 8C         [ 4]  125     CALL DROP
      0024C9                        126     _DOLIT -2  ; double return -2 flag 
      0024C9 CD 04 71         [ 4]    1     CALL DOLIT 
      0024CC FF FE                    2     .word -2 
      0024CE CD 05 40         [ 4]  127     CALL RFROM ; dlo dhi d? R: base 
      0024D1 CD 07 DF         [ 4]  128     CALL INVER 
      0024D4                        129     _QBRAN NUMQ8 
      0024D4 CD 04 A4         [ 4]    1     CALL QBRAN
      0024D7 24 F0                    2     .word NUMQ8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0024D9 CD 05 A6         [ 4]  130     CALL SWAPP 
      0024DC CD 05 8C         [ 4]  131     CALL DROP
      0024DF CD 0A C3         [ 4]  132     CALL ONEP   ; single return -1 flag   
      0024E2                        133     _BRAN NUMQ8
      0024E2 CD 04 BB         [ 4]    1     CALL BRAN 
      0024E5 24 F0                    2     .word NUMQ8 
      0024E7                        134 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   135 .if WANT_FLOAT
      0024E7 CD 05 40         [ 4]  136     CALL RFROM ; sign 
      0024EA CD 05 40         [ 4]  137     CALL RFROM ; d? 
      0024ED CD 2F 32         [ 4]  138     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   139 .else 
                                    140     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    141     ADDW SP,#4 ; drop d? sign  R: base 
                                    142     CLRW Y 
                                    143     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    144 .endif 
                                    145 ; restore original base value     
      0024F0                        146 NUMQ8: 
      0024F0 CD 05 40         [ 4]  147     CALL RFROM 
      0024F3 CD 06 66         [ 4]  148     CALL BASE 
      0024F6 CD 04 D8         [ 4]  149     CALL STORE 
      0024F9 81               [ 4]  150     RET 
                                    151 
                                    152 
                                    153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    154 ;    D0= ( d -- 0|-1 )
                                    155 ;    check if double is 0 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024FA                        157     _HEADER DZEQUAL,3,"D0="
      0024FA 24 2E                    1         .word LINK 
                           0024FC     2         LINK=.
      0024FC 03                       3         .byte 3  
      0024FD 44 30 3D                 4         .ascii "D0="
      002500                          5         DZEQUAL:
      002500 CD 06 09         [ 4]  158     CALL ORR 
      002503 A6 FF            [ 1]  159     LD A,#0xFF
      002505 90 93            [ 1]  160     LDW Y,X
      002507 90 FE            [ 2]  161     LDW Y,(Y)
      002509 90 A3 00 00      [ 2]  162     CPW Y,#0 
      00250D 27 01            [ 1]  163     JREQ  ZEQ1
      00250F 4F               [ 1]  164     CLR A   ;false
      002510                        165 ZEQ1:
      002510 F7               [ 1]  166     LD     (X),A
      002511 E7 01            [ 1]  167     LD (1,X),A
      002513 81               [ 4]  168 	RET     
                                    169     
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;  DNEGATE ( d -- d )
                                    172 ;  negate double (2's complement)
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002514                        174     _HEADER DNEGAT,7,"DNEGATE"
      002514 24 FC                    1         .word LINK 
                           002516     2         LINK=.
      002516 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002517 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      00251E                          5         DNEGAT:
      00251E CD 07 DF         [ 4]  175     CALL INVER
      002521 CD 05 A6         [ 4]  176     CALL SWAPP 
      002524 CD 07 DF         [ 4]  177     CALL INVER 
      002527 90 93            [ 1]  178     LDW  Y,X 
      002529 90 FE            [ 2]  179     LDW Y,(Y)
      00252B 72 A9 00 01      [ 2]  180     ADDW Y,#1 
      00252F FF               [ 2]  181     LDW (X),Y 
      002530 24 0B            [ 1]  182     JRNC DNEG1 
      002532 90 93            [ 1]  183     LDW Y,X 
      002534 90 EE 02         [ 2]  184     LDW Y,(2,Y)
      002537 72 A9 00 01      [ 2]  185     ADDW Y,#1
      00253B EF 02            [ 2]  186     LDW (2,X),Y 
      00253D                        187 DNEG1:
      00253D CD 05 A6         [ 4]  188     CALL SWAPP 
      002540 81               [ 4]  189     RET      
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   DABS ( d -- d )
                                    193 ;   absolute value of double
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002541                        195     _HEADER DABS,4,"DABS"
      002541 25 16                    1         .word LINK 
                           002543     2         LINK=.
      002543 04                       3         .byte 4  
      002544 44 41 42 53              4         .ascii "DABS"
      002548                          5         DABS:
      002548 CD 05 96         [ 4]  196     CALL DUPP 
      00254B CD 05 CF         [ 4]  197     CALL ZLESS 
      00254E                        198     _QBRAN DABS1 
      00254E CD 04 A4         [ 4]    1     CALL QBRAN
      002551 25 56                    2     .word DABS1
      002553 CD 08 02         [ 4]  199     CALL DNEGA 
      002556                        200 DABS1:
      002556 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  DSIGN ( d -- d f )
                                    205 ;  sign of double 
                                    206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002557                        207     _HEADER DSIGN,5,"DSIGN"
      002557 25 43                    1         .word LINK 
                           002559     2         LINK=.
      002559 05                       3         .byte 5  
      00255A 44 53 49 47 4E           4         .ascii "DSIGN"
      00255F                          5         DSIGN:
      00255F A6 00            [ 1]  208     LD A,#0 
      002561 90 93            [ 1]  209     LDW Y,X 
      002563 90 FE            [ 2]  210     LDW Y,(Y)
      002565 2A 02            [ 1]  211     JRPL DSIGN1
      002567 A6 FF            [ 1]  212     LD A,#0XFF 
      002569                        213 DSIGN1:
      002569 1D 00 02         [ 2]  214     SUBW X,#2 
      00256C F7               [ 1]  215     LD (X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00256D E7 01            [ 1]  216     LD (1,X),A 
      00256F 81               [ 4]  217     RET 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;   D/MOD ( d s - r qd )
                                    221 ;   unsigned divide double by single 
                                    222 ;   return double quotient 
                                    223 ;   and single remainder 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002570                        225     _HEADER DSLMOD,5,"D/MOD"
      002570 25 59                    1         .word LINK 
                           002572     2         LINK=.
      002572 05                       3         .byte 5  
      002573 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002578                          5         DSLMOD:
      002578 90 93            [ 1]  226         LDW     Y,X             ; stack pointer to Y
      00257A FE               [ 2]  227         LDW     X,(X)           ; un
      00257B BF 26            [ 2]  228         LDW     YTEMP,X         ; save un
      00257D 93               [ 1]  229         LDW     X,Y
      00257E 89               [ 2]  230         PUSHW   X               ; save stack pointer
      00257F 90 89            [ 2]  231         PUSHW   Y 
      002581 EE 02            [ 2]  232         LDW     X,(2,X)           ; X=udh
      002583 90 BE 26         [ 2]  233         LDW     Y,YTEMP         ; divisor 
      002586 65               [ 2]  234         DIVW    X,Y 
      002587 BF 24            [ 2]  235         LDW     XTEMP,X         ; QUOTIENT hi 
      002589 93               [ 1]  236         LDW     X,Y             ; remainder in X 
      00258A 90 85            [ 2]  237         POPW    Y 
      00258C 90 EE 04         [ 2]  238         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00258F A6 10            [ 1]  239         LD      A,#16           ; loop count
      002591 90 58            [ 2]  240         SLLW    Y               ; udl shift udl into udh
      002593                        241 DSLMOD3:
      002593 59               [ 2]  242         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      002594 25 04            [ 1]  243         JRC     DSLMODa         ; if carry out of rotate
      002596 B3 26            [ 2]  244         CPW     X,YTEMP         ; compare udh to un
      002598 25 05            [ 1]  245         JRULT   DSLMOD4         ; can't subtract
      00259A                        246 DSLMODa:
      00259A 72 B0 00 26      [ 2]  247         SUBW    X,YTEMP         ; can subtract
      00259E 98               [ 1]  248         RCF
      00259F                        249 DSLMOD4:
      00259F 8C               [ 1]  250         CCF                     ; quotient bit
      0025A0 90 59            [ 2]  251         RLCW    Y               ; rotate into quotient, rotate out udl
      0025A2 4A               [ 1]  252         DEC     A               ; repeat
      0025A3 26 EE            [ 1]  253         JRNE    DSLMOD3           ; if A == 0
      0025A5                        254 DSLMODb:
      0025A5 BF 26            [ 2]  255         LDW     YTEMP,X         ; done, save remainder
      0025A7 85               [ 2]  256         POPW    X               ; restore stack pointer
      0025A8 EF 02            [ 2]  257         LDW     (2,X),Y           ; save quotient low 
      0025AA 90 BE 24         [ 2]  258         LDW     Y,XTEMP         ; quotient hi 
      0025AD FF               [ 2]  259         LDW     (X),Y           ; save quotient hi 
      0025AE 90 BE 26         [ 2]  260         LDW     Y,YTEMP         ; remainder onto stack
      0025B1 EF 04            [ 2]  261         LDW     (4,X),Y
      0025B3 81               [ 4]  262         RET 
                                    263 
                                    264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    265 ;   D# ( d -- d )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    266 ;   extract least digit 
                                    267 ;   from double integer 
                                    268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025B4                        269     _HEADER DDIG,2,"D#"
      0025B4 25 72                    1         .word LINK 
                           0025B6     2         LINK=.
      0025B6 02                       3         .byte 2  
      0025B7 44 23                    4         .ascii "D#"
      0025B9                          5         DDIG:
      0025B9 CD 06 66         [ 4]  270     CALL BASE 
      0025BC CD 04 EF         [ 4]  271     CALL AT 
      0025BF CD 25 78         [ 4]  272     CALL DSLMOD
      0025C2 CD 07 64         [ 4]  273     CALL ROT   
      0025C5 CD 0C FE         [ 4]  274     CALL DIGIT 
      0025C8 CD 0D 4A         [ 4]  275     CALL HOLD 
      0025CB 81               [ 4]  276     RET 
                                    277 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    279 ;    D#S ( d -- s )
                                    280 ;   extract digit from double 
                                    281 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025CC                        282     _HEADER DDIGS,3,"D#S"
      0025CC 25 B6                    1         .word LINK 
                           0025CE     2         LINK=.
      0025CE 03                       3         .byte 3  
      0025CF 44 23 53                 4         .ascii "D#S"
      0025D2                          5         DDIGS:
      0025D2 CD 25 B9         [ 4]  283     CALL    DDIG 
      0025D5 CD 07 B0         [ 4]  284     CALL    DDUP 
      0025D8 CD 25 00         [ 4]  285     CALL    DZEQUAL
      0025DB                        286     _QBRAN  DDIGS 
      0025DB CD 04 A4         [ 4]    1     CALL QBRAN
      0025DE 25 D2                    2     .word DDIGS
      0025E0 CD 05 8C         [ 4]  287     CALL    DROP 
      0025E3 81               [ 4]  288     RET 
                                    289 
                                    290 
                                    291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    292 ;   D. ( d -- )
                                    293 ;   display double integer 
                                    294 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E4                        295     _HEADER DDOT,2,"D."
      0025E4 25 CE                    1         .word LINK 
                           0025E6     2         LINK=.
      0025E6 02                       3         .byte 2  
      0025E7 44 2E                    4         .ascii "D."
      0025E9                          5         DDOT:
      0025E9 CD 0E 76         [ 4]  296     CALL SPACE 
      0025EC CD 25 5F         [ 4]  297     CALL DSIGN 
      0025EF CD 05 5F         [ 4]  298     CALL TOR
      0025F2 CD 05 53         [ 4]  299     CALL RAT 
      0025F5                        300     _QBRAN DDOT0
      0025F5 CD 04 A4         [ 4]    1     CALL QBRAN
      0025F8 25 FD                    2     .word DDOT0
      0025FA CD 08 02         [ 4]  301     CALL DNEGA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0025FD                        302 DDOT0:     
      0025FD CD 0D 3A         [ 4]  303     CALL BDIGS 
      002600 CD 25 D2         [ 4]  304     CALL DDIGS 
      002603 CD 05 40         [ 4]  305     CALL RFROM 
      002606                        306     _QBRAN DDOT1 
      002606 CD 04 A4         [ 4]    1     CALL QBRAN
      002609 26 13                    2     .word DDOT1
      00260B                        307     _DOLIT '-' 
      00260B CD 04 71         [ 4]    1     CALL DOLIT 
      00260E 00 2D                    2     .word '-' 
      002610 CD 0D 4A         [ 4]  308     CALL HOLD 
      002613                        309 DDOT1: 
      002613 CD 0D 9F         [ 4]  310     CALL EDIGS 
      002616 CD 0E A0         [ 4]  311     CALL TYPES     
      002619 81               [ 4]  312     RET 
                                    313 
                                    314 
                                    315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    316 ; multiply double by single 
                                    317 ; return double 
                                    318 ;  ( d s -- d )
                                    319 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00261A                        320     _HEADER DSSTAR,3,"DS*"
      00261A 25 E6                    1         .word LINK 
                           00261C     2         LINK=.
      00261C 03                       3         .byte 3  
      00261D 44 53 2A                 4         .ascii "DS*"
      002620                          5         DSSTAR:
                                    321 ;DSSTAR:
      002620 CD 05 5F         [ 4]  322     CALL TOR
      002623 CD 05 96         [ 4]  323     CALL DUPP 
      002626 CD 05 CF         [ 4]  324     CALL ZLESS
      002629 CD 05 96         [ 4]  325     CALL DUPP 
      00262C CD 05 5F         [ 4]  326     CALL TOR 
      00262F                        327     _QBRAN DSSTAR1 
      00262F CD 04 A4         [ 4]    1     CALL QBRAN
      002632 26 37                    2     .word DSSTAR1
      002634 CD 08 02         [ 4]  328     CALL DNEGA 
      002637                        329 DSSTAR1:
      002637 CD 05 40         [ 4]  330     CALL RFROM 
      00263A CD 07 83         [ 4]  331     CALL NROT       
      00263D CD 05 A6         [ 4]  332     CALL SWAPP 
      002640 CD 05 53         [ 4]  333     CALL RAT 
      002643 CD 09 F8         [ 4]  334     CALL UMSTA
      002646 CD 07 64         [ 4]  335     CALL ROT 
      002649 CD 05 40         [ 4]  336     CALL RFROM 
      00264C CD 09 F8         [ 4]  337     CALL UMSTA 
      00264F CD 05 8C         [ 4]  338     CALL DROP ; DROP OVERFLOW 
      002652 CD 07 C5         [ 4]  339     CALL PLUS 
      002655 CD 07 64         [ 4]  340     CALL ROT 
      002658                        341     _QBRAN DSSTAR3 
      002658 CD 04 A4         [ 4]    1     CALL QBRAN
      00265B 26 60                    2     .word DSSTAR3
      00265D CD 08 02         [ 4]  342     CALL DNEGA 
      002660                        343 DSSTAR3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002660 81               [ 4]  344     RET 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    347 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    348 ;  swap double 
                                    349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002661                        350     _HEADER DSWAP,5,"2SWAP"
      002661 26 1C                    1         .word LINK 
                           002663     2         LINK=.
      002663 05                       3         .byte 5  
      002664 32 53 57 41 50           4         .ascii "2SWAP"
      002669                          5         DSWAP:
      002669 90 93            [ 1]  351     LDW Y,X 
      00266B 90 FE            [ 2]  352     LDW Y,(Y)
      00266D 90 BF 26         [ 2]  353     LDW YTEMP,Y ; d2 hi 
      002670 90 93            [ 1]  354     LDW Y,X 
      002672 90 EE 02         [ 2]  355     LDW Y,(2,Y)
      002675 90 BF 24         [ 2]  356     LDW XTEMP,Y  ; d2 lo 
      002678 90 93            [ 1]  357     LDW Y,X 
      00267A 90 EE 04         [ 2]  358     LDW Y,(4,Y)  ; d1 hi 
      00267D FF               [ 2]  359     LDW (X),Y 
      00267E 90 93            [ 1]  360     LDW Y,X
      002680 90 EE 06         [ 2]  361     LDW Y,(6,Y)  ; d1 lo 
      002683 EF 02            [ 2]  362     LDW (2,X),Y
      002685 90 BE 26         [ 2]  363     LDW Y,YTEMP  
      002688 EF 04            [ 2]  364     LDW (4,X),Y 
      00268A 90 BE 24         [ 2]  365     LDW Y,XTEMP 
      00268D EF 06            [ 2]  366     LDW (6,X),Y 
      00268F 81               [ 4]  367     RET 
                                    368 
                                    369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    370 ;    DCLZ ( d -- u )
                                    371 ;    double count leading zeros
                                    372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002690                        373     _HEADER DCLZ,4,"DCLZ"
      002690 26 63                    1         .word LINK 
                           002692     2         LINK=.
      002692 04                       3         .byte 4  
      002693 44 43 4C 5A              4         .ascii "DCLZ"
      002697                          5         DCLZ:
      002697 4F               [ 1]  374     CLR A 
      002698 90 93            [ 1]  375     LDW Y,X 
      00269A 90 FE            [ 2]  376     LDW Y,(Y)
      00269C 2B 18            [ 1]  377     JRMI DCLZ8 ; no leading zero 
      00269E 27 09            [ 1]  378     JREQ DCLZ4 ; >=16 
      0026A0                        379 DCLZ1: ; <16
      0026A0 90 58            [ 2]  380     SLLW Y
      0026A2 4C               [ 1]  381     INC A 
      0026A3 90 5D            [ 2]  382     TNZW Y 
      0026A5 2B 0F            [ 1]  383     JRMI DCLZ8
      0026A7 20 F7            [ 2]  384     JRA DCLZ1 
      0026A9                        385 DCLZ4:
      0026A9 A6 10            [ 1]  386     LD A,#16 
      0026AB 90 93            [ 1]  387     LDW Y,X 
      0026AD 90 EE 02         [ 2]  388     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0026B0 2B 04            [ 1]  389     JRMI DCLZ8 
      0026B2 26 EC            [ 1]  390     JRNE DCLZ1 
      0026B4 AB 10            [ 1]  391     ADD A,#16
      0026B6                        392 DCLZ8: 
      0026B6 1C 00 02         [ 2]  393     ADDW X,#2 
      0026B9 90 5F            [ 1]  394     CLRW Y 
      0026BB 90 97            [ 1]  395     LD YL,A 
      0026BD FF               [ 2]  396     LDW (X),Y 
      0026BE 81               [ 4]  397     RET 
                                    398 
                                    399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    400 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    401 ;   rotate left doubles 
                                    402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026BF                        403     _HEADER NDROT,5,"2<ROT"
      0026BF 26 92                    1         .word LINK 
                           0026C1     2         LINK=.
      0026C1 05                       3         .byte 5  
      0026C2 32 3C 52 4F 54           4         .ascii "2<ROT"
      0026C7                          5         NDROT:
                                    404 ; save d3 in temp 
      0026C7 90 93            [ 1]  405     LDW Y,X 
      0026C9 90 FE            [ 2]  406     LDW Y,(Y)
      0026CB 90 BF 26         [ 2]  407     LDW YTEMP,Y  ; d3 hi 
      0026CE 90 93            [ 1]  408     LDW Y,X 
      0026D0 90 EE 02         [ 2]  409     LDW Y,(2,Y)
      0026D3 90 BF 24         [ 2]  410     LDW XTEMP,Y  ; d3 lo 
                                    411 ; put d2 in d1 slot 
      0026D6 90 93            [ 1]  412     LDW Y,X 
      0026D8 90 EE 04         [ 2]  413     LDW Y,(4,Y) 
      0026DB FF               [ 2]  414     LDW (X),Y   ; d2 hi 
      0026DC 90 93            [ 1]  415     LDW Y,X 
      0026DE 90 EE 06         [ 2]  416     LDW Y,(6,Y)
      0026E1 EF 02            [ 2]  417     LDW (2,X),Y ; d2 lo
                                    418 ; put d1 in d2 slot 
      0026E3 90 93            [ 1]  419     LDW Y,X 
      0026E5 90 EE 08         [ 2]  420     LDW Y,(8,Y) 
      0026E8 EF 04            [ 2]  421     LDW (4,X),Y ; d1 hi 
      0026EA 90 93            [ 1]  422     LDW Y,X 
      0026EC 90 EE 0A         [ 2]  423     LDW Y,(10,Y)
      0026EF EF 06            [ 2]  424     LDW (6,X),Y  ; d1 lo 
                                    425 ; put d3 in d1 slot 
      0026F1 90 BE 26         [ 2]  426     LDW Y,YTEMP 
      0026F4 EF 08            [ 2]  427     LDW (8,X),Y  ; d3 hi 
      0026F6 90 BE 24         [ 2]  428     LDW Y,XTEMP 
      0026F9 EF 0A            [ 2]  429     LDW (10,X),Y  ; d3 lo 
      0026FB 81               [ 4]  430     RET 
                                    431 
                                    432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    433 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    434 ;   rotate right doubles 
                                    435 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FC                        436     _HEADER DROT,4,"2ROT"
      0026FC 26 C1                    1         .word LINK 
                           0026FE     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0026FE 04                       3         .byte 4  
      0026FF 32 52 4F 54              4         .ascii "2ROT"
      002703                          5         DROT:
                                    437 ; save d3 in temp 
      002703 90 93            [ 1]  438     LDW Y,X 
      002705 90 FE            [ 2]  439     LDW Y,(Y)
      002707 90 BF 26         [ 2]  440     LDW YTEMP,Y ; d3 hi 
      00270A 90 93            [ 1]  441     LDW Y,X 
      00270C 90 EE 02         [ 2]  442     LDW Y,(2,Y)
      00270F 90 BF 24         [ 2]  443     LDW XTEMP,Y ; d3 lo 
                                    444 ; put d1 in d3 slot 
      002712 90 93            [ 1]  445     LDW Y,X 
      002714 90 EE 08         [ 2]  446     LDW Y,(8,Y)
      002717 FF               [ 2]  447     LDW (X),Y  ; d1 hi 
      002718 90 93            [ 1]  448     LDW Y,X 
      00271A 90 EE 0A         [ 2]  449     LDW Y,(10,Y) 
      00271D EF 02            [ 2]  450     LDW (2,X),Y ; d1 lo 
                                    451 ; put d2 in d1 slot 
      00271F 90 93            [ 1]  452     LDW Y,X 
      002721 90 EE 04         [ 2]  453     LDW Y,(4,Y) ; d2 hi 
      002724 EF 08            [ 2]  454     LDW (8,X),Y 
      002726 90 93            [ 1]  455     LDW Y,X 
      002728 90 EE 06         [ 2]  456     LDW Y,(6,Y) ; d2 lo 
      00272B EF 0A            [ 2]  457     LDW (10,X),Y 
                                    458 ; put d3 in d2 slot 
      00272D 90 BE 26         [ 2]  459     LDW Y,YTEMP 
      002730 EF 04            [ 2]  460     LDW (4,X),Y 
      002732 90 BE 24         [ 2]  461     LDW Y,XTEMP 
      002735 EF 06            [ 2]  462     LDW (6,X),Y 
      002737 81               [ 4]  463     RET 
                                    464 
                                    465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    466 ;   D= ( d1 d2 -- f )
                                    467 ;   d1==d2?
                                    468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002738                        469     _HEADER DEQUAL,2,"D="
      002738 26 FE                    1         .word LINK 
                           00273A     2         LINK=.
      00273A 02                       3         .byte 2  
      00273B 44 3D                    4         .ascii "D="
      00273D                          5         DEQUAL:
      00273D A6 00            [ 1]  470     LD A,#0 
      00273F 90 93            [ 1]  471     LDW Y,X 
      002741 90 FE            [ 2]  472     LDW Y,(Y)
      002743 E3 04            [ 2]  473     CPW Y,(4,X)
      002745 26 0B            [ 1]  474     JRNE DEQU4 
      002747 90 93            [ 1]  475     LDW Y,X 
      002749 90 EE 02         [ 2]  476     LDW Y,(2,Y)
      00274C E3 06            [ 2]  477     CPW Y,(6,X)
      00274E 26 02            [ 1]  478     JRNE DEQU4 
      002750 A6 FF            [ 1]  479     LD A,#0XFF
      002752                        480 DEQU4:
      002752 1C 00 06         [ 2]  481     ADDW X,#6
      002755 F7               [ 1]  482     LD (X),A 
      002756 E7 01            [ 1]  483     LD (1,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002758 81               [ 4]  484     RET 
                                    485 
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    487 ;   D> ( d1 d2 -- f )
                                    488 ;   d1>d2?
                                    489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002759                        490     _HEADER DGREAT,2,"D>"
      002759 27 3A                    1         .word LINK 
                           00275B     2         LINK=.
      00275B 02                       3         .byte 2  
      00275C 44 3E                    4         .ascii "D>"
      00275E                          5         DGREAT:
      00275E A6 FF            [ 1]  491     LD A,#0XFF 
      002760 90 93            [ 1]  492     LDW Y,X 
      002762 90 EE 04         [ 2]  493     LDW Y,(4,Y)  ; d1 hi 
      002765 F3               [ 2]  494     CPW Y,(X)    ; d2 hi 
      002766 2C 0B            [ 1]  495     JRSGT DGREAT4 
      002768 90 93            [ 1]  496     LDW Y,X 
      00276A 90 EE 06         [ 2]  497     LDW Y,(6,Y)
      00276D E3 02            [ 2]  498     CPW Y,(2,X)
      00276F 22 02            [ 1]  499     JRUGT DGREAT4 
      002771 A6 00            [ 1]  500     LD A,#0
      002773                        501 DGREAT4:
      002773 1C 00 06         [ 2]  502     ADDW X,#6
      002776 F7               [ 1]  503     LD (X),A 
      002777 E7 01            [ 1]  504     LD (1,X),A 
      002779 81               [ 4]  505     RET
                                    506 
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    508 ;   D< ( d1 d2 -- f )
                                    509 ;   d1<d2? 
                                    510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00277A                        511     _HEADER DLESS,2,"D<"
      00277A 27 5B                    1         .word LINK 
                           00277C     2         LINK=.
      00277C 02                       3         .byte 2  
      00277D 44 3C                    4         .ascii "D<"
      00277F                          5         DLESS:
      00277F CD 2B 12         [ 4]  512     CALL DSUB
      002782                        513     _DOLIT 0 
      002782 CD 04 71         [ 4]    1     CALL DOLIT 
      002785 00 00                    2     .word 0 
      002787 CD 07 83         [ 4]  514     CALL NROT  
      00278A CD 27 9C         [ 4]  515     CALL DZLESS 
      00278D                        516     _QBRAN DLESS4
      00278D CD 04 A4         [ 4]    1     CALL QBRAN
      002790 27 95                    2     .word DLESS4
      002792 CD 07 DF         [ 4]  517     CALL INVER  
      002795                        518 DLESS4:
      002795 81               [ 4]  519     RET
                                    520 
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    522 ;  D0< ( d -- f )
                                    523 ;  d<0? 
                                    524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002796                        525     _HEADER DZLESS,3,"D0<"
      002796 27 7C                    1         .word LINK 
                           002798     2         LINK=.
      002798 03                       3         .byte 3  
      002799 44 30 3C                 4         .ascii "D0<"
      00279C                          5         DZLESS:
      00279C A6 00            [ 1]  526     LD A,#0 
      00279E 90 93            [ 1]  527     LDW Y,X 
      0027A0 90 FE            [ 2]  528     LDW Y,(Y)
      0027A2 2A 02            [ 1]  529     JRPL DZLESS1 
      0027A4 A6 FF            [ 1]  530     LD A,#0XFF 
      0027A6                        531 DZLESS1:
      0027A6 1C 00 02         [ 2]  532     ADDW X,#2 
      0027A9 F7               [ 1]  533     LD (X),A 
      0027AA E7 01            [ 1]  534     LD (1,X),A    
      0027AC 81               [ 4]  535     RET 
                                    536 
                                    537 
                                    538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    539 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    540 ; compare 2 doubles 
                                    541 ; keep the doubles 
                                    542 ; return flag: 
                                    543 ;    -1 if d1<d2 
                                    544 ;     0 if d1==d2
                                    545 ;     1 if d1>d2 
                                    546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AD                        547     _HEADER DCMP,4,"DCMP"
      0027AD 27 98                    1         .word LINK 
                           0027AF     2         LINK=.
      0027AF 04                       3         .byte 4  
      0027B0 44 43 4D 50              4         .ascii "DCMP"
      0027B4                          5         DCMP:
      0027B4 90 93            [ 1]  548     LDW Y,X 
      0027B6 90 EE 04         [ 2]  549     LDW Y,(4,Y)
      0027B9 F3               [ 2]  550     CPW Y,(X) 
      0027BA 27 04            [ 1]  551     JREQ DCMP2 
      0027BC 2F 13            [ 1]  552     JRSLT DCMP_SMALL 
      0027BE 20 17            [ 2]  553     JRA  DCMP_GREAT 
      0027C0                        554 DCMP2:    
      0027C0 90 93            [ 1]  555     LDW Y,X 
      0027C2 90 EE 06         [ 2]  556     LDW Y,(6,Y)
      0027C5 E3 02            [ 2]  557     CPW Y,(2,X)
      0027C7 27 04            [ 1]  558     JREQ DCMP_EQUAL  
      0027C9 25 06            [ 1]  559     JRULT DCMP_SMALL 
      0027CB 20 0A            [ 2]  560     JRA DCMP_GREAT
      0027CD                        561 DCMP_EQUAL:
      0027CD 90 5F            [ 1]  562     CLRW Y 
      0027CF 20 0A            [ 2]  563     JRA DCMP4 
      0027D1                        564 DCMP_SMALL:
      0027D1 90 AE FF FF      [ 2]  565     LDW Y,#-1 
      0027D5 20 04            [ 2]  566     JRA DCMP4 
      0027D7                        567 DCMP_GREAT:
      0027D7 90 AE 00 01      [ 2]  568     LDW Y,#1
      0027DB                        569 DCMP4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0027DB 1D 00 02         [ 2]  570     SUBW X,#2 
      0027DE FF               [ 2]  571     LDW (X),Y 
      0027DF 81               [ 4]  572     RET
                                    573 
                                    574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    575 ;   2>R ( d -- R: d )
                                    576 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E0                        577     _HEADER DTOR,3,"2>R"
      0027E0 27 AF                    1         .word LINK 
                           0027E2     2         LINK=.
      0027E2 03                       3         .byte 3  
      0027E3 32 3E 52                 4         .ascii "2>R"
      0027E6                          5         DTOR:
      0027E6 90 85            [ 2]  578     POPW Y 
      0027E8 90 BF 26         [ 2]  579     LDW YTEMP,Y 
      0027EB 90 93            [ 1]  580     LDW Y,X 
      0027ED 90 EE 02         [ 2]  581     LDW Y,(2,Y)
      0027F0 90 89            [ 2]  582     PUSHW Y   ; d low 
      0027F2 90 93            [ 1]  583     LDW Y,X 
      0027F4 90 FE            [ 2]  584     LDW Y,(Y)
      0027F6 90 89            [ 2]  585     PUSHW Y   ; d hi 
      0027F8 1C 00 04         [ 2]  586     ADDW X,#4  
      0027FB 92 CC 26         [ 5]  587     JP [YTEMP]
                                    588 
                                    589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    590 ;  2R> ( -- d ) R: d --      
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027FE                        592     _HEADER DRFROM,3,"2R>"
      0027FE 27 E2                    1         .word LINK 
                           002800     2         LINK=.
      002800 03                       3         .byte 3  
      002801 32 52 3E                 4         .ascii "2R>"
      002804                          5         DRFROM:
      002804 90 85            [ 2]  593     POPW Y      ; d hi 
      002806 90 BF 26         [ 2]  594     LDW YTEMP,Y 
      002809 1D 00 04         [ 2]  595     SUBW X,#4
      00280C 90 85            [ 2]  596     POPW Y       ; d hi 
      00280E FF               [ 2]  597     LDW (X),Y 
      00280F 90 85            [ 2]  598     POPW Y       ; d low  
      002811 EF 02            [ 2]  599     LDW (2,X),Y 
      002813 92 CC 26         [ 5]  600     JP [YTEMP]
                                    601     
                                    602 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    603 ;   2R@ ( -- d )
                                    604 ;   fecth a double from RSTACK
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002816                        606     _HEADER DRAT,3,"2R@"
      002816 28 00                    1         .word LINK 
                           002818     2         LINK=.
      002818 03                       3         .byte 3  
      002819 32 52 40                 4         .ascii "2R@"
      00281C                          5         DRAT:
      00281C 90 85            [ 2]  607     POPW Y 
      00281E 90 BF 26         [ 2]  608     LDW YTEMP,Y 
      002821 1D 00 04         [ 2]  609     SUBW X,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      002824 16 01            [ 2]  610     LDW Y,(1,SP)
      002826 FF               [ 2]  611     LDW (X),Y 
      002827 16 03            [ 2]  612     LDW Y,(3,SP)
      002829 EF 02            [ 2]  613     LDW (2,X),Y 
      00282B 92 CC 26         [ 5]  614     JP [YTEMP]
                                    615 
                                    616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    617 ;  2VARIABLE <name> 
                                    618 ;  create a double variable 
                                    619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00282E                        620     _HEADER DVARIA,9,"2VARIABLE"
      00282E 28 18                    1         .word LINK 
                           002830     2         LINK=.
      002830 09                       3         .byte 9  
      002831 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      00283A                          5         DVARIA:
      00283A CD 0C 1D         [ 4]  621         CALL HERE
      00283D CD 05 96         [ 4]  622         CALL DUPP
      002840                        623         _DOLIT 4  
      002840 CD 04 71         [ 4]    1     CALL DOLIT 
      002843 00 04                    2     .word 4 
      002845 CD 07 C5         [ 4]  624         CALL PLUS 
      002848 CD 06 F7         [ 4]  625         CALL VPP 
      00284B CD 04 D8         [ 4]  626         CALL STORE
      00284E CD 18 05         [ 4]  627         CALL CREAT
      002851 CD 05 96         [ 4]  628         CALL DUPP
      002854 CD 14 77         [ 4]  629         CALL COMMA
      002857 CD 0B 2F         [ 4]  630         CALL ZERO
      00285A CD 05 C0         [ 4]  631         CALL OVER 
      00285D CD 04 D8         [ 4]  632         CALL STORE 
      002860 CD 0B 2F         [ 4]  633         CALL ZERO 
      002863 CD 05 A6         [ 4]  634         CALL SWAPP 
      002866 CD 04 D8         [ 4]  635         CALL STORE
      002869 CD 21 0B         [ 4]  636         CALL FMOVE ; move definition to FLASH
      00286C CD 07 53         [ 4]  637         CALL QDUP 
      00286F CD 04 A4         [ 4]  638         CALL QBRAN 
      002872 18 52                  639         .word SET_RAMLAST   
      002874 CD 1B B3         [ 4]  640         call UPDATVP  ; don't update if variable kept in RAM.
      002877 CD 21 9F         [ 4]  641         CALL UPDATPTR
      00287A 81               [ 4]  642         RET         
                                    643 
                                    644 
                                    645 
                                    646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    647 ;  2LITERAL ( d -- )
                                    648 ;  compile double literal 
                                    649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00287B                        650     _HEADER DLITER,IMEDD+8,"2LITERAL"
      00287B 28 30                    1         .word LINK 
                           00287D     2         LINK=.
      00287D 88                       3         .byte IMEDD+8  
      00287E 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002886                          5         DLITER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      002886 CD 14 BC         [ 4]  651     CALL COMPI 
      002889 28 91                  652     .word do2lit 
      00288B CD 14 77         [ 4]  653     CALL COMMA 
      00288E CC 14 77         [ 2]  654     JP   COMMA 
                                    655 
                                    656 
                                    657 ; runtime for 2LITERAL 
      002891                        658 do2lit:
      002891 1D 00 04         [ 2]  659     SUBW X,#4 
      002894 16 01            [ 2]  660     LDW Y,(1,SP)
      002896 90 FE            [ 2]  661     LDW Y,(Y)
      002898 FF               [ 2]  662     LDW (X),Y 
      002899 16 01            [ 2]  663     LDW Y,(1,SP)
      00289B 90 EE 02         [ 2]  664     LDW Y,(2,Y)
      00289E EF 02            [ 2]  665     LDW (2,X),Y 
      0028A0 90 85            [ 2]  666     POPW Y 
      0028A2 90 EC 04         [ 2]  667     JP (4,Y)
                                    668 
                                    669 
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    671 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A5                        673     _HEADER DOVER,5,"2OVER"
      0028A5 28 7D                    1         .word LINK 
                           0028A7     2         LINK=.
      0028A7 05                       3         .byte 5  
      0028A8 32 4F 56 45 52           4         .ascii "2OVER"
      0028AD                          5         DOVER:
      0028AD 90 93            [ 1]  674     LDW Y,X 
      0028AF 1D 00 04         [ 2]  675     SUBW X,#4 
      0028B2 90 89            [ 2]  676     PUSHW Y 
      0028B4 90 EE 04         [ 2]  677     LDW Y,(4,Y)  ; d1 hi 
      0028B7 FF               [ 2]  678     LDW (X),Y 
      0028B8 90 85            [ 2]  679     POPW Y 
      0028BA 90 EE 06         [ 2]  680     LDW Y,(6,Y)  ;d1 lo 
      0028BD EF 02            [ 2]  681     LDW (2,X),Y 
      0028BF 81               [ 4]  682     RET 
                                    683 
                                    684 
                                    685 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    686 ;   D2/ ( d -- d/2 )
                                    687 ;   divide double by 2 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C0                        689     _HEADER D2SLASH,3,"D2/"
      0028C0 28 A7                    1         .word LINK 
                           0028C2     2         LINK=.
      0028C2 03                       3         .byte 3  
      0028C3 44 32 2F                 4         .ascii "D2/"
      0028C6                          5         D2SLASH:
      0028C6 90 93            [ 1]  690     LDW Y,X 
      0028C8 90 FE            [ 2]  691     LDW Y,(Y)
      0028CA 90 57            [ 2]  692     SRAW Y 
      0028CC FF               [ 2]  693     LDW (X),Y 
      0028CD 90 93            [ 1]  694     LDW Y,X 
      0028CF 90 EE 02         [ 2]  695     LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0028D2 90 56            [ 2]  696     RRCW Y 
      0028D4 EF 02            [ 2]  697     LDW (2,X),Y 
      0028D6 81               [ 4]  698     RET
                                    699 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    701 ;  D2* ( d -- d*2 )
                                    702 ;  multiply double by 2 
                                    703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028D7                        704     _HEADER D2STAR,3,"D2*"
      0028D7 28 C2                    1         .word LINK 
                           0028D9     2         LINK=.
      0028D9 03                       3         .byte 3  
      0028DA 44 32 2A                 4         .ascii "D2*"
      0028DD                          5         D2STAR:
      0028DD 90 93            [ 1]  705     LDW Y,X 
      0028DF 90 EE 02         [ 2]  706     LDW Y,(2,Y)
      0028E2 98               [ 1]  707     RCF 
      0028E3 90 59            [ 2]  708     RLCW Y 
      0028E5 EF 02            [ 2]  709     LDW (2,X),Y 
      0028E7 90 93            [ 1]  710     LDW Y,X 
      0028E9 90 FE            [ 2]  711     LDW Y,(Y)
      0028EB 90 59            [ 2]  712     RLCW Y 
      0028ED FF               [ 2]  713     LDW (X),Y 
      0028EE 81               [ 4]  714     RET 
                                    715 
                                    716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    717 ;   DLSHIFT ( d n -- d )
                                    718 ;   left shift double 
                                    719 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028EF                        720     _HEADER DLSHIFT,7,"DLSHIFT"
      0028EF 28 D9                    1         .word LINK 
                           0028F1     2         LINK=.
      0028F1 07                       3         .byte 7  
      0028F2 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0028F9                          5         DLSHIFT:
      0028F9 E6 01            [ 1]  721     LD A,(1,X) ; shift count 
      0028FB 1C 00 02         [ 2]  722     ADDW X,#2 
      0028FE 90 93            [ 1]  723     LDW Y,X 
      002900 90 FE            [ 2]  724     LDW Y,(Y)
      002902 90 BF 26         [ 2]  725     LDW YTEMP,Y  ; d hi 
      002905 90 93            [ 1]  726     LDW Y,X 
      002907 90 EE 02         [ 2]  727     LDW Y,(2,Y)  ; d low 
      00290A                        728 DLSHIFT1:
      00290A 4D               [ 1]  729     TNZ A 
      00290B 27 12            [ 1]  730     JREQ DLSHIFT2 
      00290D 98               [ 1]  731     RCF 
      00290E 90 59            [ 2]  732     RLCW Y 
      002910 90 89            [ 2]  733     PUSHW Y 
      002912 90 BE 26         [ 2]  734     LDW Y,YTEMP 
      002915 90 59            [ 2]  735     RLCW Y 
      002917 90 BF 26         [ 2]  736     LDW YTEMP,Y 
      00291A 90 85            [ 2]  737     POPW Y 
      00291C 4A               [ 1]  738     DEC A 
      00291D 20 EB            [ 2]  739     JRA DLSHIFT1 
      00291F                        740 DLSHIFT2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00291F EF 02            [ 2]  741     LDW (2,X),Y 
      002921 90 BE 26         [ 2]  742     LDW Y,YTEMP 
      002924 FF               [ 2]  743     LDW (X),Y 
      002925 81               [ 4]  744     RET 
                                    745 
                                    746 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    747 ;  DD/MOD ( d1 d2 -- dr dq )
                                    748 ;  unsigned division double 
                                    749 ;  double.
                                    750 ;  return double quotient and 
                                    751 ;  double remainder 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002926                        753     _HEADER DDSLMOD,6,"DD/MOD"
      002926 28 F1                    1         .word LINK 
                           002928     2         LINK=.
      002928 06                       3         .byte 6  
      002929 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
      00292F                          5         DDSLMOD:
      00292F CD 07 B0         [ 4]  754     CALL DDUP 
      002932 CD 26 97         [ 4]  755     CALL DCLZ 
      002935 CD 05 96         [ 4]  756     CALL DUPP
      002938                        757     _DOLIT 16 
      002938 CD 04 71         [ 4]    1     CALL DOLIT 
      00293B 00 10                    2     .word 16 
      00293D CD 08 C1         [ 4]  758     CALL GREAT 
      002940                        759     _QBRAN DDSLMOD1 
      002940 CD 04 A4         [ 4]    1     CALL QBRAN
      002943 29 4C                    2     .word DDSLMOD1
      002945 CD 07 A5         [ 4]  760     CALL DDROP 
      002948 CD 25 78         [ 4]  761     CALL DSLMOD 
      00294B 81               [ 4]  762     RET 
      00294C                        763 DDSLMOD1:
      00294C CD 05 96         [ 4]  764     CALL DUPP      
      00294F CD 05 5F         [ 4]  765     CALL TOR 
      002952 CD 28 F9         [ 4]  766     CALL DLSHIFT
      002955                        767     _DOLIT 32 
      002955 CD 04 71         [ 4]    1     CALL DOLIT 
      002958 00 20                    2     .word 32 
      00295A CD 05 40         [ 4]  768     CALL RFROM 
      00295D CD 08 3E         [ 4]  769     CALL SUBB 
      002960                        770     _DOLIT 5 
      002960 CD 04 71         [ 4]    1     CALL DOLIT 
      002963 00 05                    2     .word 5 
      002965 CD 0B 88         [ 4]  771     CALL PICK 
      002968                        772     _DOLIT 5 
      002968 CD 04 71         [ 4]    1     CALL DOLIT 
      00296B 00 05                    2     .word 5 
      00296D CD 0B 88         [ 4]  773     CALL PICK 
      002970 CD 26 97         [ 4]  774     CALL DCLZ 
      002973 CD 05 5F         [ 4]  775     CALL TOR 
      002976 CD 26 69         [ 4]  776     CALL DSWAP 
      002979 CD 05 53         [ 4]  777     CALL RAT 
      00297C CD 28 F9         [ 4]  778     CALL DLSHIFT 
      00297F CD 26 69         [ 4]  779     CALL DSWAP 
      002982 CD 05 40         [ 4]  780     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002985 CD 05 40         [ 4]  781     CALL RFROM 
      002988 CD 05 A6         [ 4]  782     CALL SWAPP 
      00298B CD 08 3E         [ 4]  783     CALL SUBB ; number dividend left shift to do.
                                    784 
      00298E 81               [ 4]  785     RET 
                                    786 
                                    787 
                                    788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    789 ;   D* ( d1 d2 -- d3 )
                                    790 ;   double product 
                                    791 ;   
                                    792 ;   d3 = d1 * d2
                                    793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00298F                        794     _HEADER DSTAR,2,"D*"
      00298F 29 28                    1         .word LINK 
                           002991     2         LINK=.
      002991 02                       3         .byte 2  
      002992 44 2A                    4         .ascii "D*"
      002994                          5         DSTAR:
      002994 CD 05 96         [ 4]  795     CALL DUPP 
      002997 CD 05 CF         [ 4]  796     CALL ZLESS  
      00299A CD 05 5F         [ 4]  797     CALL TOR    ; R: d2sign 
      00299D CD 25 48         [ 4]  798     CALL DABS   
      0029A0 CD 05 40         [ 4]  799     CALL RFROM 
      0029A3 CD 07 83         [ 4]  800     CALL NROT  ; d1 d2s ud2
      0029A6 CD 27 E6         [ 4]  801     CALL DTOR  ; d1 d2s R: ud2  
      0029A9 CD 05 5F         [ 4]  802     CALL TOR   ; d1 R: ud2 d2s   
      0029AC CD 05 96         [ 4]  803     CALL DUPP 
      0029AF CD 05 CF         [ 4]  804     CALL ZLESS 
      0029B2 CD 05 40         [ 4]  805     CALL RFROM 
      0029B5 CD 06 1E         [ 4]  806     CALL XORR   
      0029B8 CD 05 5F         [ 4]  807     CALL TOR   ; d1 R: ud2 prod_sign  
      0029BB CD 25 48         [ 4]  808     CALL DABS ; ud1 R: ud2 ps  
      0029BE CD 05 40         [ 4]  809     CALL RFROM  
      0029C1 CD 07 83         [ 4]  810     CALL NROT   ; ps ud1 
      0029C4 CD 07 B0         [ 4]  811     CALL DDUP   ; ps ud1 ud1  
      0029C7 CD 05 40         [ 4]  812     CALL RFROM  ; ps ud1 ud1 ud2hi 
      0029CA CD 26 20         [ 4]  813     CALL DSSTAR ; ps ud1 dprodhi 
                                    814 ; shift partial product 16 bits left 
      0029CD CD 05 8C         [ 4]  815     CALL DROP   ; drop overflow 
      0029D0 CD 0B 2F         [ 4]  816     CALL ZERO   ; ps ud1 prodhi 
      0029D3 CD 05 A6         [ 4]  817     CALL SWAPP  
      0029D6 CD 26 69         [ 4]  818     CALL DSWAP  ; ps dprodhi ud1 
      0029D9 CD 05 40         [ 4]  819     CALL RFROM  ; ps dprodhi ud1 ud2lo
      0029DC CD 26 20         [ 4]  820     CALL DSSTAR ; ps  dprodhi dprodlo 
      0029DF CD 2A E0         [ 4]  821     CALL DPLUS
      0029E2 CD 07 64         [ 4]  822     CALL ROT    ; dprod ps 
      0029E5                        823     _QBRAN DDSTAR3 
      0029E5 CD 04 A4         [ 4]    1     CALL QBRAN
      0029E8 29 ED                    2     .word DDSTAR3
      0029EA CD 08 02         [ 4]  824     CALL DNEGA 
      0029ED                        825 DDSTAR3:  
      0029ED 81               [ 4]  826     RET 
                                    827 
                                    828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    829 ;   D/  ( d1 d2 -- d3 )
                                    830 ;   double division d3=d1/d2
                                    831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029EE                        832     _HEADER DSLASH,2,"D/"  
      0029EE 29 91                    1         .word LINK 
                           0029F0     2         LINK=.
      0029F0 02                       3         .byte 2  
      0029F1 44 2F                    4         .ascii "D/"
      0029F3                          5         DSLASH:
      0029F3                        833     _DOLIT 0 
      0029F3 CD 04 71         [ 4]    1     CALL DOLIT 
      0029F6 00 00                    2     .word 0 
      0029F8 CD 05 5F         [ 4]  834     CALL TOR   ; R: sign 
      0029FB 90 93            [ 1]  835     LDW Y,X     
      0029FD 90 FE            [ 2]  836     LDW Y,(Y)
      0029FF 2A 0C            [ 1]  837     JRPL DSLA1
      002A01 CD 08 02         [ 4]  838     CALL DNEGA
      002A04 CD 05 40         [ 4]  839     CALL RFROM 
      002A07 CD 07 DF         [ 4]  840     CALL INVER 
      002A0A CD 05 5F         [ 4]  841     CALL TOR  ; sign inverted 
      002A0D                        842 DSLA1:
      002A0D                        843     _DOLIT 2 
      002A0D CD 04 71         [ 4]    1     CALL DOLIT 
      002A10 00 02                    2     .word 2 
      002A12 CD 0B 88         [ 4]  844     CALL PICK 
      002A15 CD 05 CF         [ 4]  845     CALL ZLESS 
      002A18                        846     _QBRAN DSLA2
      002A18 CD 04 A4         [ 4]    1     CALL QBRAN
      002A1B 2A 2F                    2     .word DSLA2
      002A1D CD 26 69         [ 4]  847     CALL DSWAP 
      002A20 CD 08 02         [ 4]  848     CALL DNEGA
      002A23 CD 26 69         [ 4]  849     CALL DSWAP       
      002A26 CD 05 40         [ 4]  850     CALL RFROM 
      002A29 CD 07 DF         [ 4]  851     CALL INVER 
      002A2C CD 05 5F         [ 4]  852     CALL TOR   ;  sign inverted again 
      002A2F                        853 DSLA2:
                                    854 ; unsigned double division 
      002A2F CD 0B 2F         [ 4]  855     CALL ZERO 
      002A32 CD 0B 2F         [ 4]  856     CALL ZERO
      002A35 CD 27 E6         [ 4]  857     CALL DTOR ; quotient  R: sign qlo qhi 
      002A38 CD 28 AD         [ 4]  858     CALL DOVER 
      002A3B CD 26 97         [ 4]  859     CALL DCLZ ; n2, dividend leading zeros  
      002A3E CD 05 5F         [ 4]  860     CALL TOR 
      002A41 CD 07 B0         [ 4]  861     CALL DDUP    
      002A44 CD 26 97         [ 4]  862     CALL DCLZ  ; n1, divisor leading zeros
      002A47 CD 05 40         [ 4]  863     CALL RFROM ; n1 n2 
      002A4A CD 08 3E         [ 4]  864     CALL SUBB
      002A4D CD 05 96         [ 4]  865     CALL DUPP   
      002A50 CD 05 CF         [ 4]  866     CALL ZLESS 
      002A53 CD 07 DF         [ 4]  867     CALL INVER 
      002A56                        868     _QBRAN DSLA7 ; quotient is null 
      002A56 CD 04 A4         [ 4]    1     CALL QBRAN
      002A59 2A C6                    2     .word DSLA7
      002A5B CD 05 96         [ 4]  869     CALL DUPP 
      002A5E CD 05 5F         [ 4]  870     CALL TOR    ; loop counter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002A61 CD 07 53         [ 4]  871     CALL QDUP 
      002A64                        872     _QBRAN DSLA3
      002A64 CD 04 A4         [ 4]    1     CALL QBRAN
      002A67 2A 6C                    2     .word DSLA3
      002A69 CD 28 F9         [ 4]  873     CALL DLSHIFT ; align divisor with dividend 
      002A6C                        874 DSLA3: ; division loop 
      002A6C 90 5F            [ 1]  875     CLRW Y 
      002A6E 90 89            [ 2]  876     PUSHW Y  
      002A70 CD 28 AD         [ 4]  877     CALL DOVER 
      002A73 CD 28 AD         [ 4]  878     CALL DOVER 
      002A76 CD 27 7F         [ 4]  879     CALL DLESS 
      002A79 CD 07 DF         [ 4]  880     CALL INVER  
      002A7C                        881     _QBRAN DSLA4 
      002A7C CD 04 A4         [ 4]    1     CALL QBRAN
      002A7F 2A 95                    2     .word DSLA4
      002A81 90 85            [ 2]  882     POPW Y 
      002A83 72 A9 00 01      [ 2]  883     ADDW Y,#1 
      002A87 90 89            [ 2]  884     PUSHW Y 
      002A89 CD 07 B0         [ 4]  885     CALL DDUP 
      002A8C CD 27 E6         [ 4]  886     CALL DTOR
      002A8F CD 2B 12         [ 4]  887     CALL DSUB
      002A92 CD 28 04         [ 4]  888     CALL DRFROM  
      002A95                        889 DSLA4: ; shift quotient and add 1 bit 
      002A95 90 85            [ 2]  890     POPW Y 
      002A97 90 BF 26         [ 2]  891     LDW YTEMP,Y 
      002A9A 16 05            [ 2]  892     LDW Y,(5,SP) ; quotient low 
      002A9C 98               [ 1]  893     RCF 
      002A9D 90 59            [ 2]  894     RLCW Y
      002A9F 17 05            [ 2]  895     LDW (5,SP),Y 
      002AA1 16 03            [ 2]  896     LDW Y,(3,SP) ; quotient hi 
      002AA3 90 59            [ 2]  897     RLCW Y 
      002AA5 17 03            [ 2]  898     LDW (3,SP),Y 
      002AA7 16 05            [ 2]  899     LDW Y,(5,SP) 
      002AA9 72 B9 00 26      [ 2]  900     ADDW Y,YTEMP
      002AAD 17 05            [ 2]  901     LDW (5,SP),Y 
      002AAF 16 01            [ 2]  902     LDW Y,(1,SP) ; loop counter 
      002AB1 90 5D            [ 2]  903     TNZW Y 
      002AB3 27 14            [ 1]  904     JREQ DSLA8
      002AB5 72 A2 00 01      [ 2]  905     SUBW Y,#1  
      002AB9 17 01            [ 2]  906     LDW (1,SP),Y  
                                    907 ; shift dividend left 1 bit      
      002ABB CD 26 69         [ 4]  908     CALL DSWAP 
      002ABE CD 28 DD         [ 4]  909     CALL D2STAR 
      002AC1 CD 26 69         [ 4]  910     CALL DSWAP 
      002AC4 20 A6            [ 2]  911     JRA DSLA3 
      002AC6                        912 DSLA7:
      002AC6 1C 00 02         [ 2]  913     ADDW X,#2 ; drop shift count  
      002AC9                        914 DSLA8:
      002AC9 1C 00 08         [ 2]  915     ADDW X,#8 ; drop remainder and divisor 
      002ACC 5B 02            [ 2]  916     ADDW SP,#2 ; drop loop count on RSTACK 
                                    917     ; quotient replace dividend 
      002ACE CD 28 04         [ 4]  918     CALL DRFROM 
      002AD1 90 85            [ 2]  919     POPW Y ; sign 
      002AD3 90 5D            [ 2]  920     TNZW Y 
      002AD5 27 03            [ 1]  921     JREQ DSLA9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002AD7 CD 08 02         [ 4]  922     CALL DNEGA 
      002ADA                        923 DSLA9: 
      002ADA 81               [ 4]  924     RET 
                                    925 
                                    926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    927 ;   D+ ( d1 d2 -- d3 )
                                    928 ;   add 2 doubles 
                                    929 ;   d3=d1+d2 
                                    930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ADB                        931     _HEADER DPLUS,2,"D+"
      002ADB 29 F0                    1         .word LINK 
                           002ADD     2         LINK=.
      002ADD 02                       3         .byte 2  
      002ADE 44 2B                    4         .ascii "D+"
      002AE0                          5         DPLUS:
      002AE0 90 93            [ 1]  932     LDW Y,X 
      002AE2 90 FE            [ 2]  933     LDW Y,(Y)
      002AE4 90 BF 26         [ 2]  934     LDW YTEMP,Y ; d2 hi 
      002AE7 90 93            [ 1]  935     LDW Y,X 
      002AE9 90 EE 02         [ 2]  936     LDW Y,(2,Y)
      002AEC 90 BF 24         [ 2]  937     LDW XTEMP,Y ; d2 lo 
      002AEF 1C 00 04         [ 2]  938     ADDW X,#4 
      002AF2 90 93            [ 1]  939     LDW Y,X 
      002AF4 90 EE 02         [ 2]  940     LDW Y,(2,Y) ; d1 lo
      002AF7 72 B9 00 24      [ 2]  941     ADDW Y,XTEMP
      002AFB EF 02            [ 2]  942     LDW (2,X),Y 
      002AFD 90 93            [ 1]  943     LDW Y,X 
      002AFF 90 FE            [ 2]  944     LDW Y,(Y) ; d1 hi 
      002B01 24 04            [ 1]  945     JRNC DPLUS1 
      002B03 72 A9 00 01      [ 2]  946     ADDW Y,#1 
      002B07                        947 DPLUS1: 
      002B07 72 B9 00 26      [ 2]  948     ADDW Y,YTEMP 
      002B0B FF               [ 2]  949     LDW (X),Y 
      002B0C 81               [ 4]  950     RET 
                                    951 
                                    952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    953 ;   D- ( d1 d2 -- d3 )
                                    954 ;   d3=d1-d2 
                                    955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B0D                        956     _HEADER DSUB,2,"D-"
      002B0D 2A DD                    1         .word LINK 
                           002B0F     2         LINK=.
      002B0F 02                       3         .byte 2  
      002B10 44 2D                    4         .ascii "D-"
      002B12                          5         DSUB:
      002B12 90 93            [ 1]  957     LDW Y,X 
      002B14 90 FE            [ 2]  958     LDW Y,(Y)
      002B16 90 BF 26         [ 2]  959     LDW YTEMP,Y ; d2 hi 
      002B19 90 93            [ 1]  960     LDW Y,X 
      002B1B 90 EE 02         [ 2]  961     LDW Y,(2,Y)
      002B1E 90 BF 24         [ 2]  962     LDW XTEMP,Y ; d2 lo 
      002B21 1C 00 04         [ 2]  963     ADDW X,#4 
      002B24 90 93            [ 1]  964     LDW Y,X 
      002B26 90 EE 02         [ 2]  965     LDW Y,(2,Y) ; d1 lo
      002B29 72 B2 00 24      [ 2]  966     SUBW Y,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      002B2D EF 02            [ 2]  967     LDW (2,X),Y 
      002B2F 90 93            [ 1]  968     LDW Y,X 
      002B31 90 FE            [ 2]  969     LDW Y,(Y) ; d1 hi 
      002B33 24 04            [ 1]  970     JRNC DSUB1 
      002B35 72 A2 00 01      [ 2]  971     SUBW Y,#1 
      002B39                        972 DSUB1: 
      002B39 72 B2 00 26      [ 2]  973     SUBW Y,YTEMP 
      002B3D FF               [ 2]  974     LDW (X),Y 
      002B3E 81               [ 4]  975     RET 
                                    976 
                                    977 
                                    978 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    979 ;    ILOG ( ud base -- n )
                                    980 ;    integer part of double in base 
                                    981 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B3F                        982     _HEADER ILOG,4,"ILOG"
      002B3F 2B 0F                    1         .word LINK 
                           002B41     2         LINK=.
      002B41 04                       3         .byte 4  
      002B42 49 4C 4F 47              4         .ascii "ILOG"
      002B46                          5         ILOG:
      002B46                        983     _DOLIT 0 
      002B46 CD 04 71         [ 4]    1     CALL DOLIT 
      002B49 00 00                    2     .word 0 
      002B4B CD 05 5F         [ 4]  984     CALL TOR 
      002B4E CD 07 83         [ 4]  985     CALL NROT 
      002B51                        986 ILOG1: 
      002B51                        987     _DOLIT 2 
      002B51 CD 04 71         [ 4]    1     CALL DOLIT 
      002B54 00 02                    2     .word 2 
      002B56 CD 0B 88         [ 4]  988     CALL PICK 
      002B59 CD 25 78         [ 4]  989     CALL DSLMOD 
      002B5C CD 07 64         [ 4]  990     CALL ROT 
      002B5F CD 05 8C         [ 4]  991     CALL DROP 
      002B62 CD 07 B0         [ 4]  992     CALL DDUP
      002B65 CD 25 00         [ 4]  993     CALL DZEQUAL 
      002B68 CD 07 DF         [ 4]  994     CALL INVER 
      002B6B                        995     _QBRAN ILOG2
      002B6B CD 04 A4         [ 4]    1     CALL QBRAN
      002B6E 2B 7E                    2     .word ILOG2
      002B70 CD 05 40         [ 4]  996     CALL RFROM 
      002B73 CD 0A C3         [ 4]  997     CALL ONEP 
      002B76 CD 05 5F         [ 4]  998     CALL TOR 
      002B79                        999     _BRAN ILOG1 
      002B79 CD 04 BB         [ 4]    1     CALL BRAN 
      002B7C 2B 51                    2     .word ILOG1 
      002B7E                       1000 ILOG2:
      002B7E CD 07 A5         [ 4] 1001     CALL DDROP 
      002B81 CD 05 8C         [ 4] 1002     CALL DROP 
      002B84 CD 05 40         [ 4] 1003     CALL RFROM 
      002B87 81               [ 4] 1004     RET 
                                   1005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                                   4778 .endif 
                           000001  4779 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   4780         .include "float.asm"
                                      1 ;*********************************
                                      2 ;    floating point library
                                      3 ;    adapted from 
                                      4 ;    Forth dimensions Vol. IV #1 
                                      5 ;    published in  may/june 1982
                                      6 ;
                                      7 ; Creation date: 2021-06-15 
                                      8 ;
                                      9 ; NOTE: I used a different format 
                                     10 ;       for float number. This 
                                     11 ;       enable comparison of floats 
                                     12 ;       as they were integer hence 
                                     13 ;       there no need for F>,F<,etc 
                                     14 ;************************************
                                     15 
                                     16 ;*************************************************
                                     17 ;  FLOAT format double for storage 
                                     18 ;  bits 22:0  mantissa absolute value 
                                     19 ;  bits  30:23  exponent with 127 offset added  
                                     20 ;  bit 31  mantissa sign 
                                     21 ;  float value: if bit 31 is 1 negate mantissa
                                     22 ;                else keep mantissas as bits 22:0
                                     23 ;                as is
                                     24 ;                eponent: 10^^(exp-127) 
                                     25 ;***********************************************  
                                     26 
                                     27     .module FLOAT 
                                     28 
                           000001    29 .if WANT_DOUBLE 
                                     30 ; already included 
                           000000    31 .else
                                     32 ;  must be included  
                                     33     .include "double.asm"
                                     34 .endif  
                                     35 
                                     36 ;-------------------------
                                     37 ;    FPSW ( -- a )
                                     38 ;    floating state variable
                                     39 ;    bit 0 zero flag 
                                     40 ;    bit 1 negative flag 
                                     41 ;    bit 2 overflow/error flag 
                                     42 ;---------------------------
      002B88                         43     _HEADER FPSW,4,"FPSW"
      002B88 2B 41                    1         .word LINK 
                           002B8A     2         LINK=.
      002B8A 04                       3         .byte 4  
      002B8B 46 50 53 57              4         .ascii "FPSW"
      002B8F                          5         FPSW:
      002B8F 90 AE 00 08      [ 2]   44 	LDW Y,#UFPSW  
      002B93 1D 00 02         [ 2]   45 	SUBW X,#2
      002B96 FF               [ 2]   46     LDW (X),Y
      002B97 81               [ 4]   47     RET
                                     48 
                                     49 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                     50 ;   FRESET ( -- )
                                     51 ;   reset FPSW variable 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002B98                         53     _HEADER FRESET,6,"FRESET"
      002B98 2B 8A                    1         .word LINK 
                           002B9A     2         LINK=.
      002B9A 06                       3         .byte 6  
      002B9B 46 52 45 53 45 54        4         .ascii "FRESET"
      002BA1                          5         FRESET:
      002BA1                         54     _DOLIT 0 
      002BA1 CD 04 71         [ 4]    1     CALL DOLIT 
      002BA4 00 00                    2     .word 0 
      002BA6 CD 2B 8F         [ 4]   55     CALL FPSW 
      002BA9 CD 04 D8         [ 4]   56     CALL STORE 
      002BAC 81               [ 4]   57     RET 
                                     58 
                                     59 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     60 ;   FINIT ( -- )
                                     61 ;   initialize floating point 
                                     62 ;   library 
                                     63 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BAD                         64     _HEADER FINIT,5,"FINIT"
      002BAD 2B 9A                    1         .word LINK 
                           002BAF     2         LINK=.
      002BAF 05                       3         .byte 5  
      002BB0 46 49 4E 49 54           4         .ascii "FINIT"
      002BB5                          5         FINIT:
      002BB5 CD 2B A1         [ 4]   65     CALL FRESET 
      002BB8 81               [ 4]   66     RET 
                                     67 
                                     68 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     69 ;    FER ( -- u )
                                     70 ;    return FPSW value 
                                     71 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB9                         72     _HEADER FER,3,"FER"
      002BB9 2B AF                    1         .word LINK 
                           002BBB     2         LINK=.
      002BBB 03                       3         .byte 3  
      002BBC 46 45 52                 4         .ascii "FER"
      002BBF                          5         FER:
      002BBF CD 2B 8F         [ 4]   73     CALL FPSW 
      002BC2 CD 04 EF         [ 4]   74     CALL AT 
      002BC5 81               [ 4]   75     RET 
                                     76 
                                     77 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     78 ;    FZE  ( -- z )
                                     79 ;    return FPSW zero flag 
                                     80 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC6                         81     _HEADER FZE,3,"FZE"
      002BC6 2B BB                    1         .word LINK 
                           002BC8     2         LINK=.
      002BC8 03                       3         .byte 3  
      002BC9 46 5A 45                 4         .ascii "FZE"
      002BCC                          5         FZE:
      002BCC CD 2B 8F         [ 4]   82     CALL FPSW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      002BCF CD 04 EF         [ 4]   83     CALL AT  
      002BD2                         84     _DOLIT 1
      002BD2 CD 04 71         [ 4]    1     CALL DOLIT 
      002BD5 00 01                    2     .word 1 
      002BD7 CD 05 F5         [ 4]   85     CALL ANDD 
      002BDA 81               [ 4]   86     RET 
                                     87 
                                     88 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     89 ;    FNE ( -- n )
                                     90 ;    return FPSW negative flag 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BDB                         92     _HEADER FNE,3,"FNE"
      002BDB 2B C8                    1         .word LINK 
                           002BDD     2         LINK=.
      002BDD 03                       3         .byte 3  
      002BDE 46 4E 45                 4         .ascii "FNE"
      002BE1                          5         FNE:
      002BE1 CD 2B 8F         [ 4]   93     CALL FPSW 
      002BE4 CD 04 EF         [ 4]   94     CALL AT 
      002BE7                         95     _DOLIT 2 
      002BE7 CD 04 71         [ 4]    1     CALL DOLIT 
      002BEA 00 02                    2     .word 2 
      002BEC CD 05 F5         [ 4]   96     CALL ANDD 
      002BEF 81               [ 4]   97     RET 
                                     98 
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    100 ;   FOV (A -- v )
                                    101 ;   return FPSW overflow flag 
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BF0                        103     _HEADER FOV,3,"FOV"
      002BF0 2B DD                    1         .word LINK 
                           002BF2     2         LINK=.
      002BF2 03                       3         .byte 3  
      002BF3 46 4F 56                 4         .ascii "FOV"
      002BF6                          5         FOV:
      002BF6 CD 2B 8F         [ 4]  104     CALL FPSW
      002BF9 CD 04 EF         [ 4]  105     CALL AT  
      002BFC                        106     _DOLIT 4 
      002BFC CD 04 71         [ 4]    1     CALL DOLIT 
      002BFF 00 04                    2     .word 4 
      002C01 CD 05 F5         [ 4]  107     CALL ANDD 
      002C04 81               [ 4]  108     RET 
                                    109 
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    111 ;   U> ( u1 u2 -- f )
                                    112 ;   f = true if u1>u2 
                                    113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C05                        114     _HEADER UGREAT,2,"U>"
      002C05 2B F2                    1         .word LINK 
                           002C07     2         LINK=.
      002C07 02                       3         .byte 2  
      002C08 55 3E                    4         .ascii "U>"
      002C0A                          5         UGREAT:
      002C0A A6 00            [ 1]  115     LD A,#0
      002C0C 90 93            [ 1]  116     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002C0E 90 EE 02         [ 2]  117     LDW Y,(2,Y)
      002C11 90 BF 26         [ 2]  118     LDW YTEMP,Y 
      002C14 90 93            [ 1]  119     LDW Y,X
      002C16 1C 00 02         [ 2]  120     ADDW X,#2 
      002C19 90 FE            [ 2]  121     LDW Y,(Y)
      002C1B 90 B3 26         [ 2]  122     CPW Y,YTEMP 
      002C1E 2B 02            [ 1]  123     JRMI UGREAT1 
      002C20 A6 FF            [ 1]  124     LD A,#0XFF 
      002C22                        125 UGREAT1:
      002C22 F7               [ 1]  126     LD (X),A 
      002C23 E7 01            [ 1]  127     LD (1,X),A 
      002C25 81               [ 4]  128     RET 
                                    129 
                                    130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    131 ;    SFZ ( f# -- f# )
                                    132 ;    set FPSW zero flag 
                                    133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C26                        134     _HEADER SFZ,3,"SFZ"
      002C26 2C 07                    1         .word LINK 
                           002C28     2         LINK=.
      002C28 03                       3         .byte 3  
      002C29 53 46 5A                 4         .ascii "SFZ"
      002C2C                          5         SFZ:
      002C2C CD 07 B0         [ 4]  135     CALL DDUP 
      002C2F CD 2B BF         [ 4]  136     CALL FER 
      002C32                        137     _DOLIT 0xfffe 
      002C32 CD 04 71         [ 4]    1     CALL DOLIT 
      002C35 FF FE                    2     .word 0xfffe 
      002C37 CD 05 F5         [ 4]  138     CALL ANDD 
      002C3A CD 05 5F         [ 4]  139     CALL TOR    
      002C3D                        140     _DOLIT 0x807F 
      002C3D CD 04 71         [ 4]    1     CALL DOLIT 
      002C40 80 7F                    2     .word 0x807F 
      002C42 CD 05 F5         [ 4]  141     CALL ANDD 
      002C45 CD 25 00         [ 4]  142     CALL DZEQUAL 
      002C48                        143     _DOLIT 1 
      002C48 CD 04 71         [ 4]    1     CALL DOLIT 
      002C4B 00 01                    2     .word 1 
      002C4D CD 05 F5         [ 4]  144     CALL ANDD 
      002C50 CD 05 40         [ 4]  145     CALL RFROM 
      002C53 CD 06 09         [ 4]  146     CALL ORR 
      002C56 CD 2B 8F         [ 4]  147     CALL FPSW 
      002C59 CD 04 D8         [ 4]  148     CALL STORE 
      002C5C 81               [ 4]  149     RET 
                                    150 
                                    151 
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    153 ;   SFN ( f# -- f# )
                                    154 ;   set FPSW negative flag 
                                    155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C5D                        156     _HEADER SFN,3,"SFN"
      002C5D 2C 28                    1         .word LINK 
                           002C5F     2         LINK=.
      002C5F 03                       3         .byte 3  
      002C60 53 46 4E                 4         .ascii "SFN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002C63                          5         SFN:
      002C63 CD 05 96         [ 4]  157     CALL DUPP  
      002C66 CD 2B BF         [ 4]  158     CALL FER 
      002C69                        159     _DOLIT 0xFFFD 
      002C69 CD 04 71         [ 4]    1     CALL DOLIT 
      002C6C FF FD                    2     .word 0xFFFD 
      002C6E CD 05 F5         [ 4]  160     CALL ANDD  
      002C71 CD 05 5F         [ 4]  161     CALL TOR 
      002C74                        162     _DOLIT 0x8000
      002C74 CD 04 71         [ 4]    1     CALL DOLIT 
      002C77 80 00                    2     .word 0x8000 
      002C79 CD 05 F5         [ 4]  163     CALL ANDD
      002C7C 90 93            [ 1]  164     LDW Y,X 
      002C7E 90 FE            [ 2]  165     LDW Y,(Y)
      002C80 98               [ 1]  166     RCF 
      002C81 90 59            [ 2]  167     RLCW Y 
      002C83 90 59            [ 2]  168     RLCW Y 
      002C85 90 59            [ 2]  169     RLCW Y 
      002C87 FF               [ 2]  170     LDW (X),Y 
      002C88 CD 05 40         [ 4]  171     CALL RFROM 
      002C8B CD 06 09         [ 4]  172     CALL ORR 
      002C8E CD 2B 8F         [ 4]  173     CALL FPSW
      002C91 CD 04 D8         [ 4]  174     CALL STORE 
      002C94 81               [ 4]  175     RET 
                                    176 
                                    177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    178 ;   SFV ( -- )
                                    179 ;   set overflow flag 
                                    180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C95                        181     _HEADER SFV,3,"SFV"
      002C95 2C 5F                    1         .word LINK 
                           002C97     2         LINK=.
      002C97 03                       3         .byte 3  
      002C98 53 46 56                 4         .ascii "SFV"
      002C9B                          5         SFV:
      002C9B CD 2B 8F         [ 4]  182     CALL FPSW 
      002C9E CD 04 EF         [ 4]  183     CALL AT 
      002CA1                        184     _DOLIT 4 
      002CA1 CD 04 71         [ 4]    1     CALL DOLIT 
      002CA4 00 04                    2     .word 4 
      002CA6 CD 06 09         [ 4]  185     CALL ORR 
      002CA9 CD 2B 8F         [ 4]  186     CALL FPSW 
      002CAC CD 04 D8         [ 4]  187     CALL STORE 
      002CAF 81               [ 4]  188     RET 
                                    189 
                                    190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    191 ;  @EXPONENT ( f# -- m e )
                                    192 ;  split float in mantissa/exponent 
                                    193 ;  m mantissa as a double 
                                    194 ;  e exponent as a single 
                                    195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB0                        196     _HEADER ATEXP,9,"@EXPONENT"             
      002CB0 2C 97                    1         .word LINK 
                           002CB2     2         LINK=.
      002CB2 09                       3         .byte 9  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002CB3 40 45 58 50 4F 4E 45     4         .ascii "@EXPONENT"
             4E 54
      002CBC                          5         ATEXP:
      002CBC CD 2B A1         [ 4]  197     CALL FRESET
      002CBF CD 2C 63         [ 4]  198     CALL SFN
      002CC2 CD 2C 2C         [ 4]  199     CALL SFZ 
      002CC5 CD 05 96         [ 4]  200     CALL DUPP
      002CC8                        201     _DOLIT 0X7F80 
      002CC8 CD 04 71         [ 4]    1     CALL DOLIT 
      002CCB 7F 80                    2     .word 0X7F80 
      002CCD CD 05 F5         [ 4]  202     CALL ANDD 
      002CD0                        203     _DOLIT 7 
      002CD0 CD 04 71         [ 4]    1     CALL DOLIT 
      002CD3 00 07                    2     .word 7 
      002CD5 CD 0A FD         [ 4]  204     CALL RSHIFT
      002CD8                        205     _DOLIT 127 
      002CD8 CD 04 71         [ 4]    1     CALL DOLIT 
      002CDB 00 7F                    2     .word 127 
      002CDD CD 08 3E         [ 4]  206     CALL SUBB
      002CE0 CD 05 5F         [ 4]  207     CALL TOR 
      002CE3                        208     _DOLIT 0x7F
      002CE3 CD 04 71         [ 4]    1     CALL DOLIT 
      002CE6 00 7F                    2     .word 0x7F 
      002CE8 CD 05 F5         [ 4]  209     CALL ANDD  ; mantissa as double  
      002CEB CD 2B E1         [ 4]  210     CALL FNE 
      002CEE                        211     _QBRAN POSMANT 
      002CEE CD 04 A4         [ 4]    1     CALL QBRAN
      002CF1 2C F6                    2     .word POSMANT
      002CF3 CD 25 1E         [ 4]  212     CALL DNEGAT 
      002CF6                        213 POSMANT:
      002CF6 CD 05 40         [ 4]  214     CALL RFROM 
      002CF9 81               [ 4]  215     RET 
                                    216 
                                    217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    218 ;    !EXPONENT ( m e -- f# )
                                    219 ;    built float from mantissa/exponent 
                                    220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CFA                        221     _HEADER STEXP,9,"!EXPONENT"
      002CFA 2C B2                    1         .word LINK 
                           002CFC     2         LINK=.
      002CFC 09                       3         .byte 9  
      002CFD 21 45 58 50 4F 4E 45     4         .ascii "!EXPONENT"
             4E 54
      002D06                          5         STEXP:
      002D06 CD 05 96         [ 4]  222     CALL DUPP 
      002D09 CD 08 58         [ 4]  223     CALL ABSS 
      002D0C                        224     _DOLIT 127 
      002D0C CD 04 71         [ 4]    1     CALL DOLIT 
      002D0F 00 7F                    2     .word 127 
      002D11 CD 2C 0A         [ 4]  225     CALL UGREAT
      002D14                        226     _QBRAN STEXP1
      002D14 CD 04 A4         [ 4]    1     CALL QBRAN
      002D17 2D 1C                    2     .word STEXP1
      002D19 CD 2C 9B         [ 4]  227     CALL SFV  
      002D1C                        228 STEXP1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002D1C                        229     _DOLIT 127 
      002D1C CD 04 71         [ 4]    1     CALL DOLIT 
      002D1F 00 7F                    2     .word 127 
      002D21 CD 07 C5         [ 4]  230     CALL PLUS 
      002D24                        231     _DOLIT 0XFF 
      002D24 CD 04 71         [ 4]    1     CALL DOLIT 
      002D27 00 FF                    2     .word 0XFF 
      002D29 CD 05 F5         [ 4]  232     CALL ANDD 
      002D2C                        233     _DOLIT 7 
      002D2C CD 04 71         [ 4]    1     CALL DOLIT 
      002D2F 00 07                    2     .word 7 
      002D31 CD 0A E1         [ 4]  234     CALL LSHIFT 
      002D34 CD 05 5F         [ 4]  235     CALL TOR   ; R: e 
      002D37 CD 05 96         [ 4]  236     CALL DUPP 
      002D3A                        237     _DOLIT 0X8000 
      002D3A CD 04 71         [ 4]    1     CALL DOLIT 
      002D3D 80 00                    2     .word 0X8000 
      002D3F CD 05 F5         [ 4]  238     CALL ANDD 
      002D42                        239     _QBRAN STEXP2 
      002D42 CD 04 A4         [ 4]    1     CALL QBRAN
      002D45 2D 58                    2     .word STEXP2
      002D47                        240     _DOLIT 0X8000 
      002D47 CD 04 71         [ 4]    1     CALL DOLIT 
      002D4A 80 00                    2     .word 0X8000 
      002D4C CD 05 40         [ 4]  241     CALL RFROM 
      002D4F CD 06 09         [ 4]  242     CALL ORR
      002D52 CD 05 5F         [ 4]  243     CALL TOR
      002D55 CD 25 1E         [ 4]  244     CALL DNEGAT  
      002D58                        245 STEXP2:
      002D58 CD 05 96         [ 4]  246     CALL DUPP 
      002D5B                        247     _DOLIT 0X7F
      002D5B CD 04 71         [ 4]    1     CALL DOLIT 
      002D5E 00 7F                    2     .word 0X7F 
      002D60 CD 2C 0A         [ 4]  248     CALL UGREAT 
      002D63                        249     _QBRAN STEXP3 
      002D63 CD 04 A4         [ 4]    1     CALL QBRAN
      002D66 2D 6B                    2     .word STEXP3
      002D68 CD 2C 9B         [ 4]  250     CALL SFV 
      002D6B                        251 STEXP3:
      002D6B                        252     _DOLIT 0X7F 
      002D6B CD 04 71         [ 4]    1     CALL DOLIT 
      002D6E 00 7F                    2     .word 0X7F 
      002D70 CD 05 F5         [ 4]  253     CALL ANDD 
      002D73 CD 05 40         [ 4]  254     CALL RFROM 
      002D76 CD 06 09         [ 4]  255     CALL ORR 
      002D79 CD 2C 2C         [ 4]  256     CALL SFZ 
      002D7C CD 2C 63         [ 4]  257     CALL SFN 
      002D7F 81               [ 4]  258     RET 
                                    259 
                                    260 
                                    261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    262 ;   E. ( f# -- )
                                    263 ;   print float in scientific 
                                    264 ;   format 
                                    265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002D80                        266     _HEADER EDOT,2,"E."
      002D80 2C FC                    1         .word LINK 
                           002D82     2         LINK=.
      002D82 02                       3         .byte 2  
      002D83 45 2E                    4         .ascii "E."
      002D85                          5         EDOT:
      002D85 CD 06 66         [ 4]  267     CALL BASE 
      002D88 CD 04 EF         [ 4]  268     CALL AT 
      002D8B CD 05 5F         [ 4]  269     CALL TOR 
      002D8E                        270     _DOLIT 10 
      002D8E CD 04 71         [ 4]    1     CALL DOLIT 
      002D91 00 0A                    2     .word 10 
      002D93 CD 06 66         [ 4]  271     CALL BASE 
      002D96 CD 04 D8         [ 4]  272     CALL STORE 
      002D99 CD 2C BC         [ 4]  273     CALL ATEXP ; m e 
      002D9C                        274 EDOT0:
      002D9C CD 05 5F         [ 4]  275     CALL TOR   
      002D9F CD 2B E1         [ 4]  276     CALL FNE 
      002DA2                        277     _QBRAN EDOT1
      002DA2 CD 04 A4         [ 4]    1     CALL QBRAN
      002DA5 2D AA                    2     .word EDOT1
      002DA7 CD 25 1E         [ 4]  278     CALL DNEGAT
      002DAA                        279 EDOT1:
      002DAA CD 0E 76         [ 4]  280     CALL SPACE 
      002DAD CD 0D 3A         [ 4]  281     CALL BDIGS     
      002DB0                        282 EDOT2: 
      002DB0 CD 25 B9         [ 4]  283     CALL DDIG
      002DB3 CD 05 40         [ 4]  284     CALL RFROM 
      002DB6 CD 0A C3         [ 4]  285     CALL ONEP 
      002DB9 CD 05 5F         [ 4]  286     CALL TOR 
      002DBC CD 05 96         [ 4]  287     CALL DUPP
      002DBF                        288     _QBRAN EDOT3 
      002DBF CD 04 A4         [ 4]    1     CALL QBRAN
      002DC2 2D C9                    2     .word EDOT3
      002DC4                        289     _BRAN EDOT2  
      002DC4 CD 04 BB         [ 4]    1     CALL BRAN 
      002DC7 2D B0                    2     .word EDOT2 
      002DC9                        290 EDOT3:
      002DC9 CD 05 C0         [ 4]  291     CALL OVER 
      002DCC CD 06 66         [ 4]  292     CALL BASE 
      002DCF CD 04 EF         [ 4]  293     CALL AT 
      002DD2 CD 08 85         [ 4]  294     CALL ULESS 
      002DD5                        295     _QBRAN EDOT2 
      002DD5 CD 04 A4         [ 4]    1     CALL QBRAN
      002DD8 2D B0                    2     .word EDOT2
      002DDA                        296     _DOLIT '.'
      002DDA CD 04 71         [ 4]    1     CALL DOLIT 
      002DDD 00 2E                    2     .word '.' 
      002DDF CD 0D 4A         [ 4]  297     CALL HOLD  
      002DE2 CD 25 B9         [ 4]  298     CALL DDIG
      002DE5 CD 2B E1         [ 4]  299     CALL FNE 
      002DE8                        300     _QBRAN EDOT4 
      002DE8 CD 04 A4         [ 4]    1     CALL QBRAN
      002DEB 2D F5                    2     .word EDOT4
      002DED                        301     _DOLIT '-'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002DED CD 04 71         [ 4]    1     CALL DOLIT 
      002DF0 00 2D                    2     .word '-' 
      002DF2 CD 0D 4A         [ 4]  302     CALL HOLD 
      002DF5                        303 EDOT4:       
      002DF5 CD 0D 9F         [ 4]  304     CALL EDIGS 
      002DF8 CD 0E A0         [ 4]  305     CALL TYPES
      002DFB CD 05 40         [ 4]  306     CALL RFROM 
      002DFE CD 07 53         [ 4]  307     CALL QDUP 
      002E01                        308     _QBRAN EDOT5     
      002E01 CD 04 A4         [ 4]    1     CALL QBRAN
      002E04 2E 11                    2     .word EDOT5
      002E06                        309     _DOLIT 'E'
      002E06 CD 04 71         [ 4]    1     CALL DOLIT 
      002E09 00 45                    2     .word 'E' 
      002E0B CD 04 36         [ 4]  310     CALL EMIT 
      002E0E CD 0F 77         [ 4]  311     CALL DOT
      002E11                        312 EDOT5: 
      002E11 CD 05 40         [ 4]  313     CALL RFROM 
      002E14 CD 06 66         [ 4]  314     CALL BASE 
      002E17 CD 04 D8         [ 4]  315     CALL STORE  
      002E1A 81               [ 4]  316     RET 
                                    317 
                                    318 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    319 ;   F. (f# -- )
                                    320 ;   print float in fixed
                                    321 ;   point format. 
                                    322 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E1B                        323     _HEADER FDOT,2,"F."
      002E1B 2D 82                    1         .word LINK 
                           002E1D     2         LINK=.
      002E1D 02                       3         .byte 2  
      002E1E 46 2E                    4         .ascii "F."
      002E20                          5         FDOT:
      002E20 CD 06 66         [ 4]  324     CALL BASE 
      002E23 CD 04 EF         [ 4]  325     CALL AT 
      002E26 CD 05 5F         [ 4]  326     CALL TOR 
      002E29                        327     _DOLIT 10 
      002E29 CD 04 71         [ 4]    1     CALL DOLIT 
      002E2C 00 0A                    2     .word 10 
      002E2E CD 06 66         [ 4]  328     CALL BASE 
      002E31 CD 04 D8         [ 4]  329     CALL STORE 
      002E34 CD 2C BC         [ 4]  330     CALL    ATEXP
      002E37 CD 05 96         [ 4]  331     CALL    DUPP  
      002E3A CD 08 58         [ 4]  332     CALL    ABSS 
      002E3D                        333     _DOLIT  8
      002E3D CD 04 71         [ 4]    1     CALL DOLIT 
      002E40 00 08                    2     .word 8 
      002E42 CD 08 C1         [ 4]  334     CALL    GREAT 
      002E45                        335     _QBRAN  FDOT1 
      002E45 CD 04 A4         [ 4]    1     CALL QBRAN
      002E48 2E 4D                    2     .word FDOT1
      002E4A CC 2D 9C         [ 2]  336     JP      EDOT0 
      002E4D                        337 FDOT1:
      002E4D CD 0E 76         [ 4]  338     CALL    SPACE 
      002E50 CD 05 5F         [ 4]  339     CALL    TOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002E53 CD 2B E1         [ 4]  340     CALL    FNE 
      002E56                        341     _QBRAN  FDOT0 
      002E56 CD 04 A4         [ 4]    1     CALL QBRAN
      002E59 2E 5E                    2     .word FDOT0
      002E5B CD 25 1E         [ 4]  342     CALL    DNEGAT 
      002E5E                        343 FDOT0: 
      002E5E CD 0D 3A         [ 4]  344     CALL    BDIGS
      002E61 CD 05 53         [ 4]  345     CALL    RAT  
      002E64 CD 05 CF         [ 4]  346     CALL    ZLESS 
      002E67                        347     _QBRAN  FDOT6 
      002E67 CD 04 A4         [ 4]    1     CALL QBRAN
      002E6A 2E 95                    2     .word FDOT6
      002E6C                        348 FDOT2: ; e<0 
      002E6C CD 25 B9         [ 4]  349     CALL    DDIG 
      002E6F CD 05 40         [ 4]  350     CALL    RFROM
      002E72 CD 0A C3         [ 4]  351     CALL    ONEP 
      002E75 CD 07 53         [ 4]  352     CALL    QDUP 
      002E78                        353     _QBRAN  FDOT3 
      002E78 CD 04 A4         [ 4]    1     CALL QBRAN
      002E7B 2E 85                    2     .word FDOT3
      002E7D CD 05 5F         [ 4]  354     CALL    TOR 
      002E80                        355     _BRAN   FDOT2 
      002E80 CD 04 BB         [ 4]    1     CALL BRAN 
      002E83 2E 6C                    2     .word FDOT2 
      002E85                        356 FDOT3:
      002E85                        357     _DOLIT  '.' 
      002E85 CD 04 71         [ 4]    1     CALL DOLIT 
      002E88 00 2E                    2     .word '.' 
      002E8A CD 0D 4A         [ 4]  358     CALL    HOLD 
      002E8D CD 25 D2         [ 4]  359     CALL    DDIGS
      002E90                        360     _BRAN   FDOT9  
      002E90 CD 04 BB         [ 4]    1     CALL BRAN 
      002E93 2E AA                    2     .word FDOT9 
      002E95                        361 FDOT6: ; e>=0 
      002E95                        362     _BRAN   FDOT8
      002E95 CD 04 BB         [ 4]    1     CALL BRAN 
      002E98 2E A2                    2     .word FDOT8 
      002E9A                        363 FDOT7:     
      002E9A                        364     _DOLIT  '0'
      002E9A CD 04 71         [ 4]    1     CALL DOLIT 
      002E9D 00 30                    2     .word '0' 
      002E9F CD 0D 4A         [ 4]  365     CALL    HOLD 
      002EA2                        366 FDOT8:
      002EA2 CD 04 85         [ 4]  367     CALL    DONXT 
      002EA5 2E 9A                  368     .word   FDOT7
      002EA7 CD 25 D2         [ 4]  369     CALL    DDIGS 
      002EAA                        370 FDOT9:
      002EAA CD 2B E1         [ 4]  371     CALL    FNE 
      002EAD                        372     _QBRAN  FDOT10 
      002EAD CD 04 A4         [ 4]    1     CALL QBRAN
      002EB0 2E BA                    2     .word FDOT10
      002EB2                        373     _DOLIT '-' 
      002EB2 CD 04 71         [ 4]    1     CALL DOLIT 
      002EB5 00 2D                    2     .word '-' 
      002EB7 CD 0D 4A         [ 4]  374     CALL   HOLD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002EBA                        375 FDOT10:
      002EBA CD 0D 9F         [ 4]  376     CALL    EDIGS 
      002EBD CD 0E A0         [ 4]  377     CALL    TYPES 
      002EC0 CD 05 40         [ 4]  378     CALL    RFROM 
      002EC3 CD 06 66         [ 4]  379     CALL    BASE 
      002EC6 CD 04 D8         [ 4]  380     CALL    STORE 
      002EC9 81               [ 4]  381     RET 
                                    382 
                                    383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    384 ; return parsed exponent or 
                                    385 ; 0 if failed
                                    386 ; at entry exprect *a=='E'    
                                    387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ECA                        388 parse_exponent: ; a cntr -- e -1 | 0 
      002ECA CD 05 5F         [ 4]  389     CALL TOR   ; R: cntr 
      002ECD CD 05 96         [ 4]  390     CALL DUPP 
      002ED0 CD 05 0D         [ 4]  391     CALL CAT 
      002ED3                        392     _DOLIT 'E' 
      002ED3 CD 04 71         [ 4]    1     CALL DOLIT 
      002ED6 00 45                    2     .word 'E' 
      002ED8 CD 08 66         [ 4]  393     CALL EQUAL 
      002EDB                        394     _QBRAN 1$
      002EDB CD 04 A4         [ 4]    1     CALL QBRAN
      002EDE 2F 0B                    2     .word 1$
      002EE0 CD 0A C3         [ 4]  395     CALL ONEP 
      002EE3 CD 05 40         [ 4]  396     CALL RFROM  ; a cntr 
      002EE6 CD 0A D0         [ 4]  397     CALL ONEM
      002EE9 CD 05 96         [ 4]  398     CALL DUPP 
      002EEC                        399     _QBRAN 2$ ; a cntr 
      002EEC CD 04 A4         [ 4]    1     CALL QBRAN
      002EEF 2F 0E                    2     .word 2$
      002EF1 CD 0B 2F         [ 4]  400     CALL ZERO
      002EF4 CD 05 96         [ 4]  401     CALL DUPP 
      002EF7 CD 26 69         [ 4]  402     CALL DSWAP ; 0 0 a cntr  
      002EFA CD 23 AB         [ 4]  403     CALL nsign 
      002EFD CD 05 5F         [ 4]  404     CALL TOR   ; R: esign  
      002F00 CD 23 E3         [ 4]  405     CALL parse_digits
      002F03                        406     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F03 CD 04 A4         [ 4]    1     CALL QBRAN
      002F06 2F 15                    2     .word PARSEXP_SUCCESS
                                    407 ; failed invalid character
      002F08 CD 07 A5         [ 4]  408     CALL DDROP ; 0 a 
      002F0B                        409 1$: 
      002F0B CD 05 40         [ 4]  410     CALL RFROM ; sign||cntr  
      002F0E                        411 2$:
      002F0E CD 07 A5         [ 4]  412     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002F11 CD 0B 2F         [ 4]  413     CALL ZERO   ; return only 0 
      002F14 81               [ 4]  414     RET 
      002F15                        415 PARSEXP_SUCCESS: 
      002F15 CD 07 A5         [ 4]  416     CALL DDROP ; drop dhi a 
      002F18 CD 05 40         [ 4]  417     CALL RFROM ; es 
      002F1B                        418     _QBRAN 1$
      002F1B CD 04 A4         [ 4]    1     CALL QBRAN
      002F1E 2F 23                    2     .word 1$
      002F20 CD 07 F0         [ 4]  419     CALL NEGAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002F23                        420 1$:
      002F23                        421     _DOLIT -1 ; -- e -1 
      002F23 CD 04 71         [ 4]    1     CALL DOLIT 
      002F26 FF FF                    2     .word -1 
      002F28 81               [ 4]  422     RET 
                                    423 
                                    424 
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    426 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    427 ;   called by NUMBER? 
                                    428 ;   convert string to float 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F29                        430     _HEADER FLOATQ,5,"FLOAT?"
      002F29 2E 1D                    1         .word LINK 
                           002F2B     2         LINK=.
      002F2B 05                       3         .byte 5  
      002F2C 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F32                          5         FLOATQ:
      002F32                        431     _QBRAN FLOATQ0 
      002F32 CD 04 A4         [ 4]    1     CALL QBRAN
      002F35 2F 3C                    2     .word FLOATQ0
      002F37                        432     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002F37 CD 04 BB         [ 4]    1     CALL BRAN 
      002F3A 2F DB                    2     .word FLOAT_ERROR 
      002F3C                        433 FLOATQ0:
                                    434 ; BASE must be 10 
      002F3C CD 06 66         [ 4]  435     CALL BASE 
      002F3F CD 04 EF         [ 4]  436     CALL AT 
      002F42                        437     _DOLIT 10 
      002F42 CD 04 71         [ 4]    1     CALL DOLIT 
      002F45 00 0A                    2     .word 10 
      002F47 CD 08 66         [ 4]  438     CALL EQUAL 
      002F4A                        439     _QBRAN FLOAT_ERROR 
      002F4A CD 04 A4         [ 4]    1     CALL QBRAN
      002F4D 2F DB                    2     .word FLOAT_ERROR
                                    440 ; if float next char is '.' or 'E' 
      002F4F CD 05 5F         [ 4]  441     CALL TOR ; R: sign  
      002F52 CD 05 5F         [ 4]  442     CALL TOR ; R: sign cntr 
      002F55 CD 05 96         [ 4]  443     CALL DUPP
      002F58 CD 05 0D         [ 4]  444     CALL CAT 
      002F5B                        445     _DOLIT '.' 
      002F5B CD 04 71         [ 4]    1     CALL DOLIT 
      002F5E 00 2E                    2     .word '.' 
      002F60 CD 08 66         [ 4]  446     CALL EQUAL 
      002F63                        447     _QBRAN FLOATQ1 ; not a dot 
      002F63 CD 04 A4         [ 4]    1     CALL QBRAN
      002F66 2F A1                    2     .word FLOATQ1
      002F68 CD 0A C3         [ 4]  448     CALL ONEP 
      002F6B CD 05 40         [ 4]  449     CALL RFROM  ; dlo dhi a cntr R: sign  
      002F6E CD 0A D0         [ 4]  450     CALL ONEM 
      002F71 CD 05 96         [ 4]  451     CALL DUPP 
      002F74 CD 05 5F         [ 4]  452     CALL TOR  ; R: sign cntr 
                                    453 ; parse fractional part
      002F77 CD 23 E3         [ 4]  454     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002F7A CD 05 96         [ 4]  455     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002F7D CD 05 40         [ 4]  456     CALL RFROM 
      002F80 CD 05 A6         [ 4]  457     CALL SWAPP 
      002F83 CD 08 3E         [ 4]  458     CALL SUBB ; fd -> fraction digits count 
      002F86 CD 05 5F         [ 4]  459     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002F89 CD 05 96         [ 4]  460     CALL DUPP ; cntr cntr  
      002F8C                        461     _QBRAN 1$ ; end of string, no exponent
      002F8C CD 04 A4         [ 4]    1     CALL QBRAN
      002F8F 2F 96                    2     .word 1$
      002F91                        462     _BRAN FLOATQ2
      002F91 CD 04 BB         [ 4]    1     CALL BRAN 
      002F94 2F AA                    2     .word FLOATQ2 
      002F96 CD 05 A6         [ 4]  463 1$: CALL SWAPP 
      002F99 CD 05 8C         [ 4]  464     CALL DROP ; a
      002F9C                        465     _BRAN FLOATQ3        
      002F9C CD 04 BB         [ 4]    1     CALL BRAN 
      002F9F 2F B2                    2     .word FLOATQ3 
      002FA1                        466 FLOATQ1: ; must push fd==0 on RSTACK 
      002FA1 CD 05 40         [ 4]  467     CALL RFROM ; cntr 
      002FA4 CD 0B 2F         [ 4]  468     CALL ZERO  ; fd 
      002FA7 CD 05 5F         [ 4]  469     CALL TOR   ; dm a cntr R: sign fd 
      002FAA                        470 FLOATQ2: 
      002FAA CD 2E CA         [ 4]  471     CALL parse_exponent 
      002FAD                        472     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002FAD CD 04 A4         [ 4]    1     CALL QBRAN
      002FB0 2F D8                    2     .word FLOAT_ERROR0
      002FB2                        473 FLOATQ3: ; dm 0 || dm e  
      002FB2 CD 05 40         [ 4]  474     CALL RFROM ;  fd  
      002FB5 CD 08 3E         [ 4]  475     CALL SUBB  ; exp=e-fd 
      002FB8 CD 07 83         [ 4]  476     CALL NROT 
      002FBB CD 05 40         [ 4]  477     CALL RFROM  ; sign 
      002FBE                        478     _QBRAN FLOATQ4 
      002FBE CD 04 A4         [ 4]    1     CALL QBRAN
      002FC1 2F C6                    2     .word FLOATQ4
      002FC3 CD 08 02         [ 4]  479     CALL DNEGA 
      002FC6                        480 FLOATQ4:
      002FC6 CD 07 64         [ 4]  481     CALL ROT 
      002FC9 CD 2D 06         [ 4]  482     CALL STEXP 
      002FCC CD 07 64         [ 4]  483     CALL ROT 
      002FCF CD 05 8C         [ 4]  484     CALL DROP 
      002FD2                        485     _DOLIT -3 
      002FD2 CD 04 71         [ 4]    1     CALL DOLIT 
      002FD5 FF FD                    2     .word -3 
      002FD7 81               [ 4]  486     RET       
      002FD8                        487 FLOAT_ERROR0: 
      002FD8 CD 28 04         [ 4]  488     CALL DRFROM ; sign df      
      002FDB                        489 FLOAT_ERROR: 
      002FDB CD 0B 71         [ 4]  490     CALL DEPTH 
      002FDE CD 0A B6         [ 4]  491     CALL CELLS 
      002FE1 CD 05 76         [ 4]  492     CALL SPAT 
      002FE4 CD 05 A6         [ 4]  493     CALL SWAPP 
      002FE7 CD 07 C5         [ 4]  494     CALL PLUS  
      002FEA CD 05 83         [ 4]  495     CALL SPSTO 
      002FED                        496     _DOLIT 0 
      002FED CD 04 71         [ 4]    1     CALL DOLIT 
      002FF0 00 00                    2     .word 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002FF2 81               [ 4]  497     RET 
                                    498 
                                    499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    500 ;  LSCALE ( f# -- f# )
                                    501 ;  m *=fbase , e -= 1
                                    502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FF3                        503     _HEADER LSCALE,6,"LSCALE"
      002FF3 2F 2B                    1         .word LINK 
                           002FF5     2         LINK=.
      002FF5 06                       3         .byte 6  
      002FF6 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002FFC                          5         LSCALE:
      002FFC CD 2C BC         [ 4]  504     CALL ATEXP 
      002FFF                        505     _DOLIT 1 
      002FFF CD 04 71         [ 4]    1     CALL DOLIT 
      003002 00 01                    2     .word 1 
      003004 CD 08 3E         [ 4]  506     CALL SUBB 
      003007 CD 05 5F         [ 4]  507     CALL TOR
      00300A                        508     _DOLIT 10 
      00300A CD 04 71         [ 4]    1     CALL DOLIT 
      00300D 00 0A                    2     .word 10 
      00300F CD 26 20         [ 4]  509     CALL DSSTAR
      003012 CD 05 40         [ 4]  510     CALL RFROM 
      003015 CD 2D 06         [ 4]  511     CALL STEXP 
      003018 81               [ 4]  512     RET  
                                    513 
                                    514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    515 ;  RSCALE ( f# -- f# )
                                    516 ;  m /=fbase , e+=1 
                                    517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003019                        518     _HEADER RSCALE,6,"RSCALE"
      003019 2F F5                    1         .word LINK 
                           00301B     2         LINK=.
      00301B 06                       3         .byte 6  
      00301C 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003022                          5         RSCALE:
      003022 CD 2C BC         [ 4]  519     CALL ATEXP 
      003025                        520     _DOLIT 1 
      003025 CD 04 71         [ 4]    1     CALL DOLIT 
      003028 00 01                    2     .word 1 
      00302A CD 07 C5         [ 4]  521     CALL PLUS 
      00302D CD 05 5F         [ 4]  522     CALL TOR 
      003030                        523     _DOLIT 10 
      003030 CD 04 71         [ 4]    1     CALL DOLIT 
      003033 00 0A                    2     .word 10 
      003035 CD 25 78         [ 4]  524     CALL DSLMOD 
      003038 CD 07 64         [ 4]  525     CALL ROT 
      00303B CD 05 8C         [ 4]  526     CALL DROP 
      00303E CD 05 40         [ 4]  527     CALL RFROM 
      003041 CD 2D 06         [ 4]  528     CALL STEXP 
      003044 81               [ 4]  529     RET 
                                    530 
                                    531 
                                    532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    533 ;    F* ( f#1 f#2 -- f#3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                    534 ;    float product 
                                    535 ;    f#3=f#1 * f#2 
                                    536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003045                        537     _HEADER FSTAR,2,"F*"
      003045 30 1B                    1         .word LINK 
                           003047     2         LINK=.
      003047 02                       3         .byte 2  
      003048 46 2A                    4         .ascii "F*"
      00304A                          5         FSTAR:
      00304A CD 2C BC         [ 4]  538     CALL ATEXP ; f#1 m2 e2 
      00304D CD 05 5F         [ 4]  539     CALL TOR   
      003050 CD 26 69         [ 4]  540     CALL DSWAP ; m2 f#1
      003053 CD 2C BC         [ 4]  541     CALL ATEXP ; m2 m1 e1 
      003056 CD 05 40         [ 4]  542     CALL RFROM ; m2 m1 e1 e2 
      003059 CD 07 C5         [ 4]  543     CALL PLUS  ; m2 m1 e 
      00305C CD 05 5F         [ 4]  544     CALL TOR
      00305F CD 29 94         [ 4]  545     CALL DSTAR ; m2 m1 m2*m1 
      003062 CD 25 5F         [ 4]  546     CALL DSIGN 
      003065 CD 07 83         [ 4]  547     CALL NROT 
      003068 CD 25 48         [ 4]  548     CALL DABS 
      00306B                        549 FSTAR1: ; scale down 32 bit to 24 bits 
      00306B CD 05 96         [ 4]  550     CALL DUPP
      00306E                        551     _DOLIT 0X7F   
      00306E CD 04 71         [ 4]    1     CALL DOLIT 
      003071 00 7F                    2     .word 0X7F 
      003073 CD 08 C1         [ 4]  552     CALL GREAT 
      003076                        553     _QBRAN FSTAR2 
      003076 CD 04 A4         [ 4]    1     CALL QBRAN
      003079 30 97                    2     .word FSTAR2
      00307B                        554     _DOLIT 10 
      00307B CD 04 71         [ 4]    1     CALL DOLIT 
      00307E 00 0A                    2     .word 10 
      003080 CD 25 78         [ 4]  555     CALL DSLMOD 
      003083 CD 07 64         [ 4]  556     CALL ROT 
      003086 CD 05 8C         [ 4]  557     CALL DROP
      003089 CD 05 40         [ 4]  558     CALL RFROM 
      00308C CD 0A C3         [ 4]  559     CALL ONEP 
      00308F CD 05 5F         [ 4]  560     CALL TOR  
      003092                        561     _BRAN FSTAR1
      003092 CD 04 BB         [ 4]    1     CALL BRAN 
      003095 30 6B                    2     .word FSTAR1 
      003097                        562 FSTAR2:
      003097 CD 07 64         [ 4]  563     CALL ROT 
      00309A                        564     _QBRAN FSTAR3 
      00309A CD 04 A4         [ 4]    1     CALL QBRAN
      00309D 30 A2                    2     .word FSTAR3
      00309F CD 08 02         [ 4]  565     CALL DNEGA 
      0030A2                        566 FSTAR3:     
      0030A2 CD 05 40         [ 4]  567     CALL RFROM 
      0030A5 CD 2D 06         [ 4]  568     CALL STEXP 
      0030A8 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ;  F/ ( f#1 f#2 -- f#3 )
                                    573 ;  float division
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                    574 ;  f#3 = f#1/f#2
                                    575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030A9                        576     _HEADER FSLASH,2,"F/"
      0030A9 30 47                    1         .word LINK 
                           0030AB     2         LINK=.
      0030AB 02                       3         .byte 2  
      0030AC 46 2F                    4         .ascii "F/"
      0030AE                          5         FSLASH:
      0030AE CD 2C BC         [ 4]  577     CALL ATEXP  ; f#1 dm2 e2  
      0030B1 CD 05 5F         [ 4]  578     CALL TOR    ; f#1 dm2   R: e2 
      0030B4 CD 25 5F         [ 4]  579     CALL DSIGN  ; f#1 dm2 s2 
      0030B7 CD 05 5F         [ 4]  580     CALL TOR    ; f#1 dm2  R: e2 s2 
      0030BA CD 25 48         [ 4]  581     CALL DABS   ; f#1 +dm2 
      0030BD CD 26 69         [ 4]  582     CALL DSWAP  ; +dm2 f#1 
      0030C0 CD 2C BC         [ 4]  583     CALL ATEXP  ; +dm2 dm1 e1 
      0030C3 CD 05 40         [ 4]  584     CALL RFROM  ; +dm2 dm1 e1 s2 
      0030C6 CD 05 A6         [ 4]  585     CALL SWAPP  ; +dm2 dm1 s1 e1 
      0030C9 CD 05 5F         [ 4]  586     CALL TOR    ; +dm2 dm1 s2 R: e2 e1  
      0030CC CD 07 83         [ 4]  587     CALL NROT   ; +dm2 s2 dm1 
      0030CF CD 25 5F         [ 4]  588     CALL DSIGN  ; +dm2 s2 dm1 s1 
      0030D2 CD 07 83         [ 4]  589     CALL NROT   ; +dm2 s2 s1 dm1 
      0030D5 CD 25 48         [ 4]  590     CALL DABS   ; +dm2 s2 s1 +dm1  
      0030D8 CD 05 5F         [ 4]  591     CALL TOR    
      0030DB CD 05 5F         [ 4]  592     CALL TOR    ; +dm2 s2 s1 R: e2 e1 +dm1  
      0030DE CD 06 1E         [ 4]  593     CALL XORR   ; +dm2 s R: e2 e1 +dm1 
      0030E1 CD 07 83         [ 4]  594     CALL NROT   ; s +dm2 
      0030E4 CD 05 40         [ 4]  595     CALL RFROM 
      0030E7 CD 05 40         [ 4]  596     CALL RFROM  ; s +dm2 +dm1 
      0030EA CD 26 69         [ 4]  597     CALL DSWAP  ; s +dm1 +dm2 
      0030ED                        598 FSLASH1:
      0030ED CD 05 96         [ 4]  599     CALL DUPP 
      0030F0                        600     _QBRAN FSLASH4 
      0030F0 CD 04 A4         [ 4]    1     CALL QBRAN
      0030F3 31 22                    2     .word FSLASH4
      0030F5                        601 FSLASH2: 
                                    602 ; reduce divisor
      0030F5                        603     _DOLIT 10 
      0030F5 CD 04 71         [ 4]    1     CALL DOLIT 
      0030F8 00 0A                    2     .word 10 
      0030FA CD 25 78         [ 4]  604     CALL DSLMOD
      0030FD CD 07 64         [ 4]  605     CALL ROT 
      003100 CD 05 8C         [ 4]  606     CALL DROP ; drop remainder 
      003103 CD 05 5F         [ 4]  607     CALL TOR 
      003106 CD 05 5F         [ 4]  608     CALL TOR
                                    609 ; redure divident      
      003109                        610     _DOLIT 10 
      003109 CD 04 71         [ 4]    1     CALL DOLIT 
      00310C 00 0A                    2     .word 10 
      00310E CD 25 78         [ 4]  611     CALL DSLMOD 
      003111 CD 07 64         [ 4]  612     CALL ROT    
      003114 CD 05 8C         [ 4]  613     CALL DROP    ; drop remainder 
      003117 CD 05 40         [ 4]  614     CALL RFROM 
      00311A CD 05 40         [ 4]  615     CALL RFROM   ; s +dm1 +dm2 
      00311D                        616     _BRAN FSLASH1 
      00311D CD 04 BB         [ 4]    1     CALL BRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      003120 30 ED                    2     .word FSLASH1 
      003122                        617 FSLASH4:
      003122 CD 05 8C         [ 4]  618     CALL DROP   ; drop divisor hi, is 0 
      003125 CD 25 78         [ 4]  619     CALL DSLMOD 
                                    620 ; scale up dquot to include remainder 
      003128                        621     _DOLIT 2 
      003128 CD 04 71         [ 4]    1     CALL DOLIT 
      00312B 00 02                    2     .word 2 
      00312D CD 0B 88         [ 4]  622     CALL PICK 
      003130 CD 07 83         [ 4]  623     CALL NROT  ; s r r dquot 
      003133                        624 FSL1:
      003133                        625     _DOLIT 2
      003133 CD 04 71         [ 4]    1     CALL DOLIT 
      003136 00 02                    2     .word 2 
      003138 CD 0B 88         [ 4]  626     CALL PICK 
      00313B                        627     _QBRAN FSL4 
      00313B CD 04 A4         [ 4]    1     CALL QBRAN
      00313E 31 64                    2     .word FSL4
      003140                        628     _DOLIT 10 
      003140 CD 04 71         [ 4]    1     CALL DOLIT 
      003143 00 0A                    2     .word 10 
      003145 CD 26 20         [ 4]  629     CALL DSSTAR
      003148 CD 05 40         [ 4]  630     CALL RFROM 
      00314B CD 0A D0         [ 4]  631     CALL ONEM 
      00314E CD 05 5F         [ 4]  632     CALL TOR 
      003151 CD 07 64         [ 4]  633     CALL ROT 
      003154                        634     _DOLIT 10 
      003154 CD 04 71         [ 4]    1     CALL DOLIT 
      003157 00 0A                    2     .word 10 
      003159 CD 09 E9         [ 4]  635     CALL SLASH 
      00315C CD 07 83         [ 4]  636     CALL NROT 
      00315F                        637     _BRAN FSL1 
      00315F CD 04 BB         [ 4]    1     CALL BRAN 
      003162 31 33                    2     .word FSL1 
      003164                        638 FSL4:
      003164 CD 07 64         [ 4]  639     CALL ROT
      003167 CD 05 5F         [ 4]  640     CALL TOR 
      00316A CD 07 64         [ 4]  641     CALL ROT 
      00316D CD 05 40         [ 4]  642     CALL RFROM 
      003170 CD 2A E0         [ 4]  643     CALL DPLUS  
      003173 CD 07 64         [ 4]  644     CALL ROT    ; dquot s 
      003176                        645     _QBRAN FSLASH5 
      003176 CD 04 A4         [ 4]    1     CALL QBRAN
      003179 31 7E                    2     .word FSLASH5
      00317B CD 08 02         [ 4]  646     CALL DNEGA  ; negate quotient 
      00317E                        647 FSLASH5:
      00317E CD 05 40         [ 4]  648     CALL RFROM 
      003181 CD 05 40         [ 4]  649     CALL RFROM 
      003184 CD 07 C5         [ 4]  650     CALL PLUS   
      003187 CD 2D 06         [ 4]  651     CALL STEXP 
      00318A 81               [ 4]  652     RET     
                                    653 
                                    654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    655 ;   SCALE> ( # -- #  )
                                    656 ;   scale down a double dividing it 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                    657 ;   by 10;  
                                    658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00318B                        659     _HEADER SCALETO,6,"SCALE>"
      00318B 30 AB                    1         .word LINK 
                           00318D     2         LINK=.
      00318D 06                       3         .byte 6  
      00318E 53 43 41 4C 45 3E        4         .ascii "SCALE>"
      003194                          5         SCALETO:
      003194 CD 25 5F         [ 4]  660     CALL DSIGN 
      003197 CD 05 5F         [ 4]  661     CALL TOR 
      00319A CD 25 48         [ 4]  662     CALL DABS 
      00319D                        663 SCAL1:
      00319D                        664     _DOLIT 10 
      00319D CD 04 71         [ 4]    1     CALL DOLIT 
      0031A0 00 0A                    2     .word 10 
      0031A2 CD 25 78         [ 4]  665     CALL DSLMOD 
      0031A5 CD 07 64         [ 4]  666     CALL ROT  
      0031A8 CD 05 8C         [ 4]  667     CALL DROP 
      0031AB CD 05 40         [ 4]  668     CALL RFROM 
      0031AE                        669     _QBRAN SCAL2 
      0031AE CD 04 A4         [ 4]    1     CALL QBRAN
      0031B1 31 B6                    2     .word SCAL2
      0031B3 CD 25 1E         [ 4]  670     CALL DNEGAT 
      0031B6                        671 SCAL2: 
      0031B6 81               [ 4]  672     RET 
                                    673 
                                    674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    675 ;   D>F  ( # -- f# )
                                    676 ;   convert double to float 
                                    677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031B7                        678     _HEADER DTOF,3,"D>F"
      0031B7 31 8D                    1         .word LINK 
                           0031B9     2         LINK=.
      0031B9 03                       3         .byte 3  
      0031BA 44 3E 46                 4         .ascii "D>F"
      0031BD                          5         DTOF:
      0031BD CD 25 5F         [ 4]  679     CALL DSIGN 
      0031C0 CD 05 5F         [ 4]  680     CALL TOR
      0031C3 CD 25 48         [ 4]  681     CALL DABS  
      0031C6 CD 0B 2F         [ 4]  682     CALL ZERO 
      0031C9 CD 07 83         [ 4]  683     CALL NROT
      0031CC                        684 DTOF1:      
      0031CC CD 07 B0         [ 4]  685     CALL DDUP 
      0031CF                        686     _DOLIT 0XFFFF 
      0031CF CD 04 71         [ 4]    1     CALL DOLIT 
      0031D2 FF FF                    2     .word 0XFFFF 
      0031D4                        687     _DOLIT 0X7F 
      0031D4 CD 04 71         [ 4]    1     CALL DOLIT 
      0031D7 00 7F                    2     .word 0X7F 
      0031D9 CD 27 5E         [ 4]  688     CALL DGREAT 
      0031DC                        689     _QBRAN DTOF4
      0031DC CD 04 A4         [ 4]    1     CALL QBRAN
      0031DF 31 F2                    2     .word DTOF4
      0031E1 CD 07 64         [ 4]  690     CALL ROT 
      0031E4 CD 0A C3         [ 4]  691     CALL ONEP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      0031E7 CD 07 83         [ 4]  692     CALL NROT 
      0031EA CD 31 94         [ 4]  693     CALL SCALETO 
      0031ED                        694     _BRAN DTOF1 
      0031ED CD 04 BB         [ 4]    1     CALL BRAN 
      0031F0 31 CC                    2     .word DTOF1 
      0031F2                        695 DTOF4:     
      0031F2 CD 05 40         [ 4]  696     CALL RFROM 
      0031F5                        697     _QBRAN DTOF6
      0031F5 CD 04 A4         [ 4]    1     CALL QBRAN
      0031F8 31 FD                    2     .word DTOF6
      0031FA CD 25 1E         [ 4]  698     CALL DNEGAT 
      0031FD                        699 DTOF6: 
      0031FD CD 07 64         [ 4]  700     CALL ROT 
      003200 CD 2D 06         [ 4]  701     CALL STEXP 
      003203 81               [ 4]  702     RET 
                                    703 
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    705 ;   F>D  ( f# -- # )
                                    706 ;  convert float to double 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003204                        708     _HEADER FTOD,3,"F>D"
      003204 31 B9                    1         .word LINK 
                           003206     2         LINK=.
      003206 03                       3         .byte 3  
      003207 46 3E 44                 4         .ascii "F>D"
      00320A                          5         FTOD:
      00320A CD 2C BC         [ 4]  709     CALL ATEXP 
      00320D CD 07 53         [ 4]  710     CALL QDUP
      003210                        711     _QBRAN FTOD8
      003210 CD 04 A4         [ 4]    1     CALL QBRAN
      003213 32 6C                    2     .word FTOD8
      003215 CD 05 96         [ 4]  712     CALL DUPP   
      003218 CD 05 CF         [ 4]  713     CALL ZLESS 
      00321B                        714     _QBRAN FTOD4 
      00321B CD 04 A4         [ 4]    1     CALL QBRAN
      00321E 32 54                    2     .word FTOD4
                                    715 ; negative exponent 
      003220 CD 08 58         [ 4]  716     CALL ABSS 
      003223 CD 05 5F         [ 4]  717     CALL TOR
      003226                        718     _BRAN FTOD2  
      003226 CD 04 BB         [ 4]    1     CALL BRAN 
      003229 32 47                    2     .word FTOD2 
      00322B                        719 FTOD1:
      00322B CD 07 B0         [ 4]  720     CALL DDUP 
      00322E CD 25 00         [ 4]  721     CALL DZEQUAL 
      003231 CD 07 DF         [ 4]  722     CALL INVER 
      003234                        723     _QBRAN FTOD3 
      003234 CD 04 A4         [ 4]    1     CALL QBRAN
      003237 32 4D                    2     .word FTOD3
      003239                        724     _DOLIT 10 
      003239 CD 04 71         [ 4]    1     CALL DOLIT 
      00323C 00 0A                    2     .word 10 
      00323E CD 25 78         [ 4]  725     CALL DSLMOD 
      003241 CD 07 64         [ 4]  726     CALL ROT 
      003244 CD 05 8C         [ 4]  727     CALL DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      003247                        728 FTOD2:      
      003247                        729     _DONXT FTOD1
      003247 CD 04 85         [ 4]    1     CALL DONXT 
      00324A 32 2B                    2     .word FTOD1 
      00324C 81               [ 4]  730     RET  
      00324D                        731 FTOD3: 
      00324D CD 05 40         [ 4]  732     CALL RFROM 
      003250 CD 05 8C         [ 4]  733     CALL DROP 
      003253 81               [ 4]  734     RET 
                                    735 ; positive exponent 
      003254                        736 FTOD4:
      003254 CD 05 5F         [ 4]  737     CALL TOR 
      003257                        738     _BRAN FTOD6
      003257 CD 04 BB         [ 4]    1     CALL BRAN 
      00325A 32 67                    2     .word FTOD6 
      00325C                        739 FTOD5:
      00325C                        740     _DOLIT 10 
      00325C CD 04 71         [ 4]    1     CALL DOLIT 
      00325F 00 0A                    2     .word 10 
      003261 CD 0B 2F         [ 4]  741     CALL ZERO 
      003264 CD 29 94         [ 4]  742     CALL DSTAR 
      003267                        743 FTOD6: 
      003267                        744     _DONXT FTOD5 
      003267 CD 04 85         [ 4]    1     CALL DONXT 
      00326A 32 5C                    2     .word FTOD5 
      00326C                        745 FTOD8:     
      00326C 81               [ 4]  746     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   4781 .endif 
                                   4782 
                                   4783 ;===============================================================
                                   4784 
                           003206  4785 LASTN =	LINK   ;last name defined
                                   4786 
                                   4787 ; application code begin here
      003280                       4788 	.bndry 128 ; align on flash block  
      003280                       4789 app_space: 
                                   4790 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000861 R   |   6 ABOR1      001342 R
  6 ABOR2      001359 R   |   6 ABORQ      00133A R   |   6 ABORT      00132B R
  6 ABRTQ      001616 R   |   6 ABSS       000858 R   |   6 ACCEP      0012C1 R
  6 ACCP1      0012CA R   |   6 ACCP2      0012F0 R   |   6 ACCP3      0012F3 R
  6 ACCP4      0012F5 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000743 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001601 R   |   6 AGAIN      001557 R   |   6 AHEAD      0015B4 R
  6 ALLOT      00146A R   |   6 ANDD       0005F5 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004EF R   |   6 ATEXE      000C53 R   |   6 ATEXP      002CBC R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001269 R   |   6 BASE       000666 R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      0014AC R   |   6 BDIGS      000D3A R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001539 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      0010BE R   |   6 BKSP       001239 R   |     BKSPP   =  000008 
  6 BLANK      000B22 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004BB R   |     BTW     =  000001 
  6 BUF2ROW    00207E R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022C7 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        00050D R   |   6 CCOMMA     00148E R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000AA7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000A98 R   |   6 CELLS      000AB6 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000E90 R
  6 CHAR2      000E93 R   |   6 CHKIVEC    001F6C R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C72 R
  6 CMOV2      000C8A R   |   6 CMOVE      000C6A R   |     CNTDWN  =  000032 
  6 CNTXT      0006E9 R   |   6 COLD       001A6D R   |   6 COLD1      001A6D R
  6 COLON      0017BF R   |   6 COMMA      001477 R   |   6 COMPI      0014BC R
    COMPO   =  000040     |   6 CONSTANT   001869 R   |   6 COUNT      000C06 R
  6 CPP        000705 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EBE R   |   6 CREAT      001805 R   |     CRR     =  00000D 
  6 CSTOR      0004FC R   |   6 CTABLE     0022E8 R   |   6 CTAT       002309 R
  6 CTINIT     002331 R   |   6 D2SLASH    0028C6 R   |   6 D2STAR     0028DD R
  6 DABS       002548 R   |   6 DABS1      002556 R   |   6 DAT        000BE6 R
    DATSTK  =  001680     |   6 DCLZ       002697 R   |   6 DCLZ1      0026A0 R
  6 DCLZ4      0026A9 R   |   6 DCLZ8      0026B6 R   |   6 DCMP       0027B4 R
  6 DCMP2      0027C0 R   |   6 DCMP4      0027DB R   |   6 DCMP_EQU   0027CD R
  6 DCMP_GRE   0027D7 R   |   6 DCMP_SMA   0027D1 R   |   6 DCONST     00189E R
  6 DDIG       0025B9 R   |   6 DDIGS      0025D2 R   |   6 DDOT       0025E9 R
  6 DDOT0      0025FD R   |   6 DDOT1      002613 R   |   6 DDROP      0007A5 R
  6 DDSLMOD    00292F R   |   6 DDSLMOD1   00294C R   |   6 DDSTAR3    0029ED R
  6 DDUP       0007B0 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000DEA R   |   6 DEPTH      000B71 R   |   6 DEQU4      002752 R
  6 DEQUAL     00273D R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     00275E R   |   6 DGREAT4    002773 R   |   6 DGTQ1      000E2F R
  6 DI         0000C4 R   |   6 DIG        000D63 R   |   6 DIGIT      000CFE R
  6 DIGS       000D74 R   |   6 DIGS1      000D74 R   |   6 DIGS2      000D81 R
  6 DIGTQ      000DFE R   |     DISCOVER=  000000     |   6 DLESS      00277F R
  6 DLESS4     002795 R   |   6 DLITER     002886 R   |   6 DLSHIFT    0028F9 R
  6 DLSHIFT1   00290A R   |   6 DLSHIFT2   00291F R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00081F R   |   6 DNEG1      00253D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGA      000802 R   |   6 DNEGAT     00251E R   |   6 DOCONST    001889 R
  6 DOLIT      000471 R   |   6 DONXT      000485 R   |     DOORBELL=  000000 
  6 DOSTR      000ED4 R   |   6 DOT        000F77 R   |   6 DOT1       000F8D R
  6 DOTI1      0019EE R   |   6 DOTID      0019D8 R   |   6 DOTO1      0013CE R
  6 DOTOK      0013B4 R   |   6 DOTPR      0010A0 R   |   6 DOTQ       001630 R
  6 DOTQP      000EFD R   |   6 DOTR       000F0B R   |   6 DOTS       00197A R
  6 DOTS1      001985 R   |   6 DOTS2      00198E R   |   6 DOVAR      000656 R
  6 DOVER      0028AD R   |   6 DO_DCONS   0018C1 R   |   6 DPLUS      002AE0 R
  6 DPLUS1     002B07 R   |   6 DRAT       00281C R   |   6 DRFROM     002804 R
  6 DROP       00058C R   |   6 DROT       002703 R   |   6 DSIGN      00255F R
  6 DSIGN1     002569 R   |   6 DSLA1      002A0D R   |   6 DSLA2      002A2F R
  6 DSLA3      002A6C R   |   6 DSLA4      002A95 R   |   6 DSLA7      002AC6 R
  6 DSLA8      002AC9 R   |   6 DSLA9      002ADA R   |   6 DSLASH     0029F3 R
  6 DSLMOD     002578 R   |   6 DSLMOD3    002593 R   |   6 DSLMOD4    00259F R
  6 DSLMODa    00259A R   |   6 DSLMODb    0025A5 R   |   6 DSSTAR     002620 R
  6 DSSTAR1    002637 R   |   6 DSSTAR3    002660 R   |   6 DSTAR      002994 R
  6 DSTOR      000BC0 R   |   6 DSUB       002B12 R   |   6 DSUB1      002B39 R
  6 DSWAP      002669 R   |   6 DTOF       0031BD R   |   6 DTOF1      0031CC R
  6 DTOF4      0031F2 R   |   6 DTOF6      0031FD R   |   6 DTOR       0027E6 R
  6 DUMP       001930 R   |   6 DUMP1      001947 R   |   6 DUMP3      001969 R
  6 DUMPP      0018FF R   |   6 DUPP       000596 R   |   6 DVARIA     00283A R
  6 DZEQUAL    002500 R   |   6 DZLESS     00279C R   |   6 DZLESS1    0027A6 R
  6 EDIGS      000D9F R   |   6 EDOT       002D85 R   |   6 EDOT0      002D9C R
  6 EDOT1      002DAA R   |   6 EDOT2      002DB0 R   |   6 EDOT3      002DC9 R
  6 EDOT4      002DF5 R   |   6 EDOT5      002E11 R   |   6 EECSTORE   001D1D R
  6 EEPCP      001B43 R   |   6 EEPLAST    001B16 R   |   6 EEPROM     001AFE R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B2D R   |   6 EEPVP      001B59 R
  6 EESTORE    001D69 R   |   6 EE_CCOMM   002033 R   |   6 EE_COMMA   002012 R
  6 EE_CREAD   001CAE R   |   6 EE_READ    001C8C R   |   6 EI         0000BD R
  6 ELSEE      00158F R   |   6 EMIT       000436 R   |   6 ENEPER     002253 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        00087C R
  6 EQUAL      000866 R   |   6 ERASE      000CCC R   |     ERR     =  00001B 
  6 EVAL       0013F7 R   |   6 EVAL1      0013F7 R   |   6 EVAL2      001413 R
  6 EXE1       000C61 R   |   6 EXECU      0004CB R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D26 R
  6 FADDR      002100 R   |   6 FARAT      001BC4 R   |   6 FARCAT     001BD0 R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002E20 R
  6 FDOT0      002E5E R   |   6 FDOT1      002E4D R   |   6 FDOT10     002EBA R
  6 FDOT2      002E6C R   |   6 FDOT3      002E85 R   |   6 FDOT6      002E95 R
  6 FDOT7      002E9A R   |   6 FDOT8      002EA2 R   |   6 FDOT9      002EAA R
  6 FER        002BBF R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000C99 R   |   6 FILL1      000CB6 R   |   6 FILL2      000CBF R
  6 FIND       001195 R   |   6 FIND1      0011B3 R   |   6 FIND2      0011E1 R
  6 FIND3      0011ED R   |   6 FIND4      001201 R   |   6 FIND5      00120E R
  6 FIND6      0011F2 R   |   6 FINIT      002BB5 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLOATQ     002F32 R
  6 FLOATQ0    002F3C R   |   6 FLOATQ1    002FA1 R   |   6 FLOATQ2    002FAA R
  6 FLOATQ3    002FB2 R   |   6 FLOATQ4    002FC6 R   |   6 FLOAT_ER   002FDB R
  6 FLOAT_ER   002FD8 R   |     FLSI    =  01F400     |   6 FMOVE      00210B R
  6 FMOVE2     00213C R   |   6 FNE        002BE1 R   |   6 FOR        00150C R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002BF6 R
  6 FPSTOR     001ADF R   |   6 FPSW       002B8F R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002BA1 R
  6 FSL1       003133 R   |   6 FSL4       003164 R   |   6 FSLASH     0030AE R
  6 FSLASH1    0030ED R   |   6 FSLASH2    0030F5 R   |   6 FSLASH4    003122 R
  6 FSLASH5    00317E R   |   6 FSTAR      00304A R   |   6 FSTAR1     00306B R
  6 FSTAR2     003097 R   |   6 FSTAR3     0030A2 R   |   6 FTOD       00320A R
  6 FTOD1      00322B R   |   6 FTOD2      003247 R   |   6 FTOD3      00324D R
  6 FTOD4      003254 R   |   6 FTOD5      00325C R   |   6 FTOD6      003267 R
  6 FTOD8      00326C R   |   6 FZE        002BCC R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      0008C1 R   |   6 GREAT1     0008D7 R   |   6 HDOT       000F5A R
  6 HERE       000C1D R   |   6 HEX        000DD5 R   |   6 HI         001A2A R
  6 HLD        0006D6 R   |   6 HOLD       000D4A R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0017D0 R   |   6 IFETCH     00152A R   |   6 IFF        001567 R
  6 IFMOVE     0021E4 R   |   6 ILOG       002B46 R   |   6 ILOG1      002B51 R
  6 ILOG2      002B7E R   |     IMEDD   =  000080     |   6 IMMED      0017E2 R
  6 INCH       00042A R   |   6 INC_FPTR   001C59 R   |   6 INITOFS    001798 R
  6 INN        000684 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001396 R
  6 INTER      00136C R   |   6 INTQ       00238D R   |     INT_ADC2=  000016 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]

Symbol Table

    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0007DF R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      00172D R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       001782 R   |   6 KEY        000E3E R
  6 KTAP       001286 R   |   6 KTAP1      0012A9 R   |   6 KTAP2      0012AC R
  6 LAST       000715 R   |   6 LASTN   =  003206 R   |   6 LBRAC      0013A3 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       0008A3 R   |     LF      =  00000A     |   6 LINK    =  003206 R
  6 LITER      0014DE R   |   6 LN2S       0022AF R   |   6 LOCK       001C45 R
  6 LOG2S      002299 R   |   6 LSCALE     002FFC R   |   6 LSHIFT     000AE1 R
  6 LSHIFT1    000AEA R   |   6 LSHIFT4    000AF2 R   |   6 LT1        0008B9 R
    MASKK   =  001F7F     |   6 MAX        0008E1 R   |   6 MAX1       0008F4 R
  6 MIN        0008FE R   |   6 MIN1       000911 R   |   6 MMOD1      00099A R
  6 MMOD2      0009AE R   |   6 MMOD3      0009C5 R   |   6 MMSM1      000955 R
  6 MMSM3      000959 R   |   6 MMSM4      000965 R   |   6 MMSMa      000960 R
  6 MMSMb      00096B R   |   6 MODD       0009DF R   |   6 MONE       000B48 R
    MS      =  000030     |   6 MSEC       0002D0 R   |   6 MSMOD      00097D R
  6 MSTA1      000A70 R   |   6 MSTAR      000A4D R   |     NAFR    =  004804 
  6 NAMEQ      00122E R   |   6 NAMET      00113F R   |     NCLKOPT =  004808 
  6 NDROT      0026C7 R   |   6 NEGAT      0007F0 R   |   6 NEX1       000492 R
  6 NEXT       00151B R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NROT       000783 R
  6 NTIB       000694 R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000E54 R   |   6 NUFQ1      000E6D R   |   6 NUMBQ      002436 R
  6 NUMQ0      002477 R   |   6 NUMQ1      002499 R   |   6 NUMQ3      0024C3 R
  6 NUMQ4      0024E7 R   |   6 NUMQ8      0024F0 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     00073A R
    OFS     =  000005     |   6 ONE        000B3A R   |   6 ONEM       000AD0 R
  6 ONEP       000AC3 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        000609 R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005C0 R   |   6 OVERT      0016FB R
    PA      =  000000     |   6 PACKS      000CDD R   |   6 PAD        000C2E R
  6 PAREN      0010AF R   |   6 PARS       000FA8 R   |   6 PARS1      000FD3 R
  6 PARS2      000FFE R   |   6 PARS3      001001 R   |   6 PARS4      00100A R
  6 PARS5      00102D R   |   6 PARS6      001042 R   |   6 PARS7      001051 R
  6 PARS8      001060 R   |   6 PARSE      001071 R   |   6 PARSEXP_   002F15 R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001912 R   |   6 PDUM2      001923 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000B88 R
  6 PII        002212 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007C5 R   |   6 PNAM1      0016A0 R
  6 POSMANT    002CF6 R   |   6 PRESE      001422 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PSTOR      000B9F R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001C71 R   |   6 QBRAN      0004A4 R   |   6 QDUP       000753 R
  6 QDUP1      00075D R   |   6 QKEY       000418 R   |   6 QSTAC      0013DA R
  6 QUERY      001306 R   |   6 QUEST      000F9A R   |   6 QUIT       00143F R
  6 QUIT1      001447 R   |   6 QUIT2      00144A R   |   6 RAM2EE     0020AC R
    RAMBASE =  000000     |   6 RAMLAST    000728 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        000553 R   |   6 RBRAC      00176F R   |   6 REPEA      0015E4 R
  6 RFREE      002093 R   |   6 RFROM      000540 R   |     ROP     =  004800 
  6 ROT        000764 R   |   6 ROW2BUF    002055 R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       00051D R   |     RPP     =  0017FF 
  6 RPSTO      00052A R   |   6 RSCALE     003022 R   |   6 RSHIFT     000AFD R
  6 RSHIFT1    000B06 R   |   6 RSHIFT4    000B0E R   |     RST_SR  =  0050B3 
  6 RT12_2     002282 R   |   6 SAME1      00115D R   |   6 SAME2      001186 R
  6 SAMEQ      001155 R   |   6 SCAL1      00319D R   |   6 SCAL2      0031B6 R
  6 SCALETO    003194 R   |   6 SCOM1      0016D5 R   |   6 SCOM2      0016D8 R
  6 SCOMP      0016B7 R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      00170B R   |   6 SETISP     0000D0 R
  6 SET_RAML   001852 R   |   6 SFN        002C63 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002C9B R   |   6 SFZ        002C2C R
  6 SIGN       000D89 R   |   6 SIGN1      000D99 R   |   6 SLASH      0009E9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]

Symbol Table

  6 SLMOD      0009CD R   |   6 SNAME      00166A R   |     SP0     =  00002C 
  6 SPACE      000E76 R   |   6 SPACS      000E85 R   |   6 SPAT       000576 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000583 R   |   6 SQRT10     00226B R
  6 SQRT2      002229 R   |   6 SQRT3      002240 R   |   6 SSMOD      000A79 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000A42 R
  6 STASL      000A8A R   |   6 STEXP      002D06 R   |   6 STEXP1     002D1C R
  6 STEXP2     002D58 R   |   6 STEXP3     002D6B R   |   6 STOD       000827 R
  6 STORE      0004D8 R   |   6 STR        000DB7 R   |   6 STRCQ      0014EC R
  6 STRQ       001623 R   |   6 STRQP      000EF3 R   |   6 SUBB       00083E R
  6 SWAPP      0005A6 R   |     SWIM_CSR=  007F80     |   6 TAP        001270 R
  6 TBOOT      001A61 R   |   6 TBUF       0006A4 R   |     TBUFFBAS=  001680 
  6 TCHAR      000B59 R   |   6 TEMP       000675 R   |   6 TEVAL      0006C7 R
  6 TFLASH     0006B6 R   |   6 THENN      00157C R   |   6 TIB        000C3F R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       001456 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0019A8 R
  6 TNAM3      0019C6 R   |   6 TNAM4      0019CC R   |   6 TNAME      0019A5 R
  6 TOFLASH    000335 R   |   6 TOKEN      001131 R   |   6 TOR        00055F R
  6 TORAM      000375 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000B15 R
  6 TYPE1      000EA5 R   |   6 TYPE2      000EB1 R   |   6 TYPES      000EA0 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]

Symbol Table

    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005232     |     UART_BRR=  005233 
    UART_CR1=  005234     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005235     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  005231 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  005230 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000016     |     UCP     =  00001A 
    UCTIB   =  00000E     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F46 R
  6 UDOTR      000F26 R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     002C0A R   |   6 UGREAT1    002C22 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00089B R   |   6 ULESS      000885 R   |   6 UMMOD      000939 R
  6 UMSTA      0009F8 R   |   6 UNIQ1      001661 R   |   6 UNIQU      001642 R
  6 UNLKEE     001BDF R   |   6 UNLKFL     001BFE R   |   6 UNLOCK     001C1D R
  6 UNTIL      001544 R   |     UOFFSET =  00001E     |   6 UPDATCP    001B9C R
  6 UPDATLAS   001B73 R   |   6 UPDATPTR   00219F R   |   6 UPDATRUN   001B8B R
  6 UPDATVP    001BB3 R   |   6 UPL1       00064A R   |   6 UPLUS      000633 R
    UPP     =  000006     |   6 UPPER      0010F4 R   |   6 UPPER1     001117 R
  6 UPPER2     001120 R   |     URLAST  =  000022     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  000020 
    UTIB    =  000010     |     UTMP    =  00000A     |   6 UTYP1      0018E2 R
  6 UTYP2      0018F1 R   |   6 UTYPE      0018DD R   |     UVP     =  000018 
  6 UZERO      00002B R   |   6 VARIA      00181F R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000003     |   6 VPP        0006F7 R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
    WANT_DOU=  000001     |     WANT_FLO=  000001     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0015CA R   |   6 WITHI      00091E R   |   6 WORDD      0010DA R
  6 WORDS      001A02 R   |   6 WORS1      001A08 R   |   6 WORS2      001A24 R
  6 WR_BYTE    001CC8 R   |   6 WR_WORD    001CED R   |   6 WTABLE     0022F7 R
  6 WTAT       00231B R   |   6 WTINIT     002360 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
    XON     =  000011     |   6 XORR       00061E R   |     XTEMP   =  000024 
    YTEMP   =  000026     |   6 ZEQ1       002510 R   |   6 ZEQU1      0005EB R
  6 ZEQUAL     0005E1 R   |   6 ZERO       000B2F R   |   6 ZL1        0005D8 R
  6 ZLESS      0005CF R   |   6 app_spac   003280 R   |   6 baudrate   00037B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]

Symbol Table

  6 block_er   001DB3 R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001E13 R   |   6 copy_buf   001E32 R   |   6 copy_pro   001E32 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     002891 R   |   6 erase_fl   001DD5 R
  6 fmove_do   002188 R   |   6 main       000016 R   |   6 next_row   002145 R
  6 no_move    00218F R   |   6 nsign      0023AB R   |   6 nsign1     0023DC R
  6 parse_di   0023E3 R   |   6 parse_ex   002ECA R   |   6 pristine   001EB3 R
  6 proceed_   001DD8 R   |   6 reboot     000327 R   |   6 reset_ve   001F1A R
  6 row_eras   001D93 R   |   6 row_eras   001DEC R   |   6 row_eras   001E13 R
  6 set_opti   001E87 R   |   6 set_vect   001FBB R   |   6 uart_ini   000076 R
  6 write_ro   001E57 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3280   flags    0

