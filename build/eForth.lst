ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; to include float24.asm 
                                        ; library 
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200         .if NUCLEO
                                    201         bset PC_ODR,#LED2_BIT
                                    202         .else ;DISCOVERY 
                                    203         .if DISCOVERY
                                    204         bres PD_ODR,#LD1_BIT 
                                    205         .endif
                                    206         .endif
                                    207         .endm
                                    208 
                                    209         .macro _ledoff
                                    210         .if NUCLEO 
                                    211         bres PC_ODR,#LED2_BIT
                                    212         .else ;DISCOVERY 
                                    213         .if DISCOVERY
                                    214         bset PD_ODR,#LD1_BIT 
                                    215         .endif 
                                    216         .endif
                                    217         .endm
                                    218 
                                    219 ;**********************************************************
                                    220         .area DATA (ABS)
      000000                        221         .org RAMBASE 
                                    222 ;**********************************************************
                                    223 
                                    224 ;**********************************************************
                                    225         .area SSEG (ABS) ; STACK
      001700                        226         .org 0x1700
      001700                        227         .ds 256 
                                    228 ; space for DATSTK,TIB and STACK         
                                    229 ;**********************************************************
                                    230 
                                    231 ;**********************************************************
                                    232         .area HOME ; vectors table
                                    233 ;**********************************************************
      000000 82 00 00 16            234 	int main	        ; reset
      000004 82 00 00 00            235 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            236 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            237 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            238 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            239 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            240 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            241 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            242 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            243 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            244 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            245 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            246 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            247 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            248 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            249 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            250 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            251 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            252 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            253 	int NonHandledInterrupt	; irq17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000050 82 00 00 00            254 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            255 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            256 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            257 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            258 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            259 	int Timer4Handler	; irq23
      000068 82 00 00 00            260 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            261 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            262 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            263 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            264 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            265 	int NonHandledInterrupt	; irq29
                                    266 
                                    267 ;**********************************************************
                                    268         .area CODE
                                    269 ;**********************************************************
                                    270 
                                    271 ; non handled interrupt reset MCU
      000000                        272 NonHandledInterrupt:
      000000 A6 80            [ 1]  273         ld a, #0x80
      000002 C7 50 D1         [ 1]  274         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    275 	;iret
                                    276 
                                    277 ; used for milliseconds counter 
                                    278 ; MS is 16 bits counter 
      000005                        279 Timer4Handler:
      000005 72 5F 53 42      [ 1]  280 	clr TIM4_SR 
      000009 BE 30            [ 2]  281         ldw x,MS 
      00000B 5C               [ 1]  282         incw x 
      00000C BF 30            [ 2]  283         ldw MS,x
      00000E BE 32            [ 2]  284         ldw x,CNTDWN 
      000010 27 03            [ 1]  285         jreq 1$
      000012 5A               [ 2]  286         decw x 
      000013 BF 32            [ 2]  287         ldw CNTDWN,x 
      000015                        288 1$:         
      000015 80               [11]  289         iret 
                                    290 
                                    291 
                                    292 ;; Main entry points and COLD start data
      000016                        293 main:
                                    294 ; clear all RAM
      000016 AE 00 00         [ 2]  295 	ldw X,#RAMBASE
      000019                        296 clear_ram0:
      000019 7F               [ 1]  297 	clr (X)
      00001A 5C               [ 1]  298 	incw X
      00001B A3 17 FF         [ 2]  299 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  300 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  301         ldw x,#RPP
      000023 94               [ 1]  302         ldw sp,x
                                    303 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  304         inc SEEDX+1 
      000026 3C 3B            [ 1]  305         inc SEEDY+1          
      000028 CC 00 49         [ 2]  306 	jp ORIG
                                    307 
                                    308 ; COLD initialize these variables.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B                        309 UZERO:
      00002B 00 0A                  310         .word      BASEE   ;BASE
      00002D 00 00                  311         .word      0       ; floating point state 
      00002F 00 00                  312         .word      0       ;tmp
      000031 00 00                  313         .word      0       ;>IN
      000033 00 00                  314         .word      0       ;#TIB
      000035 17 00                  315         .word      TIBB    ;TIB
      000037 15 02                  316         .word      INTER   ;'EVAL
      000039 00 00                  317         .word      0       ;HLD
      00003B 2C E4                  318         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  319         .word      VAR_BASE   ;variables free space pointer 
      00003F 2D 00                  320         .word      app_space ; FLASH free space pointer 
      000041 2C E4                  321         .word      LASTN   ;LAST
      000043 00 00                  322         .word      0        ; OFFSET 
      000045 00 00                  323         .word      0       ; TFLASH
                                    324 ;       .word      0       ; URLAST   
      000047 00 00                  325 UEND:   .word      0
                                    326 
      000049                        327 ORIG:   
                                    328 ; initialize SP
      000049 AE 17 FF         [ 2]  329         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  330         LDW     SP,X
      00004D BF 2E            [ 2]  331         LDW     RP0,X
      00004F AE 16 80         [ 2]  332         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  333         LDW     SP0,X
                           000001   334 .if NUCLEO        
                                    335 ; initialize PC_5 as output to control LED2
                                    336 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  337         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  338         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  339         bset PC_DDR,#LED2_BIT
                                    340 .endif 
                           000000   341 .if DISCOVERY
                                    342         bset PD_CR1,#LD1_BIT
                                    343         bset PD_CR2,#LD1_BIT
                                    344         bset PD_DDR,#LD1_BIT 
                                    345 .endif
      000060                        346         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    347 ; initialize clock to HSI
                                    348 ; no divisor 16Mhz 
                                    349 ; Added by Picatout 
      000064                        350 clock_init:
      000064 72 5F 50 C6      [ 1]  351         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  352 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   353 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  354 	ld a,#CLK_SWR_HSI
                           000000   355 .else ; DISCOVERY as 16Mhz crystal
                                    356 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    357 .endif 
      00006E C7 50 C4         [ 1]  358 	ld CLK_SWR,a
      000071 C1 50 C3         [ 1]  359 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  360 	jrne 1$
                                    361         
                                    362 ; initialize UART, 115200 8N1
      000076                        363 uart_init:
                           000001   364 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  365 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    366 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  367 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  368 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  369 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    370 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   371 .else ; DISCOVERY use UART2 
                                    372 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    373 	; configure tx pin
                                    374 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    375 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    376 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    377 .endif
                                    378 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  379 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  380 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  381 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    382 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  383 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  384 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  385 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  386 	bset TIM4_IER,#TIM4_IER_UIE 
                                    387 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  388         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  389         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  390         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  391         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  392         rim
      0000AD CC 1C C6         [ 2]  393         jp  COLD   ;default=MN1
                                    394 
                                    395 
                           000000   396         LINK = 0  ; used by _HEADER macro 
                                    397 
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    399 ;; place MCU in sleep mode with
                                    400 ;; halt opcode 
                                    401 ;; BYE ( -- )
                                    402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        403         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  404         halt 
      0000B7 81               [ 4]  405         ret 
                                    406 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    407 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    408 ; Enable interrupts 
                                    409 ; EI ( -- )
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B8                        411         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  412         rim 
      0000BE 81               [ 4]  413         ret 
                                    414 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    415 ; Disable interrupts
                                    416 ; DI ( -- )
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        418         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  419         sim 
      0000C5 81               [ 4]  420         ret 
                                    421 
                                    422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    423 ; set interrupt priority level 
                                    424 ; SET-ISP ( n1 n2 -- )
                                    425 ; n1 level {1..3}
                                    426 ; n2 vector {0..29}
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        428         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  429         ldw y,x 
      0000D2 90 FE            [ 2]  430         ldw y,(y)
      0000D4 A6 04            [ 1]  431         ld a,#4 ; 4 slot per register 
                                    432 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  433         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  434         and a,#3 
      0000DA 48               [ 1]  435         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  436         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  437         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  438         clrw y 
      0000E2 90 97            [ 1]  439         ld yl,a 
      0000E4 1D 00 02         [ 2]  440         subw x,#CELLL 
      0000E7 FF               [ 2]  441         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  442         ldw y,x 
      0000EA 90 EE 02         [ 2]  443         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  444         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  445         subw x,#CELLL 
      0000F2 FF               [ 2]  446         ldw (x),y ; ( level reg lshift rval -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000F3 CD 06 42         [ 4]  447         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 70         [ 4]  448         call DOLIT 
      0000F9 00 03                  449         .word 3
      0000FB CD 06 2A         [ 4]  450         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B C1         [ 4]  451         call LSHIFT ; creat slot mask 
      000101 CD 08 76         [ 4]  452         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 77         [ 4]  453         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E3         [ 4]  454         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DE         [ 4]  455         call ROT  ; ( reg lshift level )
      00010D CD 06 2A         [ 4]  456         call SWAPP ; ( reg level lshift )
      000110 CD 0B C1         [ 4]  457         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 35         [ 4]  458         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8B         [ 4]  459         call ORR   ; ( reg updated_rval )
      000119 CD 06 2A         [ 4]  460         call SWAPP 
      00011C CC 04 F1         [ 2]  461         jp CSTOR
                                    462 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    464 ; sélectionne l'application 
                                    465 ; qui démarre automatique lors 
                                    466 ; d'un COLD start 
                                    467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        468         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 12 C7         [ 4]  469         call TOKEN 
      00012C CD 06 1A         [ 4]  470         call DUPP 
      00012F CD 04 99         [ 4]  471         call QBRAN 
      000132 02 0F                  472         .word FORGET2
      000134 CD 13 C4         [ 4]  473         call NAMEQ
      000137 CD 07 CD         [ 4]  474         call QDUP 
      00013A CD 04 99         [ 4]  475         call QBRAN 
      00013D 02 0F                  476         .word FORGET2
      00013F                        477         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  478         subw x,#2*CELLL 
      000145 90 5F            [ 1]  479         clrw y 
      000147 FF               [ 2]  480         ldw (x),y 
      000148 90 AE 40 02      [ 2]  481         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  482         ldw (2,x),y 
      00014E CC 1F C2         [ 2]  483         jp EESTORE 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    486 ;; Reset dictionary pointer before 
                                    487 ;; forgotten word. RAM space and 
                                    488 ;; interrupt vector defined after 
                                    489 ;; must be resetted also.
                                    490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        491         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00015A                          5         FORGET:
      00015A CD 12 C7         [ 4]  492         call TOKEN
      00015D CD 06 1A         [ 4]  493         call DUPP 
      000160 CD 04 99         [ 4]  494         call QBRAN 
      000163 02 0F                  495         .word FORGET2
      000165 CD 13 C4         [ 4]  496         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CD         [ 4]  497         call QDUP 
      00016B CD 04 99         [ 4]  498         call QBRAN 
      00016E 02 0F                  499         .word FORGET2
                                    500 ; only forget users words 
      000170 CD 06 1A         [ 4]  501         call DUPP ; ( ca na na )
      000173 CD 04 70         [ 4]  502         call DOLIT 
      000176 2D 00                  503         .word app_space 
      000178 CD 06 2A         [ 4]  504         call SWAPP 
      00017B CD 09 11         [ 4]  505         call  ULESS 
      00017E CD 04 99         [ 4]  506         call QBRAN 
      000181 01 D1                  507         .word FORGET6 
                                    508 ; ( ca na -- )        
                                    509 ;reset ivec with address >= ca
      000183 CD 06 2A         [ 4]  510         call SWAPP ; ( na ca -- ) 
      000186 CD 21 C5         [ 4]  511         call CHKIVEC ; ( na -- ) 
                                    512 ; start at LAST and link back to na 
                                    513 ; if variable found reset VP at that point.
      000189                        514 FORGET1:
      000189 CD 07 8F         [ 4]  515         call LAST 
      00018C CD 04 E4         [ 4]  516         call AT 
      00018F CD 06 1A         [ 4]  517         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  518         call FREEVAR ; ( -- na last )
      000195 CD 06 1A         [ 4]  519         call DUPP 
      000198 CD 04 70         [ 4]  520         call DOLIT 
      00019B 00 02                  521         .word 2 
      00019D CD 08 D3         [ 4]  522         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E4         [ 4]  523         call AT 
      0001A3 CD 06 1A         [ 4]  524         call DUPP ; ( -- na last a a )
      0001A6 CD 07 63         [ 4]  525         call CNTXT 
      0001A9 CD 04 D2         [ 4]  526         call STORE
      0001AC CD 07 8F         [ 4]  527         call LAST  
      0001AF CD 04 D2         [ 4]  528         call STORE ; ( --  na last )
      0001B2 CD 06 42         [ 4]  529         call OVER 
      0001B5 CD 08 FB         [ 4]  530         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 99         [ 4]  531         call QBRAN 
      0001BB 01 89                  532         .word FORGET1 
                                    533 ; ( na -- )
      0001BD CD 04 70         [ 4]  534         call DOLIT 
      0001C0 00 02                  535         .word 2 
      0001C2 CD 08 D3         [ 4]  536         call SUBB 
      0001C5 CD 07 7F         [ 4]  537         call CPP 
      0001C8 CD 04 D2         [ 4]  538         call STORE  
      0001CB CD 1D F5         [ 4]  539         call UPDATCP 
      0001CE CC 1D CC         [ 2]  540         jp UPDATLAST 
      0001D1                        541 FORGET6: ; tried to forget a RAM or system word 
                                    542 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  543         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  544         ldw y,SP0 
      0001D7 FF               [ 2]  545         ldw (x),y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001D8 CD 09 11         [ 4]  546         call ULESS
      0001DB CD 04 99         [ 4]  547         call QBRAN 
      0001DE 02 01                  548         .word PROTECTED 
      0001E0 CD 14 D0         [ 4]  549         call ABORQ 
      0001E3 1D                     550         .byte 29
      0001E4 20 46 6F 72 20 52 41   551         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        552 PROTECTED:
      000201 CD 14 D0         [ 4]  553         call ABORQ
      000204 0A                     554         .byte 10
      000205 20 50 72 6F 74 65 63   555         .ascii " Protected"
             74 65 64
      00020F                        556 FORGET2: ; no name or not found in dictionary 
      00020F CD 14 D0         [ 4]  557         call ABORQ
      000212 05                     558         .byte 5
      000213 20 77 68 61 74         559         .ascii " what"
      000218                        560 FORGET4:
      000218 CC 06 10         [ 2]  561         jp DROP 
                                    562 
                                    563 
                                    564 ;;;;;;;;;;;;;;;;;;;;;
                                    565 ; if na is variable 
                                    566 ; free variable data  
                                    567 ; FREEVAR ( na -- )
                                    568 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        569         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 1A         [ 4]  570         call DUPP ; ( na na -- )
      000228 CD 05 02         [ 4]  571         CALL CAT  ; ( na c -- )
      00022B CD 0B A3         [ 4]  572         call ONEP ;
      00022E CD 08 3D         [ 4]  573         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B A3         [ 4]  574         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 1A         [ 4]  575         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E4         [ 4]  576         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 70         [ 4]  577         call DOLIT 
      00023D 06 D0                  578         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FB         [ 4]  579         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 99         [ 4]  580         call QBRAN 
      000245 02 5B                  581         .word FREEVAR4 
      000247 CD 04 70         [ 4]  582         call DOLIT 
      00024A 00 02                  583         .word 2 
      00024C CD 08 3D         [ 4]  584         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E4         [ 4]  585         call AT 
      000252 CD 07 71         [ 4]  586         call VPP   
      000255 CD 04 D2         [ 4]  587         call STORE 
      000258 CC 1E 0C         [ 2]  588         jp UPDATVP 
      00025B                        589 FREEVAR4: ; not variable
      00025B                        590         _DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00025E 81               [ 4]  591         RET 
                                    592 
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    594 ;    SEED ( n -- )
                                    595 ; Initialize PRNG seed with n 
                                    596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025F                        597         _HEADER SEED,4,"SEED"
      00025F 02 1D                    1         .word LINK 
                           000261     2         LINK=.
      000261 04                       3         .byte 4  
      000262 53 45 45 44              4         .ascii "SEED"
      000266                          5         SEED:
      000266 90 93            [ 1]  598         ldw y,x 
      000268 1C 00 02         [ 2]  599         addw x,#CELLL
      00026B 90 FE            [ 2]  600         ldw y,(y)
      00026D 90 9E            [ 1]  601         ld a,yh 
      00026F B7 38            [ 1]  602         ld SEEDX,a 
      000271 90 9F            [ 1]  603         ld a,yl 
      000273 B7 3A            [ 1]  604         ld SEEDY,a 
      000275 81               [ 4]  605         ret 
                                    606 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    608 ;    RANDOM ( u1 -- u2 )
                                    609 ; Pseudo random number betwen 0 and u1-1
                                    610 ;  XOR32 algorithm 
                                    611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000276                        612         _HEADER RANDOM,6,"RANDOM"
      000276 02 61                    1         .word LINK 
                           000278     2         LINK=.
      000278 06                       3         .byte 6  
      000279 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027F                          5         RANDOM:
                                    613 ;local variable 
                           000001   614         SPSAVE=1
                           000002   615         VSIZE=2 
      00027F 52 02            [ 2]  616         sub sp,#VSIZE
      000281 1F 01            [ 2]  617         ldw (SPSAVE,sp),x  
                                    618 ; XTEMP=(SEEDX<<5)^SEEDX 
      000283 90 93            [ 1]  619         ldw y,x 
      000285 90 FE            [ 2]  620         ldw y,(y)
      000287 90 BF 26         [ 2]  621         ldw YTEMP,y 
      00028A BE 38            [ 2]  622 	ldw x,SEEDX 
      00028C 58               [ 2]  623 	sllw x 
      00028D 58               [ 2]  624 	sllw x 
      00028E 58               [ 2]  625 	sllw x 
      00028F 58               [ 2]  626 	sllw x 
      000290 58               [ 2]  627 	sllw x 
      000291 9E               [ 1]  628 	ld a,xh 
      000292 B8 38            [ 1]  629 	xor a,SEEDX 
      000294 B7 24            [ 1]  630 	ld XTEMP,a 
      000296 9F               [ 1]  631 	ld a,xl 
      000297 B8 39            [ 1]  632 	xor a,SEEDX+1 
      000299 B7 25            [ 1]  633 	ld XTEMP+1,a 
                                    634 ; SEEDX=SEEDY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00029B BE 3A            [ 2]  635 	ldw x,SEEDY 
      00029D BF 38            [ 2]  636 	ldw SEEDX,x  
                                    637 ; SEEDY=SEEDY^(SEEDY>>1)
      00029F 54               [ 2]  638 	srlw x 
      0002A0 9E               [ 1]  639 	ld a,xh 
      0002A1 B8 3A            [ 1]  640 	xor a,SEEDY 
      0002A3 B7 3A            [ 1]  641 	ld SEEDY,a  
      0002A5 9F               [ 1]  642 	ld a,xl 
      0002A6 B8 3B            [ 1]  643 	xor a,SEEDY+1 
      0002A8 B7 3B            [ 1]  644 	ld SEEDY+1,a 
                                    645 ; XTEMP>>3 
      0002AA BE 24            [ 2]  646 	ldw x,XTEMP 
      0002AC 54               [ 2]  647 	srlw x 
      0002AD 54               [ 2]  648 	srlw x 
      0002AE 54               [ 2]  649 	srlw x 
                                    650 ; x=XTEMP^x 
      0002AF 9E               [ 1]  651 	ld a,xh 
      0002B0 B8 24            [ 1]  652 	xor a,XTEMP 
      0002B2 95               [ 1]  653 	ld xh,a 
      0002B3 9F               [ 1]  654 	ld a,xl 
      0002B4 B8 25            [ 1]  655 	xor a,XTEMP+1  
      0002B6 97               [ 1]  656 	ld xl,a 
                                    657 ; SEEDY=x^SEEDY 
      0002B7 B8 3B            [ 1]  658 	xor a,SEEDY+1
      0002B9 97               [ 1]  659 	ld xl,a 
      0002BA 9E               [ 1]  660 	ld a,xh 
      0002BB B8 3A            [ 1]  661 	xor a,SEEDY
      0002BD 95               [ 1]  662 	ld xh,a 
      0002BE BF 3A            [ 2]  663 	ldw SEEDY,x 
                                    664 ; return SEEDY modulo YTEMP  
      0002C0 90 BE 26         [ 2]  665 	ldw y,YTEMP  
      0002C3 65               [ 2]  666 	divw x,y 
      0002C4 1E 01            [ 2]  667 	ldw x,(SPSAVE,sp)
      0002C6 FF               [ 2]  668         ldw (x),y 
      0002C7 5B 02            [ 2]  669         addw sp,#VSIZE 
      0002C9 81               [ 4]  670 	ret 
                                    671 
                                    672 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    674 ;; get millisecond counter 
                                    675 ;; msec ( -- u )
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002CA                        677         _HEADER MSEC,4,"MSEC"
      0002CA 02 78                    1         .word LINK 
                           0002CC     2         LINK=.
      0002CC 04                       3         .byte 4  
      0002CD 4D 53 45 43              4         .ascii "MSEC"
      0002D1                          5         MSEC:
      0002D1 1D 00 02         [ 2]  678         subw x,#CELLL 
      0002D4 90 BE 30         [ 2]  679         ldw y,MS 
      0002D7 FF               [ 2]  680         ldw (x),y 
      0002D8 81               [ 4]  681         ret 
                                    682 
                                    683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    684 ; suspend execution for u msec 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    685 ;  pause ( u -- )
                                    686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D9                        687         _HEADER PAUSE,5,"PAUSE"
      0002D9 02 CC                    1         .word LINK 
                           0002DB     2         LINK=.
      0002DB 05                       3         .byte 5  
      0002DC 50 41 55 53 45           4         .ascii "PAUSE"
      0002E1                          5         PAUSE:
      0002E1 90 93            [ 1]  688         ldw y,x
      0002E3 90 FE            [ 2]  689         ldw y,(y)
      0002E5 72 B9 00 30      [ 2]  690         addw y,MS 
      0002E9 8F               [10]  691 1$:     wfi  
      0002EA 90 B3 30         [ 2]  692         cpw y,MS  
      0002ED 26 FA            [ 1]  693         jrne 1$        
      0002EF 1C 00 02         [ 2]  694         addw x,#CELLL 
      0002F2 81               [ 4]  695         ret 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ; initialize count down timer 
                                    699 ;  TIMER ( u -- )  milliseconds
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F3                        701         _HEADER TIMER,5,"TIMER"
      0002F3 02 DB                    1         .word LINK 
                           0002F5     2         LINK=.
      0002F5 05                       3         .byte 5  
      0002F6 54 49 4D 45 52           4         .ascii "TIMER"
      0002FB                          5         TIMER:
      0002FB 90 93            [ 1]  702         ldw y,x
      0002FD 90 FE            [ 2]  703         ldw y,(y) 
      0002FF 90 BF 32         [ 2]  704         ldw CNTDWN,y
      000302 1C 00 02         [ 2]  705         addw x,#CELLL 
      000305 81               [ 4]  706         ret 
                                    707 
                                    708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    709 ; check for TIMER exiparition 
                                    710 ;  TIMEOUT? ( -- 0|-1 )
                                    711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000306                        712         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000306 02 F5                    1         .word LINK 
                           000308     2         LINK=.
      000308 08                       3         .byte 8  
      000309 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000311                          5         TIMEOUTQ:
      000311 4F               [ 1]  713         clr a
      000312 1D 00 02         [ 2]  714         subw x,#CELLL 
      000315 90 BE 32         [ 2]  715         ldw y,CNTDWN 
      000318 26 01            [ 1]  716         jrne 1$ 
      00031A 43               [ 1]  717         cpl a 
      00031B E7 01            [ 1]  718 1$:     ld (1,x),a 
      00031D F7               [ 1]  719         ld (x),a 
      00031E 81               [ 4]  720         ret         
                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;
                                    723 ; reboot MCU 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    724 ; REBOOT ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;
      00031F                        726         _HEADER reboot,6,"REBOOT"
      00031F 03 08                    1         .word LINK 
                           000321     2         LINK=.
      000321 06                       3         .byte 6  
      000322 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000328                          5         reboot:
      000328 CC 00 00         [ 2]  727         jp NonHandledInterrupt
                                    728 
                                    729 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    730 ; compile to flash memory 
                                    731 ; TO-FLASH ( -- )
                                    732 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032B                        733         _HEADER TOFLASH,8,"TO-FLASH"
      00032B 03 21                    1         .word LINK 
                           00032D     2         LINK=.
      00032D 08                       3         .byte 8  
      00032E 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000336                          5         TOFLASH:
      000336 CD 07 A2         [ 4]  734         call RAMLAST 
      000339 CD 04 E4         [ 4]  735         call AT 
      00033C CD 07 CD         [ 4]  736         call QDUP 
      00033F CD 04 99         [ 4]  737         call QBRAN
      000342 03 65                  738         .word 1$
      000344 CD 14 D0         [ 4]  739         call ABORQ 
      000347 1D                     740         .byte 29
      000348 20 4E 6F 74 20 77 68   741         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000365 90 AE FF FF      [ 2]  742 1$:     ldw y,#-1 
      000369 90 BF 20         [ 2]  743         ldw UTFLASH,y
      00036C 81               [ 4]  744         ret 
                                    745 
                                    746 ;;;;;;;;;;;;;;;;;;;;;;
                                    747 ; compile to RAM 
                                    748 ; TO-RAM ( -- )
                                    749 ;;;;;;;;;;;;;;;;;;;;;;
      00036D                        750         _HEADER TORAM,6,"TO-RAM"
      00036D 03 2D                    1         .word LINK 
                           00036F     2         LINK=.
      00036F 06                       3         .byte 6  
      000370 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000376                          5         TORAM:
      000376 90 5F            [ 1]  751         clrw y 
      000378 90 BF 20         [ 2]  752         ldw UTFLASH,y 
      00037B 81               [ 4]  753         ret 
                                    754 
                                    755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    756 ;; BAUD RATE constants table
                                    757 ; values to put in BRR1 & BRR2 
                                    758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00037C                        759 baudrate: 
      00037C A0 1B                  760 	.byte 0xa0,0x1b ; 2400
      00037E D0 05                  761 	.byte 0xd0,0x5  ; 4800 
      000380 68 03                  762 	.byte 0x68,0x3  ; 9600
      000382 34 01                  763 	.byte 0x34,0x1  ; 19200
      000384 11 06                  764 	.byte 0x11,0x6  ; 57600
      000386 08 0B                  765 	.byte 0x8,0xb   ; 115200
                                    766 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    768 ; BAUD RATE CONSTANTS names 
                                    769 ; 2400 baud  ( -- n )
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000388                        771         _HEADER B2K4,4,"B2K4"
      000388 03 6F                    1         .word LINK 
                           00038A     2         LINK=.
      00038A 04                       3         .byte 4  
      00038B 42 32 4B 34              4         .ascii "B2K4"
      00038F                          5         B2K4:
      00038F 1D 00 02         [ 2]  772 	subw x,#CELLL 
      000392 90 5F            [ 1]  773         clrw y
      000394 FF               [ 2]  774         ldw (x),y
      000395 81               [ 4]  775 	ret
                                    776 
                                    777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    778 ; 4800 baud	
                                    779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000396                        780         _HEADER B4K8,4,"B4K8"
      000396 03 8A                    1         .word LINK 
                           000398     2         LINK=.
      000398 04                       3         .byte 4  
      000399 42 34 4B 38              4         .ascii "B4K8"
      00039D                          5         B4K8:
      00039D 1D 00 02         [ 2]  781         subw x,#CELLL 
      0003A0 90 AE 00 02      [ 2]  782         ldw y,#2 
      0003A4 FF               [ 2]  783         ldw (x),y
      0003A5 81               [ 4]  784         ret 
                                    785 
                                    786 ;;;;;;;;;;;;;;;;;;;;
                                    787 ; 9600 baud
                                    788 ;;;;;;;;;;;;;;;;;;;;
      0003A6                        789         _HEADER B9K6,4,"B9K6"
      0003A6 03 98                    1         .word LINK 
                           0003A8     2         LINK=.
      0003A8 04                       3         .byte 4  
      0003A9 42 39 4B 36              4         .ascii "B9K6"
      0003AD                          5         B9K6:
      0003AD 1D 00 02         [ 2]  790         subw x,#CELLL 
      0003B0 90 AE 00 04      [ 2]  791         ldw y,#4 
      0003B4 FF               [ 2]  792         ldw (x),y 
      0003B5 81               [ 4]  793         ret 
                                    794 ;;;;;;;;;;;;;;
                                    795 ; 19200 baud
                                    796 ;;;;;;;;;;;;;;
      0003B6                        797         _HEADER B19K2,5,"B19K2"
      0003B6 03 A8                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           0003B8     2         LINK=.
      0003B8 05                       3         .byte 5  
      0003B9 42 31 39 4B 32           4         .ascii "B19K2"
      0003BE                          5         B19K2:
      0003BE 1D 00 02         [ 2]  798         subw x,#CELLL
      0003C1 90 AE 00 06      [ 2]  799         ldw y,#6 
      0003C5 FF               [ 2]  800         ldw (x),y 
      0003C6 81               [ 4]  801         ret 
                                    802 ;;;;;;;;;;;;;;
                                    803 ; 57600 baud  
                                    804 ;;;;;;;;;;;;;;
      0003C7                        805         _HEADER B57K6,5,"B57K6"
      0003C7 03 B8                    1         .word LINK 
                           0003C9     2         LINK=.
      0003C9 05                       3         .byte 5  
      0003CA 42 35 37 4B 36           4         .ascii "B57K6"
      0003CF                          5         B57K6:
      0003CF 1D 00 02         [ 2]  806         subw x,#CELLL 
      0003D2 90 AE 00 08      [ 2]  807         ldw y,#8 
      0003D6 FF               [ 2]  808         ldw (x),y 
      0003D7 81               [ 4]  809         ret 
                                    810 ;;;;;;;;;;;;;;
                                    811 ; 115200 baud 
                                    812 ;;;;;;;;;;;;;;
      0003D8                        813         _HEADER B115K2,6,"B115K2"
      0003D8 03 C9                    1         .word LINK 
                           0003DA     2         LINK=.
      0003DA 06                       3         .byte 6  
      0003DB 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E1                          5         B115K2:
      0003E1 1D 00 02         [ 2]  814 	subw x,#CELLL 
      0003E4 90 AE 00 0A      [ 2]  815         ldw y,#10 
      0003E8 FF               [ 2]  816         ldw (x),y 
      0003E9 81               [ 4]  817         ret 
                                    818 
                                    819 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    820 ;; set UART2 BAUD rate
                                    821 ;	BAUD ( u -- )
                                    822 ;;;;;;;;;;;;;;;;;;;;;;;
      0003EA                        823         _HEADER BAUD,4,"BAUD"
      0003EA 03 DA                    1         .word LINK 
                           0003EC     2         LINK=.
      0003EC 04                       3         .byte 4  
      0003ED 42 41 55 44              4         .ascii "BAUD"
      0003F1                          5         BAUD:
      0003F1 1D 00 02         [ 2]  824 	subw x,#CELLL
      0003F4 90 AE 03 7C      [ 2]  825         ldw y,#baudrate 
      0003F8 FF               [ 2]  826         ldw (x),y 
      0003F9 CD 08 3D         [ 4]  827         call PLUS
      0003FC 90 93            [ 1]  828         ldw y,x  
      0003FE 90 FE            [ 2]  829         ldw y,(y)
      000400 90 F6            [ 1]  830         ld a,(y)
      000402 88               [ 1]  831         push a 
      000403 90 5C            [ 1]  832         incw y 
      000405 90 F6            [ 1]  833         ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000407 C7 52 33         [ 1]  834         ld UART_BRR2,a 
      00040A 84               [ 1]  835         pop a
      00040B C7 52 32         [ 1]  836         ld UART_BRR1,a 
      00040E 1C 00 02         [ 2]  837         addw x,#CELLL 
      000411 81               [ 4]  838         ret 
                                    839 
                                    840 ;; Device dependent I/O
                                    841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    842 ;       ?RX     ( -- c T | F )
                                    843 ;         Return input byte and true, or false.
                                    844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000412                        845         _HEADER QKEY,4,"?KEY"
      000412 03 EC                    1         .word LINK 
                           000414     2         LINK=.
      000414 04                       3         .byte 4  
      000415 3F 4B 45 59              4         .ascii "?KEY"
      000419                          5         QKEY:
      000419 90 5F            [ 1]  846         CLRW Y 
      00041B 72 0B 52 30 0B   [ 2]  847         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000420 C6 52 31         [ 1]  848         LD    A,UART_DR   ;get char in A
      000423 1D 00 02         [ 2]  849 	SUBW	X,#2
      000426 E7 01            [ 1]  850         LD     (1,X),A
      000428 7F               [ 1]  851 	CLR	(X)
      000429 90 53            [ 2]  852         CPLW     Y
      00042B                        853 INCH:
      00042B 1D 00 02         [ 2]  854 		SUBW	X,#2
      00042E FF               [ 2]  855         LDW     (X),Y
      00042F 81               [ 4]  856         RET
                                    857 
                                    858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    859 ;       TX!     ( c -- )
                                    860 ;       Send character c to  output device.
                                    861 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000430                        862         _HEADER EMIT,4,"EMIT"
      000430 04 14                    1         .word LINK 
                           000432     2         LINK=.
      000432 04                       3         .byte 4  
      000433 45 4D 49 54              4         .ascii "EMIT"
      000437                          5         EMIT:
      000437 E6 01            [ 1]  863         LD     A,(1,X)
      000439 1C 00 02         [ 2]  864 	ADDW	X,#2
      00043C 72 0F 52 30 FB   [ 2]  865 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000441 C7 52 31         [ 1]  866         LD    UART_DR,A   ;send A
      000444 81               [ 4]  867         RET
                                    868 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    870 ;       FC-XON  ( -- )
                                    871 ;       send XON character 
                                    872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000445                        873         _HEADER FC_XON,6,"FC-XON"
      000445 04 32                    1         .word LINK 
                           000447     2         LINK=.
      000447 06                       3         .byte 6  
      000448 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044E                          5         FC_XON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00044E 1D 00 02         [ 2]  874         subw x,#CELLL 
      000451 7F               [ 1]  875         clr (x)
      000452 A6 11            [ 1]  876         ld a,#XON 
      000454 E7 01            [ 1]  877         ld (1,x),a 
      000456 CD 04 37         [ 4]  878         call EMIT 
      000459 81               [ 4]  879         ret 
                                    880 
                                    881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    882 ;       FC-XOFF ( -- )
                                    883 ;       Send XOFF character 
                                    884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00045A                        885         _HEADER FC_XOFF,7,"FC-XOFF"
      00045A 04 47                    1         .word LINK 
                           00045C     2         LINK=.
      00045C 07                       3         .byte 7  
      00045D 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000464                          5         FC_XOFF:
      000464 1D 00 02         [ 2]  886         subw x,#CELLL 
      000467 7F               [ 1]  887         clr (x)
      000468 A6 13            [ 1]  888         ld a,#XOFF 
      00046A E7 01            [ 1]  889         ld (1,x),a 
      00046C CD 04 37         [ 4]  890         call EMIT 
      00046F 81               [ 4]  891         ret
                                    892 
                                    893 ;; The kernel
                                    894 
                                    895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    896 ;       doLIT   ( -- w )
                                    897 ;       Push an inline literal.
                                    898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000470                        899 DOLIT:
      000470 1D 00 02         [ 2]  900 	SUBW X,#2
      000473 16 01            [ 2]  901         ldw y,(1,sp)
      000475 90 FE            [ 2]  902         ldw y,(y)
      000477 FF               [ 2]  903         ldw (x),y
      000478 90 85            [ 2]  904         popw y 
      00047A 90 EC 02         [ 2]  905         jp (2,y)
                                    906 
                                    907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    908 ;       NEXT    ( -- )
                                    909 ;       Code for  single index loop.
                                    910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047D                        911         _HEADER DONXT,COMPO+4,"NEXT"
      00047D 04 5C                    1         .word LINK 
                           00047F     2         LINK=.
      00047F 44                       3         .byte COMPO+4  
      000480 4E 45 58 54              4         .ascii "NEXT"
      000484                          5         DONXT:
      000484 16 03            [ 2]  912 	LDW Y,(3,SP)
      000486 90 5A            [ 2]  913 	DECW Y
      000488 2A 07            [ 1]  914 	JRPL NEX1 ; jump if N=0
      00048A 90 85            [ 2]  915 	POPW Y
      00048C 5B 02            [ 2]  916         addw sp,#2
      00048E 90 EC 02         [ 2]  917         JP (2,Y)
      000491                        918 NEX1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000491 17 03            [ 2]  919         LDW (3,SP),Y
      000493 90 85            [ 2]  920         POPW Y
      000495 90 FE            [ 2]  921 	LDW Y,(Y)
      000497 90 FC            [ 2]  922 	JP (Y)
                                    923 
                                    924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    925 ;       ?branch ( f -- )
                                    926 ;       Branch if flag is zero.
                                    927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    928 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000499                        929 QBRAN:	
      000499 90 93            [ 1]  930         LDW Y,X
      00049B 1C 00 02         [ 2]  931 	ADDW X,#2
      00049E 90 FE            [ 2]  932 	LDW Y,(Y)
      0004A0 27 13            [ 1]  933         JREQ     BRAN
      0004A2 90 85            [ 2]  934 	POPW Y
      0004A4 90 EC 02         [ 2]  935 	JP (2,Y)
                                    936 
                                    937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    938 ;  TBRANCH ( f -- )
                                    939 ;  branch if f==TRUE 
                                    940 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    941 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A7                        942 TBRAN: 
      0004A7 90 93            [ 1]  943         LDW Y,X 
      0004A9 1C 00 02         [ 2]  944         ADDW X,#2 
      0004AC 90 FE            [ 2]  945         LDW Y,(Y)
      0004AE 26 05            [ 1]  946         JRNE BRAN 
      0004B0 90 85            [ 2]  947         POPW Y 
      0004B2 90 EC 02         [ 2]  948         JP (2,Y)
                                    949 
                                    950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    951 ;       branch  ( -- )
                                    952 ;       Branch to an inline address.
                                    953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    954 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B5                        955 BRAN:
      0004B5 90 85            [ 2]  956         POPW Y
      0004B7 90 FE            [ 2]  957 	LDW Y,(Y)
      0004B9 90 FC            [ 2]  958         JP  (Y)
                                    959 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    961 ;       EXECUTE ( ca -- )
                                    962 ;       Execute  word at ca.
                                    963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BB                        964         _HEADER EXECU,7,"EXECUTE"
      0004BB 04 7F                    1         .word LINK 
                           0004BD     2         LINK=.
      0004BD 07                       3         .byte 7  
      0004BE 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C5                          5         EXECU:
      0004C5 90 93            [ 1]  965         LDW Y,X
      0004C7 1C 00 02         [ 2]  966 	ADDW X,#CELLL 
      0004CA 90 FE            [ 2]  967 	LDW  Y,(Y)
      0004CC 90 FC            [ 2]  968         JP   (Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    969 
                           000001   970 OPTIMIZE = 1
                           000001   971 .if OPTIMIZE 
                                    972 ; remplacement de CALL EXIT par 
                                    973 ; le opcode de RET.
                                    974 ; Voir modification au code de ";"
                           000000   975 .else 
                                    976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    977 ;       EXIT    ( -- )
                                    978 ;       Terminate a colon definition.
                                    979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    980 ;       _HEADER EXIT,4,"EXIT"
                                    981 EXIT:
                                    982         POPW Y
                                    983         RET
                                    984 .endif 
                                    985 
                                    986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    987 ;       !       ( w a -- )
                                    988 ;       Pop  data stack to memory.
                                    989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CE                        990         _HEADER STORE,1,"!"
      0004CE 04 BD                    1         .word LINK 
                           0004D0     2         LINK=.
      0004D0 01                       3         .byte 1  
      0004D1 21                       4         .ascii "!"
      0004D2                          5         STORE:
      0004D2 90 93            [ 1]  991         LDW Y,X
      0004D4 90 FE            [ 2]  992         LDW Y,(Y)    ;Y=a
      0004D6 89               [ 2]  993         PUSHW X
      0004D7 EE 02            [ 2]  994         LDW X,(2,X) ; x=w 
      0004D9 90 FF            [ 2]  995         LDW (Y),X 
      0004DB 85               [ 2]  996         POPW X  
      0004DC                        997         _DDROP 
      0004DC 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0004DF 81               [ 4]  998         RET     
                                    999 
                                   1000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1001 ;       @       ( a -- w )
                                   1002 ;       Push memory location to stack.
                                   1003 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004E0                       1004         _HEADER AT,1,"@"
      0004E0 04 D0                    1         .word LINK 
                           0004E2     2         LINK=.
      0004E2 01                       3         .byte 1  
      0004E3 40                       4         .ascii "@"
      0004E4                          5         AT:
      0004E4 90 93            [ 1] 1005         LDW Y,X     ;Y = a
      0004E6 90 FE            [ 2] 1006         LDW Y,(Y)   ; address 
      0004E8 90 FE            [ 2] 1007         LDW Y,(Y)   ; value 
      0004EA FF               [ 2] 1008         LDW (X),Y ;w = @Y
      0004EB 81               [ 4] 1009         RET     
                                   1010 
                                   1011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1012 ;       C!      ( c b -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1013 ;       Pop  data stack to byte memory.
                                   1014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EC                       1015         _HEADER CSTOR,2,"C!"
      0004EC 04 E2                    1         .word LINK 
                           0004EE     2         LINK=.
      0004EE 02                       3         .byte 2  
      0004EF 43 21                    4         .ascii "C!"
      0004F1                          5         CSTOR:
      0004F1 90 93            [ 1] 1016         LDW Y,X
      0004F3 90 FE            [ 2] 1017 	LDW Y,(Y)    ;Y=b
      0004F5 E6 03            [ 1] 1018         LD A,(3,X)    ;D = c
      0004F7 90 F7            [ 1] 1019         LD  (Y),A     ;store c at b
      0004F9 1C 00 04         [ 2] 1020 	ADDW X,#4 ; DDROP 
      0004FC 81               [ 4] 1021         RET     
                                   1022 
                                   1023 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1024 ;       C@      ( b -- c )
                                   1025 ;       Push byte in memory to  stack.
                                   1026 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FD                       1027         _HEADER CAT,2,"C@"
      0004FD 04 EE                    1         .word LINK 
                           0004FF     2         LINK=.
      0004FF 02                       3         .byte 2  
      000500 43 40                    4         .ascii "C@"
      000502                          5         CAT:
      000502 90 93            [ 1] 1028         LDW Y,X     ;Y=b
      000504 90 FE            [ 2] 1029         LDW Y,(Y)
      000506 90 F6            [ 1] 1030         LD A,(Y)
      000508 E7 01            [ 1] 1031         LD (1,X),A
      00050A 7F               [ 1] 1032         CLR (X)
      00050B 81               [ 4] 1033         RET     
                                   1034 
                                   1035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1036 ;       RP@     ( -- a )
                                   1037 ;       Push current RP to data stack.
                                   1038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050C                       1039         _HEADER RPAT,3,"RP@"
      00050C 04 FF                    1         .word LINK 
                           00050E     2         LINK=.
      00050E 03                       3         .byte 3  
      00050F 52 50 40                 4         .ascii "RP@"
      000512                          5         RPAT:
      000512 90 96            [ 1] 1040         LDW Y,SP    ;save return addr
      000514 1D 00 02         [ 2] 1041         SUBW X,#2
      000517 FF               [ 2] 1042         LDW (X),Y
      000518 81               [ 4] 1043         RET     
                                   1044 
                                   1045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1046 ;       RP!     ( a -- )
                                   1047 ;       Set  return stack pointer.
                                   1048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000519                       1049         _HEADER RPSTO,COMPO+3,"RP!"
      000519 05 0E                    1         .word LINK 
                           00051B     2         LINK=.
      00051B 43                       3         .byte COMPO+3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00051C 52 50 21                 4         .ascii "RP!"
      00051F                          5         RPSTO:
      00051F 90 85            [ 2] 1050         POPW Y
      000521 90 BF 26         [ 2] 1051         LDW YTEMP,Y
      000524 90 93            [ 1] 1052         LDW Y,X
      000526 90 FE            [ 2] 1053         LDW Y,(Y)
      000528 90 94            [ 1] 1054         LDW SP,Y
      00052A 1C 00 02         [ 2] 1055         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052D 92 CC 26         [ 5] 1056         JP [YTEMP]
                                   1057 
                                   1058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1059 ;       R>      ( -- w )
                                   1060 ;       Pop return stack to data stack.
                                   1061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000530                       1062         _HEADER RFROM,2,"R>"
      000530 05 1B                    1         .word LINK 
                           000532     2         LINK=.
      000532 02                       3         .byte 2  
      000533 52 3E                    4         .ascii "R>"
      000535                          5         RFROM:
      000535 1D 00 02         [ 2] 1063         SUBW X,#CELLL 
      000538 16 03            [ 2] 1064         LDW Y,(3,SP)
      00053A FF               [ 2] 1065         LDW (X),Y 
      00053B 90 85            [ 2] 1066         POPW Y 
      00053D 5B 02            [ 2] 1067         ADDW SP,#2 
      00053F 90 FC            [ 2] 1068         JP (Y)
                                   1069 
                                   1070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1071 ;       R@      ( -- w )
                                   1072 ;       Copy top of return stack to stack.
                                   1073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000541                       1074         _HEADER RAT,2,"R@"
      000541 05 32                    1         .word LINK 
                           000543     2         LINK=.
      000543 02                       3         .byte 2  
      000544 52 40                    4         .ascii "R@"
      000546                          5         RAT:
      000546 16 03            [ 2] 1075         ldw y,(3,sp)
      000548 1D 00 02         [ 2] 1076         subw x,#CELLL 
      00054B FF               [ 2] 1077         ldw (x),y 
      00054C 81               [ 4] 1078         ret 
                                   1079 
                                   1080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1081 ;       LOCAL ( n -- )
                                   1082 ;       reserve n slots on return stack
                                   1083 ;       for local variables 
                                   1084 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054D                       1085         _HEADER LOCAL,5,"LOCAL"
      00054D 05 43                    1         .word LINK 
                           00054F     2         LINK=.
      00054F 05                       3         .byte 5  
      000550 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000555                          5         LOCAL:
      000555 90 85            [ 2] 1086         POPW Y  
      000557 90 BF 26         [ 2] 1087         LDW YTEMP,Y ; RETURN ADDRESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00055A E6 01            [ 1] 1088         LD A,(1,X)
      00055C 90 97            [ 1] 1089         LD YL,A 
      00055E A6 02            [ 1] 1090         LD A,#CELLL 
      000560 90 42            [ 4] 1091         MUL Y,A 
      000562 90 BF 24         [ 2] 1092         LDw XTEMP,Y
      000565 90 96            [ 1] 1093         LDW Y,SP 
      000567 72 B2 00 24      [ 2] 1094         SUBW Y,XTEMP
      00056B 90 94            [ 1] 1095         LDW SP,Y 
      00056D 1C 00 02         [ 2] 1096         ADDW X,#CELLL 
      000570 92 CC 26         [ 5] 1097         JP [YTEMP]
                                   1098 
                                   1099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1100 ;       NRDROP ( n -- )
                                   1101 ;       drop n elements from rstack
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000573                       1103         _HEADER NRDROP,6,"NRDROP" 
      000573 05 4F                    1         .word LINK 
                           000575     2         LINK=.
      000575 06                       3         .byte 6  
      000576 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057C                          5         NRDROP:
      00057C 90 85            [ 2] 1104         POPW Y 
      00057E 90 BF 26         [ 2] 1105         LDW YTEMP,Y ; RETURN ADDRESS 
      000581 E6 01            [ 1] 1106         LD A,(1,X)
      000583 90 97            [ 1] 1107         LD YL,A  
      000585 A6 02            [ 1] 1108         LD A,#CELLL 
      000587 90 42            [ 4] 1109         MUL Y,A 
      000589 90 BF 24         [ 2] 1110         LDW XTEMP,Y 
      00058C 90 96            [ 1] 1111         LDW Y,SP 
      00058E 72 B9 00 24      [ 2] 1112         ADDW Y,XTEMP 
      000592 90 94            [ 1] 1113         LDW SP,Y  
      000594 1C 00 02         [ 2] 1114         ADDW X,#CELLL 
      000597 92 CC 26         [ 5] 1115         JP [YTEMP]
                                   1116 
                                   1117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1118 ;        ( n -- w)
                                   1119 ;      fetch nth element ofr return stack 
                                   1120 ;      n==0 is same as R@ 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059A                       1122         _HEADER NRAT,3,"NR@"
      00059A 05 75                    1         .word LINK 
                           00059C     2         LINK=.
      00059C 03                       3         .byte 3  
      00059D 4E 52 40                 4         .ascii "NR@"
      0005A0                          5         NRAT:
      0005A0 E6 01            [ 1] 1123         LD A,(1,X)
      0005A2 90 97            [ 1] 1124         LD YL,A 
      0005A4 A6 02            [ 1] 1125         LD A,#CELLL 
      0005A6 90 42            [ 4] 1126         MUL Y,A 
      0005A8 90 BF 26         [ 2] 1127         LDW YTEMP,Y 
      0005AB 90 96            [ 1] 1128         LDW Y,SP 
      0005AD 72 A9 00 03      [ 2] 1129         ADDW Y,#3 
      0005B1 72 B9 00 26      [ 2] 1130         ADDW Y,YTEMP 
      0005B5 90 FE            [ 2] 1131         LDW Y,(Y)
      0005B7 FF               [ 2] 1132         LDW (X),Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B8 81               [ 4] 1133         RET 
                                   1134 
                                   1135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1136 ;       NR! ( w n --  )
                                   1137 ;       store w on nth position of 
                                   1138 ;       return stack 
                                   1139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B9                       1140         _HEADER NRSTO,3,"NR!"
      0005B9 05 9C                    1         .word LINK 
                           0005BB     2         LINK=.
      0005BB 03                       3         .byte 3  
      0005BC 4E 52 21                 4         .ascii "NR!"
      0005BF                          5         NRSTO:
      0005BF 90 96            [ 1] 1141         LDW Y,SP
      0005C1 72 A9 00 03      [ 2] 1142         ADDW Y,#3 
      0005C5 90 BF 26         [ 2] 1143         LDW YTEMP,Y 
      0005C8 E6 01            [ 1] 1144         LD A,(1,X)
      0005CA 90 97            [ 1] 1145         LD YL,A 
      0005CC A6 02            [ 1] 1146         LD A,#CELLL 
      0005CE 90 42            [ 4] 1147         MUL Y,A 
      0005D0 72 B9 00 26      [ 2] 1148         ADDW Y,YTEMP
      0005D4 89               [ 2] 1149         PUSHW X 
      0005D5 EE 02            [ 2] 1150         LDW X,(2,X)
      0005D7 90 FF            [ 2] 1151         LDW (Y),X
      0005D9 85               [ 2] 1152         POPW X 
      0005DA 1C 00 04         [ 2] 1153         ADDW X,#2*CELLL 
      0005DD 81               [ 4] 1154         RET 
                                   1155 
                                   1156 
                                   1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1158 ;       >R      ( w -- )
                                   1159 ;       Push data stack to return stack.
                                   1160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DE                       1161         _HEADER TOR,COMPO+2,">R"
      0005DE 05 BB                    1         .word LINK 
                           0005E0     2         LINK=.
      0005E0 42                       3         .byte COMPO+2  
      0005E1 3E 52                    4         .ascii ">R"
      0005E3                          5         TOR:
      0005E3 90 85            [ 2] 1162         POPW Y    ;save return addr
      0005E5 90 BF 26         [ 2] 1163         LDW YTEMP,Y
      0005E8 90 93            [ 1] 1164         LDW Y,X
      0005EA 90 FE            [ 2] 1165         LDW Y,(Y)  ; W
      0005EC 90 89            [ 2] 1166         PUSHW Y    ;W >R 
      0005EE 1C 00 02         [ 2] 1167         ADDW X,#2
      0005F1 92 CC 26         [ 5] 1168         JP [YTEMP]
                                   1169 
                                   1170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1171 ;       SP@     ( -- a )
                                   1172 ;       Push current stack pointer.
                                   1173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1174         _HEADER SPAT,3,"SP@"
      0005F4 05 E0                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0005F7 53 50 40                 4         .ascii "SP@"
      0005FA                          5         SPAT:
      0005FA 90 93            [ 1] 1175 	LDW Y,X
      0005FC 1D 00 02         [ 2] 1176         SUBW X,#2
      0005FF FF               [ 2] 1177 	LDW (X),Y
      000600 81               [ 4] 1178         RET     
                                   1179 
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1181 ;       SP!     ( a -- )
                                   1182 ;       Set  data stack pointer.
                                   1183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000601                       1184         _HEADER SPSTO,3,"SP!"
      000601 05 F6                    1         .word LINK 
                           000603     2         LINK=.
      000603 03                       3         .byte 3  
      000604 53 50 21                 4         .ascii "SP!"
      000607                          5         SPSTO:
      000607 FE               [ 2] 1185         LDW     X,(X)     ;X = a
      000608 81               [ 4] 1186         RET     
                                   1187 
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1189 ;       DROP    ( w -- )
                                   1190 ;       Discard top stack item.
                                   1191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000609                       1192         _HEADER DROP,4,"DROP"
      000609 06 03                    1         .word LINK 
                           00060B     2         LINK=.
      00060B 04                       3         .byte 4  
      00060C 44 52 4F 50              4         .ascii "DROP"
      000610                          5         DROP:
      000610 1C 00 02         [ 2] 1193         ADDW X,#2     
      000613 81               [ 4] 1194         RET     
                                   1195 
                                   1196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1197 ;       DUP     ( w -- w w )
                                   1198 ;       Duplicate  top stack item.
                                   1199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000614                       1200         _HEADER DUPP,3,"DUP"
      000614 06 0B                    1         .word LINK 
                           000616     2         LINK=.
      000616 03                       3         .byte 3  
      000617 44 55 50                 4         .ascii "DUP"
      00061A                          5         DUPP:
      00061A 90 93            [ 1] 1201 	LDW Y,X
      00061C 1D 00 02         [ 2] 1202         SUBW X,#2
      00061F 90 FE            [ 2] 1203 	LDW Y,(Y)
      000621 FF               [ 2] 1204 	LDW (X),Y
      000622 81               [ 4] 1205         RET     
                                   1206 
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1208 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1209 ;       Exchange top two stack items.
                                   1210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000623                       1211         _HEADER SWAPP,4,"SWAP"
      000623 06 16                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000625     2         LINK=.
      000625 04                       3         .byte 4  
      000626 53 57 41 50              4         .ascii "SWAP"
      00062A                          5         SWAPP:
      00062A 90 93            [ 1] 1212         LDW Y,X
      00062C 90 FE            [ 2] 1213         LDW Y,(Y)
      00062E 90 89            [ 2] 1214         PUSHW Y  
      000630 90 93            [ 1] 1215         LDW Y,X
      000632 90 EE 02         [ 2] 1216         LDW Y,(2,Y)
      000635 FF               [ 2] 1217         LDW (X),Y
      000636 90 85            [ 2] 1218         POPW Y 
      000638 EF 02            [ 2] 1219         LDW (2,X),Y
      00063A 81               [ 4] 1220         RET     
                                   1221 
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1223 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1224 ;       Copy second stack item to top.
                                   1225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063B                       1226         _HEADER OVER,4,"OVER"
      00063B 06 25                    1         .word LINK 
                           00063D     2         LINK=.
      00063D 04                       3         .byte 4  
      00063E 4F 56 45 52              4         .ascii "OVER"
      000642                          5         OVER:
      000642 1D 00 02         [ 2] 1227         SUBW X,#2
      000645 90 93            [ 1] 1228         LDW Y,X
      000647 90 EE 04         [ 2] 1229         LDW Y,(4,Y)
      00064A FF               [ 2] 1230         LDW (X),Y
      00064B 81               [ 4] 1231         RET     
                                   1232 
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1234 ;       0<      ( n -- t )
                                   1235 ;       Return true if n is negative.
                                   1236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064C                       1237         _HEADER ZLESS,2,"0<"
      00064C 06 3D                    1         .word LINK 
                           00064E     2         LINK=.
      00064E 02                       3         .byte 2  
      00064F 30 3C                    4         .ascii "0<"
      000651                          5         ZLESS:
      000651 A6 FF            [ 1] 1238         LD A,#0xFF
      000653 90 93            [ 1] 1239         LDW Y,X
      000655 90 FE            [ 2] 1240         LDW Y,(Y)
      000657 2B 01            [ 1] 1241         JRMI     ZL1
      000659 4F               [ 1] 1242         CLR A   ;false
      00065A F7               [ 1] 1243 ZL1:    LD     (X),A
      00065B E7 01            [ 1] 1244         LD (1,X),A
      00065D 81               [ 4] 1245 	RET     
                                   1246 
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1248 ;       0= ( n -- f )
                                   1249 ;   n==0?
                                   1250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065E                       1251         _HEADER ZEQUAL,2,"0="
      00065E 06 4E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                           000660     2         LINK=.
      000660 02                       3         .byte 2  
      000661 30 3D                    4         .ascii "0="
      000663                          5         ZEQUAL:
      000663 A6 FF            [ 1] 1252         LD A,#0XFF 
      000665 90 93            [ 1] 1253         LDW Y,X 
      000667 90 FE            [ 2] 1254         LDW Y,(Y)
      000669 27 02            [ 1] 1255         JREQ ZEQU1 
      00066B A6 00            [ 1] 1256         LD A,#0 
      00066D                       1257 ZEQU1:  
      00066D F7               [ 1] 1258         LD (X),A 
      00066E E7 01            [ 1] 1259         LD (1,X),A         
      000670 81               [ 4] 1260         RET 
                                   1261 
                                   1262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1263 ;       AND     ( w w -- w )
                                   1264 ;       Bitwise AND.
                                   1265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000671                       1266         _HEADER ANDD,3,"AND"
      000671 06 60                    1         .word LINK 
                           000673     2         LINK=.
      000673 03                       3         .byte 3  
      000674 41 4E 44                 4         .ascii "AND"
      000677                          5         ANDD:
      000677 F6               [ 1] 1267         LD  A,(X)    ;D=w
      000678 E4 02            [ 1] 1268         AND A,(2,X)
      00067A E7 02            [ 1] 1269         LD (2,X),A
      00067C E6 01            [ 1] 1270         LD A,(1,X)
      00067E E4 03            [ 1] 1271         AND A,(3,X)
      000680 E7 03            [ 1] 1272         LD (3,X),A
      000682 1C 00 02         [ 2] 1273         ADDW X,#2
      000685 81               [ 4] 1274         RET
                                   1275 
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1277 ;       OR      ( w w -- w )
                                   1278 ;       Bitwise inclusive OR.
                                   1279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000686                       1280         _HEADER ORR,2,"OR"
      000686 06 73                    1         .word LINK 
                           000688     2         LINK=.
      000688 02                       3         .byte 2  
      000689 4F 52                    4         .ascii "OR"
      00068B                          5         ORR:
      00068B F6               [ 1] 1281         LD A,(X)    ;D=w
      00068C EA 02            [ 1] 1282         OR A,(2,X)
      00068E E7 02            [ 1] 1283         LD (2,X),A
      000690 E6 01            [ 1] 1284         LD A,(1,X)
      000692 EA 03            [ 1] 1285         OR A,(3,X)
      000694 E7 03            [ 1] 1286         LD (3,X),A
      000696 1C 00 02         [ 2] 1287         ADDW X,#2
      000699 81               [ 4] 1288         RET
                                   1289 
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1291 ;       XOR     ( w w -- w )
                                   1292 ;       Bitwise exclusive OR.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00069A                       1294         _HEADER XORR,3,"XOR"
      00069A 06 88                    1         .word LINK 
                           00069C     2         LINK=.
      00069C 03                       3         .byte 3  
      00069D 58 4F 52                 4         .ascii "XOR"
      0006A0                          5         XORR:
      0006A0 F6               [ 1] 1295         LD A,(X)    ;D=w
      0006A1 E8 02            [ 1] 1296         XOR A,(2,X)
      0006A3 E7 02            [ 1] 1297         LD (2,X),A
      0006A5 E6 01            [ 1] 1298         LD A,(1,X)
      0006A7 E8 03            [ 1] 1299         XOR A,(3,X)
      0006A9 E7 03            [ 1] 1300         LD (3,X),A
      0006AB 1C 00 02         [ 2] 1301         ADDW X,#2
      0006AE 81               [ 4] 1302         RET
                                   1303 
                                   1304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1305 ;       UM+     ( u u -- udsum )
                                   1306 ;       Add two unsigned single
                                   1307 ;       and return a double sum.
                                   1308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AF                       1309         _HEADER UPLUS,3,"UM+"
      0006AF 06 9C                    1         .word LINK 
                           0006B1     2         LINK=.
      0006B1 03                       3         .byte 3  
      0006B2 55 4D 2B                 4         .ascii "UM+"
      0006B5                          5         UPLUS:
      0006B5 A6 01            [ 1] 1310         LD A,#1
      0006B7 90 93            [ 1] 1311         LDW Y,X
      0006B9 90 EE 02         [ 2] 1312         LDW Y,(2,Y)
      0006BC 90 BF 26         [ 2] 1313         LDW YTEMP,Y
      0006BF 90 93            [ 1] 1314         LDW Y,X
      0006C1 90 FE            [ 2] 1315         LDW Y,(Y)
      0006C3 72 B9 00 26      [ 2] 1316         ADDW Y,YTEMP
      0006C7 EF 02            [ 2] 1317         LDW (2,X),Y
      0006C9 25 01            [ 1] 1318         JRC     UPL1
      0006CB 4F               [ 1] 1319         CLR A
      0006CC E7 01            [ 1] 1320 UPL1:   LD     (1,X),A
      0006CE 7F               [ 1] 1321         CLR (X)
      0006CF 81               [ 4] 1322         RET
                                   1323 
                                   1324 ;; System and user variables
                                   1325 
                                   1326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1327 ;       doVAR   ( -- a )
                                   1328 ;       run time code 
                                   1329 ;       for VARIABLE and CREATE.
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1331 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D0                       1332 DOVAR:
      0006D0 1D 00 02         [ 2] 1333 	SUBW X,#2
      0006D3 90 85            [ 2] 1334         POPW Y    ;get return addr (pfa)
      0006D5 90 FE            [ 2] 1335         LDW Y,(Y) ; indirect address 
      0006D7 FF               [ 2] 1336         LDW (X),Y    ;push on stack
      0006D8 81               [ 4] 1337         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1338 
                                   1339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1340 ;       BASE    ( -- a )
                                   1341 ;       Radix base for numeric I/O.
                                   1342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D9                       1343         _HEADER BASE,4,"BASE"
      0006D9 06 B1                    1         .word LINK 
                           0006DB     2         LINK=.
      0006DB 04                       3         .byte 4  
      0006DC 42 41 53 45              4         .ascii "BASE"
      0006E0                          5         BASE:
      0006E0 90 AE 00 06      [ 2] 1344 	LDW Y,#UBASE 
      0006E4 1D 00 02         [ 2] 1345 	SUBW X,#2
      0006E7 FF               [ 2] 1346         LDW (X),Y
      0006E8 81               [ 4] 1347         RET
                                   1348 
                                   1349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1350 ;       tmp     ( -- a )
                                   1351 ;       A temporary storage.
                                   1352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E9                       1353         _HEADER TEMP,3,"TMP"
      0006E9 06 DB                    1         .word LINK 
                           0006EB     2         LINK=.
      0006EB 03                       3         .byte 3  
      0006EC 54 4D 50                 4         .ascii "TMP"
      0006EF                          5         TEMP:
      0006EF 90 AE 00 0A      [ 2] 1354 	LDW Y,#UTMP
      0006F3 1D 00 02         [ 2] 1355 	SUBW X,#2
      0006F6 FF               [ 2] 1356         LDW (X),Y
      0006F7 81               [ 4] 1357         RET
                                   1358 
                                   1359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1360 ;       >IN     ( -- a )
                                   1361 ;        Hold parsing pointer.
                                   1362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F8                       1363         _HEADER INN,3,">IN"
      0006F8 06 EB                    1         .word LINK 
                           0006FA     2         LINK=.
      0006FA 03                       3         .byte 3  
      0006FB 3E 49 4E                 4         .ascii ">IN"
      0006FE                          5         INN:
      0006FE 90 AE 00 0C      [ 2] 1364 	LDW Y,#UINN 
      000702 1D 00 02         [ 2] 1365 	SUBW X,#2
      000705 FF               [ 2] 1366         LDW (X),Y
      000706 81               [ 4] 1367         RET
                                   1368 
                                   1369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1370 ;       #TIB    ( -- a )
                                   1371 ;       Count in terminal input 
                                   1372 ;       buffer.
                                   1373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000707                       1374         _HEADER NTIB,4,"#TIB"
      000707 06 FA                    1         .word LINK 
                           000709     2         LINK=.
      000709 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00070A 23 54 49 42              4         .ascii "#TIB"
      00070E                          5         NTIB:
      00070E 90 AE 00 0E      [ 2] 1375 	LDW Y,#UCTIB 
      000712 1D 00 02         [ 2] 1376 	SUBW X,#2
      000715 FF               [ 2] 1377         LDW (X),Y
      000716 81               [ 4] 1378         RET
                                   1379 
                                   1380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1381 ;       TBUF ( -- a )
                                   1382 ;       address of 128 bytes 
                                   1383 ;       transaction buffer
                                   1384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000717                       1385         _HEADER TBUF,4,"TBUF"
      000717 07 09                    1         .word LINK 
                           000719     2         LINK=.
      000719 04                       3         .byte 4  
      00071A 54 42 55 46              4         .ascii "TBUF"
      00071E                          5         TBUF:
      00071E 90 AE 16 80      [ 2] 1386         ldw y,#ROWBUFF
      000722 1D 00 02         [ 2] 1387         subw x,#CELLL
      000725 FF               [ 2] 1388         ldw (x),y 
      000726 81               [ 4] 1389         ret 
                                   1390 
                                   1391 ; systeme variable 
                                   1392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1393 ; compilation destination 
                                   1394 ; TFLASH ( -- A )
                                   1395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000727                       1396         _HEADER TFLASH,6,"TFLASH"
      000727 07 19                    1         .word LINK 
                           000729     2         LINK=.
      000729 06                       3         .byte 6  
      00072A 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000730                          5         TFLASH:
      000730 1D 00 02         [ 2] 1397         subw x,#CELLL 
      000733 90 AE 00 20      [ 2] 1398         ldw y,#UTFLASH
      000737 FF               [ 2] 1399         ldw (x),y 
      000738 81               [ 4] 1400         ret 
                                   1401 
                                   1402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1403 ;       "EVAL   ( -- a )
                                   1404 ;       Execution vector of EVAL.
                                   1405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000739                       1406         _HEADER TEVAL,5,"'EVAL"
      000739 07 29                    1         .word LINK 
                           00073B     2         LINK=.
      00073B 05                       3         .byte 5  
      00073C 27 45 56 41 4C           4         .ascii "'EVAL"
      000741                          5         TEVAL:
      000741 90 AE 00 12      [ 2] 1407 	LDW Y,#UINTER 
      000745 1D 00 02         [ 2] 1408 	SUBW X,#2
      000748 FF               [ 2] 1409         LDW (X),Y
      000749 81               [ 4] 1410         RET
                                   1411 
                                   1412 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1413 ;       HLD     ( -- a )
                                   1414 ;       Hold a pointer of output
                                   1415 ;        string.
                                   1416 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00074A                       1417         _HEADER HLD,3,"HLD"
      00074A 07 3B                    1         .word LINK 
                           00074C     2         LINK=.
      00074C 03                       3         .byte 3  
      00074D 48 4C 44                 4         .ascii "HLD"
      000750                          5         HLD:
      000750 90 AE 00 14      [ 2] 1418 	LDW Y,#UHLD 
      000754 1D 00 02         [ 2] 1419 	SUBW X,#2
      000757 FF               [ 2] 1420         LDW (X),Y
      000758 81               [ 4] 1421         RET
                                   1422 
                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1424 ;       CONTEXT ( -- a )
                                   1425 ;       Start vocabulary search.
                                   1426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000759                       1427         _HEADER CNTXT,7,"CONTEXT"
      000759 07 4C                    1         .word LINK 
                           00075B     2         LINK=.
      00075B 07                       3         .byte 7  
      00075C 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000763                          5         CNTXT:
      000763 90 AE 00 16      [ 2] 1428 	LDW Y,#UCNTXT
      000767 1D 00 02         [ 2] 1429 	SUBW X,#2
      00076A FF               [ 2] 1430         LDW (X),Y
      00076B 81               [ 4] 1431         RET
                                   1432 
                                   1433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1434 ;       VP      ( -- a )
                                   1435 ;       Point to top of variables
                                   1436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076C                       1437         _HEADER VPP,2,"VP"
      00076C 07 5B                    1         .word LINK 
                           00076E     2         LINK=.
      00076E 02                       3         .byte 2  
      00076F 56 50                    4         .ascii "VP"
      000771                          5         VPP:
      000771 90 AE 00 18      [ 2] 1438 	LDW Y,#UVP 
      000775 1D 00 02         [ 2] 1439 	SUBW X,#2
      000778 FF               [ 2] 1440         LDW (X),Y
      000779 81               [ 4] 1441         RET
                                   1442 
                                   1443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1444 ;       CP    ( -- a )
                                   1445 ;       Pointer to top of FLASH 
                                   1446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077A                       1447         _HEADER CPP,2,"CP"
      00077A 07 6E                    1         .word LINK 
                           00077C     2         LINK=.
      00077C 02                       3         .byte 2  
      00077D 43 50                    4         .ascii "CP"
      00077F                          5         CPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00077F 90 AE 00 1A      [ 2] 1448         ldw y,#UCP 
      000783 1D 00 02         [ 2] 1449         subw x,#CELLL 
      000786 FF               [ 2] 1450         ldw (x),y 
      000787 81               [ 4] 1451         ret                
                                   1452 
                                   1453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1454 ;       LAST    ( -- a )
                                   1455 ;       Point to last name in 
                                   1456 ;       dictionary.
                                   1457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000788                       1458         _HEADER LAST,4,"LAST"
      000788 07 7C                    1         .word LINK 
                           00078A     2         LINK=.
      00078A 04                       3         .byte 4  
      00078B 4C 41 53 54              4         .ascii "LAST"
      00078F                          5         LAST:
      00078F 90 AE 00 1C      [ 2] 1459 	LDW Y,#ULAST 
      000793 1D 00 02         [ 2] 1460 	SUBW X,#2
      000796 FF               [ 2] 1461         LDW (X),Y
      000797 81               [ 4] 1462         RET
                                   1463 
                                   1464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1465 ; address of system variable URLAST 
                                   1466 ;       RAMLAST ( -- a )
                                   1467 ; RAM dictionary context 
                                   1468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000798                       1469         _HEADER RAMLAST,7,"RAMLAST"
      000798 07 8A                    1         .word LINK 
                           00079A     2         LINK=.
      00079A 07                       3         .byte 7  
      00079B 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A2                          5         RAMLAST:
      0007A2 90 AE 00 22      [ 2] 1470         ldw y,#URLAST 
      0007A6 1D 00 02         [ 2] 1471         subw x,#CELLL 
      0007A9 FF               [ 2] 1472         ldw (x),y 
      0007AA 81               [ 4] 1473         ret 
                                   1474 
                                   1475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1476 ;       OFFSET ( -- a )
                                   1477 ;       address of system 
                                   1478 ;       variable OFFSET 
                                   1479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AB                       1480         _HEADER OFFSET,6,"OFFSET"
      0007AB 07 9A                    1         .word LINK 
                           0007AD     2         LINK=.
      0007AD 06                       3         .byte 6  
      0007AE 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B4                          5         OFFSET:
      0007B4 1D 00 02         [ 2] 1481         subw x,#CELLL
      0007B7 90 AE 00 1E      [ 2] 1482         ldw y,#UOFFSET 
      0007BB FF               [ 2] 1483         ldw (x),y 
      0007BC 81               [ 4] 1484         ret 
                                   1485 
                                   1486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1487 ; adjust jump address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1488 ;  adding OFFSET
                                   1489 ; ADR-ADJ ( a -- a+offset )
                                   1490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BD                       1491 ADRADJ: 
      0007BD CD 07 B4         [ 4] 1492         call OFFSET 
      0007C0 CD 04 E4         [ 4] 1493         call AT 
      0007C3 CC 08 3D         [ 2] 1494         jp PLUS 
                                   1495 
                                   1496 
                                   1497 ;; Common functions
                                   1498 
                                   1499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1500 ;       ?DUP    ( w -- w w | 0 )
                                   1501 ;       Dup tos if its is not zero.
                                   1502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C6                       1503         _HEADER QDUP,4,"?DUP"
      0007C6 07 AD                    1         .word LINK 
                           0007C8     2         LINK=.
      0007C8 04                       3         .byte 4  
      0007C9 3F 44 55 50              4         .ascii "?DUP"
      0007CD                          5         QDUP:
      0007CD 90 93            [ 1] 1504         LDW Y,X
      0007CF 90 FE            [ 2] 1505 	LDW Y,(Y)
      0007D1 27 04            [ 1] 1506         JREQ     QDUP1
      0007D3 1D 00 02         [ 2] 1507 	SUBW X,#CELLL 
      0007D6 FF               [ 2] 1508         LDW (X),Y
      0007D7 81               [ 4] 1509 QDUP1:  RET
                                   1510 
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1512 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1513 ;       Rot 3rd item to top.
                                   1514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D8                       1515         _HEADER ROT,3,"ROT"
      0007D8 07 C8                    1         .word LINK 
                           0007DA     2         LINK=.
      0007DA 03                       3         .byte 3  
      0007DB 52 4F 54                 4         .ascii "ROT"
      0007DE                          5         ROT:
      0007DE 90 93            [ 1] 1516         ldw y,x 
      0007E0 90 FE            [ 2] 1517         ldw y,(y)
      0007E2 90 89            [ 2] 1518         pushw y 
      0007E4 90 93            [ 1] 1519         ldw y,x 
      0007E6 90 EE 04         [ 2] 1520         ldw y,(4,y)
      0007E9 FF               [ 2] 1521         ldw (x),y 
      0007EA 90 93            [ 1] 1522         ldw y,x 
      0007EC 90 EE 02         [ 2] 1523         ldw y,(2,y)
      0007EF EF 04            [ 2] 1524         ldw (4,x),y 
      0007F1 90 85            [ 2] 1525         popw y 
      0007F3 EF 02            [ 2] 1526         ldw (2,x),y
      0007F5 81               [ 4] 1527         ret 
                                   1528 
                                   1529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1530 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1531 ;    rotate left 3 top elements 
                                   1532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0007F6                       1533     _HEADER NROT,4,"<ROT"
      0007F6 07 DA                    1         .word LINK 
                           0007F8     2         LINK=.
      0007F8 04                       3         .byte 4  
      0007F9 3C 52 4F 54              4         .ascii "<ROT"
      0007FD                          5         NROT:
      0007FD 90 93            [ 1] 1534     LDW Y,X 
      0007FF 90 FE            [ 2] 1535     LDW Y,(Y)
      000801 90 89            [ 2] 1536     PUSHW Y ; n3 >R 
      000803 90 93            [ 1] 1537     LDW Y,X 
      000805 90 EE 02         [ 2] 1538     LDW Y,(2,Y) ; Y = n2 
      000808 FF               [ 2] 1539     LDW (X),Y   ; TOS = n2 
      000809 90 93            [ 1] 1540     LDW Y,X    
      00080B 90 EE 04         [ 2] 1541     LDW Y,(4,Y) ; Y = n1 
      00080E EF 02            [ 2] 1542     LDW (2,X),Y ;   = n1 
      000810 90 85            [ 2] 1543     POPW Y  ; R> Y 
      000812 EF 04            [ 2] 1544     LDW (4,X),Y ; = n3 
      000814 81               [ 4] 1545     RET 
                                   1546 
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1548 ;       2DROP   ( w w -- )
                                   1549 ;       Discard two items on stack.
                                   1550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000815                       1551         _HEADER DDROP,5,"2DROP"
      000815 07 F8                    1         .word LINK 
                           000817     2         LINK=.
      000817 05                       3         .byte 5  
      000818 32 44 52 4F 50           4         .ascii "2DROP"
      00081D                          5         DDROP:
      00081D 1C 00 04         [ 2] 1552         ADDW X,#4
      000820 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1556 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1557 ;       Duplicate top two items.
                                   1558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000821                       1559         _HEADER DDUP,4,"2DUP"
      000821 08 17                    1         .word LINK 
                           000823     2         LINK=.
      000823 04                       3         .byte 4  
      000824 32 44 55 50              4         .ascii "2DUP"
      000828                          5         DDUP:
      000828 1D 00 04         [ 2] 1560         SUBW X,#4
      00082B 90 93            [ 1] 1561         LDW Y,X
      00082D 90 EE 06         [ 2] 1562         LDW Y,(6,Y)
      000830 EF 02            [ 2] 1563         LDW (2,X),Y
      000832 90 93            [ 1] 1564         LDW Y,X
      000834 90 EE 04         [ 2] 1565         LDW Y,(4,Y)
      000837 FF               [ 2] 1566         LDW (X),Y
      000838 81               [ 4] 1567         RET
                                   1568 
                                   1569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1570 ;       +       ( w w -- sum )
                                   1571 ;       Add top two items.
                                   1572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000839                       1573         _HEADER PLUS,1,"+"
      000839 08 23                    1         .word LINK 
                           00083B     2         LINK=.
      00083B 01                       3         .byte 1  
      00083C 2B                       4         .ascii "+"
      00083D                          5         PLUS:
      00083D 90 93            [ 1] 1574         LDW Y,X
      00083F 90 FE            [ 2] 1575         LDW Y,(Y)
      000841 90 BF 26         [ 2] 1576         LDW YTEMP,Y
      000844 1C 00 02         [ 2] 1577         ADDW X,#2
      000847 90 93            [ 1] 1578         LDW Y,X
      000849 90 FE            [ 2] 1579         LDW Y,(Y)
      00084B 72 B9 00 26      [ 2] 1580         ADDW Y,YTEMP
      00084F FF               [ 2] 1581         LDW (X),Y
      000850 81               [ 4] 1582         RET
                                   1583 
                                   1584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1585 ;       TRUE ( -- -1 )
                                   1586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000851                       1587         _HEADER TRUE,4,"TRUE"
      000851 08 3B                    1         .word LINK 
                           000853     2         LINK=.
      000853 04                       3         .byte 4  
      000854 54 52 55 45              4         .ascii "TRUE"
      000858                          5         TRUE:
      000858 A6 FF            [ 1] 1588         LD A,#255 
      00085A 1D 00 02         [ 2] 1589         SUBW X,#CELLL
      00085D F7               [ 1] 1590         LD (X),A 
      00085E E7 01            [ 1] 1591         LD (1,X),A 
      000860 81               [ 4] 1592         RET 
                                   1593 
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1595 ;       FALSE ( -- 0 )
                                   1596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000861                       1597         _HEADER FALSE,5,"FALSE"
      000861 08 53                    1         .word LINK 
                           000863     2         LINK=.
      000863 05                       3         .byte 5  
      000864 46 41 4C 53 45           4         .ascii "FALSE"
      000869                          5         FALSE:
      000869 1D 00 02         [ 2] 1598         SUBW X,#CELLL 
      00086C 7F               [ 1] 1599         CLR (X) 
      00086D 6F 01            [ 1] 1600         CLR (1,X)
      00086F 81               [ 4] 1601         RET 
                                   1602 
                                   1603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1604 ;       NOT     ( w -- w )
                                   1605 ;       One's complement of tos.
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000870                       1607         _HEADER INVER,3,"NOT"
      000870 08 63                    1         .word LINK 
                           000872     2         LINK=.
      000872 03                       3         .byte 3  
      000873 4E 4F 54                 4         .ascii "NOT"
      000876                          5         INVER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000876 90 93            [ 1] 1608         LDW Y,X
      000878 90 FE            [ 2] 1609         LDW Y,(Y)
      00087A 90 53            [ 2] 1610         CPLW Y
      00087C FF               [ 2] 1611         LDW (X),Y
      00087D 81               [ 4] 1612         RET
                                   1613 
                                   1614 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1615 ;       NEGATE  ( n -- -n )
                                   1616 ;       Two's complement of tos.
                                   1617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087E                       1618         _HEADER NEGAT,6,"NEGATE"
      00087E 08 72                    1         .word LINK 
                           000880     2         LINK=.
      000880 06                       3         .byte 6  
      000881 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000887                          5         NEGAT:
      000887 90 93            [ 1] 1619         LDW Y,X
      000889 90 FE            [ 2] 1620         LDW Y,(Y)
      00088B 90 50            [ 2] 1621         NEGW Y
      00088D FF               [ 2] 1622         LDW (X),Y
      00088E 81               [ 4] 1623         RET
                                   1624 
                                   1625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1626 ;       DNEGATE ( d -- -d )
                                   1627 ;       Two's complement of double.
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088F                       1629         _HEADER DNEGA,7,"DNEGATE"
      00088F 08 80                    1         .word LINK 
                           000891     2         LINK=.
      000891 07                       3         .byte 7  
      000892 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000899                          5         DNEGA:
      000899 90 93            [ 1] 1630         LDW Y,X
      00089B 90 FE            [ 2] 1631 	LDW Y,(Y)
      00089D 90 53            [ 2] 1632         CPLW Y
      00089F 90 89            [ 2] 1633         PUSHW Y      ; Y >R 
      0008A1 90 93            [ 1] 1634         LDW Y,X
      0008A3 90 EE 02         [ 2] 1635         LDW Y,(2,Y)
      0008A6 90 53            [ 2] 1636         CPLW Y
      0008A8 72 A9 00 01      [ 2] 1637         ADDW Y,#1
      0008AC EF 02            [ 2] 1638         LDW (2,X),Y
      0008AE 90 85            [ 2] 1639         POPW Y       ; R> Y  
      0008B0 24 02            [ 1] 1640         JRNC DN1 
      0008B2 90 5C            [ 1] 1641         INCW Y
      0008B4 FF               [ 2] 1642 DN1:    LDW (X),Y
      0008B5 81               [ 4] 1643         RET
                                   1644 
                                   1645 
                                   1646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1647 ;       S>D ( n -- d )
                                   1648 ; convert single integer to double 
                                   1649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B6                       1650         _HEADER STOD,3,"S>D"
      0008B6 08 91                    1         .word LINK 
                           0008B8     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008B8 03                       3         .byte 3  
      0008B9 53 3E 44                 4         .ascii "S>D"
      0008BC                          5         STOD:
      0008BC 1D 00 02         [ 2] 1651         SUBW X,#CELLL 
      0008BF 7F               [ 1] 1652         CLR (X) 
      0008C0 6F 01            [ 1] 1653         CLR (1,X) 
      0008C2 90 93            [ 1] 1654         LDW Y,X 
      0008C4 90 EE 02         [ 2] 1655         LDW Y,(2,Y)
      0008C7 2A 05            [ 1] 1656         JRPL 1$
      0008C9 90 AE FF FF      [ 2] 1657         LDW Y,#-1 
      0008CD FF               [ 2] 1658         LDW (X),Y 
      0008CE 81               [ 4] 1659 1$:     RET 
                                   1660 
                                   1661 
                                   1662 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1663 ;       -       ( n1 n2 -- n1-n2 )
                                   1664 ;       Subtraction.
                                   1665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CF                       1666         _HEADER SUBB,1,"-"
      0008CF 08 B8                    1         .word LINK 
                           0008D1     2         LINK=.
      0008D1 01                       3         .byte 1  
      0008D2 2D                       4         .ascii "-"
      0008D3                          5         SUBB:
      0008D3 90 93            [ 1] 1667         LDW Y,X
      0008D5 90 FE            [ 2] 1668         LDW Y,(Y) ; n2 
      0008D7 90 BF 26         [ 2] 1669         LDW YTEMP,Y 
      0008DA 1C 00 02         [ 2] 1670         ADDW X,#CELLL 
      0008DD 90 93            [ 1] 1671         LDW Y,X
      0008DF 90 FE            [ 2] 1672         LDW Y,(Y) ; n1 
      0008E1 72 B2 00 26      [ 2] 1673         SUBW Y,YTEMP ; n1-n2 
      0008E5 FF               [ 2] 1674         LDW (X),Y
      0008E6 81               [ 4] 1675         RET
                                   1676 
                                   1677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1678 ;       ABS     ( n -- n )
                                   1679 ;       Return  absolute value of n.
                                   1680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E7                       1681         _HEADER ABSS,3,"ABS"
      0008E7 08 D1                    1         .word LINK 
                           0008E9     2         LINK=.
      0008E9 03                       3         .byte 3  
      0008EA 41 42 53                 4         .ascii "ABS"
      0008ED                          5         ABSS:
      0008ED 90 93            [ 1] 1682         LDW Y,X
      0008EF 90 FE            [ 2] 1683 	LDW Y,(Y)
      0008F1 2A 03            [ 1] 1684         JRPL     AB1     ;negate:
      0008F3 90 50            [ 2] 1685         NEGW     Y     ;else negate hi byte
      0008F5 FF               [ 2] 1686         LDW (X),Y
      0008F6 81               [ 4] 1687 AB1:    RET
                                   1688 
                                   1689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1690 ;       =       ( w w -- t )
                                   1691 ;       Return true if top two are equal.
                                   1692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008F7                       1693         _HEADER EQUAL,1,"="
      0008F7 08 E9                    1         .word LINK 
                           0008F9     2         LINK=.
      0008F9 01                       3         .byte 1  
      0008FA 3D                       4         .ascii "="
      0008FB                          5         EQUAL:
      0008FB A6 FF            [ 1] 1694         LD A,#0xFF  ;true
      0008FD 90 93            [ 1] 1695         LDW Y,X    
      0008FF 90 FE            [ 2] 1696         LDW Y,(Y)   ; n2 
      000901 1C 00 02         [ 2] 1697         ADDW X,#CELLL 
      000904 F3               [ 2] 1698         CPW Y,(X)   ; n1==n2
      000905 27 01            [ 1] 1699         JREQ EQ1 
      000907 4F               [ 1] 1700         CLR A 
      000908 F7               [ 1] 1701 EQ1:    LD (X),A
      000909 E7 01            [ 1] 1702         LD (1,X),A
      00090B 81               [ 4] 1703 	RET     
                                   1704 
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1706 ;       U<      ( u1 u2 -- f )
                                   1707 ;       Unsigned compare of top two items.
                                   1708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090C                       1709         _HEADER ULESS,2,"U<"
      00090C 08 F9                    1         .word LINK 
                           00090E     2         LINK=.
      00090E 02                       3         .byte 2  
      00090F 55 3C                    4         .ascii "U<"
      000911                          5         ULESS:
      000911 A6 FF            [ 1] 1710         LD A,#0xFF  ;true
      000913 90 93            [ 1] 1711         LDW Y,X    
      000915 90 EE 02         [ 2] 1712         LDW Y,(2,Y) ; u1 
      000918 F3               [ 2] 1713         CPW Y,(X)   ; cpw u1  u2 
      000919 25 01            [ 1] 1714         JRULT     ULES1
      00091B 4F               [ 1] 1715         CLR A
      00091C 1C 00 02         [ 2] 1716 ULES1:  ADDW X,#CELLL 
      00091F F7               [ 1] 1717         LD (X),A
      000920 E7 01            [ 1] 1718         LD (1,X),A
      000922 81               [ 4] 1719 	RET     
                                   1720 
                                   1721 
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1723 ;       <       ( n1 n2 -- t )
                                   1724 ;       Signed compare of top two items.
                                   1725 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000923                       1726         _HEADER LESS,1,"<"
      000923 09 0E                    1         .word LINK 
                           000925     2         LINK=.
      000925 01                       3         .byte 1  
      000926 3C                       4         .ascii "<"
      000927                          5         LESS:
      000927 A6 FF            [ 1] 1727         LD A,#0xFF  ;true
      000929 90 93            [ 1] 1728         LDW Y,X    
      00092B 90 EE 02         [ 2] 1729         LDW Y,(2,Y)  ; n1 
      00092E F3               [ 2] 1730         CPW Y,(X)  ; n1 < n2 ? 
      00092F 2F 01            [ 1] 1731         JRSLT     LT1
      000931 4F               [ 1] 1732         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000932 1C 00 02         [ 2] 1733 LT1:    ADDW X,#CELLL 
      000935 F7               [ 1] 1734         LD (X),A
      000936 E7 01            [ 1] 1735         LD (1,X),A
      000938 81               [ 4] 1736 	RET     
                                   1737 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1739 ;   U> ( u1 u2 -- f )
                                   1740 ;   f = true if u1>u2 
                                   1741 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000939                       1742         _HEADER UGREAT,2,"U>"
      000939 09 25                    1         .word LINK 
                           00093B     2         LINK=.
      00093B 02                       3         .byte 2  
      00093C 55 3E                    4         .ascii "U>"
      00093E                          5         UGREAT:
      00093E A6 FF            [ 1] 1743         LD A,#255  
      000940 90 93            [ 1] 1744         LDW Y,X 
      000942 90 EE 02         [ 2] 1745         LDW Y,(2,Y)  ; u1 
      000945 F3               [ 2] 1746         CPW Y,(X)  ; u1 > u2 
      000946 22 01            [ 1] 1747         JRUGT UGREAT1 
      000948 4F               [ 1] 1748         CLR A   
      000949                       1749 UGREAT1:
      000949 1C 00 02         [ 2] 1750         ADDW X,#CELLL 
      00094C F7               [ 1] 1751         LD (X),A 
      00094D E7 01            [ 1] 1752         LD (1,X),A 
      00094F 81               [ 4] 1753         RET 
                                   1754 
                                   1755 
                                   1756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1757 ;       >   (n1 n2 -- f )
                                   1758 ;  signed compare n1 n2 
                                   1759 ;  true if n1 > n2 
                                   1760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000950                       1761         _HEADER GREAT,1,">"
      000950 09 3B                    1         .word LINK 
                           000952     2         LINK=.
      000952 01                       3         .byte 1  
      000953 3E                       4         .ascii ">"
      000954                          5         GREAT:
      000954 A6 FF            [ 1] 1762         LD A,#0xFF ;
      000956 90 93            [ 1] 1763         LDW Y,X 
      000958 90 EE 02         [ 2] 1764         LDW Y,(2,Y)  ; n1 
      00095B F3               [ 2] 1765         CPW Y,(X) ; n1 > n2 ?  
      00095C 2C 01            [ 1] 1766         JRSGT GREAT1 
      00095E 4F               [ 1] 1767         CLR  A
      00095F                       1768 GREAT1:
      00095F 1C 00 02         [ 2] 1769         ADDW X,#CELLL 
      000962 F7               [ 1] 1770         LD (X),A 
      000963 E7 01            [ 1] 1771         LD (1,X),A 
      000965 81               [ 4] 1772         RET 
                                   1773 
                                   1774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1775 ;       MAX     ( n n -- n )
                                   1776 ;       Return greater of two top items.
                                   1777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000966                       1778         _HEADER MAX,3,"MAX"
      000966 09 52                    1         .word LINK 
                           000968     2         LINK=.
      000968 03                       3         .byte 3  
      000969 4D 41 58                 4         .ascii "MAX"
      00096C                          5         MAX:
      00096C 90 93            [ 1] 1779         LDW Y,X    
      00096E 90 FE            [ 2] 1780         LDW Y,(Y) ; n2 
      000970 E3 02            [ 2] 1781         CPW Y,(2,X)   
      000972 2F 02            [ 1] 1782         JRSLT  MAX1
      000974 EF 02            [ 2] 1783         LDW (2,X),Y
      000976 1C 00 02         [ 2] 1784 MAX1:   ADDW X,#2
      000979 81               [ 4] 1785 	RET     
                                   1786 
                                   1787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1788 ;       MIN     ( n n -- n )
                                   1789 ;       Return smaller of top two items.
                                   1790 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097A                       1791         _HEADER MIN,3,"MIN"
      00097A 09 68                    1         .word LINK 
                           00097C     2         LINK=.
      00097C 03                       3         .byte 3  
      00097D 4D 49 4E                 4         .ascii "MIN"
      000980                          5         MIN:
      000980 90 93            [ 1] 1792         LDW Y,X    
      000982 90 FE            [ 2] 1793         LDW Y,(Y)  ; n2 
      000984 E3 02            [ 2] 1794         CPW Y,(2,X) 
      000986 2C 02            [ 1] 1795         JRSGT MIN1
      000988 EF 02            [ 2] 1796         LDW (2,X),Y
      00098A 1C 00 02         [ 2] 1797 MIN1:	ADDW X,#2
      00098D 81               [ 4] 1798 	RET     
                                   1799 
                                   1800 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1801 ;       WITHIN  ( u ul uh -- t )
                                   1802 ;       Return true if u is within
                                   1803 ;       range of ul and uh. ( ul <= u < uh )
                                   1804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098E                       1805         _HEADER WITHI,6,"WITHIN"
      00098E 09 7C                    1         .word LINK 
                           000990     2         LINK=.
      000990 06                       3         .byte 6  
      000991 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000997                          5         WITHI:
      000997 CD 06 42         [ 4] 1806         CALL     OVER
      00099A CD 08 D3         [ 4] 1807         CALL     SUBB
      00099D CD 05 E3         [ 4] 1808         CALL     TOR
      0009A0 CD 08 D3         [ 4] 1809         CALL     SUBB
      0009A3 CD 05 35         [ 4] 1810         CALL     RFROM
      0009A6 CC 09 11         [ 2] 1811         JP     ULESS
                                   1812 
                                   1813 ;; Divide
                                   1814 
                                   1815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1816 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1817 ;       Unsigned divide of a double by a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1818 ;       single. Return mod and quotient.
                                   1819 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1820 ; 2021-02-22
                                   1821 ; changed algorithm for Jeeek one 
                                   1822 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A9                       1823         _HEADER UMMOD,6,"UM/MOD"
      0009A9 09 90                    1         .word LINK 
                           0009AB     2         LINK=.
      0009AB 06                       3         .byte 6  
      0009AC 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B2                          5         UMMOD:
      0009B2 90 93            [ 1] 1824         LDW     Y,X             ; stack pointer to Y
      0009B4 FE               [ 2] 1825         LDW     X,(X)           ; un
      0009B5 BF 26            [ 2] 1826         LDW     YTEMP,X         ; save un
      0009B7 93               [ 1] 1827         LDW     X,Y
      0009B8 5C               [ 1] 1828         INCW    X               ; drop un
      0009B9 5C               [ 1] 1829         INCW    X
      0009BA 89               [ 2] 1830         PUSHW   X               ; save stack pointer
      0009BB FE               [ 2] 1831         LDW     X,(X)           ; X=udh
      0009BC 26 0B            [ 1] 1832         JRNE    MMSM0
      0009BE 1E 01            [ 2] 1833         LDW    X,(1,SP)
      0009C0 EE 02            [ 2] 1834         LDW    X,(2,X)          ; udl 
      0009C2 90 BE 26         [ 2] 1835         LDW     Y,YTEMP         ;divisor 
      0009C5 65               [ 2] 1836         DIVW    X,Y             ; udl/un 
      0009C6 51               [ 1] 1837         EXGW    X,Y 
      0009C7 20 26            [ 2] 1838         JRA     MMSMb 
      0009C9                       1839 MMSM0:    
      0009C9 90 EE 04         [ 2] 1840         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CC B3 26            [ 2] 1841         CPW     X,YTEMP
      0009CE 25 09            [ 1] 1842         JRULT   MMSM1           ; X is still on the R-stack
      0009D0 85               [ 2] 1843         POPW    X               ; restore stack pointer
      0009D1 90 5F            [ 1] 1844         CLRW    Y
      0009D3 EF 02            [ 2] 1845         LDW     (2,X),Y         ; remainder 0
      0009D5 90 5A            [ 2] 1846         DECW    Y
      0009D7 FF               [ 2] 1847         LDW     (X),Y           ; quotient max. 16 bit value
      0009D8 81               [ 4] 1848         RET
      0009D9                       1849 MMSM1:
      0009D9 A6 10            [ 1] 1850         LD      A,#16           ; loop count
      0009DB 90 58            [ 2] 1851         SLLW    Y               ; udl shift udl into udh
      0009DD                       1852 MMSM3:
      0009DD 59               [ 2] 1853         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DE 25 04            [ 1] 1854         JRC     MMSMa           ; if carry out of rotate
      0009E0 B3 26            [ 2] 1855         CPW     X,YTEMP         ; compare udh to un
      0009E2 25 05            [ 1] 1856         JRULT   MMSM4           ; can't subtract
      0009E4                       1857 MMSMa:
      0009E4 72 B0 00 26      [ 2] 1858         SUBW    X,YTEMP         ; can subtract
      0009E8 98               [ 1] 1859         RCF
      0009E9                       1860 MMSM4:
      0009E9 8C               [ 1] 1861         CCF                     ; quotient bit
      0009EA 90 59            [ 2] 1862         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EC 4A               [ 1] 1863         DEC     A               ; repeat
      0009ED 26 EE            [ 1] 1864         JRNE    MMSM3           ; if A == 0
      0009EF                       1865 MMSMb:
      0009EF BF 26            [ 2] 1866         LDW     YTEMP,X         ; done, save remainder
      0009F1 85               [ 2] 1867         POPW    X               ; restore stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0009F2 FF               [ 2] 1868         LDW     (X),Y           ; save quotient
      0009F3 90 BE 26         [ 2] 1869         LDW     Y,YTEMP         ; remainder onto stack
      0009F6 EF 02            [ 2] 1870         LDW     (2,X),Y
      0009F8 81               [ 4] 1871         RET
                                   1872 
                                   1873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1874 ;   U/MOD ( u1 u2 -- ur uq )
                                   1875 ;   unsigned divide u1/u2 
                                   1876 ;   return remainder and quotient 
                                   1877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F9                       1878         _HEADER USLMOD,5,"U/MOD"
      0009F9 09 AB                    1         .word LINK 
                           0009FB     2         LINK=.
      0009FB 05                       3         .byte 5  
      0009FC 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A01                          5         USLMOD:
      000A01 90 93            [ 1] 1879         LDW Y,X 
      000A03 90 FE            [ 2] 1880         LDW Y,(Y)  ; dividend 
      000A05 89               [ 2] 1881         PUSHW X    ; DP >R 
      000A06 EE 02            [ 2] 1882         LDW X,(2,X) ; divisor 
      000A08 65               [ 2] 1883         DIVW X,Y 
      000A09 89               [ 2] 1884         PUSHW X     ; quotient 
      000A0A 1E 03            [ 2] 1885         LDW X,(3,SP) ; DP 
      000A0C EF 02            [ 2] 1886         LDW (2,X),Y ; remainder 
      000A0E 16 01            [ 2] 1887         LDW Y,(1,SP) ; quotient 
      000A10 FF               [ 2] 1888         LDW (X),Y 
      000A11 5B 04            [ 2] 1889         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A13 81               [ 4] 1890         RET 
                                   1891 
                                   1892 
                                   1893 
                                   1894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1895 ;       M/MOD   ( d n -- r q )
                                   1896 ;       Signed floored divide of double by
                                   1897 ;       single. Return mod and quotient.
                                   1898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A14                       1899         _HEADER MSMOD,5,"M/MOD"
      000A14 09 FB                    1         .word LINK 
                           000A16     2         LINK=.
      000A16 05                       3         .byte 5  
      000A17 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1C                          5         MSMOD:
      000A1C CD 06 1A         [ 4] 1900         CALL	DUPP
      000A1F CD 06 51         [ 4] 1901         CALL	ZLESS
      000A22 CD 06 1A         [ 4] 1902         CALL	DUPP
      000A25 CD 05 E3         [ 4] 1903         CALL	TOR
      000A28 CD 04 99         [ 4] 1904         CALL	QBRAN
      000A2B 0A 39                 1905         .word	MMOD1
      000A2D CD 08 87         [ 4] 1906         CALL	NEGAT
      000A30 CD 05 E3         [ 4] 1907         CALL	TOR
      000A33 CD 08 99         [ 4] 1908         CALL	DNEGA
      000A36 CD 05 35         [ 4] 1909         CALL	RFROM
      000A39 CD 05 E3         [ 4] 1910 MMOD1:	CALL	TOR
      000A3C CD 06 1A         [ 4] 1911         CALL	DUPP
      000A3F CD 06 51         [ 4] 1912         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A42 CD 04 99         [ 4] 1913         CALL	QBRAN
      000A45 0A 4D                 1914         .word	MMOD2
      000A47 CD 05 46         [ 4] 1915         CALL	RAT
      000A4A CD 08 3D         [ 4] 1916         CALL	PLUS
      000A4D CD 05 35         [ 4] 1917 MMOD2:	CALL	RFROM
      000A50 CD 09 B2         [ 4] 1918         CALL	UMMOD
      000A53 CD 05 35         [ 4] 1919         CALL	RFROM
      000A56 CD 04 99         [ 4] 1920         CALL	QBRAN
      000A59 0A 64                 1921         .word	MMOD3
      000A5B CD 06 2A         [ 4] 1922         CALL	SWAPP
      000A5E CD 08 87         [ 4] 1923         CALL	NEGAT
      000A61 CC 06 2A         [ 2] 1924         JP	SWAPP
      000A64 81               [ 4] 1925 MMOD3:	RET
                                   1926 
                                   1927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1928 ;       /MOD    ( n1 n2 -- r q )
                                   1929 ;       Signed divide n1/n2. 
                                   1930 ;       Return mod and quotient.
                                   1931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A65                       1932         _HEADER SLMOD,4,"/MOD"
      000A65 0A 16                    1         .word LINK 
                           000A67     2         LINK=.
      000A67 04                       3         .byte 4  
      000A68 2F 4D 4F 44              4         .ascii "/MOD"
      000A6C                          5         SLMOD:
      000A6C F6               [ 1] 1933         LD A,(X)
      000A6D 88               [ 1] 1934         PUSH A   ; n2 sign 
      000A6E E6 02            [ 1] 1935         LD A,(2,X)
      000A70 88               [ 1] 1936         PUSH A    ; n1 sign 
      000A71 CD 08 ED         [ 4] 1937         CALL ABSS 
      000A74 CD 05 E3         [ 4] 1938         CALL TOR  ; 
      000A77 CD 08 ED         [ 4] 1939         CALL ABSS 
      000A7A CD 05 46         [ 4] 1940         CALL RAT   
      000A7D CD 0A 01         [ 4] 1941         CALL USLMOD 
      000A80 7B 03            [ 1] 1942         LD A,(3,SP)
      000A82 1A 04            [ 1] 1943         OR A,(4,SP)
      000A84 2A 30            [ 1] 1944         JRPL SLMOD8 ; both positive nothing to change 
      000A86 7B 03            [ 1] 1945         LD A,(3,SP)
      000A88 18 04            [ 1] 1946         XOR A,(4,SP)
      000A8A 2A 1D            [ 1] 1947         JRPL SLMOD1
                                   1948 ; dividend and divisor are opposite sign          
      000A8C CD 08 87         [ 4] 1949         CALL NEGAT ; negative quotient
      000A8F CD 06 42         [ 4] 1950         CALL OVER 
      000A92 CD 06 63         [ 4] 1951         CALL ZEQUAL 
      000A95                       1952         _TBRAN SLMOD8 
      000A95 CD 04 A7         [ 4]    1     CALL TBRAN 
      000A98 0A B6                    2     .word SLMOD8 
      000A9A CD 0B B0         [ 4] 1953         CALL ONEM   ; add one to quotient 
      000A9D CD 05 46         [ 4] 1954         CALL RAT 
      000AA0 CD 07 DE         [ 4] 1955         CALL ROT 
      000AA3 CD 08 D3         [ 4] 1956         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AA6 CD 06 2A         [ 4] 1957         CALL SWAPP
      000AA9                       1958 SLMOD1:
      000AA9 7B 04            [ 1] 1959         LD A,(4,SP) ; divisor sign 
      000AAB 2A 09            [ 1] 1960         JRPL SLMOD8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AAD CD 05 E3         [ 4] 1961         CALL TOR 
      000AB0 CD 08 87         [ 4] 1962         CALL NEGAT ; if divisor negative negate remainder 
      000AB3 CD 05 35         [ 4] 1963         CALL RFROM 
      000AB6                       1964 SLMOD8: 
      000AB6 5B 04            [ 2] 1965         ADDW SP,#4 
      000AB8 81               [ 4] 1966         RET 
                                   1967 
                                   1968 
                                   1969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1970 ;       MOD     ( n n -- r )
                                   1971 ;       Signed divide. Return mod only.
                                   1972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1973         _HEADER MODD,3,"MOD"
      000AB9 0A 67                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 03                       3         .byte 3  
      000ABC 4D 4F 44                 4         .ascii "MOD"
      000ABF                          5         MODD:
      000ABF CD 0A 6C         [ 4] 1974 	CALL	SLMOD
      000AC2 CC 06 10         [ 2] 1975 	JP	DROP
                                   1976 
                                   1977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1978 ;       /       ( n n -- q )
                                   1979 ;       Signed divide. Return quotient only.
                                   1980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC5                       1981         _HEADER SLASH,1,"/"
      000AC5 0A BB                    1         .word LINK 
                           000AC7     2         LINK=.
      000AC7 01                       3         .byte 1  
      000AC8 2F                       4         .ascii "/"
      000AC9                          5         SLASH:
      000AC9 CD 0A 6C         [ 4] 1982         CALL	SLMOD
      000ACC CD 06 2A         [ 4] 1983         CALL	SWAPP
      000ACF CC 06 10         [ 2] 1984         JP	DROP
                                   1985 
                                   1986 ;; Multiply
                                   1987 
                                   1988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1989 ;       UM*     ( u1 u2 -- ud )
                                   1990 ;       Unsigned multiply. Return 
                                   1991 ;       double product.
                                   1992 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD2                       1993         _HEADER UMSTA,3,"UM*"
      000AD2 0A C7                    1         .word LINK 
                           000AD4     2         LINK=.
      000AD4 03                       3         .byte 3  
      000AD5 55 4D 2A                 4         .ascii "UM*"
      000AD8                          5         UMSTA:
                                   1994 ; stack have 4 bytes u1=a:b u2=c:d
                                   1995         ;; bytes offset on data stack 
                           000002  1996         da=2 
                           000003  1997         db=3 
                           000000  1998         dc=0 
                           000001  1999         dd=1 
                                   2000         ;;;;;; local variables ;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2001         ;; product bytes offset on return stack 
                           000001  2002         UD1=1  ; ud bits 31..24
                           000002  2003         UD2=2  ; ud bits 23..16
                           000003  2004         UD3=3  ; ud bits 15..8 
                           000004  2005         UD4=4  ; ud bits 7..0 
                                   2006         ;; local variable for product set to zero   
      000AD8 90 5F            [ 1] 2007         clrw y 
      000ADA 90 89            [ 2] 2008         pushw y  ; bits 15..0
      000ADC 90 89            [ 2] 2009         pushw y  ; bits 31..16 
      000ADE E6 03            [ 1] 2010         ld a,(db,x) ; b 
      000AE0 90 97            [ 1] 2011         ld yl,a 
      000AE2 E6 01            [ 1] 2012         ld a,(dd,x)   ; d
      000AE4 90 42            [ 4] 2013         mul y,a    ; b*d  
      000AE6 17 03            [ 2] 2014         ldw (UD3,sp),y ; lowest weight product 
      000AE8 E6 03            [ 1] 2015         ld a,(db,x)
      000AEA 90 97            [ 1] 2016         ld yl,a 
      000AEC E6 00            [ 1] 2017         ld a,(dc,x)
      000AEE 90 42            [ 4] 2018         mul y,a  ; b*c 
                                   2019         ;;; do the partial sum 
      000AF0 72 F9 02         [ 2] 2020         addw y,(UD2,sp)
      000AF3 4F               [ 1] 2021         clr a 
      000AF4 49               [ 1] 2022         rlc a
      000AF5 6B 01            [ 1] 2023         ld (UD1,sp),a 
      000AF7 17 02            [ 2] 2024         ldw (UD2,sp),y 
      000AF9 E6 02            [ 1] 2025         ld a,(da,x)
      000AFB 90 97            [ 1] 2026         ld yl,a 
      000AFD E6 01            [ 1] 2027         ld a,(dd,x)
      000AFF 90 42            [ 4] 2028         mul y,a   ; a*d 
                                   2029         ;; do partial sum 
      000B01 72 F9 02         [ 2] 2030         addw y,(UD2,sp)
      000B04 4F               [ 1] 2031         clr a 
      000B05 19 01            [ 1] 2032         adc a,(UD1,sp)
      000B07 6B 01            [ 1] 2033         ld (UD1,sp),a  
      000B09 17 02            [ 2] 2034         ldw (UD2,sp),y 
      000B0B E6 02            [ 1] 2035         ld a,(da,x)
      000B0D 90 97            [ 1] 2036         ld yl,a 
      000B0F E6 00            [ 1] 2037         ld a,(dc,x)
      000B11 90 42            [ 4] 2038         mul y,a  ;  a*c highest weight product 
                                   2039         ;;; do partial sum 
      000B13 72 F9 01         [ 2] 2040         addw y,(UD1,sp)
      000B16 FF               [ 2] 2041         ldw (x),y  ; udh 
      000B17 16 03            [ 2] 2042         ldw y,(UD3,sp)
      000B19 EF 02            [ 2] 2043         ldw (2,x),y  ; udl  
      000B1B 5B 04            [ 2] 2044         addw sp,#4 ; drop local variable 
      000B1D 81               [ 4] 2045         ret  
                                   2046 
                                   2047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2048 ;       *       ( n n -- n )
                                   2049 ;       Signed multiply. Return 
                                   2050 ;       single product.
                                   2051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B1E                       2052         _HEADER STAR,1,"*"
      000B1E 0A D4                    1         .word LINK 
                           000B20     2         LINK=.
      000B20 01                       3         .byte 1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B21 2A                       4         .ascii "*"
      000B22                          5         STAR:
      000B22 CD 0A D8         [ 4] 2053 	CALL	UMSTA
      000B25 CC 06 10         [ 2] 2054 	JP	DROP
                                   2055 
                                   2056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2057 ;       M*      ( n n -- d )
                                   2058 ;       Signed multiply. Return 
                                   2059 ;       double product.
                                   2060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B28                       2061         _HEADER MSTAR,2,"M*"
      000B28 0B 20                    1         .word LINK 
                           000B2A     2         LINK=.
      000B2A 02                       3         .byte 2  
      000B2B 4D 2A                    4         .ascii "M*"
      000B2D                          5         MSTAR:
      000B2D CD 08 28         [ 4] 2062         CALL	DDUP
      000B30 CD 06 A0         [ 4] 2063         CALL	XORR
      000B33 CD 06 51         [ 4] 2064         CALL	ZLESS
      000B36 CD 05 E3         [ 4] 2065         CALL	TOR
      000B39 CD 08 ED         [ 4] 2066         CALL	ABSS
      000B3C CD 06 2A         [ 4] 2067         CALL	SWAPP
      000B3F CD 08 ED         [ 4] 2068         CALL	ABSS
      000B42 CD 0A D8         [ 4] 2069         CALL	UMSTA
      000B45 CD 05 35         [ 4] 2070         CALL	RFROM
      000B48 CD 04 99         [ 4] 2071         CALL	QBRAN
      000B4B 0B 50                 2072         .word	MSTA1
      000B4D CC 08 99         [ 2] 2073         JP	DNEGA
      000B50 81               [ 4] 2074 MSTA1:	RET
                                   2075 
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2077 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2078 ;       Multiply n1 and n2, then divide
                                   2079 ;       by n3. Return mod and quotient.
                                   2080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B51                       2081         _HEADER SSMOD,5,"*/MOD"
      000B51 0B 2A                    1         .word LINK 
                           000B53     2         LINK=.
      000B53 05                       3         .byte 5  
      000B54 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B59                          5         SSMOD:
      000B59 CD 05 E3         [ 4] 2082         CALL     TOR
      000B5C CD 0B 2D         [ 4] 2083         CALL     MSTAR
      000B5F CD 05 35         [ 4] 2084         CALL     RFROM
      000B62 CC 0A 1C         [ 2] 2085         JP     MSMOD
                                   2086 
                                   2087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2088 ;       */      ( n1 n2 n3 -- q )
                                   2089 ;       Multiply n1 by n2, then divide
                                   2090 ;       by n3. Return quotient only.
                                   2091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B65                       2092         _HEADER STASL,2,"*/"
      000B65 0B 53                    1         .word LINK 
                           000B67     2         LINK=.
      000B67 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B68 2A 2F                    4         .ascii "*/"
      000B6A                          5         STASL:
      000B6A CD 0B 59         [ 4] 2093         CALL	SSMOD
      000B6D CD 06 2A         [ 4] 2094         CALL	SWAPP
      000B70 CC 06 10         [ 2] 2095         JP	DROP
                                   2096 
                                   2097 ;; Miscellaneous
                                   2098 
                                   2099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2100 ;       2+   ( a -- a )
                                   2101 ;       Add cell size in byte to address.
                                   2102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B73                       2103         _HEADER CELLP,2,"2+"
      000B73 0B 67                    1         .word LINK 
                           000B75     2         LINK=.
      000B75 02                       3         .byte 2  
      000B76 32 2B                    4         .ascii "2+"
      000B78                          5         CELLP:
      000B78 90 93            [ 1] 2104         LDW Y,X
      000B7A 90 FE            [ 2] 2105 	LDW Y,(Y)
      000B7C 72 A9 00 02      [ 2] 2106         ADDW Y,#CELLL 
      000B80 FF               [ 2] 2107         LDW (X),Y
      000B81 81               [ 4] 2108         RET
                                   2109 
                                   2110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2111 ;       2-   ( a -- a )
                                   2112 ;       Subtract 2 from address.
                                   2113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B82                       2114         _HEADER CELLM,2,"2-"
      000B82 0B 75                    1         .word LINK 
                           000B84     2         LINK=.
      000B84 02                       3         .byte 2  
      000B85 32 2D                    4         .ascii "2-"
      000B87                          5         CELLM:
      000B87 90 93            [ 1] 2115         LDW Y,X
      000B89 90 FE            [ 2] 2116 	LDW Y,(Y)
      000B8B 72 A2 00 02      [ 2] 2117         SUBW Y,#CELLL
      000B8F FF               [ 2] 2118         LDW (X),Y
      000B90 81               [ 4] 2119         RET
                                   2120 
                                   2121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2122 ;       2*   ( n -- n )
                                   2123 ;       Multiply tos by 2.
                                   2124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B91                       2125         _HEADER CELLS,2,"2*"
      000B91 0B 84                    1         .word LINK 
                           000B93     2         LINK=.
      000B93 02                       3         .byte 2  
      000B94 32 2A                    4         .ascii "2*"
      000B96                          5         CELLS:
      000B96 90 93            [ 1] 2126         LDW Y,X
      000B98 90 FE            [ 2] 2127 	LDW Y,(Y)
      000B9A 90 58            [ 2] 2128         SLAW Y
      000B9C FF               [ 2] 2129         LDW (X),Y
      000B9D 81               [ 4] 2130         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2131 
                                   2132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2133 ;       1+      ( a -- a )
                                   2134 ;       Add cell size in byte 
                                   2135 ;       to address.
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9E                       2137         _HEADER ONEP,2,"1+"
      000B9E 0B 93                    1         .word LINK 
                           000BA0     2         LINK=.
      000BA0 02                       3         .byte 2  
      000BA1 31 2B                    4         .ascii "1+"
      000BA3                          5         ONEP:
      000BA3 90 93            [ 1] 2138         LDW Y,X
      000BA5 90 FE            [ 2] 2139 	LDW Y,(Y)
      000BA7 90 5C            [ 1] 2140         INCW Y
      000BA9 FF               [ 2] 2141         LDW (X),Y
      000BAA 81               [ 4] 2142         RET
                                   2143 
                                   2144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2145 ;       1-      ( a -- a )
                                   2146 ;       Subtract 2 from address.
                                   2147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAB                       2148         _HEADER ONEM,2,"1-"
      000BAB 0B A0                    1         .word LINK 
                           000BAD     2         LINK=.
      000BAD 02                       3         .byte 2  
      000BAE 31 2D                    4         .ascii "1-"
      000BB0                          5         ONEM:
      000BB0 90 93            [ 1] 2149         LDW Y,X
      000BB2 90 FE            [ 2] 2150 	LDW Y,(Y)
      000BB4 90 5A            [ 2] 2151         DECW Y
      000BB6 FF               [ 2] 2152         LDW (X),Y
      000BB7 81               [ 4] 2153         RET
                                   2154 
                                   2155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2156 ;  shift left n times 
                                   2157 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BB8                       2159         _HEADER LSHIFT,6,"LSHIFT"
      000BB8 0B AD                    1         .word LINK 
                           000BBA     2         LINK=.
      000BBA 06                       3         .byte 6  
      000BBB 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BC1                          5         LSHIFT:
      000BC1 E6 01            [ 1] 2160         ld a,(1,x)
      000BC3 1C 00 02         [ 2] 2161         addw x,#CELLL 
      000BC6 90 93            [ 1] 2162         ldw y,x 
      000BC8 90 FE            [ 2] 2163         ldw y,(y)
      000BCA                       2164 LSHIFT1:
      000BCA 4D               [ 1] 2165         tnz a 
      000BCB 27 05            [ 1] 2166         jreq LSHIFT4 
      000BCD 90 58            [ 2] 2167         sllw y 
      000BCF 4A               [ 1] 2168         dec a 
      000BD0 20 F8            [ 2] 2169         jra LSHIFT1 
      000BD2                       2170 LSHIFT4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BD2 FF               [ 2] 2171         ldw (x),y 
      000BD3 81               [ 4] 2172         ret 
                                   2173 
                                   2174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2175 ; shift right n times                 
                                   2176 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD4                       2178         _HEADER RSHIFT,6,"RSHIFT"
      000BD4 0B BA                    1         .word LINK 
                           000BD6     2         LINK=.
      000BD6 06                       3         .byte 6  
      000BD7 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BDD                          5         RSHIFT:
      000BDD E6 01            [ 1] 2179         ld a,(1,x)
      000BDF 1C 00 02         [ 2] 2180         addw x,#CELLL 
      000BE2 90 93            [ 1] 2181         ldw y,x 
      000BE4 90 FE            [ 2] 2182         ldw y,(y)
      000BE6                       2183 RSHIFT1:
      000BE6 4D               [ 1] 2184         tnz a 
      000BE7 27 05            [ 1] 2185         jreq RSHIFT4 
      000BE9 90 54            [ 2] 2186         srlw y 
      000BEB 4A               [ 1] 2187         dec a 
      000BEC 20 F8            [ 2] 2188         jra RSHIFT1 
      000BEE                       2189 RSHIFT4:
      000BEE FF               [ 2] 2190         ldw (x),y 
      000BEF 81               [ 4] 2191         ret 
                                   2192 
                                   2193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2194 ;       2/      ( n -- n )
                                   2195 ;       divide  tos by 2.
                                   2196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF0                       2197         _HEADER TWOSL,2,"2/"
      000BF0 0B D6                    1         .word LINK 
                           000BF2     2         LINK=.
      000BF2 02                       3         .byte 2  
      000BF3 32 2F                    4         .ascii "2/"
      000BF5                          5         TWOSL:
      000BF5 90 93            [ 1] 2198         LDW Y,X
      000BF7 90 FE            [ 2] 2199 	LDW Y,(Y)
      000BF9 90 57            [ 2] 2200         SRAW Y
      000BFB FF               [ 2] 2201         LDW (X),Y
      000BFC 81               [ 4] 2202         RET
                                   2203 
                                   2204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2205 ;       BL      ( -- 32 )
                                   2206 ;       Return 32,  blank character.
                                   2207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFD                       2208         _HEADER BLANK,2,"BL"
      000BFD 0B F2                    1         .word LINK 
                           000BFF     2         LINK=.
      000BFF 02                       3         .byte 2  
      000C00 42 4C                    4         .ascii "BL"
      000C02                          5         BLANK:
      000C02 1D 00 02         [ 2] 2209         SUBW X,#2
      000C05 90 AE 00 20      [ 2] 2210 	LDW Y,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C09 FF               [ 2] 2211         LDW (X),Y
      000C0A 81               [ 4] 2212         RET
                                   2213 
                                   2214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2215 ;         0     ( -- 0)
                                   2216 ;         Return 0.
                                   2217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0B                       2218         _HEADER ZERO,1,"0"
      000C0B 0B FF                    1         .word LINK 
                           000C0D     2         LINK=.
      000C0D 01                       3         .byte 1  
      000C0E 30                       4         .ascii "0"
      000C0F                          5         ZERO:
      000C0F 1D 00 02         [ 2] 2219         SUBW X,#2
      000C12 90 5F            [ 1] 2220 	CLRW Y
      000C14 FF               [ 2] 2221         LDW (X),Y
      000C15 81               [ 4] 2222         RET
                                   2223 
                                   2224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2225 ;         1     ( -- 1)
                                   2226 ;         Return 1.
                                   2227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C16                       2228         _HEADER ONE,1,"1"
      000C16 0C 0D                    1         .word LINK 
                           000C18     2         LINK=.
      000C18 01                       3         .byte 1  
      000C19 31                       4         .ascii "1"
      000C1A                          5         ONE:
      000C1A 1D 00 02         [ 2] 2229         SUBW X,#2
      000C1D 90 AE 00 01      [ 2] 2230 	LDW Y,#1
      000C21 FF               [ 2] 2231         LDW (X),Y
      000C22 81               [ 4] 2232         RET
                                   2233 
                                   2234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2235 ;         -1    ( -- -1)
                                   2236 ;   Return -1
                                   2237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C23                       2238         _HEADER MONE,2,"-1"
      000C23 0C 18                    1         .word LINK 
                           000C25     2         LINK=.
      000C25 02                       3         .byte 2  
      000C26 2D 31                    4         .ascii "-1"
      000C28                          5         MONE:
      000C28 1D 00 02         [ 2] 2239         SUBW X,#2
      000C2B 90 AE FF FF      [ 2] 2240 	LDW Y,#0xFFFF
      000C2F FF               [ 2] 2241         LDW (X),Y
      000C30 81               [ 4] 2242         RET
                                   2243 
                                   2244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2245 ;       >CHAR   ( c -- c )
                                   2246 ;       Filter non-printing characters.
                                   2247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C31                       2248         _HEADER TCHAR,5,">CHAR"
      000C31 0C 25                    1         .word LINK 
                           000C33     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C33 05                       3         .byte 5  
      000C34 3E 43 48 41 52           4         .ascii ">CHAR"
      000C39                          5         TCHAR:
      000C39 E6 01            [ 1] 2249         ld a,(1,x)
      000C3B A1 20            [ 1] 2250         cp a,#32  
      000C3D 2B 05            [ 1] 2251         jrmi 1$ 
      000C3F A1 7F            [ 1] 2252         cp a,#127 
      000C41 2A 01            [ 1] 2253         jrpl 1$ 
      000C43 81               [ 4] 2254         ret 
      000C44 A6 5F            [ 1] 2255 1$:     ld a,#'_ 
      000C46 E7 01            [ 1] 2256         ld (1,x),a 
      000C48 81               [ 4] 2257         ret 
                                   2258 
                                   2259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2260 ;       DEPTH   ( -- n )
                                   2261 ;       Return  depth of  data stack.
                                   2262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C49                       2263         _HEADER DEPTH,5,"DEPTH"
      000C49 0C 33                    1         .word LINK 
                           000C4B     2         LINK=.
      000C4B 05                       3         .byte 5  
      000C4C 44 45 50 54 48           4         .ascii "DEPTH"
      000C51                          5         DEPTH:
      000C51 90 BE 2C         [ 2] 2264         LDW Y,SP0    ;save data stack ptr
      000C54 BF 24            [ 2] 2265 	LDW XTEMP,X
      000C56 72 B2 00 24      [ 2] 2266         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C5A 90 57            [ 2] 2267         SRAW Y    ;Y = #stack items
      000C5C 1D 00 02         [ 2] 2268 	SUBW X,#2
      000C5F FF               [ 2] 2269         LDW (X),Y     ; if neg, underflow
      000C60 81               [ 4] 2270         RET
                                   2271 
                                   2272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2273 ;       PICK    ( ... +n -- ... w )
                                   2274 ;       Copy  nth stack item to tos.
                                   2275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C61                       2276         _HEADER PICK,4,"PICK"
      000C61 0C 4B                    1         .word LINK 
                           000C63     2         LINK=.
      000C63 04                       3         .byte 4  
      000C64 50 49 43 4B              4         .ascii "PICK"
      000C68                          5         PICK:
      000C68 90 93            [ 1] 2277         LDW Y,X   ;D = n1
      000C6A 90 FE            [ 2] 2278         LDW Y,(Y)
                                   2279 ; modified for standard compliance          
                                   2280 ; 0 PICK must be equivalent to DUP 
      000C6C 90 5C            [ 1] 2281         INCW Y 
      000C6E 90 58            [ 2] 2282         SLAW Y
      000C70 BF 24            [ 2] 2283         LDW XTEMP,X
      000C72 72 B9 00 24      [ 2] 2284         ADDW Y,XTEMP
      000C76 90 FE            [ 2] 2285         LDW Y,(Y)
      000C78 FF               [ 2] 2286         LDW (X),Y
      000C79 81               [ 4] 2287         RET
                                   2288 
                                   2289 ;; Memory access
                                   2290 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2292 ;       +!      ( n a -- )
                                   2293 ;       Add n to  contents at 
                                   2294 ;       address a.
                                   2295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C7A                       2296         _HEADER PSTOR,2,"+!"
      000C7A 0C 63                    1         .word LINK 
                           000C7C     2         LINK=.
      000C7C 02                       3         .byte 2  
      000C7D 2B 21                    4         .ascii "+!"
      000C7F                          5         PSTOR:
      000C7F 89               [ 2] 2297         PUSHW X   ; R: DP 
      000C80 90 93            [ 1] 2298         LDW Y,X 
      000C82 FE               [ 2] 2299         LDW X,(X) ; a 
      000C83 90 EE 02         [ 2] 2300         LDW Y,(2,Y)  ; n 
      000C86 90 89            [ 2] 2301         PUSHW Y      ; R: DP n 
      000C88 90 93            [ 1] 2302         LDW Y,X 
      000C8A 90 FE            [ 2] 2303         LDW Y,(Y)
      000C8C 72 F9 01         [ 2] 2304         ADDW Y,(1,SP) ; *a + n 
      000C8F FF               [ 2] 2305         LDW (X),Y 
      000C90 1E 03            [ 2] 2306         LDW X,(3,SP) ; DP
      000C92 1C 00 04         [ 2] 2307         ADDW X,#2*CELLL  ; ( n a -- )  
      000C95 5B 04            [ 2] 2308         ADDW SP,#2*CELLL ; R: DP n -- 
      000C97 81               [ 4] 2309         RET 
                                   2310                 
                                   2311 
                                   2312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2313 ;       2!      ( d a -- )
                                   2314 ;       Store  double integer 
                                   2315 ;       to address a.
                                   2316 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C98                       2317         _HEADER DSTOR,2,"2!"
      000C98 0C 7C                    1         .word LINK 
                           000C9A     2         LINK=.
      000C9A 02                       3         .byte 2  
      000C9B 32 21                    4         .ascii "2!"
      000C9D                          5         DSTOR:
      000C9D 90 93            [ 1] 2318         LDW Y,X 
      000C9F 89               [ 2] 2319         PUSHW X 
      000CA0 FE               [ 2] 2320         LDW X,(X) ; a 
      000CA1 90 EE 02         [ 2] 2321         LDW Y,(2,Y) ; dhi 
      000CA4 FF               [ 2] 2322         LDW (X),Y 
      000CA5 16 01            [ 2] 2323         LDW Y,(1,SP)  
      000CA7 90 EE 04         [ 2] 2324         LDW Y,(4,Y) ; dlo 
      000CAA EF 02            [ 2] 2325         LDW (2,X),Y  
      000CAC 85               [ 2] 2326         POPW X 
      000CAD 1C 00 06         [ 2] 2327         ADDW X,#3*CELLL 
      000CB0 81               [ 4] 2328         RET 
                                   2329 
                                   2330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2331 ;       2@      ( a -- d )
                                   2332 ;       Fetch double integer 
                                   2333 ;       from address a.
                                   2334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB1                       2335         _HEADER DAT,2,"2@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB1 0C 9A                    1         .word LINK 
                           000CB3     2         LINK=.
      000CB3 02                       3         .byte 2  
      000CB4 32 40                    4         .ascii "2@"
      000CB6                          5         DAT:
      000CB6 90 93            [ 1] 2336         ldw y,x 
      000CB8 1D 00 02         [ 2] 2337         subw x,#CELLL 
      000CBB 90 FE            [ 2] 2338         ldw y,(y) ;address 
      000CBD 90 89            [ 2] 2339         pushw y  
      000CBF 90 FE            [ 2] 2340         ldw y,(y) ; dhi 
      000CC1 FF               [ 2] 2341         ldw (x),y 
      000CC2 90 85            [ 2] 2342         popw y 
      000CC4 90 EE 02         [ 2] 2343         ldw y,(2,y) ; dlo 
      000CC7 EF 02            [ 2] 2344         ldw (2,x),y 
      000CC9 81               [ 4] 2345         ret 
                                   2346 
                                   2347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2348 ;       COUNT   ( b -- b +n )
                                   2349 ;       Return count byte of a string
                                   2350 ;       and add 1 to byte address.
                                   2351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCA                       2352         _HEADER COUNT,5,"COUNT"
      000CCA 0C B3                    1         .word LINK 
                           000CCC     2         LINK=.
      000CCC 05                       3         .byte 5  
      000CCD 43 4F 55 4E 54           4         .ascii "COUNT"
      000CD2                          5         COUNT:
      000CD2 90 93            [ 1] 2353         ldw y,x 
      000CD4 90 FE            [ 2] 2354         ldw y,(y) ; address 
      000CD6 90 F6            [ 1] 2355         ld a,(y)  ; count 
      000CD8 90 5C            [ 1] 2356         incw y 
      000CDA FF               [ 2] 2357         ldw (x),y 
      000CDB 1D 00 02         [ 2] 2358         subw x,#CELLL 
      000CDE E7 01            [ 1] 2359         ld (1,x),a 
      000CE0 7F               [ 1] 2360         clr (x)
      000CE1 81               [ 4] 2361         ret 
                                   2362 
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2364 ;       HERE    ( -- a )
                                   2365 ;       Return  top of  variables
                                   2366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE2                       2367         _HEADER HERE,4,"HERE"
      000CE2 0C CC                    1         .word LINK 
                           000CE4     2         LINK=.
      000CE4 04                       3         .byte 4  
      000CE5 48 45 52 45              4         .ascii "HERE"
      000CE9                          5         HERE:
      000CE9 90 AE 00 18      [ 2] 2368       	ldw y,#UVP 
      000CED 90 FE            [ 2] 2369         ldw y,(y)
      000CEF 1D 00 02         [ 2] 2370         subw x,#CELLL 
      000CF2 FF               [ 2] 2371         ldw (x),y 
      000CF3 81               [ 4] 2372         ret 
                                   2373 
                                   2374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2375 ;       PAD     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2376 ;       Return address of text buffer
                                   2377 ;       above  code dictionary.
                                   2378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF4                       2379         _HEADER PAD,3,"PAD"
      000CF4 0C E4                    1         .word LINK 
                           000CF6     2         LINK=.
      000CF6 03                       3         .byte 3  
      000CF7 50 41 44                 4         .ascii "PAD"
      000CFA                          5         PAD:
      000CFA CD 0C E9         [ 4] 2380         CALL     HERE
      000CFD                       2381         _DOLIT   80
      000CFD CD 04 70         [ 4]    1     CALL DOLIT 
      000D00 00 50                    2     .word 80 
      000D02 CC 08 3D         [ 2] 2382         JP     PLUS
                                   2383 
                                   2384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2385 ;       TIB     ( -- a )
                                   2386 ;       Return address of 
                                   2387 ;       terminal input buffer.
                                   2388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D05                       2389         _HEADER TIB,3,"TIB"
      000D05 0C F6                    1         .word LINK 
                           000D07     2         LINK=.
      000D07 03                       3         .byte 3  
      000D08 54 49 42                 4         .ascii "TIB"
      000D0B                          5         TIB:
      000D0B CD 07 0E         [ 4] 2390         CALL     NTIB
      000D0E CD 0B 78         [ 4] 2391         CALL     CELLP
      000D11 CC 04 E4         [ 2] 2392         JP     AT
                                   2393 
                                   2394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2395 ;       @EXECUTE        ( a -- )
                                   2396 ;       Execute vector stored in 
                                   2397 ;       address a.
                                   2398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D14                       2399         _HEADER ATEXE,8,"@EXECUTE"
      000D14 0D 07                    1         .word LINK 
                           000D16     2         LINK=.
      000D16 08                       3         .byte 8  
      000D17 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D1F                          5         ATEXE:
      000D1F CD 04 E4         [ 4] 2400         CALL     AT
      000D22 CD 07 CD         [ 4] 2401         CALL     QDUP    ;?address or zero
      000D25 CD 04 99         [ 4] 2402         CALL     QBRAN
      000D28 0D 2D                 2403         .word      EXE1
      000D2A CD 04 C5         [ 4] 2404         CALL     EXECU   ;execute if non-zero
      000D2D 81               [ 4] 2405 EXE1:   RET     ;do nothing if zero
                                   2406 
                                   2407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2408 ;       CMOVE   ( b1 b2 u -- )
                                   2409 ;       Copy u bytes from b1 to b2.
                                   2410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2E                       2411         _HEADER CMOVE,5,"CMOVE"
      000D2E 0D 16                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000D30     2         LINK=.
      000D30 05                       3         .byte 5  
      000D31 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D36                          5         CMOVE:
                                   2412         ;;;;  local variables ;;;;;;;
                           000005  2413         DP = 5
                           000003  2414         YTMP = 3 
                           000001  2415         CNT  = 1 
                                   2416         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D36 89               [ 2] 2417         PUSHW X  ; R: DP  
      000D37 52 02            [ 2] 2418         SUB SP,#2 ; R: DP YTMP 
      000D39 90 93            [ 1] 2419         LDW Y,X 
      000D3B 90 FE            [ 2] 2420         LDW Y,(Y) ; CNT 
      000D3D 90 89            [ 2] 2421         PUSHW Y  ; R: DP YTMP CNT
      000D3F 90 93            [ 1] 2422         LDW Y,X 
      000D41 90 EE 02         [ 2] 2423         LDW Y,(2,Y) ; b2, dest 
      000D44 EE 04            [ 2] 2424         LDW X,(4,X) ; b1, src 
      000D46 17 03            [ 2] 2425         LDW (YTMP,SP),Y 
      000D48 13 03            [ 2] 2426         CPW X,(YTMP,SP) 
      000D4A 22 1A            [ 1] 2427         JRUGT CMOV2  ; src>dest 
                                   2428 ; src<dest copy from top to bottom
      000D4C 72 FB 01         [ 2] 2429         ADDW X,(CNT,SP)
      000D4F 72 F9 01         [ 2] 2430         ADDW Y,(CNT,SP)
      000D52                       2431 CMOV1:  
      000D52 17 03            [ 2] 2432         LDW (YTMP,SP),Y 
      000D54 16 01            [ 2] 2433         LDW Y,(CNT,SP)
      000D56 27 22            [ 1] 2434         JREQ CMOV3 
      000D58 90 5A            [ 2] 2435         DECW Y 
      000D5A 17 01            [ 2] 2436         LDW (CNT,SP),Y 
      000D5C 16 03            [ 2] 2437         LDW Y,(YTMP,SP)
      000D5E 5A               [ 2] 2438         DECW X
      000D5F F6               [ 1] 2439         LD A,(X)
      000D60 90 5A            [ 2] 2440         DECW Y 
      000D62 90 F7            [ 1] 2441         LD (Y),A 
      000D64 20 EC            [ 2] 2442         JRA CMOV1
                                   2443 ; src>dest copy from bottom to top   
      000D66                       2444 CMOV2: 
      000D66 17 03            [ 2] 2445         LDW (YTMP,SP),Y 
      000D68 16 01            [ 2] 2446         LDW Y,(CNT,SP)
      000D6A 27 0E            [ 1] 2447         JREQ CMOV3
      000D6C 90 5A            [ 2] 2448         DECW Y 
      000D6E 17 01            [ 2] 2449         LDW (CNT,SP),Y 
      000D70 16 03            [ 2] 2450         LDW Y,(YTMP,SP)
      000D72 F6               [ 1] 2451         LD A,(X)
      000D73 5C               [ 1] 2452         INCW X 
      000D74 90 F7            [ 1] 2453         LD (Y),A 
      000D76 90 5C            [ 1] 2454         INCW Y 
      000D78 20 EC            [ 2] 2455         JRA CMOV2 
      000D7A                       2456 CMOV3:
      000D7A 1E 05            [ 2] 2457         LDW X,(DP,SP)
      000D7C 1C 00 06         [ 2] 2458         ADDW X,#3*CELLL 
      000D7F 5B 06            [ 2] 2459         ADDW SP,#3*CELLL 
      000D81 81               [ 4] 2460         RET 
                                   2461         
                                   2462 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2464 ;       FILL    ( b u c -- )
                                   2465 ;       Fill u bytes of character c
                                   2466 ;       to area beginning at b.
                                   2467 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D82                       2468         _HEADER FILL,4,"FILL"
      000D82 0D 30                    1         .word LINK 
                           000D84     2         LINK=.
      000D84 04                       3         .byte 4  
      000D85 46 49 4C 4C              4         .ascii "FILL"
      000D89                          5         FILL:
      000D89 E6 01            [ 1] 2469         LD A,(1,X)
      000D8B 90 93            [ 1] 2470         LDW Y,X 
      000D8D 1C 00 06         [ 2] 2471         ADDW X,#3*CELLL 
      000D90 89               [ 2] 2472         PUSHW X ; R: DP 
      000D91 93               [ 1] 2473         LDW X,Y 
      000D92 EE 04            [ 2] 2474         LDW X,(4,X) ; b
      000D94 90 EE 02         [ 2] 2475         LDW Y,(2,Y) ; u
      000D97                       2476 FILL0:
      000D97 27 06            [ 1] 2477         JREQ FILL1
      000D99 F7               [ 1] 2478         LD (X),A 
      000D9A 5C               [ 1] 2479         INCW X 
      000D9B 90 5A            [ 2] 2480         DECW Y 
      000D9D 20 F8            [ 2] 2481         JRA FILL0         
      000D9F 85               [ 2] 2482 FILL1: POPW X 
      000DA0 81               [ 4] 2483         RET         
                                   2484         
                                   2485 
                                   2486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2487 ;       ERASE   ( b u -- )
                                   2488 ;       Erase u bytes beginning at b.
                                   2489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA1                       2490         _HEADER ERASE,5,"ERASE"
      000DA1 0D 84                    1         .word LINK 
                           000DA3     2         LINK=.
      000DA3 05                       3         .byte 5  
      000DA4 45 52 41 53 45           4         .ascii "ERASE"
      000DA9                          5         ERASE:
      000DA9 90 5F            [ 1] 2491         clrw y 
      000DAB 1D 00 02         [ 2] 2492         subw x,#CELLL 
      000DAE FF               [ 2] 2493         ldw (x),y 
      000DAF CC 0D 89         [ 2] 2494         jp FILL 
                                   2495 
                                   2496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2497 ;       PACK0   ( b u a -- a )
                                   2498 ;       Build a counted string with
                                   2499 ;       u characters from b. Null fill.
                                   2500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DB2                       2501         _HEADER PACKS,5,"PACK0"
      000DB2 0D A3                    1         .word LINK 
                           000DB4     2         LINK=.
      000DB4 05                       3         .byte 5  
      000DB5 50 41 43 4B 30           4         .ascii "PACK0"
      000DBA                          5         PACKS:
      000DBA CD 06 1A         [ 4] 2502         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DBD CD 05 E3         [ 4] 2503         CALL     TOR     ;strings only on cell boundary
      000DC0 CD 08 28         [ 4] 2504         CALL     DDUP
      000DC3 CD 04 F1         [ 4] 2505         CALL     CSTOR
      000DC6 CD 0B A3         [ 4] 2506         CALL     ONEP ;save count
      000DC9 CD 06 2A         [ 4] 2507         CALL     SWAPP
      000DCC CD 0D 36         [ 4] 2508         CALL     CMOVE
      000DCF CD 05 35         [ 4] 2509         CALL     RFROM
      000DD2 81               [ 4] 2510         RET
                                   2511 
                                   2512 ;; Numeric output, single precision
                                   2513 
                                   2514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2515 ;       DIGIT   ( u -- c )
                                   2516 ;       Convert digit u to a character.
                                   2517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD3                       2518         _HEADER DIGIT,5,"DIGIT"
      000DD3 0D B4                    1         .word LINK 
                           000DD5     2         LINK=.
      000DD5 05                       3         .byte 5  
      000DD6 44 49 47 49 54           4         .ascii "DIGIT"
      000DDB                          5         DIGIT:
      000DDB CD 04 70         [ 4] 2519         CALL	DOLIT
      000DDE 00 09                 2520         .word	9
      000DE0 CD 06 42         [ 4] 2521         CALL	OVER
      000DE3 CD 09 27         [ 4] 2522         CALL	LESS
      000DE6 CD 04 70         [ 4] 2523         CALL	DOLIT
      000DE9 00 07                 2524         .word	7
      000DEB CD 06 77         [ 4] 2525         CALL	ANDD
      000DEE CD 08 3D         [ 4] 2526         CALL	PLUS
      000DF1 CD 04 70         [ 4] 2527         CALL	DOLIT
      000DF4 00 30                 2528         .word	48	;'0'
      000DF6 CC 08 3D         [ 2] 2529         JP	PLUS
                                   2530 
                                   2531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2532 ;       EXTRACT ( n base -- n c )
                                   2533 ;       Extract least significant 
                                   2534 ;       digit from n.
                                   2535 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DF9                       2536         _HEADER EXTRC,7,"EXTRACT"
      000DF9 0D D5                    1         .word LINK 
                           000DFB     2         LINK=.
      000DFB 07                       3         .byte 7  
      000DFC 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E03                          5         EXTRC:
      000E03 CD 0C 0F         [ 4] 2537         CALL     ZERO
      000E06 CD 06 2A         [ 4] 2538         CALL     SWAPP
      000E09 CD 09 B2         [ 4] 2539         CALL     UMMOD
      000E0C CD 06 2A         [ 4] 2540         CALL     SWAPP
      000E0F CC 0D DB         [ 2] 2541         JP     DIGIT
                                   2542 
                                   2543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2544 ;       <#      ( -- )
                                   2545 ;       Initiate  numeric 
                                   2546 ;       output process.
                                   2547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E12                       2548         _HEADER BDIGS,2,"#<"
      000E12 0D FB                    1         .word LINK 
                           000E14     2         LINK=.
      000E14 02                       3         .byte 2  
      000E15 23 3C                    4         .ascii "#<"
      000E17                          5         BDIGS:
      000E17 CD 0C FA         [ 4] 2549         CALL     PAD
      000E1A CD 07 50         [ 4] 2550         CALL     HLD
      000E1D CC 04 D2         [ 2] 2551         JP     STORE
                                   2552 
                                   2553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2554 ;       HOLD    ( c -- )
                                   2555 ;       Insert a character 
                                   2556 ;       into output string.
                                   2557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E20                       2558         _HEADER HOLD,4,"HOLD"
      000E20 0E 14                    1         .word LINK 
                           000E22     2         LINK=.
      000E22 04                       3         .byte 4  
      000E23 48 4F 4C 44              4         .ascii "HOLD"
      000E27                          5         HOLD:
      000E27 CD 07 50         [ 4] 2559         CALL     HLD
      000E2A CD 04 E4         [ 4] 2560         CALL     AT
      000E2D CD 0B B0         [ 4] 2561         CALL     ONEM
      000E30 CD 06 1A         [ 4] 2562         CALL     DUPP
      000E33 CD 07 50         [ 4] 2563         CALL     HLD
      000E36 CD 04 D2         [ 4] 2564         CALL     STORE
      000E39 CC 04 F1         [ 2] 2565         JP     CSTOR
                                   2566 
                                   2567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2568 ;       #       ( u -- u )
                                   2569 ;       Extract one digit from u and
                                   2570 ;       append digit to output string.
                                   2571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3C                       2572         _HEADER DIG,1,"#"
      000E3C 0E 22                    1         .word LINK 
                           000E3E     2         LINK=.
      000E3E 01                       3         .byte 1  
      000E3F 23                       4         .ascii "#"
      000E40                          5         DIG:
      000E40 CD 06 E0         [ 4] 2573         CALL     BASE
      000E43 CD 04 E4         [ 4] 2574         CALL     AT
      000E46 CD 0E 03         [ 4] 2575         CALL     EXTRC
      000E49 CC 0E 27         [ 2] 2576         JP     HOLD
                                   2577 
                                   2578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2579 ;       #S      ( u -- 0 )
                                   2580 ;       Convert u until all digits
                                   2581 ;       are added to output string.
                                   2582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E4C                       2583         _HEADER DIGS,2,"#S"
      000E4C 0E 3E                    1         .word LINK 
                           000E4E     2         LINK=.
      000E4E 02                       3         .byte 2  
      000E4F 23 53                    4         .ascii "#S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E51                          5         DIGS:
      000E51 CD 0E 40         [ 4] 2584 DIGS1:  CALL     DIG
      000E54 CD 06 1A         [ 4] 2585         CALL     DUPP
      000E57 CD 04 99         [ 4] 2586         CALL     QBRAN
      000E5A 0E 5E                 2587         .word      DIGS2
      000E5C 20 F3            [ 2] 2588         JRA     DIGS1
      000E5E 81               [ 4] 2589 DIGS2:  RET
                                   2590 
                                   2591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2592 ;       SIGN    ( n -- )
                                   2593 ;       Add a minus sign to
                                   2594 ;       numeric output string.
                                   2595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E5F                       2596         _HEADER SIGN,4,"SIGN"
      000E5F 0E 4E                    1         .word LINK 
                           000E61     2         LINK=.
      000E61 04                       3         .byte 4  
      000E62 53 49 47 4E              4         .ascii "SIGN"
      000E66                          5         SIGN:
      000E66 CD 06 51         [ 4] 2597         CALL     ZLESS
      000E69 CD 04 99         [ 4] 2598         CALL     QBRAN
      000E6C 0E 76                 2599         .word      SIGN1
      000E6E CD 04 70         [ 4] 2600         CALL     DOLIT
      000E71 00 2D                 2601         .word      45	;"-"
      000E73 CC 0E 27         [ 2] 2602         JP     HOLD
      000E76 81               [ 4] 2603 SIGN1:  RET
                                   2604 
                                   2605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2606 ;       #>      ( w -- b u )
                                   2607 ;       Prepare output string.
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E77                       2609         _HEADER EDIGS,2,"#>"
      000E77 0E 61                    1         .word LINK 
                           000E79     2         LINK=.
      000E79 02                       3         .byte 2  
      000E7A 23 3E                    4         .ascii "#>"
      000E7C                          5         EDIGS:
      000E7C CD 06 10         [ 4] 2610         CALL     DROP
      000E7F CD 07 50         [ 4] 2611         CALL     HLD
      000E82 CD 04 E4         [ 4] 2612         CALL     AT
      000E85 CD 0C FA         [ 4] 2613         CALL     PAD
      000E88 CD 06 42         [ 4] 2614         CALL     OVER
      000E8B CC 08 D3         [ 2] 2615         JP     SUBB
                                   2616 
                                   2617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2618 ;       str     ( w -- b u )
                                   2619 ;       Convert a signed integer
                                   2620 ;       to a numeric string.
                                   2621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E8E                       2622         _HEADER STR,3,"STR"
      000E8E 0E 79                    1         .word LINK 
                           000E90     2         LINK=.
      000E90 03                       3         .byte 3  
      000E91 53 54 52                 4         .ascii "STR"
      000E94                          5         STR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E94 CD 06 1A         [ 4] 2623         CALL     DUPP
      000E97 CD 05 E3         [ 4] 2624         CALL     TOR
      000E9A CD 08 ED         [ 4] 2625         CALL     ABSS
      000E9D CD 0E 17         [ 4] 2626         CALL     BDIGS
      000EA0 CD 0E 51         [ 4] 2627         CALL     DIGS
      000EA3 CD 05 35         [ 4] 2628         CALL     RFROM
      000EA6 CD 0E 66         [ 4] 2629         CALL     SIGN
      000EA9 CC 0E 7C         [ 2] 2630         JP     EDIGS
                                   2631 
                                   2632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2633 ;       HEX     ( -- )
                                   2634 ;       Use radix 16 as base for
                                   2635 ;       numeric conversions.
                                   2636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAC                       2637         _HEADER HEX,3,"HEX"
      000EAC 0E 90                    1         .word LINK 
                           000EAE     2         LINK=.
      000EAE 03                       3         .byte 3  
      000EAF 48 45 58                 4         .ascii "HEX"
      000EB2                          5         HEX:
      000EB2 CD 04 70         [ 4] 2638         CALL     DOLIT
      000EB5 00 10                 2639         .word      16
      000EB7 CD 06 E0         [ 4] 2640         CALL     BASE
      000EBA CC 04 D2         [ 2] 2641         JP     STORE
                                   2642 
                                   2643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2644 ;       DECIMAL ( -- )
                                   2645 ;       Use radix 10 as base
                                   2646 ;       for numeric conversions.
                                   2647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EBD                       2648         _HEADER DECIM,7,"DECIMAL"
      000EBD 0E AE                    1         .word LINK 
                           000EBF     2         LINK=.
      000EBF 07                       3         .byte 7  
      000EC0 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EC7                          5         DECIM:
      000EC7 CD 04 70         [ 4] 2649         CALL     DOLIT
      000ECA 00 0A                 2650         .word      10
      000ECC CD 06 E0         [ 4] 2651         CALL     BASE
      000ECF CC 04 D2         [ 2] 2652         JP     STORE
                                   2653 
                                   2654 ;; Numeric input, single precision
                                   2655 
                                   2656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2657 ;       DIGIT?  ( c base -- u t )
                                   2658 ;       Convert a character to its numeric
                                   2659 ;       value. A flag indicates success.
                                   2660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED2                       2661         _HEADER DIGTQ,6,"DIGIT?"
      000ED2 0E BF                    1         .word LINK 
                           000ED4     2         LINK=.
      000ED4 06                       3         .byte 6  
      000ED5 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EDB                          5         DIGTQ:
      000EDB CD 05 E3         [ 4] 2662         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EDE CD 04 70         [ 4] 2663         CALL     DOLIT
      000EE1 00 30                 2664         .word     48	; "0"
      000EE3 CD 08 D3         [ 4] 2665         CALL     SUBB
      000EE6 CD 04 70         [ 4] 2666         CALL     DOLIT
      000EE9 00 09                 2667         .word      9
      000EEB CD 06 42         [ 4] 2668         CALL     OVER
      000EEE CD 09 27         [ 4] 2669         CALL     LESS
      000EF1 CD 04 99         [ 4] 2670         CALL     QBRAN
      000EF4 0F 0C                 2671         .word      DGTQ1
      000EF6 CD 04 70         [ 4] 2672         CALL     DOLIT
      000EF9 00 07                 2673         .word      7
      000EFB CD 08 D3         [ 4] 2674         CALL     SUBB
      000EFE CD 06 1A         [ 4] 2675         CALL     DUPP
      000F01 CD 04 70         [ 4] 2676         CALL     DOLIT
      000F04 00 0A                 2677         .word      10
      000F06 CD 09 27         [ 4] 2678         CALL     LESS
      000F09 CD 06 8B         [ 4] 2679         CALL     ORR
      000F0C CD 06 1A         [ 4] 2680 DGTQ1:  CALL     DUPP
      000F0F CD 05 35         [ 4] 2681         CALL     RFROM
      000F12 CC 09 11         [ 2] 2682         JP     ULESS
                                   2683 
                           000000  2684 .if  WANT_DOUBLE  
                           000001  2685 .iff 
                                   2686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2687 ;       NUMBER? ( a -- n T | a F )
                                   2688 ;       Convert a number string to
                                   2689 ;       integer. Push a flag on tos.
                                   2690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F15                       2691         _HEADER NUMBQ,7,"NUMBER?"
      000F15 0E D4                    1         .word LINK 
                           000F17     2         LINK=.
      000F17 07                       3         .byte 7  
      000F18 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      000F1F                          5         NUMBQ:
                                   2692 ; save BASE
      000F1F CD 06 E0         [ 4] 2693         CALL     BASE
      000F22 CD 04 E4         [ 4] 2694         CALL     AT
      000F25 CD 05 E3         [ 4] 2695         CALL     TOR
      000F28 CD 0C 0F         [ 4] 2696         CALL     ZERO
      000F2B CD 06 42         [ 4] 2697         CALL     OVER
      000F2E CD 0C D2         [ 4] 2698         CALL     COUNT ; string length,  a 0 a+ cnt 
                                   2699 ;  check hexadecimal character        
      000F31 CD 06 42         [ 4] 2700         CALL     OVER
      000F34 CD 05 02         [ 4] 2701         CALL     CAT
      000F37                       2702         _DOLIT   '$'  ; hex? 
      000F37 CD 04 70         [ 4]    1     CALL DOLIT 
      000F3A 00 24                    2     .word '$' 
      000F3C CD 08 FB         [ 4] 2703         CALL     EQUAL
      000F3F                       2704         _QBRAN   NUMQ1
      000F3F CD 04 99         [ 4]    1     CALL QBRAN
      000F42 0F 53                    2     .word NUMQ1
      000F44 CD 0E B2         [ 4] 2705         CALL     HEX
      000F47 CD 06 2A         [ 4] 2706         CALL     SWAPP
      000F4A CD 0B A3         [ 4] 2707         CALL     ONEP
      000F4D CD 06 2A         [ 4] 2708         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000F50 CD 0B B0         [ 4] 2709         CALL     ONEM
                                   2710 ; check for negative sign         
      000F53 CD 06 42         [ 4] 2711 NUMQ1:  CALL     OVER
      000F56 CD 05 02         [ 4] 2712         CALL     CAT
      000F59                       2713         _DOLIT   '-'
      000F59 CD 04 70         [ 4]    1     CALL DOLIT 
      000F5C 00 2D                    2     .word '-' 
      000F5E CD 08 FB         [ 4] 2714         CALL     EQUAL
      000F61 CD 05 E3         [ 4] 2715         CALL     TOR    ; a 0 a+ cnt R: base sign 
                                   2716 ; update address and count 
      000F64 CD 06 2A         [ 4] 2717         CALL     SWAPP
      000F67 CD 05 46         [ 4] 2718         CALL     RAT
      000F6A CD 08 D3         [ 4] 2719         CALL     SUBB
      000F6D CD 06 2A         [ 4] 2720         CALL     SWAPP
      000F70 CD 05 46         [ 4] 2721         CALL     RAT
      000F73 CD 08 3D         [ 4] 2722         CALL     PLUS
      000F76 CD 07 CD         [ 4] 2723         CALL     QDUP
      000F79                       2724         _QBRAN   NUMQ4  ; end of string  a 0 a+ R: base sign 
      000F79 CD 04 99         [ 4]    1     CALL QBRAN
      000F7C 0F C4                    2     .word NUMQ4
      000F7E CD 0B B0         [ 4] 2725         CALL     ONEM
      000F81 CD 05 E3         [ 4] 2726         CALL     TOR   ; a 0 a+ -- R: base sign cnt 
      000F84 CD 0C D2         [ 4] 2727 NUMQ2:  CALL     COUNT  ; a n a+ c  
      000F87 CD 06 E0         [ 4] 2728         CALL     BASE 
      000F8A CD 04 E4         [ 4] 2729         CALL     AT 
      000F8D CD 0E DB         [ 4] 2730         CALL     DIGTQ 
      000F90                       2731         _QBRAN   NUMQ6  ; not a digit 
      000F90 CD 04 99         [ 4]    1     CALL QBRAN
      000F93 0F CC                    2     .word NUMQ6
      000F95 CD 07 DE         [ 4] 2732         CALL     ROT    ; a a+ c n 
      000F98 CD 06 E0         [ 4] 2733         CALL     BASE 
      000F9B CD 04 E4         [ 4] 2734         CALL     AT 
      000F9E CD 0B 22         [ 4] 2735         CALL    STAR 
      000FA1 CD 08 3D         [ 4] 2736         CALL    PLUS 
      000FA4 CD 06 2A         [ 4] 2737         CALL    SWAPP  ; a n a+  R: base sign cnt 
      000FA7                       2738         _DONXT   NUMQ2
      000FA7 CD 04 84         [ 4]    1     CALL DONXT 
      000FAA 0F 84                    2     .word NUMQ2 
      000FAC CD 06 10         [ 4] 2739         CALL    DROP   ; a n  R: base sign 
      000FAF CD 05 35         [ 4] 2740         CALL     RFROM   ; a n sign R: base 
      000FB2                       2741         _QBRAN   NUMQ3
      000FB2 CD 04 99         [ 4]    1     CALL QBRAN
      000FB5 0F BA                    2     .word NUMQ3
      000FB7 CD 08 87         [ 4] 2742         CALL     NEGAT ; a n R: base 
      000FBA CD 06 2A         [ 4] 2743 NUMQ3:  CALL     SWAPP
      000FBD 90 AE FF FF      [ 2] 2744         LDW  Y, #-1 
      000FC1 FF               [ 2] 2745         LDW (X),Y     ; n -1 R: base 
      000FC2 20 1A            [ 2] 2746         JRA      NUMQ9
      000FC4 CD 05 35         [ 4] 2747 NUMQ4:  CALL     RFROM
      000FC7 CD 08 1D         [ 4] 2748         CALL     DDROP
      000FCA 20 12            [ 2] 2749         JRA      NUMQ9 
      000FCC                       2750 NUMQ6:  
                           000001  2751 .if WANT_FLOAT24 
                           000001  2752 .ift 
      000FCC CD 06 10         [ 4] 2753         CALL     DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000FCF CD 0B B0         [ 4] 2754         CALL     ONEM ; a n a+ 
      000FD2 CD 05 35         [ 4] 2755         CALL     RFROM  ; a n a+ cnt
      000FD5 CD 0B A3         [ 4] 2756         CALL     ONEP    
      000FD8 CD 05 35         [ 4] 2757         CALL     RFROM ; a n a+ cnt sign 
      000FDB CD 28 CE         [ 4] 2758         CALL     FLOATQ  
                           000000  2759 .iff
                                   2760         ADDW SP,#4 ; remove sign and cnt from rstack 
                                   2761         ADDW  X,#CELLL ; drop a+   S: a n  R: sign 
                                   2762         CLRW Y  
                                   2763         LDW (X),Y  ;  a 0 R: base 
                                   2764 .endif 
                                   2765 ; restore BASE 
      000FDE                       2766 NUMQ9: 
      000FDE CD 05 35         [ 4] 2767         CALL     RFROM
      000FE1 CD 06 E0         [ 4] 2768         CALL     BASE
      000FE4 CC 04 D2         [ 2] 2769         JP       STORE
                                   2770 .endif ; WANT_DOUBLE   
                                   2771 
                                   2772 ;; Basic I/O
                                   2773 
                                   2774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2775 ;       KEY     ( -- c )
                                   2776 ;       Wait for and return an
                                   2777 ;       input character.
                                   2778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FE7                       2779         _HEADER KEY,3,"KEY"
      000FE7 0F 17                    1         .word LINK 
                           000FE9     2         LINK=.
      000FE9 03                       3         .byte 3  
      000FEA 4B 45 59                 4         .ascii "KEY"
      000FED                          5         KEY:
      000FED 72 0B 52 30 FB   [ 2] 2780         btjf UART_SR,#UART_SR_RXNE,. 
      000FF2 C6 52 31         [ 1] 2781         ld a,UART_DR 
      000FF5 1D 00 02         [ 2] 2782         subw x,#CELLL 
      000FF8 E7 01            [ 1] 2783         ld (1,x),a 
      000FFA 7F               [ 1] 2784         clr (x)
      000FFB 81               [ 4] 2785         ret 
                                   2786 
                                   2787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2788 ;       NUF?    ( -- t )
                                   2789 ;       Return false if no input,
                                   2790 ;       else pause and if CR return true.
                                   2791 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFC                       2792         _HEADER NUFQ,4,"NUF?"
      000FFC 0F E9                    1         .word LINK 
                           000FFE     2         LINK=.
      000FFE 04                       3         .byte 4  
      000FFF 4E 55 46 3F              4         .ascii "NUF?"
      001003                          5         NUFQ:
      001003 CD 04 19         [ 4] 2793         CALL     QKEY
      001006 CD 06 1A         [ 4] 2794         CALL     DUPP
      001009 CD 04 99         [ 4] 2795         CALL     QBRAN
      00100C 10 1C                 2796         .word    NUFQ1
      00100E CD 08 1D         [ 4] 2797         CALL     DDROP
      001011 CD 0F ED         [ 4] 2798         CALL     KEY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001014 CD 04 70         [ 4] 2799         CALL     DOLIT
      001017 00 0D                 2800         .word      CRR
      001019 CC 08 FB         [ 2] 2801         JP     EQUAL
      00101C 81               [ 4] 2802 NUFQ1:  RET
                                   2803 
                                   2804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2805 ;       SPACE   ( -- )
                                   2806 ;       Send  blank character to
                                   2807 ;       output device.
                                   2808 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00101D                       2809         _HEADER SPACE,5,"SPACE"
      00101D 0F FE                    1         .word LINK 
                           00101F     2         LINK=.
      00101F 05                       3         .byte 5  
      001020 53 50 41 43 45           4         .ascii "SPACE"
      001025                          5         SPACE:
      001025 CD 0C 02         [ 4] 2810         CALL     BLANK
      001028 CC 04 37         [ 2] 2811         JP     EMIT
                                   2812 
                                   2813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2814 ;       SPACES  ( +n -- )
                                   2815 ;       Send n spaces to output device.
                                   2816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00102B                       2817         _HEADER SPACS,6,"SPACES"
      00102B 10 1F                    1         .word LINK 
                           00102D     2         LINK=.
      00102D 06                       3         .byte 6  
      00102E 53 50 41 43 45 53        4         .ascii "SPACES"
      001034                          5         SPACS:
      001034 CD 0C 0F         [ 4] 2818         CALL     ZERO
      001037 CD 09 6C         [ 4] 2819         CALL     MAX
      00103A CD 05 E3         [ 4] 2820         CALL     TOR
      00103D 20 03            [ 2] 2821         JRA      CHAR2
      00103F CD 10 25         [ 4] 2822 CHAR1:  CALL     SPACE
      001042 CD 04 84         [ 4] 2823 CHAR2:  CALL     DONXT
      001045 10 3F                 2824         .word    CHAR1
      001047 81               [ 4] 2825         RET
                                   2826 
                                   2827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2828 ;       TYPE    ( b u -- )
                                   2829 ;       Output u characters from b.
                                   2830 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001048                       2831         _HEADER TYPES,4,"TYPE"
      001048 10 2D                    1         .word LINK 
                           00104A     2         LINK=.
      00104A 04                       3         .byte 4  
      00104B 54 59 50 45              4         .ascii "TYPE"
      00104F                          5         TYPES:
      00104F CD 05 E3         [ 4] 2832         CALL     TOR
      001052 20 06            [ 2] 2833         JRA     TYPE2
      001054 CD 0C D2         [ 4] 2834 TYPE1:  CALL     COUNT 
      001057 CD 04 37         [ 4] 2835         CALL     EMIT
      00105A                       2836 TYPE2:  _DONXT  TYPE1
      00105A CD 04 84         [ 4]    1     CALL DONXT 
      00105D 10 54                    2     .word TYPE1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00105F                       2837         _DROP
      00105F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001062 81               [ 4] 2838         RET 
                                   2839 
                                   2840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2841 ;       CR      ( -- )
                                   2842 ;       Output a carriage return
                                   2843 ;       and a line feed.
                                   2844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001063                       2845         _HEADER CR,2,"CR"
      001063 10 4A                    1         .word LINK 
                           001065     2         LINK=.
      001065 02                       3         .byte 2  
      001066 43 52                    4         .ascii "CR"
      001068                          5         CR:
      001068                       2846         _DOLIT  CRR 
      001068 CD 04 70         [ 4]    1     CALL DOLIT 
      00106B 00 0D                    2     .word CRR 
      00106D CD 04 37         [ 4] 2847         CALL    EMIT
      001070                       2848         _DOLIT  LF
      001070 CD 04 70         [ 4]    1     CALL DOLIT 
      001073 00 0A                    2     .word LF 
      001075 CC 04 37         [ 2] 2849         JP      EMIT
                                   2850 
                                   2851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2852 ;       do$     ( -- a )
                                   2853 ;       Return  address of a compiled
                                   2854 ;       string.
                                   2855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2856 ;       _HEADER DOSTR,COMPO+3,"DO$"
      001078                       2857 DOSTR:
      001078 CD 05 35         [ 4] 2858         CALL     RFROM
      00107B CD 05 46         [ 4] 2859         CALL     RAT
      00107E CD 05 35         [ 4] 2860         CALL     RFROM
      001081 CD 0C D2         [ 4] 2861         CALL     COUNT
      001084 CD 08 3D         [ 4] 2862         CALL     PLUS
      001087 CD 05 E3         [ 4] 2863         CALL     TOR
      00108A CD 06 2A         [ 4] 2864         CALL     SWAPP
      00108D CD 05 E3         [ 4] 2865         CALL     TOR
      001090 81               [ 4] 2866         RET
                                   2867 
                                   2868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2869 ;       $"|     ( -- a )
                                   2870 ;       Run time routine compiled by $".
                                   2871 ;       Return address of a compiled string.
                                   2872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2873 ;       _HEADER STRQP,COMPO+3,"$\"|"
      001091                       2874 STRQP:
      001091 CD 10 78         [ 4] 2875         CALL     DOSTR
      001094 81               [ 4] 2876         RET
                                   2877 
                                   2878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2879 ;       ."|     ( -- )
                                   2880 ;       Run time routine of ." .
                                   2881 ;       Output a compiled string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2883 ;       _HEADER DOTQP,COMPO+3,".\"|"
      001095                       2884 DOTQP:
      001095 CD 10 78         [ 4] 2885         CALL     DOSTR
      001098 CD 0C D2         [ 4] 2886         CALL     COUNT
      00109B CC 10 4F         [ 2] 2887         JP     TYPES
                                   2888 
                                   2889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2890 ;       .R      ( n +n -- )
                                   2891 ;       Display an integer in a field
                                   2892 ;       of n columns, right justified.
                                   2893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00109E                       2894         _HEADER DOTR,2,".R"
      00109E 10 65                    1         .word LINK 
                           0010A0     2         LINK=.
      0010A0 02                       3         .byte 2  
      0010A1 2E 52                    4         .ascii ".R"
      0010A3                          5         DOTR:
      0010A3 CD 05 E3         [ 4] 2895         CALL     TOR
      0010A6 CD 0E 94         [ 4] 2896         CALL     STR
      0010A9 CD 05 35         [ 4] 2897         CALL     RFROM
      0010AC CD 06 42         [ 4] 2898         CALL     OVER
      0010AF CD 08 D3         [ 4] 2899         CALL     SUBB
      0010B2 CD 10 34         [ 4] 2900         CALL     SPACS
      0010B5 CC 10 4F         [ 2] 2901         JP     TYPES
                                   2902 
                                   2903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2904 ;       U.R     ( u +n -- )
                                   2905 ;       Display an unsigned integer
                                   2906 ;       in n column, right justified.
                                   2907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010B8                       2908         _HEADER UDOTR,3,"U.R"
      0010B8 10 A0                    1         .word LINK 
                           0010BA     2         LINK=.
      0010BA 03                       3         .byte 3  
      0010BB 55 2E 52                 4         .ascii "U.R"
      0010BE                          5         UDOTR:
      0010BE CD 05 E3         [ 4] 2909         CALL     TOR
      0010C1 CD 0E 17         [ 4] 2910         CALL     BDIGS
      0010C4 CD 0E 51         [ 4] 2911         CALL     DIGS
      0010C7 CD 0E 7C         [ 4] 2912         CALL     EDIGS
      0010CA CD 05 35         [ 4] 2913         CALL     RFROM
      0010CD CD 06 42         [ 4] 2914         CALL     OVER
      0010D0 CD 08 D3         [ 4] 2915         CALL     SUBB
      0010D3 CD 10 34         [ 4] 2916         CALL     SPACS
      0010D6 CC 10 4F         [ 2] 2917         JP     TYPES
                                   2918 
                                   2919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2920 ;       U.      ( u -- )
                                   2921 ;       Display an unsigned integer
                                   2922 ;       in free format.
                                   2923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010D9                       2924         _HEADER UDOT,2,"U."
      0010D9 10 BA                    1         .word LINK 
                           0010DB     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0010DB 02                       3         .byte 2  
      0010DC 55 2E                    4         .ascii "U."
      0010DE                          5         UDOT:
      0010DE CD 0E 17         [ 4] 2925         CALL     BDIGS
      0010E1 CD 0E 51         [ 4] 2926         CALL     DIGS
      0010E4 CD 0E 7C         [ 4] 2927         CALL     EDIGS
      0010E7 CD 10 25         [ 4] 2928         CALL     SPACE
      0010EA CC 10 4F         [ 2] 2929         JP     TYPES
                                   2930 
                                   2931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2932 ;   H. ( n -- )
                                   2933 ;   display n in hexadecimal 
                                   2934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010ED                       2935         _HEADER HDOT,2,"H."
      0010ED 10 DB                    1         .word LINK 
                           0010EF     2         LINK=.
      0010EF 02                       3         .byte 2  
      0010F0 48 2E                    4         .ascii "H."
      0010F2                          5         HDOT:
      0010F2 CD 06 E0         [ 4] 2936         CALL BASE 
      0010F5 CD 04 E4         [ 4] 2937         CALL AT 
      0010F8 CD 05 E3         [ 4] 2938         CALL TOR 
      0010FB CD 0E B2         [ 4] 2939         CALL HEX 
      0010FE CD 10 DE         [ 4] 2940         CALL UDOT 
      001101 CD 05 35         [ 4] 2941         CALL RFROM 
      001104 CD 06 E0         [ 4] 2942         CALL BASE 
      001107 CC 04 D2         [ 2] 2943         JP STORE 
                                   2944          
                                   2945 
                                   2946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2947 ;       .       ( w -- )
                                   2948 ;       Display an integer in free
                                   2949 ;       format, preceeded by a space.
                                   2950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00110A                       2951         _HEADER DOT,1,"."
      00110A 10 EF                    1         .word LINK 
                           00110C     2         LINK=.
      00110C 01                       3         .byte 1  
      00110D 2E                       4         .ascii "."
      00110E                          5         DOT:
      00110E CD 06 E0         [ 4] 2952         CALL     BASE
      001111 CD 04 E4         [ 4] 2953         CALL     AT
      001114 CD 04 70         [ 4] 2954         CALL     DOLIT
      001117 00 0A                 2955         .word      10
      001119 CD 06 A0         [ 4] 2956         CALL     XORR    ;?decimal
      00111C CD 04 99         [ 4] 2957         CALL     QBRAN
      00111F 11 23                 2958         .word      DOT1
      001121 20 BB            [ 2] 2959         JRA     UDOT
      001123 CD 0E 94         [ 4] 2960 DOT1:   CALL     STR
      001126 CD 10 25         [ 4] 2961         CALL     SPACE
      001129 CC 10 4F         [ 2] 2962         JP     TYPES
                                   2963 
                                   2964 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2965 ;       ?       ( a -- )
                                   2966 ;       Display contents in memory cell.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   2967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00112C                       2968         _HEADER QUEST,1,"?"
      00112C 11 0C                    1         .word LINK 
                           00112E     2         LINK=.
      00112E 01                       3         .byte 1  
      00112F 3F                       4         .ascii "?"
      001130                          5         QUEST:
      001130 CD 04 E4         [ 4] 2969         CALL     AT
      001133 20 D9            [ 2] 2970         JRA     DOT
                                   2971 
                                   2972 ;; Parsing
                                   2973 
                                   2974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2975 ;       parse   ( b u c -- b u delta ; <string> )
                                   2976 ;       Scan string delimited by c.
                                   2977 ;       Return found string and its offset.
                                   2978 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001135                       2979         _HEADER PARS,5,"PARS$"
      001135 11 2E                    1         .word LINK 
                           001137     2         LINK=.
      001137 05                       3         .byte 5  
      001138 50 41 52 53 24           4         .ascii "PARS$"
      00113D                          5         PARS:
      00113D CD 06 EF         [ 4] 2980         CALL     TEMP
      001140 CD 04 D2         [ 4] 2981         CALL     STORE
      001143 CD 06 42         [ 4] 2982         CALL     OVER
      001146 CD 05 E3         [ 4] 2983         CALL     TOR
      001149 CD 06 1A         [ 4] 2984         CALL     DUPP
      00114C CD 04 99         [ 4] 2985         CALL     QBRAN
      00114F 11 F5                 2986         .word    PARS8
      001151 CD 0B B0         [ 4] 2987         CALL     ONEM
      001154 CD 06 EF         [ 4] 2988         CALL     TEMP
      001157 CD 04 E4         [ 4] 2989         CALL     AT
      00115A CD 0C 02         [ 4] 2990         CALL     BLANK
      00115D CD 08 FB         [ 4] 2991         CALL     EQUAL
      001160 CD 04 99         [ 4] 2992         CALL     QBRAN
      001163 11 96                 2993         .word      PARS3
      001165 CD 05 E3         [ 4] 2994         CALL     TOR
      001168 CD 0C 02         [ 4] 2995 PARS1:  CALL     BLANK
      00116B CD 06 42         [ 4] 2996         CALL     OVER
      00116E CD 05 02         [ 4] 2997         CALL     CAT     ;skip leading blanks ONLY
      001171 CD 08 D3         [ 4] 2998         CALL     SUBB
      001174 CD 06 51         [ 4] 2999         CALL     ZLESS
      001177 CD 08 76         [ 4] 3000         CALL     INVER
      00117A CD 04 99         [ 4] 3001         CALL     QBRAN
      00117D 11 93                 3002         .word      PARS2
      00117F CD 0B A3         [ 4] 3003         CALL     ONEP
      001182 CD 04 84         [ 4] 3004         CALL     DONXT
      001185 11 68                 3005         .word      PARS1
      001187 CD 05 35         [ 4] 3006         CALL     RFROM
      00118A CD 06 10         [ 4] 3007         CALL     DROP
      00118D CD 0C 0F         [ 4] 3008         CALL     ZERO
      001190 CC 06 1A         [ 2] 3009         JP     DUPP
      001193 CD 05 35         [ 4] 3010 PARS2:  CALL     RFROM
      001196 CD 06 42         [ 4] 3011 PARS3:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001199 CD 06 2A         [ 4] 3012         CALL     SWAPP
      00119C CD 05 E3         [ 4] 3013         CALL     TOR
      00119F CD 06 EF         [ 4] 3014 PARS4:  CALL     TEMP
      0011A2 CD 04 E4         [ 4] 3015         CALL     AT
      0011A5 CD 06 42         [ 4] 3016         CALL     OVER
      0011A8 CD 05 02         [ 4] 3017         CALL     CAT
      0011AB CD 08 D3         [ 4] 3018         CALL     SUBB    ;scan for delimiter
      0011AE CD 06 EF         [ 4] 3019         CALL     TEMP
      0011B1 CD 04 E4         [ 4] 3020         CALL     AT
      0011B4 CD 0C 02         [ 4] 3021         CALL     BLANK
      0011B7 CD 08 FB         [ 4] 3022         CALL     EQUAL
      0011BA CD 04 99         [ 4] 3023         CALL     QBRAN
      0011BD 11 C2                 3024         .word      PARS5
      0011BF CD 06 51         [ 4] 3025         CALL     ZLESS
      0011C2 CD 04 99         [ 4] 3026 PARS5:  CALL     QBRAN
      0011C5 11 D7                 3027         .word      PARS6
      0011C7 CD 0B A3         [ 4] 3028         CALL     ONEP
      0011CA CD 04 84         [ 4] 3029         CALL     DONXT
      0011CD 11 9F                 3030         .word      PARS4
      0011CF CD 06 1A         [ 4] 3031         CALL     DUPP
      0011D2 CD 05 E3         [ 4] 3032         CALL     TOR
      0011D5 20 0F            [ 2] 3033         JRA     PARS7
      0011D7 CD 05 35         [ 4] 3034 PARS6:  CALL     RFROM
      0011DA CD 06 10         [ 4] 3035         CALL     DROP
      0011DD CD 06 1A         [ 4] 3036         CALL     DUPP
      0011E0 CD 0B A3         [ 4] 3037         CALL     ONEP
      0011E3 CD 05 E3         [ 4] 3038         CALL     TOR
      0011E6 CD 06 42         [ 4] 3039 PARS7:  CALL     OVER
      0011E9 CD 08 D3         [ 4] 3040         CALL     SUBB
      0011EC CD 05 35         [ 4] 3041         CALL     RFROM
      0011EF CD 05 35         [ 4] 3042         CALL     RFROM
      0011F2 CC 08 D3         [ 2] 3043         JP     SUBB
      0011F5 CD 06 42         [ 4] 3044 PARS8:  CALL     OVER
      0011F8 CD 05 35         [ 4] 3045         CALL     RFROM
      0011FB CC 08 D3         [ 2] 3046         JP     SUBB
                                   3047 
                                   3048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3049 ;       PARSE   ( c -- b u ; <string> )
                                   3050 ;       Scan input stream and return
                                   3051 ;       counted string delimited by c.
                                   3052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011FE                       3053         _HEADER PARSE,5,"PARSE"
      0011FE 11 37                    1         .word LINK 
                           001200     2         LINK=.
      001200 05                       3         .byte 5  
      001201 50 41 52 53 45           4         .ascii "PARSE"
      001206                          5         PARSE:
      001206 CD 05 E3         [ 4] 3054         CALL     TOR
      001209 CD 0D 0B         [ 4] 3055         CALL     TIB
      00120C CD 06 FE         [ 4] 3056         CALL     INN
      00120F CD 04 E4         [ 4] 3057         CALL     AT
      001212 CD 08 3D         [ 4] 3058         CALL     PLUS    ;current input buffer pointer
      001215 CD 07 0E         [ 4] 3059         CALL     NTIB
      001218 CD 04 E4         [ 4] 3060         CALL     AT
      00121B CD 06 FE         [ 4] 3061         CALL     INN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00121E CD 04 E4         [ 4] 3062         CALL     AT
      001221 CD 08 D3         [ 4] 3063         CALL     SUBB    ;remaining count
      001224 CD 05 35         [ 4] 3064         CALL     RFROM
      001227 CD 11 3D         [ 4] 3065         CALL     PARS
      00122A CD 06 FE         [ 4] 3066         CALL     INN
      00122D CC 0C 7F         [ 2] 3067         JP     PSTOR
                                   3068 
                                   3069 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3070 ;       .(      ( -- )
                                   3071 ;       Output following string up to next ) .
                                   3072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001230                       3073         _HEADER DOTPR,IMEDD+2,".("
      001230 12 00                    1         .word LINK 
                           001232     2         LINK=.
      001232 82                       3         .byte IMEDD+2  
      001233 2E 28                    4         .ascii ".("
      001235                          5         DOTPR:
      001235 CD 04 70         [ 4] 3074         CALL     DOLIT
      001238 00 29                 3075         .word     41	; ")"
      00123A CD 12 06         [ 4] 3076         CALL     PARSE
      00123D CC 10 4F         [ 2] 3077         JP     TYPES
                                   3078 
                                   3079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3080 ;       (       ( -- )
                                   3081 ;       Ignore following string up to next ).
                                   3082 ;       A comment.
                                   3083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001240                       3084         _HEADER PAREN,IMEDD+1,"("
      001240 12 32                    1         .word LINK 
                           001242     2         LINK=.
      001242 81                       3         .byte IMEDD+1  
      001243 28                       4         .ascii "("
      001244                          5         PAREN:
      001244 CD 04 70         [ 4] 3085         CALL     DOLIT
      001247 00 29                 3086         .word     41	; ")"
      001249 CD 12 06         [ 4] 3087         CALL     PARSE
      00124C CC 08 1D         [ 2] 3088         JP     DDROP
                                   3089 
                                   3090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3091 ;       \       ( -- )
                                   3092 ;       Ignore following text till
                                   3093 ;       end of line.
                                   3094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00124F                       3095         _HEADER BKSLA,IMEDD+1,"\\"
      00124F 12 42                    1         .word LINK 
                           001251     2         LINK=.
      001251 81                       3         .byte IMEDD+1  
      001252 5C 5C                    4         .ascii "\\"
      001254                          5         BKSLA:
      001254 90 AE 00 0E      [ 2] 3096         ldw y,#UCTIB ; #TIB  
      001258 90 FE            [ 2] 3097         ldw y,(y)
      00125A 90 89            [ 2] 3098         pushw y ; count in TIB 
      00125C 90 AE 00 0C      [ 2] 3099         ldw y,#UINN ; >IN 
      001260 90 BF 26         [ 2] 3100         ldw YTEMP,y
      001263 90 85            [ 2] 3101         popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001265 91 CF 26         [ 5] 3102         ldw [YTEMP],y
      001268 81               [ 4] 3103         ret 
                                   3104 
                                   3105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3106 ;       WORD    ( c -- a ; <string> )
                                   3107 ;       Parse a word from input stream
                                   3108 ;       and copy it to code dictionary.
                                   3109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001269                       3110         _HEADER WORDD,4,"WORD"
      001269 12 51                    1         .word LINK 
                           00126B     2         LINK=.
      00126B 04                       3         .byte 4  
      00126C 57 4F 52 44              4         .ascii "WORD"
      001270                          5         WORDD:
      001270 CD 12 06         [ 4] 3111         CALL     PARSE
      001273 CD 0C E9         [ 4] 3112         CALL     HERE
      001276 CD 0B 78         [ 4] 3113         CALL     CELLP
                           000000  3114 .IF CASE_SENSE 
                                   3115         JP      PACKS 
                           000001  3116 .ELSE                 
      001279 CD 0D BA         [ 4] 3117         CALL     PACKS
                                   3118 ; uppercase TOKEN 
      00127C CD 06 1A         [ 4] 3119         CALL    DUPP 
      00127F CD 0C D2         [ 4] 3120         CALL    COUNT 
      001282 CD 05 E3         [ 4] 3121         CALL    TOR 
      001285 CD 04 B5         [ 4] 3122         CALL    BRAN 
      001288 12 B6                 3123         .word   UPPER2  
      00128A                       3124 UPPER:
      00128A CD 06 1A         [ 4] 3125         CALL    DUPP 
      00128D CD 05 02         [ 4] 3126         CALL    CAT
      001290 CD 06 1A         [ 4] 3127         CALL    DUPP 
      001293 CD 04 70         [ 4] 3128         CALL   DOLIT
      001296 00 61                 3129         .word   'a' 
      001298 CD 04 70         [ 4] 3130         CALL    DOLIT
      00129B 00 7B                 3131         .word   'z'+1 
      00129D CD 09 97         [ 4] 3132         CALL   WITHI 
      0012A0 CD 04 99         [ 4] 3133         CALL   QBRAN
      0012A3 12 AD                 3134         .word  UPPER1  
      0012A5 CD 04 70         [ 4] 3135         CALL    DOLIT 
      0012A8 00 DF                 3136         .word   0xDF 
      0012AA CD 06 77         [ 4] 3137         CALL    ANDD 
      0012AD                       3138 UPPER1:
      0012AD CD 06 42         [ 4] 3139         CALL    OVER 
      0012B0 CD 04 F1         [ 4] 3140         CALL    CSTOR          
      0012B3 CD 0B A3         [ 4] 3141         CALL    ONEP 
      0012B6                       3142 UPPER2: 
      0012B6 CD 04 84         [ 4] 3143         CALL    DONXT
      0012B9 12 8A                 3144         .word   UPPER  
      0012BB CD 06 10         [ 4] 3145         CALL    DROP  
      0012BE 81               [ 4] 3146         RET 
                                   3147 .ENDIF 
                                   3148 
                                   3149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3150 ;       TOKEN   ( -- a ; <string> )
                                   3151 ;       Parse a word from input stream
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3152 ;       and copy it to name dictionary.
                                   3153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012BF                       3154         _HEADER TOKEN,5,"TOKEN"
      0012BF 12 6B                    1         .word LINK 
                           0012C1     2         LINK=.
      0012C1 05                       3         .byte 5  
      0012C2 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0012C7                          5         TOKEN:
      0012C7 CD 0C 02         [ 4] 3155         CALL     BLANK
      0012CA CC 12 70         [ 2] 3156         JP     WORDD
                                   3157 
                                   3158 ;; Dictionary search
                                   3159 
                                   3160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3161 ;       NAME>   ( na -- ca )
                                   3162 ;       Return a code address given
                                   3163 ;       a name address.
                                   3164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012CD                       3165         _HEADER NAMET,5,"NAME>"
      0012CD 12 C1                    1         .word LINK 
                           0012CF     2         LINK=.
      0012CF 05                       3         .byte 5  
      0012D0 4E 41 4D 45 3E           4         .ascii "NAME>"
      0012D5                          5         NAMET:
      0012D5 CD 0C D2         [ 4] 3166         CALL     COUNT
      0012D8 CD 04 70         [ 4] 3167         CALL     DOLIT
      0012DB 00 1F                 3168         .word      31
      0012DD CD 06 77         [ 4] 3169         CALL     ANDD
      0012E0 CC 08 3D         [ 2] 3170         JP     PLUS
                                   3171 
                                   3172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3173 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3174 ;       Compare u cells in two
                                   3175 ;       strings. Return 0 if identical.
                                   3176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012E3                       3177         _HEADER SAMEQ,5,"SAME?"
      0012E3 12 CF                    1         .word LINK 
                           0012E5     2         LINK=.
      0012E5 05                       3         .byte 5  
      0012E6 53 41 4D 45 3F           4         .ascii "SAME?"
      0012EB                          5         SAMEQ:
      0012EB CD 0B B0         [ 4] 3178         CALL     ONEM
      0012EE CD 05 E3         [ 4] 3179         CALL     TOR
      0012F1 20 29            [ 2] 3180         JRA     SAME2
      0012F3 CD 06 42         [ 4] 3181 SAME1:  CALL     OVER
      0012F6 CD 05 46         [ 4] 3182         CALL     RAT
      0012F9 CD 08 3D         [ 4] 3183         CALL     PLUS
      0012FC CD 05 02         [ 4] 3184         CALL     CAT
      0012FF CD 06 42         [ 4] 3185         CALL     OVER
      001302 CD 05 46         [ 4] 3186         CALL     RAT
      001305 CD 08 3D         [ 4] 3187         CALL     PLUS
      001308 CD 05 02         [ 4] 3188         CALL     CAT
      00130B CD 08 D3         [ 4] 3189         CALL     SUBB
      00130E CD 07 CD         [ 4] 3190         CALL     QDUP
      001311 CD 04 99         [ 4] 3191         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001314 13 1C                 3192         .word      SAME2
      001316 CD 05 35         [ 4] 3193         CALL     RFROM
      001319 CC 06 10         [ 2] 3194         JP     DROP
      00131C CD 04 84         [ 4] 3195 SAME2:  CALL     DONXT
      00131F 12 F3                 3196         .word      SAME1
      001321 CC 0C 0F         [ 2] 3197         JP     ZERO
                                   3198 
                                   3199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3200 ;       find    ( a va -- ca na | a F )
                                   3201 ;       Search vocabulary for string.
                                   3202 ;       Return ca and na if succeeded.
                                   3203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001324                       3204         _HEADER FIND,4,"FIND"
      001324 12 E5                    1         .word LINK 
                           001326     2         LINK=.
      001326 04                       3         .byte 4  
      001327 46 49 4E 44              4         .ascii "FIND"
      00132B                          5         FIND:
      00132B CD 06 2A         [ 4] 3205         CALL     SWAPP
      00132E CD 06 1A         [ 4] 3206         CALL     DUPP
      001331 CD 05 02         [ 4] 3207         CALL     CAT
      001334 CD 06 EF         [ 4] 3208         CALL     TEMP
      001337 CD 04 D2         [ 4] 3209         CALL     STORE
      00133A CD 06 1A         [ 4] 3210         CALL     DUPP
      00133D CD 04 E4         [ 4] 3211         CALL     AT
      001340 CD 05 E3         [ 4] 3212         CALL     TOR
      001343 CD 0B 78         [ 4] 3213         CALL     CELLP
      001346 CD 06 2A         [ 4] 3214         CALL     SWAPP
      001349 CD 04 E4         [ 4] 3215 FIND1:  CALL     AT
      00134C CD 06 1A         [ 4] 3216         CALL     DUPP
      00134F CD 04 99         [ 4] 3217         CALL     QBRAN
      001352 13 88                 3218         .word      FIND6
      001354 CD 06 1A         [ 4] 3219         CALL     DUPP
      001357 CD 04 E4         [ 4] 3220         CALL     AT
      00135A CD 04 70         [ 4] 3221         CALL     DOLIT
      00135D 1F 7F                 3222         .word      MASKK
      00135F CD 06 77         [ 4] 3223         CALL     ANDD
      001362 CD 05 46         [ 4] 3224         CALL     RAT
      001365 CD 06 A0         [ 4] 3225         CALL     XORR
      001368 CD 04 99         [ 4] 3226         CALL     QBRAN
      00136B 13 77                 3227         .word      FIND2
      00136D CD 0B 78         [ 4] 3228         CALL     CELLP
      001370 CD 04 70         [ 4] 3229         CALL     DOLIT
      001373 FF FF                 3230         .word     0xFFFF
      001375 20 0C            [ 2] 3231         JRA     FIND3
      001377 CD 0B 78         [ 4] 3232 FIND2:  CALL     CELLP
      00137A CD 06 EF         [ 4] 3233         CALL     TEMP
      00137D CD 04 E4         [ 4] 3234         CALL     AT
      001380 CD 12 EB         [ 4] 3235         CALL     SAMEQ
      001383 CD 04 B5         [ 4] 3236 FIND3:  CALL     BRAN
      001386 13 97                 3237         .word      FIND4
      001388 CD 05 35         [ 4] 3238 FIND6:  CALL     RFROM
      00138B CD 06 10         [ 4] 3239         CALL     DROP
      00138E CD 06 2A         [ 4] 3240         CALL     SWAPP
      001391 CD 0B 87         [ 4] 3241         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001394 CC 06 2A         [ 2] 3242         JP     SWAPP
      001397 CD 04 99         [ 4] 3243 FIND4:  CALL     QBRAN
      00139A 13 A4                 3244         .word      FIND5
      00139C CD 0B 87         [ 4] 3245         CALL     CELLM
      00139F CD 0B 87         [ 4] 3246         CALL     CELLM
      0013A2 20 A5            [ 2] 3247         JRA     FIND1
      0013A4 CD 05 35         [ 4] 3248 FIND5:  CALL     RFROM
      0013A7 CD 06 10         [ 4] 3249         CALL     DROP
      0013AA CD 06 2A         [ 4] 3250         CALL     SWAPP
      0013AD CD 06 10         [ 4] 3251         CALL     DROP
      0013B0 CD 0B 87         [ 4] 3252         CALL     CELLM
      0013B3 CD 06 1A         [ 4] 3253         CALL     DUPP
      0013B6 CD 12 D5         [ 4] 3254         CALL     NAMET
      0013B9 CC 06 2A         [ 2] 3255         JP     SWAPP
                                   3256 
                                   3257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3258 ;       NAME?   ( a -- ca na | a F )
                                   3259 ;       Search vocabularies for a string.
                                   3260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013BC                       3261         _HEADER NAMEQ,5,"NAME?"
      0013BC 13 26                    1         .word LINK 
                           0013BE     2         LINK=.
      0013BE 05                       3         .byte 5  
      0013BF 4E 41 4D 45 3F           4         .ascii "NAME?"
      0013C4                          5         NAMEQ:
      0013C4 CD 07 63         [ 4] 3262         CALL   CNTXT
      0013C7 CC 13 2B         [ 2] 3263         JP     FIND
                                   3264 
                                   3265 ;; Terminal response
                                   3266 
                                   3267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3268 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3269 ;       Backup cursor by one character.
                                   3270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013CA                       3271         _HEADER BKSP,2,"^H"
      0013CA 13 BE                    1         .word LINK 
                           0013CC     2         LINK=.
      0013CC 02                       3         .byte 2  
      0013CD 5E 48                    4         .ascii "^H"
      0013CF                          5         BKSP:
      0013CF CD 05 E3         [ 4] 3272         CALL     TOR
      0013D2 CD 06 42         [ 4] 3273         CALL     OVER
      0013D5 CD 05 35         [ 4] 3274         CALL     RFROM
      0013D8 CD 06 2A         [ 4] 3275         CALL     SWAPP
      0013DB CD 06 42         [ 4] 3276         CALL     OVER
      0013DE CD 06 A0         [ 4] 3277         CALL     XORR
      0013E1 CD 04 99         [ 4] 3278         CALL     QBRAN
      0013E4 13 FF                 3279         .word      BACK1
      0013E6 CD 04 70         [ 4] 3280         CALL     DOLIT
      0013E9 00 08                 3281         .word      BKSPP
      0013EB CD 04 37         [ 4] 3282         CALL     EMIT
      0013EE CD 0B B0         [ 4] 3283         CALL     ONEM
      0013F1 CD 0C 02         [ 4] 3284         CALL     BLANK
      0013F4 CD 04 37         [ 4] 3285         CALL     EMIT
      0013F7 CD 04 70         [ 4] 3286         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0013FA 00 08                 3287         .word      BKSPP
      0013FC CC 04 37         [ 2] 3288         JP     EMIT
      0013FF 81               [ 4] 3289 BACK1:  RET
                                   3290 
                                   3291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3292 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3293 ;       Accept and echo key stroke
                                   3294 ;       and bump cursor.
                                   3295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001400                       3296         _HEADER TAP,3,"TAP"
      001400 13 CC                    1         .word LINK 
                           001402     2         LINK=.
      001402 03                       3         .byte 3  
      001403 54 41 50                 4         .ascii "TAP"
      001406                          5         TAP:
      001406 CD 06 1A         [ 4] 3297         CALL     DUPP
      001409 CD 04 37         [ 4] 3298         CALL     EMIT
      00140C CD 06 42         [ 4] 3299         CALL     OVER
      00140F CD 04 F1         [ 4] 3300         CALL     CSTOR
      001412 CC 0B A3         [ 2] 3301         JP     ONEP
                                   3302 
                                   3303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3304 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3305 ;       Process a key stroke,
                                   3306 ;       CR,LF or backspace.
                                   3307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001415                       3308         _HEADER KTAP,4,"KTAP"
      001415 14 02                    1         .word LINK 
                           001417     2         LINK=.
      001417 04                       3         .byte 4  
      001418 4B 54 41 50              4         .ascii "KTAP"
      00141C                          5         KTAP:
      00141C CD 06 1A         [ 4] 3309         CALL     DUPP
      00141F CD 04 70         [ 4] 3310         CALL     DOLIT
                           000001  3311 .if EOL_CR
      001422 00 0D                 3312         .word   CRR
                           000000  3313 .else ; EOL_LF 
                                   3314         .word   LF
                                   3315 .endif 
      001424 CD 06 A0         [ 4] 3316         CALL     XORR
      001427 CD 04 99         [ 4] 3317         CALL     QBRAN
      00142A 14 42                 3318         .word      KTAP2
      00142C CD 04 70         [ 4] 3319         CALL     DOLIT
      00142F 00 08                 3320         .word      BKSPP
      001431 CD 06 A0         [ 4] 3321         CALL     XORR
      001434 CD 04 99         [ 4] 3322         CALL     QBRAN
      001437 14 3F                 3323         .word      KTAP1
      001439 CD 0C 02         [ 4] 3324         CALL     BLANK
      00143C CC 14 06         [ 2] 3325         JP     TAP
      00143F CC 13 CF         [ 2] 3326 KTAP1:  JP     BKSP
      001442 CD 06 10         [ 4] 3327 KTAP2:  CALL     DROP
      001445 CD 06 2A         [ 4] 3328         CALL     SWAPP
      001448 CD 06 10         [ 4] 3329         CALL     DROP
      00144B CC 06 1A         [ 2] 3330         JP     DUPP
                                   3331 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3333 ;       accept  ( b u -- b u )
                                   3334 ;       Accept characters to input
                                   3335 ;       buffer. Return with actual count.
                                   3336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00144E                       3337         _HEADER ACCEP,6,"ACCEPT"
      00144E 14 17                    1         .word LINK 
                           001450     2         LINK=.
      001450 06                       3         .byte 6  
      001451 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001457                          5         ACCEP:
      001457 CD 06 42         [ 4] 3338         CALL     OVER
      00145A CD 08 3D         [ 4] 3339         CALL     PLUS
      00145D CD 06 42         [ 4] 3340         CALL     OVER
      001460 CD 08 28         [ 4] 3341 ACCP1:  CALL     DDUP
      001463 CD 06 A0         [ 4] 3342         CALL     XORR
      001466 CD 04 99         [ 4] 3343         CALL     QBRAN
      001469 14 8B                 3344         .word      ACCP4
      00146B CD 0F ED         [ 4] 3345         CALL     KEY
      00146E CD 06 1A         [ 4] 3346         CALL     DUPP
      001471 CD 0C 02         [ 4] 3347         CALL     BLANK
      001474 CD 04 70         [ 4] 3348         CALL     DOLIT
      001477 00 7F                 3349         .word      127
      001479 CD 09 97         [ 4] 3350         CALL     WITHI
      00147C CD 04 99         [ 4] 3351         CALL     QBRAN
      00147F 14 86                 3352         .word      ACCP2
      001481 CD 14 06         [ 4] 3353         CALL     TAP
      001484 20 03            [ 2] 3354         JRA     ACCP3
      001486 CD 14 1C         [ 4] 3355 ACCP2:  CALL     KTAP
      001489 20 D5            [ 2] 3356 ACCP3:  JRA     ACCP1
      00148B CD 06 10         [ 4] 3357 ACCP4:  CALL     DROP
      00148E CD 06 42         [ 4] 3358         CALL     OVER
      001491 CC 08 D3         [ 2] 3359         JP     SUBB
                                   3360 
                                   3361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3362 ;       QUERY   ( -- )
                                   3363 ;       Accept input stream to
                                   3364 ;       terminal input buffer.
                                   3365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001494                       3366         _HEADER QUERY,5,"QUERY"
      001494 14 50                    1         .word LINK 
                           001496     2         LINK=.
      001496 05                       3         .byte 5  
      001497 51 55 45 52 59           4         .ascii "QUERY"
      00149C                          5         QUERY:
      00149C CD 0D 0B         [ 4] 3367         CALL     TIB
      00149F CD 04 70         [ 4] 3368         CALL     DOLIT
      0014A2 00 50                 3369         .word      80
      0014A4 CD 14 57         [ 4] 3370         CALL     ACCEP
      0014A7 CD 07 0E         [ 4] 3371         CALL     NTIB
      0014AA CD 04 D2         [ 4] 3372         CALL     STORE
      0014AD CD 06 10         [ 4] 3373         CALL     DROP
      0014B0 CD 0C 0F         [ 4] 3374         CALL     ZERO
      0014B3 CD 06 FE         [ 4] 3375         CALL     INN
      0014B6 CC 04 D2         [ 2] 3376         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3377 
                                   3378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3379 ;       ABORT   ( -- )
                                   3380 ;       Reset data stack and
                                   3381 ;       jump to QUIT.
                                   3382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B9                       3383         _HEADER ABORT,5,"ABORT"
      0014B9 14 96                    1         .word LINK 
                           0014BB     2         LINK=.
      0014BB 05                       3         .byte 5  
      0014BC 41 42 4F 52 54           4         .ascii "ABORT"
      0014C1                          5         ABORT:
      0014C1 CD 15 B5         [ 4] 3384         CALL     PRESE
      0014C4 CC 15 D2         [ 2] 3385         JP     QUIT
                                   3386 
                                   3387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3388 ;       abort"  ( f -- )
                                   3389 ;       Run time routine of ABORT".
                                   3390 ;       Abort with a message.
                                   3391 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014C7                       3392         _HEADER ABORQ,COMPO+6,'ABORT"'
      0014C7 14 BB                    1         .word LINK 
                           0014C9     2         LINK=.
      0014C9 46                       3         .byte COMPO+6  
      0014CA 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0014D0                          5         ABORQ:
      0014D0 CD 04 99         [ 4] 3393         CALL     QBRAN
      0014D3 14 EF                 3394         .word      ABOR2   ;text flag
      0014D5 CD 10 78         [ 4] 3395         CALL     DOSTR
      0014D8 CD 10 25         [ 4] 3396 ABOR1:  CALL     SPACE
      0014DB CD 0C D2         [ 4] 3397         CALL     COUNT
      0014DE CD 10 4F         [ 4] 3398         CALL     TYPES
      0014E1 CD 04 70         [ 4] 3399         CALL     DOLIT
      0014E4 00 3F                 3400         .word     63 ; "?"
      0014E6 CD 04 37         [ 4] 3401         CALL     EMIT
      0014E9 CD 10 68         [ 4] 3402         CALL     CR
      0014EC CC 14 C1         [ 2] 3403         JP     ABORT   ;pass error string
      0014EF CD 10 78         [ 4] 3404 ABOR2:  CALL     DOSTR
      0014F2 CC 06 10         [ 2] 3405         JP     DROP
                                   3406 
                                   3407 ;; The text interpreter
                                   3408 
                                   3409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3410 ;       $INTERPRET      ( a -- )
                                   3411 ;       Interpret a word. If failed,
                                   3412 ;       try to convert it to an integer.
                                   3413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F5                       3414         _HEADER INTER,10,"$INTERPRET"
      0014F5 14 C9                    1         .word LINK 
                           0014F7     2         LINK=.
      0014F7 0A                       3         .byte 10  
      0014F8 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001502                          5         INTER:
      001502 CD 13 C4         [ 4] 3415         CALL     NAMEQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001505 CD 07 CD         [ 4] 3416         CALL     QDUP    ;?defined
      001508 CD 04 99         [ 4] 3417         CALL     QBRAN
      00150B 15 2C                 3418         .word      INTE1
      00150D CD 04 E4         [ 4] 3419         CALL     AT
      001510 CD 04 70         [ 4] 3420         CALL     DOLIT
      001513 40 00                 3421 	.word       0x4000	; COMPO*256
      001515 CD 06 77         [ 4] 3422         CALL     ANDD    ;?compile only lexicon bits
      001518 CD 14 D0         [ 4] 3423         CALL     ABORQ
      00151B 0D                    3424         .byte      13
      00151C 20 63 6F 6D 70 69 6C  3425         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001529 CC 04 C5         [ 2] 3426         JP      EXECU
      00152C                       3427 INTE1:  
      00152C CD 0F 1F         [ 4] 3428         CALL     NUMBQ   ;convert a number
      00152F CD 04 99         [ 4] 3429         CALL     QBRAN
      001532 14 D8                 3430         .word    ABOR1
      001534 81               [ 4] 3431         RET
                                   3432 
                                   3433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3434 ;       [       ( -- )
                                   3435 ;       Start  text interpreter.
                                   3436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001535                       3437         _HEADER LBRAC,IMEDD+1,"["
      001535 14 F7                    1         .word LINK 
                           001537     2         LINK=.
      001537 81                       3         .byte IMEDD+1  
      001538 5B                       4         .ascii "["
      001539                          5         LBRAC:
      001539 CD 04 70         [ 4] 3438         CALL   DOLIT
      00153C 15 02                 3439         .word  INTER
      00153E CD 07 41         [ 4] 3440         CALL   TEVAL
      001541 CC 04 D2         [ 2] 3441         JP     STORE
                                   3442 
                                   3443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3444 ;       .OK     ( -- )
                                   3445 ;       Display 'ok' while interpreting.
                                   3446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001544                       3447         _HEADER DOTOK,3,".OK"
      001544 15 37                    1         .word LINK 
                           001546     2         LINK=.
      001546 03                       3         .byte 3  
      001547 2E 4F 4B                 4         .ascii ".OK"
      00154A                          5         DOTOK:
      00154A CD 04 70         [ 4] 3448         CALL     DOLIT
      00154D 15 02                 3449         .word      INTER
      00154F CD 07 41         [ 4] 3450         CALL     TEVAL
      001552 CD 04 E4         [ 4] 3451         CALL     AT
      001555 CD 08 FB         [ 4] 3452         CALL     EQUAL
      001558 CD 04 99         [ 4] 3453         CALL     QBRAN
      00155B 15 64                 3454         .word      DOTO1
      00155D CD 10 95         [ 4] 3455         CALL     DOTQP
      001560 03                    3456         .byte      3
      001561 20 6F 6B              3457         .ascii     " ok"
      001564 CC 10 68         [ 2] 3458 DOTO1:  JP     CR
                                   3459 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   3460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3461 ;       ?STACK  ( -- )
                                   3462 ;       Abort if stack underflows.
                                   3463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001567                       3464         _HEADER QSTAC,6,"?STACK"
      001567 15 46                    1         .word LINK 
                           001569     2         LINK=.
      001569 06                       3         .byte 6  
      00156A 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001570                          5         QSTAC:
      001570 CD 0C 51         [ 4] 3465         CALL     DEPTH
      001573 CD 06 51         [ 4] 3466         CALL     ZLESS   ;check only for underflow
      001576 CD 14 D0         [ 4] 3467         CALL     ABORQ
      001579 0B                    3468         .byte      11
      00157A 20 75 6E 64 65 72 66  3469         .ascii     " underflow "
             6C 6F 77 20
      001585 81               [ 4] 3470         RET
                                   3471 
                                   3472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3473 ;       EVAL    ( -- )
                                   3474 ;       Interpret  input stream.
                                   3475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001586                       3476         _HEADER EVAL,4,"EVAL"
      001586 15 69                    1         .word LINK 
                           001588     2         LINK=.
      001588 04                       3         .byte 4  
      001589 45 56 41 4C              4         .ascii "EVAL"
      00158D                          5         EVAL:
      00158D CD 12 C7         [ 4] 3477 EVAL1:  CALL     TOKEN
      001590 CD 06 1A         [ 4] 3478         CALL     DUPP
      001593 CD 05 02         [ 4] 3479         CALL     CAT     ;?input stream empty
      001596 CD 04 99         [ 4] 3480         CALL     QBRAN
      001599 15 A6                 3481         .word    EVAL2
      00159B CD 07 41         [ 4] 3482         CALL     TEVAL
      00159E CD 0D 1F         [ 4] 3483         CALL     ATEXE
      0015A1 CD 15 70         [ 4] 3484         CALL     QSTAC   ;evaluate input, check stack
      0015A4 20 E7            [ 2] 3485         JRA     EVAL1 
      0015A6 CD 06 10         [ 4] 3486 EVAL2:  CALL     DROP
      0015A9 CC 15 4A         [ 2] 3487         JP       DOTOK
                                   3488 
                                   3489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3490 ;       PRESET  ( -- )
                                   3491 ;       Reset data stack pointer and
                                   3492 ;       terminal input buffer.
                                   3493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015AC                       3494         _HEADER PRESE,6,"PRESET"
      0015AC 15 88                    1         .word LINK 
                           0015AE     2         LINK=.
      0015AE 06                       3         .byte 6  
      0015AF 50 52 45 53 45 54        4         .ascii "PRESET"
      0015B5                          5         PRESE:
      0015B5 CD 04 70         [ 4] 3495         CALL     DOLIT
      0015B8 16 80                 3496         .word      SPP
      0015BA CD 06 07         [ 4] 3497         CALL     SPSTO
      0015BD CD 04 70         [ 4] 3498         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0015C0 17 00                 3499         .word      TIBB
      0015C2 CD 07 0E         [ 4] 3500         CALL     NTIB
      0015C5 CD 0B 78         [ 4] 3501         CALL     CELLP
      0015C8 CC 04 D2         [ 2] 3502         JP     STORE
                                   3503 
                                   3504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3505 ;       QUIT    ( -- )
                                   3506 ;       Reset return stack pointer
                                   3507 ;       and start text interpreter.
                                   3508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015CB                       3509         _HEADER QUIT,4,"QUIT"
      0015CB 15 AE                    1         .word LINK 
                           0015CD     2         LINK=.
      0015CD 04                       3         .byte 4  
      0015CE 51 55 49 54              4         .ascii "QUIT"
      0015D2                          5         QUIT:
      0015D2 CD 04 70         [ 4] 3510         CALL     DOLIT
      0015D5 17 FF                 3511         .word      RPP
      0015D7 CD 05 1F         [ 4] 3512         CALL     RPSTO   ;reset return stack pointer
      0015DA CD 15 39         [ 4] 3513 QUIT1:  CALL     LBRAC   ;start interpretation
      0015DD CD 14 9C         [ 4] 3514 QUIT2:  CALL     QUERY   ;get input
      0015E0 CD 15 8D         [ 4] 3515         CALL     EVAL
      0015E3 20 F8            [ 2] 3516         JRA     QUIT2   ;continue till error
                                   3517 
                                   3518 ;; The compiler
                                   3519 
                                   3520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3521 ;       '       ( -- ca )
                                   3522 ;       Search vocabularies for
                                   3523 ;       next word in input stream.
                                   3524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E5                       3525         _HEADER TICK,1,"'"
      0015E5 15 CD                    1         .word LINK 
                           0015E7     2         LINK=.
      0015E7 01                       3         .byte 1  
      0015E8 27                       4         .ascii "'"
      0015E9                          5         TICK:
      0015E9 CD 12 C7         [ 4] 3526         CALL     TOKEN
      0015EC CD 13 C4         [ 4] 3527         CALL     NAMEQ   ;?defined
      0015EF CD 04 99         [ 4] 3528         CALL     QBRAN
      0015F2 14 D8                 3529         .word      ABOR1
      0015F4 81               [ 4] 3530         RET     ;yes, push code address
                                   3531 
                                   3532 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3533 ;       ALLOT   ( n -- )
                                   3534 ;       Allocate n bytes to RAM 
                                   3535 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F5                       3536         _HEADER ALLOT,5,"ALLOT"
      0015F5 15 E7                    1         .word LINK 
                           0015F7     2         LINK=.
      0015F7 05                       3         .byte 5  
      0015F8 41 4C 4C 4F 54           4         .ascii "ALLOT"
      0015FD                          5         ALLOT:
      0015FD CD 07 71         [ 4] 3537         CALL     VPP
                                   3538 ; must update APP_VP each time VP is modidied
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001600 CD 0C 7F         [ 4] 3539         call PSTOR 
      001603 CC 1E 0C         [ 2] 3540         jp UPDATVP 
                                   3541 
                                   3542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3543 ;       ,       ( w -- )
                                   3544 ;         Compile an integer into
                                   3545 ;         variable space.
                                   3546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001606                       3547         _HEADER COMMA,1,^/"\,"/
      001606 15 F7                    1         .word LINK 
                           001608     2         LINK=.
      001608 01                       3         .byte 1  
      001609 5C 2C                    4         .ascii "\,"
      00160B                          5         COMMA:
      00160B CD 0C E9         [ 4] 3548         CALL     HERE
      00160E CD 06 1A         [ 4] 3549         CALL     DUPP
      001611 CD 0B 78         [ 4] 3550         CALL     CELLP   ;cell boundary
      001614 CD 07 71         [ 4] 3551         CALL     VPP
      001617 CD 04 D2         [ 4] 3552         CALL     STORE
      00161A CC 04 D2         [ 2] 3553         JP     STORE
                                   3554 
                                   3555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3556 ;       C,      ( c -- )
                                   3557 ;       Compile a byte into
                                   3558 ;       variables space.
                                   3559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00161D                       3560         _HEADER CCOMMA,2,^/"C,"/
      00161D 16 08                    1         .word LINK 
                           00161F     2         LINK=.
      00161F 02                       3         .byte 2  
      001620 43 2C                    4         .ascii "C,"
      001622                          5         CCOMMA:
      001622 CD 0C E9         [ 4] 3561         CALL     HERE
      001625 CD 06 1A         [ 4] 3562         CALL     DUPP
      001628 CD 0B A3         [ 4] 3563         CALL     ONEP
      00162B CD 07 71         [ 4] 3564         CALL     VPP
      00162E CD 04 D2         [ 4] 3565         CALL     STORE
      001631 CC 04 F1         [ 2] 3566         JP     CSTOR
                                   3567 
                                   3568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3569 ;       [COMPILE]       ( -- ; <string> )
                                   3570 ;       Compile next immediate
                                   3571 ;       word into code dictionary.
                                   3572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001634                       3573         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001634 16 1F                    1         .word LINK 
                           001636     2         LINK=.
      001636 89                       3         .byte IMEDD+9  
      001637 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001640                          5         BCOMP:
      001640 CD 15 E9         [ 4] 3574         CALL     TICK
      001643 CC 19 27         [ 2] 3575         JP     JSRC
                                   3576 
                                   3577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   3578 ;       COMPILE ( -- )
                                   3579 ;       Compile next jsr in
                                   3580 ;       colon list to code dictionary.
                                   3581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001646                       3582         _HEADER COMPI,COMPO+7,"COMPILE"
      001646 16 36                    1         .word LINK 
                           001648     2         LINK=.
      001648 47                       3         .byte COMPO+7  
      001649 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001650                          5         COMPI:
      001650 CD 05 35         [ 4] 3583         CALL     RFROM
      001653 CD 06 1A         [ 4] 3584         CALL     DUPP
      001656 CD 04 E4         [ 4] 3585         CALL     AT
      001659 CD 19 27         [ 4] 3586         CALL     JSRC    ;compile subroutine
      00165C CD 0B 78         [ 4] 3587         CALL     CELLP
      00165F 90 93            [ 1] 3588         ldw y,x 
      001661 90 FE            [ 2] 3589         ldw y,(y)
      001663 1C 00 02         [ 2] 3590         addw x,#CELLL 
      001666 90 FC            [ 2] 3591         jp (y)
                                   3592 
                                   3593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3594 ;       LITERAL ( w -- )
                                   3595 ;       Compile tos to dictionary
                                   3596 ;       as an integer literal.
                                   3597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001668                       3598         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      001668 16 48                    1         .word LINK 
                           00166A     2         LINK=.
      00166A C7                       3         .byte COMPO+IMEDD+7  
      00166B 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001672                          5         LITER:
      001672 CD 16 50         [ 4] 3599         CALL     COMPI
      001675 04 70                 3600         .word DOLIT 
      001677 CC 16 0B         [ 2] 3601         JP     COMMA
                                   3602 
                                   3603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3604 ;       $,"     ( -- )
                                   3605 ;       Compile a literal string
                                   3606 ;       up to next " .
                                   3607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3608 ;        _HEADER STRCQ,3,^/'$,"'/
      00167A                       3609 STRCQ:
      00167A CD 04 70         [ 4] 3610         CALL     DOLIT
      00167D 00 22                 3611         .word     34	; "
      00167F CD 12 06         [ 4] 3612         CALL     PARSE
      001682 CD 0C E9         [ 4] 3613         CALL     HERE
      001685 CD 0D BA         [ 4] 3614         CALL     PACKS   ;string to code dictionary
      001688 CD 0C D2         [ 4] 3615         CALL     COUNT
      00168B CD 08 3D         [ 4] 3616         CALL     PLUS    ;calculate aligned end of string
      00168E CD 07 71         [ 4] 3617         CALL     VPP
      001691 CC 04 D2         [ 2] 3618         JP     STORE
                                   3619 
                                   3620 ;; Structures
                                   3621 
                                   3622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3623 ;       FOR     ( -- a )
                                   3624 ;       Start a FOR-NEXT loop
                                   3625 ;       structure in a colon definition.
                                   3626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001694                       3627         _HEADER FOR,IMEDD+3,"FOR"
      001694 16 6A                    1         .word LINK 
                           001696     2         LINK=.
      001696 83                       3         .byte IMEDD+3  
      001697 46 4F 52                 4         .ascii "FOR"
      00169A                          5         FOR:
      00169A CD 16 50         [ 4] 3628         CALL     COMPI
      00169D 05 E3                 3629         .word TOR 
      00169F CC 0C E9         [ 2] 3630         JP     HERE
                                   3631 
                                   3632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3633 ;       NEXT    ( a -- )
                                   3634 ;       Terminate a FOR-NEXT loop.
                                   3635 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A2                       3636         _HEADER NEXT,IMEDD+4,"NEXT"
      0016A2 16 96                    1         .word LINK 
                           0016A4     2         LINK=.
      0016A4 84                       3         .byte IMEDD+4  
      0016A5 4E 45 58 54              4         .ascii "NEXT"
      0016A9                          5         NEXT:
      0016A9 CD 16 50         [ 4] 3637         CALL     COMPI
      0016AC 04 84                 3638         .word DONXT 
      0016AE CD 07 BD         [ 4] 3639         call ADRADJ
      0016B1 CC 16 0B         [ 2] 3640         JP     COMMA
                                   3641 
                                   3642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3643 ;       I ( -- n )
                                   3644 ;       stack COUNTER
                                   3645 ;       of innermost FOR-NEXT  
                                   3646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016B4                       3647         _HEADER IFETCH,1,"I"
      0016B4 16 A4                    1         .word LINK 
                           0016B6     2         LINK=.
      0016B6 01                       3         .byte 1  
      0016B7 49                       4         .ascii "I"
      0016B8                          5         IFETCH:
      0016B8 1D 00 02         [ 2] 3648         subw x,#CELLL 
      0016BB 16 03            [ 2] 3649         ldw y,(3,sp)
      0016BD FF               [ 2] 3650         ldw (x),y 
      0016BE 81               [ 4] 3651         ret 
                                   3652 
                                   3653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3654 ;       J ( -- n )
                                   3655 ;   stack COUNTER
                                   3656 ;   of outer FOR-NEXT  
                                   3657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016BF                       3658         _HEADER JFETCH,1,"J"
      0016BF 16 B6                    1         .word LINK 
                           0016C1     2         LINK=.
      0016C1 01                       3         .byte 1  
      0016C2 4A                       4         .ascii "J"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0016C3                          5         JFETCH:
      0016C3 1D 00 02         [ 2] 3659         SUBW X,#CELLL 
      0016C6 16 05            [ 2] 3660         LDW Y,(5,SP)
      0016C8 FF               [ 2] 3661         LDW (X),Y 
      0016C9 81               [ 4] 3662         RET 
                                   3663 
                                   3664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3665 ;       BEGIN   ( -- a )
                                   3666 ;       Start an infinite or
                                   3667 ;       indefinite loop structure.
                                   3668 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016CA                       3669         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0016CA 16 C1                    1         .word LINK 
                           0016CC     2         LINK=.
      0016CC 85                       3         .byte IMEDD+5  
      0016CD 42 45 47 49 4E           4         .ascii "BEGIN"
      0016D2                          5         BEGIN:
      0016D2 CC 0C E9         [ 2] 3670         JP     HERE
                                   3671 
                                   3672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3673 ;       UNTIL   ( a -- )
                                   3674 ;       Terminate a BEGIN-UNTIL
                                   3675 ;       indefinite loop structure.
                                   3676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D5                       3677         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0016D5 16 CC                    1         .word LINK 
                           0016D7     2         LINK=.
      0016D7 85                       3         .byte IMEDD+5  
      0016D8 55 4E 54 49 4C           4         .ascii "UNTIL"
      0016DD                          5         UNTIL:
      0016DD CD 16 50         [ 4] 3678         CALL     COMPI
      0016E0 04 99                 3679         .word    QBRAN 
      0016E2 CD 07 BD         [ 4] 3680         call ADRADJ
      0016E5 CC 16 0B         [ 2] 3681         JP     COMMA
                                   3682 
                                   3683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3684 ;       AGAIN   ( a -- )
                                   3685 ;       Terminate a BEGIN-AGAIN
                                   3686 ;       infinite loop structure.
                                   3687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E8                       3688         _HEADER AGAIN,IMEDD+5,"AGAIN"
      0016E8 16 D7                    1         .word LINK 
                           0016EA     2         LINK=.
      0016EA 85                       3         .byte IMEDD+5  
      0016EB 41 47 41 49 4E           4         .ascii "AGAIN"
      0016F0                          5         AGAIN:
                           000001  3689 .if OPTIMIZE 
      0016F0                       3690         _DOLIT JPIMM 
      0016F0 CD 04 70         [ 4]    1     CALL DOLIT 
      0016F3 00 CC                    2     .word JPIMM 
      0016F5 CD 16 22         [ 4] 3691         CALL  CCOMMA
                           000000  3692 .else 
                                   3693         CALL     COMPI
                                   3694         .word BRAN
                                   3695 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0016F8 CD 07 BD         [ 4] 3696         call ADRADJ 
      0016FB CC 16 0B         [ 2] 3697         JP     COMMA
                                   3698 
                                   3699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3700 ;       IF      ( -- A )
                                   3701 ;       Begin a conditional branch.
                                   3702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016FE                       3703         _HEADER IFF,IMEDD+2,"IF"
      0016FE 16 EA                    1         .word LINK 
                           001700     2         LINK=.
      001700 82                       3         .byte IMEDD+2  
      001701 49 46                    4         .ascii "IF"
      001703                          5         IFF:
      001703 CD 16 50         [ 4] 3704         CALL     COMPI
      001706 04 99                 3705         .word QBRAN
      001708 CD 0C E9         [ 4] 3706         CALL     HERE
      00170B CD 0C 0F         [ 4] 3707         CALL     ZERO
      00170E CC 16 0B         [ 2] 3708         JP     COMMA
                                   3709 
                                   3710 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3711 ;       THEN        ( A -- )
                                   3712 ;       Terminate a conditional 
                                   3713 ;       branch structure.
                                   3714 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001711                       3715         _HEADER THENN,IMEDD+4,"THEN"
      001711 17 00                    1         .word LINK 
                           001713     2         LINK=.
      001713 84                       3         .byte IMEDD+4  
      001714 54 48 45 4E              4         .ascii "THEN"
      001718                          5         THENN:
      001718 CD 0C E9         [ 4] 3716         CALL     HERE
      00171B CD 07 BD         [ 4] 3717         call ADRADJ 
      00171E CD 06 2A         [ 4] 3718         CALL     SWAPP
      001721 CC 04 D2         [ 2] 3719         JP     STORE
                                   3720 
                                   3721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3722 ;       ELSE        ( A -- A )
                                   3723 ;       Start the false clause in 
                                   3724 ;       an IF-ELSE-THEN structure.
                                   3725 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001724                       3726         _HEADER ELSEE,IMEDD+4,"ELSE"
      001724 17 13                    1         .word LINK 
                           001726     2         LINK=.
      001726 84                       3         .byte IMEDD+4  
      001727 45 4C 53 45              4         .ascii "ELSE"
      00172B                          5         ELSEE:
                           000001  3727 .if OPTIMIZE 
      00172B                       3728         _DOLIT JPIMM 
      00172B CD 04 70         [ 4]    1     CALL DOLIT 
      00172E 00 CC                    2     .word JPIMM 
      001730 CD 16 22         [ 4] 3729         CALL CCOMMA 
                           000000  3730 .else 
                                   3731          CALL     COMPI
                                   3732         .word BRAN
                                   3733 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001733 CD 0C E9         [ 4] 3734         CALL     HERE
      001736 CD 0C 0F         [ 4] 3735         CALL     ZERO
      001739 CD 16 0B         [ 4] 3736         CALL     COMMA
      00173C CD 06 2A         [ 4] 3737         CALL     SWAPP
      00173F CD 0C E9         [ 4] 3738         CALL     HERE
      001742 CD 07 BD         [ 4] 3739         call ADRADJ 
      001745 CD 06 2A         [ 4] 3740         CALL     SWAPP
      001748 CC 04 D2         [ 2] 3741         JP     STORE
                                   3742 
                                   3743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3744 ;       AHEAD       ( -- A )
                                   3745 ;       Compile a forward branch
                                   3746 ;       instruction.
                                   3747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00174B                       3748         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00174B 17 26                    1         .word LINK 
                           00174D     2         LINK=.
      00174D 85                       3         .byte IMEDD+5  
      00174E 41 48 45 41 44           4         .ascii "AHEAD"
      001753                          5         AHEAD:
                           000001  3749 .if OPTIMIZE 
      001753                       3750         _DOLIT JPIMM 
      001753 CD 04 70         [ 4]    1     CALL DOLIT 
      001756 00 CC                    2     .word JPIMM 
      001758 CD 16 22         [ 4] 3751         CALL CCOMMA
                           000000  3752 .else 
                                   3753         CALL     COMPI
                                   3754         .word BRAN
                                   3755 .endif 
      00175B CD 0C E9         [ 4] 3756         CALL     HERE
      00175E CD 0C 0F         [ 4] 3757         CALL     ZERO
      001761 CC 16 0B         [ 2] 3758         JP     COMMA
                                   3759 
                                   3760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3761 ;       WHILE       ( a -- A a )
                                   3762 ;       Conditional branch out of a 
                                   3763 ;       BEGIN-WHILE-REPEAT loop.
                                   3764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001764                       3765         _HEADER WHILE,IMEDD+5,"WHILE"
      001764 17 4D                    1         .word LINK 
                           001766     2         LINK=.
      001766 85                       3         .byte IMEDD+5  
      001767 57 48 49 4C 45           4         .ascii "WHILE"
      00176C                          5         WHILE:
      00176C CD 16 50         [ 4] 3766         CALL     COMPI
      00176F 04 99                 3767         .word QBRAN
      001771 CD 0C E9         [ 4] 3768         CALL     HERE
      001774 CD 0C 0F         [ 4] 3769         CALL     ZERO
      001777 CD 16 0B         [ 4] 3770         CALL     COMMA
      00177A CC 06 2A         [ 2] 3771         JP     SWAPP
                                   3772 
                                   3773 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3774 ;       REPEAT      ( A a -- )
                                   3775 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3776 ;       indefinite loop.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   3777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00177D                       3778         _HEADER REPEA,IMEDD+6,"REPEAT"
      00177D 17 66                    1         .word LINK 
                           00177F     2         LINK=.
      00177F 86                       3         .byte IMEDD+6  
      001780 52 45 50 45 41 54        4         .ascii "REPEAT"
      001786                          5         REPEA:
                           000001  3779 .if OPTIMIZE 
      001786                       3780         _DOLIT JPIMM 
      001786 CD 04 70         [ 4]    1     CALL DOLIT 
      001789 00 CC                    2     .word JPIMM 
      00178B CD 16 22         [ 4] 3781         CALL  CCOMMA
                           000000  3782 .else 
                                   3783         CALL     COMPI
                                   3784         .word BRAN
                                   3785 .endif 
      00178E CD 07 BD         [ 4] 3786         call ADRADJ 
      001791 CD 16 0B         [ 4] 3787         CALL     COMMA
      001794 CD 0C E9         [ 4] 3788         CALL     HERE
      001797 CD 07 BD         [ 4] 3789         call ADRADJ 
      00179A CD 06 2A         [ 4] 3790         CALL     SWAPP
      00179D CC 04 D2         [ 2] 3791         JP     STORE
                                   3792 
                                   3793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3794 ;       AFT         ( a -- a A )
                                   3795 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3796 ;       loop the first time through.
                                   3797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017A0                       3798         _HEADER AFT,IMEDD+3,"AFT"
      0017A0 17 7F                    1         .word LINK 
                           0017A2     2         LINK=.
      0017A2 83                       3         .byte IMEDD+3  
      0017A3 41 46 54                 4         .ascii "AFT"
      0017A6                          5         AFT:
      0017A6 CD 06 10         [ 4] 3799         CALL     DROP
      0017A9 CD 17 53         [ 4] 3800         CALL     AHEAD
      0017AC CD 0C E9         [ 4] 3801         CALL     HERE
      0017AF CC 06 2A         [ 2] 3802         JP     SWAPP
                                   3803 
                                   3804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3805 ;       ABORT"      ( -- ; <string> )
                                   3806 ;       Conditional abort with an error message.
                                   3807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B2                       3808         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0017B2 17 A2                    1         .word LINK 
                           0017B4     2         LINK=.
      0017B4 86                       3         .byte IMEDD+6  
      0017B5 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0017BB                          5         ABRTQ:
      0017BB CD 16 50         [ 4] 3809         CALL     COMPI
      0017BE 14 D0                 3810         .word ABORQ
      0017C0 CC 16 7A         [ 2] 3811         JP     STRCQ
                                   3812 
                                   3813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3814 ;       $"     ( -- ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   3815 ;       Compile an inline string literal.
                                   3816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C3                       3817         _HEADER STRQ,IMEDD+2,'$"'
      0017C3 17 B4                    1         .word LINK 
                           0017C5     2         LINK=.
      0017C5 82                       3         .byte IMEDD+2  
      0017C6 24 22                    4         .ascii '$"'
      0017C8                          5         STRQ:
      0017C8 CD 16 50         [ 4] 3818         CALL     COMPI
      0017CB 10 91                 3819         .word STRQP 
      0017CD CC 16 7A         [ 2] 3820         JP     STRCQ
                                   3821 
                                   3822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3823 ;       ."          ( -- ; <string> )
                                   3824 ;       Compile an inline string literal 
                                   3825 ;       to be typed out at run time.
                                   3826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017D0                       3827         _HEADER DOTQ,IMEDD+2,'."'
      0017D0 17 C5                    1         .word LINK 
                           0017D2     2         LINK=.
      0017D2 82                       3         .byte IMEDD+2  
      0017D3 2E 22                    4         .ascii '."'
      0017D5                          5         DOTQ:
      0017D5 CD 16 50         [ 4] 3828         CALL     COMPI
      0017D8 10 95                 3829         .word DOTQP 
      0017DA CC 16 7A         [ 2] 3830         JP     STRCQ
                                   3831 
                                   3832 ;; Name compiler
                                   3833 
                                   3834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3835 ;       ?UNIQUE ( a -- a )
                                   3836 ;       Display a warning message
                                   3837 ;       if word already exists.
                                   3838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017DD                       3839         _HEADER UNIQU,7,"?UNIQUE"
      0017DD 17 D2                    1         .word LINK 
                           0017DF     2         LINK=.
      0017DF 07                       3         .byte 7  
      0017E0 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      0017E7                          5         UNIQU:
      0017E7 CD 06 1A         [ 4] 3840         CALL     DUPP
      0017EA CD 13 C4         [ 4] 3841         CALL     NAMEQ   ;?name exists
      0017ED CD 04 99         [ 4] 3842         CALL     QBRAN
      0017F0 18 06                 3843         .word      UNIQ1
      0017F2 CD 10 95         [ 4] 3844         CALL     DOTQP   ;redef are OK
      0017F5 07                    3845         .byte       7
      0017F6 20 72 65 44 65 66 20  3846         .ascii     " reDef "       
      0017FD CD 06 42         [ 4] 3847         CALL     OVER
      001800 CD 0C D2         [ 4] 3848         CALL     COUNT
      001803 CD 10 4F         [ 4] 3849         CALL     TYPES   ;just in case
      001806 CC 06 10         [ 2] 3850 UNIQ1:  JP     DROP
                                   3851 
                                   3852 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3853 ;       $,n     ( na -- )
                                   3854 ;       Build a new dictionary name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   3855 ;       using string at na.
                                   3856 ; compile dans l'espace des variables 
                                   3857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3858 ;        _HEADER SNAME,3,^/"$,n"/
      001809                       3859 SNAME: 
      001809 CD 06 1A         [ 4] 3860         CALL     DUPP
      00180C CD 05 02         [ 4] 3861         CALL     CAT     ;?null input
      00180F CD 04 99         [ 4] 3862         CALL     QBRAN
      001812 18 3F                 3863         .word      PNAM1
      001814 CD 17 E7         [ 4] 3864         CALL     UNIQU   ;?redefinition
      001817 CD 06 1A         [ 4] 3865         CALL     DUPP
      00181A CD 0C D2         [ 4] 3866         CALL     COUNT
      00181D CD 08 3D         [ 4] 3867         CALL     PLUS
      001820 CD 07 71         [ 4] 3868         CALL     VPP
      001823 CD 04 D2         [ 4] 3869         CALL     STORE
      001826 CD 06 1A         [ 4] 3870         CALL     DUPP
      001829 CD 07 8F         [ 4] 3871         CALL     LAST
      00182C CD 04 D2         [ 4] 3872         CALL     STORE   ;save na for vocabulary link
      00182F CD 0B 87         [ 4] 3873         CALL     CELLM   ;link address
      001832 CD 07 63         [ 4] 3874         CALL     CNTXT
      001835 CD 04 E4         [ 4] 3875         CALL     AT
      001838 CD 06 2A         [ 4] 3876         CALL     SWAPP
      00183B CD 04 D2         [ 4] 3877         CALL     STORE
      00183E 81               [ 4] 3878         RET     ;save code pointer
      00183F CD 10 91         [ 4] 3879 PNAM1:  CALL     STRQP
      001842 05                    3880         .byte      5
      001843 20 6E 61 6D 65        3881         .ascii     " name" ;null input
      001848 CC 14 D8         [ 2] 3882         JP     ABOR1
                                   3883 
                                   3884 ;; FORTH compiler
                                   3885 
                                   3886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3887 ;       $COMPILE        ( a -- )
                                   3888 ;       Compile next word to
                                   3889 ;       dictionary as a token or literal.
                                   3890 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00184B                       3891         _HEADER SCOMP,8,"$COMPILE"
      00184B 17 DF                    1         .word LINK 
                           00184D     2         LINK=.
      00184D 08                       3         .byte 8  
      00184E 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001856                          5         SCOMP:
      001856 CD 13 C4         [ 4] 3892         CALL     NAMEQ
      001859 CD 07 CD         [ 4] 3893         CALL     QDUP    ;?defined
      00185C CD 04 99         [ 4] 3894         CALL     QBRAN
      00185F 18 77                 3895         .word      SCOM2
      001861 CD 04 E4         [ 4] 3896         CALL     AT
      001864 CD 04 70         [ 4] 3897         CALL     DOLIT
      001867 80 00                 3898         .word     0x8000	;  IMEDD*256
      001869 CD 06 77         [ 4] 3899         CALL     ANDD    ;?immediate
      00186C CD 04 99         [ 4] 3900         CALL     QBRAN
      00186F 18 74                 3901         .word      SCOM1
      001871 CC 04 C5         [ 2] 3902         JP     EXECU
      001874 CC 19 27         [ 2] 3903 SCOM1:  JP     JSRC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001877 CD 0F 1F         [ 4] 3904 SCOM2:  CALL     NUMBQ   ;try to convert to number 
      00187A CD 07 CD         [ 4] 3905         CALL    QDUP  
      00187D CD 04 99         [ 4] 3906         CALL     QBRAN
      001880 14 D8                 3907         .word      ABOR1
                           000000  3908 .if WANT_DOUBLE 
                                   3909         _DOLIT  -1
                                   3910         CALL    EQUAL
                                   3911         _QBRAN DLITER
                                   3912         JP  LITER 
                                   3913 .endif 
                           000001  3914 .if WANT_FLOAT24 
      001882                       3915         _DOLIT -1 
      001882 CD 04 70         [ 4]    1     CALL DOLIT 
      001885 FF FF                    2     .word -1 
      001887 CD 08 FB         [ 4] 3916         CALL EQUAL 
      00188A                       3917         _QBRAN FLITER
      00188A CD 04 99         [ 4]    1     CALL QBRAN
      00188D 2A 0C                    2     .word FLITER
      00188F CC 16 72         [ 2] 3918         JP  LITER  
                                   3919 .endif 
      001892                       3920         _DROP 
      001892 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001895 CC 16 72         [ 2] 3921         JP     LITER
                                   3922 
                                   3923 
                                   3924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3925 ;       OVERT   ( -- )
                                   3926 ;       Link a new word into vocabulary.
                                   3927 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001898                       3928         _HEADER OVERT,5,"OVERT"
      001898 18 4D                    1         .word LINK 
                           00189A     2         LINK=.
      00189A 05                       3         .byte 5  
      00189B 4F 56 45 52 54           4         .ascii "OVERT"
      0018A0                          5         OVERT:
      0018A0 CD 07 8F         [ 4] 3929         CALL     LAST
      0018A3 CD 04 E4         [ 4] 3930         CALL     AT
      0018A6 CD 07 63         [ 4] 3931         CALL     CNTXT
      0018A9 CC 04 D2         [ 2] 3932         JP     STORE
                                   3933 
                                   3934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3935 ;       ;       ( -- )
                                   3936 ;       Terminate a colon definition.
                                   3937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018AC                       3938         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0018AC 18 9A                    1         .word LINK 
                           0018AE     2         LINK=.
      0018AE C1                       3         .byte IMEDD+COMPO+1  
      0018AF 3B                       4         .ascii ";"
      0018B0                          5         SEMIS:
                           000001  3939 .if OPTIMIZE ; more compact and faster
      0018B0 CD 04 70         [ 4] 3940         call DOLIT 
      0018B3 00 81                 3941         .word 0x81   ; opcode for RET 
      0018B5 CD 16 22         [ 4] 3942         call CCOMMA 
                           000000  3943 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   3944         CALL     COMPI
                                   3945         .word EXIT 
                                   3946 .endif 
      0018B8 CD 15 39         [ 4] 3947         CALL     LBRAC
      0018BB CD 18 A0         [ 4] 3948         call OVERT 
      0018BE CD 23 64         [ 4] 3949         CALL FMOVE
      0018C1 CD 07 CD         [ 4] 3950         call QDUP 
      0018C4 CD 04 99         [ 4] 3951         call QBRAN 
      0018C7 1A 3D                 3952         .word SET_RAMLAST 
      0018C9 CD 23 F8         [ 4] 3953         CALL UPDATPTR
      0018CC 81               [ 4] 3954         RET 
                                   3955 
                                   3956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3957 ;       Terminate an ISR definition 
                                   3958 ;       retourn ca of ISR as double
                                   3959 ;       I; ( -- ud )
                                   3960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018CD                       3961        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0018CD 18 AE                    1         .word LINK 
                           0018CF     2         LINK=.
      0018CF C2                       3         .byte 2+IMEDD+COMPO  
      0018D0 49 3B                    4         .ascii "I;"
      0018D2                          5         ISEMI:
      0018D2 1D 00 02         [ 2] 3962         subw x,#CELLL  
      0018D5 90 AE 00 80      [ 2] 3963         ldw y,#IRET_CODE 
      0018D9 FF               [ 2] 3964         ldw (x),y 
      0018DA CD 16 22         [ 4] 3965         call CCOMMA
      0018DD CD 15 39         [ 4] 3966         call LBRAC 
      0018E0 CD 24 3D         [ 4] 3967         call IFMOVE
      0018E3 CD 07 CD         [ 4] 3968         call QDUP 
      0018E6 CD 04 99         [ 4] 3969         CALL QBRAN 
      0018E9 1A 3D                 3970         .word SET_RAMLAST
      0018EB CD 07 7F         [ 4] 3971         CALL CPP
      0018EE CD 04 E4         [ 4] 3972         call AT 
      0018F1 CD 06 2A         [ 4] 3973         call SWAPP 
      0018F4 CD 07 7F         [ 4] 3974         CALL CPP 
      0018F7 CD 04 D2         [ 4] 3975         call STORE 
      0018FA CD 1D F5         [ 4] 3976         call UPDATCP 
      0018FD CD 1D B2         [ 4] 3977         call EEPVP 
      001900                       3978         _DROP 
      001900 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001903 CD 04 E4         [ 4] 3979         call AT 
      001906 CD 07 71         [ 4] 3980         call VPP 
      001909 CD 04 D2         [ 4] 3981         call STORE 
      00190C CC 0C 0F         [ 2] 3982         jp ZERO
      00190F 81               [ 4] 3983         ret           
                                   3984         
                                   3985 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3986 ;       ]       ( -- )
                                   3987 ;       Start compiling words in
                                   3988 ;       input stream.
                                   3989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001910                       3990         _HEADER RBRAC,1,"]"
      001910 18 CF                    1         .word LINK 
                           001912     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001912 01                       3         .byte 1  
      001913 5D                       4         .ascii "]"
      001914                          5         RBRAC:
      001914 CD 04 70         [ 4] 3991         CALL   DOLIT
      001917 18 56                 3992         .word  SCOMP
      001919 CD 07 41         [ 4] 3993         CALL   TEVAL
      00191C CC 04 D2         [ 2] 3994         JP     STORE
                                   3995 
                                   3996 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3997 ;       CALL,    ( ca -- )
                                   3998 ;       Compile a subroutine call.
                                   3999 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00191F                       4000         _HEADER JSRC,5,^/"CALL,"/
      00191F 19 12                    1         .word LINK 
                           001921     2         LINK=.
      001921 05                       3         .byte 5  
      001922 43 41 4C 4C 2C           4         .ascii "CALL,"
      001927                          5         JSRC:
                           000001  4001 .if OPTIMIZE 
                                   4002 ;;;;; optimization code ;;;;;;;;;;;;;;;
      001927 90 AE 06 10      [ 2] 4003         LDW Y,#DROP 
      00192B 90 BF 26         [ 2] 4004         LDW YTEMP,Y 
      00192E 90 93            [ 1] 4005         LDW Y,X 
      001930 90 FE            [ 2] 4006         LDW Y,(Y)
      001932 90 B3 26         [ 2] 4007         CPW Y,YTEMP 
      001935 26 13            [ 1] 4008         JRNE JSRC1         
                                   4009 ; replace CALL DROP BY  ADDW X,#CELLL 
      001937 1C 00 02         [ 2] 4010         ADDW X,#CELLL 
      00193A                       4011         _DOLIT ADDWX ; opcode 
      00193A CD 04 70         [ 4]    1     CALL DOLIT 
      00193D 00 1C                    2     .word ADDWX 
      00193F CD 16 22         [ 4] 4012         CALL   CCOMMA 
      001942                       4013         _DOLIT CELLL 
      001942 CD 04 70         [ 4]    1     CALL DOLIT 
      001945 00 02                    2     .word CELLL 
      001947 CC 16 0B         [ 2] 4014         JP      COMMA 
      00194A                       4015 JSRC1: ; check for DDROP 
      00194A 90 AE 08 1D      [ 2] 4016         LDW Y,#DDROP 
      00194E 90 BF 26         [ 2] 4017         LDW YTEMP,Y 
      001951 90 93            [ 1] 4018         LDW Y,X 
      001953 90 FE            [ 2] 4019         LDW Y,(Y)
      001955 90 B3 26         [ 2] 4020         CPW Y,YTEMP 
      001958 26 13            [ 1] 4021         JRNE JSRC2 
                                   4022 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      00195A 1C 00 02         [ 2] 4023         ADDW X,#CELLL 
      00195D                       4024         _DOLIT ADDWX 
      00195D CD 04 70         [ 4]    1     CALL DOLIT 
      001960 00 1C                    2     .word ADDWX 
      001962 CD 16 22         [ 4] 4025         CALL  CCOMMA 
      001965                       4026         _DOLIT 2*CELLL 
      001965 CD 04 70         [ 4]    1     CALL DOLIT 
      001968 00 04                    2     .word 2*CELLL 
      00196A CC 16 0B         [ 2] 4027         JP  COMMA 
      00196D                       4028 JSRC2: 
                                   4029 ;;;;;;;; end optimization code ;;;;;;;;;;        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4030 .endif        
      00196D CD 04 70         [ 4] 4031         CALL     DOLIT
      001970 00 CD                 4032         .word     CALLL     ;CALL
      001972 CD 16 22         [ 4] 4033         CALL     CCOMMA
      001975 CC 16 0B         [ 2] 4034         JP     COMMA
                                   4035 
                                   4036 ;       INIT-OFS ( -- )
                                   4037 ;       compute offset to adjust jump address 
                                   4038 ;       set variable OFFSET 
      001978 19 21                 4039         .word LINK 
                           00197A  4040         LINK=.
      00197A 08                    4041         .byte 8 
      00197B 49 4E 49 54 2D 4F 46  4042         .ascii "INIT-OFS" 
             53
      001983                       4043 INITOFS:
      001983 CD 07 30         [ 4] 4044         call TFLASH 
      001986 CD 04 E4         [ 4] 4045         CALL AT 
      001989 CD 06 1A         [ 4] 4046         CALL DUPP 
      00198C CD 04 99         [ 4] 4047         call QBRAN
      00198F 19 A0                 4048         .word 1$
      001991                       4049         _DROP  
      001991 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001994 CD 07 7F         [ 4] 4050         call CPP 
      001997 CD 04 E4         [ 4] 4051         call AT 
      00199A CD 0C E9         [ 4] 4052         call HERE
      00199D CD 08 D3         [ 4] 4053         call SUBB 
      0019A0 CD 07 B4         [ 4] 4054 1$:     call OFFSET 
      0019A3 CC 04 D2         [ 2] 4055         jp STORE  
                                   4056 
                                   4057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4058 ;       :       ( -- ; <string> )
                                   4059 ;       Start a new colon definition
                                   4060 ;       using next word as its name.
                                   4061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019A6                       4062         _HEADER COLON,1,":"
      0019A6 19 7A                    1         .word LINK 
                           0019A8     2         LINK=.
      0019A8 01                       3         .byte 1  
      0019A9 3A                       4         .ascii ":"
      0019AA                          5         COLON:
      0019AA CD 19 83         [ 4] 4063         call INITOFS       
      0019AD CD 12 C7         [ 4] 4064         CALL   TOKEN
      0019B0 CD 18 09         [ 4] 4065         CALL   SNAME
      0019B3 CC 19 14         [ 2] 4066         JP     RBRAC
                                   4067 
                                   4068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4069 ;       I:  ( -- )
                                   4070 ;       Start interrupt service 
                                   4071 ;       routine definition
                                   4072 ;       those definition have 
                                   4073 ;       no name.
                                   4074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019B6                       4075         _HEADER ICOLON,2,"I:"
      0019B6 19 A8                    1         .word LINK 
                           0019B8     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019B8 02                       3         .byte 2  
      0019B9 49 3A                    4         .ascii "I:"
      0019BB                          5         ICOLON:
      0019BB CD 19 83         [ 4] 4076         call INITOFS 
      0019BE CC 19 14         [ 2] 4077         jp RBRAC  
                                   4078 
                                   4079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4080 ;       IMMEDIATE       ( -- )
                                   4081 ;       Make last compiled word
                                   4082 ;       an immediate word.
                                   4083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019C1                       4084         _HEADER IMMED,9,"IMMEDIATE"
      0019C1 19 B8                    1         .word LINK 
                           0019C3     2         LINK=.
      0019C3 09                       3         .byte 9  
      0019C4 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0019CD                          5         IMMED:
      0019CD CD 04 70         [ 4] 4085         CALL     DOLIT
      0019D0 80 00                 4086         .word     0x8000	;  IMEDD*256
      0019D2 CD 07 8F         [ 4] 4087         CALL     LAST
      0019D5 CD 04 E4         [ 4] 4088         CALL     AT
      0019D8 CD 04 E4         [ 4] 4089         CALL     AT
      0019DB CD 06 8B         [ 4] 4090         CALL     ORR
      0019DE CD 07 8F         [ 4] 4091         CALL     LAST
      0019E1 CD 04 E4         [ 4] 4092         CALL     AT
      0019E4 CC 04 D2         [ 2] 4093         JP     STORE
                                   4094 
                                   4095 ;; Defining words
                                   4096 
                                   4097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4098 ;       CREATE  ( -- ; <string> )
                                   4099 ;       Compile a new array
                                   4100 ;       without allocating space.
                                   4101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019E7                       4102         _HEADER CREAT,6,"CREATE"
      0019E7 19 C3                    1         .word LINK 
                           0019E9     2         LINK=.
      0019E9 06                       3         .byte 6  
      0019EA 43 52 45 41 54 45        4         .ascii "CREATE"
      0019F0                          5         CREAT:
      0019F0 CD 12 C7         [ 4] 4103         CALL     TOKEN
      0019F3 CD 18 09         [ 4] 4104         CALL     SNAME
      0019F6 CD 18 A0         [ 4] 4105         CALL     OVERT        
      0019F9 CD 16 50         [ 4] 4106         CALL     COMPI 
      0019FC 06 D0                 4107         .word DOVAR 
      0019FE 81               [ 4] 4108         RET
                                   4109 
                                   4110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4111 ;       VARIABLE  ( -- ; <string> )
                                   4112 ;       Compile a new variable
                                   4113 ;       initialized to 0.
                                   4114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019FF                       4115         _HEADER VARIA,8,"VARIABLE"
      0019FF 19 E9                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           001A01     2         LINK=.
      001A01 08                       3         .byte 8  
      001A02 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001A0A                          5         VARIA:
                                   4116 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001A0A CD 0C E9         [ 4] 4117         CALL HERE
      001A0D CD 06 1A         [ 4] 4118         CALL DUPP 
      001A10 CD 0B 78         [ 4] 4119         CALL CELLP
      001A13 CD 07 71         [ 4] 4120         CALL VPP 
      001A16 CD 04 D2         [ 4] 4121         CALL STORE
      001A19 CD 19 F0         [ 4] 4122         CALL CREAT
      001A1C CD 06 1A         [ 4] 4123         CALL DUPP
      001A1F CD 16 0B         [ 4] 4124         CALL COMMA
      001A22 CD 0C 0F         [ 4] 4125         CALL ZERO
      001A25 CD 06 2A         [ 4] 4126         call SWAPP 
      001A28 CD 04 D2         [ 4] 4127         CALL STORE
      001A2B CD 23 64         [ 4] 4128         CALL FMOVE ; move definition to FLASH
      001A2E CD 07 CD         [ 4] 4129         CALL QDUP 
      001A31 CD 04 99         [ 4] 4130         CALL QBRAN 
      001A34 1A 3D                 4131         .word SET_RAMLAST   
      001A36 CD 1E 0C         [ 4] 4132         call UPDATVP  ; don't update if variable kept in RAM.
      001A39 CD 23 F8         [ 4] 4133         CALL UPDATPTR
      001A3C 81               [ 4] 4134         RET         
      001A3D                       4135 SET_RAMLAST: 
      001A3D CD 07 8F         [ 4] 4136         CALL LAST 
      001A40 CD 04 E4         [ 4] 4137         CALL AT 
      001A43 CD 07 A2         [ 4] 4138         CALL RAMLAST 
      001A46 CC 04 D2         [ 2] 4139         JP STORE  
                                   4140 
                                   4141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4142 ;       CONSTANT  ( n -- ; <string> )
                                   4143 ;       Compile a new constant 
                                   4144 ;       n CONSTANT name 
                                   4145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A49                       4146         _HEADER CONSTANT,8,"CONSTANT"
      001A49 1A 01                    1         .word LINK 
                           001A4B     2         LINK=.
      001A4B 08                       3         .byte 8  
      001A4C 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001A54                          5         CONSTANT:
      001A54 CD 12 C7         [ 4] 4147         CALL TOKEN
      001A57 CD 18 09         [ 4] 4148         CALL SNAME 
      001A5A CD 18 A0         [ 4] 4149         CALL OVERT 
      001A5D CD 16 50         [ 4] 4150         CALL COMPI 
      001A60 1A 74                 4151         .word DOCONST
      001A62 CD 16 0B         [ 4] 4152         CALL COMMA 
      001A65 CD 23 64         [ 4] 4153         CALL FMOVE
      001A68 CD 07 CD         [ 4] 4154         CALL QDUP 
      001A6B CD 04 99         [ 4] 4155         CALL QBRAN 
      001A6E 1A 3D                 4156         .word SET_RAMLAST  
      001A70 CD 23 F8         [ 4] 4157         CALL UPDATPTR  
      001A73 81               [ 4] 4158 1$:     RET          
                                   4159 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4161 ; CONSTANT runtime semantic 
                                   4162 ; doCONST  ( -- n )
                                   4163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4164 ;       _HEADER DOCONST,7,"DOCONST"
      001A74                       4165 DOCONST:
      001A74 1D 00 02         [ 2] 4166         subw x,#CELLL
      001A77 90 85            [ 2] 4167         popw y 
      001A79 90 FE            [ 2] 4168         ldw y,(y) 
      001A7B FF               [ 2] 4169         ldw (x),y 
      001A7C 81               [ 4] 4170         ret 
                                   4171 
                                   4172 ;----------------------------------
                                   4173 ; create double constant 
                                   4174 ; 2CONSTANT ( d -- ; <string> )
                                   4175 ;----------------------------------
      001A7D                       4176         _HEADER DCONST,9,"2CONSTANT"
      001A7D 1A 4B                    1         .word LINK 
                           001A7F     2         LINK=.
      001A7F 09                       3         .byte 9  
      001A80 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001A89                          5         DCONST:
      001A89 CD 12 C7         [ 4] 4177         CALL TOKEN
      001A8C CD 18 09         [ 4] 4178         CALL SNAME 
      001A8F CD 18 A0         [ 4] 4179         CALL OVERT 
      001A92 CD 16 50         [ 4] 4180         CALL COMPI 
      001A95 1A AC                 4181         .word DO_DCONST
      001A97 CD 16 0B         [ 4] 4182         CALL COMMA
      001A9A CD 16 0B         [ 4] 4183         CALL COMMA  
      001A9D CD 23 64         [ 4] 4184         CALL FMOVE
      001AA0 CD 07 CD         [ 4] 4185         CALL QDUP 
      001AA3 CD 04 99         [ 4] 4186         CALL QBRAN 
      001AA6 1A 3D                 4187         .word SET_RAMLAST  
      001AA8 CD 23 F8         [ 4] 4188         CALL UPDATPTR  
      001AAB 81               [ 4] 4189 1$:     RET          
                                   4190     
                                   4191 ;----------------------------------
                                   4192 ; runtime for DCONST 
                                   4193 ; stack double constant 
                                   4194 ; DO-DCONST ( -- d )
                                   4195 ;-----------------------------------
                                   4196 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001AAC                       4197 DO_DCONST:
      001AAC 90 85            [ 2] 4198     popw y 
      001AAE 90 BF 26         [ 2] 4199     ldw YTEMP,y 
      001AB1 1D 00 04         [ 2] 4200     subw x,#2*CELLL 
      001AB4 90 FE            [ 2] 4201     ldw y,(y)
      001AB6 FF               [ 2] 4202     ldw (x),y 
      001AB7 90 BE 26         [ 2] 4203     ldw y,YTEMP 
      001ABA 90 EE 02         [ 2] 4204     ldw y,(2,y)
      001ABD EF 02            [ 2] 4205     ldw (2,x),y 
      001ABF 81               [ 4] 4206     ret 
                                   4207 
                                   4208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4209 ;;          TOOLS 
                                   4210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4211 
                                   4212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4213 ;       _TYPE   ( b u -- )
                                   4214 ;       Display a string. Filter
                                   4215 ;       non-printing characters.
                                   4216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AC0                       4217         _HEADER UTYPE,5,"_TYPE"
      001AC0 1A 7F                    1         .word LINK 
                           001AC2     2         LINK=.
      001AC2 05                       3         .byte 5  
      001AC3 5F 54 59 50 45           4         .ascii "_TYPE"
      001AC8                          5         UTYPE:
      001AC8 CD 05 E3         [ 4] 4218         CALL     TOR     ;start count down loop
      001ACB 20 0F            [ 2] 4219         JRA     UTYP2   ;skip first pass
      001ACD CD 06 1A         [ 4] 4220 UTYP1:  CALL     DUPP
      001AD0 CD 05 02         [ 4] 4221         CALL     CAT
      001AD3 CD 0C 39         [ 4] 4222         CALL     TCHAR
      001AD6 CD 04 37         [ 4] 4223         CALL     EMIT    ;display only printable
      001AD9 CD 0B A3         [ 4] 4224         CALL     ONEP    ;increment address
      001ADC CD 04 84         [ 4] 4225 UTYP2:  CALL     DONXT
      001ADF 1A CD                 4226         .word      UTYP1   ;loop till done
      001AE1 CC 06 10         [ 2] 4227         JP     DROP
                                   4228 
                                   4229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4230 ;       dm+     ( a u -- a )
                                   4231 ;       Dump u bytes from ,
                                   4232 ;       leaving a+u on  stack.
                                   4233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AE4                       4234         _HEADER DUMPP,3,"DM+"
      001AE4 1A C2                    1         .word LINK 
                           001AE6     2         LINK=.
      001AE6 03                       3         .byte 3  
      001AE7 44 4D 2B                 4         .ascii "DM+"
      001AEA                          5         DUMPP:
      001AEA CD 06 42         [ 4] 4235         CALL     OVER
      001AED CD 04 70         [ 4] 4236         CALL     DOLIT
      001AF0 00 04                 4237         .word      4
      001AF2 CD 10 BE         [ 4] 4238         CALL     UDOTR   ;display address
      001AF5 CD 10 25         [ 4] 4239         CALL     SPACE
      001AF8 CD 05 E3         [ 4] 4240         CALL     TOR     ;start count down loop
      001AFB 20 11            [ 2] 4241         JRA     PDUM2   ;skip first pass
      001AFD CD 06 1A         [ 4] 4242 PDUM1:  CALL     DUPP
      001B00 CD 05 02         [ 4] 4243         CALL     CAT
      001B03 CD 04 70         [ 4] 4244         CALL     DOLIT
      001B06 00 03                 4245         .word      3
      001B08 CD 10 BE         [ 4] 4246         CALL     UDOTR   ;display numeric data
      001B0B CD 0B A3         [ 4] 4247         CALL     ONEP    ;increment address
      001B0E CD 04 84         [ 4] 4248 PDUM2:  CALL     DONXT
      001B11 1A FD                 4249         .word      PDUM1   ;loop till done
      001B13 81               [ 4] 4250         RET
                                   4251 
                                   4252 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4253 ;       DUMP    ( a u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   4254 ;       Dump u bytes from a,
                                   4255 ;       in a formatted manner.
                                   4256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B14                       4257         _HEADER DUMP,4,"DUMP"
      001B14 1A E6                    1         .word LINK 
                           001B16     2         LINK=.
      001B16 04                       3         .byte 4  
      001B17 44 55 4D 50              4         .ascii "DUMP"
      001B1B                          5         DUMP:
      001B1B CD 06 E0         [ 4] 4258         CALL     BASE
      001B1E CD 04 E4         [ 4] 4259         CALL     AT
      001B21 CD 05 E3         [ 4] 4260         CALL     TOR
      001B24 CD 0E B2         [ 4] 4261         CALL     HEX     ;save radix, set hex
      001B27 CD 04 70         [ 4] 4262         CALL     DOLIT
      001B2A 00 10                 4263         .word      16
      001B2C CD 0A C9         [ 4] 4264         CALL     SLASH   ;change count to lines
      001B2F CD 05 E3         [ 4] 4265         CALL     TOR     ;start count down loop
      001B32 CD 10 68         [ 4] 4266 DUMP1:  CALL     CR
      001B35 CD 04 70         [ 4] 4267         CALL     DOLIT
      001B38 00 10                 4268         .word      16
      001B3A CD 08 28         [ 4] 4269         CALL     DDUP
      001B3D CD 1A EA         [ 4] 4270         CALL     DUMPP   ;display numeric
      001B40 CD 07 DE         [ 4] 4271         CALL     ROT
      001B43 CD 07 DE         [ 4] 4272         CALL     ROT
      001B46 CD 10 25         [ 4] 4273         CALL     SPACE
      001B49 CD 10 25         [ 4] 4274         CALL     SPACE
      001B4C CD 1A C8         [ 4] 4275         CALL     UTYPE   ;display printable characters
      001B4F CD 04 84         [ 4] 4276         CALL     DONXT
      001B52 1B 32                 4277         .word      DUMP1   ;loop till done
      001B54 CD 06 10         [ 4] 4278 DUMP3:  CALL     DROP
      001B57 CD 05 35         [ 4] 4279         CALL     RFROM
      001B5A CD 06 E0         [ 4] 4280         CALL     BASE
      001B5D CC 04 D2         [ 2] 4281         JP     STORE   ;restore radix
                                   4282 
                                   4283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4284 ;       .S      ( ... -- ... )
                                   4285 ;        Display  contents of stack.
                                   4286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B60                       4287         _HEADER DOTS,2,".S"
      001B60 1B 16                    1         .word LINK 
                           001B62     2         LINK=.
      001B62 02                       3         .byte 2  
      001B63 2E 53                    4         .ascii ".S"
      001B65                          5         DOTS:
      001B65 CD 10 68         [ 4] 4288         CALL     CR
      001B68 CD 0C 51         [ 4] 4289         CALL     DEPTH   ;stack depth
      001B6B CD 05 E3         [ 4] 4290         CALL     TOR     ;start count down loop
      001B6E 20 09            [ 2] 4291         JRA     DOTS2   ;skip first pass
      001B70 CD 05 46         [ 4] 4292 DOTS1:  CALL     RAT
      001B73 CD 0C 68         [ 4] 4293 	CALL     PICK
      001B76 CD 11 0E         [ 4] 4294         CALL     DOT     ;index stack, display contents
      001B79 CD 04 84         [ 4] 4295 DOTS2:  CALL     DONXT
      001B7C 1B 70                 4296         .word      DOTS1   ;loop till done
      001B7E CD 10 95         [ 4] 4297         CALL     DOTQP
      001B81 05                    4298         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001B82 20 3C 73 70 20        4299         .ascii     " <sp "
      001B87 81               [ 4] 4300         RET
                                   4301 
                                   4302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4303 ;       >NAME   ( ca -- na | F )
                                   4304 ;       Convert code address
                                   4305 ;       to a name address.
                                   4306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B88                       4307         _HEADER TNAME,5,">NAME"
      001B88 1B 62                    1         .word LINK 
                           001B8A     2         LINK=.
      001B8A 05                       3         .byte 5  
      001B8B 3E 4E 41 4D 45           4         .ascii ">NAME"
      001B90                          5         TNAME:
      001B90 CD 07 63         [ 4] 4308         CALL     CNTXT   ;vocabulary link
      001B93 CD 04 E4         [ 4] 4309 TNAM2:  CALL     AT
      001B96 CD 06 1A         [ 4] 4310         CALL     DUPP    ;?last word in a vocabulary
      001B99 CD 04 99         [ 4] 4311         CALL     QBRAN
      001B9C 1B B7                 4312         .word      TNAM4
      001B9E CD 08 28         [ 4] 4313         CALL     DDUP
      001BA1 CD 12 D5         [ 4] 4314         CALL     NAMET
      001BA4 CD 06 A0         [ 4] 4315         CALL     XORR    ;compare
      001BA7 CD 04 99         [ 4] 4316         CALL     QBRAN
      001BAA 1B B1                 4317         .word      TNAM3
      001BAC CD 0B 87         [ 4] 4318         CALL     CELLM   ;continue with next word
      001BAF 20 E2            [ 2] 4319         JRA     TNAM2
      001BB1 CD 06 2A         [ 4] 4320 TNAM3:  CALL     SWAPP
      001BB4 CC 06 10         [ 2] 4321         JP     DROP
      001BB7 CD 08 1D         [ 4] 4322 TNAM4:  CALL     DDROP
      001BBA CC 0C 0F         [ 2] 4323         JP     ZERO
                                   4324 
                                   4325 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4326 ;       .ID     ( na -- )
                                   4327 ;        Display  name at address.
                                   4328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BBD                       4329         _HEADER DOTID,3,".ID"
      001BBD 1B 8A                    1         .word LINK 
                           001BBF     2         LINK=.
      001BBF 03                       3         .byte 3  
      001BC0 2E 49 44                 4         .ascii ".ID"
      001BC3                          5         DOTID:
      001BC3 CD 07 CD         [ 4] 4330         CALL     QDUP    ;if zero no name
      001BC6 CD 04 99         [ 4] 4331         CALL     QBRAN
      001BC9 1B D9                 4332         .word      DOTI1
      001BCB CD 0C D2         [ 4] 4333         CALL     COUNT
      001BCE CD 04 70         [ 4] 4334         CALL     DOLIT
      001BD1 00 1F                 4335         .word      0x1F
      001BD3 CD 06 77         [ 4] 4336         CALL     ANDD    ;mask lexicon bits
      001BD6 CC 1A C8         [ 2] 4337         JP     UTYPE
      001BD9 CD 10 95         [ 4] 4338 DOTI1:  CALL     DOTQP
      001BDC 09                    4339         .byte      9
      001BDD 20 6E 6F 4E 61 6D 65  4340         .ascii     " noName"
      001BE4 81               [ 4] 4341         RET
                                   4342 
                           000000  4343 WANT_SEE=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           000000  4344 .if WANT_SEE 
                                   4345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4346 ;       SEE     ( -- ; <string> )
                                   4347 ;       A simple decompiler.
                                   4348 ;       Updated for byte machines.
                                   4349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4350         _HEADER SEE,3,"SEE"
                                   4351         CALL     TICK    ;starting address
                                   4352         CALL     CR
                                   4353         CALL     ONEM
                                   4354 SEE1:   CALL     ONEP
                                   4355         CALL     DUPP
                                   4356         CALL     AT
                                   4357         CALL     DUPP
                                   4358         CALL     QBRAN
                                   4359         .word    SEE2
                                   4360         CALL     TNAME   ;?is it a name
                                   4361 SEE2:   CALL     QDUP    ;name address or zero
                                   4362         CALL     QBRAN
                                   4363         .word    SEE3
                                   4364         CALL     SPACE
                                   4365         CALL     DOTID   ;display name
                                   4366         CALL     ONEP
                                   4367         JRA      SEE4
                                   4368 SEE3:   CALL     DUPP
                                   4369         CALL     CAT
                                   4370         CALL     UDOT    ;display number
                                   4371 SEE4:   CALL     NUFQ    ;user control
                                   4372         CALL     QBRAN
                                   4373         .word    SEE1
                                   4374         JP     DROP
                                   4375 .endif ; WANT_SEE 
                                   4376 
                                   4377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4378 ;       WORDS   ( -- )
                                   4379 ;       Display names in vocabulary.
                                   4380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BE5                       4381         _HEADER WORDS,5,"WORDS"
      001BE5 1B BF                    1         .word LINK 
                           001BE7     2         LINK=.
      001BE7 05                       3         .byte 5  
      001BE8 57 4F 52 44 53           4         .ascii "WORDS"
      001BED                          5         WORDS:
      001BED CD 10 68         [ 4] 4382         CALL     CR
      001BF0 CD 07 63         [ 4] 4383         CALL     CNTXT   ;only in context
      001BF3 CD 04 E4         [ 4] 4384 WORS1:  CALL     AT
      001BF6 CD 07 CD         [ 4] 4385         CALL     QDUP    ;?at end of list
      001BF9 CD 04 99         [ 4] 4386         CALL     QBRAN
      001BFC 1C 0F                 4387         .word      WORS2
      001BFE CD 06 1A         [ 4] 4388         CALL     DUPP
      001C01 CD 10 25         [ 4] 4389         CALL     SPACE
      001C04 CD 1B C3         [ 4] 4390         CALL     DOTID   ;display a name
      001C07 CD 0B 87         [ 4] 4391         CALL     CELLM
      001C0A CD 04 B5         [ 4] 4392         CALL     BRAN
      001C0D 1B F3                 4393         .word      WORS1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001C0F 81               [ 4] 4394 WORS2:  RET
                                   4395 
                                   4396         
                                   4397 ;; Hardware reset
                                   4398 
                                   4399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4400 ;  COPYRIGTH
                                   4401 ; print copyright notice 
                                   4402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C10                       4403 COPYRIGHT:
      001C10 CD 10 95         [ 4] 4404     CALL DOTQP 
      001C13 21                    4405     .byte 33 
      001C14 4A 61 63 71 75 65 73  4406     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001C35 CC 10 68         [ 2] 4407     JP CR 
                                   4408 
                                   4409 
                                   4410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4411 ;  PRT_LICENCE 
                                   4412 ;  print GPLV2 licence 
                                   4413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C38                       4414 PRT_LICENCE:
      001C38 CD 10 95         [ 4] 4415         CALL DOTQP 
      001C3B 0F                    4416         .byte  15 
      001C3C 4C 49 43 45 4E 43 45  4417         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001C4B 81               [ 4] 4418         RET 
                                   4419 
                                   4420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4421 ;    PRINT_VERSION ( c1 c2 -- )
                                   4422 ;    c2 minor 
                                   4423 ;    c1 major 
                                   4424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C4C                       4425 PRINT_VERSION:
      001C4C CD 10 95         [ 4] 4426      CALL DOTQP 
      001C4F 09                    4427      .byte 9
      001C50 20 76 65 72 73 69 6F  4428      .ascii " version "
             6E 20
      001C59 CD 0E 17         [ 4] 4429      CALL BDIGS 
      001C5C CD 0E 51         [ 4] 4430      CALL DIGS 
      001C5F CD 0E 51         [ 4] 4431      CALL DIGS 
      001C62                       4432      _DOLIT '.' 
      001C62 CD 04 70         [ 4]    1     CALL DOLIT 
      001C65 00 2E                    2     .word '.' 
      001C67 CD 0E 27         [ 4] 4433      CALL HOLD 
      001C6A                       4434      _DROP 
      001C6A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001C6D CD 0E 51         [ 4] 4435      CALL DIGS 
      001C70 CD 0E 7C         [ 4] 4436      CALL EDIGS 
      001C73 CC 10 4F         [ 2] 4437      JP TYPES 
                                   4438       
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4439 
                                   4440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4441 ;       hi      ( -- )
                                   4442 ;       Display sign-on message.
                                   4443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C76                       4444         _HEADER HI,2,"HI"
      001C76 1B E7                    1         .word LINK 
                           001C78     2         LINK=.
      001C78 02                       3         .byte 2  
      001C79 48 49                    4         .ascii "HI"
      001C7B                          5         HI:
      001C7B CD 10 68         [ 4] 4445         CALL     CR
      001C7E CD 10 95         [ 4] 4446         CALL     DOTQP   
      001C81 0A                    4447         .byte      10
      001C82 73 74 6D 38 65 46 6F  4448         .ascii     "stm8eForth"
             72 74 68
      001C8C                       4449 	_DOLIT VER 
      001C8C CD 04 70         [ 4]    1     CALL DOLIT 
      001C8F 00 04                    2     .word VER 
      001C91                       4450         _DOLIT EXT 
      001C91 CD 04 70         [ 4]    1     CALL DOLIT 
      001C94 00 00                    2     .word EXT 
      001C96 CD 1C 4C         [ 4] 4451         CALL PRINT_VERSION 
      001C99 CD 10 95         [ 4] 4452         CALL    DOTQP
                           000001  4453 .if NUCLEO          
      001C9C 12                    4454         .byte 18
      001C9D 20 6F 6E 20 4E 55 43  4455         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4456 .endif
                           000000  4457 .if DISCOVERY
                                   4458         .byte 19
                                   4459         .ascii  " on STM8S-DISCOVERY"
                                   4460 .endif
                           000000  4461 .if DOORBELL
                                   4462         .byte 16
                                   4463         .ascii " on stm8s105k6b6"
                                   4464 .endif
      001CAF CC 10 68         [ 2] 4465         JP     CR
                                   4466 
                           000000  4467 WANT_DEBUG=0
                           000000  4468 .if WANT_DEBUG 
                                   4469 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4470 ;       DEBUG      ( -- )
                                   4471 ;       Display sign-on message.
                                   4472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4473         _HEADER DEBUG,5,"DEBUG"
                                   4474 	CALL DOLIT
                                   4475 	.word 0x65
                                   4476 	CALL EMIT
                                   4477 	CALL ZERO
                                   4478  	CALL ZLESS 
                                   4479 	CALL DOLIT
                                   4480 	.word 0xFFFE
                                   4481 	CALL ZLESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4482 	CALL UPLUS 
                                   4483  	_DROP 
                                   4484 	CALL DOLIT
                                   4485 	.word 3
                                   4486 	CALL UPLUS 
                                   4487 	CALL UPLUS 
                                   4488  	_DROP
                                   4489 	CALL DOLIT
                                   4490 	.word 0x43
                                   4491 	CALL UPLUS 
                                   4492  	_DROP
                                   4493 	CALL EMIT
                                   4494 	CALL DOLIT
                                   4495 	.word 0x4F
                                   4496 	CALL DOLIT
                                   4497 	.word 0x6F
                                   4498  	CALL XORR
                                   4499 	CALL DOLIT
                                   4500 	.word 0xF0
                                   4501  	CALL ANDD
                                   4502 	CALL DOLIT
                                   4503 	.word 0x4F
                                   4504  	CALL ORR
                                   4505 	CALL EMIT
                                   4506 	CALL DOLIT
                                   4507 	.word 8
                                   4508 	CALL DOLIT
                                   4509 	.word 6
                                   4510  	CALL SWAPP
                                   4511 	CALL OVER
                                   4512 	CALL XORR
                                   4513 	CALL DOLIT
                                   4514 	.word 3
                                   4515 	CALL ANDD 
                                   4516 	CALL ANDD
                                   4517 	CALL DOLIT
                                   4518 	.word 0x70
                                   4519 	CALL UPLUS 
                                   4520 	_DROP
                                   4521 	CALL EMIT
                                   4522 	CALL ZERO
                                   4523 	CALL QBRAN
                                   4524 	.word DEBUG1
                                   4525 	CALL DOLIT
                                   4526 	.word 0x3F
                                   4527 DEBUG1:
                                   4528 	CALL DOLIT
                                   4529 	.word 0xFFFF
                                   4530 	CALL QBRAN
                                   4531 	.word DEBUG2
                                   4532 	CALL DOLIT
                                   4533 	.word 0x74
                                   4534 	CALL BRAN
                                   4535 	.word DEBUG3
                                   4536 DEBUG2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4537 	CALL DOLIT
                                   4538 	.word 0x21
                                   4539 DEBUG3:
                                   4540 	CALL EMIT
                                   4541 	CALL DOLIT
                                   4542 	.word 0x68
                                   4543 	CALL DOLIT
                                   4544 	.word 0x80
                                   4545 	CALL STORE
                                   4546 	CALL DOLIT
                                   4547 	.word 0x80
                                   4548 	CALL AT
                                   4549 	CALL EMIT
                                   4550 	CALL DOLIT
                                   4551 	.word 0x4D
                                   4552 	CALL TOR
                                   4553 	CALL RAT
                                   4554 	CALL RFROM
                                   4555 	CALL ANDD
                                   4556 	CALL EMIT
                                   4557 	CALL DOLIT
                                   4558 	.word 0x61
                                   4559 	CALL DOLIT
                                   4560 	.word 0xA
                                   4561 	CALL TOR
                                   4562 DEBUG4:
                                   4563 	CALL ONE
                                   4564 	CALL UPLUS 
                                   4565 	_DROP
                                   4566 	CALL DONXT
                                   4567 	.word DEBUG4
                                   4568 	CALL EMIT
                                   4569 	CALL DOLIT
                                   4570 	.word 0x656D
                                   4571 	CALL DOLIT
                                   4572 	.word 0x100
                                   4573 	CALL UMSTA
                                   4574 	CALL SWAPP
                                   4575 	CALL DOLIT
                                   4576 	.word 0x100
                                   4577 	CALL UMSTA
                                   4578 	CALL SWAPP 
                                   4579 	_DROP
                                   4580 	CALL EMIT
                                   4581 	CALL EMIT
                                   4582 	CALL DOLIT
                                   4583 	.word 0x2043
                                   4584 	CALL ZERO
                                   4585 	CALL DOLIT
                                   4586 	.word 0x100
                                   4587 	CALL UMMOD
                                   4588 	CALL EMIT
                                   4589 	CALL EMIT
                                   4590 	;JP ORIG
                                   4591 	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4592 .endif ; WANT_DEBUG 
                                   4593 
                                   4594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4595 ;       'BOOT   ( -- a )
                                   4596 ;       The application startup vector.
                                   4597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CB2                       4598         _HEADER TBOOT,5,"'BOOT"
      001CB2 1C 78                    1         .word LINK 
                           001CB4     2         LINK=.
      001CB4 05                       3         .byte 5  
      001CB5 27 42 4F 4F 54           4         .ascii "'BOOT"
      001CBA                          5         TBOOT:
      001CBA CD 06 D0         [ 4] 4599         CALL     DOVAR
      001CBD 40 02                 4600         .word    APP_RUN      ;application to boot
                                   4601 
                                   4602 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4603 ;       COLD    ( -- )
                                   4604 ;       The hilevel cold start s=ence.
                                   4605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CBF                       4606         _HEADER COLD,4,"COLD"
      001CBF 1C B4                    1         .word LINK 
                           001CC1     2         LINK=.
      001CC1 04                       3         .byte 4  
      001CC2 43 4F 4C 44              4         .ascii "COLD"
      001CC6                          5         COLD:
                           000000  4607 .if WANT_DEBUG
                                   4608         CALL DEBUG
                                   4609 .endif ; WANT_DEBUG
      001CC6 CD 04 70         [ 4] 4610 COLD1:  CALL     DOLIT
      001CC9 00 2B                 4611         .word      UZERO
      001CCB CD 04 70         [ 4] 4612 	CALL     DOLIT
      001CCE 00 06                 4613         .word      UPP
      001CD0 CD 04 70         [ 4] 4614         CALL     DOLIT
      001CD3 00 1C                 4615 	.word      UEND-UZERO
      001CD5 CD 0D 36         [ 4] 4616         CALL     CMOVE   ;initialize user area
                           000001  4617 .if WANT_FLOAT + WANT_FLOAT24 
      001CD8 CD 25 B5         [ 4] 4618         CALL    FINIT 
                                   4619 .endif 
                                   4620 ; if APP_RUN==0 initialize with ca de 'hi'  
      001CDB 90 CE 40 02      [ 2] 4621         ldw y,APP_RUN 
      001CDF 26 0B            [ 1] 4622         jrne 0$
      001CE1 1D 00 02         [ 2] 4623         subw x,#CELLL 
      001CE4 90 AE 1C 7B      [ 2] 4624         ldw y,#HI  
      001CE8 FF               [ 2] 4625         ldw (x),y
      001CE9 CD 1D E4         [ 4] 4626         call UPDATRUN 
      001CEC                       4627 0$:        
                                   4628 ; update LAST with APP_LAST 
                                   4629 ; if APP_LAST > LAST else do the opposite
      001CEC 90 CE 40 00      [ 2] 4630         ldw y,APP_LAST 
      001CF0 90 B3 1C         [ 2] 4631         cpw y,ULAST 
      001CF3 22 05            [ 1] 4632         jrugt 1$ 
                                   4633 ; save LAST at APP_LAST  
      001CF5 CD 1D CC         [ 4] 4634         call UPDATLAST 
      001CF8 20 06            [ 2] 4635         jra 2$
      001CFA                       4636 1$: ; update LAST with APP_LAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001CFA 90 BF 1C         [ 2] 4637         ldw ULAST,y
      001CFD 90 BF 16         [ 2] 4638         ldw UCNTXT,y
      001D00                       4639 2$:  
                                   4640 ; update APP_CP if < app_space 
      001D00 90 CE 40 04      [ 2] 4641         ldw y,APP_CP  
      001D04 90 B3 1A         [ 2] 4642         cpw y,UCP   
      001D07 24 06            [ 1] 4643         jruge 3$ 
      001D09 CD 1D F5         [ 4] 4644         call UPDATCP
      001D0C 90 BE 1A         [ 2] 4645         ldw y,UCP   
      001D0F                       4646 3$:
      001D0F 90 BF 1A         [ 2] 4647         ldw UCP,y                 
                                   4648 ; update UVP with APP_VP  
                                   4649 ; if APP_VP>UVP else do the opposite 
      001D12 90 CE 40 06      [ 2] 4650         ldw y,APP_VP 
      001D16 90 B3 18         [ 2] 4651         cpw y,UVP 
      001D19 22 05            [ 1] 4652         jrugt 4$
      001D1B CD 1E 0C         [ 4] 4653         call UPDATVP 
      001D1E 20 03            [ 2] 4654         jra 6$
      001D20                       4655 4$: ; update UVP with APP_VP 
      001D20 90 BF 18         [ 2] 4656         ldw UVP,y 
      001D23                       4657 6$:      
      001D23 CD 15 B5         [ 4] 4658         CALL     PRESE   ;initialize data stack and TIB
      001D26 CD 1C BA         [ 4] 4659         CALL     TBOOT
      001D29 CD 0D 1F         [ 4] 4660         CALL     ATEXE   ;application boot
      001D2C CD 18 A0         [ 4] 4661         CALL     OVERT
      001D2F CC 15 D2         [ 2] 4662         JP     QUIT    ;start interpretation
                                   4663 
                                   4664 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4665         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001D32 1C C1                   31     .word LINK 
                           001D34    32     LINK=.
      001D34 03                      33     .byte 3 
      001D35 46 50 21                34     .ascii "FP!"
      001D38                         35 FPSTOR:
      001D38 90 93            [ 1]   36     ldw y,x
      001D3A 90 FE            [ 2]   37     ldw y,(y)
      001D3C 90 9F            [ 1]   38     ld a,yl 
      001D3E B7 34            [ 1]   39     ld FPTR,a 
      001D40 1C 00 02         [ 2]   40     addw x,#CELLL 
      001D43 90 93            [ 1]   41     ldw y,x 
      001D45 90 FE            [ 2]   42     ldw y,(y)
      001D47 90 BF 35         [ 2]   43     ldw PTR16,y
      001D4A 1C 00 02         [ 2]   44     addw x,#CELLL 
      001D4D 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001D4E 1D 34                   52     .word LINK 
                           001D50    53 LINK=.
      001D50 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001D51 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001D57                         56 EEPROM: 
      001D57 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001D5B 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001D5E EF 02            [ 2]   59     ldw (2,x),y 
      001D60 90 5F            [ 1]   60     clrw y 
      001D62 FF               [ 2]   61     ldw (x),y 
      001D63 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001D64 1D 50                   68 	.word LINK 
                           001D66    69 	LINK=.
      001D66 08                      70 	.byte 8 
      001D67 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001D6F                         72 EEPLAST:
      001D6F 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001D72 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001D76 EF 02            [ 2]   75 	ldw (2,x),y 
      001D78 90 5F            [ 1]   76 	clrw y 
      001D7A FF               [ 2]   77 	ldw (x),y 
      001D7B 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001D7C 1D 66                   84 	.word LINK 
                           001D7E    85 	LINK=.
      001D7E 07                      86 	.byte 7
      001D7F 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001D86                         88 EEPRUN:
      001D86 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001D89 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001D8D EF 02            [ 2]   91 	ldw (2,x),y 
      001D8F 90 5F            [ 1]   92 	clrw y 
      001D91 FF               [ 2]   93 	ldw (x),y 
      001D92 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001D93 1D 7E                  100 	.word LINK
                           001D95   101 	LINK=.
      001D95 06                     102 	.byte 6 
      001D96 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001D9C                        104 EEPCP:
      001D9C 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001D9F 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001DA3 EF 02            [ 2]  107 	ldw (2,x),y 
      001DA5 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001DA7 FF               [ 2]  109 	ldw (x),y 
      001DA8 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001DA9 1D 95                  116 	.word LINK
                           001DAB   117 	LINK=.
      001DAB 06                     118 	.byte 6
      001DAC 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001DB2                        120 EEPVP:
      001DB2 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001DB5 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001DB9 EF 02            [ 2]  123 	ldw (2,x),y 
      001DBB 90 5F            [ 1]  124 	clrw y 
      001DBD FF               [ 2]  125 	ldw (x),y 
      001DBE 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001DBF 1D AB                  132 	.word LINK 
                           001DC1   133 	LINK=.
      001DC1 0A                     134 	.byte 10
      001DC2 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001DCC                        136 UPDATLAST:
      001DCC CD 07 8F         [ 4]  137 	call LAST
      001DCF CD 04 E4         [ 4]  138 	call AT  
      001DD2 CD 1D 6F         [ 4]  139 	call EEPLAST
      001DD5 CC 1F C2         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001DD8 1D C1                  146 	.word LINK
                           001DDA   147 	LINK=.
      001DDA 09                     148 	.byte 9
      001DDB 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001DE4                        150 UPDATRUN:
      001DE4 CD 1D 86         [ 4]  151 	call EEPRUN
      001DE7 CC 1F C2         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001DEA 1D DA                  158 	.word LINK 
                           001DEC   159 	LINK=.
      001DEC 08                     160 	.byte 8 
      001DED 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



             50
      001DF5                        162 UPDATCP:
      001DF5 CD 07 7F         [ 4]  163 	call CPP 
      001DF8 CD 04 E4         [ 4]  164 	call AT 
      001DFB CD 1D 9C         [ 4]  165 	call EEPCP 
      001DFE CC 1F C2         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001E01 1D EC                  172 	.word LINK
                           001E03   173 	LINK=.
      001E03 08                     174 	.byte 8 
      001E04 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001E0C                        176 UPDATVP:
      001E0C CD 07 71         [ 4]  177 	call VPP 
      001E0F CD 04 E4         [ 4]  178 	call AT
      001E12 CD 1D B2         [ 4]  179 	call EEPVP 
      001E15 CC 1F C2         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001E18 1E 03                  187     .word LINK 
                           001E1A   188 LINK=.
      001E1A 02                     189     .byte 2
      001E1B 46 40                  190     .ascii "F@"
      001E1D                        191 FARAT:
      001E1D CD 1D 38         [ 4]  192     call FPSTOR
      001E20 CC 1E E5         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001E23 1E 1A                  200     .word LINK
                           001E25   201     LINK=.
      001E25 03                     202     .byte 3 
      001E26 46 43 40               203     .ascii "FC@" 
      001E29                        204 FARCAT:
      001E29 CD 1D 38         [ 4]  205     call FPSTOR
      001E2C CC 1F 07         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001E2F 1E 25                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           001E31   215 LINK=.
      001E31 06                     216     .byte 6 
      001E32 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001E38                        218 UNLKEE:
      001E38 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001E3C 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001E40 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001E44 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001E48 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001E4D 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001E4E 1E 31                  231     .word LINK 
                           001E50   232 LINK=. 
      001E50 06                     233     .byte 6 
      001E51 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001E57                        235 UNLKFL:
      001E57 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001E5B 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001E5F 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001E63 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001E67 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001E6C 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001E6D 1E 50                  248 	.word LINK 
                           001E6F   249 	LINK=.
      001E6F 06                     250 	.byte 6
      001E70 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001E76                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001E76 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001E79 3D 34            [ 1]  256 	tnz FPTR 
      001E7B 26 16            [ 1]  257 	jrne 4$
      001E7D 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001E81 24 10            [ 1]  259     jruge 4$
      001E83 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001E87 25 0D            [ 1]  261     jrult 9$
      001E89 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001E8D 22 07            [ 1]  263 	jrugt 9$
      001E8F CD 1E 38         [ 4]  264 	call UNLKEE
      001E92 81               [ 4]  265 	ret 
      001E93 CD 1E 57         [ 4]  266 4$: call UNLKFL
      001E96 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001E97 1E 6F                  274 	.word LINK 
                           001E99   275 	LINK=.
      001E99 04                     276 	.byte 4 
      001E9A 4C 4F 43 4B            277 	.ascii "LOCK" 
      001E9E                        278 LOCK: 
      001E9E 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001EA2 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001EA6 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001EA7 1E 99                  287 	.word LINK 
                           001EA9   288 	LINK=. 
      001EA9 08                     289 	.byte 8 
      001EAA 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001EB2                        291 INC_FPTR:
      001EB2 3C 36            [ 1]  292 	inc PTR8 
      001EB4 26 0C            [ 1]  293 	jrne 1$
      001EB6 90 89            [ 2]  294 	pushw y 
      001EB8 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001EBB 90 5C            [ 1]  296 	incw y 
      001EBD 90 BF 34         [ 2]  297 	ldw FPTR,y
      001EC0 90 85            [ 2]  298 	popw y  
      001EC2 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001EC3 1E A9                  305 	.word LINK 
                           001EC5   306 	LINK=.
      001EC5 04                     307 	.byte 4 
      001EC6 50 54 52 2B            308 	.ascii "PTR+"
      001ECA                        309 PTRPLUS:
      001ECA 90 93            [ 1]  310 	ldw y,x 
      001ECC 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001ECF 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001ED3 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001ED6 24 02            [ 1]  314 	jrnc 1$
      001ED8 3C 34            [ 1]  315 	inc FPTR 
      001EDA 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001EDB 1E C5                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                           001EDD   324 	LINK=.
      001EDD 07                     325 	.byte 7 
      001EDE 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001EE5                        327 EE_READ:
      001EE5 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001EE8 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001EEC 90 95            [ 1]  330 	ld yh,a 
      001EEE CD 1E B2         [ 4]  331 	call INC_FPTR 
      001EF1 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001EF5 CD 1E B2         [ 4]  333 	call INC_FPTR 
      001EF8 90 97            [ 1]  334 	ld yl,a 
      001EFA FF               [ 2]  335 	ldw (x),y 
      001EFB 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001EFC 1E DD                  342 	.word LINK 
                           001EFE   343 	LINK=.
      001EFE 08                     344 	.byte 8
      001EFF 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001F07                        346 EE_CREAD:
      001F07 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001F0A 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001F0E CD 1E B2         [ 4]  349 	call INC_FPTR
      001F11 90 5F            [ 1]  350 	clrw y 
      001F13 90 97            [ 1]  351 	ld yl,a 
      001F15 FF               [ 2]  352 	ldw (x),y 
      001F16 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001F17 1E FE                  362 	.word LINK 
                           001F19   363 	LINK=. 
      001F19 07                     364 	.byte 7 
      001F1A 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001F21                        367 WR_BYTE:
      001F21 CD 04 64         [ 4]  368 	call FC_XOFF
      001F24 90 93            [ 1]  369 	ldw y,x 
      001F26 90 FE            [ 2]  370 	ldw y,(y)
      001F28 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001F2B 90 9F            [ 1]  372 	ld a,yl
      001F2D 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001F31 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F36 CD 04 4E         [ 4]  375 	call FC_XON
      001F39 CC 1E B2         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001F3C 1F 19                  385 	.word LINK 
                           001F3E   386 	LINK=.
      001F3E 07                     387 	.byte 7 
      001F3F 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001F46                        389 WR_WORD:
      001F46 CD 04 64         [ 4]  390 	call FC_XOFF
      001F49 90 93            [ 1]  391 	ldw y,x
      001F4B 90 FE            [ 2]  392 	ldw y,(y)
      001F4D 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001F50 90 9E            [ 1]  394 	ld a,yh 
      001F52 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001F56 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F5B CD 1E B2         [ 4]  397 	call INC_FPTR 
      001F5E 90 9F            [ 1]  398 	ld a,yl 
      001F60 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001F64 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F69 CD 04 4E         [ 4]  401 	call FC_XON
      001F6C CC 1E B2         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001F6F 1F 3E                  409     .word LINK 
                           001F71   410 	LINK=.
      001F71 04                     411     .byte 4 
      001F72 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001F76                        417 EECSTORE:
      001F76 52 02            [ 2]  418 	sub sp,#VSIZE
      001F78 CD 1D 38         [ 4]  419     call FPSTOR
      001F7B E6 01            [ 1]  420 	ld a,(1,x)
      001F7D 43               [ 1]  421 	cpl a 
      001F7E 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001F80 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001F82 CD 1E 76         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001F85 3D 34            [ 1]  426 	tnz FPTR 
      001F87 26 19            [ 1]  427 	jrne 2$
      001F89 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001F8C 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001F90 2B 10            [ 1]  430 	jrmi 2$
      001F92 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001F96 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F98 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001F9A 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001F9E 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001FA2                        437 2$: 
      001FA2 CD 1F 21         [ 4]  438 	call WR_BYTE 	
      001FA5 0D 02            [ 1]  439 	tnz (OPT,sp)
      001FA7 27 0D            [ 1]  440 	jreq 3$ 
      001FA9 7B 01            [ 1]  441     ld a,(BTW,sp)
      001FAB 90 5F            [ 1]  442     clrw y
      001FAD 90 97            [ 1]  443 	ld yl,a 
      001FAF 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001FB2 FF               [ 2]  445 	ldw (x),y 
      001FB3 CD 1F 21         [ 4]  446 	call WR_BYTE
      001FB6                        447 3$: 
      001FB6 CD 1E 9E         [ 4]  448 	call LOCK 
      001FB9 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001FBB 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001FBC 1F 71                  456 	.word LINK 
                           001FBE   457 	LINK=.
      001FBE 03                     458 	.byte 3 
      001FBF 45 45 21               459 	.ascii "EE!"
      001FC2                        460 EESTORE:
      001FC2 CD 1D 38         [ 4]  461 	call FPSTOR 
      001FC5 CD 1E 76         [ 4]  462 	call UNLOCK 
      001FC8 90 93            [ 1]  463 	ldw y,x 
      001FCA 90 FE            [ 2]  464 	ldw y,(y)
      001FCC 90 89            [ 2]  465 	pushw y 
      001FCE 90 5E            [ 1]  466 	swapw y 
      001FD0 FF               [ 2]  467 	ldw (x),y 
      001FD1 CD 1F 21         [ 4]  468 	call WR_BYTE 
      001FD4 90 85            [ 2]  469 	popw y 
      001FD6 1D 00 02         [ 2]  470 	subw x,#CELLL
      001FD9 FF               [ 2]  471 	ldw (x),y 
      001FDA CD 1F 21         [ 4]  472 	call WR_BYTE
      001FDD CC 1E 9E         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001FE0 1F BE                  481 	.word LINK 
                           001FE2   482 	LINK=. 
      001FE2 09                     483 	.byte 9 
      001FE3 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001FEC                        485 row_erase:
      001FEC CD 04 64         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FEF CD 1D 38         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001FF2 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001FF5 90 AE 20 45      [ 2]  491 	ldw y,#row_erase_proc
      001FF9 FF               [ 2]  492 	ldw (x),y 
      001FFA CD 0C FA         [ 4]  493 	call PAD 
      001FFD 90 AE 20 6C      [ 2]  494 	ldw y,#row_erase_proc_end 
      002001 72 A2 20 45      [ 2]  495 	subw y,#row_erase_proc
      002005 1D 00 02         [ 2]  496 	subw x,#CELLL 
      002008 FF               [ 2]  497 	ldw (x),y 
      002009 CD 0D 36         [ 4]  498 	call CMOVE 
      00200C                        499 block_erase:
      00200C 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      00200F 90 A3 2D 00      [ 2]  501 	cpw y,#app_space 
      002013 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      002015 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      002019 24 04            [ 1]  505 	jruge 1$
      00201B CD 04 4E         [ 4]  506 	call FC_XON
      00201E 81               [ 4]  507 	ret ; bad address 
      00201F 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      002023 23 04            [ 2]  509 	jrule 2$ 
      002025 CD 04 4E         [ 4]  510 	call FC_XON
      002028 81               [ 4]  511 	ret ; bad address 
      002029                        512 2$:	
      002029 CD 1E 38         [ 4]  513 	call UNLKEE 
      00202C 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      00202E                        516 erase_flash:
      00202E CD 1E 57         [ 4]  517 	call UNLKFL 
      002031                        518 proceed_erase:
      002031 CD 0C FA         [ 4]  519 	call PAD 
      002034 90 93            [ 1]  520 	ldw y,x
      002036 90 FE            [ 2]  521 	ldw y,(y)
      002038 1C 00 02         [ 2]  522 	addw x,#CELLL  
      00203B 90 FD            [ 4]  523 	call (y) 
      00203D 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      002041 CD 04 4E         [ 4]  525 	call FC_XON
      002044 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      002045                        529 row_erase_proc:
      002045 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      002049 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00204D 4F               [ 1]  532 	clr a 
      00204E 90 5F            [ 1]  533 	clrw y 
      002050 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      002054 90 5C            [ 1]  535     incw y
      002056 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      00205A 90 5C            [ 1]  537     incw y
      00205C 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      002060 90 5C            [ 1]  539     incw y
      002062 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      002066 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00206B 81               [ 4]  542 	ret
      00206C                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      00206C                        556 copy_buffer:
      00206C 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      00206E 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      002072 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      002076 90 5F            [ 1]  561 	clrw y
      002078 F6               [ 1]  562 1$:	ld a,(x)
      002079 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      00207D 5C               [ 1]  564 	incw x 
      00207E 90 5C            [ 1]  565 	incw y 
      002080 0A 01            [ 1]  566 	dec (BCNT,sp)
      002082 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      002084 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      002089 84               [ 1]  570 	pop a ; remove BCNT from stack 
      00208A 81               [ 4]  571 	ret 
      00208B                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      00208B                        578 copy_prog_to_ram:
      00208B 1D 00 06         [ 2]  579 	subw x,#6
      00208E 90 AE 20 6C      [ 2]  580 	ldw y,#copy_buffer 
      002092 EF 04            [ 2]  581 	ldw (4,x),y 
      002094 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      002098 EF 02            [ 2]  583 	ldw (2,x),y 
      00209A 90 AE 20 8B      [ 2]  584 	ldw y,#copy_buffer_end 
      00209E 72 A2 20 6C      [ 2]  585 	subw y,#copy_buffer  
      0020A2 FF               [ 2]  586 	ldw (x),y 
      0020A3 CD 0D 36         [ 4]  587 	call CMOVE 
      0020A6 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0020A7 1F E2                  597 	.word LINK 
                           0020A9   598 	LINK=.
      0020A9 06                     599 	.byte 6 
      0020AA 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      0020B0                        601 write_row:
      0020B0 CD 04 64         [ 4]  602 	call FC_XOFF
      0020B3 CD 1D 38         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      0020B6 A6 80            [ 1]  605 	ld a,#0x80 
      0020B8 B4 36            [ 1]  606 	and a,PTR8 
      0020BA B7 36            [ 1]  607 	ld PTR8,a  
      0020BC CD 20 8B         [ 4]  608 	call copy_prog_to_ram
      0020BF CD 1E 76         [ 4]  609 	call UNLOCK
      0020C2 90 93            [ 1]  610 	ldw y,x 
      0020C4 90 FE            [ 2]  611 	ldw y,(y)
      0020C6 1C 00 02         [ 2]  612 	addw x,#CELLL 
      0020C9 89               [ 2]  613 	pushw x 
      0020CA 93               [ 1]  614 	ldw x,y ; buffer address in x 
      0020CB CD 17 00         [ 4]  615 	call TIBBASE
      0020CE CD 1E 9E         [ 4]  616 	call LOCK
      0020D1 85               [ 2]  617 	popw x 
      0020D2 CD 04 4E         [ 4]  618 	call FC_XON 
      0020D5 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      0020D6 20 A9                  627 		.word LINK 
                           0020D8   628 		LINK=.
      0020D8 07                     629 		.byte 7 
      0020D9 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      0020E0                        631 set_option: 
      0020E0 90 93            [ 1]  632 		ldw y,x 
      0020E2 90 FE            [ 2]  633 		ldw y,(y)
      0020E4 27 06            [ 1]  634 		jreq 1$
      0020E6 90 A3 00 07      [ 2]  635 		cpw y,#7 
      0020EA 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      0020EC 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      0020EF 81               [ 4]  639 		ret
      0020F0 90 58            [ 2]  640 2$:		sllw y 
      0020F2 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      0020F6 FF               [ 2]  642 		ldw (x),y 
      0020F7 1D 00 02         [ 2]  643 		subw x,#CELLL 
      0020FA 90 5F            [ 1]  644 		clrw y 
      0020FC FF               [ 2]  645 		ldw (x),y 
      0020FD CD 1F 76         [ 4]  646 		call EECSTORE
      002100 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      002101 20 D8                  656 	.word LINK  
                           002103   657 	LINK=.
      002103 08                     658 	.byte 8 
      002104 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      00210C                        660 pristine:
                                    661 ;;; erase EEPROM
      00210C CD 1D 57         [ 4]  662 	call EEPROM 
      00210F CD 08 28         [ 4]  663 1$:	call DDUP 
      002112 CD 1F EC         [ 4]  664 	call row_erase
      002115 90 93            [ 1]  665 	ldw y,x 
      002117 90 EE 02         [ 2]  666 	ldw y,(2,y)
      00211A 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      00211E EF 02            [ 2]  668 	ldw (2,x),y
      002120 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      002124 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002126 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      00212A FF               [ 2]  673 2$:	ldw (x),y   
      00212B 90 5F            [ 1]  674 	clrw y 
      00212D EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      00212F CD 08 28         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      002132 CD 20 E0         [ 4]  677 	call set_option
      002135 90 93            [ 1]  678 	ldw y,x 
      002137 90 FE            [ 2]  679 	ldw y,(y)
      002139 90 5C            [ 1]  680 	incw y  ; next OPTION 
      00213B 90 A3 00 08      [ 2]  681 	cpw y,#8 
      00213F 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      002141 90 AE 2D 00      [ 2]  684 	ldw y,#app_space
      002145 EF 02            [ 2]  685 	ldw (2,x),y  
      002147 90 5F            [ 1]  686 	clrw y 
      002149 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      00214A CD 1F EC         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00214D 1D 00 02         [ 2]  690 	subw x,#CELLL 
      002150 90 5F            [ 1]  691 	clrw y  
      002152 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002153 CD 06 1A         [ 4]  693 	call DUPP  
      002156 CD 21 73         [ 4]  694 	call reset_vector
      002159 90 93            [ 1]  695 	ldw y,x 
      00215B 90 FE            [ 2]  696 	ldw y,(y)
      00215D 90 5C            [ 1]  697 	incw y   ; next vector 
      00215F 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002163 25 ED            [ 1]  699 	jrult 4$
      002165 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002168 21 03                  708 	.word LINK 
                           00216A   709 	LINK=. 
      00216A 08                     710 	.byte 8 
      00216B 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002173                        712 reset_vector:
      002173 90 93            [ 1]  713 	ldw y,x
      002175 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002178 90 FE            [ 2]  715 	ldw y,(y)
      00217A 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00217E 27 3A            [ 1]  717 	jreq 9$
      002180 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      002184 22 34            [ 1]  719 	jrugt 9$  
      002186 90 58            [ 2]  720 	sllw y 
      002188 90 58            [ 2]  721 	sllw y 
      00218A 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      00218E 90 BF 26         [ 2]  723 	ldw YTEMP,y
      002191 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      002194 EF 02            [ 2]  725 	ldw (2,x),y 
      002196 90 5F            [ 1]  726 	clrw y
      002198 FF               [ 2]  727 	ldw (x),y 
      002199 A6 82            [ 1]  728 	ld a,#0x82 
      00219B 90 95            [ 1]  729 	ld yh,a
      00219D EF 04            [ 2]  730 	ldw (4,x),y
      00219F CD 1F C2         [ 4]  731 	call EESTORE
      0021A2 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0021A5 90 5F            [ 1]  733 	clrw y 
      0021A7 FF               [ 2]  734 	ldw (x),y 
      0021A8 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0021AC EF 04            [ 2]  736 	ldw (4,x),y 
      0021AE 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0021B1 72 A9 00 02      [ 2]  738 	addw y,#2
      0021B5 EF 02            [ 2]  739 	ldw (2,x),y 
      0021B7 CD 1F C2         [ 4]  740 	call EESTORE
      0021BA 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0021BB 21 6A                  750 	.word LINK 
                           0021BD   751 	LINK=.
      0021BD 07                     752 	.byte 7
      0021BE 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0021C5                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0021C5 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0021C7 90 93            [ 1]  761 	ldw y,x 
      0021C9 90 FE            [ 2]  762 	ldw y,(y)
      0021CB 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0021CD 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0021CF AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0021D2 BF 35            [ 2]  766 	ldw PTR16,X
      0021D4 AE FF FC         [ 2]  767 	ldw x,#-4 
      0021D7 1C 00 04         [ 2]  768 1$:	addw x,#4
      0021DA A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0021DD 27 22            [ 1]  770 	jreq 9$
      0021DF 90 93            [ 1]  771 	ldw y,x  
      0021E1 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      0021E4 11 03            [ 1]  773 	cp a,(CADR,sp)
      0021E6 25 EF            [ 1]  774 	jrult 1$
      0021E8 90 5C            [ 1]  775 	incw y 
      0021EA 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      0021ED 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      0021EF 25 E6            [ 1]  778 	jrult 1$ 
      0021F1 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      0021F3 54               [ 2]  780 	srlw x
      0021F4 54               [ 2]  781 	srlw x 
      0021F5 90 93            [ 1]  782 	ldw y,x 
      0021F7 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      0021F9 FF               [ 2]  784 	ldw (x),y
      0021FA CD 21 73         [ 4]  785 	call reset_vector
      0021FD 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      0021FF 20 D6            [ 2]  787 	jra 1$
      002201 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002203 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002206 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002208 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002209 21 BD                  799 	.word LINK
                           00220B   800 	LINK=.
      00220B 08                     801 	.byte 8 
      00220C 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      002214                        803 set_vector:
      002214 90 93            [ 1]  804     ldw y,x 
      002216 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002219 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      00221B 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      00221F 23 04            [ 2]  808 	jrule 2$
      002221 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002224 81               [ 4]  810 	ret
      002225 90 58            [ 2]  811 2$:	sllw y 
      002227 90 58            [ 2]  812 	sllw y 
      002229 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00222D 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      002230 A6 82            [ 1]  815 	ld a,#0x82 
      002232 90 95            [ 1]  816 	ld yh,a 
      002234 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002236 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002238 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      00223B EF 04            [ 2]  821 	ldw (4,x),y 
      00223D 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002240 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002242 90 5F            [ 1]  824 	clrw y 
      002244 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002245 CD 1F C2         [ 4]  826 	call EESTORE 
      002248 90 93            [ 1]  827 	ldw y,x 
      00224A 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00224D 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002250 EF 04            [ 2]  830 	ldw (4,x),y 
      002252 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002255 72 A9 00 02      [ 2]  832 	addw y,#2 
      002259 EF 02            [ 2]  833 	ldw (2,x),y 
      00225B 90 5F            [ 1]  834 	clrw y 
      00225D FF               [ 2]  835 	ldw (x),y 
      00225E CD 1F C2         [ 4]  836 	call EESTORE
      002261 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002264 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002265 22 0B                  845 	.word LINK
                           002267   846 	LINK=.
      002267 03                     847 	.byte 3
      002268 45 45 2C               848 	.ascii "EE,"
      00226B                        849 EE_COMMA:
      00226B 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00226E 90 BE 1A         [ 2]  851 	ldw y,UCP
      002271 90 89            [ 2]  852 	pushw y 
      002273 EF 02            [ 2]  853 	ldw (2,x),y 
      002275 90 5F            [ 1]  854 	clrw y 
      002277 FF               [ 2]  855 	ldw (x),y
      002278 CD 1F C2         [ 4]  856 	call EESTORE
      00227B 90 85            [ 2]  857 	popw y 
      00227D 72 A9 00 02      [ 2]  858 	addw y,#2
      002281 90 BF 1A         [ 2]  859 	ldw UCP,y
      002284 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002285 22 67                  867 	.word LINK 
                           002287   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002287 04                     869 	.byte 4 
      002288 45 45 43 2C            870 	.ascii "EEC,"
      00228C                        871 EE_CCOMMA:
      00228C 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      00228F 90 BE 1A         [ 2]  873 	ldw y,UCP
      002292 90 89            [ 2]  874 	pushw y 
      002294 EF 02            [ 2]  875 	ldw (2,x),y 
      002296 90 5F            [ 1]  876 	clrw y 
      002298 FF               [ 2]  877 	ldw (x),y
      002299 CD 1F 76         [ 4]  878 	call EECSTORE
      00229C 90 85            [ 2]  879 	popw y 
      00229E 90 5C            [ 1]  880 	incw y 
      0022A0 90 BF 1A         [ 2]  881 	ldw UCP,y
      0022A3 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0022A4 22 87                  889 	.word LINK 
                           0022A6   890 	LINK=.
      0022A6 07                     891 	.byte 7 
      0022A7 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0022AE                        893 ROW2BUF: 
      0022AE CD 1D 38         [ 4]  894 	call FPSTOR 
      0022B1 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0022B3 88               [ 1]  896 	push a 
      0022B4 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0022B6 B7 36            [ 1]  898 	ld PTR8,a
      0022B8 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0022BC 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0022C0 90 F7            [ 1]  901 	ld (y),a
      0022C2 CD 1E B2         [ 4]  902 	call INC_FPTR
      0022C5 90 5C            [ 1]  903 	incw y 
      0022C7 0A 01            [ 1]  904 	dec (1,sp)
      0022C9 26 F1            [ 1]  905 	jrne 1$ 
      0022CB 84               [ 1]  906 	pop a 
      0022CC 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0022CD 22 A6                  915 	.word LINK 
                           0022CF   916 	LINK=.
      0022CF 07                     917 	.byte 7 
      0022D0 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0022D7                        919 BUF2ROW:
      0022D7 CD 07 1E         [ 4]  920 	call TBUF ; ( ud rb -- )
      0022DA CD 07 DE         [ 4]  921 	call ROT 
      0022DD CD 07 DE         [ 4]  922 	call ROT  ; ( rb ud -- )
      0022E0 CD 20 B0         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0022E3 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0022E4 22 CF                  931 	.word LINK 
                           0022E6   932 	LINK=.
      0022E6 05                     933 	.byte 5 
      0022E7 52 46 52 45 45         934 	.ascii "RFREE"
      0022EC                        935 RFREE:
      0022EC E6 01            [ 1]  936 	ld a,(1,x)
      0022EE A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      0022F0 B7 26            [ 1]  938 	ld YTEMP,a 
      0022F2 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      0022F4 B0 26            [ 1]  940 	sub a,YTEMP 
      0022F6 90 5F            [ 1]  941 	clrw y 
      0022F8 90 97            [ 1]  942 	ld yl,a
      0022FA FF               [ 2]  943 	ldw (x),y 
      0022FB 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      0022FC 22 E6                  955 	.word LINK 
                           0022FE   956 	LINK=. 
      0022FE 06                     957 	.byte 6
      0022FF 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002305                        960 RAM2EE:
                                    961 ; copy ud on top 
      002305 90 93            [ 1]  962 	ldw y,x 
      002307 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      00230A 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00230D 90 93            [ 1]  965 	ldw y,x 
      00230F 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002312 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002315 FF               [ 2]  968 	ldw (x),y 
      002316 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002319 EF 02            [ 2]  970 	ldw (2,x),y 
      00231B CD 22 AE         [ 4]  971 	call ROW2BUF 
      00231E 90 93            [ 1]  972 	ldw y,x 
      002320 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002323 90 89            [ 2]  974 	pushw y ; udl 
      002325 90 9F            [ 1]  975 	ld a,yl
      002327 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002329 90 5F            [ 1]  977 	clrw y 
      00232B 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00232D 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      002331 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002334 FF               [ 2]  981 	ldw (x),y  
      002335 CD 06 2A         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002338 CD 05 35         [ 4]  983 	call RFROM  
      00233B CD 22 EC         [ 4]  984 	call RFREE 
      00233E CD 09 80         [ 4]  985 	call MIN
      002341 CD 06 1A         [ 4]  986 	call DUPP 
      002344 CD 05 E3         [ 4]  987 	call TOR  
      002347 CD 0D 36         [ 4]  988 	call CMOVE
      00234A CD 22 D7         [ 4]  989 	call BUF2ROW 
      00234D CD 05 35         [ 4]  990 	call RFROM 
      002350 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002351 22 FE                  999 	.word LINK 
                           002353  1000 	LINK=. 
      002353 05                    1001 	.byte 5 
      002354 46 41 44 44 52        1002 	.ascii "FADDR"
      002359                       1003 FADDR:
      002359 CC 0C 0F         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      00235C 23 53                 1020 	.word LINK 
                           00235E  1021 	LINK=.
      00235E 05                    1022 	.byte 5 
      00235F 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002364                       1024 FMOVE:
      002364 CD 07 30         [ 4] 1025 	call TFLASH 
      002367 CD 04 E4         [ 4] 1026 	CALL AT 
      00236A CD 04 99         [ 4] 1027 	CALL QBRAN 
      00236D 23 E8                 1028 	.word no_move  
      00236F CD 07 7F         [ 4] 1029 	call CPP
      002372 CD 04 E4         [ 4] 1030 	call AT  
      002375 CD 06 1A         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002378 CD 07 63         [ 4] 1032 	call CNTXT 
      00237B CD 04 E4         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      00237E CD 04 70         [ 4] 1034 	call DOLIT 
      002381 00 02                 1035 	.word 2 
      002383 CD 08 D3         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002386 CD 06 2A         [ 4] 1037 	call SWAPP 
      002389 CD 23 59         [ 4] 1038 	call FADDR 
      00238C CD 07 DE         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      00238F CD 06 1A         [ 4] 1040 	call DUPP 
      002392 CD 05 E3         [ 4] 1041 	call TOR    ; R: a 
      002395                       1042 FMOVE2: 
      002395 CD 0C E9         [ 4] 1043 	call HERE 
      002398 CD 05 46         [ 4] 1044 	call RAT 
      00239B CD 08 D3         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      00239E                       1046 next_row:
      00239E CD 06 1A         [ 4] 1047 	call DUPP 
      0023A1 CD 05 E3         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0023A4 CD 23 05         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0023A7 CD 06 1A         [ 4] 1050 	call DUPP 
      0023AA CD 05 E3         [ 4] 1051 	call TOR
      0023AD CD 08 3D         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0023B0 CD 06 1A         [ 4] 1053 	call DUPP 
      0023B3 CD 0C 0F         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0023B6 CD 05 35         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0023B9 CD 05 35         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0023BC CD 06 42         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0023BF CD 08 D3         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0023C2 CD 06 1A         [ 4] 1059 	call DUPP 
      0023C5 CD 04 99         [ 4] 1060 	call QBRAN
      0023C8 23 E1                 1061 	.word fmove_done 
      0023CA CD 06 2A         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0023CD CD 05 35         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0023D0 CD 08 3D         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0023D3 CD 06 1A         [ 4] 1065 	call DUPP 
      0023D6 CD 05 E3         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0023D9 CD 06 2A         [ 4] 1067 	call SWAPP 
      0023DC CD 04 B5         [ 4] 1068 	call BRAN
      0023DF 23 9E                 1069 	.word next_row  
      0023E1                       1070 fmove_done:	
      0023E1 CD 05 35         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0023E4 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0023E7 81               [ 4] 1073  	ret  
      0023E8                       1074 no_move:
      0023E8 CD 0C 0F         [ 4] 1075 	call ZERO
      0023EB 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      0023EC 23 5E                 1083 	.word LINK 
                           0023EE  1084 	LINK=.
      0023EE 09                    1085 	.byte 9
      0023EF 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      0023F8                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      0023F8 CD 1D B2         [ 4] 1089 	call EEPVP 
      0023FB                       1090 	_DROP 
      0023FB 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0023FE CD 04 E4         [ 4] 1091 	call AT
      002401 CD 07 71         [ 4] 1092 	call VPP 
      002404 CD 04 D2         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002407 CD 1D 9C         [ 4] 1095 	call EEPCP 
      00240A                       1096 	_DROP
      00240A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00240D CD 04 E4         [ 4] 1097 	call AT
      002410 CD 04 70         [ 4] 1098 	call DOLIT 
      002413 00 02                 1099 	.word 2 
      002415 CD 08 3D         [ 4] 1100 	call PLUS 
      002418 CD 06 1A         [ 4] 1101 	call DUPP 
      00241B CD 07 63         [ 4] 1102 	call CNTXT 
      00241E CD 04 D2         [ 4] 1103 	call STORE
      002421 CD 07 8F         [ 4] 1104 	call LAST
      002424 CD 04 D2         [ 4] 1105 	call STORE 
      002427 CD 1D CC         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      00242A CD 07 7F         [ 4] 1108 	call CPP 
      00242D CD 04 D2         [ 4] 1109 	call STORE
      002430 CD 1D F5         [ 4] 1110 	call UPDATCP 
      002433 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002434 23 EE                 1117 	.word LINK 
                           002436  1118 	LINK=. 
      002436 06                    1119 	.byte 6
      002437 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00243D                       1121 IFMOVE:
      00243D CD 07 30         [ 4] 1122 	call TFLASH 
      002440 CD 04 E4         [ 4] 1123 	CALL AT 
      002443 CD 04 99         [ 4] 1124 	CALL QBRAN 
      002446 23 E8                 1125 	.word no_move 
      002448 CD 07 7F         [ 4] 1126 	call CPP 
      00244B CD 04 E4         [ 4] 1127 	call AT 
      00244E CD 06 1A         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002451 CD 1D B2         [ 4] 1129 	call EEPVP 
      002454                       1130 	_DROP
      002454 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002457 CD 04 E4         [ 4] 1131 	call AT  ; ( udl udl a )
      00245A CD 05 E3         [ 4] 1132 	call TOR 
      00245D CD 23 59         [ 4] 1133 	call FADDR
      002460 CD 05 46         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002463 CC 23 95         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                           000000  4666 .if WANT_SCALING_CONST 
                                   4667         .include "const_ratio.asm"
                                   4668 .endif
                           000001  4669 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                   4670         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      002466 24 36                   34     .word LINK 
                           002468    35     LINK=.
      002468 06                      36     .byte 6
      002469 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      00246F                         38 CALLOT:
      00246F CD 07 7F         [ 4]   39     CALL CPP
      002472 CD 06 1A         [ 4]   40     CALL DUPP 
      002475 CD 04 E4         [ 4]   41     CALL AT 
      002478 CD 05 E3         [ 4]   42     CALL TOR 
      00247B CD 0C 7F         [ 4]   43     CALL PSTOR 
      00247E CD 1D F5         [ 4]   44     CALL UPDATCP 
      002481 CD 05 35         [ 4]   45     CALL RFROM
      002484 CC 0C 0F         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002487 24 68                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                           002489    55     LINK=.
      002489 06                      56     .byte 6
      00248A 43 54 41 42 4C 45       57     .ascii "CTABLE"
      002490                         58 CTABLE:
      002490 CD 24 6F         [ 4]   59     CALL CALLOT     
      002493 CC 1A 89         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002496 24 89                   69     .word LINK 
                           002498    70     LINK=.
      002498 06                      71     .byte 6
      002499 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00249F                         73 WTABLE:
      00249F CD 0B 96         [ 4]   74     CALL CELLS  
      0024A2 CD 24 6F         [ 4]   75     CALL CALLOT 
      0024A5 CC 1A 89         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0024A8 24 98                   84     .word LINK 
                           0024AA    85     LINK=.
      0024AA 06                      86     .byte 6
      0024AB 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      0024B1                         88 CTAT:
      0024B1 CD 1D 38         [ 4]   89     call FPSTOR 
      0024B4 CD 1E CA         [ 4]   90     call PTRPLUS 
      0024B7 CC 1F 07         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      0024BA 24 AA                   99     .word LINK 
                           0024BC   100     LINK=.
      0024BC 06                     101     .byte 6
      0024BD 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      0024C3                        103 WTAT:
      0024C3 CD 1D 38         [ 4]  104     call FPSTOR 
      0024C6 CD 0B 96         [ 4]  105     call CELLS 
      0024C9 CD 1E CA         [ 4]  106     call PTRPLUS 
      0024CC CD 1E E5         [ 4]  107     call EE_READ 
      0024CF 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      0024D0 24 BC                  115     .word LINK 
                           0024D2   116     LINK=.
      0024D2 06                     117     .byte 6 
      0024D3 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0024D9                        119 CTINIT:
      0024D9 CD 1D 38         [ 4]  120     CALL FPSTOR
      0024DC CD 1E 76         [ 4]  121     CALL UNLOCK
      0024DF CD 0C 0F         [ 4]  122     CALL ZERO 
      0024E2 CD 0B A3         [ 4]  123 1$: CALL ONEP 
      0024E5 CD 06 1A         [ 4]  124     CALL DUPP 
      0024E8 CD 25 35         [ 4]  125     CALL INTQ 
      0024EB CD 04 99         [ 4]  126     CALL QBRAN 
      0024EE 24 F8                  127     .word 2$
      0024F0 CD 1F 21         [ 4]  128     call WR_BYTE 
      0024F3 CD 04 B5         [ 4]  129     CALL BRAN 
      0024F6 24 E2                  130     .word 1$ 
      0024F8                        131 2$: _DDROP 
      0024F8 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024FB CD 1E 9E         [ 4]  132     CALL LOCK 
      0024FE 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0024FF 24 D2                  140     .word LINK 
                           002501   141     LINK=.
      002501 06                     142     .byte 6 
      002502 57 54 49 4E 49 54      143     .ascii "WTINIT"
      002508                        144 WTINIT:
      002508 CD 1D 38         [ 4]  145     CALL FPSTOR
      00250B CD 1E 76         [ 4]  146     CALL UNLOCK
      00250E CD 0C 0F         [ 4]  147     CALL ZERO 
      002511 CD 0B A3         [ 4]  148 1$: CALL ONEP 
      002514 CD 06 1A         [ 4]  149     CALL DUPP
      002517 CD 25 35         [ 4]  150     CALL INTQ
      00251A CD 04 99         [ 4]  151     CALL QBRAN 
      00251D 25 27                  152     .word 2$
      00251F CD 1F 46         [ 4]  153     call WR_WORD 
      002522 CD 04 B5         [ 4]  154     CALL BRAN 
      002525 25 11                  155     .word 1$ 
      002527                        156 2$: _DDROP 
      002527 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00252A CD 1E 9E         [ 4]  157     CALL LOCK 
      00252D 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      00252E 25 01                  166     .word LINK 
                           002530   167     LINK=.
      002530 04                     168     .byte 4
      002531 5B 4E 5D 3F            169     .ascii "[N]?" 
      002535                        170 INTQ:
      002535 CD 10 68         [ 4]  171     CALL CR 
      002538 CD 04 70         [ 4]  172     call DOLIT 
      00253B 00 5B                  173     .word '[
      00253D CD 04 37         [ 4]  174     CALL EMIT 
      002540 CD 11 0E         [ 4]  175     CALL DOT 
      002543 CD 10 95         [ 4]  176     CALL  DOTQP
      002546 03                     177     .byte 3
      002547 5D 3F 20               178     .ascii "]? " 
      00254A CD 14 9C         [ 4]  179     CALL QUERY 
      00254D CD 12 C7         [ 4]  180     call TOKEN 
      002550 CC 0F 1F         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                   4671 .endif
                           000000  4672 .if WANT_DOUBLE 
                                   4673         .include "double.asm"
                                   4674 .endif 
                           000000  4675 .if WANT_FLOAT 
                                   4676         .include "float.asm"
                                   4677 .endif 
                           000001  4678 .if WANT_FLOAT24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                   4679         .include "float24.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  implement 24 float pointing point format  
                                     22 ;  the mantissa is 16 bits signed 
                                     23 ;  exponent is 8 bits signed  
                                     24 ;  format: seeeeee smmmmmmmmmmmmmmm 
                                     25 ;
                                     26 ;  This library is not dependant on double.asm 
                                     27 ;  The code is smaller and faster than float.asm at 
                                     28 ;  the cost of less precision on mantissa. 
                                     29 ;  Exponent range is the same. 
                                     30 ;
                                     31 ;  This format is store on the stack as a double, i.e. 32 bits 
                                     32 ;  but as 24 bits in memory. 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 
                                     35 
                           007FFF    36     MAX_MANTISSA = 0x7FFF ; absolute value maximum mantissa  
                                     37 
                           000001    38     F24_MAJOR=1 
                           000000    39     F24_MINOR=0 
                                     40 
                                     41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     42 ;   FLOAT-VER ( -- )
                                     43 ;   print library version 
                                     44 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002553                         45     _HEADER FVER,9,"FLOAT-VER"
      002553 25 30                    1         .word LINK 
                           002555     2         LINK=.
      002555 09                       3         .byte 9  
      002556 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      00255F                          5         FVER:
      00255F CD 10 68         [ 4]   46     CALL CR 
      002562 CD 10 95         [ 4]   47     CALL DOTQP 
      002565 11                      48     .byte  17 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002566 66 6C 6F 61 74 32 34    49     .ascii "float24 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002577 CD 1C 38         [ 4]   50     CALL PRT_LICENCE 
      00257A CD 1C 10         [ 4]   51     CALL COPYRIGHT 
      00257D                         52     _DOLIT F24_MAJOR     
      00257D CD 04 70         [ 4]    1     CALL DOLIT 
      002580 00 01                    2     .word F24_MAJOR 
      002582                         53     _DOLIT F24_MINOR 
      002582 CD 04 70         [ 4]    1     CALL DOLIT 
      002585 00 00                    2     .word F24_MINOR 
      002587 CC 1C 4C         [ 2]   54     JP PRINT_VERSION 
                                     55 
                                     56 
                                     57 ;-------------------------
                                     58 ;    FPSW ( -- a )
                                     59 ;    floating state variable
                                     60 ;    bit 0 zero flag 
                                     61 ;    bit 1 negative flag 
                                     62 ;    bit 2 overflow/error flag 
                                     63 ;---------------------------
      00258A                         64     _HEADER FPSW,4,"FPSW"
      00258A 25 55                    1         .word LINK 
                           00258C     2         LINK=.
      00258C 04                       3         .byte 4  
      00258D 46 50 53 57              4         .ascii "FPSW"
      002591                          5         FPSW:
      002591 90 AE 00 08      [ 2]   65 	LDW Y,#UFPSW  
      002595 1D 00 02         [ 2]   66 	SUBW X,#2
      002598 FF               [ 2]   67     LDW (X),Y
      002599 81               [ 4]   68     RET
                                     69 
                                     70 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     71 ;   FRESET ( -- )
                                     72 ;   reset FPSW variable 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      00259A                         74     _HEADER FRESET,6,"FRESET"
      00259A 25 8C                    1         .word LINK 
                           00259C     2         LINK=.
      00259C 06                       3         .byte 6  
      00259D 46 52 45 53 45 54        4         .ascii "FRESET"
      0025A3                          5         FRESET:
      0025A3 CD 0C 0F         [ 4]   75     CALL ZERO  
      0025A6 CD 25 91         [ 4]   76     CALL FPSW 
      0025A9 CD 04 D2         [ 4]   77     CALL STORE 
      0025AC 81               [ 4]   78     RET 
                                     79 
                                     80 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     81 ;   FINIT ( -- )
                                     82 ;   initialize floating point 
                                     83 ;   library 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025AD                         85     _HEADER FINIT,5,"FINIT"
      0025AD 25 9C                    1         .word LINK 
                           0025AF     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0025AF 05                       3         .byte 5  
      0025B0 46 49 4E 49 54           4         .ascii "FINIT"
      0025B5                          5         FINIT:
      0025B5 CD 25 A3         [ 4]   86     CALL FRESET 
      0025B8 81               [ 4]   87     RET 
                                     88 
                                     89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     90 ;    FER ( -- u )
                                     91 ;    return FPSW value 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025B9                         93     _HEADER FER,3,"FER"
      0025B9 25 AF                    1         .word LINK 
                           0025BB     2         LINK=.
      0025BB 03                       3         .byte 3  
      0025BC 46 45 52                 4         .ascii "FER"
      0025BF                          5         FER:
      0025BF CD 25 91         [ 4]   94     CALL FPSW 
      0025C2 CD 04 E4         [ 4]   95     CALL AT 
      0025C5 81               [ 4]   96     RET 
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ;    FZE  ( -- 0|-1 )
                                    100 ;    return FPSW zero flag 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025C6                        102     _HEADER FZE,3,"FZE"
      0025C6 25 BB                    1         .word LINK 
                           0025C8     2         LINK=.
      0025C8 03                       3         .byte 3  
      0025C9 46 5A 45                 4         .ascii "FZE"
      0025CC                          5         FZE:
      0025CC CD 25 91         [ 4]  103     CALL FPSW
      0025CF CD 04 E4         [ 4]  104     CALL AT  
      0025D2 CD 0C 1A         [ 4]  105     CALL ONE 
      0025D5 CD 06 77         [ 4]  106     CALL ANDD
      0025D8 CD 08 87         [ 4]  107     CALL NEGAT  
      0025DB 81               [ 4]  108     RET 
                                    109 
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    111 ;    FNE ( -- 0|-1 )
                                    112 ;    return FPSW negative flag 
                                    113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025DC                        114     _HEADER FNE,3,"FNE"
      0025DC 25 C8                    1         .word LINK 
                           0025DE     2         LINK=.
      0025DE 03                       3         .byte 3  
      0025DF 46 4E 45                 4         .ascii "FNE"
      0025E2                          5         FNE:
      0025E2 CD 25 91         [ 4]  115     CALL FPSW 
      0025E5 CD 04 E4         [ 4]  116     CALL AT 
      0025E8                        117     _DOLIT 2 
      0025E8 CD 04 70         [ 4]    1     CALL DOLIT 
      0025EB 00 02                    2     .word 2 
      0025ED CD 06 77         [ 4]  118     CALL ANDD
      0025F0 CD 0B F5         [ 4]  119     CALL TWOSL
      0025F3 CD 08 87         [ 4]  120     CALL NEGAT   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0025F6 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;   FOV (  -- 0|-1 )
                                    125 ;   return FPSW overflow flag 
                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025F7                        127     _HEADER FOV,3,"FOV"
      0025F7 25 DE                    1         .word LINK 
                           0025F9     2         LINK=.
      0025F9 03                       3         .byte 3  
      0025FA 46 4F 56                 4         .ascii "FOV"
      0025FD                          5         FOV:
      0025FD CD 25 91         [ 4]  128     CALL FPSW
      002600 CD 04 E4         [ 4]  129     CALL AT  
      002603                        130     _DOLIT 4 
      002603 CD 04 70         [ 4]    1     CALL DOLIT 
      002606 00 04                    2     .word 4 
      002608 CD 06 77         [ 4]  131     CALL ANDD
      00260B                        132     _DOLIT 2 
      00260B CD 04 70         [ 4]    1     CALL DOLIT 
      00260E 00 02                    2     .word 2 
      002610 CD 0B DD         [ 4]  133     CALL RSHIFT 
      002613 CD 08 87         [ 4]  134     CALL NEGAT  
      002616 81               [ 4]  135     RET 
                                    136 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    138 ;  SET-FPSW ( f24 -- f24 )
                                    139 ;  set float status word 
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002617                        141     _HEADER SET_FPSW,8,"SET-FPSW"
      002617 25 F9                    1         .word LINK 
                           002619     2         LINK=.
      002619 08                       3         .byte 8  
      00261A 53 45 54 2D 46 50 53     4         .ascii "SET-FPSW"
             57
      002622                          5         SET_FPSW:
      002622 3F 09            [ 1]  142     CLR UFPSW+1 
      002624 90 93            [ 1]  143     LDW Y,X 
      002626 90 EE 02         [ 2]  144     LDW Y,(2,Y) ; m 
      002629 26 06            [ 1]  145     JRNE 1$
      00262B 72 10 00 09      [ 1]  146     BSET UFPSW+1,#0  ; null mantissa 
      00262F 20 1E            [ 2]  147     JRA 4$ 
      002631 2A 04            [ 1]  148 1$: JRPL 2$    
      002633 72 12 00 09      [ 1]  149     BSET UFPSW+1,#1  ; negative mantissa 
      002637 90 93            [ 1]  150 2$: LDW Y,X 
      002639 90 FE            [ 2]  151     LDW Y,(Y) ; e 
      00263B 90 A3 FF 81      [ 2]  152     CPW Y,#-127  
      00263F 2B 06            [ 1]  153     JRMI 3$
      002641 90 A3 00 80      [ 2]  154     CPW Y,#128 
      002645 2B 08            [ 1]  155     JRMI 4$ 
      002647                        156 3$:
      002647 A1 FF            [ 1]  157     CP A,#255 
      002649 27 FC            [ 1]  158     JREQ 3$
      00264B 72 14 00 09      [ 1]  159     BSET UFPSW+1,#2  ; overflow         
      00264F 81               [ 4]  160 4$: RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    161 
                                    162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    163 ;    SFZ ( f# -- f# )
                                    164 ;    set FPSW zero flag 
                                    165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002650                        166     _HEADER SFZ,3,"SFZ"
      002650 26 19                    1         .word LINK 
                           002652     2         LINK=.
      002652 03                       3         .byte 3  
      002653 53 46 5A                 4         .ascii "SFZ"
      002656                          5         SFZ:
      002656 CD 25 BF         [ 4]  167     CALL FER 
      002659                        168     _DOLIT 0xfffe 
      002659 CD 04 70         [ 4]    1     CALL DOLIT 
      00265C FF FE                    2     .word 0xfffe 
      00265E CD 06 77         [ 4]  169     CALL ANDD 
      002661 CD 05 E3         [ 4]  170     CALL TOR    
      002664 CD 06 42         [ 4]  171     CALL OVER  
      002667 CD 06 63         [ 4]  172     CALL ZEQUAL 
      00266A                        173     _DOLIT 1 
      00266A CD 04 70         [ 4]    1     CALL DOLIT 
      00266D 00 01                    2     .word 1 
      00266F CD 06 77         [ 4]  174     CALL ANDD 
      002672 CD 05 35         [ 4]  175     CALL RFROM 
      002675 CD 06 8B         [ 4]  176     CALL ORR 
      002678 CD 25 91         [ 4]  177     CALL FPSW 
      00267B CD 04 D2         [ 4]  178     CALL STORE 
      00267E 81               [ 4]  179     RET 
                                    180 
                                    181 
                                    182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    183 ;   SFN ( f# -- f# )
                                    184 ;   set FPSW negative flag 
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00267F                        186     _HEADER SFN,3,"SFN"
      00267F 26 52                    1         .word LINK 
                           002681     2         LINK=.
      002681 03                       3         .byte 3  
      002682 53 46 4E                 4         .ascii "SFN"
      002685                          5         SFN:
      002685 CD 25 BF         [ 4]  187     CALL FER 
      002688                        188     _DOLIT 0xFFFD 
      002688 CD 04 70         [ 4]    1     CALL DOLIT 
      00268B FF FD                    2     .word 0xFFFD 
      00268D CD 06 77         [ 4]  189     CALL ANDD  
      002690 CD 05 E3         [ 4]  190     CALL TOR 
      002693 CD 06 42         [ 4]  191     CALL OVER 
      002696                        192     _DOLIT 15 
      002696 CD 04 70         [ 4]    1     CALL DOLIT 
      002699 00 0F                    2     .word 15 
      00269B CD 0B DD         [ 4]  193     CALL RSHIFT 
      00269E CD 05 35         [ 4]  194     CALL RFROM 
      0026A1 CD 06 8B         [ 4]  195     CALL ORR 
      0026A4 CD 25 91         [ 4]  196     CALL FPSW 
      0026A7 CD 04 D2         [ 4]  197     CALL STORE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0026AA 81               [ 4]  198     RET 
                                    199 
                                    200 
                                    201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    202 ;   SFV ( -- )
                                    203 ;   set overflow flag 
                                    204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026AB                        205     _HEADER SFV,3,"SFV"
      0026AB 26 81                    1         .word LINK 
                           0026AD     2         LINK=.
      0026AD 03                       3         .byte 3  
      0026AE 53 46 56                 4         .ascii "SFV"
      0026B1                          5         SFV:
      0026B1 CD 25 BF         [ 4]  206     CALL FER 
      0026B4                        207     _DOLIT 4 
      0026B4 CD 04 70         [ 4]    1     CALL DOLIT 
      0026B7 00 04                    2     .word 4 
      0026B9 CD 06 8B         [ 4]  208     CALL ORR 
      0026BC CD 25 91         [ 4]  209     CALL FPSW 
      0026BF CD 04 D2         [ 4]  210     CALL STORE 
      0026C2 81               [ 4]  211     RET 
                                    212 
                                    213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    214 ;   MSIGN  (m -- m -1|0 )
                                    215 ;   get mantissa sign 
                                    216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C3                        217      _HEADER MSIGN,5,"MSIGN"
      0026C3 26 AD                    1         .word LINK 
                           0026C5     2         LINK=.
      0026C5 05                       3         .byte 5  
      0026C6 4D 53 49 47 4E           4         .ascii "MSIGN"
      0026CB                          5         MSIGN:
      0026CB 90 5F            [ 1]  218     CLRW Y 
      0026CD F6               [ 1]  219     LD A,(X)
      0026CE 2A 02            [ 1]  220     JRPL 1$
      0026D0 90 53            [ 2]  221     CPLW Y 
      0026D2 1D 00 02         [ 2]  222 1$: SUBW X,#CELLL 
      0026D5 FF               [ 2]  223     LDW (X),Y 
      0026D6 81               [ 4]  224     RET 
                                    225 
                                    226 
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 ;   E. ( f# -- )
                                    229 ;   print float24 in scientific 
                                    230 ;   format 
                                    231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D7                        232     _HEADER EDOT,2,"E."
      0026D7 26 C5                    1         .word LINK 
                           0026D9     2         LINK=.
      0026D9 02                       3         .byte 2  
      0026DA 45 2E                    4         .ascii "E."
      0026DC                          5         EDOT:
      0026DC CD 06 E0         [ 4]  233     CALL BASE 
      0026DF CD 04 E4         [ 4]  234     CALL AT 
      0026E2 CD 05 E3         [ 4]  235     CALL TOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      0026E5 CD 0E C7         [ 4]  236     CALL DECIM 
      0026E8 CD 26 22         [ 4]  237     CALL SET_FPSW
      0026EB                        238 EDOT0: 
      0026EB CD 05 E3         [ 4]  239     CALL TOR   ; R: e 
      0026EE CD 08 ED         [ 4]  240     CALL ABSS 
      0026F1 CD 10 25         [ 4]  241     CALL SPACE 
      0026F4 CD 0E 17         [ 4]  242     CALL BDIGS     
      0026F7                        243 EDOT2: 
      0026F7 CD 06 1A         [ 4]  244     CALL DUPP 
      0026FA                        245     _DOLIT 10 
      0026FA CD 04 70         [ 4]    1     CALL DOLIT 
      0026FD 00 0A                    2     .word 10 
      0026FF CD 09 27         [ 4]  246     CALL LESS 
      002702                        247     _TBRAN EDOT3 
      002702 CD 04 A7         [ 4]    1     CALL TBRAN 
      002705 27 15                    2     .word EDOT3 
      002707 CD 0E 40         [ 4]  248     CALL DIG
      00270A CD 05 35         [ 4]  249     CALL RFROM 
      00270D CD 0B A3         [ 4]  250     CALL ONEP 
      002710 CD 05 E3         [ 4]  251     CALL TOR 
      002713                        252     _BRAN EDOT2 
      002713 20 E2            [ 2]    1     JRA EDOT2  
      002715                        253 EDOT3: 
      002715                        254     _DOLIT '.'
      002715 CD 04 70         [ 4]    1     CALL DOLIT 
      002718 00 2E                    2     .word '.' 
      00271A CD 0E 27         [ 4]  255     CALL HOLD  
      00271D CD 0E 40         [ 4]  256     CALL DIG
      002720 CD 25 E2         [ 4]  257     CALL FNE 
      002723                        258     _QBRAN EDOT4 
      002723 CD 04 99         [ 4]    1     CALL QBRAN
      002726 27 30                    2     .word EDOT4
      002728                        259     _DOLIT '-'
      002728 CD 04 70         [ 4]    1     CALL DOLIT 
      00272B 00 2D                    2     .word '-' 
      00272D CD 0E 27         [ 4]  260     CALL HOLD 
      002730                        261 EDOT4:       
      002730 CD 0E 7C         [ 4]  262     CALL EDIGS 
      002733 CD 10 4F         [ 4]  263     CALL TYPES
      002736 CD 05 35         [ 4]  264     CALL RFROM 
      002739 CD 07 CD         [ 4]  265     CALL QDUP 
      00273C                        266     _QBRAN EDOT5     
      00273C CD 04 99         [ 4]    1     CALL QBRAN
      00273F 27 51                    2     .word EDOT5
      002741                        267     _DOLIT 'E'
      002741 CD 04 70         [ 4]    1     CALL DOLIT 
      002744 00 45                    2     .word 'E' 
      002746 CD 04 37         [ 4]  268     CALL EMIT
      002749                        269     _DOLIT 1  
      002749 CD 04 70         [ 4]    1     CALL DOLIT 
      00274C 00 01                    2     .word 1 
      00274E CD 10 A3         [ 4]  270     CALL DOTR
      002751                        271 EDOT5: 
      002751 CD 05 35         [ 4]  272     CALL RFROM 
      002754 CD 06 E0         [ 4]  273     CALL BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      002757 CD 04 D2         [ 4]  274     CALL STORE  
      00275A 81               [ 4]  275     RET 
                                    276 
                                    277 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    278 ;   F. (f# -- )
                                    279 ;   print float in fixed
                                    280 ;   point format. 
                                    281 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00275B                        282     _HEADER FDOT,2,"F."
      00275B 26 D9                    1         .word LINK 
                           00275D     2         LINK=.
      00275D 02                       3         .byte 2  
      00275E 46 2E                    4         .ascii "F."
      002760                          5         FDOT:
      002760 CD 06 E0         [ 4]  283     CALL BASE 
      002763 CD 04 E4         [ 4]  284     CALL AT 
      002766 CD 05 E3         [ 4]  285     CALL TOR 
      002769 CD 0E C7         [ 4]  286     CALL DECIM 
      00276C CD 26 22         [ 4]  287     CALL    SET_FPSW 
      00276F CD 06 1A         [ 4]  288     CALL    DUPP  
      002772 CD 08 ED         [ 4]  289     CALL    ABSS 
      002775                        290     _DOLIT  8
      002775 CD 04 70         [ 4]    1     CALL DOLIT 
      002778 00 08                    2     .word 8 
      00277A CD 09 54         [ 4]  291     CALL    GREAT 
      00277D                        292     _QBRAN  FDOT1 
      00277D CD 04 99         [ 4]    1     CALL QBRAN
      002780 27 85                    2     .word FDOT1
      002782 CC 26 EB         [ 2]  293     JP      EDOT0 
      002785                        294 FDOT1:
      002785 CD 10 25         [ 4]  295     CALL    SPACE 
      002788 CD 05 E3         [ 4]  296     CALL    TOR 
      00278B CD 25 E2         [ 4]  297     CALL    FNE 
      00278E                        298     _QBRAN  FDOT0 
      00278E CD 04 99         [ 4]    1     CALL QBRAN
      002791 27 96                    2     .word FDOT0
      002793 CD 08 87         [ 4]  299     CALL    NEGAT 
      002796                        300 FDOT0: 
      002796 CD 0E 17         [ 4]  301     CALL    BDIGS
      002799 CD 05 46         [ 4]  302     CALL    RAT  
      00279C CD 06 51         [ 4]  303     CALL    ZLESS 
      00279F                        304     _QBRAN  FDOT6 
      00279F CD 04 99         [ 4]    1     CALL QBRAN
      0027A2 27 C7                    2     .word FDOT6
      0027A4                        305 FDOT2: ; e<0 
      0027A4 CD 0E 40         [ 4]  306     CALL    DIG 
      0027A7 CD 05 35         [ 4]  307     CALL    RFROM
      0027AA CD 0B A3         [ 4]  308     CALL    ONEP 
      0027AD CD 07 CD         [ 4]  309     CALL    QDUP  
      0027B0                        310     _QBRAN  FDOT3 
      0027B0 CD 04 99         [ 4]    1     CALL QBRAN
      0027B3 27 BA                    2     .word FDOT3
      0027B5 CD 05 E3         [ 4]  311     CALL    TOR 
      0027B8 20 EA            [ 2]  312     JRA   FDOT2 
      0027BA                        313 FDOT3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0027BA                        314     _DOLIT  '.' 
      0027BA CD 04 70         [ 4]    1     CALL DOLIT 
      0027BD 00 2E                    2     .word '.' 
      0027BF CD 0E 27         [ 4]  315     CALL    HOLD 
      0027C2 CD 0E 51         [ 4]  316     CALL    DIGS
      0027C5 20 12            [ 2]  317     JRA   FDOT9  
      0027C7                        318 FDOT6: ; e>=0 
      0027C7 20 08            [ 2]  319     JRA   FDOT8
      0027C9                        320 FDOT7:     
      0027C9                        321     _DOLIT  '0'
      0027C9 CD 04 70         [ 4]    1     CALL DOLIT 
      0027CC 00 30                    2     .word '0' 
      0027CE CD 0E 27         [ 4]  322     CALL    HOLD 
      0027D1                        323 FDOT8:
      0027D1                        324     _DONXT FDOT7 
      0027D1 CD 04 84         [ 4]    1     CALL DONXT 
      0027D4 27 C9                    2     .word FDOT7 
      0027D6 CD 0E 51         [ 4]  325     CALL    DIGS 
      0027D9                        326 FDOT9:
      0027D9 CD 25 E2         [ 4]  327     CALL    FNE 
      0027DC                        328     _QBRAN  FDOT10 
      0027DC CD 04 99         [ 4]    1     CALL QBRAN
      0027DF 27 E9                    2     .word FDOT10
      0027E1                        329     _DOLIT '-' 
      0027E1 CD 04 70         [ 4]    1     CALL DOLIT 
      0027E4 00 2D                    2     .word '-' 
      0027E6 CD 0E 27         [ 4]  330     CALL   HOLD 
      0027E9                        331 FDOT10:
      0027E9 CD 0E 7C         [ 4]  332     CALL    EDIGS 
      0027EC CD 10 4F         [ 4]  333     CALL    TYPES 
      0027EF CD 05 35         [ 4]  334     CALL    RFROM 
      0027F2 CD 06 E0         [ 4]  335     CALL    BASE 
      0027F5 CD 04 D2         [ 4]  336     CALL    STORE 
      0027F8 81               [ 4]  337     RET 
                                    338 
                                    339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    340 ;    number parser 
                                    341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    342 
                                    343 ; check for negative sign 
                                    344 ; ajust pointer and cntr 
      0027F9                        345 nsign: ; ( addr cntr -- addr cntr f ) 
      0027F9 1D 00 02         [ 2]  346     SUBW X,#CELLL ; a cntr f 
      0027FC 90 93            [ 1]  347     LDW Y,X 
      0027FE 90 EE 04         [ 2]  348     LDW Y,(4,Y) ; addr 
      002801 90 F6            [ 1]  349     LD A,(Y) ; char=*addr  
      002803 A1 2D            [ 1]  350     CP A,#'-' 
      002805 27 03            [ 1]  351     JREQ NEG_SIGN 
      002807 4F               [ 1]  352     CLR A  
      002808 20 18            [ 2]  353     JRA STO_SIGN 
      00280A                        354 NEG_SIGN:
                                    355 ; increment addr 
      00280A 90 93            [ 1]  356     LDW Y,X 
      00280C 90 EE 04         [ 2]  357     LDW Y,(4,Y)
      00280F 72 A9 00 01      [ 2]  358     ADDW Y,#1   ;addr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002813 EF 04            [ 2]  359     LDW (4,X),Y 
                                    360 ; decrement cntr 
      002815 90 93            [ 1]  361     LDW Y,X
      002817 90 EE 02         [ 2]  362     LDW Y,(2,Y)
      00281A 72 A2 00 01      [ 2]  363     SUBW Y,#1   ;cntr-1 
      00281E EF 02            [ 2]  364     LDW (2,X),Y 
      002820 A6 FF            [ 1]  365     LD A,#0XFF
      002822                        366 STO_SIGN:   
      002822 F7               [ 1]  367     LD (X),A 
      002823 E7 01            [ 1]  368     LD (1,X),A 
      002825 81               [ 4]  369     RET 
                                    370 
                                    371 
                                    372 ; get all digits in row 
                                    373 ; stop at first non-digit or end of string 
                                    374 ; ( n a cntr -- n  a+ cntr-  )
      002826                        375 parse_digits:
      002826 CD 06 1A         [ 4]  376     CALL DUPP 
      002829                        377     _QBRAN parse_d5  
      002829 CD 04 99         [ 4]    1     CALL QBRAN
      00282C 28 68                    2     .word parse_d5
      00282E CD 05 E3         [ 4]  378     CALL TOR   ; n a R: cntr 
      002831 CD 0C D2         [ 4]  379 1$: CALL COUNT ; n a+ char 
      002834 CD 06 E0         [ 4]  380     CALL BASE 
      002837 CD 04 E4         [ 4]  381     CALL AT 
      00283A CD 0E DB         [ 4]  382     CALL DIGTQ 
      00283D                        383     _QBRAN parse_d4 ; not a digit
      00283D CD 04 99         [ 4]    1     CALL QBRAN
      002840 28 5C                    2     .word parse_d4
      002842 CD 07 DE         [ 4]  384     CALL ROT 
      002845 CD 06 E0         [ 4]  385     CALL BASE 
      002848 CD 04 E4         [ 4]  386     CALL AT 
      00284B CD 0B 22         [ 4]  387     CALL STAR
      00284E CD 08 3D         [ 4]  388     CALL PLUS
      002851 CD 06 2A         [ 4]  389     CALL SWAPP  
      002854 CD 05 35         [ 4]  390     CALL RFROM  ; n a+ cntr 
      002857 CD 0B B0         [ 4]  391     CALL ONEM 
      00285A 20 CA            [ 2]  392     JRA parse_digits ; n a+ cntr  
      00285C                        393 parse_d4: ; n a+ char R: cntr 
      00285C 90 93            [ 1]  394     LDW Y,X 
      00285E 90 EE 02         [ 2]  395     LDW Y,(2,Y)
      002861 90 5A            [ 2]  396     DECW Y  ; dec(a)
      002863 EF 02            [ 2]  397     LDW (2,X),Y 
      002865 90 85            [ 2]  398     POPW Y 
      002867 FF               [ 2]  399     LDW (X),Y ; n a cntr  
      002868                        400 parse_d5:
      002868 81               [ 4]  401     RET 
                                    402 
                                    403 
                                    404      
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    406 ; return parsed exponent or 
                                    407 ; 0 if failed
                                    408 ; at entry exprect *a=='E'    
                                    409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002869                        410 parse_exponent: ; a cntr -- e -1 | 0 
      002869 CD 05 E3         [ 4]  411     CALL TOR   ; R: cntr 
      00286C CD 06 1A         [ 4]  412     CALL DUPP 
      00286F CD 05 02         [ 4]  413     CALL CAT 
      002872                        414     _DOLIT 'E' 
      002872 CD 04 70         [ 4]    1     CALL DOLIT 
      002875 00 45                    2     .word 'E' 
      002877 CD 08 FB         [ 4]  415     CALL EQUAL 
      00287A                        416     _QBRAN 1$
      00287A CD 04 99         [ 4]    1     CALL QBRAN
      00287D 28 A7                    2     .word 1$
      00287F CD 0B A3         [ 4]  417     CALL ONEP 
      002882 CD 05 35         [ 4]  418     CALL RFROM  ; a cntr 
      002885 CD 0B B0         [ 4]  419     CALL ONEM
      002888 CD 06 1A         [ 4]  420     CALL DUPP 
      00288B                        421     _QBRAN 2$ ; a cntr 
      00288B CD 04 99         [ 4]    1     CALL QBRAN
      00288E 28 AA                    2     .word 2$
      002890 CD 0C 0F         [ 4]  422     CALL ZERO
      002893 CD 07 FD         [ 4]  423     CALL NROT ;  0 a cntr  
      002896 CD 27 F9         [ 4]  424     CALL nsign 
      002899 CD 05 E3         [ 4]  425     CALL TOR   ; R: esign  
      00289C CD 28 26         [ 4]  426     CALL parse_digits
      00289F                        427     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      00289F CD 04 99         [ 4]    1     CALL QBRAN
      0028A2 28 B1                    2     .word PARSEXP_SUCCESS
                                    428 ; failed invalid character
      0028A4                        429     _DDROP ; 0 a 
      0028A4 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0028A7                        430 1$: 
      0028A7 CD 05 35         [ 4]  431     CALL RFROM ; sign||cntr  
      0028AA                        432 2$:
      0028AA                        433     _DDROP  ; a cntr || a sign || 0 cntr   
      0028AA 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0028AD CD 0C 0F         [ 4]  434     CALL ZERO   ; return only 0 
      0028B0 81               [ 4]  435     RET 
      0028B1                        436 PARSEXP_SUCCESS: ; n a  
      0028B1                        437     _DROP ; n  
      0028B1 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0028B4 CD 05 35         [ 4]  438     CALL RFROM ; esign  
      0028B7                        439     _QBRAN 1$
      0028B7 CD 04 99         [ 4]    1     CALL QBRAN
      0028BA 28 BF                    2     .word 1$
      0028BC CD 08 87         [ 4]  440     CALL NEGAT
      0028BF                        441 1$:
      0028BF                        442     _DOLIT -1 ; -- e -1 
      0028BF CD 04 70         [ 4]    1     CALL DOLIT 
      0028C2 FF FF                    2     .word -1 
      0028C4 81               [ 4]  443     RET 
                                    444 
                                    445 
                                    446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    447 ;   FLOAT?  ( a n a+ cnt sign  -- f24 -3 | a 0 )
                                    448 ;   called by NUMBER? 
                                    449 ;   convert string to float 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                    450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C5                        451     _HEADER FLOATQ,5,"FLOAT?"
      0028C5 27 5D                    1         .word LINK 
                           0028C7     2         LINK=.
      0028C7 05                       3         .byte 5  
      0028C8 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      0028CE                          5         FLOATQ:
                                    452 ; BASE must be 10 
      0028CE CD 06 E0         [ 4]  453     CALL BASE 
      0028D1 CD 04 E4         [ 4]  454     CALL AT 
      0028D4                        455     _DOLIT 10 
      0028D4 CD 04 70         [ 4]    1     CALL DOLIT 
      0028D7 00 0A                    2     .word 10 
      0028D9 CD 08 FB         [ 4]  456     CALL EQUAL 
      0028DC                        457     _QBRAN FLOAT_ERROR 
      0028DC CD 04 99         [ 4]    1     CALL QBRAN
      0028DF 29 AD                    2     .word FLOAT_ERROR
                                    458 ; if float next char is '.' or 'E' 
      0028E1 CD 05 E3         [ 4]  459     CALL TOR ; R: sign  
      0028E4 CD 05 E3         [ 4]  460     CALL TOR ; R: sign cntr 
      0028E7 CD 06 1A         [ 4]  461     CALL DUPP
      0028EA CD 05 02         [ 4]  462     CALL CAT 
      0028ED                        463     _DOLIT '.' 
      0028ED CD 04 70         [ 4]    1     CALL DOLIT 
      0028F0 00 2E                    2     .word '.' 
      0028F2 CD 08 FB         [ 4]  464     CALL EQUAL 
      0028F5                        465     _QBRAN FLOATQ1 ; not a dot 
      0028F5 CD 04 99         [ 4]    1     CALL QBRAN
      0028F8 29 4D                    2     .word FLOATQ1
      0028FA CD 0B A3         [ 4]  466     CALL ONEP 
      0028FD CD 05 35         [ 4]  467     CALL RFROM  ; a  n a+ cntr R: sign  
      002900 CD 0B B0         [ 4]  468     CALL ONEM 
      002903 CD 06 1A         [ 4]  469     CALL DUPP 
      002906 CD 05 E3         [ 4]  470     CALL TOR  ; R: sign cntr 
                                    471 ; parse fractional part
      002909 CD 28 26         [ 4]  472     CALL parse_digits ; a n a+ cntr -- n a cntr 
      00290C                        473     _DOLIT 2 
      00290C CD 04 70         [ 4]    1     CALL DOLIT 
      00290F 00 02                    2     .word 2 
      002911 CD 0C 68         [ 4]  474     CALL  PICK ; n a cnt n  
      002914 CD 06 51         [ 4]  475     CALL ZLESS  
      002917 CD 14 D0         [ 4]  476     CALL ABORQ 
      00291A 11                     477     .byte 17 
      00291B 6D 61 6E 74 69 73 73   478     .ascii "mantissa overflow"
             61 20 6F 76 65 72 66
             6C 6F 77
      00292C CD 06 1A         [ 4]  479     CALL DUPP 
      00292F CD 05 35         [ 4]  480     CALL RFROM 
      002932 CD 06 2A         [ 4]  481     CALL SWAPP 
      002935 CD 08 D3         [ 4]  482     CALL SUBB ; fd -> fraction digits count 
      002938 CD 05 E3         [ 4]  483     CALL TOR  ; n a cntr R: sign fd 
      00293B CD 06 1A         [ 4]  484     CALL DUPP ; cntr cntr  
      00293E                        485     _QBRAN 1$ ; end of string, no exponent
      00293E CD 04 99         [ 4]    1     CALL QBRAN
      002941 29 45                    2     .word 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002943 20 11            [ 2]  486     JRA FLOATQ2
      002945 CD 06 2A         [ 4]  487 1$: CALL SWAPP 
      002948                        488     _DROP ; a
      002948 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00294B 20 11            [ 2]  489     JRA FLOATQ3        
      00294D                        490 FLOATQ1: ; must push fd==0 on RSTACK 
      00294D CD 05 35         [ 4]  491     CALL RFROM ; cntr 
      002950 CD 0C 0F         [ 4]  492     CALL ZERO  ; fd 
      002953 CD 05 E3         [ 4]  493     CALL TOR   ; m a cntr R: sign fd 
      002956                        494 FLOATQ2: 
      002956 CD 28 69         [ 4]  495     CALL parse_exponent 
      002959                        496     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002959 CD 04 99         [ 4]    1     CALL QBRAN
      00295C 29 A7                    2     .word FLOAT_ERROR0
      00295E                        497 FLOATQ3: ; m 0 || m e  
      00295E CD 05 35         [ 4]  498     CALL RFROM ;  fd  
      002961 CD 08 D3         [ 4]  499     CALL SUBB  ; exp=e-fd 
      002964 CD 06 1A         [ 4]  500     CALL DUPP
      002967 CD 08 ED         [ 4]  501     CALL ABSS  
      00296A                        502     _DOLIT 127
      00296A CD 04 70         [ 4]    1     CALL DOLIT 
      00296D 00 7F                    2     .word 127 
      00296F CD 09 54         [ 4]  503     CALL GREAT 
      002972 CD 14 D0         [ 4]  504     CALL ABORQ 
      002975 11                     505     .byte 17 
      002976 65 78 70 6F 6E 65 6E   506     .ascii "exponent overflow" 
             74 20 6F 76 65 72 66
             6C 6F 77
      002987 CD 06 2A         [ 4]  507     CALL SWAPP  
      00298A CD 05 35         [ 4]  508     CALL RFROM  ; sign 
      00298D                        509     _QBRAN FLOATQ4 
      00298D CD 04 99         [ 4]    1     CALL QBRAN
      002990 29 95                    2     .word FLOATQ4
      002992 CD 08 87         [ 4]  510     CALL NEGAT 
      002995                        511 FLOATQ4:
      002995 CD 07 DE         [ 4]  512     CALL ROT  
      002998                        513     _DROP 
      002998 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00299B CD 06 2A         [ 4]  514     CALL SWAPP ; m e 
      00299E CD 26 22         [ 4]  515     CALL SET_FPSW 
      0029A1                        516     _DOLIT -3 
      0029A1 CD 04 70         [ 4]    1     CALL DOLIT 
      0029A4 FF FD                    2     .word -3 
      0029A6 81               [ 4]  517     RET       
      0029A7                        518 FLOAT_ERROR0: 
      0029A7 CD 05 35         [ 4]  519     CALL RFROM ; df 
      0029AA CD 05 35         [ 4]  520     CALL RFROM ; df sign 
      0029AD                        521 FLOAT_ERROR: 
      0029AD CD 0C 51         [ 4]  522     CALL DEPTH 
      0029B0 CD 0B 96         [ 4]  523     CALL CELLS 
      0029B3 CD 05 FA         [ 4]  524     CALL SPAT 
      0029B6 CD 06 2A         [ 4]  525     CALL SWAPP 
      0029B9 CD 08 3D         [ 4]  526     CALL PLUS  
      0029BC CD 06 07         [ 4]  527     CALL SPSTO 
      0029BF CD 0C 0F         [ 4]  528     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      0029C2 81               [ 4]  529     RET 
                                    530 
                                    531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    532 ;  LSCALE ( f24 -- f24 )
                                    533 ;  m *=10 , e -= 1
                                    534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029C3                        535     _HEADER LSCALE,6,"LSCALE"
      0029C3 28 C7                    1         .word LINK 
                           0029C5     2         LINK=.
      0029C5 06                       3         .byte 6  
      0029C6 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      0029CC                          5         LSCALE:
      0029CC CD 0C 1A         [ 4]  536     CALL ONE 
      0029CF CD 08 D3         [ 4]  537     CALL SUBB 
      0029D2 CD 05 E3         [ 4]  538     CALL TOR
      0029D5                        539     _DOLIT 10 
      0029D5 CD 04 70         [ 4]    1     CALL DOLIT 
      0029D8 00 0A                    2     .word 10 
      0029DA CD 0B 22         [ 4]  540     CALL STAR
      0029DD CD 05 35         [ 4]  541     CALL RFROM 
      0029E0 81               [ 4]  542     RET  
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  RSCALE ( f# -- f# )
                                    546 ;  m /=10 , e+=1 
                                    547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029E1                        548     _HEADER RSCALE,6,"RSCALE"
      0029E1 29 C5                    1         .word LINK 
                           0029E3     2         LINK=.
      0029E3 06                       3         .byte 6  
      0029E4 52 53 43 41 4C 45        4         .ascii "RSCALE"
      0029EA                          5         RSCALE:
      0029EA CD 0C 1A         [ 4]  549     CALL ONE 
      0029ED CD 08 3D         [ 4]  550     CALL PLUS 
      0029F0 CD 05 E3         [ 4]  551     CALL TOR 
      0029F3                        552     _DOLIT 10 
      0029F3 CD 04 70         [ 4]    1     CALL DOLIT 
      0029F6 00 0A                    2     .word 10 
      0029F8 CD 0A C9         [ 4]  553     CALL SLASH  
      0029FB CD 05 35         [ 4]  554     CALL RFROM 
      0029FE 81               [ 4]  555     RET 
                                    556 
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    558 ;  F24LITERAL ( f24 -- )
                                    559 ;  compile 24 bits literal 
                                    560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029FF                        561     _HEADER FLITER,COMPO+IMEDD+10,"F24LITERAL"
      0029FF 29 E3                    1         .word LINK 
                           002A01     2         LINK=.
      002A01 CA                       3         .byte COMPO+IMEDD+10  
      002A02 46 32 34 4C 49 54 45     4         .ascii "F24LITERAL"
             52 41 4C
      002A0C                          5         FLITER:
      002A0C CD 16 50         [ 4]  562     CALL COMPI 
      002A0F 2A 17                  563     .word dof24lit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002A11 CD 16 22         [ 4]  564     CALL CCOMMA 
      002A14 CC 16 0B         [ 2]  565     JP   COMMA 
                                    566 
                                    567 
                                    568 ; runtime for F24LITERAL
                                    569 ; 24 bits literal 
      002A17                        570 dof24lit:
      002A17 1D 00 04         [ 2]  571     SUBW X,#4 
      002A1A 16 01            [ 2]  572     LDW Y,(1,SP)
      002A1C 90 F6            [ 1]  573     LD A,(Y)
      002A1E 90 5F            [ 1]  574     CLRW Y 
      002A20 90 97            [ 1]  575     LD YL,A 
      002A22 4D               [ 1]  576     TNZ A 
      002A23 2A 04            [ 1]  577     JRPL 1$
      002A25 A6 FF            [ 1]  578     LD A,#255 
      002A27 90 95            [ 1]  579     LD YH,A   
      002A29 FF               [ 2]  580 1$: LDW (X),Y 
      002A2A 16 01            [ 2]  581     LDW Y,(1,SP)
      002A2C 90 EE 02         [ 2]  582     LDW Y,(2,Y)
      002A2F EF 02            [ 2]  583     LDW (2,X),Y 
      002A31 90 85            [ 2]  584     POPW Y 
      002A33 90 EC 03         [ 2]  585     JP (3,Y)
                                    586 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;   F24CONST ( f24 -- )
                                    590 ;   create a float24 constant 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A36                        592     _HEADER F24CONST,8,"F24CONST" 
      002A36 2A 01                    1         .word LINK 
                           002A38     2         LINK=.
      002A38 08                       3         .byte 8  
      002A39 46 32 34 43 4F 4E 53     4         .ascii "F24CONST"
             54
      002A41                          5         F24CONST:
      002A41 CD 12 C7         [ 4]  593         CALL TOKEN
      002A44 CD 18 09         [ 4]  594         CALL SNAME 
      002A47 CD 18 A0         [ 4]  595         CALL OVERT 
      002A4A CD 16 50         [ 4]  596         CALL COMPI 
      002A4D 2A 64                  597         .word DOF24CONST
      002A4F CD 16 22         [ 4]  598         CALL CCOMMA
      002A52 CD 16 0B         [ 4]  599         CALL COMMA  
      002A55 CD 23 64         [ 4]  600         CALL FMOVE
      002A58 CD 07 CD         [ 4]  601         CALL QDUP 
      002A5B CD 04 99         [ 4]  602         CALL QBRAN 
      002A5E 1A 3D                  603         .word SET_RAMLAST  
      002A60 CD 23 F8         [ 4]  604         CALL UPDATPTR  
      002A63 81               [ 4]  605         RET          
                                    606 
      002A64                        607 DOF24CONST:
      002A64 16 01            [ 2]  608     LDW Y,(1,SP) 
      002A66 1D 00 04         [ 2]  609     SUBW x,#2*CELLL 
      002A69 90 F6            [ 1]  610     LD A,(Y)
      002A6B 90 5F            [ 1]  611     CLRW Y 
      002A6D 90 97            [ 1]  612     LD YL,A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002A6F 4D               [ 1]  613     TNZ A 
      002A70 2A 04            [ 1]  614     JRPL 1$
      002A72 A6 FF            [ 1]  615     LD A,#255
      002A74 90 95            [ 1]  616     LD YH,A 
      002A76                        617 1$:      
      002A76 FF               [ 2]  618     LDW (X),Y 
      002A77 90 85            [ 2]  619     POPW Y 
      002A79 90 EE 01         [ 2]  620     LDW Y,(1,Y)
      002A7C EF 02            [ 2]  621     LDW (2,X),Y 
      002A7E 81               [ 4]  622     RET 
                                    623 
                                    624 
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 ;   F24VAR "name" ( -- )
                                    627 ;   create a float24 variable 
                                    628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A7F                        629     _HEADER F24VAR,6,"F24VAR"
      002A7F 2A 38                    1         .word LINK 
                           002A81     2         LINK=.
      002A81 06                       3         .byte 6  
      002A82 46 32 34 56 41 52        4         .ascii "F24VAR"
      002A88                          5         F24VAR:
      002A88 CD 0C E9         [ 4]  630     CALL HERE
      002A8B CD 06 1A         [ 4]  631     CALL DUPP
      002A8E                        632     _DOLIT 3  
      002A8E CD 04 70         [ 4]    1     CALL DOLIT 
      002A91 00 03                    2     .word 3 
      002A93 CD 08 3D         [ 4]  633     CALL PLUS 
      002A96 CD 07 71         [ 4]  634     CALL VPP 
      002A99 CD 04 D2         [ 4]  635     CALL STORE
      002A9C CD 19 F0         [ 4]  636     CALL CREAT
      002A9F CD 06 1A         [ 4]  637     CALL DUPP
      002AA2 CD 16 0B         [ 4]  638     CALL COMMA
      002AA5 CD 0C 0F         [ 4]  639     CALL ZERO
      002AA8 CD 06 42         [ 4]  640     CALL OVER 
      002AAB CD 04 F1         [ 4]  641     CALL CSTOR 
      002AAE CD 0C 0F         [ 4]  642     CALL ZERO 
      002AB1 CD 06 2A         [ 4]  643     CALL SWAPP 
      002AB4 CD 0B A3         [ 4]  644     CALL ONEP  
      002AB7 CD 04 D2         [ 4]  645     CALL STORE 
      002ABA CD 23 64         [ 4]  646     CALL FMOVE ; move definition to FLASH
      002ABD CD 07 CD         [ 4]  647     CALL QDUP 
      002AC0 CD 04 99         [ 4]  648     CALL QBRAN 
      002AC3 1A 3D                  649     .word SET_RAMLAST   
      002AC5 CD 1E 0C         [ 4]  650     CALL UPDATVP  ; don't update if variable kept in RAM.
      002AC8 CC 23 F8         [ 2]  651     JP UPDATPTR
                                    652 
                                    653 
                                    654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    655 ;   F24! ( f24 a -- )
                                    656 ;   store float24 
                                    657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ACB                        658     _HEADER F24STO,4,"F24!"
      002ACB 2A 81                    1         .word LINK 
                           002ACD     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002ACD 04                       3         .byte 4  
      002ACE 46 32 34 21              4         .ascii "F24!"
      002AD2                          5         F24STO:
      002AD2 90 93            [ 1]  659     LDW Y,X 
      002AD4 90 FE            [ 2]  660     LDW Y,(Y) ; a 
      002AD6 E6 03            [ 1]  661     LD A,(3,X) ; e low  
      002AD8 90 F7            [ 1]  662     LD (Y),A
      002ADA 72 A9 00 01      [ 2]  663     ADDW Y,#1  
      002ADE 90 BF 26         [ 2]  664     LDW YTEMP,Y 
      002AE1 90 93            [ 1]  665     LDW Y,X 
      002AE3 90 EE 04         [ 2]  666     LDW Y,(4,Y) ; m 
      002AE6 91 CF 26         [ 5]  667     LDW [YTEMP],Y 
      002AE9 1C 00 06         [ 2]  668     ADDW X,#3*CELLL 
      002AEC 81               [ 4]  669     RET 
                                    670 
                                    671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    672 ;   F24@ ( a -- f24 )
                                    673 ;   stack float24 variable 
                                    674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AED                        675     _HEADER F24AT,4,"F24@"
      002AED 2A CD                    1         .word LINK 
                           002AEF     2         LINK=.
      002AEF 04                       3         .byte 4  
      002AF0 46 32 34 40              4         .ascii "F24@"
      002AF4                          5         F24AT:
      002AF4 90 93            [ 1]  676     LDW Y,X 
      002AF6 90 FE            [ 2]  677     LDW Y,(Y) ; a 
      002AF8 90 89            [ 2]  678     PUSHW Y 
      002AFA 1D 00 02         [ 2]  679     SUBW X,#CELLL 
      002AFD 90 EE 01         [ 2]  680     LDW Y,(1,Y) ; m 
      002B00 EF 02            [ 2]  681     LDW (2,X),Y 
      002B02 90 85            [ 2]  682     POPW Y   ; a 
      002B04 90 F6            [ 1]  683     LD A,(Y) ; e 
      002B06 90 5F            [ 1]  684     CLRW Y 
      002B08 90 97            [ 1]  685     LD YL,A 
      002B0A 4D               [ 1]  686     TNZ A 
      002B0B 2A 04            [ 1]  687     JRPL 1$
      002B0D A6 FF            [ 1]  688     LD A,#255 
      002B0F 90 95            [ 1]  689     LD YH,A 
      002B11 FF               [ 2]  690 1$: LDW (X),Y ; m e -- 
      002B12 CC 26 22         [ 2]  691     JP SET_FPSW 
                                    692 
                                    693 
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    695 ;  SCALEUP ( um u1 u2 -- um* u1 u2* )
                                    696 ;  while (um<=0xccc && u1<u2 ){
                                    697 ;        um*10;
                                    698 ;        u2--;
                                    699 ;  }  
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B15                        701 SCALEUP:
      002B15 CD 08 28         [ 4]  702     CALL DDUP
      002B18 CD 09 27         [ 4]  703     CALL LESS  
      002B1B                        704     _QBRAN SCALEUP3
      002B1B CD 04 99         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002B1E 2B 46                    2     .word SCALEUP3
      002B20 CD 07 DE         [ 4]  705     CALL ROT 
      002B23 CD 06 1A         [ 4]  706     CALL DUPP 
      002B26                        707     _DOLIT 0XCCC 
      002B26 CD 04 70         [ 4]    1     CALL DOLIT 
      002B29 0C CC                    2     .word 0XCCC 
      002B2B CD 09 54         [ 4]  708     CALL GREAT  
      002B2E                        709     _TBRAN SCALEUP2 
      002B2E CD 04 A7         [ 4]    1     CALL TBRAN 
      002B31 2B 43                    2     .word SCALEUP2 
      002B33                        710     _DOLIT 10 
      002B33 CD 04 70         [ 4]    1     CALL DOLIT 
      002B36 00 0A                    2     .word 10 
      002B38 CD 0B 22         [ 4]  711     CALL STAR 
      002B3B CD 07 FD         [ 4]  712     CALL NROT 
      002B3E CD 0B B0         [ 4]  713     CALL ONEM
      002B41 20 D2            [ 2]  714     JRA SCALEUP
      002B43                        715 SCALEUP2:
      002B43 CD 07 FD         [ 4]  716     CALL NROT 
      002B46                        717 SCALEUP3: 
      002B46 81               [ 4]  718     RET 
                                    719 
                                    720 
                                    721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    722 ; SCALEDOWN ( um u1 u2 -- um* u1 u2* )
                                    723 ;  whhile (um && u1>u2 ){ 
                                    724 ;     um/10;
                                    725 ;     u2++;
                                    726 ;  } 
                                    727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B47                        728 SCALEDOWN: 
      002B47 CD 08 28         [ 4]  729     CALL DDUP 
      002B4A CD 09 54         [ 4]  730     CALL GREAT 
      002B4D                        731     _QBRAN SCALDN3 
      002B4D CD 04 99         [ 4]    1     CALL QBRAN
      002B50 2B 73                    2     .word SCALDN3
      002B52 CD 07 DE         [ 4]  732     CALL ROT  
      002B55 CD 06 1A         [ 4]  733     CALL DUPP 
      002B58 CD 06 63         [ 4]  734     CALL ZEQUAL 
      002B5B                        735     _TBRAN SCALDN2  
      002B5B CD 04 A7         [ 4]    1     CALL TBRAN 
      002B5E 2B 70                    2     .word SCALDN2 
      002B60                        736     _DOLIT 10
      002B60 CD 04 70         [ 4]    1     CALL DOLIT 
      002B63 00 0A                    2     .word 10 
      002B65 CD 0A C9         [ 4]  737     CALL SLASH 
      002B68 CD 07 FD         [ 4]  738     CALL NROT  
      002B6B CD 0B A3         [ 4]  739     CALL ONEP  
      002B6E 20 D7            [ 2]  740     JRA SCALEDOWN 
      002B70                        741 SCALDN2:
      002B70 CD 07 FD         [ 4]  742     CALL NROT  
      002B73                        743 SCALDN3:
      002B73 81               [ 4]  744     RET 
                                    745 
                                    746 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    747 
                                    748 
                                    749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    750 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    751 ;  align to same exponent 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B74                        753     _HEADER FALIGN,7,"F-ALIGN"
      002B74 2A EF                    1         .word LINK 
                           002B76     2         LINK=.
      002B76 07                       3         .byte 7  
      002B77 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      002B7E                          5         FALIGN:
      002B7E CD 05 E3         [ 4]  754     CALL TOR  
      002B81 CD 06 2A         [ 4]  755     CALL SWAPP  ; m1 m2 e1 R: e2 
      002B84 CD 05 35         [ 4]  756     CALL RFROM ; m1 m2 e1 e2 
      002B87 CD 08 28         [ 4]  757     CALL DDUP  
      002B8A CD 08 FB         [ 4]  758     CALL EQUAL 
      002B8D                        759     _QBRAN FALGN1 
      002B8D CD 04 99         [ 4]    1     CALL QBRAN
      002B90 2B 96                    2     .word FALGN1
      002B92                        760     _DROP 
      002B92 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B95 81               [ 4]  761     RET 
      002B96                        762 FALGN1:     
                                    763 ; scale mantissa absolute values 
      002B96 CD 05 E3         [ 4]  764     CALL TOR 
      002B99 CD 05 E3         [ 4]  765     CALL TOR   ; m1 m2 R: e2 e1 
      002B9C CD 26 CB         [ 4]  766     CALL MSIGN 
      002B9F CD 07 FD         [ 4]  767     CALL NROT  ; m2s m1 m2  
      002BA2 CD 08 ED         [ 4]  768     CALL ABSS  ; m2s m1 um2 
      002BA5 CD 06 2A         [ 4]  769     CALL SWAPP  ; m2s um2 m1 
      002BA8 CD 26 CB         [ 4]  770     CALL MSIGN ; m2s um2 m1 m1s 
      002BAB CD 07 FD         [ 4]  771     CALL NROT  ; m2s m1s um2 m1     
      002BAE CD 08 ED         [ 4]  772     CALL ABSS  ; m2s m1s um2 um1 
      002BB1 CD 06 2A         [ 4]  773     CALL SWAPP ; m2s m1s um1 um2       
                                    774 ; scaleup the largest float 
                                    775 ; but limit mantissa <=0xCCC 
                                    776 ; to avoid mantissa overflow     
      002BB4 CD 05 35         [ 4]  777     CALL RFROM 
      002BB7 CD 05 35         [ 4]  778     CALL RFROM ; m2s m1s um1 um2 e1 e2 
      002BBA CD 08 28         [ 4]  779     CALL DDUP 
      002BBD CD 09 27         [ 4]  780     CALL LESS  
      002BC0                        781     _QBRAN FALGN4 ; e2<e1 
      002BC0 CD 04 99         [ 4]    1     CALL QBRAN
      002BC3 2B CA                    2     .word FALGN4
                                    782 ; e2>e1 then scale up m2   
      002BC5 CD 2B 15         [ 4]  783     CALL SCALEUP  ; ... um1 um2* e1 e2* 
      002BC8 20 2A            [ 2]  784     JRA FALGN6
      002BCA                        785 FALGN4: ; e2<e1 then scaleup m1 
      002BCA CD 05 E3         [ 4]  786     CALL TOR   ; ... um1 um2 e1 R: e2
      002BCD CD 05 E3         [ 4]  787     CALL TOR   ; ... um1 um2 R: e2 e1 
      002BD0 CD 06 2A         [ 4]  788     CALL SWAPP 
      002BD3 CD 05 35         [ 4]  789     CALL RFROM  
      002BD6 CD 05 35         [ 4]  790     CALL RFROM 
      002BD9 CD 06 2A         [ 4]  791     CALL SWAPP ; .. um2 um1 e2 e1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002BDC CD 2B 15         [ 4]  792     CALL SCALEUP ; um2 um1* e2 e1* 
      002BDF CD 06 2A         [ 4]  793     CALL SWAPP 
      002BE2 CD 05 E3         [ 4]  794     CALL TOR
      002BE5 CD 05 E3         [ 4]  795     CALL TOR     
      002BE8 CD 06 2A         [ 4]  796     CALL SWAPP  ; um1 um2 R: e2 e1
      002BEB CD 05 35         [ 4]  797     CALL RFROM 
      002BEE CD 05 35         [ 4]  798     CALL RFROM
      002BF1 CD 06 2A         [ 4]  799     CALL SWAPP  ; ... um1 um2 e1 e2  
                                    800 ; check again for e2==e1 
                                    801 ; if scaleup was not enough 
                                    802 ; to equalize exponent then
                                    803 ; scaledown smallest float     
      002BF4                        804 FALGN6: 
      002BF4 CD 08 28         [ 4]  805     CALL DDUP 
      002BF7 CD 08 FB         [ 4]  806     CALL EQUAL 
      002BFA                        807     _TBRAN FALGN8 
      002BFA CD 04 A7         [ 4]    1     CALL TBRAN 
      002BFD 2C 4F                    2     .word FALGN8 
                                    808 ; e2!=e1 need to scale down smallest 
      002BFF CD 08 28         [ 4]  809     CALL DDUP
      002C02 CD 09 27         [ 4]  810     CALL LESS  
      002C05                        811     _QBRAN FALGN7 ; e2<e1 
      002C05 CD 04 99         [ 4]    1     CALL QBRAN
      002C08 2C 33                    2     .word FALGN7
                                    812 ; e2>e1 scaledown m1 
      002C0A CD 05 E3         [ 4]  813     CALL TOR 
      002C0D CD 05 E3         [ 4]  814     CALL TOR 
      002C10 CD 06 2A         [ 4]  815     CALL SWAPP   ; ... um2 um1 
      002C13 CD 05 35         [ 4]  816     CALL RFROM  ; ... um2 um1 e1 
      002C16 CD 05 35         [ 4]  817     CALL RFROM  ; ... um2 um1 e1 e2 
      002C19 CD 06 2A         [ 4]  818     CALL SWAPP  ; ... um2 um1 e2 e1 
      002C1C CD 2B 47         [ 4]  819     CALL SCALEDOWN
      002C1F CD 06 2A         [ 4]  820     CALL SWAPP 
      002C22 CD 05 E3         [ 4]  821     CALL TOR
      002C25 CD 05 E3         [ 4]  822     CALL TOR 
      002C28 CD 06 2A         [ 4]  823     CALL SWAPP   ; m1 m2 R: e2 e1  
      002C2B CD 05 35         [ 4]  824     CALL RFROM 
      002C2E CD 05 35         [ 4]  825     CALL RFROM   ; ... um1 um2 e1 e2 
      002C31 20 03            [ 2]  826     JRA FALGN71  
      002C33                        827 FALGN7: ; e2<e1 scaledown m2 
      002C33 CD 2B 47         [ 4]  828     CALL SCALEDOWN 
                                    829 ; after scaledown if e2!=e1 
                                    830 ; this imply that one of mantissa 
                                    831 ; as been nullified by scalling 
                                    832 ; hence keep largest exponent 
      002C36                        833 FALGN71:
      002C36 CD 08 28         [ 4]  834     CALL DDUP 
      002C39 CD 08 FB         [ 4]  835     CALL EQUAL
      002C3C                        836     _TBRAN FALGN8 
      002C3C CD 04 A7         [ 4]    1     CALL TBRAN 
      002C3F 2C 4F                    2     .word FALGN8 
      002C41 CD 08 28         [ 4]  837     CALL DDUP  
      002C44 CD 09 54         [ 4]  838     CALL GREAT ; e1>e2 ? 
      002C47                        839     _TBRAN FALGN8
      002C47 CD 04 A7         [ 4]    1     CALL TBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002C4A 2C 4F                    2     .word FALGN8 
      002C4C CD 06 2A         [ 4]  840     CALL SWAPP     
      002C4F                        841 FALGN8: ; m2s m1s um1 um2 e2 e1  
      002C4F                        842     _DROP  ; m2s m1s um1 um2 e 
      002C4F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002C52 CD 05 E3         [ 4]  843     CALL TOR 
      002C55 CD 05 E3         [ 4]  844     CALL TOR 
      002C58 CD 06 2A         [ 4]  845     CALL SWAPP ; m2s um1 m1s 
      002C5B                        846     _QBRAN FALGN9 
      002C5B CD 04 99         [ 4]    1     CALL QBRAN
      002C5E 2C 63                    2     .word FALGN9
      002C60 CD 08 87         [ 4]  847     CALL NEGAT 
      002C63                        848 FALGN9:  
      002C63 CD 06 2A         [ 4]  849     CALL SWAPP 
      002C66 CD 05 35         [ 4]  850     CALL RFROM 
      002C69 CD 06 2A         [ 4]  851     CALL SWAPP 
      002C6C                        852     _QBRAN FALGN10 
      002C6C CD 04 99         [ 4]    1     CALL QBRAN
      002C6F 2C 74                    2     .word FALGN10
      002C71 CD 08 87         [ 4]  853     CALL NEGAT 
      002C74                        854 FALGN10: ; m1 m2 
      002C74 CD 05 35         [ 4]  855     CALL RFROM ; m1 m2 e 
      002C77 81               [ 4]  856     RET 
                                    857 
                                    858 
                                    859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    860 ;  add 2 mantissa and ajust 
                                    861 ;  for overflow 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C78                        863 MPLUS: ; m1 m2 e -- m* e* )  
      002C78 CD 05 E3         [ 4]  864     CALL TOR 
      002C7B 90 93            [ 1]  865     LDW Y,X 
      002C7D 90 FE            [ 2]  866     LDW Y,(Y)
      002C7F 90 89            [ 2]  867     PUSHW Y 
      002C81 90 93            [ 1]  868     LDW Y,X 
      002C83 90 EE 02         [ 2]  869     LDW Y,(2,Y)
      002C86 72 F9 01         [ 2]  870     ADDW Y,(1,SP)
      002C89 EF 02            [ 2]  871     LDW (2,X),Y ; sum 
      002C8B 90 85            [ 2]  872     POPW Y ; drop local variable m2 
      002C8D 28 40            [ 1]  873     JRNV 3$  ; no overflow, done 
                                    874 ; increment e 
      002C8F 16 01            [ 2]  875     LDW Y,(1,SP) ; e
      002C91 72 A9 00 01      [ 2]  876     ADDW Y,#1    ; increment e 
      002C95 17 01            [ 2]  877     LDW (1,SP),Y
                                    878 ; divide mantissa by 10
      002C97 E6 02            [ 1]  879     LD A,(2,X) 
      002C99 88               [ 1]  880     PUSH A 
      002C9A 2B 09            [ 1]  881     JRMI 0$ 
      002C9C 90 93            [ 1]  882     LDW Y,X 
      002C9E 90 EE 02         [ 2]  883     LDW Y,(2,Y)
      002CA1 90 50            [ 2]  884     NEGW Y 
      002CA3 EF 02            [ 2]  885     LDW (2,X),Y 
      002CA5 90 AE 00 0A      [ 2]  886 0$: LDW Y,#10 
      002CA9 FF               [ 2]  887     LDW (X),Y 
      002CAA CD 0A 01         [ 4]  888     CALL USLMOD ; remainder  sum/10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002CAD CD 06 2A         [ 4]  889     CALL SWAPP
      002CB0                        890     _DOLIT 5 
      002CB0 CD 04 70         [ 4]    1     CALL DOLIT 
      002CB3 00 05                    2     .word 5 
      002CB5 CD 09 27         [ 4]  891     CALL LESS
      002CB8 84               [ 1]  892     POP A 
      002CB9                        893     _TBRAN 2$
      002CB9 CD 04 A7         [ 4]    1     CALL TBRAN 
      002CBC 2C CC                    2     .word 2$ 
      002CBE 90 93            [ 1]  894     LDW Y,X
      002CC0 90 FE            [ 2]  895     LDW Y,(Y) 
      002CC2 72 A9 00 01      [ 2]  896     ADDW Y,#1
      002CC6 4D               [ 1]  897     TNZ A 
      002CC7 2B 02            [ 1]  898     JRMI 1$
      002CC9 90 50            [ 2]  899     NEGW Y 
      002CCB FF               [ 2]  900 1$: LDW (X),Y  
      002CCC 1D 00 02         [ 2]  901 2$: SUBW X,#CELLL  
      002CCF                        902 3$: 
      002CCF 90 85            [ 2]  903     POPW Y  ; e 
      002CD1 FF               [ 2]  904     LDW (X),Y  ; e  
      002CD2 81               [ 4]  905     RET 
                                    906 
                                    907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    908 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    909 ;   float addition 
                                    910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CD3                        911     _HEADER FPLUS,2,"F+"
      002CD3 2B 76                    1         .word LINK 
                           002CD5     2         LINK=.
      002CD5 02                       3         .byte 2  
      002CD6 46 2B                    4         .ascii "F+"
      002CD8                          5         FPLUS:
      002CD8 CD 2B 7E         [ 4]  912     CALL FALIGN 
      002CDB CD 2C 78         [ 4]  913     CALL MPLUS
      002CDE CD 26 22         [ 4]  914     CALL SET_FPSW
      002CE1 81               [ 4]  915     RET 
                                    916 
                                    917 
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    919 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    920 ;  substraction 
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CE2                        922     _HEADER FSUB,2,"F-"
      002CE2 2C D5                    1         .word LINK 
                           002CE4     2         LINK=.
      002CE4 02                       3         .byte 2  
      002CE5 46 2D                    4         .ascii "F-"
      002CE7                          5         FSUB:
      002CE7 CD 2B 7E         [ 4]  923     CALL FALIGN 
      002CEA CD 05 E3         [ 4]  924     CALL TOR 
      002CED CD 08 D3         [ 4]  925     CALL SUBB
      002CF0 CD 05 35         [ 4]  926     CALL RFROM
      002CF3 CD 26 22         [ 4]  927     CALL SET_FPSW
      002CF6 81               [ 4]  928     RET 
                                    929 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                    930 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   4680 .endif 
                                   4681 
                                   4682 ;===============================================================
                                   4683 
                           002CE4  4684 LASTN =	LINK   ;last name defined
                                   4685 
                                   4686 ; application code begin here
      002D00                       4687 	.bndry 128 ; align on flash block  
      002D00                       4688 app_space: 
                                   4689 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F6 R   |   6 ABOR1      0014D8 R
  6 ABOR2      0014EF R   |   6 ABORQ      0014D0 R   |   6 ABORT      0014C1 R
  6 ABRTQ      0017BB R   |   6 ABSS       0008ED R   |   6 ACCEP      001457 R
  6 ACCP1      001460 R   |   6 ACCP2      001486 R   |   6 ACCP3      001489 R
  6 ACCP4      00148B R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BD R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0017A6 R   |   6 AGAIN      0016F0 R
  6 AHEAD      001753 R   |   6 ALLOT      0015FD R   |   6 ANDD       000677 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E4 R   |   6 ATEXE      000D1F R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E1 R   |     B19200  =  000003     |   6 B19K2      0003BE R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038F R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039D R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CF R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AD R   |   6 BACK1      0013FF R   |   6 BASE       0006E0 R
    BASEE   =  00000A     |   6 BAUD       0003F1 R   |     BCNT    =  000001 
  6 BCOMP      001640 R   |   6 BDIGS      000E17 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0016D2 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001254 R   |   6 BKSP       0013CF R   |     BKSPP   =  000008 
  6 BLANK      000C02 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B5 R   |     BTW     =  000001 
  6 BUF2ROW    0022D7 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     00246F R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000502 R   |   6 CCOMMA     001622 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B87 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000B78 R   |   6 CELLS      000B96 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      00103F R
  6 CHAR2      001042 R   |   6 CHKIVEC    0021C5 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D52 R
  6 CMOV2      000D66 R   |   6 CMOV3      000D7A R   |   6 CMOVE      000D36 R
    CNT     =  000001     |     CNTDWN  =  000032     |   6 CNTXT      000763 R
  6 COLD       001CC6 R   |   6 COLD1      001CC6 R   |   6 COLON      0019AA R
  6 COMMA      00160B R   |   6 COMPI      001650 R   |     COMPO   =  000040 
  6 CONSTANT   001A54 R   |   6 COPYRIGH   001C10 R   |   6 COUNT      000CD2 R
  6 CPP        00077F R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         001068 R   |   6 CREAT      0019F0 R   |     CRR     =  00000D 
  6 CSTOR      0004F1 R   |   6 CTABLE     002490 R   |   6 CTAT       0024B1 R
  6 CTINIT     0024D9 R   |   6 DAT        000CB6 R   |     DATSTK  =  001680 
  6 DCONST     001A89 R   |   6 DDROP      00081D R   |   6 DDUP       000828 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000EC7 R
  6 DEPTH      000C51 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000F0C R   |   6 DI         0000C4 R   |   6 DIG        000E40 R
  6 DIGIT      000DDB R   |   6 DIGS       000E51 R   |   6 DIGS1      000E51 R
  6 DIGS2      000E5E R   |   6 DIGTQ      000EDB R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0008B4 R
  6 DNEGA      000899 R   |   6 DOCONST    001A74 R   |   6 DOF24CON   002A64 R
  6 DOLIT      000470 R   |   6 DONXT      000484 R   |     DOORBELL=  000000 
  6 DOSTR      001078 R   |   6 DOT        00110E R   |   6 DOT1       001123 R
  6 DOTI1      001BD9 R   |   6 DOTID      001BC3 R   |   6 DOTO1      001564 R
  6 DOTOK      00154A R   |   6 DOTPR      001235 R   |   6 DOTQ       0017D5 R
  6 DOTQP      001095 R   |   6 DOTR       0010A3 R   |   6 DOTS       001B65 R
  6 DOTS1      001B70 R   |   6 DOTS2      001B79 R   |   6 DOVAR      0006D0 R
  6 DO_DCONS   001AAC R   |     DP      =  000005     |   6 DROP       000610 R
  6 DSTOR      000C9D R   |   6 DUMP       001B1B R   |   6 DUMP1      001B32 R
  6 DUMP3      001B54 R   |   6 DUMPP      001AEA R   |   6 DUPP       00061A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]

Symbol Table

  6 EDIGS      000E7C R   |   6 EDOT       0026DC R   |   6 EDOT0      0026EB R
  6 EDOT2      0026F7 R   |   6 EDOT3      002715 R   |   6 EDOT4      002730 R
  6 EDOT5      002751 R   |   6 EECSTORE   001F76 R   |   6 EEPCP      001D9C R
  6 EEPLAST    001D6F R   |   6 EEPROM     001D57 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001D86 R   |   6 EEPVP      001DB2 R   |   6 EESTORE    001FC2 R
  6 EE_CCOMM   00228C R   |   6 EE_COMMA   00226B R   |   6 EE_CREAD   001F07 R
  6 EE_READ    001EE5 R   |   6 EI         0000BD R   |   6 ELSEE      00172B R
  6 EMIT       000437 R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        000908 R   |   6 EQUAL      0008FB R   |   6 ERASE      000DA9 R
    ERR     =  00001B     |   6 EVAL       00158D R   |   6 EVAL1      00158D R
  6 EVAL2      0015A6 R   |   6 EXE1       000D2D R   |   6 EXECU      0004C5 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000E03 R   |   6 F24AT      002AF4 R   |   6 F24CONST   002A41 R
  6 F24STO     002AD2 R   |   6 F24VAR     002A88 R   |     F24_MAJO=  000001 
    F24_MINO=  000000     |   6 FADDR      002359 R   |   6 FALGN1     002B96 R
  6 FALGN10    002C74 R   |   6 FALGN4     002BCA R   |   6 FALGN6     002BF4 R
  6 FALGN7     002C33 R   |   6 FALGN71    002C36 R   |   6 FALGN8     002C4F R
  6 FALGN9     002C63 R   |   6 FALIGN     002B7E R   |   6 FALSE      000869 R
  6 FARAT      001E1D R   |   6 FARCAT     001E29 R   |   6 FC_XOFF    000464 R
  6 FC_XON     00044E R   |   6 FDOT       002760 R   |   6 FDOT0      002796 R
  6 FDOT1      002785 R   |   6 FDOT10     0027E9 R   |   6 FDOT2      0027A4 R
  6 FDOT3      0027BA R   |   6 FDOT6      0027C7 R   |   6 FDOT7      0027C9 R
  6 FDOT8      0027D1 R   |   6 FDOT9      0027D9 R   |   6 FER        0025BF R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000D89 R
  6 FILL0      000D97 R   |   6 FILL1      000D9F R   |   6 FIND       00132B R
  6 FIND1      001349 R   |   6 FIND2      001377 R   |   6 FIND3      001383 R
  6 FIND4      001397 R   |   6 FIND5      0013A4 R   |   6 FIND6      001388 R
  6 FINIT      0025B5 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |   6 FLITER     002A0C R   |   6 FLOATQ     0028CE R
  6 FLOATQ1    00294D R   |   6 FLOATQ2    002956 R   |   6 FLOATQ3    00295E R
  6 FLOATQ4    002995 R   |   6 FLOAT_ER   0029AD R   |   6 FLOAT_ER   0029A7 R
    FLSI    =  01F400     |   6 FMOVE      002364 R   |   6 FMOVE2     002395 R
  6 FNE        0025E2 R   |   6 FOR        00169A R   |   6 FORGET     00015A R
  6 FORGET1    000189 R   |   6 FORGET2    00020F R   |   6 FORGET4    000218 R
  6 FORGET6    0001D1 R   |   6 FOV        0025FD R   |   6 FPLUS      002CD8 R
  6 FPSTOR     001D38 R   |   6 FPSW       002591 R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     0025A3 R
  6 FSUB       002CE7 R   |   6 FVER       00255F R   |   6 FZE        0025CC R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000954 R   |   6 GREAT1     00095F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]

Symbol Table

  6 HDOT       0010F2 R   |   6 HERE       000CE9 R   |   6 HEX        000EB2 R
  6 HI         001C7B R   |   6 HLD        000750 R   |   6 HOLD       000E27 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     0019BB R   |   6 IFETCH     0016B8 R
  6 IFF        001703 R   |   6 IFMOVE     00243D R   |     IMEDD   =  000080 
  6 IMMED      0019CD R   |   6 INCH       00042B R   |   6 INC_FPTR   001EB2 R
  6 INITOFS    001983 R   |   6 INN        0006FE R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      00152C R   |   6 INTER      001502 R   |   6 INTQ       002535 R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      000876 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      0018D2 R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JFETCH     0016C3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]

Symbol Table

    JPIMM   =  0000CC     |   6 JSRC       001927 R   |   6 JSRC1      00194A R
  6 JSRC2      00196D R   |   6 KEY        000FED R   |   6 KTAP       00141C R
  6 KTAP1      00143F R   |   6 KTAP2      001442 R   |   6 LAST       00078F R
  6 LASTN   =  002CE4 R   |   6 LBRAC      001539 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000927 R
    LF      =  00000A     |   6 LINK    =  002CE4 R   |   6 LITER      001672 R
  6 LOCAL      000555 R   |   6 LOCK       001E9E R   |   6 LSCALE     0029CC R
  6 LSHIFT     000BC1 R   |   6 LSHIFT1    000BCA R   |   6 LSHIFT4    000BD2 R
  6 LT1        000932 R   |     MASKK   =  001F7F     |   6 MAX        00096C R
  6 MAX1       000976 R   |     MAX_MANT=  007FFF     |   6 MIN        000980 R
  6 MIN1       00098A R   |   6 MMOD1      000A39 R   |   6 MMOD2      000A4D R
  6 MMOD3      000A64 R   |   6 MMSM0      0009C9 R   |   6 MMSM1      0009D9 R
  6 MMSM3      0009DD R   |   6 MMSM4      0009E9 R   |   6 MMSMa      0009E4 R
  6 MMSMb      0009EF R   |   6 MODD       000ABF R   |   6 MONE       000C28 R
  6 MPLUS      002C78 R   |     MS      =  000030     |   6 MSEC       0002D1 R
  6 MSIGN      0026CB R   |   6 MSMOD      000A1C R   |   6 MSTA1      000B50 R
  6 MSTAR      000B2D R   |     NAFR    =  004804     |   6 NAMEQ      0013C4 R
  6 NAMET      0012D5 R   |     NCLKOPT =  004808     |   6 NEGAT      000887 R
  6 NEG_SIGN   00280A R   |   6 NEX1       000491 R   |   6 NEXT       0016A9 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NRAT       0005A0 R   |   6 NRDROP     00057C R
  6 NROT       0007FD R   |   6 NRSTO      0005BF R   |   6 NTIB       00070E R
    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       001003 R
  6 NUFQ1      00101C R   |   6 NUMBQ      000F1F R   |   6 NUMQ1      000F53 R
  6 NUMQ2      000F84 R   |   6 NUMQ3      000FBA R   |   6 NUMQ4      000FC4 R
  6 NUMQ6      000FCC R   |   6 NUMQ9      000FDE R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007B4 R
    OFS     =  000005     |   6 ONE        000C1A R   |   6 ONEM       000BB0 R
  6 ONEP       000BA3 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        00068B R   |   6 OUTPUT     00043C R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000642 R   |   6 OVERT      0018A0 R
    PA      =  000000     |   6 PACKS      000DBA R   |   6 PAD        000CFA R
  6 PAREN      001244 R   |   6 PARS       00113D R   |   6 PARS1      001168 R
  6 PARS2      001193 R   |   6 PARS3      001196 R   |   6 PARS4      00119F R
  6 PARS5      0011C2 R   |   6 PARS6      0011D7 R   |   6 PARS7      0011E6 R
  6 PARS8      0011F5 R   |   6 PARSE      001206 R   |   6 PARSEXP_   0028B1 R
  6 PAUSE      0002E1 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001AFD R   |   6 PDUM2      001B0E R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]

Symbol Table

    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000C68 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       00083D R   |   6 PNAM1      00183F R   |   6 PRESE      0015B5 R
  6 PRINT_VE   001C4C R   |     PROD1   =  000024     |     PROD2   =  000026 
    PROD3   =  000028     |   6 PROTECTE   000201 R   |   6 PRT_LICE   001C38 R
  6 PSTOR      000C7F R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001ECA R   |   6 QBRAN      000499 R   |   6 QDUP       0007CD R
  6 QDUP1      0007D7 R   |   6 QKEY       000419 R   |   6 QSTAC      001570 R
  6 QUERY      00149C R   |   6 QUEST      001130 R   |   6 QUIT       0015D2 R
  6 QUIT1      0015DA R   |   6 QUIT2      0015DD R   |   6 RAM2EE     002305 R
    RAMBASE =  000000     |   6 RAMLAST    0007A2 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027F R
  6 RAT        000546 R   |   6 RBRAC      001914 R   |   6 REPEA      001786 R
  6 RFREE      0022EC R   |   6 RFROM      000535 R   |     ROP     =  004800 
  6 ROT        0007DE R   |   6 ROW2BUF    0022AE R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000512 R   |     RPP     =  0017FF 
  6 RPSTO      00051F R   |   6 RSCALE     0029EA R   |   6 RSHIFT     000BDD R
  6 RSHIFT1    000BE6 R   |   6 RSHIFT4    000BEE R   |     RST_SR  =  0050B3 
  6 SAME1      0012F3 R   |   6 SAME2      00131C R   |   6 SAMEQ      0012EB R
  6 SCALDN2    002B70 R   |   6 SCALDN3    002B73 R   |   6 SCALEDOW   002B47 R
  6 SCALEUP    002B15 R   |   6 SCALEUP2   002B43 R   |   6 SCALEUP3   002B46 R
  6 SCOM1      001874 R   |   6 SCOM2      001877 R   |   6 SCOMP      001856 R
  6 SEED       000266 R   |     SEEDX   =  000038     |     SEEDY   =  00003A 
  6 SEMIS      0018B0 R   |   6 SETISP     0000D0 R   |   6 SET_FPSW   002622 R
  6 SET_RAML   001A3D R   |   6 SFN        002685 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        0026B1 R   |   6 SFZ        002656 R
  6 SIGN       000E66 R   |   6 SIGN1      000E76 R   |   6 SLASH      000AC9 R
  6 SLMOD      000A6C R   |   6 SLMOD1     000AA9 R   |   6 SLMOD8     000AB6 R
  6 SNAME      001809 R   |     SP0     =  00002C     |   6 SPACE      001025 R
  6 SPACS      001034 R   |   6 SPAT       0005FA R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      000607 R   |   6 SSMOD      000B59 R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000B22 R   |   6 STASL      000B6A R
  6 STOD       0008BC R   |   6 STORE      0004D2 R   |   6 STO_SIGN   002822 R
  6 STR        000E94 R   |   6 STRCQ      00167A R   |   6 STRQ       0017C8 R
  6 STRQP      001091 R   |   6 SUBB       0008D3 R   |   6 SWAPP      00062A R
    SWIM_CSR=  007F80     |   6 TAP        001406 R   |   6 TBOOT      001CBA R
  6 TBRAN      0004A7 R   |   6 TBUF       00071E R   |     TBUFFBAS=  001680 
  6 TCHAR      000C39 R   |   6 TEMP       0006EF R   |   6 TEVAL      000741 R
  6 TFLASH     000730 R   |   6 THENN      001718 R   |   6 TIB        000D0B R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0015E9 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000311 R   |   6 TIMER      0002FB R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001B93 R
  6 TNAM3      001BB1 R   |   6 TNAM4      001BB7 R   |   6 TNAME      001B90 R
  6 TOFLASH    000336 R   |   6 TOKEN      0012C7 R   |   6 TOR        0005E3 R
  6 TORAM      000376 R   |   6 TRUE       000858 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000BF5 R   |   6 TYPE1      001054 R   |   6 TYPE2      00105A R
  6 TYPES      00104F R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       0010DE R   |   6 UDOTR      0010BE R   |   6 UEND       000047 R
    UFPSW   =  000008     |   6 UGREAT     00093E R   |   6 UGREAT1    000949 R
    UHLD    =  000014     |     UINN    =  00000C     |     UINTER  =  000012 
    ULAST   =  00001C     |   6 ULES1      00091C R   |   6 ULESS      000911 R
  6 UMMOD      0009B2 R   |   6 UMSTA      000AD8 R   |   6 UNIQ1      001806 R
  6 UNIQU      0017E7 R   |   6 UNLKEE     001E38 R   |   6 UNLKFL     001E57 R
  6 UNLOCK     001E76 R   |   6 UNTIL      0016DD R   |     UOFFSET =  00001E 
  6 UPDATCP    001DF5 R   |   6 UPDATLAS   001DCC R   |   6 UPDATPTR   0023F8 R
  6 UPDATRUN   001DE4 R   |   6 UPDATVP    001E0C R   |   6 UPL1       0006CC R
  6 UPLUS      0006B5 R   |     UPP     =  000006     |   6 UPPER      00128A R
  6 UPPER1     0012AD R   |   6 UPPER2     0012B6 R   |     URLAST  =  000022 
  6 USLMOD     000A01 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      001ACD R   |   6 UTYP2      001ADC R
  6 UTYPE      001AC8 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      001A0A R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        000771 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000000 
    WANT_FLO=  000000     |     WANT_FLO=  000001     |     WANT_SCA=  000000 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      00176C R   |   6 WITHI      000997 R   |   6 WORDD      001270 R
  6 WORDS      001BED R   |   6 WORS1      001BF3 R   |   6 WORS2      001C0F R
  6 WR_BYTE    001F21 R   |   6 WR_WORD    001F46 R   |   6 WTABLE     00249F R
  6 WTAT       0024C3 R   |   6 WTINIT     002508 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
    XON     =  000011     |   6 XORR       0006A0 R   |     XTEMP   =  000024 
    YTEMP   =  000026     |     YTMP    =  000003     |   6 ZEQU1      00066D R
  6 ZEQUAL     000663 R   |   6 ZERO       000C0F R   |   6 ZL1        00065A R
  6 ZLESS      000651 R   |   6 app_spac   002D00 R   |   6 baudrate   00037C R
  6 block_er   00200C R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   00206C R   |   6 copy_buf   00208B R   |   6 copy_pro   00208B R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 dof24lit   002A17 R   |   6 erase_fl   00202E R
  6 fmove_do   0023E1 R   |   6 main       000016 R   |   6 next_row   00239E R
  6 no_move    0023E8 R   |   6 nsign      0027F9 R   |   6 parse_d4   00285C R
  6 parse_d5   002868 R   |   6 parse_di   002826 R   |   6 parse_ex   002869 R
  6 pristine   00210C R   |   6 proceed_   002031 R   |   6 reboot     000328 R
  6 reset_ve   002173 R   |   6 row_eras   001FEC R   |   6 row_eras   002045 R
  6 row_eras   00206C R   |   6 set_opti   0020E0 R   |   6 set_vect   002214 R
  6 uart_ini   000076 R   |   6 write_ro   0020B0 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2D00   flags    0

