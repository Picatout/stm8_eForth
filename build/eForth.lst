ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200         .if NUCLEO
                                    201         bset PC_ODR,#LED2_BIT
                                    202         .else ;DISCOVERY 
                                    203         .if DISCOVERY
                                    204         bres PD_ODR,#LD1_BIT 
                                    205         .endif
                                    206         .endif
                                    207         .endm
                                    208 
                                    209         .macro _ledoff
                                    210         .if NUCLEO 
                                    211         bres PC_ODR,#LED2_BIT
                                    212         .else ;DISCOVERY 
                                    213         .if DISCOVERY
                                    214         bset PD_ODR,#LD1_BIT 
                                    215         .endif 
                                    216         .endif
                                    217         .endm
                                    218 
                                    219 ;**********************************************************
                                    220         .area DATA (ABS)
      000000                        221         .org RAMBASE 
                                    222 ;**********************************************************
                                    223 
                                    224 ;**********************************************************
                                    225         .area SSEG (ABS) ; STACK
      001700                        226         .org 0x1700
      001700                        227         .ds 256 
                                    228 ; space for DATSTK,TIB and STACK         
                                    229 ;**********************************************************
                                    230 
                                    231 ;**********************************************************
                                    232         .area HOME ; vectors table
                                    233 ;**********************************************************
      000000 82 00 00 16            234 	int main	        ; reset
      000004 82 00 00 00            235 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            236 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            237 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            238 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            239 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            240 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            241 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            242 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            243 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            244 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            245 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            246 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            247 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            248 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            249 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            250 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            251 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            252 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            253 	int NonHandledInterrupt	; irq17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000050 82 00 00 00            254 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            255 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            256 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            257 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            258 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            259 	int Timer4Handler	; irq23
      000068 82 00 00 00            260 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            261 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            262 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            263 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            264 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            265 	int NonHandledInterrupt	; irq29
                                    266 
                                    267 ;**********************************************************
                                    268         .area CODE
                                    269 ;**********************************************************
                                    270 
                                    271 ; non handled interrupt reset MCU
      000000                        272 NonHandledInterrupt:
      000000 A6 80            [ 1]  273         ld a, #0x80
      000002 C7 50 D1         [ 1]  274         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    275 	;iret
                                    276 
                                    277 ; used for milliseconds counter 
                                    278 ; MS is 16 bits counter 
      000005                        279 Timer4Handler:
      000005 72 5F 53 42      [ 1]  280 	clr TIM4_SR 
      000009 BE 30            [ 2]  281         ldw x,MS 
      00000B 5C               [ 1]  282         incw x 
      00000C BF 30            [ 2]  283         ldw MS,x
      00000E BE 32            [ 2]  284         ldw x,CNTDWN 
      000010 27 03            [ 1]  285         jreq 1$
      000012 5A               [ 2]  286         decw x 
      000013 BF 32            [ 2]  287         ldw CNTDWN,x 
      000015                        288 1$:         
      000015 80               [11]  289         iret 
                                    290 
                                    291 
                                    292 ;; Main entry points and COLD start data
      000016                        293 main:
                                    294 ; clear all RAM
      000016 AE 00 00         [ 2]  295 	ldw X,#RAMBASE
      000019                        296 clear_ram0:
      000019 7F               [ 1]  297 	clr (X)
      00001A 5C               [ 1]  298 	incw X
      00001B A3 17 FF         [ 2]  299 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  300 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  301         ldw x,#RPP
      000023 94               [ 1]  302         ldw sp,x
                                    303 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  304         inc SEEDX+1 
      000026 3C 3B            [ 1]  305         inc SEEDY+1          
      000028 CC 00 49         [ 2]  306 	jp ORIG
                                    307 
                                    308 ; COLD initialize these variables.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B                        309 UZERO:
      00002B 00 0A                  310         .word      BASEE   ;BASE
      00002D 00 00                  311         .word      0       ; floating point state 
      00002F 00 00                  312         .word      0       ;tmp
      000031 00 00                  313         .word      0       ;>IN
      000033 00 00                  314         .word      0       ;#TIB
      000035 17 00                  315         .word      TIBB    ;TIB
      000037 14 30                  316         .word      INTER   ;'EVAL
      000039 00 00                  317         .word      0       ;HLD
      00003B 35 95                  318         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  319         .word      VAR_BASE   ;variables free space pointer 
      00003F 36 00                  320         .word      app_space ; FLASH free space pointer 
      000041 35 95                  321         .word      LASTN   ;LAST
      000043 00 00                  322         .word      0        ; OFFSET 
      000045 00 00                  323         .word      0       ; TFLASH
                                    324 ;       .word      0       ; URLAST   
      000047 00 00                  325 UEND:   .word      0
                                    326 
      000049                        327 ORIG:   
                                    328 ; initialize SP
      000049 AE 17 FF         [ 2]  329         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  330         LDW     SP,X
      00004D BF 2E            [ 2]  331         LDW     RP0,X
      00004F AE 16 80         [ 2]  332         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  333         LDW     SP0,X
                           000001   334 .if NUCLEO        
                                    335 ; initialize PC_5 as output to control LED2
                                    336 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  337         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  338         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  339         bset PC_DDR,#LED2_BIT
                                    340 .endif 
                           000000   341 .if DISCOVERY
                                    342         bset PD_CR1,#LD1_BIT
                                    343         bset PD_CR2,#LD1_BIT
                                    344         bset PD_DDR,#LD1_BIT 
                                    345 .endif
      000060                        346         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    347 ; initialize clock to HSI
                                    348 ; no divisor 16Mhz 
                                    349 ; Added by Picatout 
      000064                        350 clock_init:
      000064 72 5F 50 C6      [ 1]  351         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  352 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   353 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  354 	ld a,#CLK_SWR_HSI
                           000000   355 .else ; DISCOVERY as 16Mhz crystal
                                    356 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    357 .endif 
      00006E C7 50 C4         [ 1]  358 	ld CLK_SWR,a
      000071 C1 50 C3         [ 1]  359 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  360 	jrne 1$
                                    361         
                                    362 ; initialize UART, 115200 8N1
      000076                        363 uart_init:
                           000001   364 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  365 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    366 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  367 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  368 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  369 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    370 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   371 .else ; DISCOVERY use UART2 
                                    372 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    373 	; configure tx pin
                                    374 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    375 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    376 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    377 .endif
                                    378 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  379 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  380 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  381 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    382 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  383 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  384 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  385 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  386 	bset TIM4_IER,#TIM4_IER_UIE 
                                    387 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  388         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  389         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  390         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  391         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  392         rim
      0000AD CC 1B EE         [ 2]  393         jp  COLD   ;default=MN1
                                    394 
                           000000   395         LINK=0 
                                    396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    397 ;; place MCU in sleep mode with
                                    398 ;; halt opcode 
                                    399 ;; BYE ( -- )
                                    400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        401         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  402         halt 
      0000B7 81               [ 4]  403         ret 
                                    404 
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    406 ; Enable interrupts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    407 ; EI ( -- )
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B8                        409         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  410         rim 
      0000BE 81               [ 4]  411         ret 
                                    412 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    413 ; Disable interrupts
                                    414 ; DI ( -- )
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        416         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  417         sim 
      0000C5 81               [ 4]  418         ret 
                                    419 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    421 ; set interrupt priority level 
                                    422 ; SET-ISP ( n1 n2 -- )
                                    423 ; n1 level {1..3}
                                    424 ; n2 vector {0..29}
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        426         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  427         ldw y,x 
      0000D2 90 FE            [ 2]  428         ldw y,(y)
      0000D4 A6 04            [ 1]  429         ld a,#4 ; 4 slot per register 
                                    430 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  431         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  432         and a,#3 
      0000DA 48               [ 1]  433         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  434         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  435         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  436         clrw y 
      0000E2 90 97            [ 1]  437         ld yl,a 
      0000E4 1D 00 02         [ 2]  438         subw x,#CELLL 
      0000E7 FF               [ 2]  439         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  440         ldw y,x 
      0000EA 90 EE 02         [ 2]  441         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  442         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  443         subw x,#CELLL 
      0000F2 FF               [ 2]  444         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 42         [ 4]  445         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 70         [ 4]  446         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000F9 00 03                  447         .word 3
      0000FB CD 06 2A         [ 4]  448         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B C1         [ 4]  449         call LSHIFT ; creat slot mask 
      000101 CD 08 76         [ 4]  450         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 77         [ 4]  451         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E3         [ 4]  452         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DE         [ 4]  453         call ROT  ; ( reg lshift level )
      00010D CD 06 2A         [ 4]  454         call SWAPP ; ( reg level lshift )
      000110 CD 0B C1         [ 4]  455         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 35         [ 4]  456         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8B         [ 4]  457         call ORR   ; ( reg updated_rval )
      000119 CD 06 2A         [ 4]  458         call SWAPP 
      00011C CC 04 F1         [ 2]  459         jp CSTOR
                                    460 
                                    461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    462 ; sélectionne l'application 
                                    463 ; qui démarre automatique lors 
                                    464 ; d'un COLD start 
                                    465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        466         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 F5         [ 4]  467         call TOKEN 
      00012C CD 06 1A         [ 4]  468         call DUPP 
      00012F CD 04 99         [ 4]  469         call QBRAN 
      000132 02 0F                  470         .word FORGET2
      000134 CD 12 F2         [ 4]  471         call NAMEQ
      000137 CD 07 CD         [ 4]  472         call QDUP 
      00013A CD 04 99         [ 4]  473         call QBRAN 
      00013D 02 0F                  474         .word FORGET2
      00013F                        475         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  476         subw x,#2*CELLL 
      000145 90 5F            [ 1]  477         clrw y 
      000147 FF               [ 2]  478         ldw (x),y 
      000148 90 AE 40 02      [ 2]  479         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  480         ldw (2,x),y 
      00014E CC 1E EA         [ 2]  481         jp EESTORE 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;; Reset dictionary pointer before 
                                    485 ;; forgotten word. RAM space and 
                                    486 ;; interrupt vector defined after 
                                    487 ;; must be resetted also.
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        489         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 F5         [ 4]  490         call TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00015D CD 06 1A         [ 4]  491         call DUPP 
      000160 CD 04 99         [ 4]  492         call QBRAN 
      000163 02 0F                  493         .word FORGET2
      000165 CD 12 F2         [ 4]  494         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CD         [ 4]  495         call QDUP 
      00016B CD 04 99         [ 4]  496         call QBRAN 
      00016E 02 0F                  497         .word FORGET2
                                    498 ; only forget users words 
      000170 CD 06 1A         [ 4]  499         call DUPP ; ( ca na na )
      000173 CD 04 70         [ 4]  500         call DOLIT 
      000176 36 00                  501         .word app_space 
      000178 CD 06 2A         [ 4]  502         call SWAPP 
      00017B CD 09 11         [ 4]  503         call  ULESS 
      00017E CD 04 99         [ 4]  504         call QBRAN 
      000181 01 D1                  505         .word FORGET6 
                                    506 ; ( ca na -- )        
                                    507 ;reset ivec with address >= ca
      000183 CD 06 2A         [ 4]  508         call SWAPP ; ( na ca -- ) 
      000186 CD 20 ED         [ 4]  509         call CHKIVEC ; ( na -- ) 
                                    510 ; start at LAST and link back to na 
                                    511 ; if variable found reset VP at that point.
      000189                        512 FORGET1:
      000189 CD 07 8F         [ 4]  513         call LAST 
      00018C CD 04 E4         [ 4]  514         call AT 
      00018F CD 06 1A         [ 4]  515         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  516         call FREEVAR ; ( -- na last )
      000195 CD 06 1A         [ 4]  517         call DUPP 
      000198 CD 04 70         [ 4]  518         call DOLIT 
      00019B 00 02                  519         .word 2 
      00019D CD 08 D3         [ 4]  520         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E4         [ 4]  521         call AT 
      0001A3 CD 06 1A         [ 4]  522         call DUPP ; ( -- na last a a )
      0001A6 CD 07 63         [ 4]  523         call CNTXT 
      0001A9 CD 04 D2         [ 4]  524         call STORE
      0001AC CD 07 8F         [ 4]  525         call LAST  
      0001AF CD 04 D2         [ 4]  526         call STORE ; ( --  na last )
      0001B2 CD 06 42         [ 4]  527         call OVER 
      0001B5 CD 08 FB         [ 4]  528         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 99         [ 4]  529         call QBRAN 
      0001BB 01 89                  530         .word FORGET1 
                                    531 ; ( na -- )
      0001BD CD 04 70         [ 4]  532         call DOLIT 
      0001C0 00 02                  533         .word 2 
      0001C2 CD 08 D3         [ 4]  534         call SUBB 
      0001C5 CD 07 7F         [ 4]  535         call CPP 
      0001C8 CD 04 D2         [ 4]  536         call STORE  
      0001CB CD 1D 1D         [ 4]  537         call UPDATCP 
      0001CE CC 1C F4         [ 2]  538         jp UPDATLAST 
      0001D1                        539 FORGET6: ; tried to forget a RAM or system word 
                                    540 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  541         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  542         ldw y,SP0 
      0001D7 FF               [ 2]  543         ldw (x),y  
      0001D8 CD 09 11         [ 4]  544         call ULESS
      0001DB CD 04 99         [ 4]  545         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001DE 02 01                  546         .word PROTECTED 
      0001E0 CD 13 FE         [ 4]  547         call ABORQ 
      0001E3 1D                     548         .byte 29
      0001E4 20 46 6F 72 20 52 41   549         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        550 PROTECTED:
      000201 CD 13 FE         [ 4]  551         call ABORQ
      000204 0A                     552         .byte 10
      000205 20 50 72 6F 74 65 63   553         .ascii " Protected"
             74 65 64
      00020F                        554 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 FE         [ 4]  555         call ABORQ
      000212 05                     556         .byte 5
      000213 20 77 68 61 74         557         .ascii " what"
      000218                        558 FORGET4:
      000218 CC 06 10         [ 2]  559         jp DROP 
                                    560 
                                    561 
                                    562 ;;;;;;;;;;;;;;;;;;;;;
                                    563 ; if na is variable 
                                    564 ; free variable data  
                                    565 ; FREEVAR ( na -- )
                                    566 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        567         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 1A         [ 4]  568         call DUPP ; ( na na -- )
      000228 CD 05 02         [ 4]  569         CALL CAT  ; ( na c -- )
      00022B CD 0B A3         [ 4]  570         call ONEP ;
      00022E CD 08 3D         [ 4]  571         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B A3         [ 4]  572         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 1A         [ 4]  573         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E4         [ 4]  574         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 70         [ 4]  575         call DOLIT 
      00023D 06 D0                  576         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FB         [ 4]  577         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 99         [ 4]  578         call QBRAN 
      000245 02 5B                  579         .word FREEVAR4 
      000247 CD 04 70         [ 4]  580         call DOLIT 
      00024A 00 02                  581         .word 2 
      00024C CD 08 3D         [ 4]  582         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E4         [ 4]  583         call AT 
      000252 CD 07 71         [ 4]  584         call VPP   
      000255 CD 04 D2         [ 4]  585         call STORE 
      000258 CC 1D 34         [ 2]  586         jp UPDATVP 
      00025B                        587 FREEVAR4: ; not variable
      00025B                        588         _DROP 
      00025B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00025E 81               [ 4]  589         RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    590 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    592 ;    SEED ( n -- )
                                    593 ; Initialize PRNG seed with n 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025F                        595         _HEADER SEED,4,"SEED"
      00025F 02 1D                    1         .word LINK 
                           000261     2         LINK=.
      000261 04                       3         .byte 4  
      000262 53 45 45 44              4         .ascii "SEED"
      000266                          5         SEED:
      000266 90 93            [ 1]  596         ldw y,x 
      000268 1C 00 02         [ 2]  597         addw x,#CELLL
      00026B 90 FE            [ 2]  598         ldw y,(y)
      00026D 90 9E            [ 1]  599         ld a,yh 
      00026F B7 38            [ 1]  600         ld SEEDX,a 
      000271 90 9F            [ 1]  601         ld a,yl 
      000273 B7 3A            [ 1]  602         ld SEEDY,a 
      000275 81               [ 4]  603         ret 
                                    604 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    606 ;    RANDOM ( u1 -- u2 )
                                    607 ; Pseudo random number betwen 0 and u1-1
                                    608 ;  XOR32 algorithm 
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000276                        610         _HEADER RANDOM,6,"RANDOM"
      000276 02 61                    1         .word LINK 
                           000278     2         LINK=.
      000278 06                       3         .byte 6  
      000279 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027F                          5         RANDOM:
                                    611 ;local variable 
                           000001   612         SPSAVE=1
                           000002   613         VSIZE=2 
      00027F 52 02            [ 2]  614         sub sp,#VSIZE
      000281 1F 01            [ 2]  615         ldw (SPSAVE,sp),x  
                                    616 ; XTEMP=(SEEDX<<5)^SEEDX 
      000283 90 93            [ 1]  617         ldw y,x 
      000285 90 FE            [ 2]  618         ldw y,(y)
      000287 90 BF 26         [ 2]  619         ldw YTEMP,y 
      00028A BE 38            [ 2]  620 	ldw x,SEEDX 
      00028C 58               [ 2]  621 	sllw x 
      00028D 58               [ 2]  622 	sllw x 
      00028E 58               [ 2]  623 	sllw x 
      00028F 58               [ 2]  624 	sllw x 
      000290 58               [ 2]  625 	sllw x 
      000291 9E               [ 1]  626 	ld a,xh 
      000292 B8 38            [ 1]  627 	xor a,SEEDX 
      000294 B7 24            [ 1]  628 	ld XTEMP,a 
      000296 9F               [ 1]  629 	ld a,xl 
      000297 B8 39            [ 1]  630 	xor a,SEEDX+1 
      000299 B7 25            [ 1]  631 	ld XTEMP+1,a 
                                    632 ; SEEDX=SEEDY 
      00029B BE 3A            [ 2]  633 	ldw x,SEEDY 
      00029D BF 38            [ 2]  634 	ldw SEEDX,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    635 ; SEEDY=SEEDY^(SEEDY>>1)
      00029F 54               [ 2]  636 	srlw x 
      0002A0 9E               [ 1]  637 	ld a,xh 
      0002A1 B8 3A            [ 1]  638 	xor a,SEEDY 
      0002A3 B7 3A            [ 1]  639 	ld SEEDY,a  
      0002A5 9F               [ 1]  640 	ld a,xl 
      0002A6 B8 3B            [ 1]  641 	xor a,SEEDY+1 
      0002A8 B7 3B            [ 1]  642 	ld SEEDY+1,a 
                                    643 ; XTEMP>>3 
      0002AA BE 24            [ 2]  644 	ldw x,XTEMP 
      0002AC 54               [ 2]  645 	srlw x 
      0002AD 54               [ 2]  646 	srlw x 
      0002AE 54               [ 2]  647 	srlw x 
                                    648 ; x=XTEMP^x 
      0002AF 9E               [ 1]  649 	ld a,xh 
      0002B0 B8 24            [ 1]  650 	xor a,XTEMP 
      0002B2 95               [ 1]  651 	ld xh,a 
      0002B3 9F               [ 1]  652 	ld a,xl 
      0002B4 B8 25            [ 1]  653 	xor a,XTEMP+1  
      0002B6 97               [ 1]  654 	ld xl,a 
                                    655 ; SEEDY=x^SEEDY 
      0002B7 B8 3B            [ 1]  656 	xor a,SEEDY+1
      0002B9 97               [ 1]  657 	ld xl,a 
      0002BA 9E               [ 1]  658 	ld a,xh 
      0002BB B8 3A            [ 1]  659 	xor a,SEEDY
      0002BD 95               [ 1]  660 	ld xh,a 
      0002BE BF 3A            [ 2]  661 	ldw SEEDY,x 
                                    662 ; return SEEDY modulo YTEMP  
      0002C0 90 BE 26         [ 2]  663 	ldw y,YTEMP  
      0002C3 65               [ 2]  664 	divw x,y 
      0002C4 1E 01            [ 2]  665 	ldw x,(SPSAVE,sp)
      0002C6 FF               [ 2]  666         ldw (x),y 
      0002C7 5B 02            [ 2]  667         addw sp,#VSIZE 
      0002C9 81               [ 4]  668 	ret 
                                    669 
                                    670 
                                    671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    672 ;; get millisecond counter 
                                    673 ;; msec ( -- u )
                                    674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002CA                        675         _HEADER MSEC,4,"MSEC"
      0002CA 02 78                    1         .word LINK 
                           0002CC     2         LINK=.
      0002CC 04                       3         .byte 4  
      0002CD 4D 53 45 43              4         .ascii "MSEC"
      0002D1                          5         MSEC:
      0002D1 1D 00 02         [ 2]  676         subw x,#CELLL 
      0002D4 90 BE 30         [ 2]  677         ldw y,MS 
      0002D7 FF               [ 2]  678         ldw (x),y 
      0002D8 81               [ 4]  679         ret 
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ; suspend execution for u msec 
                                    683 ;  pause ( u -- )
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002D9                        685         _HEADER PAUSE,5,"PAUSE"
      0002D9 02 CC                    1         .word LINK 
                           0002DB     2         LINK=.
      0002DB 05                       3         .byte 5  
      0002DC 50 41 55 53 45           4         .ascii "PAUSE"
      0002E1                          5         PAUSE:
      0002E1 90 93            [ 1]  686         ldw y,x
      0002E3 90 FE            [ 2]  687         ldw y,(y)
      0002E5 72 B9 00 30      [ 2]  688         addw y,MS 
      0002E9 8F               [10]  689 1$:     wfi  
      0002EA 90 B3 30         [ 2]  690         cpw y,MS  
      0002ED 26 FA            [ 1]  691         jrne 1$        
      0002EF 1C 00 02         [ 2]  692         addw x,#CELLL 
      0002F2 81               [ 4]  693         ret 
                                    694 
                                    695 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    696 ; initialize count down timer 
                                    697 ;  TIMER ( u -- )  milliseconds
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F3                        699         _HEADER TIMER,5,"TIMER"
      0002F3 02 DB                    1         .word LINK 
                           0002F5     2         LINK=.
      0002F5 05                       3         .byte 5  
      0002F6 54 49 4D 45 52           4         .ascii "TIMER"
      0002FB                          5         TIMER:
      0002FB 90 93            [ 1]  700         ldw y,x
      0002FD 90 FE            [ 2]  701         ldw y,(y) 
      0002FF 90 BF 32         [ 2]  702         ldw CNTDWN,y
      000302 1C 00 02         [ 2]  703         addw x,#CELLL 
      000305 81               [ 4]  704         ret 
                                    705 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    707 ; check for TIMER exiparition 
                                    708 ;  TIMEOUT? ( -- 0|-1 )
                                    709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000306                        710         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000306 02 F5                    1         .word LINK 
                           000308     2         LINK=.
      000308 08                       3         .byte 8  
      000309 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000311                          5         TIMEOUTQ:
      000311 4F               [ 1]  711         clr a
      000312 1D 00 02         [ 2]  712         subw x,#CELLL 
      000315 90 BE 32         [ 2]  713         ldw y,CNTDWN 
      000318 26 01            [ 1]  714         jrne 1$ 
      00031A 43               [ 1]  715         cpl a 
      00031B E7 01            [ 1]  716 1$:     ld (1,x),a 
      00031D F7               [ 1]  717         ld (x),a 
      00031E 81               [ 4]  718         ret         
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;
                                    721 ; reboot MCU 
                                    722 ; REBOOT ( -- )
                                    723 ;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00031F                        724         _HEADER reboot,6,"REBOOT"
      00031F 03 08                    1         .word LINK 
                           000321     2         LINK=.
      000321 06                       3         .byte 6  
      000322 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000328                          5         reboot:
      000328 CC 00 00         [ 2]  725         jp NonHandledInterrupt
                                    726 
                                    727 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    728 ; compile to flash memory 
                                    729 ; TO-FLASH ( -- )
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032B                        731         _HEADER TOFLASH,8,"TO-FLASH"
      00032B 03 21                    1         .word LINK 
                           00032D     2         LINK=.
      00032D 08                       3         .byte 8  
      00032E 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000336                          5         TOFLASH:
      000336 CD 07 A2         [ 4]  732         call RAMLAST 
      000339 CD 04 E4         [ 4]  733         call AT 
      00033C CD 07 CD         [ 4]  734         call QDUP 
      00033F CD 04 99         [ 4]  735         call QBRAN
      000342 03 65                  736         .word 1$
      000344 CD 13 FE         [ 4]  737         call ABORQ 
      000347 1D                     738         .byte 29
      000348 20 4E 6F 74 20 77 68   739         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000365 90 AE FF FF      [ 2]  740 1$:     ldw y,#-1 
      000369 90 BF 20         [ 2]  741         ldw UTFLASH,y
      00036C 81               [ 4]  742         ret 
                                    743 
                                    744 ;;;;;;;;;;;;;;;;;;;;;;
                                    745 ; compile to RAM 
                                    746 ; TO-RAM ( -- )
                                    747 ;;;;;;;;;;;;;;;;;;;;;;
      00036D                        748         _HEADER TORAM,6,"TO-RAM"
      00036D 03 2D                    1         .word LINK 
                           00036F     2         LINK=.
      00036F 06                       3         .byte 6  
      000370 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000376                          5         TORAM:
      000376 90 5F            [ 1]  749         clrw y 
      000378 90 BF 20         [ 2]  750         ldw UTFLASH,y 
      00037B 81               [ 4]  751         ret 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;; BAUD RATE constants table
                                    755 ; values to put in BRR1 & BRR2 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037C                        757 baudrate: 
      00037C A0 1B                  758 	.byte 0xa0,0x1b ; 2400
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00037E D0 05                  759 	.byte 0xd0,0x5  ; 4800 
      000380 68 03                  760 	.byte 0x68,0x3  ; 9600
      000382 34 01                  761 	.byte 0x34,0x1  ; 19200
      000384 11 06                  762 	.byte 0x11,0x6  ; 57600
      000386 08 0B                  763 	.byte 0x8,0xb   ; 115200
                                    764 
                                    765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    766 ; BAUD RATE CONSTANTS names 
                                    767 ; 2400 baud  ( -- n )
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000388                        769         _HEADER B2K4,4,"B2K4"
      000388 03 6F                    1         .word LINK 
                           00038A     2         LINK=.
      00038A 04                       3         .byte 4  
      00038B 42 32 4B 34              4         .ascii "B2K4"
      00038F                          5         B2K4:
      00038F 1D 00 02         [ 2]  770 	subw x,#CELLL 
      000392 90 5F            [ 1]  771         clrw y
      000394 FF               [ 2]  772         ldw (x),y
      000395 81               [ 4]  773 	ret
                                    774 
                                    775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    776 ; 4800 baud	
                                    777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000396                        778         _HEADER B4K8,4,"B4K8"
      000396 03 8A                    1         .word LINK 
                           000398     2         LINK=.
      000398 04                       3         .byte 4  
      000399 42 34 4B 38              4         .ascii "B4K8"
      00039D                          5         B4K8:
      00039D 1D 00 02         [ 2]  779         subw x,#CELLL 
      0003A0 90 AE 00 02      [ 2]  780         ldw y,#2 
      0003A4 FF               [ 2]  781         ldw (x),y
      0003A5 81               [ 4]  782         ret 
                                    783 
                                    784 ;;;;;;;;;;;;;;;;;;;;
                                    785 ; 9600 baud
                                    786 ;;;;;;;;;;;;;;;;;;;;
      0003A6                        787         _HEADER B9K6,4,"B9K6"
      0003A6 03 98                    1         .word LINK 
                           0003A8     2         LINK=.
      0003A8 04                       3         .byte 4  
      0003A9 42 39 4B 36              4         .ascii "B9K6"
      0003AD                          5         B9K6:
      0003AD 1D 00 02         [ 2]  788         subw x,#CELLL 
      0003B0 90 AE 00 04      [ 2]  789         ldw y,#4 
      0003B4 FF               [ 2]  790         ldw (x),y 
      0003B5 81               [ 4]  791         ret 
                                    792 ;;;;;;;;;;;;;;
                                    793 ; 19200 baud
                                    794 ;;;;;;;;;;;;;;
      0003B6                        795         _HEADER B19K2,5,"B19K2"
      0003B6 03 A8                    1         .word LINK 
                           0003B8     2         LINK=.
      0003B8 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003B9 42 31 39 4B 32           4         .ascii "B19K2"
      0003BE                          5         B19K2:
      0003BE 1D 00 02         [ 2]  796         subw x,#CELLL
      0003C1 90 AE 00 06      [ 2]  797         ldw y,#6 
      0003C5 FF               [ 2]  798         ldw (x),y 
      0003C6 81               [ 4]  799         ret 
                                    800 ;;;;;;;;;;;;;;
                                    801 ; 57600 baud  
                                    802 ;;;;;;;;;;;;;;
      0003C7                        803         _HEADER B57K6,5,"B57K6"
      0003C7 03 B8                    1         .word LINK 
                           0003C9     2         LINK=.
      0003C9 05                       3         .byte 5  
      0003CA 42 35 37 4B 36           4         .ascii "B57K6"
      0003CF                          5         B57K6:
      0003CF 1D 00 02         [ 2]  804         subw x,#CELLL 
      0003D2 90 AE 00 08      [ 2]  805         ldw y,#8 
      0003D6 FF               [ 2]  806         ldw (x),y 
      0003D7 81               [ 4]  807         ret 
                                    808 ;;;;;;;;;;;;;;
                                    809 ; 115200 baud 
                                    810 ;;;;;;;;;;;;;;
      0003D8                        811         _HEADER B115K2,6,"B115K2"
      0003D8 03 C9                    1         .word LINK 
                           0003DA     2         LINK=.
      0003DA 06                       3         .byte 6  
      0003DB 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E1                          5         B115K2:
      0003E1 1D 00 02         [ 2]  812 	subw x,#CELLL 
      0003E4 90 AE 00 0A      [ 2]  813         ldw y,#10 
      0003E8 FF               [ 2]  814         ldw (x),y 
      0003E9 81               [ 4]  815         ret 
                                    816 
                                    817 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    818 ;; set UART2 BAUD rate
                                    819 ;	BAUD ( u -- )
                                    820 ;;;;;;;;;;;;;;;;;;;;;;;
      0003EA                        821         _HEADER BAUD,4,"BAUD"
      0003EA 03 DA                    1         .word LINK 
                           0003EC     2         LINK=.
      0003EC 04                       3         .byte 4  
      0003ED 42 41 55 44              4         .ascii "BAUD"
      0003F1                          5         BAUD:
      0003F1 1D 00 02         [ 2]  822 	subw x,#CELLL
      0003F4 90 AE 03 7C      [ 2]  823         ldw y,#baudrate 
      0003F8 FF               [ 2]  824         ldw (x),y 
      0003F9 CD 08 3D         [ 4]  825         call PLUS
      0003FC 90 93            [ 1]  826         ldw y,x  
      0003FE 90 FE            [ 2]  827         ldw y,(y)
      000400 90 F6            [ 1]  828         ld a,(y)
      000402 88               [ 1]  829         push a 
      000403 90 5C            [ 1]  830         incw y 
      000405 90 F6            [ 1]  831         ld a,(y)
      000407 C7 52 33         [ 1]  832         ld UART_BRR2,a 
      00040A 84               [ 1]  833         pop a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00040B C7 52 32         [ 1]  834         ld UART_BRR1,a 
      00040E 1C 00 02         [ 2]  835         addw x,#CELLL 
      000411 81               [ 4]  836         ret 
                                    837 
                                    838 ;; Device dependent I/O
                                    839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    840 ;       ?RX     ( -- c T | F )
                                    841 ;         Return input byte and true, or false.
                                    842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000412                        843         _HEADER QKEY,4,"?KEY"
      000412 03 EC                    1         .word LINK 
                           000414     2         LINK=.
      000414 04                       3         .byte 4  
      000415 3F 4B 45 59              4         .ascii "?KEY"
      000419                          5         QKEY:
      000419 90 5F            [ 1]  844         CLRW Y 
      00041B 72 0B 52 30 0B   [ 2]  845         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000420 C6 52 31         [ 1]  846         LD    A,UART_DR   ;get char in A
      000423 1D 00 02         [ 2]  847 	SUBW	X,#2
      000426 E7 01            [ 1]  848         LD     (1,X),A
      000428 7F               [ 1]  849 	CLR	(X)
      000429 90 53            [ 2]  850         CPLW     Y
      00042B                        851 INCH:
      00042B 1D 00 02         [ 2]  852 		SUBW	X,#2
      00042E FF               [ 2]  853         LDW     (X),Y
      00042F 81               [ 4]  854         RET
                                    855 
                                    856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    857 ;       TX!     ( c -- )
                                    858 ;       Send character c to  output device.
                                    859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000430                        860         _HEADER EMIT,4,"EMIT"
      000430 04 14                    1         .word LINK 
                           000432     2         LINK=.
      000432 04                       3         .byte 4  
      000433 45 4D 49 54              4         .ascii "EMIT"
      000437                          5         EMIT:
      000437 E6 01            [ 1]  861         LD     A,(1,X)
      000439 1C 00 02         [ 2]  862 	ADDW	X,#2
      00043C 72 0F 52 30 FB   [ 2]  863 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000441 C7 52 31         [ 1]  864         LD    UART_DR,A   ;send A
      000444 81               [ 4]  865         RET
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ;       FC-XON  ( -- )
                                    869 ;       send XON character 
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000445                        871         _HEADER FC_XON,6,"FC-XON"
      000445 04 32                    1         .word LINK 
                           000447     2         LINK=.
      000447 06                       3         .byte 6  
      000448 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044E                          5         FC_XON:
      00044E 1D 00 02         [ 2]  872         subw x,#CELLL 
      000451 7F               [ 1]  873         clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000452 A6 11            [ 1]  874         ld a,#XON 
      000454 E7 01            [ 1]  875         ld (1,x),a 
      000456 CD 04 37         [ 4]  876         call EMIT 
      000459 81               [ 4]  877         ret 
                                    878 
                                    879 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    880 ;       FC-XOFF ( -- )
                                    881 ;       Send XOFF character 
                                    882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00045A                        883         _HEADER FC_XOFF,7,"FC-XOFF"
      00045A 04 47                    1         .word LINK 
                           00045C     2         LINK=.
      00045C 07                       3         .byte 7  
      00045D 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000464                          5         FC_XOFF:
      000464 1D 00 02         [ 2]  884         subw x,#CELLL 
      000467 7F               [ 1]  885         clr (x)
      000468 A6 13            [ 1]  886         ld a,#XOFF 
      00046A E7 01            [ 1]  887         ld (1,x),a 
      00046C CD 04 37         [ 4]  888         call EMIT 
      00046F 81               [ 4]  889         ret
                                    890 
                                    891 ;; The kernel
                                    892 
                                    893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    894 ;       doLIT   ( -- w )
                                    895 ;       Push an inline literal.
                                    896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000470                        897 DOLIT:
      000470 1D 00 02         [ 2]  898 	SUBW X,#2
      000473 16 01            [ 2]  899         ldw y,(1,sp)
      000475 90 FE            [ 2]  900         ldw y,(y)
      000477 FF               [ 2]  901         ldw (x),y
      000478 90 85            [ 2]  902         popw y 
      00047A 90 EC 02         [ 2]  903         jp (2,y)
                                    904 
                                    905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    906 ;       NEXT    ( -- )
                                    907 ;       Code for  single index loop.
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047D                        909         _HEADER DONXT,COMPO+4,"NEXT"
      00047D 04 5C                    1         .word LINK 
                           00047F     2         LINK=.
      00047F 44                       3         .byte COMPO+4  
      000480 4E 45 58 54              4         .ascii "NEXT"
      000484                          5         DONXT:
      000484 16 03            [ 2]  910 	LDW Y,(3,SP)
      000486 90 5A            [ 2]  911 	DECW Y
      000488 2A 07            [ 1]  912 	JRPL NEX1 ; jump if N=0
      00048A 90 85            [ 2]  913 	POPW Y
      00048C 5B 02            [ 2]  914         addw sp,#2
      00048E 90 EC 02         [ 2]  915         JP (2,Y)
      000491                        916 NEX1:
      000491 17 03            [ 2]  917         LDW (3,SP),Y
      000493 90 85            [ 2]  918         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000495 90 FE            [ 2]  919 	LDW Y,(Y)
      000497 90 FC            [ 2]  920 	JP (Y)
                                    921 
                                    922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    923 ;       ?branch ( f -- )
                                    924 ;       Branch if flag is zero.
                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000499                        927 QBRAN:	
      000499 90 93            [ 1]  928         LDW Y,X
      00049B 1C 00 02         [ 2]  929 	ADDW X,#2
      00049E 90 FE            [ 2]  930 	LDW Y,(Y)
      0004A0 27 13            [ 1]  931         JREQ     BRAN
      0004A2 90 85            [ 2]  932 	POPW Y
      0004A4 90 EC 02         [ 2]  933 	JP (2,Y)
                                    934 
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    936 ;  TBRANCH ( f -- )
                                    937 ;  branch if f==TRUE 
                                    938 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    939 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A7                        940 TBRAN: 
      0004A7 90 93            [ 1]  941         LDW Y,X 
      0004A9 1C 00 02         [ 2]  942         ADDW X,#2 
      0004AC 90 FE            [ 2]  943         LDW Y,(Y)
      0004AE 26 05            [ 1]  944         JRNE BRAN 
      0004B0 90 85            [ 2]  945         POPW Y 
      0004B2 90 EC 02         [ 2]  946         JP (2,Y)
                                    947 
                                    948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    949 ;       branch  ( -- )
                                    950 ;       Branch to an inline address.
                                    951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    952 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B5                        953 BRAN:
      0004B5 90 85            [ 2]  954         POPW Y
      0004B7 90 FE            [ 2]  955 	LDW Y,(Y)
      0004B9 90 FC            [ 2]  956         JP  (Y)
                                    957 
                                    958 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    959 ;       EXECUTE ( ca -- )
                                    960 ;       Execute  word at ca.
                                    961 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BB                        962         _HEADER EXECU,7,"EXECUTE"
      0004BB 04 7F                    1         .word LINK 
                           0004BD     2         LINK=.
      0004BD 07                       3         .byte 7  
      0004BE 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C5                          5         EXECU:
      0004C5 90 93            [ 1]  963         LDW Y,X
      0004C7 1C 00 02         [ 2]  964 	ADDW X,#CELLL 
      0004CA 90 FE            [ 2]  965 	LDW  Y,(Y)
      0004CC 90 FC            [ 2]  966         JP   (Y)
                                    967 
                           000001   968 OPTIMIZE = 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000001   969 .if OPTIMIZE 
                                    970 ; remplacement de CALL EXIT par 
                                    971 ; le opcode de RET.
                                    972 ; Voir modification au code de ";"
                           000000   973 .else 
                                    974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    975 ;       EXIT    ( -- )
                                    976 ;       Terminate a colon definition.
                                    977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    978 ;       _HEADER EXIT,4,"EXIT"
                                    979 EXIT:
                                    980         POPW Y
                                    981         RET
                                    982 .endif 
                                    983 
                                    984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    985 ;       !       ( w a -- )
                                    986 ;       Pop  data stack to memory.
                                    987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CE                        988         _HEADER STORE,1,"!"
      0004CE 04 BD                    1         .word LINK 
                           0004D0     2         LINK=.
      0004D0 01                       3         .byte 1  
      0004D1 21                       4         .ascii "!"
      0004D2                          5         STORE:
      0004D2 90 93            [ 1]  989         LDW Y,X
      0004D4 90 FE            [ 2]  990         LDW Y,(Y)    ;Y=a
      0004D6 89               [ 2]  991         PUSHW X
      0004D7 EE 02            [ 2]  992         LDW X,(2,X) ; x=w 
      0004D9 90 FF            [ 2]  993         LDW (Y),X 
      0004DB 85               [ 2]  994         POPW X  
      0004DC                        995         _DDROP 
      0004DC 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0004DF 81               [ 4]  996         RET     
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;       @       ( a -- w )
                                   1000 ;       Push memory location to stack.
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004E0                       1002         _HEADER AT,1,"@"
      0004E0 04 D0                    1         .word LINK 
                           0004E2     2         LINK=.
      0004E2 01                       3         .byte 1  
      0004E3 40                       4         .ascii "@"
      0004E4                          5         AT:
      0004E4 90 93            [ 1] 1003         LDW Y,X     ;Y = a
      0004E6 90 FE            [ 2] 1004         LDW Y,(Y)   ; address 
      0004E8 90 FE            [ 2] 1005         LDW Y,(Y)   ; value 
      0004EA FF               [ 2] 1006         LDW (X),Y ;w = @Y
      0004EB 81               [ 4] 1007         RET     
                                   1008 
                                   1009 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1010 ;       C!      ( c b -- )
                                   1011 ;       Pop  data stack to byte memory.
                                   1012 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004EC                       1013         _HEADER CSTOR,2,"C!"
      0004EC 04 E2                    1         .word LINK 
                           0004EE     2         LINK=.
      0004EE 02                       3         .byte 2  
      0004EF 43 21                    4         .ascii "C!"
      0004F1                          5         CSTOR:
      0004F1 90 93            [ 1] 1014         LDW Y,X
      0004F3 90 FE            [ 2] 1015 	LDW Y,(Y)    ;Y=b
      0004F5 E6 03            [ 1] 1016         LD A,(3,X)    ;D = c
      0004F7 90 F7            [ 1] 1017         LD  (Y),A     ;store c at b
      0004F9 1C 00 04         [ 2] 1018 	ADDW X,#4 ; DDROP 
      0004FC 81               [ 4] 1019         RET     
                                   1020 
                                   1021 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1022 ;       C@      ( b -- c )
                                   1023 ;       Push byte in memory to  stack.
                                   1024 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FD                       1025         _HEADER CAT,2,"C@"
      0004FD 04 EE                    1         .word LINK 
                           0004FF     2         LINK=.
      0004FF 02                       3         .byte 2  
      000500 43 40                    4         .ascii "C@"
      000502                          5         CAT:
      000502 90 93            [ 1] 1026         LDW Y,X     ;Y=b
      000504 90 FE            [ 2] 1027         LDW Y,(Y)
      000506 90 F6            [ 1] 1028         LD A,(Y)
      000508 E7 01            [ 1] 1029         LD (1,X),A
      00050A 7F               [ 1] 1030         CLR (X)
      00050B 81               [ 4] 1031         RET     
                                   1032 
                                   1033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1034 ;       RP@     ( -- a )
                                   1035 ;       Push current RP to data stack.
                                   1036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050C                       1037         _HEADER RPAT,3,"RP@"
      00050C 04 FF                    1         .word LINK 
                           00050E     2         LINK=.
      00050E 03                       3         .byte 3  
      00050F 52 50 40                 4         .ascii "RP@"
      000512                          5         RPAT:
      000512 90 96            [ 1] 1038         LDW Y,SP    ;save return addr
      000514 1D 00 02         [ 2] 1039         SUBW X,#2
      000517 FF               [ 2] 1040         LDW (X),Y
      000518 81               [ 4] 1041         RET     
                                   1042 
                                   1043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1044 ;       RP!     ( a -- )
                                   1045 ;       Set  return stack pointer.
                                   1046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000519                       1047         _HEADER RPSTO,COMPO+3,"RP!"
      000519 05 0E                    1         .word LINK 
                           00051B     2         LINK=.
      00051B 43                       3         .byte COMPO+3  
      00051C 52 50 21                 4         .ascii "RP!"
      00051F                          5         RPSTO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00051F 90 85            [ 2] 1048         POPW Y
      000521 90 BF 26         [ 2] 1049         LDW YTEMP,Y
      000524 90 93            [ 1] 1050         LDW Y,X
      000526 90 FE            [ 2] 1051         LDW Y,(Y)
      000528 90 94            [ 1] 1052         LDW SP,Y
      00052A 1C 00 02         [ 2] 1053         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052D 92 CC 26         [ 5] 1054         JP [YTEMP]
                                   1055 
                                   1056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1057 ;       R>      ( -- w )
                                   1058 ;       Pop return stack to data stack.
                                   1059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000530                       1060         _HEADER RFROM,2,"R>"
      000530 05 1B                    1         .word LINK 
                           000532     2         LINK=.
      000532 02                       3         .byte 2  
      000533 52 3E                    4         .ascii "R>"
      000535                          5         RFROM:
      000535 1D 00 02         [ 2] 1061         SUBW X,#CELLL 
      000538 16 03            [ 2] 1062         LDW Y,(3,SP)
      00053A FF               [ 2] 1063         LDW (X),Y 
      00053B 90 85            [ 2] 1064         POPW Y 
      00053D 5B 02            [ 2] 1065         ADDW SP,#2 
      00053F 90 FC            [ 2] 1066         JP (Y)
                                   1067 
                                   1068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1069 ;       R@      ( -- w )
                                   1070 ;       Copy top of return stack to stack.
                                   1071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000541                       1072         _HEADER RAT,2,"R@"
      000541 05 32                    1         .word LINK 
                           000543     2         LINK=.
      000543 02                       3         .byte 2  
      000544 52 40                    4         .ascii "R@"
      000546                          5         RAT:
      000546 16 03            [ 2] 1073         ldw y,(3,sp)
      000548 1D 00 02         [ 2] 1074         subw x,#CELLL 
      00054B FF               [ 2] 1075         ldw (x),y 
      00054C 81               [ 4] 1076         ret 
                                   1077 
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1079 ;       LOCAL ( n -- )
                                   1080 ;       reserve n slots on return stack
                                   1081 ;       for local variables 
                                   1082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054D                       1083         _HEADER LOCAL,5,"LOCAL"
      00054D 05 43                    1         .word LINK 
                           00054F     2         LINK=.
      00054F 05                       3         .byte 5  
      000550 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000555                          5         LOCAL:
      000555 90 85            [ 2] 1084         POPW Y  
      000557 90 BF 26         [ 2] 1085         LDW YTEMP,Y ; RETURN ADDRESS 
      00055A E6 01            [ 1] 1086         LD A,(1,X)
      00055C 90 97            [ 1] 1087         LD YL,A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00055E A6 02            [ 1] 1088         LD A,#CELLL 
      000560 90 42            [ 4] 1089         MUL Y,A 
      000562 90 BF 24         [ 2] 1090         LDw XTEMP,Y
      000565 90 96            [ 1] 1091         LDW Y,SP 
      000567 72 B2 00 24      [ 2] 1092         SUBW Y,XTEMP
      00056B 90 94            [ 1] 1093         LDW SP,Y 
      00056D 1C 00 02         [ 2] 1094         ADDW X,#CELLL 
      000570 92 CC 26         [ 5] 1095         JP [YTEMP]
                                   1096 
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1098 ;       NRDROP ( n -- )
                                   1099 ;       drop n elements from rstack
                                   1100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000573                       1101         _HEADER NRDROP,6,"NRDROP" 
      000573 05 4F                    1         .word LINK 
                           000575     2         LINK=.
      000575 06                       3         .byte 6  
      000576 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057C                          5         NRDROP:
      00057C 90 85            [ 2] 1102         POPW Y 
      00057E 90 BF 26         [ 2] 1103         LDW YTEMP,Y ; RETURN ADDRESS 
      000581 E6 01            [ 1] 1104         LD A,(1,X)
      000583 90 97            [ 1] 1105         LD YL,A  
      000585 A6 02            [ 1] 1106         LD A,#CELLL 
      000587 90 42            [ 4] 1107         MUL Y,A 
      000589 90 BF 24         [ 2] 1108         LDW XTEMP,Y 
      00058C 90 96            [ 1] 1109         LDW Y,SP 
      00058E 72 B9 00 24      [ 2] 1110         ADDW Y,XTEMP 
      000592 90 94            [ 1] 1111         LDW SP,Y  
      000594 1C 00 02         [ 2] 1112         ADDW X,#CELLL 
      000597 92 CC 26         [ 5] 1113         JP [YTEMP]
                                   1114 
                                   1115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1116 ;        ( n -- w)
                                   1117 ;      fetch nth element ofr return stack 
                                   1118 ;      n==0 is same as R@ 
                                   1119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059A                       1120         _HEADER NRAT,3,"NR@"
      00059A 05 75                    1         .word LINK 
                           00059C     2         LINK=.
      00059C 03                       3         .byte 3  
      00059D 4E 52 40                 4         .ascii "NR@"
      0005A0                          5         NRAT:
      0005A0 E6 01            [ 1] 1121         LD A,(1,X)
      0005A2 90 97            [ 1] 1122         LD YL,A 
      0005A4 A6 02            [ 1] 1123         LD A,#CELLL 
      0005A6 90 42            [ 4] 1124         MUL Y,A 
      0005A8 90 BF 26         [ 2] 1125         LDW YTEMP,Y 
      0005AB 90 96            [ 1] 1126         LDW Y,SP 
      0005AD 72 A9 00 03      [ 2] 1127         ADDW Y,#3 
      0005B1 72 B9 00 26      [ 2] 1128         ADDW Y,YTEMP 
      0005B5 90 FE            [ 2] 1129         LDW Y,(Y)
      0005B7 FF               [ 2] 1130         LDW (X),Y 
      0005B8 81               [ 4] 1131         RET 
                                   1132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1134 ;       NR! ( w n --  )
                                   1135 ;       store w on nth position of 
                                   1136 ;       return stack 
                                   1137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B9                       1138         _HEADER NRSTO,3,"NR!"
      0005B9 05 9C                    1         .word LINK 
                           0005BB     2         LINK=.
      0005BB 03                       3         .byte 3  
      0005BC 4E 52 21                 4         .ascii "NR!"
      0005BF                          5         NRSTO:
      0005BF 90 96            [ 1] 1139         LDW Y,SP
      0005C1 72 A9 00 03      [ 2] 1140         ADDW Y,#3 
      0005C5 90 BF 26         [ 2] 1141         LDW YTEMP,Y 
      0005C8 E6 01            [ 1] 1142         LD A,(1,X)
      0005CA 90 97            [ 1] 1143         LD YL,A 
      0005CC A6 02            [ 1] 1144         LD A,#CELLL 
      0005CE 90 42            [ 4] 1145         MUL Y,A 
      0005D0 72 B9 00 26      [ 2] 1146         ADDW Y,YTEMP
      0005D4 89               [ 2] 1147         PUSHW X 
      0005D5 EE 02            [ 2] 1148         LDW X,(2,X)
      0005D7 90 FF            [ 2] 1149         LDW (Y),X
      0005D9 85               [ 2] 1150         POPW X 
      0005DA 1C 00 04         [ 2] 1151         ADDW X,#2*CELLL 
      0005DD 81               [ 4] 1152         RET 
                                   1153 
                                   1154 
                                   1155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1156 ;       >R      ( w -- )
                                   1157 ;       Push data stack to return stack.
                                   1158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DE                       1159         _HEADER TOR,COMPO+2,">R"
      0005DE 05 BB                    1         .word LINK 
                           0005E0     2         LINK=.
      0005E0 42                       3         .byte COMPO+2  
      0005E1 3E 52                    4         .ascii ">R"
      0005E3                          5         TOR:
      0005E3 90 85            [ 2] 1160         POPW Y    ;save return addr
      0005E5 90 BF 26         [ 2] 1161         LDW YTEMP,Y
      0005E8 90 93            [ 1] 1162         LDW Y,X
      0005EA 90 FE            [ 2] 1163         LDW Y,(Y)  ; W
      0005EC 90 89            [ 2] 1164         PUSHW Y    ;W >R 
      0005EE 1C 00 02         [ 2] 1165         ADDW X,#2
      0005F1 92 CC 26         [ 5] 1166         JP [YTEMP]
                                   1167 
                                   1168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1169 ;       SP@     ( -- a )
                                   1170 ;       Push current stack pointer.
                                   1171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1172         _HEADER SPAT,3,"SP@"
      0005F4 05 E0                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 03                       3         .byte 3  
      0005F7 53 50 40                 4         .ascii "SP@"
      0005FA                          5         SPAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0005FA 90 93            [ 1] 1173 	LDW Y,X
      0005FC 1D 00 02         [ 2] 1174         SUBW X,#2
      0005FF FF               [ 2] 1175 	LDW (X),Y
      000600 81               [ 4] 1176         RET     
                                   1177 
                                   1178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1179 ;       SP!     ( a -- )
                                   1180 ;       Set  data stack pointer.
                                   1181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000601                       1182         _HEADER SPSTO,3,"SP!"
      000601 05 F6                    1         .word LINK 
                           000603     2         LINK=.
      000603 03                       3         .byte 3  
      000604 53 50 21                 4         .ascii "SP!"
      000607                          5         SPSTO:
      000607 FE               [ 2] 1183         LDW     X,(X)     ;X = a
      000608 81               [ 4] 1184         RET     
                                   1185 
                                   1186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1187 ;       DROP    ( w -- )
                                   1188 ;       Discard top stack item.
                                   1189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000609                       1190         _HEADER DROP,4,"DROP"
      000609 06 03                    1         .word LINK 
                           00060B     2         LINK=.
      00060B 04                       3         .byte 4  
      00060C 44 52 4F 50              4         .ascii "DROP"
      000610                          5         DROP:
      000610 1C 00 02         [ 2] 1191         ADDW X,#2     
      000613 81               [ 4] 1192         RET     
                                   1193 
                                   1194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1195 ;       DUP     ( w -- w w )
                                   1196 ;       Duplicate  top stack item.
                                   1197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000614                       1198         _HEADER DUPP,3,"DUP"
      000614 06 0B                    1         .word LINK 
                           000616     2         LINK=.
      000616 03                       3         .byte 3  
      000617 44 55 50                 4         .ascii "DUP"
      00061A                          5         DUPP:
      00061A 90 93            [ 1] 1199 	LDW Y,X
      00061C 1D 00 02         [ 2] 1200         SUBW X,#2
      00061F 90 FE            [ 2] 1201 	LDW Y,(Y)
      000621 FF               [ 2] 1202 	LDW (X),Y
      000622 81               [ 4] 1203         RET     
                                   1204 
                                   1205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1206 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1207 ;       Exchange top two stack items.
                                   1208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000623                       1209         _HEADER SWAPP,4,"SWAP"
      000623 06 16                    1         .word LINK 
                           000625     2         LINK=.
      000625 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000626 53 57 41 50              4         .ascii "SWAP"
      00062A                          5         SWAPP:
      00062A 90 93            [ 1] 1210         LDW Y,X
      00062C 90 FE            [ 2] 1211         LDW Y,(Y)
      00062E 90 89            [ 2] 1212         PUSHW Y  
      000630 90 93            [ 1] 1213         LDW Y,X
      000632 90 EE 02         [ 2] 1214         LDW Y,(2,Y)
      000635 FF               [ 2] 1215         LDW (X),Y
      000636 90 85            [ 2] 1216         POPW Y 
      000638 EF 02            [ 2] 1217         LDW (2,X),Y
      00063A 81               [ 4] 1218         RET     
                                   1219 
                                   1220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1221 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1222 ;       Copy second stack item to top.
                                   1223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063B                       1224         _HEADER OVER,4,"OVER"
      00063B 06 25                    1         .word LINK 
                           00063D     2         LINK=.
      00063D 04                       3         .byte 4  
      00063E 4F 56 45 52              4         .ascii "OVER"
      000642                          5         OVER:
      000642 1D 00 02         [ 2] 1225         SUBW X,#2
      000645 90 93            [ 1] 1226         LDW Y,X
      000647 90 EE 04         [ 2] 1227         LDW Y,(4,Y)
      00064A FF               [ 2] 1228         LDW (X),Y
      00064B 81               [ 4] 1229         RET     
                                   1230 
                                   1231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1232 ;       0<      ( n -- t )
                                   1233 ;       Return true if n is negative.
                                   1234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064C                       1235         _HEADER ZLESS,2,"0<"
      00064C 06 3D                    1         .word LINK 
                           00064E     2         LINK=.
      00064E 02                       3         .byte 2  
      00064F 30 3C                    4         .ascii "0<"
      000651                          5         ZLESS:
      000651 A6 FF            [ 1] 1236         LD A,#0xFF
      000653 90 93            [ 1] 1237         LDW Y,X
      000655 90 FE            [ 2] 1238         LDW Y,(Y)
      000657 2B 01            [ 1] 1239         JRMI     ZL1
      000659 4F               [ 1] 1240         CLR A   ;false
      00065A F7               [ 1] 1241 ZL1:    LD     (X),A
      00065B E7 01            [ 1] 1242         LD (1,X),A
      00065D 81               [ 4] 1243 	RET     
                                   1244 
                                   1245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1246 ;       0= ( n -- f )
                                   1247 ;   n==0?
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065E                       1249         _HEADER ZEQUAL,2,"0="
      00065E 06 4E                    1         .word LINK 
                           000660     2         LINK=.
      000660 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000661 30 3D                    4         .ascii "0="
      000663                          5         ZEQUAL:
      000663 A6 FF            [ 1] 1250         LD A,#0XFF 
      000665 90 93            [ 1] 1251         LDW Y,X 
      000667 90 FE            [ 2] 1252         LDW Y,(Y)
      000669 27 02            [ 1] 1253         JREQ ZEQU1 
      00066B A6 00            [ 1] 1254         LD A,#0 
      00066D                       1255 ZEQU1:  
      00066D F7               [ 1] 1256         LD (X),A 
      00066E E7 01            [ 1] 1257         LD (1,X),A         
      000670 81               [ 4] 1258         RET 
                                   1259 
                                   1260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1261 ;       AND     ( w w -- w )
                                   1262 ;       Bitwise AND.
                                   1263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000671                       1264         _HEADER ANDD,3,"AND"
      000671 06 60                    1         .word LINK 
                           000673     2         LINK=.
      000673 03                       3         .byte 3  
      000674 41 4E 44                 4         .ascii "AND"
      000677                          5         ANDD:
      000677 F6               [ 1] 1265         LD  A,(X)    ;D=w
      000678 E4 02            [ 1] 1266         AND A,(2,X)
      00067A E7 02            [ 1] 1267         LD (2,X),A
      00067C E6 01            [ 1] 1268         LD A,(1,X)
      00067E E4 03            [ 1] 1269         AND A,(3,X)
      000680 E7 03            [ 1] 1270         LD (3,X),A
      000682 1C 00 02         [ 2] 1271         ADDW X,#2
      000685 81               [ 4] 1272         RET
                                   1273 
                                   1274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1275 ;       OR      ( w w -- w )
                                   1276 ;       Bitwise inclusive OR.
                                   1277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000686                       1278         _HEADER ORR,2,"OR"
      000686 06 73                    1         .word LINK 
                           000688     2         LINK=.
      000688 02                       3         .byte 2  
      000689 4F 52                    4         .ascii "OR"
      00068B                          5         ORR:
      00068B F6               [ 1] 1279         LD A,(X)    ;D=w
      00068C EA 02            [ 1] 1280         OR A,(2,X)
      00068E E7 02            [ 1] 1281         LD (2,X),A
      000690 E6 01            [ 1] 1282         LD A,(1,X)
      000692 EA 03            [ 1] 1283         OR A,(3,X)
      000694 E7 03            [ 1] 1284         LD (3,X),A
      000696 1C 00 02         [ 2] 1285         ADDW X,#2
      000699 81               [ 4] 1286         RET
                                   1287 
                                   1288 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1289 ;       XOR     ( w w -- w )
                                   1290 ;       Bitwise exclusive OR.
                                   1291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00069A                       1292         _HEADER XORR,3,"XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00069A 06 88                    1         .word LINK 
                           00069C     2         LINK=.
      00069C 03                       3         .byte 3  
      00069D 58 4F 52                 4         .ascii "XOR"
      0006A0                          5         XORR:
      0006A0 F6               [ 1] 1293         LD A,(X)    ;D=w
      0006A1 E8 02            [ 1] 1294         XOR A,(2,X)
      0006A3 E7 02            [ 1] 1295         LD (2,X),A
      0006A5 E6 01            [ 1] 1296         LD A,(1,X)
      0006A7 E8 03            [ 1] 1297         XOR A,(3,X)
      0006A9 E7 03            [ 1] 1298         LD (3,X),A
      0006AB 1C 00 02         [ 2] 1299         ADDW X,#2
      0006AE 81               [ 4] 1300         RET
                                   1301 
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1303 ;       UM+     ( u u -- udsum )
                                   1304 ;       Add two unsigned single
                                   1305 ;       and return a double sum.
                                   1306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AF                       1307         _HEADER UPLUS,3,"UM+"
      0006AF 06 9C                    1         .word LINK 
                           0006B1     2         LINK=.
      0006B1 03                       3         .byte 3  
      0006B2 55 4D 2B                 4         .ascii "UM+"
      0006B5                          5         UPLUS:
      0006B5 A6 01            [ 1] 1308         LD A,#1
      0006B7 90 93            [ 1] 1309         LDW Y,X
      0006B9 90 EE 02         [ 2] 1310         LDW Y,(2,Y)
      0006BC 90 BF 26         [ 2] 1311         LDW YTEMP,Y
      0006BF 90 93            [ 1] 1312         LDW Y,X
      0006C1 90 FE            [ 2] 1313         LDW Y,(Y)
      0006C3 72 B9 00 26      [ 2] 1314         ADDW Y,YTEMP
      0006C7 EF 02            [ 2] 1315         LDW (2,X),Y
      0006C9 25 01            [ 1] 1316         JRC     UPL1
      0006CB 4F               [ 1] 1317         CLR A
      0006CC E7 01            [ 1] 1318 UPL1:   LD     (1,X),A
      0006CE 7F               [ 1] 1319         CLR (X)
      0006CF 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;; System and user variables
                                   1323 
                                   1324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1325 ;       doVAR   ( -- a )
                                   1326 ;       run time code 
                                   1327 ;       for VARIABLE and CREATE.
                                   1328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1329 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D0                       1330 DOVAR:
      0006D0 1D 00 02         [ 2] 1331 	SUBW X,#2
      0006D3 90 85            [ 2] 1332         POPW Y    ;get return addr (pfa)
      0006D5 90 FE            [ 2] 1333         LDW Y,(Y) ; indirect address 
      0006D7 FF               [ 2] 1334         LDW (X),Y    ;push on stack
      0006D8 81               [ 4] 1335         RET     ;go to RET of EXEC
                                   1336 
                                   1337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1338 ;       BASE    ( -- a )
                                   1339 ;       Radix base for numeric I/O.
                                   1340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D9                       1341         _HEADER BASE,4,"BASE"
      0006D9 06 B1                    1         .word LINK 
                           0006DB     2         LINK=.
      0006DB 04                       3         .byte 4  
      0006DC 42 41 53 45              4         .ascii "BASE"
      0006E0                          5         BASE:
      0006E0 90 AE 00 06      [ 2] 1342 	LDW Y,#UBASE 
      0006E4 1D 00 02         [ 2] 1343 	SUBW X,#2
      0006E7 FF               [ 2] 1344         LDW (X),Y
      0006E8 81               [ 4] 1345         RET
                                   1346 
                                   1347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1348 ;       tmp     ( -- a )
                                   1349 ;       A temporary storage.
                                   1350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E9                       1351         _HEADER TEMP,3,"TMP"
      0006E9 06 DB                    1         .word LINK 
                           0006EB     2         LINK=.
      0006EB 03                       3         .byte 3  
      0006EC 54 4D 50                 4         .ascii "TMP"
      0006EF                          5         TEMP:
      0006EF 90 AE 00 0A      [ 2] 1352 	LDW Y,#UTMP
      0006F3 1D 00 02         [ 2] 1353 	SUBW X,#2
      0006F6 FF               [ 2] 1354         LDW (X),Y
      0006F7 81               [ 4] 1355         RET
                                   1356 
                                   1357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1358 ;       >IN     ( -- a )
                                   1359 ;        Hold parsing pointer.
                                   1360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F8                       1361         _HEADER INN,3,">IN"
      0006F8 06 EB                    1         .word LINK 
                           0006FA     2         LINK=.
      0006FA 03                       3         .byte 3  
      0006FB 3E 49 4E                 4         .ascii ">IN"
      0006FE                          5         INN:
      0006FE 90 AE 00 0C      [ 2] 1362 	LDW Y,#UINN 
      000702 1D 00 02         [ 2] 1363 	SUBW X,#2
      000705 FF               [ 2] 1364         LDW (X),Y
      000706 81               [ 4] 1365         RET
                                   1366 
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1368 ;       #TIB    ( -- a )
                                   1369 ;       Count in terminal input 
                                   1370 ;       buffer.
                                   1371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000707                       1372         _HEADER NTIB,4,"#TIB"
      000707 06 FA                    1         .word LINK 
                           000709     2         LINK=.
      000709 04                       3         .byte 4  
      00070A 23 54 49 42              4         .ascii "#TIB"
      00070E                          5         NTIB:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00070E 90 AE 00 0E      [ 2] 1373 	LDW Y,#UCTIB 
      000712 1D 00 02         [ 2] 1374 	SUBW X,#2
      000715 FF               [ 2] 1375         LDW (X),Y
      000716 81               [ 4] 1376         RET
                                   1377 
                                   1378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1379 ;       TBUF ( -- a )
                                   1380 ;       address of 128 bytes 
                                   1381 ;       transaction buffer
                                   1382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000717                       1383         _HEADER TBUF,4,"TBUF"
      000717 07 09                    1         .word LINK 
                           000719     2         LINK=.
      000719 04                       3         .byte 4  
      00071A 54 42 55 46              4         .ascii "TBUF"
      00071E                          5         TBUF:
      00071E 90 AE 16 80      [ 2] 1384         ldw y,#ROWBUFF
      000722 1D 00 02         [ 2] 1385         subw x,#CELLL
      000725 FF               [ 2] 1386         ldw (x),y 
      000726 81               [ 4] 1387         ret 
                                   1388 
                                   1389 ; systeme variable 
                                   1390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1391 ; compilation destination 
                                   1392 ; TFLASH ( -- A )
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000727                       1394         _HEADER TFLASH,6,"TFLASH"
      000727 07 19                    1         .word LINK 
                           000729     2         LINK=.
      000729 06                       3         .byte 6  
      00072A 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000730                          5         TFLASH:
      000730 1D 00 02         [ 2] 1395         subw x,#CELLL 
      000733 90 AE 00 20      [ 2] 1396         ldw y,#UTFLASH
      000737 FF               [ 2] 1397         ldw (x),y 
      000738 81               [ 4] 1398         ret 
                                   1399 
                                   1400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1401 ;       "EVAL   ( -- a )
                                   1402 ;       Execution vector of EVAL.
                                   1403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000739                       1404         _HEADER TEVAL,5,"'EVAL"
      000739 07 29                    1         .word LINK 
                           00073B     2         LINK=.
      00073B 05                       3         .byte 5  
      00073C 27 45 56 41 4C           4         .ascii "'EVAL"
      000741                          5         TEVAL:
      000741 90 AE 00 12      [ 2] 1405 	LDW Y,#UINTER 
      000745 1D 00 02         [ 2] 1406 	SUBW X,#2
      000748 FF               [ 2] 1407         LDW (X),Y
      000749 81               [ 4] 1408         RET
                                   1409 
                                   1410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1411 ;       HLD     ( -- a )
                                   1412 ;       Hold a pointer of output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1413 ;        string.
                                   1414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00074A                       1415         _HEADER HLD,3,"HLD"
      00074A 07 3B                    1         .word LINK 
                           00074C     2         LINK=.
      00074C 03                       3         .byte 3  
      00074D 48 4C 44                 4         .ascii "HLD"
      000750                          5         HLD:
      000750 90 AE 00 14      [ 2] 1416 	LDW Y,#UHLD 
      000754 1D 00 02         [ 2] 1417 	SUBW X,#2
      000757 FF               [ 2] 1418         LDW (X),Y
      000758 81               [ 4] 1419         RET
                                   1420 
                                   1421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1422 ;       CONTEXT ( -- a )
                                   1423 ;       Start vocabulary search.
                                   1424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000759                       1425         _HEADER CNTXT,7,"CONTEXT"
      000759 07 4C                    1         .word LINK 
                           00075B     2         LINK=.
      00075B 07                       3         .byte 7  
      00075C 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000763                          5         CNTXT:
      000763 90 AE 00 16      [ 2] 1426 	LDW Y,#UCNTXT
      000767 1D 00 02         [ 2] 1427 	SUBW X,#2
      00076A FF               [ 2] 1428         LDW (X),Y
      00076B 81               [ 4] 1429         RET
                                   1430 
                                   1431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1432 ;       VP      ( -- a )
                                   1433 ;       Point to top of variables
                                   1434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076C                       1435         _HEADER VPP,2,"VP"
      00076C 07 5B                    1         .word LINK 
                           00076E     2         LINK=.
      00076E 02                       3         .byte 2  
      00076F 56 50                    4         .ascii "VP"
      000771                          5         VPP:
      000771 90 AE 00 18      [ 2] 1436 	LDW Y,#UVP 
      000775 1D 00 02         [ 2] 1437 	SUBW X,#2
      000778 FF               [ 2] 1438         LDW (X),Y
      000779 81               [ 4] 1439         RET
                                   1440 
                                   1441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1442 ;       CP    ( -- a )
                                   1443 ;       Pointer to top of FLASH 
                                   1444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077A                       1445         _HEADER CPP,2,"CP"
      00077A 07 6E                    1         .word LINK 
                           00077C     2         LINK=.
      00077C 02                       3         .byte 2  
      00077D 43 50                    4         .ascii "CP"
      00077F                          5         CPP:
      00077F 90 AE 00 1A      [ 2] 1446         ldw y,#UCP 
      000783 1D 00 02         [ 2] 1447         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000786 FF               [ 2] 1448         ldw (x),y 
      000787 81               [ 4] 1449         ret                
                                   1450 
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1452 ;       LAST    ( -- a )
                                   1453 ;       Point to last name in 
                                   1454 ;       dictionary.
                                   1455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000788                       1456         _HEADER LAST,4,"LAST"
      000788 07 7C                    1         .word LINK 
                           00078A     2         LINK=.
      00078A 04                       3         .byte 4  
      00078B 4C 41 53 54              4         .ascii "LAST"
      00078F                          5         LAST:
      00078F 90 AE 00 1C      [ 2] 1457 	LDW Y,#ULAST 
      000793 1D 00 02         [ 2] 1458 	SUBW X,#2
      000796 FF               [ 2] 1459         LDW (X),Y
      000797 81               [ 4] 1460         RET
                                   1461 
                                   1462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1463 ; address of system variable URLAST 
                                   1464 ;       RAMLAST ( -- a )
                                   1465 ; RAM dictionary context 
                                   1466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000798                       1467         _HEADER RAMLAST,7,"RAMLAST"
      000798 07 8A                    1         .word LINK 
                           00079A     2         LINK=.
      00079A 07                       3         .byte 7  
      00079B 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A2                          5         RAMLAST:
      0007A2 90 AE 00 22      [ 2] 1468         ldw y,#URLAST 
      0007A6 1D 00 02         [ 2] 1469         subw x,#CELLL 
      0007A9 FF               [ 2] 1470         ldw (x),y 
      0007AA 81               [ 4] 1471         ret 
                                   1472 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1474 ;       OFFSET ( -- a )
                                   1475 ;       address of system 
                                   1476 ;       variable OFFSET 
                                   1477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AB                       1478         _HEADER OFFSET,6,"OFFSET"
      0007AB 07 9A                    1         .word LINK 
                           0007AD     2         LINK=.
      0007AD 06                       3         .byte 6  
      0007AE 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B4                          5         OFFSET:
      0007B4 1D 00 02         [ 2] 1479         subw x,#CELLL
      0007B7 90 AE 00 1E      [ 2] 1480         ldw y,#UOFFSET 
      0007BB FF               [ 2] 1481         ldw (x),y 
      0007BC 81               [ 4] 1482         ret 
                                   1483 
                                   1484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1485 ; adjust jump address 
                                   1486 ;  adding OFFSET
                                   1487 ; ADR-ADJ ( a -- a+offset )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BD                       1489 ADRADJ: 
      0007BD CD 07 B4         [ 4] 1490         call OFFSET 
      0007C0 CD 04 E4         [ 4] 1491         call AT 
      0007C3 CC 08 3D         [ 2] 1492         jp PLUS 
                                   1493 
                                   1494 
                                   1495 ;; Common functions
                                   1496 
                                   1497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1498 ;       ?DUP    ( w -- w w | 0 )
                                   1499 ;       Dup tos if its is not zero.
                                   1500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C6                       1501         _HEADER QDUP,4,"?DUP"
      0007C6 07 AD                    1         .word LINK 
                           0007C8     2         LINK=.
      0007C8 04                       3         .byte 4  
      0007C9 3F 44 55 50              4         .ascii "?DUP"
      0007CD                          5         QDUP:
      0007CD 90 93            [ 1] 1502         LDW Y,X
      0007CF 90 FE            [ 2] 1503 	LDW Y,(Y)
      0007D1 27 04            [ 1] 1504         JREQ     QDUP1
      0007D3 1D 00 02         [ 2] 1505 	SUBW X,#CELLL 
      0007D6 FF               [ 2] 1506         LDW (X),Y
      0007D7 81               [ 4] 1507 QDUP1:  RET
                                   1508 
                                   1509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1510 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1511 ;       Rot 3rd item to top.
                                   1512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D8                       1513         _HEADER ROT,3,"ROT"
      0007D8 07 C8                    1         .word LINK 
                           0007DA     2         LINK=.
      0007DA 03                       3         .byte 3  
      0007DB 52 4F 54                 4         .ascii "ROT"
      0007DE                          5         ROT:
      0007DE 90 93            [ 1] 1514         ldw y,x 
      0007E0 90 FE            [ 2] 1515         ldw y,(y)
      0007E2 90 89            [ 2] 1516         pushw y 
      0007E4 90 93            [ 1] 1517         ldw y,x 
      0007E6 90 EE 04         [ 2] 1518         ldw y,(4,y)
      0007E9 FF               [ 2] 1519         ldw (x),y 
      0007EA 90 93            [ 1] 1520         ldw y,x 
      0007EC 90 EE 02         [ 2] 1521         ldw y,(2,y)
      0007EF EF 04            [ 2] 1522         ldw (4,x),y 
      0007F1 90 85            [ 2] 1523         popw y 
      0007F3 EF 02            [ 2] 1524         ldw (2,x),y
      0007F5 81               [ 4] 1525         ret 
                                   1526 
                                   1527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1528 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1529 ;    rotate left 3 top elements 
                                   1530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F6                       1531     _HEADER NROT,4,"<ROT"
      0007F6 07 DA                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           0007F8     2         LINK=.
      0007F8 04                       3         .byte 4  
      0007F9 3C 52 4F 54              4         .ascii "<ROT"
      0007FD                          5         NROT:
      0007FD 90 93            [ 1] 1532     LDW Y,X 
      0007FF 90 FE            [ 2] 1533     LDW Y,(Y)
      000801 90 89            [ 2] 1534     PUSHW Y ; n3 >R 
      000803 90 93            [ 1] 1535     LDW Y,X 
      000805 90 EE 02         [ 2] 1536     LDW Y,(2,Y) ; Y = n2 
      000808 FF               [ 2] 1537     LDW (X),Y   ; TOS = n2 
      000809 90 93            [ 1] 1538     LDW Y,X    
      00080B 90 EE 04         [ 2] 1539     LDW Y,(4,Y) ; Y = n1 
      00080E EF 02            [ 2] 1540     LDW (2,X),Y ;   = n1 
      000810 90 85            [ 2] 1541     POPW Y  ; R> Y 
      000812 EF 04            [ 2] 1542     LDW (4,X),Y ; = n3 
      000814 81               [ 4] 1543     RET 
                                   1544 
                                   1545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1546 ;       2DROP   ( w w -- )
                                   1547 ;       Discard two items on stack.
                                   1548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000815                       1549         _HEADER DDROP,5,"2DROP"
      000815 07 F8                    1         .word LINK 
                           000817     2         LINK=.
      000817 05                       3         .byte 5  
      000818 32 44 52 4F 50           4         .ascii "2DROP"
      00081D                          5         DDROP:
      00081D 1C 00 04         [ 2] 1550         ADDW X,#4
      000820 81               [ 4] 1551         RET
                                   1552 
                                   1553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1554 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1555 ;       Duplicate top two items.
                                   1556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000821                       1557         _HEADER DDUP,4,"2DUP"
      000821 08 17                    1         .word LINK 
                           000823     2         LINK=.
      000823 04                       3         .byte 4  
      000824 32 44 55 50              4         .ascii "2DUP"
      000828                          5         DDUP:
      000828 1D 00 04         [ 2] 1558         SUBW X,#4
      00082B 90 93            [ 1] 1559         LDW Y,X
      00082D 90 EE 06         [ 2] 1560         LDW Y,(6,Y)
      000830 EF 02            [ 2] 1561         LDW (2,X),Y
      000832 90 93            [ 1] 1562         LDW Y,X
      000834 90 EE 04         [ 2] 1563         LDW Y,(4,Y)
      000837 FF               [ 2] 1564         LDW (X),Y
      000838 81               [ 4] 1565         RET
                                   1566 
                                   1567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1568 ;       +       ( w w -- sum )
                                   1569 ;       Add top two items.
                                   1570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000839                       1571         _HEADER PLUS,1,"+"
      000839 08 23                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00083B     2         LINK=.
      00083B 01                       3         .byte 1  
      00083C 2B                       4         .ascii "+"
      00083D                          5         PLUS:
      00083D 90 93            [ 1] 1572         LDW Y,X
      00083F 90 FE            [ 2] 1573         LDW Y,(Y)
      000841 90 BF 26         [ 2] 1574         LDW YTEMP,Y
      000844 1C 00 02         [ 2] 1575         ADDW X,#2
      000847 90 93            [ 1] 1576         LDW Y,X
      000849 90 FE            [ 2] 1577         LDW Y,(Y)
      00084B 72 B9 00 26      [ 2] 1578         ADDW Y,YTEMP
      00084F FF               [ 2] 1579         LDW (X),Y
      000850 81               [ 4] 1580         RET
                                   1581 
                                   1582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1583 ;       TRUE ( -- -1 )
                                   1584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000851                       1585         _HEADER TRUE,4,"TRUE"
      000851 08 3B                    1         .word LINK 
                           000853     2         LINK=.
      000853 04                       3         .byte 4  
      000854 54 52 55 45              4         .ascii "TRUE"
      000858                          5         TRUE:
      000858 A6 FF            [ 1] 1586         LD A,#255 
      00085A 1D 00 02         [ 2] 1587         SUBW X,#CELLL
      00085D F7               [ 1] 1588         LD (X),A 
      00085E E7 01            [ 1] 1589         LD (1,X),A 
      000860 81               [ 4] 1590         RET 
                                   1591 
                                   1592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1593 ;       FALSE ( -- 0 )
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000861                       1595         _HEADER FALSE,5,"FALSE"
      000861 08 53                    1         .word LINK 
                           000863     2         LINK=.
      000863 05                       3         .byte 5  
      000864 46 41 4C 53 45           4         .ascii "FALSE"
      000869                          5         FALSE:
      000869 1D 00 02         [ 2] 1596         SUBW X,#CELLL 
      00086C 7F               [ 1] 1597         CLR (X) 
      00086D 6F 01            [ 1] 1598         CLR (1,X)
      00086F 81               [ 4] 1599         RET 
                                   1600 
                                   1601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1602 ;       NOT     ( w -- w )
                                   1603 ;       One's complement of tos.
                                   1604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000870                       1605         _HEADER INVER,3,"NOT"
      000870 08 63                    1         .word LINK 
                           000872     2         LINK=.
      000872 03                       3         .byte 3  
      000873 4E 4F 54                 4         .ascii "NOT"
      000876                          5         INVER:
      000876 90 93            [ 1] 1606         LDW Y,X
      000878 90 FE            [ 2] 1607         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00087A 90 53            [ 2] 1608         CPLW Y
      00087C FF               [ 2] 1609         LDW (X),Y
      00087D 81               [ 4] 1610         RET
                                   1611 
                                   1612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1613 ;       NEGATE  ( n -- -n )
                                   1614 ;       Two's complement of tos.
                                   1615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087E                       1616         _HEADER NEGAT,6,"NEGATE"
      00087E 08 72                    1         .word LINK 
                           000880     2         LINK=.
      000880 06                       3         .byte 6  
      000881 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000887                          5         NEGAT:
      000887 90 93            [ 1] 1617         LDW Y,X
      000889 90 FE            [ 2] 1618         LDW Y,(Y)
      00088B 90 50            [ 2] 1619         NEGW Y
      00088D FF               [ 2] 1620         LDW (X),Y
      00088E 81               [ 4] 1621         RET
                                   1622 
                                   1623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1624 ;       DNEGATE ( d -- -d )
                                   1625 ;       Two's complement of double.
                                   1626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088F                       1627         _HEADER DNEGA,7,"DNEGATE"
      00088F 08 80                    1         .word LINK 
                           000891     2         LINK=.
      000891 07                       3         .byte 7  
      000892 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000899                          5         DNEGA:
      000899 90 93            [ 1] 1628         LDW Y,X
      00089B 90 FE            [ 2] 1629 	LDW Y,(Y)
      00089D 90 53            [ 2] 1630         CPLW Y
      00089F 90 89            [ 2] 1631         PUSHW Y      ; Y >R 
      0008A1 90 93            [ 1] 1632         LDW Y,X
      0008A3 90 EE 02         [ 2] 1633         LDW Y,(2,Y)
      0008A6 90 53            [ 2] 1634         CPLW Y
      0008A8 72 A9 00 01      [ 2] 1635         ADDW Y,#1
      0008AC EF 02            [ 2] 1636         LDW (2,X),Y
      0008AE 90 85            [ 2] 1637         POPW Y       ; R> Y  
      0008B0 24 02            [ 1] 1638         JRNC DN1 
      0008B2 90 5C            [ 1] 1639         INCW Y
      0008B4 FF               [ 2] 1640 DN1:    LDW (X),Y
      0008B5 81               [ 4] 1641         RET
                                   1642 
                                   1643 
                                   1644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1645 ;       S>D ( n -- d )
                                   1646 ; convert single integer to double 
                                   1647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B6                       1648         _HEADER STOD,3,"S>D"
      0008B6 08 91                    1         .word LINK 
                           0008B8     2         LINK=.
      0008B8 03                       3         .byte 3  
      0008B9 53 3E 44                 4         .ascii "S>D"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008BC                          5         STOD:
      0008BC 1D 00 02         [ 2] 1649         SUBW X,#CELLL 
      0008BF 7F               [ 1] 1650         CLR (X) 
      0008C0 6F 01            [ 1] 1651         CLR (1,X) 
      0008C2 90 93            [ 1] 1652         LDW Y,X 
      0008C4 90 EE 02         [ 2] 1653         LDW Y,(2,Y)
      0008C7 2A 05            [ 1] 1654         JRPL 1$
      0008C9 90 AE FF FF      [ 2] 1655         LDW Y,#-1 
      0008CD FF               [ 2] 1656         LDW (X),Y 
      0008CE 81               [ 4] 1657 1$:     RET 
                                   1658 
                                   1659 
                                   1660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1661 ;       -       ( n1 n2 -- n1-n2 )
                                   1662 ;       Subtraction.
                                   1663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CF                       1664         _HEADER SUBB,1,"-"
      0008CF 08 B8                    1         .word LINK 
                           0008D1     2         LINK=.
      0008D1 01                       3         .byte 1  
      0008D2 2D                       4         .ascii "-"
      0008D3                          5         SUBB:
      0008D3 90 93            [ 1] 1665         LDW Y,X
      0008D5 90 FE            [ 2] 1666         LDW Y,(Y) ; n2 
      0008D7 90 BF 26         [ 2] 1667         LDW YTEMP,Y 
      0008DA 1C 00 02         [ 2] 1668         ADDW X,#CELLL 
      0008DD 90 93            [ 1] 1669         LDW Y,X
      0008DF 90 FE            [ 2] 1670         LDW Y,(Y) ; n1 
      0008E1 72 B2 00 26      [ 2] 1671         SUBW Y,YTEMP ; n1-n2 
      0008E5 FF               [ 2] 1672         LDW (X),Y
      0008E6 81               [ 4] 1673         RET
                                   1674 
                                   1675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1676 ;       ABS     ( n -- n )
                                   1677 ;       Return  absolute value of n.
                                   1678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E7                       1679         _HEADER ABSS,3,"ABS"
      0008E7 08 D1                    1         .word LINK 
                           0008E9     2         LINK=.
      0008E9 03                       3         .byte 3  
      0008EA 41 42 53                 4         .ascii "ABS"
      0008ED                          5         ABSS:
      0008ED 90 93            [ 1] 1680         LDW Y,X
      0008EF 90 FE            [ 2] 1681 	LDW Y,(Y)
      0008F1 2A 03            [ 1] 1682         JRPL     AB1     ;negate:
      0008F3 90 50            [ 2] 1683         NEGW     Y     ;else negate hi byte
      0008F5 FF               [ 2] 1684         LDW (X),Y
      0008F6 81               [ 4] 1685 AB1:    RET
                                   1686 
                                   1687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1688 ;       =       ( w w -- t )
                                   1689 ;       Return true if top two are equal.
                                   1690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F7                       1691         _HEADER EQUAL,1,"="
      0008F7 08 E9                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           0008F9     2         LINK=.
      0008F9 01                       3         .byte 1  
      0008FA 3D                       4         .ascii "="
      0008FB                          5         EQUAL:
      0008FB A6 FF            [ 1] 1692         LD A,#0xFF  ;true
      0008FD 90 93            [ 1] 1693         LDW Y,X    
      0008FF 90 FE            [ 2] 1694         LDW Y,(Y)   ; n2 
      000901 1C 00 02         [ 2] 1695         ADDW X,#CELLL 
      000904 F3               [ 2] 1696         CPW Y,(X)   ; n1==n2
      000905 27 01            [ 1] 1697         JREQ EQ1 
      000907 4F               [ 1] 1698         CLR A 
      000908 F7               [ 1] 1699 EQ1:    LD (X),A
      000909 E7 01            [ 1] 1700         LD (1,X),A
      00090B 81               [ 4] 1701 	RET     
                                   1702 
                                   1703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1704 ;       U<      ( u1 u2 -- f )
                                   1705 ;       Unsigned compare of top two items.
                                   1706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090C                       1707         _HEADER ULESS,2,"U<"
      00090C 08 F9                    1         .word LINK 
                           00090E     2         LINK=.
      00090E 02                       3         .byte 2  
      00090F 55 3C                    4         .ascii "U<"
      000911                          5         ULESS:
      000911 A6 FF            [ 1] 1708         LD A,#0xFF  ;true
      000913 90 93            [ 1] 1709         LDW Y,X    
      000915 90 EE 02         [ 2] 1710         LDW Y,(2,Y) ; u1 
      000918 F3               [ 2] 1711         CPW Y,(X)   ; cpw u1  u2 
      000919 25 01            [ 1] 1712         JRULT     ULES1
      00091B 4F               [ 1] 1713         CLR A
      00091C 1C 00 02         [ 2] 1714 ULES1:  ADDW X,#CELLL 
      00091F F7               [ 1] 1715         LD (X),A
      000920 E7 01            [ 1] 1716         LD (1,X),A
      000922 81               [ 4] 1717 	RET     
                                   1718 
                                   1719 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1721 ;       <       ( n1 n2 -- t )
                                   1722 ;       Signed compare of top two items.
                                   1723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000923                       1724         _HEADER LESS,1,"<"
      000923 09 0E                    1         .word LINK 
                           000925     2         LINK=.
      000925 01                       3         .byte 1  
      000926 3C                       4         .ascii "<"
      000927                          5         LESS:
      000927 A6 FF            [ 1] 1725         LD A,#0xFF  ;true
      000929 90 93            [ 1] 1726         LDW Y,X    
      00092B 90 EE 02         [ 2] 1727         LDW Y,(2,Y)  ; n1 
      00092E F3               [ 2] 1728         CPW Y,(X)  ; n1 < n2 ? 
      00092F 2F 01            [ 1] 1729         JRSLT     LT1
      000931 4F               [ 1] 1730         CLR A
      000932 1C 00 02         [ 2] 1731 LT1:    ADDW X,#CELLL 
      000935 F7               [ 1] 1732         LD (X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000936 E7 01            [ 1] 1733         LD (1,X),A
      000938 81               [ 4] 1734 	RET     
                                   1735 
                                   1736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1737 ;   U> ( u1 u2 -- f )
                                   1738 ;   f = true if u1>u2 
                                   1739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000939                       1740         _HEADER UGREAT,2,"U>"
      000939 09 25                    1         .word LINK 
                           00093B     2         LINK=.
      00093B 02                       3         .byte 2  
      00093C 55 3E                    4         .ascii "U>"
      00093E                          5         UGREAT:
      00093E A6 FF            [ 1] 1741         LD A,#255  
      000940 90 93            [ 1] 1742         LDW Y,X 
      000942 90 EE 02         [ 2] 1743         LDW Y,(2,Y)  ; u1 
      000945 F3               [ 2] 1744         CPW Y,(X)  ; u1 > u2 
      000946 22 01            [ 1] 1745         JRUGT UGREAT1 
      000948 4F               [ 1] 1746         CLR A   
      000949                       1747 UGREAT1:
      000949 1C 00 02         [ 2] 1748         ADDW X,#CELLL 
      00094C F7               [ 1] 1749         LD (X),A 
      00094D E7 01            [ 1] 1750         LD (1,X),A 
      00094F 81               [ 4] 1751         RET 
                                   1752 
                                   1753 
                                   1754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1755 ;       >   (n1 n2 -- f )
                                   1756 ;  signed compare n1 n2 
                                   1757 ;  true if n1 > n2 
                                   1758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000950                       1759         _HEADER GREAT,1,">"
      000950 09 3B                    1         .word LINK 
                           000952     2         LINK=.
      000952 01                       3         .byte 1  
      000953 3E                       4         .ascii ">"
      000954                          5         GREAT:
      000954 A6 FF            [ 1] 1760         LD A,#0xFF ;
      000956 90 93            [ 1] 1761         LDW Y,X 
      000958 90 EE 02         [ 2] 1762         LDW Y,(2,Y)  ; n1 
      00095B F3               [ 2] 1763         CPW Y,(X) ; n1 > n2 ?  
      00095C 2C 01            [ 1] 1764         JRSGT GREAT1 
      00095E 4F               [ 1] 1765         CLR  A
      00095F                       1766 GREAT1:
      00095F 1C 00 02         [ 2] 1767         ADDW X,#CELLL 
      000962 F7               [ 1] 1768         LD (X),A 
      000963 E7 01            [ 1] 1769         LD (1,X),A 
      000965 81               [ 4] 1770         RET 
                                   1771 
                                   1772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1773 ;       MAX     ( n n -- n )
                                   1774 ;       Return greater of two top items.
                                   1775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000966                       1776         _HEADER MAX,3,"MAX"
      000966 09 52                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000968     2         LINK=.
      000968 03                       3         .byte 3  
      000969 4D 41 58                 4         .ascii "MAX"
      00096C                          5         MAX:
      00096C 90 93            [ 1] 1777         LDW Y,X    
      00096E 90 FE            [ 2] 1778         LDW Y,(Y) ; n2 
      000970 E3 02            [ 2] 1779         CPW Y,(2,X)   
      000972 2F 02            [ 1] 1780         JRSLT  MAX1
      000974 EF 02            [ 2] 1781         LDW (2,X),Y
      000976 1C 00 02         [ 2] 1782 MAX1:   ADDW X,#2
      000979 81               [ 4] 1783 	RET     
                                   1784 
                                   1785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1786 ;       MIN     ( n n -- n )
                                   1787 ;       Return smaller of top two items.
                                   1788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097A                       1789         _HEADER MIN,3,"MIN"
      00097A 09 68                    1         .word LINK 
                           00097C     2         LINK=.
      00097C 03                       3         .byte 3  
      00097D 4D 49 4E                 4         .ascii "MIN"
      000980                          5         MIN:
      000980 90 93            [ 1] 1790         LDW Y,X    
      000982 90 FE            [ 2] 1791         LDW Y,(Y)  ; n2 
      000984 E3 02            [ 2] 1792         CPW Y,(2,X) 
      000986 2C 02            [ 1] 1793         JRSGT MIN1
      000988 EF 02            [ 2] 1794         LDW (2,X),Y
      00098A 1C 00 02         [ 2] 1795 MIN1:	ADDW X,#2
      00098D 81               [ 4] 1796 	RET     
                                   1797 
                                   1798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1799 ;       WITHIN  ( u ul uh -- t )
                                   1800 ;       Return true if u is within
                                   1801 ;       range of ul and uh. ( ul <= u < uh )
                                   1802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098E                       1803         _HEADER WITHI,6,"WITHIN"
      00098E 09 7C                    1         .word LINK 
                           000990     2         LINK=.
      000990 06                       3         .byte 6  
      000991 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000997                          5         WITHI:
      000997 CD 06 42         [ 4] 1804         CALL     OVER
      00099A CD 08 D3         [ 4] 1805         CALL     SUBB
      00099D CD 05 E3         [ 4] 1806         CALL     TOR
      0009A0 CD 08 D3         [ 4] 1807         CALL     SUBB
      0009A3 CD 05 35         [ 4] 1808         CALL     RFROM
      0009A6 CC 09 11         [ 2] 1809         JP     ULESS
                                   1810 
                                   1811 ;; Divide
                                   1812 
                                   1813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1814 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1815 ;       Unsigned divide of a double by a
                                   1816 ;       single. Return mod and quotient.
                                   1817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1818 ; 2021-02-22
                                   1819 ; changed algorithm for Jeeek one 
                                   1820 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A9                       1821         _HEADER UMMOD,6,"UM/MOD"
      0009A9 09 90                    1         .word LINK 
                           0009AB     2         LINK=.
      0009AB 06                       3         .byte 6  
      0009AC 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B2                          5         UMMOD:
      0009B2 90 93            [ 1] 1822         LDW     Y,X             ; stack pointer to Y
      0009B4 FE               [ 2] 1823         LDW     X,(X)           ; un
      0009B5 BF 26            [ 2] 1824         LDW     YTEMP,X         ; save un
      0009B7 93               [ 1] 1825         LDW     X,Y
      0009B8 5C               [ 1] 1826         INCW    X               ; drop un
      0009B9 5C               [ 1] 1827         INCW    X
      0009BA 89               [ 2] 1828         PUSHW   X               ; save stack pointer
      0009BB FE               [ 2] 1829         LDW     X,(X)           ; X=udh
      0009BC 26 0B            [ 1] 1830         JRNE    MMSM0
      0009BE 1E 01            [ 2] 1831         LDW    X,(1,SP)
      0009C0 EE 02            [ 2] 1832         LDW    X,(2,X)          ; udl 
      0009C2 90 BE 26         [ 2] 1833         LDW     Y,YTEMP         ;divisor 
      0009C5 65               [ 2] 1834         DIVW    X,Y             ; udl/un 
      0009C6 51               [ 1] 1835         EXGW    X,Y 
      0009C7 20 26            [ 2] 1836         JRA     MMSMb 
      0009C9                       1837 MMSM0:    
      0009C9 90 EE 04         [ 2] 1838         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CC B3 26            [ 2] 1839         CPW     X,YTEMP
      0009CE 25 09            [ 1] 1840         JRULT   MMSM1           ; X is still on the R-stack
      0009D0 85               [ 2] 1841         POPW    X               ; restore stack pointer
      0009D1 90 5F            [ 1] 1842         CLRW    Y
      0009D3 EF 02            [ 2] 1843         LDW     (2,X),Y         ; remainder 0
      0009D5 90 5A            [ 2] 1844         DECW    Y
      0009D7 FF               [ 2] 1845         LDW     (X),Y           ; quotient max. 16 bit value
      0009D8 81               [ 4] 1846         RET
      0009D9                       1847 MMSM1:
      0009D9 A6 10            [ 1] 1848         LD      A,#16           ; loop count
      0009DB 90 58            [ 2] 1849         SLLW    Y               ; udl shift udl into udh
      0009DD                       1850 MMSM3:
      0009DD 59               [ 2] 1851         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DE 25 04            [ 1] 1852         JRC     MMSMa           ; if carry out of rotate
      0009E0 B3 26            [ 2] 1853         CPW     X,YTEMP         ; compare udh to un
      0009E2 25 05            [ 1] 1854         JRULT   MMSM4           ; can't subtract
      0009E4                       1855 MMSMa:
      0009E4 72 B0 00 26      [ 2] 1856         SUBW    X,YTEMP         ; can subtract
      0009E8 98               [ 1] 1857         RCF
      0009E9                       1858 MMSM4:
      0009E9 8C               [ 1] 1859         CCF                     ; quotient bit
      0009EA 90 59            [ 2] 1860         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EC 4A               [ 1] 1861         DEC     A               ; repeat
      0009ED 26 EE            [ 1] 1862         JRNE    MMSM3           ; if A == 0
      0009EF                       1863 MMSMb:
      0009EF BF 26            [ 2] 1864         LDW     YTEMP,X         ; done, save remainder
      0009F1 85               [ 2] 1865         POPW    X               ; restore stack pointer
      0009F2 FF               [ 2] 1866         LDW     (X),Y           ; save quotient
      0009F3 90 BE 26         [ 2] 1867         LDW     Y,YTEMP         ; remainder onto stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0009F6 EF 02            [ 2] 1868         LDW     (2,X),Y
      0009F8 81               [ 4] 1869         RET
                                   1870 
                                   1871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1872 ;   U/MOD ( u1 u2 -- ur uq )
                                   1873 ;   unsigned divide u1/u2 
                                   1874 ;   return remainder and quotient 
                                   1875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F9                       1876         _HEADER USLMOD,5,"U/MOD"
      0009F9 09 AB                    1         .word LINK 
                           0009FB     2         LINK=.
      0009FB 05                       3         .byte 5  
      0009FC 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A01                          5         USLMOD:
      000A01 90 93            [ 1] 1877         LDW Y,X 
      000A03 90 FE            [ 2] 1878         LDW Y,(Y)  ; dividend 
      000A05 89               [ 2] 1879         PUSHW X    ; DP >R 
      000A06 EE 02            [ 2] 1880         LDW X,(2,X) ; divisor 
      000A08 65               [ 2] 1881         DIVW X,Y 
      000A09 89               [ 2] 1882         PUSHW X     ; quotient 
      000A0A 1E 03            [ 2] 1883         LDW X,(3,SP) ; DP 
      000A0C EF 02            [ 2] 1884         LDW (2,X),Y ; remainder 
      000A0E 16 01            [ 2] 1885         LDW Y,(1,SP) ; quotient 
      000A10 FF               [ 2] 1886         LDW (X),Y 
      000A11 5B 04            [ 2] 1887         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A13 81               [ 4] 1888         RET 
                                   1889 
                                   1890 
                                   1891 
                                   1892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1893 ;       M/MOD   ( d n -- r q )
                                   1894 ;       Signed floored divide of double by
                                   1895 ;       single. Return mod and quotient.
                                   1896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A14                       1897         _HEADER MSMOD,5,"M/MOD"
      000A14 09 FB                    1         .word LINK 
                           000A16     2         LINK=.
      000A16 05                       3         .byte 5  
      000A17 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1C                          5         MSMOD:
      000A1C CD 06 1A         [ 4] 1898         CALL	DUPP
      000A1F CD 06 51         [ 4] 1899         CALL	ZLESS
      000A22 CD 06 1A         [ 4] 1900         CALL	DUPP
      000A25 CD 05 E3         [ 4] 1901         CALL	TOR
      000A28 CD 04 99         [ 4] 1902         CALL	QBRAN
      000A2B 0A 39                 1903         .word	MMOD1
      000A2D CD 08 87         [ 4] 1904         CALL	NEGAT
      000A30 CD 05 E3         [ 4] 1905         CALL	TOR
      000A33 CD 08 99         [ 4] 1906         CALL	DNEGA
      000A36 CD 05 35         [ 4] 1907         CALL	RFROM
      000A39 CD 05 E3         [ 4] 1908 MMOD1:	CALL	TOR
      000A3C CD 06 1A         [ 4] 1909         CALL	DUPP
      000A3F CD 06 51         [ 4] 1910         CALL	ZLESS
      000A42 CD 04 99         [ 4] 1911         CALL	QBRAN
      000A45 0A 4D                 1912         .word	MMOD2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A47 CD 05 46         [ 4] 1913         CALL	RAT
      000A4A CD 08 3D         [ 4] 1914         CALL	PLUS
      000A4D CD 05 35         [ 4] 1915 MMOD2:	CALL	RFROM
      000A50 CD 09 B2         [ 4] 1916         CALL	UMMOD
      000A53 CD 05 35         [ 4] 1917         CALL	RFROM
      000A56 CD 04 99         [ 4] 1918         CALL	QBRAN
      000A59 0A 64                 1919         .word	MMOD3
      000A5B CD 06 2A         [ 4] 1920         CALL	SWAPP
      000A5E CD 08 87         [ 4] 1921         CALL	NEGAT
      000A61 CC 06 2A         [ 2] 1922         JP	SWAPP
      000A64 81               [ 4] 1923 MMOD3:	RET
                                   1924 
                                   1925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1926 ;       /MOD    ( n1 n2 -- r q )
                                   1927 ;       Signed divide n1/n2. 
                                   1928 ;       Return mod and quotient.
                                   1929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A65                       1930         _HEADER SLMOD,4,"/MOD"
      000A65 0A 16                    1         .word LINK 
                           000A67     2         LINK=.
      000A67 04                       3         .byte 4  
      000A68 2F 4D 4F 44              4         .ascii "/MOD"
      000A6C                          5         SLMOD:
      000A6C F6               [ 1] 1931         LD A,(X)
      000A6D 88               [ 1] 1932         PUSH A   ; n2 sign 
      000A6E E6 02            [ 1] 1933         LD A,(2,X)
      000A70 88               [ 1] 1934         PUSH A    ; n1 sign 
      000A71 CD 08 ED         [ 4] 1935         CALL ABSS 
      000A74 CD 05 E3         [ 4] 1936         CALL TOR  ; 
      000A77 CD 08 ED         [ 4] 1937         CALL ABSS 
      000A7A CD 05 46         [ 4] 1938         CALL RAT   
      000A7D CD 0A 01         [ 4] 1939         CALL USLMOD 
      000A80 7B 03            [ 1] 1940         LD A,(3,SP)
      000A82 1A 04            [ 1] 1941         OR A,(4,SP)
      000A84 2A 30            [ 1] 1942         JRPL SLMOD8 ; both positive nothing to change 
      000A86 7B 03            [ 1] 1943         LD A,(3,SP)
      000A88 18 04            [ 1] 1944         XOR A,(4,SP)
      000A8A 2A 1D            [ 1] 1945         JRPL SLMOD1
                                   1946 ; dividend and divisor are opposite sign          
      000A8C CD 08 87         [ 4] 1947         CALL NEGAT ; negative quotient
      000A8F CD 06 42         [ 4] 1948         CALL OVER 
      000A92 CD 06 63         [ 4] 1949         CALL ZEQUAL 
      000A95                       1950         _TBRAN SLMOD8 
      000A95 CD 04 A7         [ 4]    1     CALL TBRAN 
      000A98 0A B6                    2     .word SLMOD8 
      000A9A CD 0B B0         [ 4] 1951         CALL ONEM   ; add one to quotient 
      000A9D CD 05 46         [ 4] 1952         CALL RAT 
      000AA0 CD 07 DE         [ 4] 1953         CALL ROT 
      000AA3 CD 08 D3         [ 4] 1954         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AA6 CD 06 2A         [ 4] 1955         CALL SWAPP
      000AA9                       1956 SLMOD1:
      000AA9 7B 04            [ 1] 1957         LD A,(4,SP) ; divisor sign 
      000AAB 2A 09            [ 1] 1958         JRPL SLMOD8 
      000AAD CD 05 E3         [ 4] 1959         CALL TOR 
      000AB0 CD 08 87         [ 4] 1960         CALL NEGAT ; if divisor negative negate remainder 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AB3 CD 05 35         [ 4] 1961         CALL RFROM 
      000AB6                       1962 SLMOD8: 
      000AB6 5B 04            [ 2] 1963         ADDW SP,#4 
      000AB8 81               [ 4] 1964         RET 
                                   1965 
                                   1966 
                                   1967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1968 ;       MOD     ( n n -- r )
                                   1969 ;       Signed divide. Return mod only.
                                   1970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1971         _HEADER MODD,3,"MOD"
      000AB9 0A 67                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 03                       3         .byte 3  
      000ABC 4D 4F 44                 4         .ascii "MOD"
      000ABF                          5         MODD:
      000ABF CD 0A 6C         [ 4] 1972 	CALL	SLMOD
      000AC2 CC 06 10         [ 2] 1973 	JP	DROP
                                   1974 
                                   1975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1976 ;       /       ( n n -- q )
                                   1977 ;       Signed divide. Return quotient only.
                                   1978 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC5                       1979         _HEADER SLASH,1,"/"
      000AC5 0A BB                    1         .word LINK 
                           000AC7     2         LINK=.
      000AC7 01                       3         .byte 1  
      000AC8 2F                       4         .ascii "/"
      000AC9                          5         SLASH:
      000AC9 CD 0A 6C         [ 4] 1980         CALL	SLMOD
      000ACC CD 06 2A         [ 4] 1981         CALL	SWAPP
      000ACF CC 06 10         [ 2] 1982         JP	DROP
                                   1983 
                                   1984 ;; Multiply
                                   1985 
                                   1986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1987 ;       UM*     ( u1 u2 -- ud )
                                   1988 ;       Unsigned multiply. Return 
                                   1989 ;       double product.
                                   1990 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD2                       1991         _HEADER UMSTA,3,"UM*"
      000AD2 0A C7                    1         .word LINK 
                           000AD4     2         LINK=.
      000AD4 03                       3         .byte 3  
      000AD5 55 4D 2A                 4         .ascii "UM*"
      000AD8                          5         UMSTA:
                                   1992 ; stack have 4 bytes u1=a:b u2=c:d
                                   1993         ;; bytes offset on data stack 
                           000002  1994         da=2 
                           000003  1995         db=3 
                           000000  1996         dc=0 
                           000001  1997         dd=1 
                                   1998         ;;;;;; local variables ;;;;;;;;;
                                   1999         ;; product bytes offset on return stack 
                           000001  2000         UD1=1  ; ud bits 31..24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                           000002  2001         UD2=2  ; ud bits 23..16
                           000003  2002         UD3=3  ; ud bits 15..8 
                           000004  2003         UD4=4  ; ud bits 7..0 
                                   2004         ;; local variable for product set to zero   
      000AD8 90 5F            [ 1] 2005         clrw y 
      000ADA 90 89            [ 2] 2006         pushw y  ; bits 15..0
      000ADC 90 89            [ 2] 2007         pushw y  ; bits 31..16 
      000ADE E6 03            [ 1] 2008         ld a,(db,x) ; b 
      000AE0 90 97            [ 1] 2009         ld yl,a 
      000AE2 E6 01            [ 1] 2010         ld a,(dd,x)   ; d
      000AE4 90 42            [ 4] 2011         mul y,a    ; b*d  
      000AE6 17 03            [ 2] 2012         ldw (UD3,sp),y ; lowest weight product 
      000AE8 E6 03            [ 1] 2013         ld a,(db,x)
      000AEA 90 97            [ 1] 2014         ld yl,a 
      000AEC E6 00            [ 1] 2015         ld a,(dc,x)
      000AEE 90 42            [ 4] 2016         mul y,a  ; b*c 
                                   2017         ;;; do the partial sum 
      000AF0 72 F9 02         [ 2] 2018         addw y,(UD2,sp)
      000AF3 4F               [ 1] 2019         clr a 
      000AF4 49               [ 1] 2020         rlc a
      000AF5 6B 01            [ 1] 2021         ld (UD1,sp),a 
      000AF7 17 02            [ 2] 2022         ldw (UD2,sp),y 
      000AF9 E6 02            [ 1] 2023         ld a,(da,x)
      000AFB 90 97            [ 1] 2024         ld yl,a 
      000AFD E6 01            [ 1] 2025         ld a,(dd,x)
      000AFF 90 42            [ 4] 2026         mul y,a   ; a*d 
                                   2027         ;; do partial sum 
      000B01 72 F9 02         [ 2] 2028         addw y,(UD2,sp)
      000B04 4F               [ 1] 2029         clr a 
      000B05 19 01            [ 1] 2030         adc a,(UD1,sp)
      000B07 6B 01            [ 1] 2031         ld (UD1,sp),a  
      000B09 17 02            [ 2] 2032         ldw (UD2,sp),y 
      000B0B E6 02            [ 1] 2033         ld a,(da,x)
      000B0D 90 97            [ 1] 2034         ld yl,a 
      000B0F E6 00            [ 1] 2035         ld a,(dc,x)
      000B11 90 42            [ 4] 2036         mul y,a  ;  a*c highest weight product 
                                   2037         ;;; do partial sum 
      000B13 72 F9 01         [ 2] 2038         addw y,(UD1,sp)
      000B16 FF               [ 2] 2039         ldw (x),y  ; udh 
      000B17 16 03            [ 2] 2040         ldw y,(UD3,sp)
      000B19 EF 02            [ 2] 2041         ldw (2,x),y  ; udl  
      000B1B 5B 04            [ 2] 2042         addw sp,#4 ; drop local variable 
      000B1D 81               [ 4] 2043         ret  
                                   2044 
                                   2045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2046 ;       *       ( n n -- n )
                                   2047 ;       Signed multiply. Return 
                                   2048 ;       single product.
                                   2049 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B1E                       2050         _HEADER STAR,1,"*"
      000B1E 0A D4                    1         .word LINK 
                           000B20     2         LINK=.
      000B20 01                       3         .byte 1  
      000B21 2A                       4         .ascii "*"
      000B22                          5         STAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B22 CD 0A D8         [ 4] 2051 	CALL	UMSTA
      000B25 CC 06 10         [ 2] 2052 	JP	DROP
                                   2053 
                                   2054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2055 ;       M*      ( n n -- d )
                                   2056 ;       Signed multiply. Return 
                                   2057 ;       double product.
                                   2058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B28                       2059         _HEADER MSTAR,2,"M*"
      000B28 0B 20                    1         .word LINK 
                           000B2A     2         LINK=.
      000B2A 02                       3         .byte 2  
      000B2B 4D 2A                    4         .ascii "M*"
      000B2D                          5         MSTAR:
      000B2D CD 08 28         [ 4] 2060         CALL	DDUP
      000B30 CD 06 A0         [ 4] 2061         CALL	XORR
      000B33 CD 06 51         [ 4] 2062         CALL	ZLESS
      000B36 CD 05 E3         [ 4] 2063         CALL	TOR
      000B39 CD 08 ED         [ 4] 2064         CALL	ABSS
      000B3C CD 06 2A         [ 4] 2065         CALL	SWAPP
      000B3F CD 08 ED         [ 4] 2066         CALL	ABSS
      000B42 CD 0A D8         [ 4] 2067         CALL	UMSTA
      000B45 CD 05 35         [ 4] 2068         CALL	RFROM
      000B48 CD 04 99         [ 4] 2069         CALL	QBRAN
      000B4B 0B 50                 2070         .word	MSTA1
      000B4D CC 08 99         [ 2] 2071         JP	DNEGA
      000B50 81               [ 4] 2072 MSTA1:	RET
                                   2073 
                                   2074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2075 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2076 ;       Multiply n1 and n2, then divide
                                   2077 ;       by n3. Return mod and quotient.
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B51                       2079         _HEADER SSMOD,5,"*/MOD"
      000B51 0B 2A                    1         .word LINK 
                           000B53     2         LINK=.
      000B53 05                       3         .byte 5  
      000B54 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B59                          5         SSMOD:
      000B59 CD 05 E3         [ 4] 2080         CALL     TOR
      000B5C CD 0B 2D         [ 4] 2081         CALL     MSTAR
      000B5F CD 05 35         [ 4] 2082         CALL     RFROM
      000B62 CC 0A 1C         [ 2] 2083         JP     MSMOD
                                   2084 
                                   2085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2086 ;       */      ( n1 n2 n3 -- q )
                                   2087 ;       Multiply n1 by n2, then divide
                                   2088 ;       by n3. Return quotient only.
                                   2089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B65                       2090         _HEADER STASL,2,"*/"
      000B65 0B 53                    1         .word LINK 
                           000B67     2         LINK=.
      000B67 02                       3         .byte 2  
      000B68 2A 2F                    4         .ascii "*/"
      000B6A                          5         STASL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B6A CD 0B 59         [ 4] 2091         CALL	SSMOD
      000B6D CD 06 2A         [ 4] 2092         CALL	SWAPP
      000B70 CC 06 10         [ 2] 2093         JP	DROP
                                   2094 
                                   2095 ;; Miscellaneous
                                   2096 
                                   2097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2098 ;       2+   ( a -- a )
                                   2099 ;       Add cell size in byte to address.
                                   2100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B73                       2101         _HEADER CELLP,2,"2+"
      000B73 0B 67                    1         .word LINK 
                           000B75     2         LINK=.
      000B75 02                       3         .byte 2  
      000B76 32 2B                    4         .ascii "2+"
      000B78                          5         CELLP:
      000B78 90 93            [ 1] 2102         LDW Y,X
      000B7A 90 FE            [ 2] 2103 	LDW Y,(Y)
      000B7C 72 A9 00 02      [ 2] 2104         ADDW Y,#CELLL 
      000B80 FF               [ 2] 2105         LDW (X),Y
      000B81 81               [ 4] 2106         RET
                                   2107 
                                   2108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2109 ;       2-   ( a -- a )
                                   2110 ;       Subtract 2 from address.
                                   2111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B82                       2112         _HEADER CELLM,2,"2-"
      000B82 0B 75                    1         .word LINK 
                           000B84     2         LINK=.
      000B84 02                       3         .byte 2  
      000B85 32 2D                    4         .ascii "2-"
      000B87                          5         CELLM:
      000B87 90 93            [ 1] 2113         LDW Y,X
      000B89 90 FE            [ 2] 2114 	LDW Y,(Y)
      000B8B 72 A2 00 02      [ 2] 2115         SUBW Y,#CELLL
      000B8F FF               [ 2] 2116         LDW (X),Y
      000B90 81               [ 4] 2117         RET
                                   2118 
                                   2119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2120 ;       2*   ( n -- n )
                                   2121 ;       Multiply tos by 2.
                                   2122 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B91                       2123         _HEADER CELLS,2,"2*"
      000B91 0B 84                    1         .word LINK 
                           000B93     2         LINK=.
      000B93 02                       3         .byte 2  
      000B94 32 2A                    4         .ascii "2*"
      000B96                          5         CELLS:
      000B96 90 93            [ 1] 2124         LDW Y,X
      000B98 90 FE            [ 2] 2125 	LDW Y,(Y)
      000B9A 90 58            [ 2] 2126         SLAW Y
      000B9C FF               [ 2] 2127         LDW (X),Y
      000B9D 81               [ 4] 2128         RET
                                   2129 
                                   2130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2131 ;       1+      ( a -- a )
                                   2132 ;       Add cell size in byte 
                                   2133 ;       to address.
                                   2134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9E                       2135         _HEADER ONEP,2,"1+"
      000B9E 0B 93                    1         .word LINK 
                           000BA0     2         LINK=.
      000BA0 02                       3         .byte 2  
      000BA1 31 2B                    4         .ascii "1+"
      000BA3                          5         ONEP:
      000BA3 90 93            [ 1] 2136         LDW Y,X
      000BA5 90 FE            [ 2] 2137 	LDW Y,(Y)
      000BA7 90 5C            [ 1] 2138         INCW Y
      000BA9 FF               [ 2] 2139         LDW (X),Y
      000BAA 81               [ 4] 2140         RET
                                   2141 
                                   2142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2143 ;       1-      ( a -- a )
                                   2144 ;       Subtract 2 from address.
                                   2145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAB                       2146         _HEADER ONEM,2,"1-"
      000BAB 0B A0                    1         .word LINK 
                           000BAD     2         LINK=.
      000BAD 02                       3         .byte 2  
      000BAE 31 2D                    4         .ascii "1-"
      000BB0                          5         ONEM:
      000BB0 90 93            [ 1] 2147         LDW Y,X
      000BB2 90 FE            [ 2] 2148 	LDW Y,(Y)
      000BB4 90 5A            [ 2] 2149         DECW Y
      000BB6 FF               [ 2] 2150         LDW (X),Y
      000BB7 81               [ 4] 2151         RET
                                   2152 
                                   2153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2154 ;  shift left n times 
                                   2155 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BB8                       2157         _HEADER LSHIFT,6,"LSHIFT"
      000BB8 0B AD                    1         .word LINK 
                           000BBA     2         LINK=.
      000BBA 06                       3         .byte 6  
      000BBB 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BC1                          5         LSHIFT:
      000BC1 E6 01            [ 1] 2158         ld a,(1,x)
      000BC3 1C 00 02         [ 2] 2159         addw x,#CELLL 
      000BC6 90 93            [ 1] 2160         ldw y,x 
      000BC8 90 FE            [ 2] 2161         ldw y,(y)
      000BCA                       2162 LSHIFT1:
      000BCA 4D               [ 1] 2163         tnz a 
      000BCB 27 05            [ 1] 2164         jreq LSHIFT4 
      000BCD 90 58            [ 2] 2165         sllw y 
      000BCF 4A               [ 1] 2166         dec a 
      000BD0 20 F8            [ 2] 2167         jra LSHIFT1 
      000BD2                       2168 LSHIFT4:
      000BD2 FF               [ 2] 2169         ldw (x),y 
      000BD3 81               [ 4] 2170         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2171 
                                   2172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2173 ; shift right n times                 
                                   2174 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD4                       2176         _HEADER RSHIFT,6,"RSHIFT"
      000BD4 0B BA                    1         .word LINK 
                           000BD6     2         LINK=.
      000BD6 06                       3         .byte 6  
      000BD7 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BDD                          5         RSHIFT:
      000BDD E6 01            [ 1] 2177         ld a,(1,x)
      000BDF 1C 00 02         [ 2] 2178         addw x,#CELLL 
      000BE2 90 93            [ 1] 2179         ldw y,x 
      000BE4 90 FE            [ 2] 2180         ldw y,(y)
      000BE6                       2181 RSHIFT1:
      000BE6 4D               [ 1] 2182         tnz a 
      000BE7 27 05            [ 1] 2183         jreq RSHIFT4 
      000BE9 90 54            [ 2] 2184         srlw y 
      000BEB 4A               [ 1] 2185         dec a 
      000BEC 20 F8            [ 2] 2186         jra RSHIFT1 
      000BEE                       2187 RSHIFT4:
      000BEE FF               [ 2] 2188         ldw (x),y 
      000BEF 81               [ 4] 2189         ret 
                                   2190 
                                   2191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2192 ;       2/      ( n -- n )
                                   2193 ;       divide  tos by 2.
                                   2194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF0                       2195         _HEADER TWOSL,2,"2/"
      000BF0 0B D6                    1         .word LINK 
                           000BF2     2         LINK=.
      000BF2 02                       3         .byte 2  
      000BF3 32 2F                    4         .ascii "2/"
      000BF5                          5         TWOSL:
      000BF5 90 93            [ 1] 2196         LDW Y,X
      000BF7 90 FE            [ 2] 2197 	LDW Y,(Y)
      000BF9 90 57            [ 2] 2198         SRAW Y
      000BFB FF               [ 2] 2199         LDW (X),Y
      000BFC 81               [ 4] 2200         RET
                                   2201 
                                   2202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2203 ;       BL      ( -- 32 )
                                   2204 ;       Return 32,  blank character.
                                   2205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFD                       2206         _HEADER BLANK,2,"BL"
      000BFD 0B F2                    1         .word LINK 
                           000BFF     2         LINK=.
      000BFF 02                       3         .byte 2  
      000C00 42 4C                    4         .ascii "BL"
      000C02                          5         BLANK:
      000C02 1D 00 02         [ 2] 2207         SUBW X,#2
      000C05 90 AE 00 20      [ 2] 2208 	LDW Y,#32
      000C09 FF               [ 2] 2209         LDW (X),Y
      000C0A 81               [ 4] 2210         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2211 
                                   2212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2213 ;         0     ( -- 0)
                                   2214 ;         Return 0.
                                   2215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0B                       2216         _HEADER ZERO,1,"0"
      000C0B 0B FF                    1         .word LINK 
                           000C0D     2         LINK=.
      000C0D 01                       3         .byte 1  
      000C0E 30                       4         .ascii "0"
      000C0F                          5         ZERO:
      000C0F 1D 00 02         [ 2] 2217         SUBW X,#2
      000C12 90 5F            [ 1] 2218 	CLRW Y
      000C14 FF               [ 2] 2219         LDW (X),Y
      000C15 81               [ 4] 2220         RET
                                   2221 
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2223 ;         1     ( -- 1)
                                   2224 ;         Return 1.
                                   2225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C16                       2226         _HEADER ONE,1,"1"
      000C16 0C 0D                    1         .word LINK 
                           000C18     2         LINK=.
      000C18 01                       3         .byte 1  
      000C19 31                       4         .ascii "1"
      000C1A                          5         ONE:
      000C1A 1D 00 02         [ 2] 2227         SUBW X,#2
      000C1D 90 AE 00 01      [ 2] 2228 	LDW Y,#1
      000C21 FF               [ 2] 2229         LDW (X),Y
      000C22 81               [ 4] 2230         RET
                                   2231 
                                   2232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2233 ;         -1    ( -- -1)
                                   2234 ;   Return -1
                                   2235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C23                       2236         _HEADER MONE,2,"-1"
      000C23 0C 18                    1         .word LINK 
                           000C25     2         LINK=.
      000C25 02                       3         .byte 2  
      000C26 2D 31                    4         .ascii "-1"
      000C28                          5         MONE:
      000C28 1D 00 02         [ 2] 2237         SUBW X,#2
      000C2B 90 AE FF FF      [ 2] 2238 	LDW Y,#0xFFFF
      000C2F FF               [ 2] 2239         LDW (X),Y
      000C30 81               [ 4] 2240         RET
                                   2241 
                                   2242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2243 ;       >CHAR   ( c -- c )
                                   2244 ;       Filter non-printing characters.
                                   2245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C31                       2246         _HEADER TCHAR,5,">CHAR"
      000C31 0C 25                    1         .word LINK 
                           000C33     2         LINK=.
      000C33 05                       3         .byte 5  
      000C34 3E 43 48 41 52           4         .ascii ">CHAR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C39                          5         TCHAR:
      000C39 E6 01            [ 1] 2247         ld a,(1,x)
      000C3B A1 20            [ 1] 2248         cp a,#32  
      000C3D 2B 05            [ 1] 2249         jrmi 1$ 
      000C3F A1 7F            [ 1] 2250         cp a,#127 
      000C41 2A 01            [ 1] 2251         jrpl 1$ 
      000C43 81               [ 4] 2252         ret 
      000C44 A6 5F            [ 1] 2253 1$:     ld a,#'_ 
      000C46 E7 01            [ 1] 2254         ld (1,x),a 
      000C48 81               [ 4] 2255         ret 
                                   2256 
                                   2257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2258 ;       DEPTH   ( -- n )
                                   2259 ;       Return  depth of  data stack.
                                   2260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C49                       2261         _HEADER DEPTH,5,"DEPTH"
      000C49 0C 33                    1         .word LINK 
                           000C4B     2         LINK=.
      000C4B 05                       3         .byte 5  
      000C4C 44 45 50 54 48           4         .ascii "DEPTH"
      000C51                          5         DEPTH:
      000C51 90 BE 2C         [ 2] 2262         LDW Y,SP0    ;save data stack ptr
      000C54 BF 24            [ 2] 2263 	LDW XTEMP,X
      000C56 72 B2 00 24      [ 2] 2264         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C5A 90 57            [ 2] 2265         SRAW Y    ;Y = #stack items
      000C5C 1D 00 02         [ 2] 2266 	SUBW X,#2
      000C5F FF               [ 2] 2267         LDW (X),Y     ; if neg, underflow
      000C60 81               [ 4] 2268         RET
                                   2269 
                                   2270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2271 ;       PICK    ( ... +n -- ... w )
                                   2272 ;       Copy  nth stack item to tos.
                                   2273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C61                       2274         _HEADER PICK,4,"PICK"
      000C61 0C 4B                    1         .word LINK 
                           000C63     2         LINK=.
      000C63 04                       3         .byte 4  
      000C64 50 49 43 4B              4         .ascii "PICK"
      000C68                          5         PICK:
      000C68 90 93            [ 1] 2275         LDW Y,X   ;D = n1
      000C6A 90 FE            [ 2] 2276         LDW Y,(Y)
                                   2277 ; modified for standard compliance          
                                   2278 ; 0 PICK must be equivalent to DUP 
      000C6C 90 5C            [ 1] 2279         INCW Y 
      000C6E 90 58            [ 2] 2280         SLAW Y
      000C70 BF 24            [ 2] 2281         LDW XTEMP,X
      000C72 72 B9 00 24      [ 2] 2282         ADDW Y,XTEMP
      000C76 90 FE            [ 2] 2283         LDW Y,(Y)
      000C78 FF               [ 2] 2284         LDW (X),Y
      000C79 81               [ 4] 2285         RET
                                   2286 
                                   2287 ;; Memory access
                                   2288 
                                   2289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2290 ;       +!      ( n a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2291 ;       Add n to  contents at 
                                   2292 ;       address a.
                                   2293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C7A                       2294         _HEADER PSTOR,2,"+!"
      000C7A 0C 63                    1         .word LINK 
                           000C7C     2         LINK=.
      000C7C 02                       3         .byte 2  
      000C7D 2B 21                    4         .ascii "+!"
      000C7F                          5         PSTOR:
      000C7F 89               [ 2] 2295         PUSHW X   ; R: DP 
      000C80 90 93            [ 1] 2296         LDW Y,X 
      000C82 FE               [ 2] 2297         LDW X,(X) ; a 
      000C83 90 EE 02         [ 2] 2298         LDW Y,(2,Y)  ; n 
      000C86 90 89            [ 2] 2299         PUSHW Y      ; R: DP n 
      000C88 90 93            [ 1] 2300         LDW Y,X 
      000C8A 90 FE            [ 2] 2301         LDW Y,(Y)
      000C8C 72 F9 01         [ 2] 2302         ADDW Y,(1,SP) ; *a + n 
      000C8F FF               [ 2] 2303         LDW (X),Y 
      000C90 1E 03            [ 2] 2304         LDW X,(3,SP) ; DP
      000C92 1C 00 04         [ 2] 2305         ADDW X,#2*CELLL  ; ( n a -- )  
      000C95 5B 04            [ 2] 2306         ADDW SP,#2*CELLL ; R: DP n -- 
      000C97 81               [ 4] 2307         RET 
                                   2308                 
                                   2309 
                                   2310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2311 ;       2!      ( d a -- )
                                   2312 ;       Store  double integer 
                                   2313 ;       to address a.
                                   2314 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C98                       2315         _HEADER DSTOR,2,"2!"
      000C98 0C 7C                    1         .word LINK 
                           000C9A     2         LINK=.
      000C9A 02                       3         .byte 2  
      000C9B 32 21                    4         .ascii "2!"
      000C9D                          5         DSTOR:
      000C9D 90 93            [ 1] 2316         LDW Y,X 
      000C9F 89               [ 2] 2317         PUSHW X 
      000CA0 FE               [ 2] 2318         LDW X,(X) ; a 
      000CA1 90 EE 02         [ 2] 2319         LDW Y,(2,Y) ; dhi 
      000CA4 FF               [ 2] 2320         LDW (X),Y 
      000CA5 16 01            [ 2] 2321         LDW Y,(1,SP)  
      000CA7 90 EE 04         [ 2] 2322         LDW Y,(4,Y) ; dlo 
      000CAA EF 02            [ 2] 2323         LDW (2,X),Y  
      000CAC 85               [ 2] 2324         POPW X 
      000CAD 1C 00 06         [ 2] 2325         ADDW X,#3*CELLL 
      000CB0 81               [ 4] 2326         RET 
                                   2327 
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2329 ;       2@      ( a -- d )
                                   2330 ;       Fetch double integer 
                                   2331 ;       from address a.
                                   2332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB1                       2333         _HEADER DAT,2,"2@"
      000CB1 0C 9A                    1         .word LINK 
                           000CB3     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB3 02                       3         .byte 2  
      000CB4 32 40                    4         .ascii "2@"
      000CB6                          5         DAT:
      000CB6 90 93            [ 1] 2334         ldw y,x 
      000CB8 1D 00 02         [ 2] 2335         subw x,#CELLL 
      000CBB 90 FE            [ 2] 2336         ldw y,(y) ;address 
      000CBD 90 89            [ 2] 2337         pushw y  
      000CBF 90 FE            [ 2] 2338         ldw y,(y) ; dhi 
      000CC1 FF               [ 2] 2339         ldw (x),y 
      000CC2 90 85            [ 2] 2340         popw y 
      000CC4 90 EE 02         [ 2] 2341         ldw y,(2,y) ; dlo 
      000CC7 EF 02            [ 2] 2342         ldw (2,x),y 
      000CC9 81               [ 4] 2343         ret 
                                   2344 
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2346 ;       COUNT   ( b -- b +n )
                                   2347 ;       Return count byte of a string
                                   2348 ;       and add 1 to byte address.
                                   2349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCA                       2350         _HEADER COUNT,5,"COUNT"
      000CCA 0C B3                    1         .word LINK 
                           000CCC     2         LINK=.
      000CCC 05                       3         .byte 5  
      000CCD 43 4F 55 4E 54           4         .ascii "COUNT"
      000CD2                          5         COUNT:
      000CD2 90 93            [ 1] 2351         ldw y,x 
      000CD4 90 FE            [ 2] 2352         ldw y,(y) ; address 
      000CD6 90 F6            [ 1] 2353         ld a,(y)  ; count 
      000CD8 90 5C            [ 1] 2354         incw y 
      000CDA FF               [ 2] 2355         ldw (x),y 
      000CDB 1D 00 02         [ 2] 2356         subw x,#CELLL 
      000CDE E7 01            [ 1] 2357         ld (1,x),a 
      000CE0 7F               [ 1] 2358         clr (x)
      000CE1 81               [ 4] 2359         ret 
                                   2360 
                                   2361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2362 ;       HERE    ( -- a )
                                   2363 ;       Return  top of  variables
                                   2364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE2                       2365         _HEADER HERE,4,"HERE"
      000CE2 0C CC                    1         .word LINK 
                           000CE4     2         LINK=.
      000CE4 04                       3         .byte 4  
      000CE5 48 45 52 45              4         .ascii "HERE"
      000CE9                          5         HERE:
      000CE9 90 AE 00 18      [ 2] 2366       	ldw y,#UVP 
      000CED 90 FE            [ 2] 2367         ldw y,(y)
      000CEF 1D 00 02         [ 2] 2368         subw x,#CELLL 
      000CF2 FF               [ 2] 2369         ldw (x),y 
      000CF3 81               [ 4] 2370         ret 
                                   2371 
                                   2372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2373 ;       PAD     ( -- a )
                                   2374 ;       Return address of text buffer
                                   2375 ;       above  code dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2376 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF4                       2377         _HEADER PAD,3,"PAD"
      000CF4 0C E4                    1         .word LINK 
                           000CF6     2         LINK=.
      000CF6 03                       3         .byte 3  
      000CF7 50 41 44                 4         .ascii "PAD"
      000CFA                          5         PAD:
      000CFA CD 0C E9         [ 4] 2378         CALL     HERE
      000CFD                       2379         _DOLIT   80
      000CFD CD 04 70         [ 4]    1     CALL DOLIT 
      000D00 00 50                    2     .word 80 
      000D02 CC 08 3D         [ 2] 2380         JP     PLUS
                                   2381 
                                   2382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2383 ;       TIB     ( -- a )
                                   2384 ;       Return address of 
                                   2385 ;       terminal input buffer.
                                   2386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D05                       2387         _HEADER TIB,3,"TIB"
      000D05 0C F6                    1         .word LINK 
                           000D07     2         LINK=.
      000D07 03                       3         .byte 3  
      000D08 54 49 42                 4         .ascii "TIB"
      000D0B                          5         TIB:
      000D0B CD 07 0E         [ 4] 2388         CALL     NTIB
      000D0E CD 0B 78         [ 4] 2389         CALL     CELLP
      000D11 CC 04 E4         [ 2] 2390         JP     AT
                                   2391 
                                   2392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2393 ;       @EXECUTE        ( a -- )
                                   2394 ;       Execute vector stored in 
                                   2395 ;       address a.
                                   2396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D14                       2397         _HEADER ATEXE,8,"@EXECUTE"
      000D14 0D 07                    1         .word LINK 
                           000D16     2         LINK=.
      000D16 08                       3         .byte 8  
      000D17 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D1F                          5         ATEXE:
      000D1F CD 04 E4         [ 4] 2398         CALL     AT
      000D22 CD 07 CD         [ 4] 2399         CALL     QDUP    ;?address or zero
      000D25 CD 04 99         [ 4] 2400         CALL     QBRAN
      000D28 0D 2D                 2401         .word      EXE1
      000D2A CD 04 C5         [ 4] 2402         CALL     EXECU   ;execute if non-zero
      000D2D 81               [ 4] 2403 EXE1:   RET     ;do nothing if zero
                                   2404 
                                   2405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2406 ;       CMOVE   ( b1 b2 u -- )
                                   2407 ;       Copy u bytes from b1 to b2.
                                   2408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2E                       2409         _HEADER CMOVE,5,"CMOVE"
      000D2E 0D 16                    1         .word LINK 
                           000D30     2         LINK=.
      000D30 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D31 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D36                          5         CMOVE:
                                   2410         ;;;;  local variables ;;;;;;;
                           000005  2411         DP = 5
                           000003  2412         YTMP = 3 
                           000001  2413         CNT  = 1 
                                   2414         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D36 89               [ 2] 2415         PUSHW X  ; R: DP  
      000D37 52 02            [ 2] 2416         SUB SP,#2 ; R: DP YTMP 
      000D39 90 93            [ 1] 2417         LDW Y,X 
      000D3B 90 FE            [ 2] 2418         LDW Y,(Y) ; CNT 
      000D3D 90 89            [ 2] 2419         PUSHW Y  ; R: DP YTMP CNT
      000D3F 90 93            [ 1] 2420         LDW Y,X 
      000D41 90 EE 02         [ 2] 2421         LDW Y,(2,Y) ; b2, dest 
      000D44 EE 04            [ 2] 2422         LDW X,(4,X) ; b1, src 
      000D46 17 03            [ 2] 2423         LDW (YTMP,SP),Y 
      000D48 13 03            [ 2] 2424         CPW X,(YTMP,SP) 
      000D4A 22 1A            [ 1] 2425         JRUGT CMOV2  ; src>dest 
                                   2426 ; src<dest copy from top to bottom
      000D4C 72 FB 01         [ 2] 2427         ADDW X,(CNT,SP)
      000D4F 72 F9 01         [ 2] 2428         ADDW Y,(CNT,SP)
      000D52                       2429 CMOV1:  
      000D52 17 03            [ 2] 2430         LDW (YTMP,SP),Y 
      000D54 16 01            [ 2] 2431         LDW Y,(CNT,SP)
      000D56 27 22            [ 1] 2432         JREQ CMOV3 
      000D58 90 5A            [ 2] 2433         DECW Y 
      000D5A 17 01            [ 2] 2434         LDW (CNT,SP),Y 
      000D5C 16 03            [ 2] 2435         LDW Y,(YTMP,SP)
      000D5E 5A               [ 2] 2436         DECW X
      000D5F F6               [ 1] 2437         LD A,(X)
      000D60 90 5A            [ 2] 2438         DECW Y 
      000D62 90 F7            [ 1] 2439         LD (Y),A 
      000D64 20 EC            [ 2] 2440         JRA CMOV1
                                   2441 ; src>dest copy from bottom to top   
      000D66                       2442 CMOV2: 
      000D66 17 03            [ 2] 2443         LDW (YTMP,SP),Y 
      000D68 16 01            [ 2] 2444         LDW Y,(CNT,SP)
      000D6A 27 0E            [ 1] 2445         JREQ CMOV3
      000D6C 90 5A            [ 2] 2446         DECW Y 
      000D6E 17 01            [ 2] 2447         LDW (CNT,SP),Y 
      000D70 16 03            [ 2] 2448         LDW Y,(YTMP,SP)
      000D72 F6               [ 1] 2449         LD A,(X)
      000D73 5C               [ 1] 2450         INCW X 
      000D74 90 F7            [ 1] 2451         LD (Y),A 
      000D76 90 5C            [ 1] 2452         INCW Y 
      000D78 20 EC            [ 2] 2453         JRA CMOV2 
      000D7A                       2454 CMOV3:
      000D7A 1E 05            [ 2] 2455         LDW X,(DP,SP)
      000D7C 1C 00 06         [ 2] 2456         ADDW X,#3*CELLL 
      000D7F 5B 06            [ 2] 2457         ADDW SP,#3*CELLL 
      000D81 81               [ 4] 2458         RET 
                                   2459         
                                   2460 
                                   2461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2462 ;       FILL    ( b u c -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2463 ;       Fill u bytes of character c
                                   2464 ;       to area beginning at b.
                                   2465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D82                       2466         _HEADER FILL,4,"FILL"
      000D82 0D 30                    1         .word LINK 
                           000D84     2         LINK=.
      000D84 04                       3         .byte 4  
      000D85 46 49 4C 4C              4         .ascii "FILL"
      000D89                          5         FILL:
      000D89 E6 01            [ 1] 2467         LD A,(1,X)
      000D8B 90 93            [ 1] 2468         LDW Y,X 
      000D8D 1C 00 06         [ 2] 2469         ADDW X,#3*CELLL 
      000D90 89               [ 2] 2470         PUSHW X ; R: DP 
      000D91 93               [ 1] 2471         LDW X,Y 
      000D92 EE 04            [ 2] 2472         LDW X,(4,X) ; b
      000D94 90 EE 02         [ 2] 2473         LDW Y,(2,Y) ; u
      000D97                       2474 FILL0:
      000D97 27 06            [ 1] 2475         JREQ FILL1
      000D99 F7               [ 1] 2476         LD (X),A 
      000D9A 5C               [ 1] 2477         INCW X 
      000D9B 90 5A            [ 2] 2478         DECW Y 
      000D9D 20 F8            [ 2] 2479         JRA FILL0         
      000D9F 85               [ 2] 2480 FILL1: POPW X 
      000DA0 81               [ 4] 2481         RET         
                                   2482         
                                   2483 
                                   2484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2485 ;       ERASE   ( b u -- )
                                   2486 ;       Erase u bytes beginning at b.
                                   2487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA1                       2488         _HEADER ERASE,5,"ERASE"
      000DA1 0D 84                    1         .word LINK 
                           000DA3     2         LINK=.
      000DA3 05                       3         .byte 5  
      000DA4 45 52 41 53 45           4         .ascii "ERASE"
      000DA9                          5         ERASE:
      000DA9 90 5F            [ 1] 2489         clrw y 
      000DAB 1D 00 02         [ 2] 2490         subw x,#CELLL 
      000DAE FF               [ 2] 2491         ldw (x),y 
      000DAF CC 0D 89         [ 2] 2492         jp FILL 
                                   2493 
                                   2494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2495 ;       PACK0   ( b u a -- a )
                                   2496 ;       Build a counted string with
                                   2497 ;       u characters from b. Null fill.
                                   2498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DB2                       2499         _HEADER PACKS,5,"PACK0"
      000DB2 0D A3                    1         .word LINK 
                           000DB4     2         LINK=.
      000DB4 05                       3         .byte 5  
      000DB5 50 41 43 4B 30           4         .ascii "PACK0"
      000DBA                          5         PACKS:
      000DBA CD 06 1A         [ 4] 2500         CALL     DUPP
      000DBD CD 05 E3         [ 4] 2501         CALL     TOR     ;strings only on cell boundary
      000DC0 CD 08 28         [ 4] 2502         CALL     DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DC3 CD 04 F1         [ 4] 2503         CALL     CSTOR
      000DC6 CD 0B A3         [ 4] 2504         CALL     ONEP ;save count
      000DC9 CD 06 2A         [ 4] 2505         CALL     SWAPP
      000DCC CD 0D 36         [ 4] 2506         CALL     CMOVE
      000DCF CD 05 35         [ 4] 2507         CALL     RFROM
      000DD2 81               [ 4] 2508         RET
                                   2509 
                                   2510 ;; Numeric output, single precision
                                   2511 
                                   2512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2513 ;       DIGIT   ( u -- c )
                                   2514 ;       Convert digit u to a character.
                                   2515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD3                       2516         _HEADER DIGIT,5,"DIGIT"
      000DD3 0D B4                    1         .word LINK 
                           000DD5     2         LINK=.
      000DD5 05                       3         .byte 5  
      000DD6 44 49 47 49 54           4         .ascii "DIGIT"
      000DDB                          5         DIGIT:
      000DDB CD 04 70         [ 4] 2517         CALL	DOLIT
      000DDE 00 09                 2518         .word	9
      000DE0 CD 06 42         [ 4] 2519         CALL	OVER
      000DE3 CD 09 27         [ 4] 2520         CALL	LESS
      000DE6 CD 04 70         [ 4] 2521         CALL	DOLIT
      000DE9 00 07                 2522         .word	7
      000DEB CD 06 77         [ 4] 2523         CALL	ANDD
      000DEE CD 08 3D         [ 4] 2524         CALL	PLUS
      000DF1 CD 04 70         [ 4] 2525         CALL	DOLIT
      000DF4 00 30                 2526         .word	48	;'0'
      000DF6 CC 08 3D         [ 2] 2527         JP	PLUS
                                   2528 
                                   2529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2530 ;       EXTRACT ( n base -- n c )
                                   2531 ;       Extract least significant 
                                   2532 ;       digit from n.
                                   2533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DF9                       2534         _HEADER EXTRC,7,"EXTRACT"
      000DF9 0D D5                    1         .word LINK 
                           000DFB     2         LINK=.
      000DFB 07                       3         .byte 7  
      000DFC 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E03                          5         EXTRC:
      000E03 CD 0C 0F         [ 4] 2535         CALL     ZERO
      000E06 CD 06 2A         [ 4] 2536         CALL     SWAPP
      000E09 CD 09 B2         [ 4] 2537         CALL     UMMOD
      000E0C CD 06 2A         [ 4] 2538         CALL     SWAPP
      000E0F CC 0D DB         [ 2] 2539         JP     DIGIT
                                   2540 
                                   2541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2542 ;       <#      ( -- )
                                   2543 ;       Initiate  numeric 
                                   2544 ;       output process.
                                   2545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E12                       2546         _HEADER BDIGS,2,"#<"
      000E12 0D FB                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           000E14     2         LINK=.
      000E14 02                       3         .byte 2  
      000E15 23 3C                    4         .ascii "#<"
      000E17                          5         BDIGS:
      000E17 CD 0C FA         [ 4] 2547         CALL     PAD
      000E1A CD 07 50         [ 4] 2548         CALL     HLD
      000E1D CC 04 D2         [ 2] 2549         JP     STORE
                                   2550 
                                   2551 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2552 ;       HOLD    ( c -- )
                                   2553 ;       Insert a character 
                                   2554 ;       into output string.
                                   2555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E20                       2556         _HEADER HOLD,4,"HOLD"
      000E20 0E 14                    1         .word LINK 
                           000E22     2         LINK=.
      000E22 04                       3         .byte 4  
      000E23 48 4F 4C 44              4         .ascii "HOLD"
      000E27                          5         HOLD:
      000E27 CD 07 50         [ 4] 2557         CALL     HLD
      000E2A CD 04 E4         [ 4] 2558         CALL     AT
      000E2D CD 0B B0         [ 4] 2559         CALL     ONEM
      000E30 CD 06 1A         [ 4] 2560         CALL     DUPP
      000E33 CD 07 50         [ 4] 2561         CALL     HLD
      000E36 CD 04 D2         [ 4] 2562         CALL     STORE
      000E39 CC 04 F1         [ 2] 2563         JP     CSTOR
                                   2564 
                                   2565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2566 ;       #       ( u -- u )
                                   2567 ;       Extract one digit from u and
                                   2568 ;       append digit to output string.
                                   2569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3C                       2570         _HEADER DIG,1,"#"
      000E3C 0E 22                    1         .word LINK 
                           000E3E     2         LINK=.
      000E3E 01                       3         .byte 1  
      000E3F 23                       4         .ascii "#"
      000E40                          5         DIG:
      000E40 CD 06 E0         [ 4] 2571         CALL     BASE
      000E43 CD 04 E4         [ 4] 2572         CALL     AT
      000E46 CD 0E 03         [ 4] 2573         CALL     EXTRC
      000E49 CC 0E 27         [ 2] 2574         JP     HOLD
                                   2575 
                                   2576 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2577 ;       #S      ( u -- 0 )
                                   2578 ;       Convert u until all digits
                                   2579 ;       are added to output string.
                                   2580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E4C                       2581         _HEADER DIGS,2,"#S"
      000E4C 0E 3E                    1         .word LINK 
                           000E4E     2         LINK=.
      000E4E 02                       3         .byte 2  
      000E4F 23 53                    4         .ascii "#S"
      000E51                          5         DIGS:
      000E51 CD 0E 40         [ 4] 2582 DIGS1:  CALL     DIG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000E54 CD 06 1A         [ 4] 2583         CALL     DUPP
      000E57 CD 04 99         [ 4] 2584         CALL     QBRAN
      000E5A 0E 5E                 2585         .word      DIGS2
      000E5C 20 F3            [ 2] 2586         JRA     DIGS1
      000E5E 81               [ 4] 2587 DIGS2:  RET
                                   2588 
                                   2589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2590 ;       SIGN    ( n -- )
                                   2591 ;       Add a minus sign to
                                   2592 ;       numeric output string.
                                   2593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E5F                       2594         _HEADER SIGN,4,"SIGN"
      000E5F 0E 4E                    1         .word LINK 
                           000E61     2         LINK=.
      000E61 04                       3         .byte 4  
      000E62 53 49 47 4E              4         .ascii "SIGN"
      000E66                          5         SIGN:
      000E66 CD 06 51         [ 4] 2595         CALL     ZLESS
      000E69 CD 04 99         [ 4] 2596         CALL     QBRAN
      000E6C 0E 76                 2597         .word      SIGN1
      000E6E CD 04 70         [ 4] 2598         CALL     DOLIT
      000E71 00 2D                 2599         .word      45	;"-"
      000E73 CC 0E 27         [ 2] 2600         JP     HOLD
      000E76 81               [ 4] 2601 SIGN1:  RET
                                   2602 
                                   2603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2604 ;       #>      ( w -- b u )
                                   2605 ;       Prepare output string.
                                   2606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E77                       2607         _HEADER EDIGS,2,"#>"
      000E77 0E 61                    1         .word LINK 
                           000E79     2         LINK=.
      000E79 02                       3         .byte 2  
      000E7A 23 3E                    4         .ascii "#>"
      000E7C                          5         EDIGS:
      000E7C CD 06 10         [ 4] 2608         CALL     DROP
      000E7F CD 07 50         [ 4] 2609         CALL     HLD
      000E82 CD 04 E4         [ 4] 2610         CALL     AT
      000E85 CD 0C FA         [ 4] 2611         CALL     PAD
      000E88 CD 06 42         [ 4] 2612         CALL     OVER
      000E8B CC 08 D3         [ 2] 2613         JP     SUBB
                                   2614 
                                   2615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2616 ;       str     ( w -- b u )
                                   2617 ;       Convert a signed integer
                                   2618 ;       to a numeric string.
                                   2619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E8E                       2620         _HEADER STR,3,"STR"
      000E8E 0E 79                    1         .word LINK 
                           000E90     2         LINK=.
      000E90 03                       3         .byte 3  
      000E91 53 54 52                 4         .ascii "STR"
      000E94                          5         STR:
      000E94 CD 06 1A         [ 4] 2621         CALL     DUPP
      000E97 CD 05 E3         [ 4] 2622         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E9A CD 08 ED         [ 4] 2623         CALL     ABSS
      000E9D CD 0E 17         [ 4] 2624         CALL     BDIGS
      000EA0 CD 0E 51         [ 4] 2625         CALL     DIGS
      000EA3 CD 05 35         [ 4] 2626         CALL     RFROM
      000EA6 CD 0E 66         [ 4] 2627         CALL     SIGN
      000EA9 CC 0E 7C         [ 2] 2628         JP     EDIGS
                                   2629 
                                   2630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2631 ;       HEX     ( -- )
                                   2632 ;       Use radix 16 as base for
                                   2633 ;       numeric conversions.
                                   2634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAC                       2635         _HEADER HEX,3,"HEX"
      000EAC 0E 90                    1         .word LINK 
                           000EAE     2         LINK=.
      000EAE 03                       3         .byte 3  
      000EAF 48 45 58                 4         .ascii "HEX"
      000EB2                          5         HEX:
      000EB2 CD 04 70         [ 4] 2636         CALL     DOLIT
      000EB5 00 10                 2637         .word      16
      000EB7 CD 06 E0         [ 4] 2638         CALL     BASE
      000EBA CC 04 D2         [ 2] 2639         JP     STORE
                                   2640 
                                   2641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2642 ;       DECIMAL ( -- )
                                   2643 ;       Use radix 10 as base
                                   2644 ;       for numeric conversions.
                                   2645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EBD                       2646         _HEADER DECIM,7,"DECIMAL"
      000EBD 0E AE                    1         .word LINK 
                           000EBF     2         LINK=.
      000EBF 07                       3         .byte 7  
      000EC0 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EC7                          5         DECIM:
      000EC7 CD 04 70         [ 4] 2647         CALL     DOLIT
      000ECA 00 0A                 2648         .word      10
      000ECC CD 06 E0         [ 4] 2649         CALL     BASE
      000ECF CC 04 D2         [ 2] 2650         JP     STORE
                                   2651 
                                   2652 ;; Numeric input, single precision
                                   2653 
                                   2654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2655 ;       DIGIT?  ( c base -- u t )
                                   2656 ;       Convert a character to its numeric
                                   2657 ;       value. A flag indicates success.
                                   2658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED2                       2659         _HEADER DIGTQ,6,"DIGIT?"
      000ED2 0E BF                    1         .word LINK 
                           000ED4     2         LINK=.
      000ED4 06                       3         .byte 6  
      000ED5 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EDB                          5         DIGTQ:
      000EDB CD 05 E3         [ 4] 2660         CALL     TOR
      000EDE CD 04 70         [ 4] 2661         CALL     DOLIT
      000EE1 00 30                 2662         .word     48	; "0"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EE3 CD 08 D3         [ 4] 2663         CALL     SUBB
      000EE6 CD 04 70         [ 4] 2664         CALL     DOLIT
      000EE9 00 09                 2665         .word      9
      000EEB CD 06 42         [ 4] 2666         CALL     OVER
      000EEE CD 09 27         [ 4] 2667         CALL     LESS
      000EF1 CD 04 99         [ 4] 2668         CALL     QBRAN
      000EF4 0F 0C                 2669         .word      DGTQ1
      000EF6 CD 04 70         [ 4] 2670         CALL     DOLIT
      000EF9 00 07                 2671         .word      7
      000EFB CD 08 D3         [ 4] 2672         CALL     SUBB
      000EFE CD 06 1A         [ 4] 2673         CALL     DUPP
      000F01 CD 04 70         [ 4] 2674         CALL     DOLIT
      000F04 00 0A                 2675         .word      10
      000F06 CD 09 27         [ 4] 2676         CALL     LESS
      000F09 CD 06 8B         [ 4] 2677         CALL     ORR
      000F0C CD 06 1A         [ 4] 2678 DGTQ1:  CALL     DUPP
      000F0F CD 05 35         [ 4] 2679         CALL     RFROM
      000F12 CC 09 11         [ 2] 2680         JP     ULESS
                                   2681 
                           000001  2682 .if  WANT_DOUBLE
                           000000  2683 .else 
                                   2684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2685 ;       NUMBER? ( a -- n T | a F )
                                   2686 ;       Convert a number string to
                                   2687 ;       integer. Push a flag on tos.
                                   2688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2689         _HEADER NUMBQ,7,"NUMBER?"
                                   2690         CALL     BASE
                                   2691         CALL     AT
                                   2692         CALL     TOR
                                   2693         CALL     ZERO
                                   2694         CALL     OVER
                                   2695         CALL     COUNT
                                   2696         CALL     OVER
                                   2697         CALL     CAT
                                   2698         CALL     DOLIT
                                   2699         .word     36	; "0x"
                                   2700         CALL     EQUAL
                                   2701         CALL     QBRAN
                                   2702         .word      NUMQ1
                                   2703         CALL     HEX
                                   2704         CALL     SWAPP
                                   2705         CALL     ONEP
                                   2706         CALL     SWAPP
                                   2707         CALL     ONEM
                                   2708 NUMQ1:  CALL     OVER
                                   2709         CALL     CAT
                                   2710         CALL     DOLIT
                                   2711         .word     45	; "-"
                                   2712         CALL     EQUAL
                                   2713         CALL     TOR
                                   2714         CALL     SWAPP
                                   2715         CALL     RAT
                                   2716         CALL     SUBB
                                   2717         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2718         CALL     RAT
                                   2719         CALL     PLUS
                                   2720         CALL     QDUP
                                   2721         CALL     QBRAN
                                   2722         .word      NUMQ6
                                   2723         CALL     ONEM
                                   2724         CALL     TOR
                                   2725 NUMQ2:  CALL     DUPP
                                   2726         CALL     TOR
                                   2727         CALL     CAT
                                   2728         CALL     BASE
                                   2729         CALL     AT
                                   2730         CALL     DIGTQ
                                   2731         CALL     QBRAN
                                   2732         .word      NUMQ4
                                   2733         CALL     SWAPP
                                   2734         CALL     BASE
                                   2735         CALL     AT
                                   2736         CALL     STAR
                                   2737         CALL     PLUS
                                   2738         CALL     RFROM
                                   2739         CALL     ONEP
                                   2740         CALL     DONXT
                                   2741         .word      NUMQ2
                                   2742         CALL     RAT
                                   2743         CALL     SWAPP
                                   2744         CALL     DROP
                                   2745         CALL     QBRAN
                                   2746         .word      NUMQ3
                                   2747         CALL     NEGAT
                                   2748 NUMQ3:  CALL     SWAPP
                                   2749         JRA     NUMQ5
                                   2750 NUMQ4:  CALL     RFROM
                                   2751         CALL     RFROM
                                   2752         CALL     DDROP
                                   2753         CALL     DDROP
                                   2754         CALL     ZERO
                                   2755 NUMQ5:  CALL     DUPP
                                   2756 NUMQ6:  CALL     RFROM
                                   2757         CALL     DDROP
                                   2758         CALL     RFROM
                                   2759         CALL     BASE
                                   2760         JP     STORE
                                   2761 .endif ; WANT_DOUBLE  
                                   2762 
                                   2763 ;; Basic I/O
                                   2764 
                                   2765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2766 ;       KEY     ( -- c )
                                   2767 ;       Wait for and return an
                                   2768 ;       input character.
                                   2769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F15                       2770         _HEADER KEY,3,"KEY"
      000F15 0E D4                    1         .word LINK 
                           000F17     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F17 03                       3         .byte 3  
      000F18 4B 45 59                 4         .ascii "KEY"
      000F1B                          5         KEY:
      000F1B 72 0B 52 30 FB   [ 2] 2771         btjf UART_SR,#UART_SR_RXNE,. 
      000F20 C6 52 31         [ 1] 2772         ld a,UART_DR 
      000F23 1D 00 02         [ 2] 2773         subw x,#CELLL 
      000F26 E7 01            [ 1] 2774         ld (1,x),a 
      000F28 7F               [ 1] 2775         clr (x)
      000F29 81               [ 4] 2776         ret 
                                   2777 
                                   2778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2779 ;       NUF?    ( -- t )
                                   2780 ;       Return false if no input,
                                   2781 ;       else pause and if CR return true.
                                   2782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F2A                       2783         _HEADER NUFQ,4,"NUF?"
      000F2A 0F 17                    1         .word LINK 
                           000F2C     2         LINK=.
      000F2C 04                       3         .byte 4  
      000F2D 4E 55 46 3F              4         .ascii "NUF?"
      000F31                          5         NUFQ:
      000F31 CD 04 19         [ 4] 2784         CALL     QKEY
      000F34 CD 06 1A         [ 4] 2785         CALL     DUPP
      000F37 CD 04 99         [ 4] 2786         CALL     QBRAN
      000F3A 0F 4A                 2787         .word    NUFQ1
      000F3C CD 08 1D         [ 4] 2788         CALL     DDROP
      000F3F CD 0F 1B         [ 4] 2789         CALL     KEY
      000F42 CD 04 70         [ 4] 2790         CALL     DOLIT
      000F45 00 0D                 2791         .word      CRR
      000F47 CC 08 FB         [ 2] 2792         JP     EQUAL
      000F4A 81               [ 4] 2793 NUFQ1:  RET
                                   2794 
                                   2795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2796 ;       SPACE   ( -- )
                                   2797 ;       Send  blank character to
                                   2798 ;       output device.
                                   2799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4B                       2800         _HEADER SPACE,5,"SPACE"
      000F4B 0F 2C                    1         .word LINK 
                           000F4D     2         LINK=.
      000F4D 05                       3         .byte 5  
      000F4E 53 50 41 43 45           4         .ascii "SPACE"
      000F53                          5         SPACE:
      000F53 CD 0C 02         [ 4] 2801         CALL     BLANK
      000F56 CC 04 37         [ 2] 2802         JP     EMIT
                                   2803 
                                   2804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2805 ;       SPACES  ( +n -- )
                                   2806 ;       Send n spaces to output device.
                                   2807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F59                       2808         _HEADER SPACS,6,"SPACES"
      000F59 0F 4D                    1         .word LINK 
                           000F5B     2         LINK=.
      000F5B 06                       3         .byte 6  
      000F5C 53 50 41 43 45 53        4         .ascii "SPACES"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F62                          5         SPACS:
      000F62 CD 0C 0F         [ 4] 2809         CALL     ZERO
      000F65 CD 09 6C         [ 4] 2810         CALL     MAX
      000F68 CD 05 E3         [ 4] 2811         CALL     TOR
      000F6B 20 03            [ 2] 2812         JRA      CHAR2
      000F6D CD 0F 53         [ 4] 2813 CHAR1:  CALL     SPACE
      000F70 CD 04 84         [ 4] 2814 CHAR2:  CALL     DONXT
      000F73 0F 6D                 2815         .word    CHAR1
      000F75 81               [ 4] 2816         RET
                                   2817 
                                   2818 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2819 ;       TYPE    ( b u -- )
                                   2820 ;       Output u characters from b.
                                   2821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F76                       2822         _HEADER TYPES,4,"TYPE"
      000F76 0F 5B                    1         .word LINK 
                           000F78     2         LINK=.
      000F78 04                       3         .byte 4  
      000F79 54 59 50 45              4         .ascii "TYPE"
      000F7D                          5         TYPES:
      000F7D CD 05 E3         [ 4] 2823         CALL     TOR
      000F80 20 06            [ 2] 2824         JRA     TYPE2
      000F82 CD 0C D2         [ 4] 2825 TYPE1:  CALL     COUNT 
      000F85 CD 04 37         [ 4] 2826         CALL     EMIT
      000F88                       2827 TYPE2:  _DONXT  TYPE1
      000F88 CD 04 84         [ 4]    1     CALL DONXT 
      000F8B 0F 82                    2     .word TYPE1 
      000F8D                       2828         _DROP
      000F8D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000F90 81               [ 4] 2829         RET 
                                   2830 
                                   2831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2832 ;       CR      ( -- )
                                   2833 ;       Output a carriage return
                                   2834 ;       and a line feed.
                                   2835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F91                       2836         _HEADER CR,2,"CR"
      000F91 0F 78                    1         .word LINK 
                           000F93     2         LINK=.
      000F93 02                       3         .byte 2  
      000F94 43 52                    4         .ascii "CR"
      000F96                          5         CR:
      000F96                       2837         _DOLIT  CRR 
      000F96 CD 04 70         [ 4]    1     CALL DOLIT 
      000F99 00 0D                    2     .word CRR 
      000F9B CD 04 37         [ 4] 2838         CALL    EMIT
      000F9E                       2839         _DOLIT  LF
      000F9E CD 04 70         [ 4]    1     CALL DOLIT 
      000FA1 00 0A                    2     .word LF 
      000FA3 CC 04 37         [ 2] 2840         JP      EMIT
                                   2841 
                                   2842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2843 ;       do$     ( -- a )
                                   2844 ;       Return  address of a compiled
                                   2845 ;       string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   2846 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2847 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000FA6                       2848 DOSTR:
      000FA6 CD 05 35         [ 4] 2849         CALL     RFROM
      000FA9 CD 05 46         [ 4] 2850         CALL     RAT
      000FAC CD 05 35         [ 4] 2851         CALL     RFROM
      000FAF CD 0C D2         [ 4] 2852         CALL     COUNT
      000FB2 CD 08 3D         [ 4] 2853         CALL     PLUS
      000FB5 CD 05 E3         [ 4] 2854         CALL     TOR
      000FB8 CD 06 2A         [ 4] 2855         CALL     SWAPP
      000FBB CD 05 E3         [ 4] 2856         CALL     TOR
      000FBE 81               [ 4] 2857         RET
                                   2858 
                                   2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2860 ;       $"|     ( -- a )
                                   2861 ;       Run time routine compiled by $".
                                   2862 ;       Return address of a compiled string.
                                   2863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2864 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000FBF                       2865 STRQP:
      000FBF CD 0F A6         [ 4] 2866         CALL     DOSTR
      000FC2 81               [ 4] 2867         RET
                                   2868 
                                   2869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2870 ;       ."|     ( -- )
                                   2871 ;       Run time routine of ." .
                                   2872 ;       Output a compiled string.
                                   2873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2874 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FC3                       2875 DOTQP:
      000FC3 CD 0F A6         [ 4] 2876         CALL     DOSTR
      000FC6 CD 0C D2         [ 4] 2877         CALL     COUNT
      000FC9 CC 0F 7D         [ 2] 2878         JP     TYPES
                                   2879 
                                   2880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2881 ;       .R      ( n +n -- )
                                   2882 ;       Display an integer in a field
                                   2883 ;       of n columns, right justified.
                                   2884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FCC                       2885         _HEADER DOTR,2,".R"
      000FCC 0F 93                    1         .word LINK 
                           000FCE     2         LINK=.
      000FCE 02                       3         .byte 2  
      000FCF 2E 52                    4         .ascii ".R"
      000FD1                          5         DOTR:
      000FD1 CD 05 E3         [ 4] 2886         CALL     TOR
      000FD4 CD 0E 94         [ 4] 2887         CALL     STR
      000FD7 CD 05 35         [ 4] 2888         CALL     RFROM
      000FDA CD 06 42         [ 4] 2889         CALL     OVER
      000FDD CD 08 D3         [ 4] 2890         CALL     SUBB
      000FE0 CD 0F 62         [ 4] 2891         CALL     SPACS
      000FE3 CC 0F 7D         [ 2] 2892         JP     TYPES
                                   2893 
                                   2894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2895 ;       U.R     ( u +n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2896 ;       Display an unsigned integer
                                   2897 ;       in n column, right justified.
                                   2898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FE6                       2899         _HEADER UDOTR,3,"U.R"
      000FE6 0F CE                    1         .word LINK 
                           000FE8     2         LINK=.
      000FE8 03                       3         .byte 3  
      000FE9 55 2E 52                 4         .ascii "U.R"
      000FEC                          5         UDOTR:
      000FEC CD 05 E3         [ 4] 2900         CALL     TOR
      000FEF CD 0E 17         [ 4] 2901         CALL     BDIGS
      000FF2 CD 0E 51         [ 4] 2902         CALL     DIGS
      000FF5 CD 0E 7C         [ 4] 2903         CALL     EDIGS
      000FF8 CD 05 35         [ 4] 2904         CALL     RFROM
      000FFB CD 06 42         [ 4] 2905         CALL     OVER
      000FFE CD 08 D3         [ 4] 2906         CALL     SUBB
      001001 CD 0F 62         [ 4] 2907         CALL     SPACS
      001004 CC 0F 7D         [ 2] 2908         JP     TYPES
                                   2909 
                                   2910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2911 ;       U.      ( u -- )
                                   2912 ;       Display an unsigned integer
                                   2913 ;       in free format.
                                   2914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001007                       2915         _HEADER UDOT,2,"U."
      001007 0F E8                    1         .word LINK 
                           001009     2         LINK=.
      001009 02                       3         .byte 2  
      00100A 55 2E                    4         .ascii "U."
      00100C                          5         UDOT:
      00100C CD 0E 17         [ 4] 2916         CALL     BDIGS
      00100F CD 0E 51         [ 4] 2917         CALL     DIGS
      001012 CD 0E 7C         [ 4] 2918         CALL     EDIGS
      001015 CD 0F 53         [ 4] 2919         CALL     SPACE
      001018 CC 0F 7D         [ 2] 2920         JP     TYPES
                                   2921 
                                   2922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2923 ;   H. ( n -- )
                                   2924 ;   display n in hexadecimal 
                                   2925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00101B                       2926         _HEADER HDOT,2,"H."
      00101B 10 09                    1         .word LINK 
                           00101D     2         LINK=.
      00101D 02                       3         .byte 2  
      00101E 48 2E                    4         .ascii "H."
      001020                          5         HDOT:
      001020 CD 06 E0         [ 4] 2927         CALL BASE 
      001023 CD 04 E4         [ 4] 2928         CALL AT 
      001026 CD 05 E3         [ 4] 2929         CALL TOR 
      001029 CD 0E B2         [ 4] 2930         CALL HEX 
      00102C CD 10 0C         [ 4] 2931         CALL UDOT 
      00102F CD 05 35         [ 4] 2932         CALL RFROM 
      001032 CD 06 E0         [ 4] 2933         CALL BASE 
      001035 CC 04 D2         [ 2] 2934         JP STORE 
                                   2935          
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   2936 
                                   2937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2938 ;       .       ( w -- )
                                   2939 ;       Display an integer in free
                                   2940 ;       format, preceeded by a space.
                                   2941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001038                       2942         _HEADER DOT,1,"."
      001038 10 1D                    1         .word LINK 
                           00103A     2         LINK=.
      00103A 01                       3         .byte 1  
      00103B 2E                       4         .ascii "."
      00103C                          5         DOT:
      00103C CD 06 E0         [ 4] 2943         CALL     BASE
      00103F CD 04 E4         [ 4] 2944         CALL     AT
      001042 CD 04 70         [ 4] 2945         CALL     DOLIT
      001045 00 0A                 2946         .word      10
      001047 CD 06 A0         [ 4] 2947         CALL     XORR    ;?decimal
      00104A CD 04 99         [ 4] 2948         CALL     QBRAN
      00104D 10 51                 2949         .word      DOT1
      00104F 20 BB            [ 2] 2950         JRA     UDOT
      001051 CD 0E 94         [ 4] 2951 DOT1:   CALL     STR
      001054 CD 0F 53         [ 4] 2952         CALL     SPACE
      001057 CC 0F 7D         [ 2] 2953         JP     TYPES
                                   2954 
                                   2955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2956 ;       ?       ( a -- )
                                   2957 ;       Display contents in memory cell.
                                   2958 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00105A                       2959         _HEADER QUEST,1,"?"
      00105A 10 3A                    1         .word LINK 
                           00105C     2         LINK=.
      00105C 01                       3         .byte 1  
      00105D 3F                       4         .ascii "?"
      00105E                          5         QUEST:
      00105E CD 04 E4         [ 4] 2960         CALL     AT
      001061 20 D9            [ 2] 2961         JRA     DOT
                                   2962 
                                   2963 ;; Parsing
                                   2964 
                                   2965 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2966 ;       parse   ( b u c -- b u delta ; <string> )
                                   2967 ;       Scan string delimited by c.
                                   2968 ;       Return found string and its offset.
                                   2969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001063                       2970         _HEADER PARS,5,"PARS$"
      001063 10 5C                    1         .word LINK 
                           001065     2         LINK=.
      001065 05                       3         .byte 5  
      001066 50 41 52 53 24           4         .ascii "PARS$"
      00106B                          5         PARS:
      00106B CD 06 EF         [ 4] 2971         CALL     TEMP
      00106E CD 04 D2         [ 4] 2972         CALL     STORE
      001071 CD 06 42         [ 4] 2973         CALL     OVER
      001074 CD 05 E3         [ 4] 2974         CALL     TOR
      001077 CD 06 1A         [ 4] 2975         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00107A CD 04 99         [ 4] 2976         CALL     QBRAN
      00107D 11 23                 2977         .word    PARS8
      00107F CD 0B B0         [ 4] 2978         CALL     ONEM
      001082 CD 06 EF         [ 4] 2979         CALL     TEMP
      001085 CD 04 E4         [ 4] 2980         CALL     AT
      001088 CD 0C 02         [ 4] 2981         CALL     BLANK
      00108B CD 08 FB         [ 4] 2982         CALL     EQUAL
      00108E CD 04 99         [ 4] 2983         CALL     QBRAN
      001091 10 C4                 2984         .word      PARS3
      001093 CD 05 E3         [ 4] 2985         CALL     TOR
      001096 CD 0C 02         [ 4] 2986 PARS1:  CALL     BLANK
      001099 CD 06 42         [ 4] 2987         CALL     OVER
      00109C CD 05 02         [ 4] 2988         CALL     CAT     ;skip leading blanks ONLY
      00109F CD 08 D3         [ 4] 2989         CALL     SUBB
      0010A2 CD 06 51         [ 4] 2990         CALL     ZLESS
      0010A5 CD 08 76         [ 4] 2991         CALL     INVER
      0010A8 CD 04 99         [ 4] 2992         CALL     QBRAN
      0010AB 10 C1                 2993         .word      PARS2
      0010AD CD 0B A3         [ 4] 2994         CALL     ONEP
      0010B0 CD 04 84         [ 4] 2995         CALL     DONXT
      0010B3 10 96                 2996         .word      PARS1
      0010B5 CD 05 35         [ 4] 2997         CALL     RFROM
      0010B8 CD 06 10         [ 4] 2998         CALL     DROP
      0010BB CD 0C 0F         [ 4] 2999         CALL     ZERO
      0010BE CC 06 1A         [ 2] 3000         JP     DUPP
      0010C1 CD 05 35         [ 4] 3001 PARS2:  CALL     RFROM
      0010C4 CD 06 42         [ 4] 3002 PARS3:  CALL     OVER
      0010C7 CD 06 2A         [ 4] 3003         CALL     SWAPP
      0010CA CD 05 E3         [ 4] 3004         CALL     TOR
      0010CD CD 06 EF         [ 4] 3005 PARS4:  CALL     TEMP
      0010D0 CD 04 E4         [ 4] 3006         CALL     AT
      0010D3 CD 06 42         [ 4] 3007         CALL     OVER
      0010D6 CD 05 02         [ 4] 3008         CALL     CAT
      0010D9 CD 08 D3         [ 4] 3009         CALL     SUBB    ;scan for delimiter
      0010DC CD 06 EF         [ 4] 3010         CALL     TEMP
      0010DF CD 04 E4         [ 4] 3011         CALL     AT
      0010E2 CD 0C 02         [ 4] 3012         CALL     BLANK
      0010E5 CD 08 FB         [ 4] 3013         CALL     EQUAL
      0010E8 CD 04 99         [ 4] 3014         CALL     QBRAN
      0010EB 10 F0                 3015         .word      PARS5
      0010ED CD 06 51         [ 4] 3016         CALL     ZLESS
      0010F0 CD 04 99         [ 4] 3017 PARS5:  CALL     QBRAN
      0010F3 11 05                 3018         .word      PARS6
      0010F5 CD 0B A3         [ 4] 3019         CALL     ONEP
      0010F8 CD 04 84         [ 4] 3020         CALL     DONXT
      0010FB 10 CD                 3021         .word      PARS4
      0010FD CD 06 1A         [ 4] 3022         CALL     DUPP
      001100 CD 05 E3         [ 4] 3023         CALL     TOR
      001103 20 0F            [ 2] 3024         JRA     PARS7
      001105 CD 05 35         [ 4] 3025 PARS6:  CALL     RFROM
      001108 CD 06 10         [ 4] 3026         CALL     DROP
      00110B CD 06 1A         [ 4] 3027         CALL     DUPP
      00110E CD 0B A3         [ 4] 3028         CALL     ONEP
      001111 CD 05 E3         [ 4] 3029         CALL     TOR
      001114 CD 06 42         [ 4] 3030 PARS7:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001117 CD 08 D3         [ 4] 3031         CALL     SUBB
      00111A CD 05 35         [ 4] 3032         CALL     RFROM
      00111D CD 05 35         [ 4] 3033         CALL     RFROM
      001120 CC 08 D3         [ 2] 3034         JP     SUBB
      001123 CD 06 42         [ 4] 3035 PARS8:  CALL     OVER
      001126 CD 05 35         [ 4] 3036         CALL     RFROM
      001129 CC 08 D3         [ 2] 3037         JP     SUBB
                                   3038 
                                   3039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3040 ;       PARSE   ( c -- b u ; <string> )
                                   3041 ;       Scan input stream and return
                                   3042 ;       counted string delimited by c.
                                   3043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00112C                       3044         _HEADER PARSE,5,"PARSE"
      00112C 10 65                    1         .word LINK 
                           00112E     2         LINK=.
      00112E 05                       3         .byte 5  
      00112F 50 41 52 53 45           4         .ascii "PARSE"
      001134                          5         PARSE:
      001134 CD 05 E3         [ 4] 3045         CALL     TOR
      001137 CD 0D 0B         [ 4] 3046         CALL     TIB
      00113A CD 06 FE         [ 4] 3047         CALL     INN
      00113D CD 04 E4         [ 4] 3048         CALL     AT
      001140 CD 08 3D         [ 4] 3049         CALL     PLUS    ;current input buffer pointer
      001143 CD 07 0E         [ 4] 3050         CALL     NTIB
      001146 CD 04 E4         [ 4] 3051         CALL     AT
      001149 CD 06 FE         [ 4] 3052         CALL     INN
      00114C CD 04 E4         [ 4] 3053         CALL     AT
      00114F CD 08 D3         [ 4] 3054         CALL     SUBB    ;remaining count
      001152 CD 05 35         [ 4] 3055         CALL     RFROM
      001155 CD 10 6B         [ 4] 3056         CALL     PARS
      001158 CD 06 FE         [ 4] 3057         CALL     INN
      00115B CC 0C 7F         [ 2] 3058         JP     PSTOR
                                   3059 
                                   3060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3061 ;       .(      ( -- )
                                   3062 ;       Output following string up to next ) .
                                   3063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00115E                       3064         _HEADER DOTPR,IMEDD+2,".("
      00115E 11 2E                    1         .word LINK 
                           001160     2         LINK=.
      001160 82                       3         .byte IMEDD+2  
      001161 2E 28                    4         .ascii ".("
      001163                          5         DOTPR:
      001163 CD 04 70         [ 4] 3065         CALL     DOLIT
      001166 00 29                 3066         .word     41	; ")"
      001168 CD 11 34         [ 4] 3067         CALL     PARSE
      00116B CC 0F 7D         [ 2] 3068         JP     TYPES
                                   3069 
                                   3070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3071 ;       (       ( -- )
                                   3072 ;       Ignore following string up to next ).
                                   3073 ;       A comment.
                                   3074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00116E                       3075         _HEADER PAREN,IMEDD+1,"("
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00116E 11 60                    1         .word LINK 
                           001170     2         LINK=.
      001170 81                       3         .byte IMEDD+1  
      001171 28                       4         .ascii "("
      001172                          5         PAREN:
      001172 CD 04 70         [ 4] 3076         CALL     DOLIT
      001175 00 29                 3077         .word     41	; ")"
      001177 CD 11 34         [ 4] 3078         CALL     PARSE
      00117A CC 08 1D         [ 2] 3079         JP     DDROP
                                   3080 
                                   3081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3082 ;       \       ( -- )
                                   3083 ;       Ignore following text till
                                   3084 ;       end of line.
                                   3085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00117D                       3086         _HEADER BKSLA,IMEDD+1,"\\"
      00117D 11 70                    1         .word LINK 
                           00117F     2         LINK=.
      00117F 81                       3         .byte IMEDD+1  
      001180 5C 5C                    4         .ascii "\\"
      001182                          5         BKSLA:
      001182 90 AE 00 0E      [ 2] 3087         ldw y,#UCTIB ; #TIB  
      001186 90 FE            [ 2] 3088         ldw y,(y)
      001188 90 89            [ 2] 3089         pushw y ; count in TIB 
      00118A 90 AE 00 0C      [ 2] 3090         ldw y,#UINN ; >IN 
      00118E 90 BF 26         [ 2] 3091         ldw YTEMP,y
      001191 90 85            [ 2] 3092         popw y 
      001193 91 CF 26         [ 5] 3093         ldw [YTEMP],y
      001196 81               [ 4] 3094         ret 
                                   3095 
                                   3096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3097 ;       WORD    ( c -- a ; <string> )
                                   3098 ;       Parse a word from input stream
                                   3099 ;       and copy it to code dictionary.
                                   3100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001197                       3101         _HEADER WORDD,4,"WORD"
      001197 11 7F                    1         .word LINK 
                           001199     2         LINK=.
      001199 04                       3         .byte 4  
      00119A 57 4F 52 44              4         .ascii "WORD"
      00119E                          5         WORDD:
      00119E CD 11 34         [ 4] 3102         CALL     PARSE
      0011A1 CD 0C E9         [ 4] 3103         CALL     HERE
      0011A4 CD 0B 78         [ 4] 3104         CALL     CELLP
                           000000  3105 .IF CASE_SENSE 
                                   3106         JP      PACKS 
                           000001  3107 .ELSE                 
      0011A7 CD 0D BA         [ 4] 3108         CALL     PACKS
                                   3109 ; uppercase TOKEN 
      0011AA CD 06 1A         [ 4] 3110         CALL    DUPP 
      0011AD CD 0C D2         [ 4] 3111         CALL    COUNT 
      0011B0 CD 05 E3         [ 4] 3112         CALL    TOR 
      0011B3 CD 04 B5         [ 4] 3113         CALL    BRAN 
      0011B6 11 E4                 3114         .word   UPPER2  
      0011B8                       3115 UPPER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0011B8 CD 06 1A         [ 4] 3116         CALL    DUPP 
      0011BB CD 05 02         [ 4] 3117         CALL    CAT
      0011BE CD 06 1A         [ 4] 3118         CALL    DUPP 
      0011C1 CD 04 70         [ 4] 3119         CALL   DOLIT
      0011C4 00 61                 3120         .word   'a' 
      0011C6 CD 04 70         [ 4] 3121         CALL    DOLIT
      0011C9 00 7B                 3122         .word   'z'+1 
      0011CB CD 09 97         [ 4] 3123         CALL   WITHI 
      0011CE CD 04 99         [ 4] 3124         CALL   QBRAN
      0011D1 11 DB                 3125         .word  UPPER1  
      0011D3 CD 04 70         [ 4] 3126         CALL    DOLIT 
      0011D6 00 DF                 3127         .word   0xDF 
      0011D8 CD 06 77         [ 4] 3128         CALL    ANDD 
      0011DB                       3129 UPPER1:
      0011DB CD 06 42         [ 4] 3130         CALL    OVER 
      0011DE CD 04 F1         [ 4] 3131         CALL    CSTOR          
      0011E1 CD 0B A3         [ 4] 3132         CALL    ONEP 
      0011E4                       3133 UPPER2: 
      0011E4 CD 04 84         [ 4] 3134         CALL    DONXT
      0011E7 11 B8                 3135         .word   UPPER  
      0011E9 CD 06 10         [ 4] 3136         CALL    DROP  
      0011EC 81               [ 4] 3137         RET 
                                   3138 .ENDIF 
                                   3139 
                                   3140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3141 ;       TOKEN   ( -- a ; <string> )
                                   3142 ;       Parse a word from input stream
                                   3143 ;       and copy it to name dictionary.
                                   3144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011ED                       3145         _HEADER TOKEN,5,"TOKEN"
      0011ED 11 99                    1         .word LINK 
                           0011EF     2         LINK=.
      0011EF 05                       3         .byte 5  
      0011F0 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011F5                          5         TOKEN:
      0011F5 CD 0C 02         [ 4] 3146         CALL     BLANK
      0011F8 CC 11 9E         [ 2] 3147         JP     WORDD
                                   3148 
                                   3149 ;; Dictionary search
                                   3150 
                                   3151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3152 ;       NAME>   ( na -- ca )
                                   3153 ;       Return a code address given
                                   3154 ;       a name address.
                                   3155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011FB                       3156         _HEADER NAMET,5,"NAME>"
      0011FB 11 EF                    1         .word LINK 
                           0011FD     2         LINK=.
      0011FD 05                       3         .byte 5  
      0011FE 4E 41 4D 45 3E           4         .ascii "NAME>"
      001203                          5         NAMET:
      001203 CD 0C D2         [ 4] 3157         CALL     COUNT
      001206 CD 04 70         [ 4] 3158         CALL     DOLIT
      001209 00 1F                 3159         .word      31
      00120B CD 06 77         [ 4] 3160         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00120E CC 08 3D         [ 2] 3161         JP     PLUS
                                   3162 
                                   3163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3164 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3165 ;       Compare u cells in two
                                   3166 ;       strings. Return 0 if identical.
                                   3167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001211                       3168         _HEADER SAMEQ,5,"SAME?"
      001211 11 FD                    1         .word LINK 
                           001213     2         LINK=.
      001213 05                       3         .byte 5  
      001214 53 41 4D 45 3F           4         .ascii "SAME?"
      001219                          5         SAMEQ:
      001219 CD 0B B0         [ 4] 3169         CALL     ONEM
      00121C CD 05 E3         [ 4] 3170         CALL     TOR
      00121F 20 29            [ 2] 3171         JRA     SAME2
      001221 CD 06 42         [ 4] 3172 SAME1:  CALL     OVER
      001224 CD 05 46         [ 4] 3173         CALL     RAT
      001227 CD 08 3D         [ 4] 3174         CALL     PLUS
      00122A CD 05 02         [ 4] 3175         CALL     CAT
      00122D CD 06 42         [ 4] 3176         CALL     OVER
      001230 CD 05 46         [ 4] 3177         CALL     RAT
      001233 CD 08 3D         [ 4] 3178         CALL     PLUS
      001236 CD 05 02         [ 4] 3179         CALL     CAT
      001239 CD 08 D3         [ 4] 3180         CALL     SUBB
      00123C CD 07 CD         [ 4] 3181         CALL     QDUP
      00123F CD 04 99         [ 4] 3182         CALL     QBRAN
      001242 12 4A                 3183         .word      SAME2
      001244 CD 05 35         [ 4] 3184         CALL     RFROM
      001247 CC 06 10         [ 2] 3185         JP     DROP
      00124A CD 04 84         [ 4] 3186 SAME2:  CALL     DONXT
      00124D 12 21                 3187         .word      SAME1
      00124F CC 0C 0F         [ 2] 3188         JP     ZERO
                                   3189 
                                   3190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3191 ;       find    ( a va -- ca na | a F )
                                   3192 ;       Search vocabulary for string.
                                   3193 ;       Return ca and na if succeeded.
                                   3194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001252                       3195         _HEADER FIND,4,"FIND"
      001252 12 13                    1         .word LINK 
                           001254     2         LINK=.
      001254 04                       3         .byte 4  
      001255 46 49 4E 44              4         .ascii "FIND"
      001259                          5         FIND:
      001259 CD 06 2A         [ 4] 3196         CALL     SWAPP
      00125C CD 06 1A         [ 4] 3197         CALL     DUPP
      00125F CD 05 02         [ 4] 3198         CALL     CAT
      001262 CD 06 EF         [ 4] 3199         CALL     TEMP
      001265 CD 04 D2         [ 4] 3200         CALL     STORE
      001268 CD 06 1A         [ 4] 3201         CALL     DUPP
      00126B CD 04 E4         [ 4] 3202         CALL     AT
      00126E CD 05 E3         [ 4] 3203         CALL     TOR
      001271 CD 0B 78         [ 4] 3204         CALL     CELLP
      001274 CD 06 2A         [ 4] 3205         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001277 CD 04 E4         [ 4] 3206 FIND1:  CALL     AT
      00127A CD 06 1A         [ 4] 3207         CALL     DUPP
      00127D CD 04 99         [ 4] 3208         CALL     QBRAN
      001280 12 B6                 3209         .word      FIND6
      001282 CD 06 1A         [ 4] 3210         CALL     DUPP
      001285 CD 04 E4         [ 4] 3211         CALL     AT
      001288 CD 04 70         [ 4] 3212         CALL     DOLIT
      00128B 1F 7F                 3213         .word      MASKK
      00128D CD 06 77         [ 4] 3214         CALL     ANDD
      001290 CD 05 46         [ 4] 3215         CALL     RAT
      001293 CD 06 A0         [ 4] 3216         CALL     XORR
      001296 CD 04 99         [ 4] 3217         CALL     QBRAN
      001299 12 A5                 3218         .word      FIND2
      00129B CD 0B 78         [ 4] 3219         CALL     CELLP
      00129E CD 04 70         [ 4] 3220         CALL     DOLIT
      0012A1 FF FF                 3221         .word     0xFFFF
      0012A3 20 0C            [ 2] 3222         JRA     FIND3
      0012A5 CD 0B 78         [ 4] 3223 FIND2:  CALL     CELLP
      0012A8 CD 06 EF         [ 4] 3224         CALL     TEMP
      0012AB CD 04 E4         [ 4] 3225         CALL     AT
      0012AE CD 12 19         [ 4] 3226         CALL     SAMEQ
      0012B1 CD 04 B5         [ 4] 3227 FIND3:  CALL     BRAN
      0012B4 12 C5                 3228         .word      FIND4
      0012B6 CD 05 35         [ 4] 3229 FIND6:  CALL     RFROM
      0012B9 CD 06 10         [ 4] 3230         CALL     DROP
      0012BC CD 06 2A         [ 4] 3231         CALL     SWAPP
      0012BF CD 0B 87         [ 4] 3232         CALL     CELLM
      0012C2 CC 06 2A         [ 2] 3233         JP     SWAPP
      0012C5 CD 04 99         [ 4] 3234 FIND4:  CALL     QBRAN
      0012C8 12 D2                 3235         .word      FIND5
      0012CA CD 0B 87         [ 4] 3236         CALL     CELLM
      0012CD CD 0B 87         [ 4] 3237         CALL     CELLM
      0012D0 20 A5            [ 2] 3238         JRA     FIND1
      0012D2 CD 05 35         [ 4] 3239 FIND5:  CALL     RFROM
      0012D5 CD 06 10         [ 4] 3240         CALL     DROP
      0012D8 CD 06 2A         [ 4] 3241         CALL     SWAPP
      0012DB CD 06 10         [ 4] 3242         CALL     DROP
      0012DE CD 0B 87         [ 4] 3243         CALL     CELLM
      0012E1 CD 06 1A         [ 4] 3244         CALL     DUPP
      0012E4 CD 12 03         [ 4] 3245         CALL     NAMET
      0012E7 CC 06 2A         [ 2] 3246         JP     SWAPP
                                   3247 
                                   3248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3249 ;       NAME?   ( a -- ca na | a F )
                                   3250 ;       Search vocabularies for a string.
                                   3251 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012EA                       3252         _HEADER NAMEQ,5,"NAME?"
      0012EA 12 54                    1         .word LINK 
                           0012EC     2         LINK=.
      0012EC 05                       3         .byte 5  
      0012ED 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012F2                          5         NAMEQ:
      0012F2 CD 07 63         [ 4] 3253         CALL   CNTXT
      0012F5 CC 12 59         [ 2] 3254         JP     FIND
                                   3255 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3256 ;; Terminal response
                                   3257 
                                   3258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3259 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3260 ;       Backup cursor by one character.
                                   3261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012F8                       3262         _HEADER BKSP,2,"^H"
      0012F8 12 EC                    1         .word LINK 
                           0012FA     2         LINK=.
      0012FA 02                       3         .byte 2  
      0012FB 5E 48                    4         .ascii "^H"
      0012FD                          5         BKSP:
      0012FD CD 05 E3         [ 4] 3263         CALL     TOR
      001300 CD 06 42         [ 4] 3264         CALL     OVER
      001303 CD 05 35         [ 4] 3265         CALL     RFROM
      001306 CD 06 2A         [ 4] 3266         CALL     SWAPP
      001309 CD 06 42         [ 4] 3267         CALL     OVER
      00130C CD 06 A0         [ 4] 3268         CALL     XORR
      00130F CD 04 99         [ 4] 3269         CALL     QBRAN
      001312 13 2D                 3270         .word      BACK1
      001314 CD 04 70         [ 4] 3271         CALL     DOLIT
      001317 00 08                 3272         .word      BKSPP
      001319 CD 04 37         [ 4] 3273         CALL     EMIT
      00131C CD 0B B0         [ 4] 3274         CALL     ONEM
      00131F CD 0C 02         [ 4] 3275         CALL     BLANK
      001322 CD 04 37         [ 4] 3276         CALL     EMIT
      001325 CD 04 70         [ 4] 3277         CALL     DOLIT
      001328 00 08                 3278         .word      BKSPP
      00132A CC 04 37         [ 2] 3279         JP     EMIT
      00132D 81               [ 4] 3280 BACK1:  RET
                                   3281 
                                   3282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3283 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3284 ;       Accept and echo key stroke
                                   3285 ;       and bump cursor.
                                   3286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00132E                       3287         _HEADER TAP,3,"TAP"
      00132E 12 FA                    1         .word LINK 
                           001330     2         LINK=.
      001330 03                       3         .byte 3  
      001331 54 41 50                 4         .ascii "TAP"
      001334                          5         TAP:
      001334 CD 06 1A         [ 4] 3288         CALL     DUPP
      001337 CD 04 37         [ 4] 3289         CALL     EMIT
      00133A CD 06 42         [ 4] 3290         CALL     OVER
      00133D CD 04 F1         [ 4] 3291         CALL     CSTOR
      001340 CC 0B A3         [ 2] 3292         JP     ONEP
                                   3293 
                                   3294 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3295 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3296 ;       Process a key stroke,
                                   3297 ;       CR,LF or backspace.
                                   3298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001343                       3299         _HEADER KTAP,4,"KTAP"
      001343 13 30                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                           001345     2         LINK=.
      001345 04                       3         .byte 4  
      001346 4B 54 41 50              4         .ascii "KTAP"
      00134A                          5         KTAP:
      00134A CD 06 1A         [ 4] 3300         CALL     DUPP
      00134D CD 04 70         [ 4] 3301         CALL     DOLIT
                           000001  3302 .if EOL_CR
      001350 00 0D                 3303         .word   CRR
                           000000  3304 .else ; EOL_LF 
                                   3305         .word   LF
                                   3306 .endif 
      001352 CD 06 A0         [ 4] 3307         CALL     XORR
      001355 CD 04 99         [ 4] 3308         CALL     QBRAN
      001358 13 70                 3309         .word      KTAP2
      00135A CD 04 70         [ 4] 3310         CALL     DOLIT
      00135D 00 08                 3311         .word      BKSPP
      00135F CD 06 A0         [ 4] 3312         CALL     XORR
      001362 CD 04 99         [ 4] 3313         CALL     QBRAN
      001365 13 6D                 3314         .word      KTAP1
      001367 CD 0C 02         [ 4] 3315         CALL     BLANK
      00136A CC 13 34         [ 2] 3316         JP     TAP
      00136D CC 12 FD         [ 2] 3317 KTAP1:  JP     BKSP
      001370 CD 06 10         [ 4] 3318 KTAP2:  CALL     DROP
      001373 CD 06 2A         [ 4] 3319         CALL     SWAPP
      001376 CD 06 10         [ 4] 3320         CALL     DROP
      001379 CC 06 1A         [ 2] 3321         JP     DUPP
                                   3322 
                                   3323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3324 ;       accept  ( b u -- b u )
                                   3325 ;       Accept characters to input
                                   3326 ;       buffer. Return with actual count.
                                   3327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00137C                       3328         _HEADER ACCEP,6,"ACCEPT"
      00137C 13 45                    1         .word LINK 
                           00137E     2         LINK=.
      00137E 06                       3         .byte 6  
      00137F 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001385                          5         ACCEP:
      001385 CD 06 42         [ 4] 3329         CALL     OVER
      001388 CD 08 3D         [ 4] 3330         CALL     PLUS
      00138B CD 06 42         [ 4] 3331         CALL     OVER
      00138E CD 08 28         [ 4] 3332 ACCP1:  CALL     DDUP
      001391 CD 06 A0         [ 4] 3333         CALL     XORR
      001394 CD 04 99         [ 4] 3334         CALL     QBRAN
      001397 13 B9                 3335         .word      ACCP4
      001399 CD 0F 1B         [ 4] 3336         CALL     KEY
      00139C CD 06 1A         [ 4] 3337         CALL     DUPP
      00139F CD 0C 02         [ 4] 3338         CALL     BLANK
      0013A2 CD 04 70         [ 4] 3339         CALL     DOLIT
      0013A5 00 7F                 3340         .word      127
      0013A7 CD 09 97         [ 4] 3341         CALL     WITHI
      0013AA CD 04 99         [ 4] 3342         CALL     QBRAN
      0013AD 13 B4                 3343         .word      ACCP2
      0013AF CD 13 34         [ 4] 3344         CALL     TAP
      0013B2 20 03            [ 2] 3345         JRA     ACCP3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0013B4 CD 13 4A         [ 4] 3346 ACCP2:  CALL     KTAP
      0013B7 20 D5            [ 2] 3347 ACCP3:  JRA     ACCP1
      0013B9 CD 06 10         [ 4] 3348 ACCP4:  CALL     DROP
      0013BC CD 06 42         [ 4] 3349         CALL     OVER
      0013BF CC 08 D3         [ 2] 3350         JP     SUBB
                                   3351 
                                   3352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3353 ;       QUERY   ( -- )
                                   3354 ;       Accept input stream to
                                   3355 ;       terminal input buffer.
                                   3356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013C2                       3357         _HEADER QUERY,5,"QUERY"
      0013C2 13 7E                    1         .word LINK 
                           0013C4     2         LINK=.
      0013C4 05                       3         .byte 5  
      0013C5 51 55 45 52 59           4         .ascii "QUERY"
      0013CA                          5         QUERY:
      0013CA CD 0D 0B         [ 4] 3358         CALL     TIB
      0013CD CD 04 70         [ 4] 3359         CALL     DOLIT
      0013D0 00 50                 3360         .word      80
      0013D2 CD 13 85         [ 4] 3361         CALL     ACCEP
      0013D5 CD 07 0E         [ 4] 3362         CALL     NTIB
      0013D8 CD 04 D2         [ 4] 3363         CALL     STORE
      0013DB CD 06 10         [ 4] 3364         CALL     DROP
      0013DE CD 0C 0F         [ 4] 3365         CALL     ZERO
      0013E1 CD 06 FE         [ 4] 3366         CALL     INN
      0013E4 CC 04 D2         [ 2] 3367         JP     STORE
                                   3368 
                                   3369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3370 ;       ABORT   ( -- )
                                   3371 ;       Reset data stack and
                                   3372 ;       jump to QUIT.
                                   3373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013E7                       3374         _HEADER ABORT,5,"ABORT"
      0013E7 13 C4                    1         .word LINK 
                           0013E9     2         LINK=.
      0013E9 05                       3         .byte 5  
      0013EA 41 42 4F 52 54           4         .ascii "ABORT"
      0013EF                          5         ABORT:
      0013EF CD 14 E3         [ 4] 3375         CALL     PRESE
      0013F2 CC 15 00         [ 2] 3376         JP     QUIT
                                   3377 
                                   3378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3379 ;       abort"  ( f -- )
                                   3380 ;       Run time routine of ABORT".
                                   3381 ;       Abort with a message.
                                   3382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013F5                       3383         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013F5 13 E9                    1         .word LINK 
                           0013F7     2         LINK=.
      0013F7 46                       3         .byte COMPO+6  
      0013F8 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013FE                          5         ABORQ:
      0013FE CD 04 99         [ 4] 3384         CALL     QBRAN
      001401 14 1D                 3385         .word      ABOR2   ;text flag
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001403 CD 0F A6         [ 4] 3386         CALL     DOSTR
      001406 CD 0F 53         [ 4] 3387 ABOR1:  CALL     SPACE
      001409 CD 0C D2         [ 4] 3388         CALL     COUNT
      00140C CD 0F 7D         [ 4] 3389         CALL     TYPES
      00140F CD 04 70         [ 4] 3390         CALL     DOLIT
      001412 00 3F                 3391         .word     63 ; "?"
      001414 CD 04 37         [ 4] 3392         CALL     EMIT
      001417 CD 0F 96         [ 4] 3393         CALL     CR
      00141A CC 13 EF         [ 2] 3394         JP     ABORT   ;pass error string
      00141D CD 0F A6         [ 4] 3395 ABOR2:  CALL     DOSTR
      001420 CC 06 10         [ 2] 3396         JP     DROP
                                   3397 
                                   3398 ;; The text interpreter
                                   3399 
                                   3400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3401 ;       $INTERPRET      ( a -- )
                                   3402 ;       Interpret a word. If failed,
                                   3403 ;       try to convert it to an integer.
                                   3404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001423                       3405         _HEADER INTER,10,"$INTERPRET"
      001423 13 F7                    1         .word LINK 
                           001425     2         LINK=.
      001425 0A                       3         .byte 10  
      001426 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001430                          5         INTER:
      001430 CD 12 F2         [ 4] 3406         CALL     NAMEQ
      001433 CD 07 CD         [ 4] 3407         CALL     QDUP    ;?defined
      001436 CD 04 99         [ 4] 3408         CALL     QBRAN
      001439 14 5A                 3409         .word      INTE1
      00143B CD 04 E4         [ 4] 3410         CALL     AT
      00143E CD 04 70         [ 4] 3411         CALL     DOLIT
      001441 40 00                 3412 	.word       0x4000	; COMPO*256
      001443 CD 06 77         [ 4] 3413         CALL     ANDD    ;?compile only lexicon bits
      001446 CD 13 FE         [ 4] 3414         CALL     ABORQ
      001449 0D                    3415         .byte      13
      00144A 20 63 6F 6D 70 69 6C  3416         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001457 CC 04 C5         [ 2] 3417         JP      EXECU
      00145A                       3418 INTE1:  
      00145A CD 25 E8         [ 4] 3419         CALL     NUMBQ   ;convert a number
      00145D CD 04 99         [ 4] 3420         CALL     QBRAN
      001460 14 06                 3421         .word    ABOR1
      001462 81               [ 4] 3422         RET
                                   3423 
                                   3424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3425 ;       [       ( -- )
                                   3426 ;       Start  text interpreter.
                                   3427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001463                       3428         _HEADER LBRAC,IMEDD+1,"["
      001463 14 25                    1         .word LINK 
                           001465     2         LINK=.
      001465 81                       3         .byte IMEDD+1  
      001466 5B                       4         .ascii "["
      001467                          5         LBRAC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001467 CD 04 70         [ 4] 3429         CALL   DOLIT
      00146A 14 30                 3430         .word  INTER
      00146C CD 07 41         [ 4] 3431         CALL   TEVAL
      00146F CC 04 D2         [ 2] 3432         JP     STORE
                                   3433 
                                   3434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3435 ;       .OK     ( -- )
                                   3436 ;       Display 'ok' while interpreting.
                                   3437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001472                       3438         _HEADER DOTOK,3,".OK"
      001472 14 65                    1         .word LINK 
                           001474     2         LINK=.
      001474 03                       3         .byte 3  
      001475 2E 4F 4B                 4         .ascii ".OK"
      001478                          5         DOTOK:
      001478 CD 04 70         [ 4] 3439         CALL     DOLIT
      00147B 14 30                 3440         .word      INTER
      00147D CD 07 41         [ 4] 3441         CALL     TEVAL
      001480 CD 04 E4         [ 4] 3442         CALL     AT
      001483 CD 08 FB         [ 4] 3443         CALL     EQUAL
      001486 CD 04 99         [ 4] 3444         CALL     QBRAN
      001489 14 92                 3445         .word      DOTO1
      00148B CD 0F C3         [ 4] 3446         CALL     DOTQP
      00148E 03                    3447         .byte      3
      00148F 20 6F 6B              3448         .ascii     " ok"
      001492 CC 0F 96         [ 2] 3449 DOTO1:  JP     CR
                                   3450 
                                   3451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3452 ;       ?STACK  ( -- )
                                   3453 ;       Abort if stack underflows.
                                   3454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001495                       3455         _HEADER QSTAC,6,"?STACK"
      001495 14 74                    1         .word LINK 
                           001497     2         LINK=.
      001497 06                       3         .byte 6  
      001498 3F 53 54 41 43 4B        4         .ascii "?STACK"
      00149E                          5         QSTAC:
      00149E CD 0C 51         [ 4] 3456         CALL     DEPTH
      0014A1 CD 06 51         [ 4] 3457         CALL     ZLESS   ;check only for underflow
      0014A4 CD 13 FE         [ 4] 3458         CALL     ABORQ
      0014A7 0B                    3459         .byte      11
      0014A8 20 75 6E 64 65 72 66  3460         .ascii     " underflow "
             6C 6F 77 20
      0014B3 81               [ 4] 3461         RET
                                   3462 
                                   3463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3464 ;       EVAL    ( -- )
                                   3465 ;       Interpret  input stream.
                                   3466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B4                       3467         _HEADER EVAL,4,"EVAL"
      0014B4 14 97                    1         .word LINK 
                           0014B6     2         LINK=.
      0014B6 04                       3         .byte 4  
      0014B7 45 56 41 4C              4         .ascii "EVAL"
      0014BB                          5         EVAL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014BB CD 11 F5         [ 4] 3468 EVAL1:  CALL     TOKEN
      0014BE CD 06 1A         [ 4] 3469         CALL     DUPP
      0014C1 CD 05 02         [ 4] 3470         CALL     CAT     ;?input stream empty
      0014C4 CD 04 99         [ 4] 3471         CALL     QBRAN
      0014C7 14 D4                 3472         .word    EVAL2
      0014C9 CD 07 41         [ 4] 3473         CALL     TEVAL
      0014CC CD 0D 1F         [ 4] 3474         CALL     ATEXE
      0014CF CD 14 9E         [ 4] 3475         CALL     QSTAC   ;evaluate input, check stack
      0014D2 20 E7            [ 2] 3476         JRA     EVAL1 
      0014D4 CD 06 10         [ 4] 3477 EVAL2:  CALL     DROP
      0014D7 CC 14 78         [ 2] 3478         JP       DOTOK
                                   3479 
                                   3480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3481 ;       PRESET  ( -- )
                                   3482 ;       Reset data stack pointer and
                                   3483 ;       terminal input buffer.
                                   3484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014DA                       3485         _HEADER PRESE,6,"PRESET"
      0014DA 14 B6                    1         .word LINK 
                           0014DC     2         LINK=.
      0014DC 06                       3         .byte 6  
      0014DD 50 52 45 53 45 54        4         .ascii "PRESET"
      0014E3                          5         PRESE:
      0014E3 CD 04 70         [ 4] 3486         CALL     DOLIT
      0014E6 16 80                 3487         .word      SPP
      0014E8 CD 06 07         [ 4] 3488         CALL     SPSTO
      0014EB CD 04 70         [ 4] 3489         CALL     DOLIT
      0014EE 17 00                 3490         .word      TIBB
      0014F0 CD 07 0E         [ 4] 3491         CALL     NTIB
      0014F3 CD 0B 78         [ 4] 3492         CALL     CELLP
      0014F6 CC 04 D2         [ 2] 3493         JP     STORE
                                   3494 
                                   3495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3496 ;       QUIT    ( -- )
                                   3497 ;       Reset return stack pointer
                                   3498 ;       and start text interpreter.
                                   3499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F9                       3500         _HEADER QUIT,4,"QUIT"
      0014F9 14 DC                    1         .word LINK 
                           0014FB     2         LINK=.
      0014FB 04                       3         .byte 4  
      0014FC 51 55 49 54              4         .ascii "QUIT"
      001500                          5         QUIT:
      001500 CD 04 70         [ 4] 3501         CALL     DOLIT
      001503 17 FF                 3502         .word      RPP
      001505 CD 05 1F         [ 4] 3503         CALL     RPSTO   ;reset return stack pointer
      001508 CD 14 67         [ 4] 3504 QUIT1:  CALL     LBRAC   ;start interpretation
      00150B CD 13 CA         [ 4] 3505 QUIT2:  CALL     QUERY   ;get input
      00150E CD 14 BB         [ 4] 3506         CALL     EVAL
      001511 20 F8            [ 2] 3507         JRA     QUIT2   ;continue till error
                                   3508 
                                   3509 ;; The compiler
                                   3510 
                                   3511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3512 ;       '       ( -- ca )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   3513 ;       Search vocabularies for
                                   3514 ;       next word in input stream.
                                   3515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001513                       3516         _HEADER TICK,1,"'"
      001513 14 FB                    1         .word LINK 
                           001515     2         LINK=.
      001515 01                       3         .byte 1  
      001516 27                       4         .ascii "'"
      001517                          5         TICK:
      001517 CD 11 F5         [ 4] 3517         CALL     TOKEN
      00151A CD 12 F2         [ 4] 3518         CALL     NAMEQ   ;?defined
      00151D CD 04 99         [ 4] 3519         CALL     QBRAN
      001520 14 06                 3520         .word      ABOR1
      001522 81               [ 4] 3521         RET     ;yes, push code address
                                   3522 
                                   3523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3524 ;       ALLOT   ( n -- )
                                   3525 ;       Allocate n bytes to RAM 
                                   3526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001523                       3527         _HEADER ALLOT,5,"ALLOT"
      001523 15 15                    1         .word LINK 
                           001525     2         LINK=.
      001525 05                       3         .byte 5  
      001526 41 4C 4C 4F 54           4         .ascii "ALLOT"
      00152B                          5         ALLOT:
      00152B CD 07 71         [ 4] 3528         CALL     VPP
                                   3529 ; must update APP_VP each time VP is modidied
      00152E CD 0C 7F         [ 4] 3530         call PSTOR 
      001531 CC 1D 34         [ 2] 3531         jp UPDATVP 
                                   3532 
                                   3533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3534 ;       ,       ( w -- )
                                   3535 ;         Compile an integer into
                                   3536 ;         variable space.
                                   3537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001534                       3538         _HEADER COMMA,1,^/"\,"/
      001534 15 25                    1         .word LINK 
                           001536     2         LINK=.
      001536 01                       3         .byte 1  
      001537 5C 2C                    4         .ascii "\,"
      001539                          5         COMMA:
      001539 CD 0C E9         [ 4] 3539         CALL     HERE
      00153C CD 06 1A         [ 4] 3540         CALL     DUPP
      00153F CD 0B 78         [ 4] 3541         CALL     CELLP   ;cell boundary
      001542 CD 07 71         [ 4] 3542         CALL     VPP
      001545 CD 04 D2         [ 4] 3543         CALL     STORE
      001548 CC 04 D2         [ 2] 3544         JP     STORE
                                   3545 
                                   3546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3547 ;       C,      ( c -- )
                                   3548 ;       Compile a byte into
                                   3549 ;       variables space.
                                   3550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00154B                       3551         _HEADER CCOMMA,2,^/"C,"/
      00154B 15 36                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                           00154D     2         LINK=.
      00154D 02                       3         .byte 2  
      00154E 43 2C                    4         .ascii "C,"
      001550                          5         CCOMMA:
      001550 CD 0C E9         [ 4] 3552         CALL     HERE
      001553 CD 06 1A         [ 4] 3553         CALL     DUPP
      001556 CD 0B A3         [ 4] 3554         CALL     ONEP
      001559 CD 07 71         [ 4] 3555         CALL     VPP
      00155C CD 04 D2         [ 4] 3556         CALL     STORE
      00155F CC 04 F1         [ 2] 3557         JP     CSTOR
                                   3558 
                                   3559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3560 ;       [COMPILE]       ( -- ; <string> )
                                   3561 ;       Compile next immediate
                                   3562 ;       word into code dictionary.
                                   3563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001562                       3564         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001562 15 4D                    1         .word LINK 
                           001564     2         LINK=.
      001564 89                       3         .byte IMEDD+9  
      001565 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      00156E                          5         BCOMP:
      00156E CD 15 17         [ 4] 3565         CALL     TICK
      001571 CC 18 4F         [ 2] 3566         JP     JSRC
                                   3567 
                                   3568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3569 ;       COMPILE ( -- )
                                   3570 ;       Compile next jsr in
                                   3571 ;       colon list to code dictionary.
                                   3572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001574                       3573         _HEADER COMPI,COMPO+7,"COMPILE"
      001574 15 64                    1         .word LINK 
                           001576     2         LINK=.
      001576 47                       3         .byte COMPO+7  
      001577 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      00157E                          5         COMPI:
      00157E CD 05 35         [ 4] 3574         CALL     RFROM
      001581 CD 06 1A         [ 4] 3575         CALL     DUPP
      001584 CD 04 E4         [ 4] 3576         CALL     AT
      001587 CD 18 4F         [ 4] 3577         CALL     JSRC    ;compile subroutine
      00158A CD 0B 78         [ 4] 3578         CALL     CELLP
      00158D 90 93            [ 1] 3579         ldw y,x 
      00158F 90 FE            [ 2] 3580         ldw y,(y)
      001591 1C 00 02         [ 2] 3581         addw x,#CELLL 
      001594 90 FC            [ 2] 3582         jp (y)
                                   3583 
                                   3584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3585 ;       LITERAL ( w -- )
                                   3586 ;       Compile tos to dictionary
                                   3587 ;       as an integer literal.
                                   3588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001596                       3589         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      001596 15 76                    1         .word LINK 
                           001598     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001598 C7                       3         .byte COMPO+IMEDD+7  
      001599 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      0015A0                          5         LITER:
      0015A0 CD 15 7E         [ 4] 3590         CALL     COMPI
      0015A3 04 70                 3591         .word DOLIT 
      0015A5 CC 15 39         [ 2] 3592         JP     COMMA
                                   3593 
                                   3594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3595 ;       $,"     ( -- )
                                   3596 ;       Compile a literal string
                                   3597 ;       up to next " .
                                   3598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3599 ;        _HEADER STRCQ,3,^/'$,"'/
      0015A8                       3600 STRCQ:
      0015A8 CD 04 70         [ 4] 3601         CALL     DOLIT
      0015AB 00 22                 3602         .word     34	; "
      0015AD CD 11 34         [ 4] 3603         CALL     PARSE
      0015B0 CD 0C E9         [ 4] 3604         CALL     HERE
      0015B3 CD 0D BA         [ 4] 3605         CALL     PACKS   ;string to code dictionary
      0015B6 CD 0C D2         [ 4] 3606         CALL     COUNT
      0015B9 CD 08 3D         [ 4] 3607         CALL     PLUS    ;calculate aligned end of string
      0015BC CD 07 71         [ 4] 3608         CALL     VPP
      0015BF CC 04 D2         [ 2] 3609         JP     STORE
                                   3610 
                                   3611 ;; Structures
                                   3612 
                                   3613 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3614 ;       FOR     ( -- a )
                                   3615 ;       Start a FOR-NEXT loop
                                   3616 ;       structure in a colon definition.
                                   3617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C2                       3618         _HEADER FOR,IMEDD+3,"FOR"
      0015C2 15 98                    1         .word LINK 
                           0015C4     2         LINK=.
      0015C4 83                       3         .byte IMEDD+3  
      0015C5 46 4F 52                 4         .ascii "FOR"
      0015C8                          5         FOR:
      0015C8 CD 15 7E         [ 4] 3619         CALL     COMPI
      0015CB 05 E3                 3620         .word TOR 
      0015CD CC 0C E9         [ 2] 3621         JP     HERE
                                   3622 
                                   3623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3624 ;       NEXT    ( a -- )
                                   3625 ;       Terminate a FOR-NEXT loop.
                                   3626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015D0                       3627         _HEADER NEXT,IMEDD+4,"NEXT"
      0015D0 15 C4                    1         .word LINK 
                           0015D2     2         LINK=.
      0015D2 84                       3         .byte IMEDD+4  
      0015D3 4E 45 58 54              4         .ascii "NEXT"
      0015D7                          5         NEXT:
      0015D7 CD 15 7E         [ 4] 3628         CALL     COMPI
      0015DA 04 84                 3629         .word DONXT 
      0015DC CD 07 BD         [ 4] 3630         call ADRADJ
      0015DF CC 15 39         [ 2] 3631         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3632 
                                   3633 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3634 ;       I ( -- n )
                                   3635 ;       stack COUNTER
                                   3636 ;       of innermost FOR-NEXT  
                                   3637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E2                       3638         _HEADER IFETCH,1,"I"
      0015E2 15 D2                    1         .word LINK 
                           0015E4     2         LINK=.
      0015E4 01                       3         .byte 1  
      0015E5 49                       4         .ascii "I"
      0015E6                          5         IFETCH:
      0015E6 1D 00 02         [ 2] 3639         subw x,#CELLL 
      0015E9 16 03            [ 2] 3640         ldw y,(3,sp)
      0015EB FF               [ 2] 3641         ldw (x),y 
      0015EC 81               [ 4] 3642         ret 
                                   3643 
                                   3644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3645 ;       J ( -- n )
                                   3646 ;   stack COUNTER
                                   3647 ;   of outer FOR-NEXT  
                                   3648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015ED                       3649         _HEADER JFETCH,1,"J"
      0015ED 15 E4                    1         .word LINK 
                           0015EF     2         LINK=.
      0015EF 01                       3         .byte 1  
      0015F0 4A                       4         .ascii "J"
      0015F1                          5         JFETCH:
      0015F1 1D 00 02         [ 2] 3650         SUBW X,#CELLL 
      0015F4 16 05            [ 2] 3651         LDW Y,(5,SP)
      0015F6 FF               [ 2] 3652         LDW (X),Y 
      0015F7 81               [ 4] 3653         RET 
                                   3654 
                                   3655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3656 ;       BEGIN   ( -- a )
                                   3657 ;       Start an infinite or
                                   3658 ;       indefinite loop structure.
                                   3659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F8                       3660         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015F8 15 EF                    1         .word LINK 
                           0015FA     2         LINK=.
      0015FA 85                       3         .byte IMEDD+5  
      0015FB 42 45 47 49 4E           4         .ascii "BEGIN"
      001600                          5         BEGIN:
      001600 CC 0C E9         [ 2] 3661         JP     HERE
                                   3662 
                                   3663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3664 ;       UNTIL   ( a -- )
                                   3665 ;       Terminate a BEGIN-UNTIL
                                   3666 ;       indefinite loop structure.
                                   3667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001603                       3668         _HEADER UNTIL,IMEDD+5,"UNTIL"
      001603 15 FA                    1         .word LINK 
                           001605     2         LINK=.
      001605 85                       3         .byte IMEDD+5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001606 55 4E 54 49 4C           4         .ascii "UNTIL"
      00160B                          5         UNTIL:
      00160B CD 15 7E         [ 4] 3669         CALL     COMPI
      00160E 04 99                 3670         .word    QBRAN 
      001610 CD 07 BD         [ 4] 3671         call ADRADJ
      001613 CC 15 39         [ 2] 3672         JP     COMMA
                                   3673 
                                   3674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3675 ;       AGAIN   ( a -- )
                                   3676 ;       Terminate a BEGIN-AGAIN
                                   3677 ;       infinite loop structure.
                                   3678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001616                       3679         _HEADER AGAIN,IMEDD+5,"AGAIN"
      001616 16 05                    1         .word LINK 
                           001618     2         LINK=.
      001618 85                       3         .byte IMEDD+5  
      001619 41 47 41 49 4E           4         .ascii "AGAIN"
      00161E                          5         AGAIN:
                           000001  3680 .if OPTIMIZE 
      00161E                       3681         _DOLIT JPIMM 
      00161E CD 04 70         [ 4]    1     CALL DOLIT 
      001621 00 CC                    2     .word JPIMM 
      001623 CD 15 50         [ 4] 3682         CALL  CCOMMA
                           000000  3683 .else 
                                   3684         CALL     COMPI
                                   3685         .word BRAN
                                   3686 .endif 
      001626 CD 07 BD         [ 4] 3687         call ADRADJ 
      001629 CC 15 39         [ 2] 3688         JP     COMMA
                                   3689 
                                   3690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3691 ;       IF      ( -- A )
                                   3692 ;       Begin a conditional branch.
                                   3693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00162C                       3694         _HEADER IFF,IMEDD+2,"IF"
      00162C 16 18                    1         .word LINK 
                           00162E     2         LINK=.
      00162E 82                       3         .byte IMEDD+2  
      00162F 49 46                    4         .ascii "IF"
      001631                          5         IFF:
      001631 CD 15 7E         [ 4] 3695         CALL     COMPI
      001634 04 99                 3696         .word QBRAN
      001636 CD 0C E9         [ 4] 3697         CALL     HERE
      001639 CD 0C 0F         [ 4] 3698         CALL     ZERO
      00163C CC 15 39         [ 2] 3699         JP     COMMA
                                   3700 
                                   3701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3702 ;       THEN        ( A -- )
                                   3703 ;       Terminate a conditional 
                                   3704 ;       branch structure.
                                   3705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00163F                       3706         _HEADER THENN,IMEDD+4,"THEN"
      00163F 16 2E                    1         .word LINK 
                           001641     2         LINK=.
      001641 84                       3         .byte IMEDD+4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001642 54 48 45 4E              4         .ascii "THEN"
      001646                          5         THENN:
      001646 CD 0C E9         [ 4] 3707         CALL     HERE
      001649 CD 07 BD         [ 4] 3708         call ADRADJ 
      00164C CD 06 2A         [ 4] 3709         CALL     SWAPP
      00164F CC 04 D2         [ 2] 3710         JP     STORE
                                   3711 
                                   3712 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3713 ;       ELSE        ( A -- A )
                                   3714 ;       Start the false clause in 
                                   3715 ;       an IF-ELSE-THEN structure.
                                   3716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001652                       3717         _HEADER ELSEE,IMEDD+4,"ELSE"
      001652 16 41                    1         .word LINK 
                           001654     2         LINK=.
      001654 84                       3         .byte IMEDD+4  
      001655 45 4C 53 45              4         .ascii "ELSE"
      001659                          5         ELSEE:
                           000001  3718 .if OPTIMIZE 
      001659                       3719         _DOLIT JPIMM 
      001659 CD 04 70         [ 4]    1     CALL DOLIT 
      00165C 00 CC                    2     .word JPIMM 
      00165E CD 15 50         [ 4] 3720         CALL CCOMMA 
                           000000  3721 .else 
                                   3722          CALL     COMPI
                                   3723         .word BRAN
                                   3724 .endif 
      001661 CD 0C E9         [ 4] 3725         CALL     HERE
      001664 CD 0C 0F         [ 4] 3726         CALL     ZERO
      001667 CD 15 39         [ 4] 3727         CALL     COMMA
      00166A CD 06 2A         [ 4] 3728         CALL     SWAPP
      00166D CD 0C E9         [ 4] 3729         CALL     HERE
      001670 CD 07 BD         [ 4] 3730         call ADRADJ 
      001673 CD 06 2A         [ 4] 3731         CALL     SWAPP
      001676 CC 04 D2         [ 2] 3732         JP     STORE
                                   3733 
                                   3734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3735 ;       AHEAD       ( -- A )
                                   3736 ;       Compile a forward branch
                                   3737 ;       instruction.
                                   3738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001679                       3739         _HEADER AHEAD,IMEDD+5,"AHEAD"
      001679 16 54                    1         .word LINK 
                           00167B     2         LINK=.
      00167B 85                       3         .byte IMEDD+5  
      00167C 41 48 45 41 44           4         .ascii "AHEAD"
      001681                          5         AHEAD:
                           000001  3740 .if OPTIMIZE 
      001681                       3741         _DOLIT JPIMM 
      001681 CD 04 70         [ 4]    1     CALL DOLIT 
      001684 00 CC                    2     .word JPIMM 
      001686 CD 15 50         [ 4] 3742         CALL CCOMMA
                           000000  3743 .else 
                                   3744         CALL     COMPI
                                   3745         .word BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3746 .endif 
      001689 CD 0C E9         [ 4] 3747         CALL     HERE
      00168C CD 0C 0F         [ 4] 3748         CALL     ZERO
      00168F CC 15 39         [ 2] 3749         JP     COMMA
                                   3750 
                                   3751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3752 ;       WHILE       ( a -- A a )
                                   3753 ;       Conditional branch out of a 
                                   3754 ;       BEGIN-WHILE-REPEAT loop.
                                   3755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001692                       3756         _HEADER WHILE,IMEDD+5,"WHILE"
      001692 16 7B                    1         .word LINK 
                           001694     2         LINK=.
      001694 85                       3         .byte IMEDD+5  
      001695 57 48 49 4C 45           4         .ascii "WHILE"
      00169A                          5         WHILE:
      00169A CD 15 7E         [ 4] 3757         CALL     COMPI
      00169D 04 99                 3758         .word QBRAN
      00169F CD 0C E9         [ 4] 3759         CALL     HERE
      0016A2 CD 0C 0F         [ 4] 3760         CALL     ZERO
      0016A5 CD 15 39         [ 4] 3761         CALL     COMMA
      0016A8 CC 06 2A         [ 2] 3762         JP     SWAPP
                                   3763 
                                   3764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3765 ;       REPEAT      ( A a -- )
                                   3766 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3767 ;       indefinite loop.
                                   3768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016AB                       3769         _HEADER REPEA,IMEDD+6,"REPEAT"
      0016AB 16 94                    1         .word LINK 
                           0016AD     2         LINK=.
      0016AD 86                       3         .byte IMEDD+6  
      0016AE 52 45 50 45 41 54        4         .ascii "REPEAT"
      0016B4                          5         REPEA:
                           000001  3770 .if OPTIMIZE 
      0016B4                       3771         _DOLIT JPIMM 
      0016B4 CD 04 70         [ 4]    1     CALL DOLIT 
      0016B7 00 CC                    2     .word JPIMM 
      0016B9 CD 15 50         [ 4] 3772         CALL  CCOMMA
                           000000  3773 .else 
                                   3774         CALL     COMPI
                                   3775         .word BRAN
                                   3776 .endif 
      0016BC CD 07 BD         [ 4] 3777         call ADRADJ 
      0016BF CD 15 39         [ 4] 3778         CALL     COMMA
      0016C2 CD 0C E9         [ 4] 3779         CALL     HERE
      0016C5 CD 07 BD         [ 4] 3780         call ADRADJ 
      0016C8 CD 06 2A         [ 4] 3781         CALL     SWAPP
      0016CB CC 04 D2         [ 2] 3782         JP     STORE
                                   3783 
                                   3784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3785 ;       AFT         ( a -- a A )
                                   3786 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3787 ;       loop the first time through.
                                   3788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0016CE                       3789         _HEADER AFT,IMEDD+3,"AFT"
      0016CE 16 AD                    1         .word LINK 
                           0016D0     2         LINK=.
      0016D0 83                       3         .byte IMEDD+3  
      0016D1 41 46 54                 4         .ascii "AFT"
      0016D4                          5         AFT:
      0016D4 CD 06 10         [ 4] 3790         CALL     DROP
      0016D7 CD 16 81         [ 4] 3791         CALL     AHEAD
      0016DA CD 0C E9         [ 4] 3792         CALL     HERE
      0016DD CC 06 2A         [ 2] 3793         JP     SWAPP
                                   3794 
                                   3795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3796 ;       ABORT"      ( -- ; <string> )
                                   3797 ;       Conditional abort with an error message.
                                   3798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E0                       3799         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016E0 16 D0                    1         .word LINK 
                           0016E2     2         LINK=.
      0016E2 86                       3         .byte IMEDD+6  
      0016E3 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016E9                          5         ABRTQ:
      0016E9 CD 15 7E         [ 4] 3800         CALL     COMPI
      0016EC 13 FE                 3801         .word ABORQ
      0016EE CC 15 A8         [ 2] 3802         JP     STRCQ
                                   3803 
                                   3804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3805 ;       $"     ( -- ; <string> )
                                   3806 ;       Compile an inline string literal.
                                   3807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F1                       3808         _HEADER STRQ,IMEDD+2,'$"'
      0016F1 16 E2                    1         .word LINK 
                           0016F3     2         LINK=.
      0016F3 82                       3         .byte IMEDD+2  
      0016F4 24 22                    4         .ascii '$"'
      0016F6                          5         STRQ:
      0016F6 CD 15 7E         [ 4] 3809         CALL     COMPI
      0016F9 0F BF                 3810         .word STRQP 
      0016FB CC 15 A8         [ 2] 3811         JP     STRCQ
                                   3812 
                                   3813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3814 ;       ."          ( -- ; <string> )
                                   3815 ;       Compile an inline string literal 
                                   3816 ;       to be typed out at run time.
                                   3817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016FE                       3818         _HEADER DOTQ,IMEDD+2,'."'
      0016FE 16 F3                    1         .word LINK 
                           001700     2         LINK=.
      001700 82                       3         .byte IMEDD+2  
      001701 2E 22                    4         .ascii '."'
      001703                          5         DOTQ:
      001703 CD 15 7E         [ 4] 3819         CALL     COMPI
      001706 0F C3                 3820         .word DOTQP 
      001708 CC 15 A8         [ 2] 3821         JP     STRCQ
                                   3822 
                                   3823 ;; Name compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   3824 
                                   3825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3826 ;       ?UNIQUE ( a -- a )
                                   3827 ;       Display a warning message
                                   3828 ;       if word already exists.
                                   3829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00170B                       3830         _HEADER UNIQU,7,"?UNIQUE"
      00170B 17 00                    1         .word LINK 
                           00170D     2         LINK=.
      00170D 07                       3         .byte 7  
      00170E 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      001715                          5         UNIQU:
      001715 CD 06 1A         [ 4] 3831         CALL     DUPP
      001718 CD 12 F2         [ 4] 3832         CALL     NAMEQ   ;?name exists
      00171B CD 04 99         [ 4] 3833         CALL     QBRAN
      00171E 17 34                 3834         .word      UNIQ1
      001720 CD 0F C3         [ 4] 3835         CALL     DOTQP   ;redef are OK
      001723 07                    3836         .byte       7
      001724 20 72 65 44 65 66 20  3837         .ascii     " reDef "       
      00172B CD 06 42         [ 4] 3838         CALL     OVER
      00172E CD 0C D2         [ 4] 3839         CALL     COUNT
      001731 CD 0F 7D         [ 4] 3840         CALL     TYPES   ;just in case
      001734 CC 06 10         [ 2] 3841 UNIQ1:  JP     DROP
                                   3842 
                                   3843 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3844 ;       $,n     ( na -- )
                                   3845 ;       Build a new dictionary name
                                   3846 ;       using string at na.
                                   3847 ; compile dans l'espace des variables 
                                   3848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3849 ;        _HEADER SNAME,3,^/"$,n"/
      001737                       3850 SNAME: 
      001737 CD 06 1A         [ 4] 3851         CALL     DUPP
      00173A CD 05 02         [ 4] 3852         CALL     CAT     ;?null input
      00173D CD 04 99         [ 4] 3853         CALL     QBRAN
      001740 17 6D                 3854         .word      PNAM1
      001742 CD 17 15         [ 4] 3855         CALL     UNIQU   ;?redefinition
      001745 CD 06 1A         [ 4] 3856         CALL     DUPP
      001748 CD 0C D2         [ 4] 3857         CALL     COUNT
      00174B CD 08 3D         [ 4] 3858         CALL     PLUS
      00174E CD 07 71         [ 4] 3859         CALL     VPP
      001751 CD 04 D2         [ 4] 3860         CALL     STORE
      001754 CD 06 1A         [ 4] 3861         CALL     DUPP
      001757 CD 07 8F         [ 4] 3862         CALL     LAST
      00175A CD 04 D2         [ 4] 3863         CALL     STORE   ;save na for vocabulary link
      00175D CD 0B 87         [ 4] 3864         CALL     CELLM   ;link address
      001760 CD 07 63         [ 4] 3865         CALL     CNTXT
      001763 CD 04 E4         [ 4] 3866         CALL     AT
      001766 CD 06 2A         [ 4] 3867         CALL     SWAPP
      001769 CD 04 D2         [ 4] 3868         CALL     STORE
      00176C 81               [ 4] 3869         RET     ;save code pointer
      00176D CD 0F BF         [ 4] 3870 PNAM1:  CALL     STRQP
      001770 05                    3871         .byte      5
      001771 20 6E 61 6D 65        3872         .ascii     " name" ;null input
      001776 CC 14 06         [ 2] 3873         JP     ABOR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   3874 
                                   3875 ;; FORTH compiler
                                   3876 
                                   3877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3878 ;       $COMPILE        ( a -- )
                                   3879 ;       Compile next word to
                                   3880 ;       dictionary as a token or literal.
                                   3881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001779                       3882         _HEADER SCOMP,8,"$COMPILE"
      001779 17 0D                    1         .word LINK 
                           00177B     2         LINK=.
      00177B 08                       3         .byte 8  
      00177C 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001784                          5         SCOMP:
      001784 CD 12 F2         [ 4] 3883         CALL     NAMEQ
      001787 CD 07 CD         [ 4] 3884         CALL     QDUP    ;?defined
      00178A CD 04 99         [ 4] 3885         CALL     QBRAN
      00178D 17 A5                 3886         .word      SCOM2
      00178F CD 04 E4         [ 4] 3887         CALL     AT
      001792 CD 04 70         [ 4] 3888         CALL     DOLIT
      001795 80 00                 3889         .word     0x8000	;  IMEDD*256
      001797 CD 06 77         [ 4] 3890         CALL     ANDD    ;?immediate
      00179A CD 04 99         [ 4] 3891         CALL     QBRAN
      00179D 17 A2                 3892         .word      SCOM1
      00179F CC 04 C5         [ 2] 3893         JP     EXECU
      0017A2 CC 18 4F         [ 2] 3894 SCOM1:  JP     JSRC
      0017A5 CD 25 E8         [ 4] 3895 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0017A8 CD 07 CD         [ 4] 3896         CALL    QDUP  
      0017AB CD 04 99         [ 4] 3897         CALL     QBRAN
      0017AE 14 06                 3898         .word      ABOR1
      0017B0                       3899         _DOLIT  -1
      0017B0 CD 04 70         [ 4]    1     CALL DOLIT 
      0017B3 FF FF                    2     .word -1 
      0017B5 CD 08 FB         [ 4] 3900         CALL    EQUAL
      0017B8                       3901         _QBRAN DLITER  
      0017B8 CD 04 99         [ 4]    1     CALL QBRAN
      0017BB 29 C7                    2     .word DLITER
      0017BD CC 15 A0         [ 2] 3902         JP     LITER
                                   3903 
                                   3904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3905 ;       OVERT   ( -- )
                                   3906 ;       Link a new word into vocabulary.
                                   3907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C0                       3908         _HEADER OVERT,5,"OVERT"
      0017C0 17 7B                    1         .word LINK 
                           0017C2     2         LINK=.
      0017C2 05                       3         .byte 5  
      0017C3 4F 56 45 52 54           4         .ascii "OVERT"
      0017C8                          5         OVERT:
      0017C8 CD 07 8F         [ 4] 3909         CALL     LAST
      0017CB CD 04 E4         [ 4] 3910         CALL     AT
      0017CE CD 07 63         [ 4] 3911         CALL     CNTXT
      0017D1 CC 04 D2         [ 2] 3912         JP     STORE
                                   3913 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   3914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3915 ;       ;       ( -- )
                                   3916 ;       Terminate a colon definition.
                                   3917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017D4                       3918         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0017D4 17 C2                    1         .word LINK 
                           0017D6     2         LINK=.
      0017D6 C1                       3         .byte IMEDD+COMPO+1  
      0017D7 3B                       4         .ascii ";"
      0017D8                          5         SEMIS:
                           000001  3919 .if OPTIMIZE ; more compact and faster
      0017D8 CD 04 70         [ 4] 3920         call DOLIT 
      0017DB 00 81                 3921         .word 0x81   ; opcode for RET 
      0017DD CD 15 50         [ 4] 3922         call CCOMMA 
                           000000  3923 .else
                                   3924         CALL     COMPI
                                   3925         .word EXIT 
                                   3926 .endif 
      0017E0 CD 14 67         [ 4] 3927         CALL     LBRAC
      0017E3 CD 17 C8         [ 4] 3928         call OVERT 
      0017E6 CD 22 8C         [ 4] 3929         CALL FMOVE
      0017E9 CD 07 CD         [ 4] 3930         call QDUP 
      0017EC CD 04 99         [ 4] 3931         call QBRAN 
      0017EF 19 65                 3932         .word SET_RAMLAST 
      0017F1 CD 23 20         [ 4] 3933         CALL UPDATPTR
      0017F4 81               [ 4] 3934         RET 
                                   3935 
                                   3936 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3937 ;       Terminate an ISR definition 
                                   3938 ;       retourn ca of ISR as double
                                   3939 ;       I; ( -- ud )
                                   3940 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017F5                       3941        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017F5 17 D6                    1         .word LINK 
                           0017F7     2         LINK=.
      0017F7 C2                       3         .byte 2+IMEDD+COMPO  
      0017F8 49 3B                    4         .ascii "I;"
      0017FA                          5         ISEMI:
      0017FA 1D 00 02         [ 2] 3942         subw x,#CELLL  
      0017FD 90 AE 00 80      [ 2] 3943         ldw y,#IRET_CODE 
      001801 FF               [ 2] 3944         ldw (x),y 
      001802 CD 15 50         [ 4] 3945         call CCOMMA
      001805 CD 14 67         [ 4] 3946         call LBRAC 
      001808 CD 23 65         [ 4] 3947         call IFMOVE
      00180B CD 07 CD         [ 4] 3948         call QDUP 
      00180E CD 04 99         [ 4] 3949         CALL QBRAN 
      001811 19 65                 3950         .word SET_RAMLAST
      001813 CD 07 7F         [ 4] 3951         CALL CPP
      001816 CD 04 E4         [ 4] 3952         call AT 
      001819 CD 06 2A         [ 4] 3953         call SWAPP 
      00181C CD 07 7F         [ 4] 3954         CALL CPP 
      00181F CD 04 D2         [ 4] 3955         call STORE 
      001822 CD 1D 1D         [ 4] 3956         call UPDATCP 
      001825 CD 1C DA         [ 4] 3957         call EEPVP 
      001828                       3958         _DROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001828 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00182B CD 04 E4         [ 4] 3959         call AT 
      00182E CD 07 71         [ 4] 3960         call VPP 
      001831 CD 04 D2         [ 4] 3961         call STORE 
      001834 CC 0C 0F         [ 2] 3962         jp ZERO
      001837 81               [ 4] 3963         ret           
                                   3964         
                                   3965 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3966 ;       ]       ( -- )
                                   3967 ;       Start compiling words in
                                   3968 ;       input stream.
                                   3969 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001838                       3970         _HEADER RBRAC,1,"]"
      001838 17 F7                    1         .word LINK 
                           00183A     2         LINK=.
      00183A 01                       3         .byte 1  
      00183B 5D                       4         .ascii "]"
      00183C                          5         RBRAC:
      00183C CD 04 70         [ 4] 3971         CALL   DOLIT
      00183F 17 84                 3972         .word  SCOMP
      001841 CD 07 41         [ 4] 3973         CALL   TEVAL
      001844 CC 04 D2         [ 2] 3974         JP     STORE
                                   3975 
                                   3976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3977 ;       CALL,    ( ca -- )
                                   3978 ;       Compile a subroutine call.
                                   3979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001847                       3980         _HEADER JSRC,5,^/"CALL,"/
      001847 18 3A                    1         .word LINK 
                           001849     2         LINK=.
      001849 05                       3         .byte 5  
      00184A 43 41 4C 4C 2C           4         .ascii "CALL,"
      00184F                          5         JSRC:
                           000001  3981 .if OPTIMIZE 
                                   3982 ;;;;; optimization code ;;;;;;;;;;;;;;;
      00184F 90 AE 06 10      [ 2] 3983         LDW Y,#DROP 
      001853 90 BF 26         [ 2] 3984         LDW YTEMP,Y 
      001856 90 93            [ 1] 3985         LDW Y,X 
      001858 90 FE            [ 2] 3986         LDW Y,(Y)
      00185A 90 B3 26         [ 2] 3987         CPW Y,YTEMP 
      00185D 26 13            [ 1] 3988         JRNE JSRC1         
                                   3989 ; replace CALL DROP BY  ADDW X,#CELLL 
      00185F 1C 00 02         [ 2] 3990         ADDW X,#CELLL 
      001862                       3991         _DOLIT ADDWX ; opcode 
      001862 CD 04 70         [ 4]    1     CALL DOLIT 
      001865 00 1C                    2     .word ADDWX 
      001867 CD 15 50         [ 4] 3992         CALL   CCOMMA 
      00186A                       3993         _DOLIT CELLL 
      00186A CD 04 70         [ 4]    1     CALL DOLIT 
      00186D 00 02                    2     .word CELLL 
      00186F CC 15 39         [ 2] 3994         JP      COMMA 
      001872                       3995 JSRC1: ; check for DDROP 
      001872 90 AE 08 1D      [ 2] 3996         LDW Y,#DDROP 
      001876 90 BF 26         [ 2] 3997         LDW YTEMP,Y 
      001879 90 93            [ 1] 3998         LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      00187B 90 FE            [ 2] 3999         LDW Y,(Y)
      00187D 90 B3 26         [ 2] 4000         CPW Y,YTEMP 
      001880 26 13            [ 1] 4001         JRNE JSRC2 
                                   4002 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      001882 1C 00 02         [ 2] 4003         ADDW X,#CELLL 
      001885                       4004         _DOLIT ADDWX 
      001885 CD 04 70         [ 4]    1     CALL DOLIT 
      001888 00 1C                    2     .word ADDWX 
      00188A CD 15 50         [ 4] 4005         CALL  CCOMMA 
      00188D                       4006         _DOLIT 2*CELLL 
      00188D CD 04 70         [ 4]    1     CALL DOLIT 
      001890 00 04                    2     .word 2*CELLL 
      001892 CC 15 39         [ 2] 4007         JP  COMMA 
      001895                       4008 JSRC2: 
                                   4009 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4010 .endif        
      001895 CD 04 70         [ 4] 4011         CALL     DOLIT
      001898 00 CD                 4012         .word     CALLL     ;CALL
      00189A CD 15 50         [ 4] 4013         CALL     CCOMMA
      00189D CC 15 39         [ 2] 4014         JP     COMMA
                                   4015 
                                   4016 ;       INIT-OFS ( -- )
                                   4017 ;       compute offset to adjust jump address 
                                   4018 ;       set variable OFFSET 
      0018A0 18 49                 4019         .word LINK 
                           0018A2  4020         LINK=.
      0018A2 08                    4021         .byte 8 
      0018A3 49 4E 49 54 2D 4F 46  4022         .ascii "INIT-OFS" 
             53
      0018AB                       4023 INITOFS:
      0018AB CD 07 30         [ 4] 4024         call TFLASH 
      0018AE CD 04 E4         [ 4] 4025         CALL AT 
      0018B1 CD 06 1A         [ 4] 4026         CALL DUPP 
      0018B4 CD 04 99         [ 4] 4027         call QBRAN
      0018B7 18 C8                 4028         .word 1$
      0018B9                       4029         _DROP  
      0018B9 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018BC CD 07 7F         [ 4] 4030         call CPP 
      0018BF CD 04 E4         [ 4] 4031         call AT 
      0018C2 CD 0C E9         [ 4] 4032         call HERE
      0018C5 CD 08 D3         [ 4] 4033         call SUBB 
      0018C8 CD 07 B4         [ 4] 4034 1$:     call OFFSET 
      0018CB CC 04 D2         [ 2] 4035         jp STORE  
                                   4036 
                                   4037 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4038 ;       :       ( -- ; <string> )
                                   4039 ;       Start a new colon definition
                                   4040 ;       using next word as its name.
                                   4041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018CE                       4042         _HEADER COLON,1,":"
      0018CE 18 A2                    1         .word LINK 
                           0018D0     2         LINK=.
      0018D0 01                       3         .byte 1  
      0018D1 3A                       4         .ascii ":"
      0018D2                          5         COLON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      0018D2 CD 18 AB         [ 4] 4043         call INITOFS       
      0018D5 CD 11 F5         [ 4] 4044         CALL   TOKEN
      0018D8 CD 17 37         [ 4] 4045         CALL   SNAME
      0018DB CC 18 3C         [ 2] 4046         JP     RBRAC
                                   4047 
                                   4048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4049 ;       I:  ( -- )
                                   4050 ;       Start interrupt service 
                                   4051 ;       routine definition
                                   4052 ;       those definition have 
                                   4053 ;       no name.
                                   4054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018DE                       4055         _HEADER ICOLON,2,"I:"
      0018DE 18 D0                    1         .word LINK 
                           0018E0     2         LINK=.
      0018E0 02                       3         .byte 2  
      0018E1 49 3A                    4         .ascii "I:"
      0018E3                          5         ICOLON:
      0018E3 CD 18 AB         [ 4] 4056         call INITOFS 
      0018E6 CC 18 3C         [ 2] 4057         jp RBRAC  
                                   4058 
                                   4059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4060 ;       IMMEDIATE       ( -- )
                                   4061 ;       Make last compiled word
                                   4062 ;       an immediate word.
                                   4063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018E9                       4064         _HEADER IMMED,9,"IMMEDIATE"
      0018E9 18 E0                    1         .word LINK 
                           0018EB     2         LINK=.
      0018EB 09                       3         .byte 9  
      0018EC 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0018F5                          5         IMMED:
      0018F5 CD 04 70         [ 4] 4065         CALL     DOLIT
      0018F8 80 00                 4066         .word     0x8000	;  IMEDD*256
      0018FA CD 07 8F         [ 4] 4067         CALL     LAST
      0018FD CD 04 E4         [ 4] 4068         CALL     AT
      001900 CD 04 E4         [ 4] 4069         CALL     AT
      001903 CD 06 8B         [ 4] 4070         CALL     ORR
      001906 CD 07 8F         [ 4] 4071         CALL     LAST
      001909 CD 04 E4         [ 4] 4072         CALL     AT
      00190C CC 04 D2         [ 2] 4073         JP     STORE
                                   4074 
                                   4075 ;; Defining words
                                   4076 
                                   4077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4078 ;       CREATE  ( -- ; <string> )
                                   4079 ;       Compile a new array
                                   4080 ;       without allocating space.
                                   4081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00190F                       4082         _HEADER CREAT,6,"CREATE"
      00190F 18 EB                    1         .word LINK 
                           001911     2         LINK=.
      001911 06                       3         .byte 6  
      001912 43 52 45 41 54 45        4         .ascii "CREATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001918                          5         CREAT:
      001918 CD 11 F5         [ 4] 4083         CALL     TOKEN
      00191B CD 17 37         [ 4] 4084         CALL     SNAME
      00191E CD 17 C8         [ 4] 4085         CALL     OVERT        
      001921 CD 15 7E         [ 4] 4086         CALL     COMPI 
      001924 06 D0                 4087         .word DOVAR 
      001926 81               [ 4] 4088         RET
                                   4089 
                                   4090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4091 ;       VARIABLE  ( -- ; <string> )
                                   4092 ;       Compile a new variable
                                   4093 ;       initialized to 0.
                                   4094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001927                       4095         _HEADER VARIA,8,"VARIABLE"
      001927 19 11                    1         .word LINK 
                           001929     2         LINK=.
      001929 08                       3         .byte 8  
      00192A 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001932                          5         VARIA:
                                   4096 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001932 CD 0C E9         [ 4] 4097         CALL HERE
      001935 CD 06 1A         [ 4] 4098         CALL DUPP 
      001938 CD 0B 78         [ 4] 4099         CALL CELLP
      00193B CD 07 71         [ 4] 4100         CALL VPP 
      00193E CD 04 D2         [ 4] 4101         CALL STORE
      001941 CD 19 18         [ 4] 4102         CALL CREAT
      001944 CD 06 1A         [ 4] 4103         CALL DUPP
      001947 CD 15 39         [ 4] 4104         CALL COMMA
      00194A CD 0C 0F         [ 4] 4105         CALL ZERO
      00194D CD 06 2A         [ 4] 4106         call SWAPP 
      001950 CD 04 D2         [ 4] 4107         CALL STORE
      001953 CD 22 8C         [ 4] 4108         CALL FMOVE ; move definition to FLASH
      001956 CD 07 CD         [ 4] 4109         CALL QDUP 
      001959 CD 04 99         [ 4] 4110         CALL QBRAN 
      00195C 19 65                 4111         .word SET_RAMLAST   
      00195E CD 1D 34         [ 4] 4112         call UPDATVP  ; don't update if variable kept in RAM.
      001961 CD 23 20         [ 4] 4113         CALL UPDATPTR
      001964 81               [ 4] 4114         RET         
      001965                       4115 SET_RAMLAST: 
      001965 CD 07 8F         [ 4] 4116         CALL LAST 
      001968 CD 04 E4         [ 4] 4117         CALL AT 
      00196B CD 07 A2         [ 4] 4118         CALL RAMLAST 
      00196E CC 04 D2         [ 2] 4119         JP STORE  
                                   4120 
                                   4121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4122 ;       CONSTANT  ( n -- ; <string> )
                                   4123 ;       Compile a new constant 
                                   4124 ;       n CONSTANT name 
                                   4125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001971                       4126         _HEADER CONSTANT,8,"CONSTANT"
      001971 19 29                    1         .word LINK 
                           001973     2         LINK=.
      001973 08                       3         .byte 8  
      001974 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



             54
      00197C                          5         CONSTANT:
      00197C CD 11 F5         [ 4] 4127         CALL TOKEN
      00197F CD 17 37         [ 4] 4128         CALL SNAME 
      001982 CD 17 C8         [ 4] 4129         CALL OVERT 
      001985 CD 15 7E         [ 4] 4130         CALL COMPI 
      001988 19 9C                 4131         .word DOCONST
      00198A CD 15 39         [ 4] 4132         CALL COMMA 
      00198D CD 22 8C         [ 4] 4133         CALL FMOVE
      001990 CD 07 CD         [ 4] 4134         CALL QDUP 
      001993 CD 04 99         [ 4] 4135         CALL QBRAN 
      001996 19 65                 4136         .word SET_RAMLAST  
      001998 CD 23 20         [ 4] 4137         CALL UPDATPTR  
      00199B 81               [ 4] 4138 1$:     RET          
                                   4139 
                                   4140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4141 ; CONSTANT runtime semantic 
                                   4142 ; doCONST  ( -- n )
                                   4143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4144 ;       _HEADER DOCONST,7,"DOCONST"
      00199C                       4145 DOCONST:
      00199C 1D 00 02         [ 2] 4146         subw x,#CELLL
      00199F 90 85            [ 2] 4147         popw y 
      0019A1 90 FE            [ 2] 4148         ldw y,(y) 
      0019A3 FF               [ 2] 4149         ldw (x),y 
      0019A4 81               [ 4] 4150         ret 
                                   4151 
                                   4152 ;----------------------------------
                                   4153 ; create double constant 
                                   4154 ; 2CONSTANT ( d -- ; <string> )
                                   4155 ;----------------------------------
      0019A5                       4156         _HEADER DCONST,9,"2CONSTANT"
      0019A5 19 73                    1         .word LINK 
                           0019A7     2         LINK=.
      0019A7 09                       3         .byte 9  
      0019A8 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      0019B1                          5         DCONST:
      0019B1 CD 11 F5         [ 4] 4157         CALL TOKEN
      0019B4 CD 17 37         [ 4] 4158         CALL SNAME 
      0019B7 CD 17 C8         [ 4] 4159         CALL OVERT 
      0019BA CD 15 7E         [ 4] 4160         CALL COMPI 
      0019BD 19 D4                 4161         .word DO_DCONST
      0019BF CD 15 39         [ 4] 4162         CALL COMMA
      0019C2 CD 15 39         [ 4] 4163         CALL COMMA  
      0019C5 CD 22 8C         [ 4] 4164         CALL FMOVE
      0019C8 CD 07 CD         [ 4] 4165         CALL QDUP 
      0019CB CD 04 99         [ 4] 4166         CALL QBRAN 
      0019CE 19 65                 4167         .word SET_RAMLAST  
      0019D0 CD 23 20         [ 4] 4168         CALL UPDATPTR  
      0019D3 81               [ 4] 4169 1$:     RET          
                                   4170     
                                   4171 ;----------------------------------
                                   4172 ; runtime for DCONST 
                                   4173 ; stack double constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4174 ; DO-DCONST ( -- d )
                                   4175 ;-----------------------------------
                                   4176 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      0019D4                       4177 DO_DCONST:
      0019D4 90 85            [ 2] 4178     popw y 
      0019D6 90 BF 26         [ 2] 4179     ldw YTEMP,y 
      0019D9 1D 00 04         [ 2] 4180     subw x,#2*CELLL 
      0019DC 90 FE            [ 2] 4181     ldw y,(y)
      0019DE FF               [ 2] 4182     ldw (x),y 
      0019DF 90 BE 26         [ 2] 4183     ldw y,YTEMP 
      0019E2 90 EE 02         [ 2] 4184     ldw y,(2,y)
      0019E5 EF 02            [ 2] 4185     ldw (2,x),y 
      0019E7 81               [ 4] 4186     ret 
                                   4187 
                                   4188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4189 ;;          TOOLS 
                                   4190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4191 
                                   4192 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4193 ;       _TYPE   ( b u -- )
                                   4194 ;       Display a string. Filter
                                   4195 ;       non-printing characters.
                                   4196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019E8                       4197         _HEADER UTYPE,5,"_TYPE"
      0019E8 19 A7                    1         .word LINK 
                           0019EA     2         LINK=.
      0019EA 05                       3         .byte 5  
      0019EB 5F 54 59 50 45           4         .ascii "_TYPE"
      0019F0                          5         UTYPE:
      0019F0 CD 05 E3         [ 4] 4198         CALL     TOR     ;start count down loop
      0019F3 20 0F            [ 2] 4199         JRA     UTYP2   ;skip first pass
      0019F5 CD 06 1A         [ 4] 4200 UTYP1:  CALL     DUPP
      0019F8 CD 05 02         [ 4] 4201         CALL     CAT
      0019FB CD 0C 39         [ 4] 4202         CALL     TCHAR
      0019FE CD 04 37         [ 4] 4203         CALL     EMIT    ;display only printable
      001A01 CD 0B A3         [ 4] 4204         CALL     ONEP    ;increment address
      001A04 CD 04 84         [ 4] 4205 UTYP2:  CALL     DONXT
      001A07 19 F5                 4206         .word      UTYP1   ;loop till done
      001A09 CC 06 10         [ 2] 4207         JP     DROP
                                   4208 
                                   4209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4210 ;       dm+     ( a u -- a )
                                   4211 ;       Dump u bytes from ,
                                   4212 ;       leaving a+u on  stack.
                                   4213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A0C                       4214         _HEADER DUMPP,3,"DM+"
      001A0C 19 EA                    1         .word LINK 
                           001A0E     2         LINK=.
      001A0E 03                       3         .byte 3  
      001A0F 44 4D 2B                 4         .ascii "DM+"
      001A12                          5         DUMPP:
      001A12 CD 06 42         [ 4] 4215         CALL     OVER
      001A15 CD 04 70         [ 4] 4216         CALL     DOLIT
      001A18 00 04                 4217         .word      4
      001A1A CD 0F EC         [ 4] 4218         CALL     UDOTR   ;display address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A1D CD 0F 53         [ 4] 4219         CALL     SPACE
      001A20 CD 05 E3         [ 4] 4220         CALL     TOR     ;start count down loop
      001A23 20 11            [ 2] 4221         JRA     PDUM2   ;skip first pass
      001A25 CD 06 1A         [ 4] 4222 PDUM1:  CALL     DUPP
      001A28 CD 05 02         [ 4] 4223         CALL     CAT
      001A2B CD 04 70         [ 4] 4224         CALL     DOLIT
      001A2E 00 03                 4225         .word      3
      001A30 CD 0F EC         [ 4] 4226         CALL     UDOTR   ;display numeric data
      001A33 CD 0B A3         [ 4] 4227         CALL     ONEP    ;increment address
      001A36 CD 04 84         [ 4] 4228 PDUM2:  CALL     DONXT
      001A39 1A 25                 4229         .word      PDUM1   ;loop till done
      001A3B 81               [ 4] 4230         RET
                                   4231 
                                   4232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4233 ;       DUMP    ( a u -- )
                                   4234 ;       Dump u bytes from a,
                                   4235 ;       in a formatted manner.
                                   4236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A3C                       4237         _HEADER DUMP,4,"DUMP"
      001A3C 1A 0E                    1         .word LINK 
                           001A3E     2         LINK=.
      001A3E 04                       3         .byte 4  
      001A3F 44 55 4D 50              4         .ascii "DUMP"
      001A43                          5         DUMP:
      001A43 CD 06 E0         [ 4] 4238         CALL     BASE
      001A46 CD 04 E4         [ 4] 4239         CALL     AT
      001A49 CD 05 E3         [ 4] 4240         CALL     TOR
      001A4C CD 0E B2         [ 4] 4241         CALL     HEX     ;save radix, set hex
      001A4F CD 04 70         [ 4] 4242         CALL     DOLIT
      001A52 00 10                 4243         .word      16
      001A54 CD 0A C9         [ 4] 4244         CALL     SLASH   ;change count to lines
      001A57 CD 05 E3         [ 4] 4245         CALL     TOR     ;start count down loop
      001A5A CD 0F 96         [ 4] 4246 DUMP1:  CALL     CR
      001A5D CD 04 70         [ 4] 4247         CALL     DOLIT
      001A60 00 10                 4248         .word      16
      001A62 CD 08 28         [ 4] 4249         CALL     DDUP
      001A65 CD 1A 12         [ 4] 4250         CALL     DUMPP   ;display numeric
      001A68 CD 07 DE         [ 4] 4251         CALL     ROT
      001A6B CD 07 DE         [ 4] 4252         CALL     ROT
      001A6E CD 0F 53         [ 4] 4253         CALL     SPACE
      001A71 CD 0F 53         [ 4] 4254         CALL     SPACE
      001A74 CD 19 F0         [ 4] 4255         CALL     UTYPE   ;display printable characters
      001A77 CD 04 84         [ 4] 4256         CALL     DONXT
      001A7A 1A 5A                 4257         .word      DUMP1   ;loop till done
      001A7C CD 06 10         [ 4] 4258 DUMP3:  CALL     DROP
      001A7F CD 05 35         [ 4] 4259         CALL     RFROM
      001A82 CD 06 E0         [ 4] 4260         CALL     BASE
      001A85 CC 04 D2         [ 2] 4261         JP     STORE   ;restore radix
                                   4262 
                                   4263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4264 ;       .S      ( ... -- ... )
                                   4265 ;        Display  contents of stack.
                                   4266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A88                       4267         _HEADER DOTS,2,".S"
      001A88 1A 3E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                           001A8A     2         LINK=.
      001A8A 02                       3         .byte 2  
      001A8B 2E 53                    4         .ascii ".S"
      001A8D                          5         DOTS:
      001A8D CD 0F 96         [ 4] 4268         CALL     CR
      001A90 CD 0C 51         [ 4] 4269         CALL     DEPTH   ;stack depth
      001A93 CD 05 E3         [ 4] 4270         CALL     TOR     ;start count down loop
      001A96 20 09            [ 2] 4271         JRA     DOTS2   ;skip first pass
      001A98 CD 05 46         [ 4] 4272 DOTS1:  CALL     RAT
      001A9B CD 0C 68         [ 4] 4273 	CALL     PICK
      001A9E CD 10 3C         [ 4] 4274         CALL     DOT     ;index stack, display contents
      001AA1 CD 04 84         [ 4] 4275 DOTS2:  CALL     DONXT
      001AA4 1A 98                 4276         .word      DOTS1   ;loop till done
      001AA6 CD 0F C3         [ 4] 4277         CALL     DOTQP
      001AA9 05                    4278         .byte      5
      001AAA 20 3C 73 70 20        4279         .ascii     " <sp "
      001AAF 81               [ 4] 4280         RET
                                   4281 
                                   4282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4283 ;       >NAME   ( ca -- na | F )
                                   4284 ;       Convert code address
                                   4285 ;       to a name address.
                                   4286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AB0                       4287         _HEADER TNAME,5,">NAME"
      001AB0 1A 8A                    1         .word LINK 
                           001AB2     2         LINK=.
      001AB2 05                       3         .byte 5  
      001AB3 3E 4E 41 4D 45           4         .ascii ">NAME"
      001AB8                          5         TNAME:
      001AB8 CD 07 63         [ 4] 4288         CALL     CNTXT   ;vocabulary link
      001ABB CD 04 E4         [ 4] 4289 TNAM2:  CALL     AT
      001ABE CD 06 1A         [ 4] 4290         CALL     DUPP    ;?last word in a vocabulary
      001AC1 CD 04 99         [ 4] 4291         CALL     QBRAN
      001AC4 1A DF                 4292         .word      TNAM4
      001AC6 CD 08 28         [ 4] 4293         CALL     DDUP
      001AC9 CD 12 03         [ 4] 4294         CALL     NAMET
      001ACC CD 06 A0         [ 4] 4295         CALL     XORR    ;compare
      001ACF CD 04 99         [ 4] 4296         CALL     QBRAN
      001AD2 1A D9                 4297         .word      TNAM3
      001AD4 CD 0B 87         [ 4] 4298         CALL     CELLM   ;continue with next word
      001AD7 20 E2            [ 2] 4299         JRA     TNAM2
      001AD9 CD 06 2A         [ 4] 4300 TNAM3:  CALL     SWAPP
      001ADC CC 06 10         [ 2] 4301         JP     DROP
      001ADF CD 08 1D         [ 4] 4302 TNAM4:  CALL     DDROP
      001AE2 CC 0C 0F         [ 2] 4303         JP     ZERO
                                   4304 
                                   4305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4306 ;       .ID     ( na -- )
                                   4307 ;        Display  name at address.
                                   4308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AE5                       4309         _HEADER DOTID,3,".ID"
      001AE5 1A B2                    1         .word LINK 
                           001AE7     2         LINK=.
      001AE7 03                       3         .byte 3  
      001AE8 2E 49 44                 4         .ascii ".ID"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001AEB                          5         DOTID:
      001AEB CD 07 CD         [ 4] 4310         CALL     QDUP    ;if zero no name
      001AEE CD 04 99         [ 4] 4311         CALL     QBRAN
      001AF1 1B 01                 4312         .word      DOTI1
      001AF3 CD 0C D2         [ 4] 4313         CALL     COUNT
      001AF6 CD 04 70         [ 4] 4314         CALL     DOLIT
      001AF9 00 1F                 4315         .word      0x1F
      001AFB CD 06 77         [ 4] 4316         CALL     ANDD    ;mask lexicon bits
      001AFE CC 19 F0         [ 2] 4317         JP     UTYPE
      001B01 CD 0F C3         [ 4] 4318 DOTI1:  CALL     DOTQP
      001B04 09                    4319         .byte      9
      001B05 20 6E 6F 4E 61 6D 65  4320         .ascii     " noName"
      001B0C 81               [ 4] 4321         RET
                                   4322 
                           000000  4323 WANT_SEE=0
                           000000  4324 .if WANT_SEE 
                                   4325 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4326 ;       SEE     ( -- ; <string> )
                                   4327 ;       A simple decompiler.
                                   4328 ;       Updated for byte machines.
                                   4329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4330         _HEADER SEE,3,"SEE"
                                   4331         CALL     TICK    ;starting address
                                   4332         CALL     CR
                                   4333         CALL     ONEM
                                   4334 SEE1:   CALL     ONEP
                                   4335         CALL     DUPP
                                   4336         CALL     AT
                                   4337         CALL     DUPP
                                   4338         CALL     QBRAN
                                   4339         .word    SEE2
                                   4340         CALL     TNAME   ;?is it a name
                                   4341 SEE2:   CALL     QDUP    ;name address or zero
                                   4342         CALL     QBRAN
                                   4343         .word    SEE3
                                   4344         CALL     SPACE
                                   4345         CALL     DOTID   ;display name
                                   4346         CALL     ONEP
                                   4347         JRA      SEE4
                                   4348 SEE3:   CALL     DUPP
                                   4349         CALL     CAT
                                   4350         CALL     UDOT    ;display number
                                   4351 SEE4:   CALL     NUFQ    ;user control
                                   4352         CALL     QBRAN
                                   4353         .word    SEE1
                                   4354         JP     DROP
                                   4355 .endif ; WANT_SEE 
                                   4356 
                                   4357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4358 ;       WORDS   ( -- )
                                   4359 ;       Display names in vocabulary.
                                   4360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B0D                       4361         _HEADER WORDS,5,"WORDS"
      001B0D 1A E7                    1         .word LINK 
                           001B0F     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B0F 05                       3         .byte 5  
      001B10 57 4F 52 44 53           4         .ascii "WORDS"
      001B15                          5         WORDS:
      001B15 CD 0F 96         [ 4] 4362         CALL     CR
      001B18 CD 07 63         [ 4] 4363         CALL     CNTXT   ;only in context
      001B1B CD 04 E4         [ 4] 4364 WORS1:  CALL     AT
      001B1E CD 07 CD         [ 4] 4365         CALL     QDUP    ;?at end of list
      001B21 CD 04 99         [ 4] 4366         CALL     QBRAN
      001B24 1B 37                 4367         .word      WORS2
      001B26 CD 06 1A         [ 4] 4368         CALL     DUPP
      001B29 CD 0F 53         [ 4] 4369         CALL     SPACE
      001B2C CD 1A EB         [ 4] 4370         CALL     DOTID   ;display a name
      001B2F CD 0B 87         [ 4] 4371         CALL     CELLM
      001B32 CD 04 B5         [ 4] 4372         CALL     BRAN
      001B35 1B 1B                 4373         .word      WORS1
      001B37 81               [ 4] 4374 WORS2:  RET
                                   4375 
                                   4376         
                                   4377 ;; Hardware reset
                                   4378 
                                   4379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4380 ;  COPYRIGTH
                                   4381 ; print copyright notice 
                                   4382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B38                       4383 COPYRIGHT:
      001B38 CD 0F C3         [ 4] 4384     CALL DOTQP 
      001B3B 21                    4385     .byte 33 
      001B3C 4A 61 63 71 75 65 73  4386     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001B5D CC 0F 96         [ 2] 4387     JP CR 
                                   4388 
                                   4389 
                                   4390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4391 ;  PRT_LICENCE 
                                   4392 ;  print GPLV2 licence 
                                   4393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B60                       4394 PRT_LICENCE:
      001B60 CD 0F C3         [ 4] 4395         CALL DOTQP 
      001B63 0F                    4396         .byte  15 
      001B64 4C 49 43 45 4E 43 45  4397         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B73 81               [ 4] 4398         RET 
                                   4399 
                                   4400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4401 ;    PRINT_VERSION ( c1 c2 -- )
                                   4402 ;    c2 minor 
                                   4403 ;    c1 major 
                                   4404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B74                       4405 PRINT_VERSION:
      001B74 CD 0F C3         [ 4] 4406      CALL DOTQP 
      001B77 09                    4407      .byte 9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001B78 20 76 65 72 73 69 6F  4408      .ascii " version "
             6E 20
      001B81 CD 0E 17         [ 4] 4409      CALL BDIGS 
      001B84 CD 0E 51         [ 4] 4410      CALL DIGS 
      001B87 CD 0E 51         [ 4] 4411      CALL DIGS 
      001B8A                       4412      _DOLIT '.' 
      001B8A CD 04 70         [ 4]    1     CALL DOLIT 
      001B8D 00 2E                    2     .word '.' 
      001B8F CD 0E 27         [ 4] 4413      CALL HOLD 
      001B92                       4414      _DROP 
      001B92 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001B95 CD 0E 51         [ 4] 4415      CALL DIGS 
      001B98 CD 0E 7C         [ 4] 4416      CALL EDIGS 
      001B9B CC 0F 7D         [ 2] 4417      JP TYPES 
                                   4418       
                                   4419 
                                   4420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4421 ;       hi      ( -- )
                                   4422 ;       Display sign-on message.
                                   4423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B9E                       4424         _HEADER HI,2,"HI"
      001B9E 1B 0F                    1         .word LINK 
                           001BA0     2         LINK=.
      001BA0 02                       3         .byte 2  
      001BA1 48 49                    4         .ascii "HI"
      001BA3                          5         HI:
      001BA3 CD 0F 96         [ 4] 4425         CALL     CR
      001BA6 CD 0F C3         [ 4] 4426         CALL     DOTQP   
      001BA9 0A                    4427         .byte      10
      001BAA 73 74 6D 38 65 46 6F  4428         .ascii     "stm8eForth"
             72 74 68
      001BB4                       4429 	_DOLIT VER 
      001BB4 CD 04 70         [ 4]    1     CALL DOLIT 
      001BB7 00 04                    2     .word VER 
      001BB9                       4430         _DOLIT EXT 
      001BB9 CD 04 70         [ 4]    1     CALL DOLIT 
      001BBC 00 00                    2     .word EXT 
      001BBE CD 1B 74         [ 4] 4431         CALL PRINT_VERSION 
      001BC1 CD 0F C3         [ 4] 4432         CALL    DOTQP
                           000001  4433 .if NUCLEO          
      001BC4 12                    4434         .byte 18
      001BC5 20 6F 6E 20 4E 55 43  4435         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4436 .endif
                           000000  4437 .if DISCOVERY
                                   4438         .byte 19
                                   4439         .ascii  " on STM8S-DISCOVERY"
                                   4440 .endif
                           000000  4441 .if DOORBELL
                                   4442         .byte 16
                                   4443         .ascii " on stm8s105k6b6"
                                   4444 .endif
      001BD7 CC 0F 96         [ 2] 4445         JP     CR
                                   4446 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                           000000  4447 WANT_DEBUG=0
                           000000  4448 .if WANT_DEBUG 
                                   4449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4450 ;       DEBUG      ( -- )
                                   4451 ;       Display sign-on message.
                                   4452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4453         _HEADER DEBUG,5,"DEBUG"
                                   4454 	CALL DOLIT
                                   4455 	.word 0x65
                                   4456 	CALL EMIT
                                   4457 	CALL ZERO
                                   4458  	CALL ZLESS 
                                   4459 	CALL DOLIT
                                   4460 	.word 0xFFFE
                                   4461 	CALL ZLESS 
                                   4462 	CALL UPLUS 
                                   4463  	_DROP 
                                   4464 	CALL DOLIT
                                   4465 	.word 3
                                   4466 	CALL UPLUS 
                                   4467 	CALL UPLUS 
                                   4468  	_DROP
                                   4469 	CALL DOLIT
                                   4470 	.word 0x43
                                   4471 	CALL UPLUS 
                                   4472  	_DROP
                                   4473 	CALL EMIT
                                   4474 	CALL DOLIT
                                   4475 	.word 0x4F
                                   4476 	CALL DOLIT
                                   4477 	.word 0x6F
                                   4478  	CALL XORR
                                   4479 	CALL DOLIT
                                   4480 	.word 0xF0
                                   4481  	CALL ANDD
                                   4482 	CALL DOLIT
                                   4483 	.word 0x4F
                                   4484  	CALL ORR
                                   4485 	CALL EMIT
                                   4486 	CALL DOLIT
                                   4487 	.word 8
                                   4488 	CALL DOLIT
                                   4489 	.word 6
                                   4490  	CALL SWAPP
                                   4491 	CALL OVER
                                   4492 	CALL XORR
                                   4493 	CALL DOLIT
                                   4494 	.word 3
                                   4495 	CALL ANDD 
                                   4496 	CALL ANDD
                                   4497 	CALL DOLIT
                                   4498 	.word 0x70
                                   4499 	CALL UPLUS 
                                   4500 	_DROP
                                   4501 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4502 	CALL ZERO
                                   4503 	CALL QBRAN
                                   4504 	.word DEBUG1
                                   4505 	CALL DOLIT
                                   4506 	.word 0x3F
                                   4507 DEBUG1:
                                   4508 	CALL DOLIT
                                   4509 	.word 0xFFFF
                                   4510 	CALL QBRAN
                                   4511 	.word DEBUG2
                                   4512 	CALL DOLIT
                                   4513 	.word 0x74
                                   4514 	CALL BRAN
                                   4515 	.word DEBUG3
                                   4516 DEBUG2:
                                   4517 	CALL DOLIT
                                   4518 	.word 0x21
                                   4519 DEBUG3:
                                   4520 	CALL EMIT
                                   4521 	CALL DOLIT
                                   4522 	.word 0x68
                                   4523 	CALL DOLIT
                                   4524 	.word 0x80
                                   4525 	CALL STORE
                                   4526 	CALL DOLIT
                                   4527 	.word 0x80
                                   4528 	CALL AT
                                   4529 	CALL EMIT
                                   4530 	CALL DOLIT
                                   4531 	.word 0x4D
                                   4532 	CALL TOR
                                   4533 	CALL RAT
                                   4534 	CALL RFROM
                                   4535 	CALL ANDD
                                   4536 	CALL EMIT
                                   4537 	CALL DOLIT
                                   4538 	.word 0x61
                                   4539 	CALL DOLIT
                                   4540 	.word 0xA
                                   4541 	CALL TOR
                                   4542 DEBUG4:
                                   4543 	CALL ONE
                                   4544 	CALL UPLUS 
                                   4545 	_DROP
                                   4546 	CALL DONXT
                                   4547 	.word DEBUG4
                                   4548 	CALL EMIT
                                   4549 	CALL DOLIT
                                   4550 	.word 0x656D
                                   4551 	CALL DOLIT
                                   4552 	.word 0x100
                                   4553 	CALL UMSTA
                                   4554 	CALL SWAPP
                                   4555 	CALL DOLIT
                                   4556 	.word 0x100
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4557 	CALL UMSTA
                                   4558 	CALL SWAPP 
                                   4559 	_DROP
                                   4560 	CALL EMIT
                                   4561 	CALL EMIT
                                   4562 	CALL DOLIT
                                   4563 	.word 0x2043
                                   4564 	CALL ZERO
                                   4565 	CALL DOLIT
                                   4566 	.word 0x100
                                   4567 	CALL UMMOD
                                   4568 	CALL EMIT
                                   4569 	CALL EMIT
                                   4570 	;JP ORIG
                                   4571 	RET
                                   4572 .endif ; WANT_DEBUG 
                                   4573 
                                   4574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4575 ;       'BOOT   ( -- a )
                                   4576 ;       The application startup vector.
                                   4577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BDA                       4578         _HEADER TBOOT,5,"'BOOT"
      001BDA 1B A0                    1         .word LINK 
                           001BDC     2         LINK=.
      001BDC 05                       3         .byte 5  
      001BDD 27 42 4F 4F 54           4         .ascii "'BOOT"
      001BE2                          5         TBOOT:
      001BE2 CD 06 D0         [ 4] 4579         CALL     DOVAR
      001BE5 40 02                 4580         .word    APP_RUN      ;application to boot
                                   4581 
                                   4582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4583 ;       COLD    ( -- )
                                   4584 ;       The hilevel cold start s=ence.
                                   4585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BE7                       4586         _HEADER COLD,4,"COLD"
      001BE7 1B DC                    1         .word LINK 
                           001BE9     2         LINK=.
      001BE9 04                       3         .byte 4  
      001BEA 43 4F 4C 44              4         .ascii "COLD"
      001BEE                          5         COLD:
                           000000  4587 .if WANT_DEBUG
                                   4588         CALL DEBUG
                                   4589 .endif ; WANT_DEBUG
      001BEE CD 04 70         [ 4] 4590 COLD1:  CALL     DOLIT
      001BF1 00 2B                 4591         .word      UZERO
      001BF3 CD 04 70         [ 4] 4592 	CALL     DOLIT
      001BF6 00 06                 4593         .word      UPP
      001BF8 CD 04 70         [ 4] 4594         CALL     DOLIT
      001BFB 00 1C                 4595 	.word      UEND-UZERO
      001BFD CD 0D 36         [ 4] 4596         CALL     CMOVE   ;initialize user area
                           000001  4597 .if WANT_FLOAT 
      001C00 CD 2C 9C         [ 4] 4598         CALL    FINIT 
                                   4599 .endif 
                                   4600 ; if APP_RUN==0 initialize with ca de 'hi'  
      001C03 90 CE 40 02      [ 2] 4601         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001C07 26 0B            [ 1] 4602         jrne 0$
      001C09 1D 00 02         [ 2] 4603         subw x,#CELLL 
      001C0C 90 AE 1B A3      [ 2] 4604         ldw y,#HI  
      001C10 FF               [ 2] 4605         ldw (x),y
      001C11 CD 1D 0C         [ 4] 4606         call UPDATRUN 
      001C14                       4607 0$:        
                                   4608 ; update LAST with APP_LAST 
                                   4609 ; if APP_LAST > LAST else do the opposite
      001C14 90 CE 40 00      [ 2] 4610         ldw y,APP_LAST 
      001C18 90 B3 1C         [ 2] 4611         cpw y,ULAST 
      001C1B 22 05            [ 1] 4612         jrugt 1$ 
                                   4613 ; save LAST at APP_LAST  
      001C1D CD 1C F4         [ 4] 4614         call UPDATLAST 
      001C20 20 06            [ 2] 4615         jra 2$
      001C22                       4616 1$: ; update LAST with APP_LAST 
      001C22 90 BF 1C         [ 2] 4617         ldw ULAST,y
      001C25 90 BF 16         [ 2] 4618         ldw UCNTXT,y
      001C28                       4619 2$:  
                                   4620 ; update APP_CP if < app_space 
      001C28 90 CE 40 04      [ 2] 4621         ldw y,APP_CP  
      001C2C 90 B3 1A         [ 2] 4622         cpw y,UCP   
      001C2F 24 06            [ 1] 4623         jruge 3$ 
      001C31 CD 1D 1D         [ 4] 4624         call UPDATCP
      001C34 90 BE 1A         [ 2] 4625         ldw y,UCP   
      001C37                       4626 3$:
      001C37 90 BF 1A         [ 2] 4627         ldw UCP,y                 
                                   4628 ; update UVP with APP_VP  
                                   4629 ; if APP_VP>UVP else do the opposite 
      001C3A 90 CE 40 06      [ 2] 4630         ldw y,APP_VP 
      001C3E 90 B3 18         [ 2] 4631         cpw y,UVP 
      001C41 22 05            [ 1] 4632         jrugt 4$
      001C43 CD 1D 34         [ 4] 4633         call UPDATVP 
      001C46 20 03            [ 2] 4634         jra 6$
      001C48                       4635 4$: ; update UVP with APP_VP 
      001C48 90 BF 18         [ 2] 4636         ldw UVP,y 
      001C4B                       4637 6$:      
      001C4B CD 14 E3         [ 4] 4638         CALL     PRESE   ;initialize data stack and TIB
      001C4E CD 1B E2         [ 4] 4639         CALL     TBOOT
      001C51 CD 0D 1F         [ 4] 4640         CALL     ATEXE   ;application boot
      001C54 CD 17 C8         [ 4] 4641         CALL     OVERT
      001C57 CC 15 00         [ 2] 4642         JP     QUIT    ;start interpretation
                                   4643 
                                   4644 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4645         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001C5A 1B E9                   31     .word LINK 
                           001C5C    32     LINK=.
      001C5C 03                      33     .byte 3 
      001C5D 46 50 21                34     .ascii "FP!"
      001C60                         35 FPSTOR:
      001C60 90 93            [ 1]   36     ldw y,x
      001C62 90 FE            [ 2]   37     ldw y,(y)
      001C64 90 9F            [ 1]   38     ld a,yl 
      001C66 B7 34            [ 1]   39     ld FPTR,a 
      001C68 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C6B 90 93            [ 1]   41     ldw y,x 
      001C6D 90 FE            [ 2]   42     ldw y,(y)
      001C6F 90 BF 35         [ 2]   43     ldw PTR16,y
      001C72 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C75 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C76 1C 5C                   52     .word LINK 
                           001C78    53 LINK=.
      001C78 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001C79 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C7F                         56 EEPROM: 
      001C7F 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C83 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C86 EF 02            [ 2]   59     ldw (2,x),y 
      001C88 90 5F            [ 1]   60     clrw y 
      001C8A FF               [ 2]   61     ldw (x),y 
      001C8B 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C8C 1C 78                   68 	.word LINK 
                           001C8E    69 	LINK=.
      001C8E 08                      70 	.byte 8 
      001C8F 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C97                         72 EEPLAST:
      001C97 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C9A 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C9E EF 02            [ 2]   75 	ldw (2,x),y 
      001CA0 90 5F            [ 1]   76 	clrw y 
      001CA2 FF               [ 2]   77 	ldw (x),y 
      001CA3 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001CA4 1C 8E                   84 	.word LINK 
                           001CA6    85 	LINK=.
      001CA6 07                      86 	.byte 7
      001CA7 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001CAE                         88 EEPRUN:
      001CAE 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001CB1 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001CB5 EF 02            [ 2]   91 	ldw (2,x),y 
      001CB7 90 5F            [ 1]   92 	clrw y 
      001CB9 FF               [ 2]   93 	ldw (x),y 
      001CBA 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001CBB 1C A6                  100 	.word LINK
                           001CBD   101 	LINK=.
      001CBD 06                     102 	.byte 6 
      001CBE 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001CC4                        104 EEPCP:
      001CC4 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001CC7 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001CCB EF 02            [ 2]  107 	ldw (2,x),y 
      001CCD 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001CCF FF               [ 2]  109 	ldw (x),y 
      001CD0 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001CD1 1C BD                  116 	.word LINK
                           001CD3   117 	LINK=.
      001CD3 06                     118 	.byte 6
      001CD4 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001CDA                        120 EEPVP:
      001CDA 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001CDD 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001CE1 EF 02            [ 2]  123 	ldw (2,x),y 
      001CE3 90 5F            [ 1]  124 	clrw y 
      001CE5 FF               [ 2]  125 	ldw (x),y 
      001CE6 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001CE7 1C D3                  132 	.word LINK 
                           001CE9   133 	LINK=.
      001CE9 0A                     134 	.byte 10
      001CEA 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001CF4                        136 UPDATLAST:
      001CF4 CD 07 8F         [ 4]  137 	call LAST
      001CF7 CD 04 E4         [ 4]  138 	call AT  
      001CFA CD 1C 97         [ 4]  139 	call EEPLAST
      001CFD CC 1E EA         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001D00 1C E9                  146 	.word LINK
                           001D02   147 	LINK=.
      001D02 09                     148 	.byte 9
      001D03 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001D0C                        150 UPDATRUN:
      001D0C CD 1C AE         [ 4]  151 	call EEPRUN
      001D0F CC 1E EA         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001D12 1D 02                  158 	.word LINK 
                           001D14   159 	LINK=.
      001D14 08                     160 	.byte 8 
      001D15 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



             50
      001D1D                        162 UPDATCP:
      001D1D CD 07 7F         [ 4]  163 	call CPP 
      001D20 CD 04 E4         [ 4]  164 	call AT 
      001D23 CD 1C C4         [ 4]  165 	call EEPCP 
      001D26 CC 1E EA         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001D29 1D 14                  172 	.word LINK
                           001D2B   173 	LINK=.
      001D2B 08                     174 	.byte 8 
      001D2C 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001D34                        176 UPDATVP:
      001D34 CD 07 71         [ 4]  177 	call VPP 
      001D37 CD 04 E4         [ 4]  178 	call AT
      001D3A CD 1C DA         [ 4]  179 	call EEPVP 
      001D3D CC 1E EA         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001D40 1D 2B                  187     .word LINK 
                           001D42   188 LINK=.
      001D42 02                     189     .byte 2
      001D43 46 40                  190     .ascii "F@"
      001D45                        191 FARAT:
      001D45 CD 1C 60         [ 4]  192     call FPSTOR
      001D48 CC 1E 0D         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001D4B 1D 42                  200     .word LINK
                           001D4D   201     LINK=.
      001D4D 03                     202     .byte 3 
      001D4E 46 43 40               203     .ascii "FC@" 
      001D51                        204 FARCAT:
      001D51 CD 1C 60         [ 4]  205     call FPSTOR
      001D54 CC 1E 2F         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001D57 1D 4D                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           001D59   215 LINK=.
      001D59 06                     216     .byte 6 
      001D5A 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001D60                        218 UNLKEE:
      001D60 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001D64 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001D68 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D6C 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D70 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D75 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D76 1D 59                  231     .word LINK 
                           001D78   232 LINK=. 
      001D78 06                     233     .byte 6 
      001D79 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D7F                        235 UNLKFL:
      001D7F 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D83 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D87 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D8B 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D8F 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D94 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D95 1D 78                  248 	.word LINK 
                           001D97   249 	LINK=.
      001D97 06                     250 	.byte 6
      001D98 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D9E                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D9E 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001DA1 3D 34            [ 1]  256 	tnz FPTR 
      001DA3 26 16            [ 1]  257 	jrne 4$
      001DA5 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001DA9 24 10            [ 1]  259     jruge 4$
      001DAB 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001DAF 25 0D            [ 1]  261     jrult 9$
      001DB1 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001DB5 22 07            [ 1]  263 	jrugt 9$
      001DB7 CD 1D 60         [ 4]  264 	call UNLKEE
      001DBA 81               [ 4]  265 	ret 
      001DBB CD 1D 7F         [ 4]  266 4$: call UNLKFL
      001DBE 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001DBF 1D 97                  274 	.word LINK 
                           001DC1   275 	LINK=.
      001DC1 04                     276 	.byte 4 
      001DC2 4C 4F 43 4B            277 	.ascii "LOCK" 
      001DC6                        278 LOCK: 
      001DC6 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001DCA 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DCE 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001DCF 1D C1                  287 	.word LINK 
                           001DD1   288 	LINK=. 
      001DD1 08                     289 	.byte 8 
      001DD2 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001DDA                        291 INC_FPTR:
      001DDA 3C 36            [ 1]  292 	inc PTR8 
      001DDC 26 0C            [ 1]  293 	jrne 1$
      001DDE 90 89            [ 2]  294 	pushw y 
      001DE0 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001DE3 90 5C            [ 1]  296 	incw y 
      001DE5 90 BF 34         [ 2]  297 	ldw FPTR,y
      001DE8 90 85            [ 2]  298 	popw y  
      001DEA 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001DEB 1D D1                  305 	.word LINK 
                           001DED   306 	LINK=.
      001DED 04                     307 	.byte 4 
      001DEE 50 54 52 2B            308 	.ascii "PTR+"
      001DF2                        309 PTRPLUS:
      001DF2 90 93            [ 1]  310 	ldw y,x 
      001DF4 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001DF7 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001DFB 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001DFE 24 02            [ 1]  314 	jrnc 1$
      001E00 3C 34            [ 1]  315 	inc FPTR 
      001E02 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001E03 1D ED                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001E05   324 	LINK=.
      001E05 07                     325 	.byte 7 
      001E06 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001E0D                        327 EE_READ:
      001E0D 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001E10 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001E14 90 95            [ 1]  330 	ld yh,a 
      001E16 CD 1D DA         [ 4]  331 	call INC_FPTR 
      001E19 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001E1D CD 1D DA         [ 4]  333 	call INC_FPTR 
      001E20 90 97            [ 1]  334 	ld yl,a 
      001E22 FF               [ 2]  335 	ldw (x),y 
      001E23 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001E24 1E 05                  342 	.word LINK 
                           001E26   343 	LINK=.
      001E26 08                     344 	.byte 8
      001E27 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001E2F                        346 EE_CREAD:
      001E2F 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001E32 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001E36 CD 1D DA         [ 4]  349 	call INC_FPTR
      001E39 90 5F            [ 1]  350 	clrw y 
      001E3B 90 97            [ 1]  351 	ld yl,a 
      001E3D FF               [ 2]  352 	ldw (x),y 
      001E3E 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001E3F 1E 26                  362 	.word LINK 
                           001E41   363 	LINK=. 
      001E41 07                     364 	.byte 7 
      001E42 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001E49                        367 WR_BYTE:
      001E49 CD 04 64         [ 4]  368 	call FC_XOFF
      001E4C 90 93            [ 1]  369 	ldw y,x 
      001E4E 90 FE            [ 2]  370 	ldw y,(y)
      001E50 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001E53 90 9F            [ 1]  372 	ld a,yl
      001E55 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001E59 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E5E CD 04 4E         [ 4]  375 	call FC_XON
      001E61 CC 1D DA         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001E64 1E 41                  385 	.word LINK 
                           001E66   386 	LINK=.
      001E66 07                     387 	.byte 7 
      001E67 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E6E                        389 WR_WORD:
      001E6E CD 04 64         [ 4]  390 	call FC_XOFF
      001E71 90 93            [ 1]  391 	ldw y,x
      001E73 90 FE            [ 2]  392 	ldw y,(y)
      001E75 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E78 90 9E            [ 1]  394 	ld a,yh 
      001E7A 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E7E 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E83 CD 1D DA         [ 4]  397 	call INC_FPTR 
      001E86 90 9F            [ 1]  398 	ld a,yl 
      001E88 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E8C 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E91 CD 04 4E         [ 4]  401 	call FC_XON
      001E94 CC 1D DA         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E97 1E 66                  409     .word LINK 
                           001E99   410 	LINK=.
      001E99 04                     411     .byte 4 
      001E9A 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E9E                        417 EECSTORE:
      001E9E 52 02            [ 2]  418 	sub sp,#VSIZE
      001EA0 CD 1C 60         [ 4]  419     call FPSTOR
      001EA3 E6 01            [ 1]  420 	ld a,(1,x)
      001EA5 43               [ 1]  421 	cpl a 
      001EA6 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001EA8 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001EAA CD 1D 9E         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001EAD 3D 34            [ 1]  426 	tnz FPTR 
      001EAF 26 19            [ 1]  427 	jrne 2$
      001EB1 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001EB4 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001EB8 2B 10            [ 1]  430 	jrmi 2$
      001EBA 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001EBE 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001EC0 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001EC2 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001EC6 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001ECA                        437 2$: 
      001ECA CD 1E 49         [ 4]  438 	call WR_BYTE 	
      001ECD 0D 02            [ 1]  439 	tnz (OPT,sp)
      001ECF 27 0D            [ 1]  440 	jreq 3$ 
      001ED1 7B 01            [ 1]  441     ld a,(BTW,sp)
      001ED3 90 5F            [ 1]  442     clrw y
      001ED5 90 97            [ 1]  443 	ld yl,a 
      001ED7 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001EDA FF               [ 2]  445 	ldw (x),y 
      001EDB CD 1E 49         [ 4]  446 	call WR_BYTE
      001EDE                        447 3$: 
      001EDE CD 1D C6         [ 4]  448 	call LOCK 
      001EE1 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001EE3 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001EE4 1E 99                  456 	.word LINK 
                           001EE6   457 	LINK=.
      001EE6 03                     458 	.byte 3 
      001EE7 45 45 21               459 	.ascii "EE!"
      001EEA                        460 EESTORE:
      001EEA CD 1C 60         [ 4]  461 	call FPSTOR 
      001EED CD 1D 9E         [ 4]  462 	call UNLOCK 
      001EF0 90 93            [ 1]  463 	ldw y,x 
      001EF2 90 FE            [ 2]  464 	ldw y,(y)
      001EF4 90 89            [ 2]  465 	pushw y 
      001EF6 90 5E            [ 1]  466 	swapw y 
      001EF8 FF               [ 2]  467 	ldw (x),y 
      001EF9 CD 1E 49         [ 4]  468 	call WR_BYTE 
      001EFC 90 85            [ 2]  469 	popw y 
      001EFE 1D 00 02         [ 2]  470 	subw x,#CELLL
      001F01 FF               [ 2]  471 	ldw (x),y 
      001F02 CD 1E 49         [ 4]  472 	call WR_BYTE
      001F05 CC 1D C6         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001F08 1E E6                  481 	.word LINK 
                           001F0A   482 	LINK=. 
      001F0A 09                     483 	.byte 9 
      001F0B 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001F14                        485 row_erase:
      001F14 CD 04 64         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F17 CD 1C 60         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001F1A 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001F1D 90 AE 1F 6D      [ 2]  491 	ldw y,#row_erase_proc
      001F21 FF               [ 2]  492 	ldw (x),y 
      001F22 CD 0C FA         [ 4]  493 	call PAD 
      001F25 90 AE 1F 94      [ 2]  494 	ldw y,#row_erase_proc_end 
      001F29 72 A2 1F 6D      [ 2]  495 	subw y,#row_erase_proc
      001F2D 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001F30 FF               [ 2]  497 	ldw (x),y 
      001F31 CD 0D 36         [ 4]  498 	call CMOVE 
      001F34                        499 block_erase:
      001F34 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001F37 90 A3 36 00      [ 2]  501 	cpw y,#app_space 
      001F3B 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001F3D 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001F41 24 04            [ 1]  505 	jruge 1$
      001F43 CD 04 4E         [ 4]  506 	call FC_XON
      001F46 81               [ 4]  507 	ret ; bad address 
      001F47 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001F4B 23 04            [ 2]  509 	jrule 2$ 
      001F4D CD 04 4E         [ 4]  510 	call FC_XON
      001F50 81               [ 4]  511 	ret ; bad address 
      001F51                        512 2$:	
      001F51 CD 1D 60         [ 4]  513 	call UNLKEE 
      001F54 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001F56                        516 erase_flash:
      001F56 CD 1D 7F         [ 4]  517 	call UNLKFL 
      001F59                        518 proceed_erase:
      001F59 CD 0C FA         [ 4]  519 	call PAD 
      001F5C 90 93            [ 1]  520 	ldw y,x
      001F5E 90 FE            [ 2]  521 	ldw y,(y)
      001F60 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001F63 90 FD            [ 4]  523 	call (y) 
      001F65 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001F69 CD 04 4E         [ 4]  525 	call FC_XON
      001F6C 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F6D                        529 row_erase_proc:
      001F6D 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F71 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F75 4F               [ 1]  532 	clr a 
      001F76 90 5F            [ 1]  533 	clrw y 
      001F78 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F7C 90 5C            [ 1]  535     incw y
      001F7E 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F82 90 5C            [ 1]  537     incw y
      001F84 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F88 90 5C            [ 1]  539     incw y
      001F8A 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F8E 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001F93 81               [ 4]  542 	ret
      001F94                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F94                        556 copy_buffer:
      001F94 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F96 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F9A 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F9E 90 5F            [ 1]  561 	clrw y
      001FA0 F6               [ 1]  562 1$:	ld a,(x)
      001FA1 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001FA5 5C               [ 1]  564 	incw x 
      001FA6 90 5C            [ 1]  565 	incw y 
      001FA8 0A 01            [ 1]  566 	dec (BCNT,sp)
      001FAA 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001FAC 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001FB1 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001FB2 81               [ 4]  571 	ret 
      001FB3                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001FB3                        578 copy_prog_to_ram:
      001FB3 1D 00 06         [ 2]  579 	subw x,#6
      001FB6 90 AE 1F 94      [ 2]  580 	ldw y,#copy_buffer 
      001FBA EF 04            [ 2]  581 	ldw (4,x),y 
      001FBC 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001FC0 EF 02            [ 2]  583 	ldw (2,x),y 
      001FC2 90 AE 1F B3      [ 2]  584 	ldw y,#copy_buffer_end 
      001FC6 72 A2 1F 94      [ 2]  585 	subw y,#copy_buffer  
      001FCA FF               [ 2]  586 	ldw (x),y 
      001FCB CD 0D 36         [ 4]  587 	call CMOVE 
      001FCE 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001FCF 1F 0A                  597 	.word LINK 
                           001FD1   598 	LINK=.
      001FD1 06                     599 	.byte 6 
      001FD2 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001FD8                        601 write_row:
      001FD8 CD 04 64         [ 4]  602 	call FC_XOFF
      001FDB CD 1C 60         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001FDE A6 80            [ 1]  605 	ld a,#0x80 
      001FE0 B4 36            [ 1]  606 	and a,PTR8 
      001FE2 B7 36            [ 1]  607 	ld PTR8,a  
      001FE4 CD 1F B3         [ 4]  608 	call copy_prog_to_ram
      001FE7 CD 1D 9E         [ 4]  609 	call UNLOCK
      001FEA 90 93            [ 1]  610 	ldw y,x 
      001FEC 90 FE            [ 2]  611 	ldw y,(y)
      001FEE 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001FF1 89               [ 2]  613 	pushw x 
      001FF2 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001FF3 CD 17 00         [ 4]  615 	call TIBBASE
      001FF6 CD 1D C6         [ 4]  616 	call LOCK
      001FF9 85               [ 2]  617 	popw x 
      001FFA CD 04 4E         [ 4]  618 	call FC_XON 
      001FFD 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001FFE 1F D1                  627 		.word LINK 
                           002000   628 		LINK=.
      002000 07                     629 		.byte 7 
      002001 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      002008                        631 set_option: 
      002008 90 93            [ 1]  632 		ldw y,x 
      00200A 90 FE            [ 2]  633 		ldw y,(y)
      00200C 27 06            [ 1]  634 		jreq 1$
      00200E 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002012 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002014 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      002017 81               [ 4]  639 		ret
      002018 90 58            [ 2]  640 2$:		sllw y 
      00201A 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      00201E FF               [ 2]  642 		ldw (x),y 
      00201F 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002022 90 5F            [ 1]  644 		clrw y 
      002024 FF               [ 2]  645 		ldw (x),y 
      002025 CD 1E 9E         [ 4]  646 		call EECSTORE
      002028 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      002029 20 00                  656 	.word LINK  
                           00202B   657 	LINK=.
      00202B 08                     658 	.byte 8 
      00202C 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002034                        660 pristine:
                                    661 ;;; erase EEPROM
      002034 CD 1C 7F         [ 4]  662 	call EEPROM 
      002037 CD 08 28         [ 4]  663 1$:	call DDUP 
      00203A CD 1F 14         [ 4]  664 	call row_erase
      00203D 90 93            [ 1]  665 	ldw y,x 
      00203F 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002042 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      002046 EF 02            [ 2]  668 	ldw (2,x),y
      002048 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      00204C 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      00204E 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002052 FF               [ 2]  673 2$:	ldw (x),y   
      002053 90 5F            [ 1]  674 	clrw y 
      002055 EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      002057 CD 08 28         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      00205A CD 20 08         [ 4]  677 	call set_option
      00205D 90 93            [ 1]  678 	ldw y,x 
      00205F 90 FE            [ 2]  679 	ldw y,(y)
      002061 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002063 90 A3 00 08      [ 2]  681 	cpw y,#8 
      002067 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      002069 90 AE 36 00      [ 2]  684 	ldw y,#app_space
      00206D EF 02            [ 2]  685 	ldw (2,x),y  
      00206F 90 5F            [ 1]  686 	clrw y 
      002071 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002072 CD 1F 14         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      002075 1D 00 02         [ 2]  690 	subw x,#CELLL 
      002078 90 5F            [ 1]  691 	clrw y  
      00207A FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      00207B CD 06 1A         [ 4]  693 	call DUPP  
      00207E CD 20 9B         [ 4]  694 	call reset_vector
      002081 90 93            [ 1]  695 	ldw y,x 
      002083 90 FE            [ 2]  696 	ldw y,(y)
      002085 90 5C            [ 1]  697 	incw y   ; next vector 
      002087 90 A3 00 19      [ 2]  698 	cpw y,#25 
      00208B 25 ED            [ 1]  699 	jrult 4$
      00208D CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002090 20 2B                  708 	.word LINK 
                           002092   709 	LINK=. 
      002092 08                     710 	.byte 8 
      002093 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      00209B                        712 reset_vector:
      00209B 90 93            [ 1]  713 	ldw y,x
      00209D 1C 00 02         [ 2]  714 	addw x,#CELLL 
      0020A0 90 FE            [ 2]  715 	ldw y,(y)
      0020A2 90 A3 00 17      [ 2]  716 	cpw y,#23 
      0020A6 27 3A            [ 1]  717 	jreq 9$
      0020A8 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      0020AC 22 34            [ 1]  719 	jrugt 9$  
      0020AE 90 58            [ 2]  720 	sllw y 
      0020B0 90 58            [ 2]  721 	sllw y 
      0020B2 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0020B6 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0020B9 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0020BC EF 02            [ 2]  725 	ldw (2,x),y 
      0020BE 90 5F            [ 1]  726 	clrw y
      0020C0 FF               [ 2]  727 	ldw (x),y 
      0020C1 A6 82            [ 1]  728 	ld a,#0x82 
      0020C3 90 95            [ 1]  729 	ld yh,a
      0020C5 EF 04            [ 2]  730 	ldw (4,x),y
      0020C7 CD 1E EA         [ 4]  731 	call EESTORE
      0020CA 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0020CD 90 5F            [ 1]  733 	clrw y 
      0020CF FF               [ 2]  734 	ldw (x),y 
      0020D0 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0020D4 EF 04            [ 2]  736 	ldw (4,x),y 
      0020D6 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0020D9 72 A9 00 02      [ 2]  738 	addw y,#2
      0020DD EF 02            [ 2]  739 	ldw (2,x),y 
      0020DF CD 1E EA         [ 4]  740 	call EESTORE
      0020E2 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0020E3 20 92                  750 	.word LINK 
                           0020E5   751 	LINK=.
      0020E5 07                     752 	.byte 7
      0020E6 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0020ED                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020ED 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0020EF 90 93            [ 1]  761 	ldw y,x 
      0020F1 90 FE            [ 2]  762 	ldw y,(y)
      0020F3 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0020F5 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0020F7 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0020FA BF 35            [ 2]  766 	ldw PTR16,X
      0020FC AE FF FC         [ 2]  767 	ldw x,#-4 
      0020FF 1C 00 04         [ 2]  768 1$:	addw x,#4
      002102 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      002105 27 22            [ 1]  770 	jreq 9$
      002107 90 93            [ 1]  771 	ldw y,x  
      002109 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      00210C 11 03            [ 1]  773 	cp a,(CADR,sp)
      00210E 25 EF            [ 1]  774 	jrult 1$
      002110 90 5C            [ 1]  775 	incw y 
      002112 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      002115 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      002117 25 E6            [ 1]  778 	jrult 1$ 
      002119 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      00211B 54               [ 2]  780 	srlw x
      00211C 54               [ 2]  781 	srlw x 
      00211D 90 93            [ 1]  782 	ldw y,x 
      00211F 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002121 FF               [ 2]  784 	ldw (x),y
      002122 CD 20 9B         [ 4]  785 	call reset_vector
      002125 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      002127 20 D6            [ 2]  787 	jra 1$
      002129 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      00212B 1C 00 02         [ 2]  789 	addw x,#CELLL 
      00212E 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002130 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002131 20 E5                  799 	.word LINK
                           002133   800 	LINK=.
      002133 08                     801 	.byte 8 
      002134 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      00213C                        803 set_vector:
      00213C 90 93            [ 1]  804     ldw y,x 
      00213E 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002141 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002143 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      002147 23 04            [ 2]  808 	jrule 2$
      002149 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      00214C 81               [ 4]  810 	ret
      00214D 90 58            [ 2]  811 2$:	sllw y 
      00214F 90 58            [ 2]  812 	sllw y 
      002151 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002155 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      002158 A6 82            [ 1]  815 	ld a,#0x82 
      00215A 90 95            [ 1]  816 	ld yh,a 
      00215C E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      00215E 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002160 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002163 EF 04            [ 2]  821 	ldw (4,x),y 
      002165 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002168 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      00216A 90 5F            [ 1]  824 	clrw y 
      00216C FF               [ 2]  825 	ldw (x),y   ; as a double 
      00216D CD 1E EA         [ 4]  826 	call EESTORE 
      002170 90 93            [ 1]  827 	ldw y,x 
      002172 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      002175 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002178 EF 04            [ 2]  830 	ldw (4,x),y 
      00217A 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      00217D 72 A9 00 02      [ 2]  832 	addw y,#2 
      002181 EF 02            [ 2]  833 	ldw (2,x),y 
      002183 90 5F            [ 1]  834 	clrw y 
      002185 FF               [ 2]  835 	ldw (x),y 
      002186 CD 1E EA         [ 4]  836 	call EESTORE
      002189 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      00218C 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      00218D 21 33                  845 	.word LINK
                           00218F   846 	LINK=.
      00218F 03                     847 	.byte 3
      002190 45 45 2C               848 	.ascii "EE,"
      002193                        849 EE_COMMA:
      002193 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002196 90 BE 1A         [ 2]  851 	ldw y,UCP
      002199 90 89            [ 2]  852 	pushw y 
      00219B EF 02            [ 2]  853 	ldw (2,x),y 
      00219D 90 5F            [ 1]  854 	clrw y 
      00219F FF               [ 2]  855 	ldw (x),y
      0021A0 CD 1E EA         [ 4]  856 	call EESTORE
      0021A3 90 85            [ 2]  857 	popw y 
      0021A5 72 A9 00 02      [ 2]  858 	addw y,#2
      0021A9 90 BF 1A         [ 2]  859 	ldw UCP,y
      0021AC 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0021AD 21 8F                  867 	.word LINK 
                           0021AF   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021AF 04                     869 	.byte 4 
      0021B0 45 45 43 2C            870 	.ascii "EEC,"
      0021B4                        871 EE_CCOMMA:
      0021B4 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0021B7 90 BE 1A         [ 2]  873 	ldw y,UCP
      0021BA 90 89            [ 2]  874 	pushw y 
      0021BC EF 02            [ 2]  875 	ldw (2,x),y 
      0021BE 90 5F            [ 1]  876 	clrw y 
      0021C0 FF               [ 2]  877 	ldw (x),y
      0021C1 CD 1E 9E         [ 4]  878 	call EECSTORE
      0021C4 90 85            [ 2]  879 	popw y 
      0021C6 90 5C            [ 1]  880 	incw y 
      0021C8 90 BF 1A         [ 2]  881 	ldw UCP,y
      0021CB 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0021CC 21 AF                  889 	.word LINK 
                           0021CE   890 	LINK=.
      0021CE 07                     891 	.byte 7 
      0021CF 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0021D6                        893 ROW2BUF: 
      0021D6 CD 1C 60         [ 4]  894 	call FPSTOR 
      0021D9 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0021DB 88               [ 1]  896 	push a 
      0021DC B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0021DE B7 36            [ 1]  898 	ld PTR8,a
      0021E0 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0021E4 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0021E8 90 F7            [ 1]  901 	ld (y),a
      0021EA CD 1D DA         [ 4]  902 	call INC_FPTR
      0021ED 90 5C            [ 1]  903 	incw y 
      0021EF 0A 01            [ 1]  904 	dec (1,sp)
      0021F1 26 F1            [ 1]  905 	jrne 1$ 
      0021F3 84               [ 1]  906 	pop a 
      0021F4 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0021F5 21 CE                  915 	.word LINK 
                           0021F7   916 	LINK=.
      0021F7 07                     917 	.byte 7 
      0021F8 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0021FF                        919 BUF2ROW:
      0021FF CD 07 1E         [ 4]  920 	call TBUF ; ( ud rb -- )
      002202 CD 07 DE         [ 4]  921 	call ROT 
      002205 CD 07 DE         [ 4]  922 	call ROT  ; ( rb ud -- )
      002208 CD 1F D8         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00220B 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      00220C 21 F7                  931 	.word LINK 
                           00220E   932 	LINK=.
      00220E 05                     933 	.byte 5 
      00220F 52 46 52 45 45         934 	.ascii "RFREE"
      002214                        935 RFREE:
      002214 E6 01            [ 1]  936 	ld a,(1,x)
      002216 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002218 B7 26            [ 1]  938 	ld YTEMP,a 
      00221A A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      00221C B0 26            [ 1]  940 	sub a,YTEMP 
      00221E 90 5F            [ 1]  941 	clrw y 
      002220 90 97            [ 1]  942 	ld yl,a
      002222 FF               [ 2]  943 	ldw (x),y 
      002223 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002224 22 0E                  955 	.word LINK 
                           002226   956 	LINK=. 
      002226 06                     957 	.byte 6
      002227 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      00222D                        960 RAM2EE:
                                    961 ; copy ud on top 
      00222D 90 93            [ 1]  962 	ldw y,x 
      00222F 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002232 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      002235 90 93            [ 1]  965 	ldw y,x 
      002237 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      00223A 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      00223D FF               [ 2]  968 	ldw (x),y 
      00223E 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002241 EF 02            [ 2]  970 	ldw (2,x),y 
      002243 CD 21 D6         [ 4]  971 	call ROW2BUF 
      002246 90 93            [ 1]  972 	ldw y,x 
      002248 90 EE 06         [ 2]  973 	ldw y,(6,y)
      00224B 90 89            [ 2]  974 	pushw y ; udl 
      00224D 90 9F            [ 1]  975 	ld a,yl
      00224F A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002251 90 5F            [ 1]  977 	clrw y 
      002253 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002255 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      002259 1D 00 02         [ 2]  980 	subw x,#CELLL 
      00225C FF               [ 2]  981 	ldw (x),y  
      00225D CD 06 2A         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002260 CD 05 35         [ 4]  983 	call RFROM  
      002263 CD 22 14         [ 4]  984 	call RFREE 
      002266 CD 09 80         [ 4]  985 	call MIN
      002269 CD 06 1A         [ 4]  986 	call DUPP 
      00226C CD 05 E3         [ 4]  987 	call TOR  
      00226F CD 0D 36         [ 4]  988 	call CMOVE
      002272 CD 21 FF         [ 4]  989 	call BUF2ROW 
      002275 CD 05 35         [ 4]  990 	call RFROM 
      002278 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002279 22 26                  999 	.word LINK 
                           00227B  1000 	LINK=. 
      00227B 05                    1001 	.byte 5 
      00227C 46 41 44 44 52        1002 	.ascii "FADDR"
      002281                       1003 FADDR:
      002281 CC 0C 0F         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002284 22 7B                 1020 	.word LINK 
                           002286  1021 	LINK=.
      002286 05                    1022 	.byte 5 
      002287 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      00228C                       1024 FMOVE:
      00228C CD 07 30         [ 4] 1025 	call TFLASH 
      00228F CD 04 E4         [ 4] 1026 	CALL AT 
      002292 CD 04 99         [ 4] 1027 	CALL QBRAN 
      002295 23 10                 1028 	.word no_move  
      002297 CD 07 7F         [ 4] 1029 	call CPP
      00229A CD 04 E4         [ 4] 1030 	call AT  
      00229D CD 06 1A         [ 4] 1031 	call DUPP ; ( udl udl -- )
      0022A0 CD 07 63         [ 4] 1032 	call CNTXT 
      0022A3 CD 04 E4         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0022A6 CD 04 70         [ 4] 1034 	call DOLIT 
      0022A9 00 02                 1035 	.word 2 
      0022AB CD 08 D3         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0022AE CD 06 2A         [ 4] 1037 	call SWAPP 
      0022B1 CD 22 81         [ 4] 1038 	call FADDR 
      0022B4 CD 07 DE         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0022B7 CD 06 1A         [ 4] 1040 	call DUPP 
      0022BA CD 05 E3         [ 4] 1041 	call TOR    ; R: a 
      0022BD                       1042 FMOVE2: 
      0022BD CD 0C E9         [ 4] 1043 	call HERE 
      0022C0 CD 05 46         [ 4] 1044 	call RAT 
      0022C3 CD 08 D3         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0022C6                       1046 next_row:
      0022C6 CD 06 1A         [ 4] 1047 	call DUPP 
      0022C9 CD 05 E3         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0022CC CD 22 2D         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0022CF CD 06 1A         [ 4] 1050 	call DUPP 
      0022D2 CD 05 E3         [ 4] 1051 	call TOR
      0022D5 CD 08 3D         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0022D8 CD 06 1A         [ 4] 1053 	call DUPP 
      0022DB CD 0C 0F         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0022DE CD 05 35         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0022E1 CD 05 35         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0022E4 CD 06 42         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0022E7 CD 08 D3         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0022EA CD 06 1A         [ 4] 1059 	call DUPP 
      0022ED CD 04 99         [ 4] 1060 	call QBRAN
      0022F0 23 09                 1061 	.word fmove_done 
      0022F2 CD 06 2A         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0022F5 CD 05 35         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0022F8 CD 08 3D         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0022FB CD 06 1A         [ 4] 1065 	call DUPP 
      0022FE CD 05 E3         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002301 CD 06 2A         [ 4] 1067 	call SWAPP 
      002304 CD 04 B5         [ 4] 1068 	call BRAN
      002307 22 C6                 1069 	.word next_row  
      002309                       1070 fmove_done:	
      002309 CD 05 35         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00230C 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00230F 81               [ 4] 1073  	ret  
      002310                       1074 no_move:
      002310 CD 0C 0F         [ 4] 1075 	call ZERO
      002313 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002314 22 86                 1083 	.word LINK 
                           002316  1084 	LINK=.
      002316 09                    1085 	.byte 9
      002317 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002320                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002320 CD 1C DA         [ 4] 1089 	call EEPVP 
      002323                       1090 	_DROP 
      002323 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002326 CD 04 E4         [ 4] 1091 	call AT
      002329 CD 07 71         [ 4] 1092 	call VPP 
      00232C CD 04 D2         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      00232F CD 1C C4         [ 4] 1095 	call EEPCP 
      002332                       1096 	_DROP
      002332 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002335 CD 04 E4         [ 4] 1097 	call AT
      002338 CD 04 70         [ 4] 1098 	call DOLIT 
      00233B 00 02                 1099 	.word 2 
      00233D CD 08 3D         [ 4] 1100 	call PLUS 
      002340 CD 06 1A         [ 4] 1101 	call DUPP 
      002343 CD 07 63         [ 4] 1102 	call CNTXT 
      002346 CD 04 D2         [ 4] 1103 	call STORE
      002349 CD 07 8F         [ 4] 1104 	call LAST
      00234C CD 04 D2         [ 4] 1105 	call STORE 
      00234F CD 1C F4         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002352 CD 07 7F         [ 4] 1108 	call CPP 
      002355 CD 04 D2         [ 4] 1109 	call STORE
      002358 CD 1D 1D         [ 4] 1110 	call UPDATCP 
      00235B 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      00235C 23 16                 1117 	.word LINK 
                           00235E  1118 	LINK=. 
      00235E 06                    1119 	.byte 6
      00235F 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      002365                       1121 IFMOVE:
      002365 CD 07 30         [ 4] 1122 	call TFLASH 
      002368 CD 04 E4         [ 4] 1123 	CALL AT 
      00236B CD 04 99         [ 4] 1124 	CALL QBRAN 
      00236E 23 10                 1125 	.word no_move 
      002370 CD 07 7F         [ 4] 1126 	call CPP 
      002373 CD 04 E4         [ 4] 1127 	call AT 
      002376 CD 06 1A         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002379 CD 1C DA         [ 4] 1129 	call EEPVP 
      00237C                       1130 	_DROP
      00237C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00237F CD 04 E4         [ 4] 1131 	call AT  ; ( udl udl a )
      002382 CD 05 E3         [ 4] 1132 	call TOR 
      002385 CD 22 81         [ 4] 1133 	call FADDR
      002388 CD 05 46         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      00238B CC 22 BD         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           000001  4646 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4647         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      00238E 23 5E                   34         .word LINK 
                           002390    35         LINK=.
      002390 02                      36         .byte 2
      002391 50 49                   37         .ascii "PI" 
      002393                         38 PII:
      002393 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      002396 90 AE 01 63      [ 2]   40         ldw y,#355 
      00239A EF 02            [ 2]   41         ldw (2,x),y 
      00239C 90 AE 00 71      [ 2]   42         ldw y,#113 
      0023A0 FF               [ 2]   43         ldw (x),y 
      0023A1 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      0023A2 23 90                   51         .word LINK 
                           0023A4    52         LINK=.
      0023A4 05                      53         .byte 5 
      0023A5 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0023AA                         55 SQRT2:
      0023AA 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      0023AD 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      0023B1 EF 02            [ 2]   58         ldw (2,x),y 
      0023B3 90 AE 36 24      [ 2]   59         ldw y,#13860 
      0023B7 FF               [ 2]   60         ldw (x),y 
      0023B8 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      0023B9 23 A4                   66         .word LINK 
                           0023BB    67         LINK=.
      0023BB 05                      68         .byte 5
      0023BC 53 51 52 54 33          69         .ascii "SQRT3" 
      0023C1                         70 SQRT3: 
      0023C1 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      0023C4 90 AE 49 81      [ 2]   72     ldw y,#18817 
      0023C8 EF 02            [ 2]   73     ldw (2,x),y 
      0023CA 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      0023CE FF               [ 2]   75     ldw (x),y 
      0023CF 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      0023D0 23 BB                   81         .word LINK 
                           0023D2    82         LINK=.
      0023D2 01                      83         .byte 1
      0023D3 45                      84         .ascii "E" 
      0023D4                         85 ENEPER:
      0023D4 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      0023D7 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      0023DB EF 02            [ 2]   88     ldw (2,x),y 
      0023DD 90 AE 29 32      [ 2]   89     ldw y,#10546 
      0023E1 FF               [ 2]   90     ldw (x),y 
      0023E2 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      0023E3 23 D2                   95         .word LINK 
                           0023E5    96         LINK=.
      0023E5 06                      97         .byte 6 
      0023E6 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0023EC                         99 SQRT10:
      0023EC 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0023EF 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0023F3 EF 02            [ 2]  102     ldw (2,x),y 
      0023F5 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0023F9 FF               [ 2]  104     ldw (x),y 
      0023FA 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0023FB 23 E5                  110         .word LINK 
                           0023FD   111         LINK=. 
      0023FD 05                     112         .byte 5 
      0023FE 31 32 52 54 32         113         .ascii "12RT2"
      002403                        114 RT12_2:
      002403 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      002406 90 AE 68 AD      [ 2]  116     ldw y,#26797
      00240A EF 02            [ 2]  117     ldw (2,x),y 
      00240C 90 AE 62 CD      [ 2]  118     ldw y,#25293
      002410 FF               [ 2]  119     ldw (x),y 
      002411 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002412 23 FD                  125         .word LINK 
                           002414   126         LINK=.
      002414 05                     127         .byte 5 
      002415 4C 4F 47 32 53         128         .ascii "LOG2S" 
      00241A                        129 LOG2S:
      00241A 1D 00 04         [ 2]  130     subw x,#2*CELLL
      00241D 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      002421 EF 02            [ 2]  132     ldw (2,x),y 
      002423 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      002427 FF               [ 2]  134     ldw (x),y 
      002428 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      002429 24 14                  140         .word LINK 
                           00242B   141         LINK=.
      00242B 04                     142         .byte 4 
      00242C 4C 4E 32 53            143         .ascii "LN2S" 
      002430                        144 LN2S: 
      002430 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002433 90 AE 01 E5      [ 2]  146     ldw y,#485
      002437 EF 02            [ 2]  147     ldw (2,x),y 
      002439 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      00243D FF               [ 2]  149     ldw (x),y 
      00243E 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4648 .endif
                           000001  4649 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   4650         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      00243F 24 2B                   34     .word LINK 
                           002441    35     LINK=.
      002441 06                      36     .byte 6
      002442 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      002448                         38 CALLOT:
      002448 CD 07 7F         [ 4]   39     CALL CPP
      00244B CD 06 1A         [ 4]   40     CALL DUPP 
      00244E CD 04 E4         [ 4]   41     CALL AT 
      002451 CD 05 E3         [ 4]   42     CALL TOR 
      002454 CD 0C 7F         [ 4]   43     CALL PSTOR 
      002457 CD 1D 1D         [ 4]   44     CALL UPDATCP 
      00245A CD 05 35         [ 4]   45     CALL RFROM
      00245D CC 0C 0F         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002460 24 41                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                           002462    55     LINK=.
      002462 06                      56     .byte 6
      002463 43 54 41 42 4C 45       57     .ascii "CTABLE"
      002469                         58 CTABLE:
      002469 CD 24 48         [ 4]   59     CALL CALLOT     
      00246C CC 19 B1         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      00246F 24 62                   69     .word LINK 
                           002471    70     LINK=.
      002471 06                      71     .byte 6
      002472 57 54 41 42 4C 45       72     .ascii "WTABLE"
      002478                         73 WTABLE:
      002478 CD 0B 96         [ 4]   74     CALL CELLS  
      00247B CD 24 48         [ 4]   75     CALL CALLOT 
      00247E CC 19 B1         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002481 24 71                   84     .word LINK 
                           002483    85     LINK=.
      002483 06                      86     .byte 6
      002484 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      00248A                         88 CTAT:
      00248A CD 1C 60         [ 4]   89     call FPSTOR 
      00248D CD 1D F2         [ 4]   90     call PTRPLUS 
      002490 CC 1E 2F         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002493 24 83                   99     .word LINK 
                           002495   100     LINK=.
      002495 06                     101     .byte 6
      002496 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      00249C                        103 WTAT:
      00249C CD 1C 60         [ 4]  104     call FPSTOR 
      00249F CD 0B 96         [ 4]  105     call CELLS 
      0024A2 CD 1D F2         [ 4]  106     call PTRPLUS 
      0024A5 CD 1E 0D         [ 4]  107     call EE_READ 
      0024A8 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      0024A9 24 95                  115     .word LINK 
                           0024AB   116     LINK=.
      0024AB 06                     117     .byte 6 
      0024AC 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0024B2                        119 CTINIT:
      0024B2 CD 1C 60         [ 4]  120     CALL FPSTOR
      0024B5 CD 1D 9E         [ 4]  121     CALL UNLOCK
      0024B8 CD 0C 0F         [ 4]  122     CALL ZERO 
      0024BB CD 0B A3         [ 4]  123 1$: CALL ONEP 
      0024BE CD 06 1A         [ 4]  124     CALL DUPP 
      0024C1 CD 25 0E         [ 4]  125     CALL INTQ 
      0024C4 CD 04 99         [ 4]  126     CALL QBRAN 
      0024C7 24 D1                  127     .word 2$
      0024C9 CD 1E 49         [ 4]  128     call WR_BYTE 
      0024CC CD 04 B5         [ 4]  129     CALL BRAN 
      0024CF 24 BB                  130     .word 1$ 
      0024D1                        131 2$: _DDROP 
      0024D1 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024D4 CD 1D C6         [ 4]  132     CALL LOCK 
      0024D7 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0024D8 24 AB                  140     .word LINK 
                           0024DA   141     LINK=.
      0024DA 06                     142     .byte 6 
      0024DB 57 54 49 4E 49 54      143     .ascii "WTINIT"
      0024E1                        144 WTINIT:
      0024E1 CD 1C 60         [ 4]  145     CALL FPSTOR
      0024E4 CD 1D 9E         [ 4]  146     CALL UNLOCK
      0024E7 CD 0C 0F         [ 4]  147     CALL ZERO 
      0024EA CD 0B A3         [ 4]  148 1$: CALL ONEP 
      0024ED CD 06 1A         [ 4]  149     CALL DUPP
      0024F0 CD 25 0E         [ 4]  150     CALL INTQ
      0024F3 CD 04 99         [ 4]  151     CALL QBRAN 
      0024F6 25 00                  152     .word 2$
      0024F8 CD 1E 6E         [ 4]  153     call WR_WORD 
      0024FB CD 04 B5         [ 4]  154     CALL BRAN 
      0024FE 24 EA                  155     .word 1$ 
      002500                        156 2$: _DDROP 
      002500 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002503 CD 1D C6         [ 4]  157     CALL LOCK 
      002506 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      002507 24 DA                  166     .word LINK 
                           002509   167     LINK=.
      002509 04                     168     .byte 4
      00250A 5B 4E 5D 3F            169     .ascii "[N]?" 
      00250E                        170 INTQ:
      00250E CD 0F 96         [ 4]  171     CALL CR 
      002511 CD 04 70         [ 4]  172     call DOLIT 
      002514 00 5B                  173     .word '[
      002516 CD 04 37         [ 4]  174     CALL EMIT 
      002519 CD 10 3C         [ 4]  175     CALL DOT 
      00251C CD 0F C3         [ 4]  176     CALL  DOTQP
      00251F 03                     177     .byte 3
      002520 5D 3F 20               178     .ascii "]? " 
      002523 CD 13 CA         [ 4]  179     CALL QUERY 
      002526 CD 11 F5         [ 4]  180     call TOKEN 
      002529 CC 25 E8         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                   4651 .endif
                           000001  4652 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   4653         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00252C                         35     _HEADER DBLVER,7,"DBL-VER"
      00252C 25 09                    1         .word LINK 
                           00252E     2         LINK=.
      00252E 07                       3         .byte 7  
      00252F 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      002536                          5         DBLVER:
      002536 CD 0F 96         [ 4]   36     CALL CR 
      002539 CD 0F C3         [ 4]   37     CALL DOTQP 
      00253C 18                      38     .byte  24 
      00253D 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      002555 CD 1B 60         [ 4]   40     CALL PRT_LICENCE
      002558 CD 1B 38         [ 4]   41     CALL COPYRIGHT  
      00255B                         42     _DOLIT DVER_MAJOR 
      00255B CD 04 70         [ 4]    1     CALL DOLIT 
      00255E 00 01                    2     .word DVER_MAJOR 
      002560                         43     _DOLIT DVER_MINOR  
      002560 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002563 00 00                    2     .word DVER_MINOR 
      002565 CC 1B 74         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      002568                         49 nsign: ; ( addr cntr -- addr cntr f ) 
      002568 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      00256B 90 93            [ 1]   51     LDW Y,X 
      00256D 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      002570 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002572 A1 2D            [ 1]   54     CP A,#'-' 
      002574 27 03            [ 1]   55     JREQ NEG_SIGN 
      002576 4F               [ 1]   56     CLR A  
      002577 20 18            [ 2]   57     JRA STO_SIGN 
      002579                         58 NEG_SIGN:
                                     59 ; increment addr 
      002579 90 93            [ 1]   60     LDW Y,X 
      00257B 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      00257E 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002582 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      002584 90 93            [ 1]   65     LDW Y,X
      002586 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      002589 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      00258D EF 02            [ 2]   68     LDW (2,X),Y 
      00258F A6 FF            [ 1]   69     LD A,#0XFF
      002591                         70 STO_SIGN:   
      002591 F7               [ 1]   71     LD (X),A 
      002592 E7 01            [ 1]   72     LD (1,X),A 
      002594 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      002595                         79 parse_digits:
      002595 CD 06 1A         [ 4]   80     CALL DUPP 
      002598                         81     _QBRAN parse_d5  
      002598 CD 04 99         [ 4]    1     CALL QBRAN
      00259B 25 DD                    2     .word parse_d5
      00259D CD 05 E3         [ 4]   82     CALL TOR   ; dlo dhi a R: cntr 
      0025A0 CD 0C D2         [ 4]   83     CALL COUNT ; dlo dhi a+ char 
      0025A3 CD 06 E0         [ 4]   84     CALL BASE 
      0025A6 CD 04 E4         [ 4]   85     CALL AT 
      0025A9 CD 0E DB         [ 4]   86     CALL DIGTQ 
      0025AC                         87     _QBRAN parse_d4 ; not a digit
      0025AC CD 04 99         [ 4]    1     CALL QBRAN
      0025AF 25 D1                    2     .word parse_d4
      0025B1 CD 29 28         [ 4]   88     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0025B4 CD 06 E0         [ 4]   89     CALL BASE 
      0025B7 CD 04 E4         [ 4]   90     CALL AT 
      0025BA CD 27 B3         [ 4]   91     CALL DSSTAR
      0025BD CD 05 35         [ 4]   92     CALL RFROM 
      0025C0 CD 0C 0F         [ 4]   93     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0025C3 CD 2B DB         [ 4]   94     CALL DPLUS 
      0025C6 CD 05 35         [ 4]   95     CALL RFROM  ; dlo dhi a+ 
      0025C9 CD 05 35         [ 4]   96     CALL RFROM ; dlo dhi a+ cntr 
      0025CC CD 0B B0         [ 4]   97     CALL ONEM 
      0025CF 20 C4            [ 2]   98     JRA parse_digits ; dlo dhi a+ R: 
      0025D1                         99 parse_d4:
      0025D1 90 93            [ 1]  100     LDW Y,X 
      0025D3 90 EE 02         [ 2]  101     LDW Y,(2,Y)
      0025D6 90 5A            [ 2]  102     DECW Y  ; dec(a)
      0025D8 EF 02            [ 2]  103     LDW (2,X),Y 
      0025DA 90 85            [ 2]  104     POPW Y 
      0025DC FF               [ 2]  105     LDW (X),Y ; dlo dhi a cntr  
      0025DD                        106 parse_d5:
      0025DD 81               [ 4]  107     RET 
                                    108 
                                    109 
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    111 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    112 ;   convert string to integer 
                                    113 ;   double begin with '#' 
                                    114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025DE                        115     _HEADER NUMBQ,7,"NUMBER?"
      0025DE 25 2E                    1         .word LINK 
                           0025E0     2         LINK=.
      0025E0 07                       3         .byte 7  
      0025E1 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0025E8                          5         NUMBQ:
                                    116 ; save current base value 
      0025E8 CD 06 E0         [ 4]  117     CALL BASE 
      0025EB CD 04 E4         [ 4]  118     CALL AT 
      0025EE CD 05 E3         [ 4]  119     CALL TOR  ; R: base 
                                    120 ; initialize integer to 0     
      0025F1 1D 00 04         [ 2]  121     SUBW X,#4 ; create space for a double  
      0025F4 90 5F            [ 1]  122     CLRW Y 
      0025F6 FF               [ 2]  123     LDW (X),Y 
      0025F7 EF 02            [ 2]  124     LDW (2,X),Y ; a 0 0 R: base  
      0025F9                        125     _DOLIT 2 
      0025F9 CD 04 70         [ 4]    1     CALL DOLIT 
      0025FC 00 02                    2     .word 2 
      0025FE CD 0C 68         [ 4]  126     CALL PICK  ; a 0 0 a R: base    
      002601 CD 0C D2         [ 4]  127     CALL COUNT ; a 0 0 a+ n 
                                    128 ; check for '#' double integer 
      002604 CD 06 42         [ 4]  129     CALL OVER  ; a 0 0 a+ n a+
      002607 CD 05 02         [ 4]  130     CALL CAT   ; a 0 0 a+ n c 
      00260A                        131     _DOLIT '#' ; a 0 0 a+ n c '#' 
      00260A CD 04 70         [ 4]    1     CALL DOLIT 
      00260D 00 23                    2     .word '#' 
      00260F CD 08 FB         [ 4]  132     CALL EQUAL 
      002612 CD 05 E3         [ 4]  133     CALL TOR   ; a 0 0 a+ n R: base d? 
      002615 CD 05 46         [ 4]  134     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002618                        135     _QBRAN NUMQ0
      002618 CD 04 99         [ 4]    1     CALL QBRAN
      00261B 26 29                    2     .word NUMQ0
                                    136 ; update a and count
      00261D CD 06 2A         [ 4]  137     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002620 CD 0B A3         [ 4]  138     CALL ONEP 
      002623 CD 06 2A         [ 4]  139     CALL SWAPP 
      002626 CD 0B B0         [ 4]  140     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    141 ; check for '$' hexadecimal  
      002629                        142 NUMQ0: 
      002629 CD 06 42         [ 4]  143     CALL OVER   
      00262C CD 05 02         [ 4]  144     CALL CAT   
      00262F                        145     _DOLIT '$'
      00262F CD 04 70         [ 4]    1     CALL DOLIT 
      002632 00 24                    2     .word '$' 
      002634 CD 08 FB         [ 4]  146     CALL EQUAL ; a 0 0 a+ n- f  
      002637                        147     _QBRAN NUMQ1 
      002637 CD 04 99         [ 4]    1     CALL QBRAN
      00263A 26 53                    2     .word NUMQ1
      00263C CD 0E B2         [ 4]  148     CALL HEX   ; switch to hexadecimal base 
                                    149 ; update a and count 
      00263F CD 06 2A         [ 4]  150     CALL SWAPP 
      002642 CD 0B A3         [ 4]  151     CALL ONEP 
      002645 CD 06 2A         [ 4]  152     CALL SWAPP
      002648 CD 0B B0         [ 4]  153     CALL ONEM ; a 0 0 a+ n-  R: base d?
      00264B CD 07 CD         [ 4]  154     CALL QDUP 
      00264E                        155     _QBRAN NUMQ6 
      00264E CD 04 99         [ 4]    1     CALL QBRAN
      002651 26 A8                    2     .word NUMQ6
                                    156 ; check for minus sign 
      002653                        157 NUMQ1: 
      002653 CD 25 68         [ 4]  158     CALL nsign 
      002656 CD 05 E3         [ 4]  159     CALL TOR ; R: base d? sign  
                                    160 ; check for end of string     
      002659 CD 07 CD         [ 4]  161     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      00265C                        162     _QBRAN NUMQ5 ; yes , not a number 
      00265C CD 04 99         [ 4]    1     CALL QBRAN
      00265F 26 A6                    2     .word NUMQ5
      002661 CD 25 95         [ 4]  163     CALL parse_digits
      002664 CD 07 CD         [ 4]  164     CALL QDUP 
      002667 CD 06 63         [ 4]  165     CALL ZEQUAL  
      00266A                        166     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      00266A CD 04 99         [ 4]    1     CALL QBRAN
      00266D 26 9B                    2     .word NUMQ4
      00266F                        167     _DROP  ; a dlo dhi 
      00266F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002672 CD 05 35         [ 4]  168     CALL RFROM  ; a dlo dhi sign 
      002675                        169     _QBRAN NUMQ3
      002675 CD 04 99         [ 4]    1     CALL QBRAN
      002678 26 7D                    2     .word NUMQ3
      00267A CD 08 99         [ 4]  170     CALL DNEGA
      00267D                        171 NUMQ3: 
      00267D CD 07 DE         [ 4]  172     CALL ROT ; dlo dhi a  R: base d?
      002680                        173     _DROP
      002680 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002683                        174     _DOLIT -2  ; double return -2 flag 
      002683 CD 04 70         [ 4]    1     CALL DOLIT 
      002686 FF FE                    2     .word -2 
      002688 CD 05 35         [ 4]  175     CALL RFROM ; dlo dhi d? R: base 
      00268B                        176     _TBRAN NUMQ8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00268B CD 04 A7         [ 4]    1     CALL TBRAN 
      00268E 26 B0                    2     .word NUMQ8 
      002690 CD 06 2A         [ 4]  177     CALL SWAPP 
      002693                        178     _DROP
      002693 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002696 CD 0B A3         [ 4]  179     CALL ONEP   ; single return -1 flag   
      002699 20 15            [ 2]  180     JRA NUMQ8
      00269B                        181 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   182 .if WANT_FLOAT
      00269B CD 05 35         [ 4]  183     CALL RFROM ; sign 
      00269E CD 05 35         [ 4]  184     CALL RFROM ; d? 
      0026A1 CD 2F AA         [ 4]  185     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )
      0026A4 20 0A            [ 2]  186     JRA NUMQ8 
                                    187 .endif 
      0026A6                        188 NUMQ5: 
      0026A6 5B 02            [ 2]  189     ADDW SP,#2
      0026A8                        190 NUMQ6:    
      0026A8 5B 02            [ 2]  191     ADDW SP,#2 
      0026AA 1C 00 04         [ 2]  192     ADDW X,#4 
      0026AD 90 5F            [ 1]  193     CLRW Y 
      0026AF FF               [ 2]  194     LDW (X),Y 
      0026B0                        195 NUMQ8: 
      0026B0 CD 05 35         [ 4]  196     CALL RFROM 
      0026B3 CD 06 E0         [ 4]  197     CALL BASE 
      0026B6 CC 04 D2         [ 2]  198     JP STORE 
                                    199      
                                    200 
                                    201 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;   DABS ( d -- d )
                                    205 ;   absolute value of double
                                    206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026B9                        207     _HEADER DABS,4,"DABS"
      0026B9 25 E0                    1         .word LINK 
                           0026BB     2         LINK=.
      0026BB 04                       3         .byte 4  
      0026BC 44 41 42 53              4         .ascii "DABS"
      0026C0                          5         DABS:
      0026C0 F6               [ 1]  208     LD A,(X) 
      0026C1 A4 80            [ 1]  209     AND A,#0X80 
      0026C3 27 03            [ 1]  210     JREQ DABS1 
      0026C5 CC 08 99         [ 2]  211     JP DNEGA 
      0026C8                        212 DABS1:
      0026C8 81               [ 4]  213     RET 
                                    214 
                                    215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    216 ;  DSIGN ( d -- d f )
                                    217 ;  sign of double 
                                    218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C9                        219     _HEADER DSIGN,5,"DSIGN"
      0026C9 26 BB                    1         .word LINK 
                           0026CB     2         LINK=.
      0026CB 05                       3         .byte 5  
      0026CC 44 53 49 47 4E           4         .ascii "DSIGN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026D1                          5         DSIGN:
      0026D1 A6 00            [ 1]  220     LD A,#0 
      0026D3 90 93            [ 1]  221     LDW Y,X 
      0026D5 90 FE            [ 2]  222     LDW Y,(Y)
      0026D7 2A 02            [ 1]  223     JRPL DSIGN1
      0026D9 A6 FF            [ 1]  224     LD A,#0XFF 
      0026DB                        225 DSIGN1:
      0026DB 1D 00 02         [ 2]  226     SUBW X,#2 
      0026DE F7               [ 1]  227     LD (X),A 
      0026DF E7 01            [ 1]  228     LD (1,X),A 
      0026E1 81               [ 4]  229     RET 
                                    230 
                                    231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    232 ;   DS/MOD ( ud us - ur qud )
                                    233 ;   unsigned divide double by single 
                                    234 ;   return double quotient 
                                    235 ;   and single remainder 
                                    236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026E2                        237     _HEADER DSLMOD,6,"DS/MOD"
      0026E2 26 CB                    1         .word LINK 
                           0026E4     2         LINK=.
      0026E4 06                       3         .byte 6  
      0026E5 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      0026EB                          5         DSLMOD:
      0026EB 90 93            [ 1]  238         LDW     Y,X             ; stack pointer to Y
      0026ED FE               [ 2]  239         LDW     X,(X)           ; un
      0026EE BF 26            [ 2]  240         LDW     YTEMP,X         ; save un
      0026F0 93               [ 1]  241         LDW     X,Y
      0026F1 89               [ 2]  242         PUSHW   X               ; save stack pointer
      0026F2 90 89            [ 2]  243         PUSHW   Y 
      0026F4 EE 02            [ 2]  244         LDW     X,(2,X)           ; X=udh
      0026F6 90 BE 26         [ 2]  245         LDW     Y,YTEMP         ; divisor 
      0026F9 65               [ 2]  246         DIVW    X,Y 
      0026FA BF 24            [ 2]  247         LDW     XTEMP,X         ; QUOTIENT hi 
      0026FC 93               [ 1]  248         LDW     X,Y             ; remainder in X 
      0026FD 90 85            [ 2]  249         POPW    Y 
      0026FF 90 EE 04         [ 2]  250         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002702 A6 10            [ 1]  251         LD      A,#16           ; loop count
      002704 90 58            [ 2]  252         SLLW    Y               ; udl shift udl into udh
      002706                        253 DSLMOD3:
      002706 59               [ 2]  254         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      002707 25 04            [ 1]  255         JRC     DSLMODa         ; if carry out of rotate
      002709 B3 26            [ 2]  256         CPW     X,YTEMP         ; compare udh to un
      00270B 25 05            [ 1]  257         JRULT   DSLMOD4         ; can't subtract
      00270D                        258 DSLMODa:
      00270D 72 B0 00 26      [ 2]  259         SUBW    X,YTEMP         ; can subtract
      002711 98               [ 1]  260         RCF
      002712                        261 DSLMOD4:
      002712 8C               [ 1]  262         CCF                     ; quotient bit
      002713 90 59            [ 2]  263         RLCW    Y               ; rotate into quotient, rotate out udl
      002715 4A               [ 1]  264         DEC     A               ; repeat
      002716 26 EE            [ 1]  265         JRNE    DSLMOD3           ; if A == 0
      002718                        266 DSLMODb:
      002718 BF 26            [ 2]  267         LDW     YTEMP,X         ; done, save remainder
      00271A 85               [ 2]  268         POPW    X               ; restore stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      00271B EF 02            [ 2]  269         LDW     (2,X),Y           ; save quotient low 
      00271D 90 BE 24         [ 2]  270         LDW     Y,XTEMP         ; quotient hi 
      002720 FF               [ 2]  271         LDW     (X),Y           ; save quotient hi 
      002721 90 BE 26         [ 2]  272         LDW     Y,YTEMP         ; remainder onto stack
      002724 EF 04            [ 2]  273         LDW     (4,X),Y
      002726 81               [ 4]  274         RET 
                                    275 
                                    276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    277 ;   D# ( d -- d )
                                    278 ;   extract least digit 
                                    279 ;   from double integer 
                                    280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002727                        281     _HEADER DDIG,2,"D#"
      002727 26 E4                    1         .word LINK 
                           002729     2         LINK=.
      002729 02                       3         .byte 2  
      00272A 44 23                    4         .ascii "D#"
      00272C                          5         DDIG:
      00272C CD 06 E0         [ 4]  282     CALL BASE 
      00272F CD 04 E4         [ 4]  283     CALL AT 
      002732 CD 26 EB         [ 4]  284     CALL DSLMOD
      002735 CD 07 DE         [ 4]  285     CALL ROT   
      002738 CD 0D DB         [ 4]  286     CALL DIGIT 
      00273B CC 0E 27         [ 2]  287     JP HOLD 
                                    288      
                                    289 
                                    290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    291 ;    D#S ( d -- s )
                                    292 ;   extract digit from double 
                                    293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00273E                        294     _HEADER DDIGS,3,"D#S"
      00273E 27 29                    1         .word LINK 
                           002740     2         LINK=.
      002740 03                       3         .byte 3  
      002741 44 23 53                 4         .ascii "D#S"
      002744                          5         DDIGS:
      002744 CD 27 2C         [ 4]  295     CALL    DDIG 
      002747 CD 08 28         [ 4]  296     CALL    DDUP 
      00274A CD 28 AE         [ 4]  297     CALL    DZEQUAL
      00274D                        298     _QBRAN  DDIGS 
      00274D CD 04 99         [ 4]    1     CALL QBRAN
      002750 27 44                    2     .word DDIGS
      002752                        299     _DROP 
      002752 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002755 81               [ 4]  300     RET
                                    301 
                                    302 
                                    303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    304 ;   D. ( d -- )
                                    305 ;   display double integer 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002756                        307     _HEADER DDOT,2,"D."
      002756 27 40                    1         .word LINK 
                           002758     2         LINK=.
      002758 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002759 44 2E                    4         .ascii "D."
      00275B                          5         DDOT:
      00275B CD 0F 53         [ 4]  308     CALL SPACE 
      00275E CD 26 D1         [ 4]  309     CALL DSIGN 
      002761 CD 05 E3         [ 4]  310     CALL TOR
      002764 CD 05 46         [ 4]  311     CALL RAT 
      002767                        312     _QBRAN DDOT0
      002767 CD 04 99         [ 4]    1     CALL QBRAN
      00276A 27 6F                    2     .word DDOT0
      00276C CD 08 99         [ 4]  313     CALL DNEGA 
      00276F                        314 DDOT0:     
      00276F CD 0E 17         [ 4]  315     CALL BDIGS 
      002772 CD 27 44         [ 4]  316     CALL DDIGS 
      002775 CD 05 35         [ 4]  317     CALL RFROM 
      002778                        318     _QBRAN DDOT1 
      002778 CD 04 99         [ 4]    1     CALL QBRAN
      00277B 27 85                    2     .word DDOT1
      00277D                        319     _DOLIT '-' 
      00277D CD 04 70         [ 4]    1     CALL DOLIT 
      002780 00 2D                    2     .word '-' 
      002782 CD 0E 27         [ 4]  320     CALL HOLD 
      002785                        321 DDOT1: 
      002785 CD 0E 7C         [ 4]  322     CALL EDIGS 
      002788 CC 0F 7D         [ 2]  323     JP TYPES     
                                    324      
                                    325 
                                    326 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    328 ;  UDS* ( ud u -- ud*u )
                                    329 ;  uint32*uint16 
                                    330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00278B                        331     _HEADER UDSSTAR,4,"UDS*"
      00278B 27 58                    1         .word LINK 
                           00278D     2         LINK=.
      00278D 04                       3         .byte 4  
      00278E 55 44 53 2A              4         .ascii "UDS*"
      002792                          5         UDSSTAR:
      002792 CD 05 E3         [ 4]  332     CALL TOR 
      002795 CD 06 2A         [ 4]  333     CALL SWAPP 
      002798 CD 05 46         [ 4]  334     CALL RAT 
      00279B CD 0A D8         [ 4]  335     CALL UMSTA ; udlo*u 
      00279E CD 07 DE         [ 4]  336     CALL ROT 
      0027A1 CD 05 35         [ 4]  337     CALL RFROM 
      0027A4 CD 0A D8         [ 4]  338     CALL UMSTA ; udhi*u 
      0027A7                        339     _DROP  ; drop overflow 
      0027A7 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0027AA CC 08 3D         [ 2]  340     JP PLUS  ; udlo*u+(uhi*u<<16)
                                    341      
                                    342 
                                    343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    344 ; multiply double by unsigned single 
                                    345 ; return double 
                                    346 ;  ( d u -- d )
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AD                        348     _HEADER DSSTAR,3,"DS*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027AD 27 8D                    1         .word LINK 
                           0027AF     2         LINK=.
      0027AF 03                       3         .byte 3  
      0027B0 44 53 2A                 4         .ascii "DS*"
      0027B3                          5         DSSTAR:
                                    349 ;DSSTAR:
      0027B3 CD 05 E3         [ 4]  350     CALL TOR
      0027B6 CD 26 D1         [ 4]  351     CALL DSIGN 
      0027B9 CD 07 FD         [ 4]  352     CALL NROT 
      0027BC CD 26 C0         [ 4]  353     CALL DABS
      0027BF CD 05 35         [ 4]  354     CALL RFROM 
      0027C2 CD 27 92         [ 4]  355     CALL UDSSTAR  
      0027C5 CD 07 DE         [ 4]  356     CALL ROT 
      0027C8                        357     _QBRAN DSSTAR3 
      0027C8 CD 04 99         [ 4]    1     CALL QBRAN
      0027CB 27 D0                    2     .word DSSTAR3
      0027CD CC 08 99         [ 2]  358     JP DNEGA 
      0027D0                        359 DSSTAR3:
      0027D0 81               [ 4]  360     RET 
                                    361 
                                    362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    363 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    364 ;  swap double 
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027D1                        366     _HEADER DSWAP,5,"2SWAP"
      0027D1 27 AF                    1         .word LINK 
                           0027D3     2         LINK=.
      0027D3 05                       3         .byte 5  
      0027D4 32 53 57 41 50           4         .ascii "2SWAP"
      0027D9                          5         DSWAP:
      0027D9 90 93            [ 1]  367     LDW Y,X 
      0027DB 90 FE            [ 2]  368     LDW Y,(Y)
      0027DD 90 BF 26         [ 2]  369     LDW YTEMP,Y ; d2 hi 
      0027E0 90 93            [ 1]  370     LDW Y,X 
      0027E2 90 EE 02         [ 2]  371     LDW Y,(2,Y)
      0027E5 90 BF 24         [ 2]  372     LDW XTEMP,Y  ; d2 lo 
      0027E8 90 93            [ 1]  373     LDW Y,X 
      0027EA 90 EE 04         [ 2]  374     LDW Y,(4,Y)  ; d1 hi 
      0027ED FF               [ 2]  375     LDW (X),Y 
      0027EE 90 93            [ 1]  376     LDW Y,X
      0027F0 90 EE 06         [ 2]  377     LDW Y,(6,Y)  ; d1 lo 
      0027F3 EF 02            [ 2]  378     LDW (2,X),Y
      0027F5 90 BE 26         [ 2]  379     LDW Y,YTEMP  
      0027F8 EF 04            [ 2]  380     LDW (4,X),Y 
      0027FA 90 BE 24         [ 2]  381     LDW Y,XTEMP 
      0027FD EF 06            [ 2]  382     LDW (6,X),Y 
      0027FF 81               [ 4]  383     RET 
                                    384 
                                    385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    386 ;    DCLZ ( d -- u )
                                    387 ;    double count leading zeros
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002800                        389     _HEADER DCLZ,4,"DCLZ"
      002800 27 D3                    1         .word LINK 
                           002802     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002802 04                       3         .byte 4  
      002803 44 43 4C 5A              4         .ascii "DCLZ"
      002807                          5         DCLZ:
      002807 4F               [ 1]  390     CLR A 
      002808 90 93            [ 1]  391     LDW Y,X 
      00280A 90 FE            [ 2]  392     LDW Y,(Y)
      00280C 2B 18            [ 1]  393     JRMI DCLZ8 ; no leading zero 
      00280E 27 09            [ 1]  394     JREQ DCLZ4 ; >=16 
      002810                        395 DCLZ1: ; <16
      002810 90 58            [ 2]  396     SLLW Y
      002812 4C               [ 1]  397     INC A 
      002813 90 5D            [ 2]  398     TNZW Y 
      002815 2B 0F            [ 1]  399     JRMI DCLZ8
      002817 20 F7            [ 2]  400     JRA DCLZ1 
      002819                        401 DCLZ4: ; >=16 
      002819 A6 10            [ 1]  402     LD A,#16 
      00281B 90 93            [ 1]  403     LDW Y,X 
      00281D 90 EE 02         [ 2]  404     LDW Y,(2,Y)
      002820 2B 04            [ 1]  405     JRMI DCLZ8 
      002822 26 EC            [ 1]  406     JRNE DCLZ1 
      002824 AB 10            [ 1]  407     ADD A,#16
      002826                        408 DCLZ8: 
      002826 1C 00 02         [ 2]  409     ADDW X,#2 
      002829 90 5F            [ 1]  410     CLRW Y 
      00282B 90 97            [ 1]  411     LD YL,A 
      00282D FF               [ 2]  412     LDW (X),Y 
      00282E 81               [ 4]  413     RET 
                                    414 
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    416 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    417 ;   rotate left doubles 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00282F                        419     _HEADER NDROT,5,"<2ROT"
      00282F 28 02                    1         .word LINK 
                           002831     2         LINK=.
      002831 05                       3         .byte 5  
      002832 3C 32 52 4F 54           4         .ascii "<2ROT"
      002837                          5         NDROT:
                                    420 ; save d3 in temp 
      002837 90 93            [ 1]  421     LDW Y,X 
      002839 90 FE            [ 2]  422     LDW Y,(Y)
      00283B 90 BF 26         [ 2]  423     LDW YTEMP,Y  ; d3 hi 
      00283E 90 93            [ 1]  424     LDW Y,X 
      002840 90 EE 02         [ 2]  425     LDW Y,(2,Y)
      002843 90 BF 24         [ 2]  426     LDW XTEMP,Y  ; d3 lo 
                                    427 ; put d2 in d1 slot 
      002846 90 93            [ 1]  428     LDW Y,X 
      002848 90 EE 04         [ 2]  429     LDW Y,(4,Y) 
      00284B FF               [ 2]  430     LDW (X),Y   ; d2 hi 
      00284C 90 93            [ 1]  431     LDW Y,X 
      00284E 90 EE 06         [ 2]  432     LDW Y,(6,Y)
      002851 EF 02            [ 2]  433     LDW (2,X),Y ; d2 lo
                                    434 ; put d1 in d2 slot 
      002853 90 93            [ 1]  435     LDW Y,X 
      002855 90 EE 08         [ 2]  436     LDW Y,(8,Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002858 EF 04            [ 2]  437     LDW (4,X),Y ; d1 hi 
      00285A 90 93            [ 1]  438     LDW Y,X 
      00285C 90 EE 0A         [ 2]  439     LDW Y,(10,Y)
      00285F EF 06            [ 2]  440     LDW (6,X),Y  ; d1 lo 
                                    441 ; put d3 in d1 slot 
      002861 90 BE 26         [ 2]  442     LDW Y,YTEMP 
      002864 EF 08            [ 2]  443     LDW (8,X),Y  ; d3 hi 
      002866 90 BE 24         [ 2]  444     LDW Y,XTEMP 
      002869 EF 0A            [ 2]  445     LDW (10,X),Y  ; d3 lo 
      00286B 81               [ 4]  446     RET 
                                    447 
                                    448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    449 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    450 ;   rotate right doubles 
                                    451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00286C                        452     _HEADER DROT,4,"2ROT"
      00286C 28 31                    1         .word LINK 
                           00286E     2         LINK=.
      00286E 04                       3         .byte 4  
      00286F 32 52 4F 54              4         .ascii "2ROT"
      002873                          5         DROT:
                                    453 ; save d3 in temp 
      002873 90 93            [ 1]  454     LDW Y,X 
      002875 90 FE            [ 2]  455     LDW Y,(Y)
      002877 90 BF 26         [ 2]  456     LDW YTEMP,Y ; d3 hi 
      00287A 90 93            [ 1]  457     LDW Y,X 
      00287C 90 EE 02         [ 2]  458     LDW Y,(2,Y)
      00287F 90 BF 24         [ 2]  459     LDW XTEMP,Y ; d3 lo 
                                    460 ; put d1 in d3 slot 
      002882 90 93            [ 1]  461     LDW Y,X 
      002884 90 EE 08         [ 2]  462     LDW Y,(8,Y)
      002887 FF               [ 2]  463     LDW (X),Y  ; d1 hi 
      002888 90 93            [ 1]  464     LDW Y,X 
      00288A 90 EE 0A         [ 2]  465     LDW Y,(10,Y) 
      00288D EF 02            [ 2]  466     LDW (2,X),Y ; d1 lo 
                                    467 ; put d2 in d1 slot 
      00288F 90 93            [ 1]  468     LDW Y,X 
      002891 90 EE 04         [ 2]  469     LDW Y,(4,Y) ; d2 hi 
      002894 EF 08            [ 2]  470     LDW (8,X),Y 
      002896 90 93            [ 1]  471     LDW Y,X 
      002898 90 EE 06         [ 2]  472     LDW Y,(6,Y) ; d2 lo 
      00289B EF 0A            [ 2]  473     LDW (10,X),Y 
                                    474 ; put d3 in d2 slot 
      00289D 90 BE 26         [ 2]  475     LDW Y,YTEMP 
      0028A0 EF 04            [ 2]  476     LDW (4,X),Y 
      0028A2 90 BE 24         [ 2]  477     LDW Y,XTEMP 
      0028A5 EF 06            [ 2]  478     LDW (6,X),Y 
      0028A7 81               [ 4]  479     RET 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;    D0= ( d -- 0|-1 )
                                    483 ;    check if double is 0 
                                    484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A8                        485     _HEADER DZEQUAL,3,"D0="
      0028A8 28 6E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                           0028AA     2         LINK=.
      0028AA 03                       3         .byte 3  
      0028AB 44 30 3D                 4         .ascii "D0="
      0028AE                          5         DZEQUAL:
      0028AE 4F               [ 1]  486     CLR A  
      0028AF 90 93            [ 1]  487     LDW Y,X 
      0028B1 90 FE            [ 2]  488     LDW Y,(Y)
      0028B3 26 09            [ 1]  489     JRNE ZEQ1 
      0028B5 90 93            [ 1]  490     LDW Y,X 
      0028B7 90 EE 02         [ 2]  491     LDW Y,(2,Y)
      0028BA 26 02            [ 1]  492     JRNE ZEQ1 
      0028BC A6 FF            [ 1]  493     LD A,#0xFF
      0028BE                        494 ZEQ1:
      0028BE 1C 00 02         [ 2]  495     ADDW X,#CELLL 
      0028C1 F7               [ 1]  496     LD (X),A
      0028C2 E7 01            [ 1]  497     LD (1,X),A
      0028C4 81               [ 4]  498 	RET     
                                    499 
                                    500 
                                    501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    502 ;   D= ( d1 d2 -- f )
                                    503 ;   d1==d2?
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C5                        505     _HEADER DEQUAL,2,"D="
      0028C5 28 AA                    1         .word LINK 
                           0028C7     2         LINK=.
      0028C7 02                       3         .byte 2  
      0028C8 44 3D                    4         .ascii "D="
      0028CA                          5         DEQUAL:
      0028CA A6 00            [ 1]  506     LD A,#0 
      0028CC 90 93            [ 1]  507     LDW Y,X 
      0028CE 90 FE            [ 2]  508     LDW Y,(Y)
      0028D0 E3 04            [ 2]  509     CPW Y,(4,X)
      0028D2 26 0B            [ 1]  510     JRNE DEQU4 
      0028D4 90 93            [ 1]  511     LDW Y,X 
      0028D6 90 EE 02         [ 2]  512     LDW Y,(2,Y)
      0028D9 E3 06            [ 2]  513     CPW Y,(6,X)
      0028DB 26 02            [ 1]  514     JRNE DEQU4 
      0028DD A6 FF            [ 1]  515     LD A,#0XFF
      0028DF                        516 DEQU4:
      0028DF 1C 00 06         [ 2]  517     ADDW X,#6
      0028E2 F7               [ 1]  518     LD (X),A 
      0028E3 E7 01            [ 1]  519     LD (1,X),A 
      0028E5 81               [ 4]  520     RET 
                                    521 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    523 ;   D> ( d1 d2 -- f )
                                    524 ;   d1>d2?
                                    525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E6                        526     _HEADER DGREAT,2,"D>"
      0028E6 28 C7                    1         .word LINK 
                           0028E8     2         LINK=.
      0028E8 02                       3         .byte 2  
      0028E9 44 3E                    4         .ascii "D>"
      0028EB                          5         DGREAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      0028EB CD 27 D9         [ 4]  527     CALL DSWAP 
      0028EE CC 28 F6         [ 2]  528     JP DLESS 
                                    529 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    531 ;   D< ( d1 d2 -- f )
                                    532 ;   d1<d2? 
                                    533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028F1                        534     _HEADER DLESS,2,"D<"
      0028F1 28 E8                    1         .word LINK 
                           0028F3     2         LINK=.
      0028F3 02                       3         .byte 2  
      0028F4 44 3C                    4         .ascii "D<"
      0028F6                          5         DLESS:
      0028F6 CD 2C 0D         [ 4]  535     CALL DSUB
      0028F9 CD 0C 0F         [ 4]  536     CALL ZERO
      0028FC CD 07 FD         [ 4]  537     CALL NROT  
      0028FF CD 29 11         [ 4]  538     CALL DZLESS 
      002902                        539     _QBRAN DLESS4
      002902 CD 04 99         [ 4]    1     CALL QBRAN
      002905 29 0A                    2     .word DLESS4
      002907 CC 08 76         [ 2]  540     JP INVER  
      00290A                        541 DLESS4:
      00290A 81               [ 4]  542     RET
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  D0< ( d -- f )
                                    546 ;  d<0? 
                                    547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00290B                        548     _HEADER DZLESS,3,"D0<"
      00290B 28 F3                    1         .word LINK 
                           00290D     2         LINK=.
      00290D 03                       3         .byte 3  
      00290E 44 30 3C                 4         .ascii "D0<"
      002911                          5         DZLESS:
      002911 A6 00            [ 1]  549     LD A,#0 
      002913 90 93            [ 1]  550     LDW Y,X 
      002915 90 FE            [ 2]  551     LDW Y,(Y)
      002917 2A 02            [ 1]  552     JRPL DZLESS1 
      002919 A6 FF            [ 1]  553     LD A,#0XFF 
      00291B                        554 DZLESS1:
      00291B 1C 00 02         [ 2]  555     ADDW X,#CELLL 
      00291E F7               [ 1]  556     LD (X),A 
      00291F E7 01            [ 1]  557     LD (1,X),A    
      002921 81               [ 4]  558     RET 
                                    559 
                                    560 
                                    561 
                                    562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    563 ;   2>R ( d -- R: d )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002922                        565     _HEADER DTOR,3,"2>R"
      002922 29 0D                    1         .word LINK 
                           002924     2         LINK=.
      002924 03                       3         .byte 3  
      002925 32 3E 52                 4         .ascii "2>R"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002928                          5         DTOR:
      002928 90 85            [ 2]  566     POPW Y 
      00292A 90 BF 26         [ 2]  567     LDW YTEMP,Y 
      00292D 90 93            [ 1]  568     LDW Y,X 
      00292F 90 EE 02         [ 2]  569     LDW Y,(2,Y)
      002932 90 89            [ 2]  570     PUSHW Y   ; d low 
      002934 90 93            [ 1]  571     LDW Y,X 
      002936 90 FE            [ 2]  572     LDW Y,(Y)
      002938 90 89            [ 2]  573     PUSHW Y   ; d hi 
      00293A                        574     _DDROP  
      00293A 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00293D 92 CC 26         [ 5]  575     JP [YTEMP]
                                    576 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    578 ;  2R> ( -- d ) R: d --      
                                    579 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002940                        580     _HEADER DRFROM,3,"2R>"
      002940 29 24                    1         .word LINK 
                           002942     2         LINK=.
      002942 03                       3         .byte 3  
      002943 32 52 3E                 4         .ascii "2R>"
      002946                          5         DRFROM:
      002946 90 85            [ 2]  581     POPW Y      ; d hi 
      002948 90 BF 26         [ 2]  582     LDW YTEMP,Y 
      00294B 1D 00 04         [ 2]  583     SUBW X,#4
      00294E 90 85            [ 2]  584     POPW Y       ; d hi 
      002950 FF               [ 2]  585     LDW (X),Y 
      002951 90 85            [ 2]  586     POPW Y       ; d low  
      002953 EF 02            [ 2]  587     LDW (2,X),Y 
      002955 92 CC 26         [ 5]  588     JP [YTEMP]
                                    589     
                                    590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    591 ;   2R@ ( -- d )
                                    592 ;   fecth a double from RSTACK
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002958                        594     _HEADER DRAT,3,"2R@"
      002958 29 42                    1         .word LINK 
                           00295A     2         LINK=.
      00295A 03                       3         .byte 3  
      00295B 32 52 40                 4         .ascii "2R@"
      00295E                          5         DRAT:
      00295E 90 85            [ 2]  595     POPW Y 
      002960 90 BF 26         [ 2]  596     LDW YTEMP,Y 
      002963 1D 00 04         [ 2]  597     SUBW X,#4 
      002966 16 01            [ 2]  598     LDW Y,(1,SP)
      002968 FF               [ 2]  599     LDW (X),Y 
      002969 16 03            [ 2]  600     LDW Y,(3,SP)
      00296B EF 02            [ 2]  601     LDW (2,X),Y 
      00296D 92 CC 26         [ 5]  602     JP [YTEMP]
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;  2VARIABLE <name> 
                                    606 ;  create a double variable 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002970                        608     _HEADER DVARIA,9,"2VARIABLE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002970 29 5A                    1         .word LINK 
                           002972     2         LINK=.
      002972 09                       3         .byte 9  
      002973 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      00297C                          5         DVARIA:
      00297C CD 0C E9         [ 4]  609         CALL HERE
      00297F CD 06 1A         [ 4]  610         CALL DUPP
      002982                        611         _DOLIT 4  
      002982 CD 04 70         [ 4]    1     CALL DOLIT 
      002985 00 04                    2     .word 4 
      002987 CD 08 3D         [ 4]  612         CALL PLUS 
      00298A CD 07 71         [ 4]  613         CALL VPP 
      00298D CD 04 D2         [ 4]  614         CALL STORE
      002990 CD 19 18         [ 4]  615         CALL CREAT
      002993 CD 06 1A         [ 4]  616         CALL DUPP
      002996 CD 15 39         [ 4]  617         CALL COMMA
      002999 CD 0C 0F         [ 4]  618         CALL ZERO
      00299C CD 06 42         [ 4]  619         CALL OVER 
      00299F CD 04 D2         [ 4]  620         CALL STORE 
      0029A2 CD 0C 0F         [ 4]  621         CALL ZERO 
      0029A5 CD 06 2A         [ 4]  622         CALL SWAPP 
      0029A8 CD 04 D2         [ 4]  623         CALL STORE
      0029AB CD 22 8C         [ 4]  624         CALL FMOVE ; move definition to FLASH
      0029AE CD 07 CD         [ 4]  625         CALL QDUP 
      0029B1 CD 04 99         [ 4]  626         CALL QBRAN 
      0029B4 19 65                  627         .word SET_RAMLAST   
      0029B6 CD 1D 34         [ 4]  628         CALL UPDATVP  ; don't update if variable kept in RAM.
      0029B9 CC 23 20         [ 2]  629         JP UPDATPTR
                                    630                 
                                    631 
                                    632 
                                    633 
                                    634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    635 ;  2LITERAL ( d -- )
                                    636 ;  compile double literal 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029BC                        638     _HEADER DLITER,IMEDD+8,"2LITERAL"
      0029BC 29 72                    1         .word LINK 
                           0029BE     2         LINK=.
      0029BE 88                       3         .byte IMEDD+8  
      0029BF 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      0029C7                          5         DLITER:
      0029C7 CD 15 7E         [ 4]  639     CALL COMPI 
      0029CA 29 D2                  640     .word do2lit 
      0029CC CD 15 39         [ 4]  641     CALL COMMA 
      0029CF CC 15 39         [ 2]  642     JP   COMMA 
                                    643 
                                    644 
                                    645 ; runtime for 2LITERAL 
      0029D2                        646 do2lit:
      0029D2 1D 00 04         [ 2]  647     SUBW X,#4 
      0029D5 16 01            [ 2]  648     LDW Y,(1,SP)
      0029D7 90 FE            [ 2]  649     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      0029D9 FF               [ 2]  650     LDW (X),Y 
      0029DA 16 01            [ 2]  651     LDW Y,(1,SP)
      0029DC 90 EE 02         [ 2]  652     LDW Y,(2,Y)
      0029DF EF 02            [ 2]  653     LDW (2,X),Y 
      0029E1 90 85            [ 2]  654     POPW Y 
      0029E3 90 EC 04         [ 2]  655     JP (4,Y)
                                    656 
                                    657 
                                    658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    659 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029E6                        661     _HEADER DOVER,5,"2OVER"
      0029E6 29 BE                    1         .word LINK 
                           0029E8     2         LINK=.
      0029E8 05                       3         .byte 5  
      0029E9 32 4F 56 45 52           4         .ascii "2OVER"
      0029EE                          5         DOVER:
      0029EE 90 93            [ 1]  662     LDW Y,X 
      0029F0 1D 00 04         [ 2]  663     SUBW X,#4 
      0029F3 90 89            [ 2]  664     PUSHW Y 
      0029F5 90 EE 04         [ 2]  665     LDW Y,(4,Y)  ; d1 hi 
      0029F8 FF               [ 2]  666     LDW (X),Y 
      0029F9 90 85            [ 2]  667     POPW Y 
      0029FB 90 EE 06         [ 2]  668     LDW Y,(6,Y)  ;d1 lo 
      0029FE EF 02            [ 2]  669     LDW (2,X),Y 
      002A00 81               [ 4]  670     RET 
                                    671 
                                    672 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    674 ;   D2/ ( d -- d/2 )
                                    675 ;   divide double by 2 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A01                        677     _HEADER D2SLASH,3,"D2/"
      002A01 29 E8                    1         .word LINK 
                           002A03     2         LINK=.
      002A03 03                       3         .byte 3  
      002A04 44 32 2F                 4         .ascii "D2/"
      002A07                          5         D2SLASH:
      002A07 90 93            [ 1]  678     LDW Y,X 
      002A09 90 FE            [ 2]  679     LDW Y,(Y)
      002A0B 90 57            [ 2]  680     SRAW Y 
      002A0D FF               [ 2]  681     LDW (X),Y 
      002A0E 90 93            [ 1]  682     LDW Y,X 
      002A10 90 EE 02         [ 2]  683     LDW Y,(2,Y)
      002A13 90 56            [ 2]  684     RRCW Y 
      002A15 EF 02            [ 2]  685     LDW (2,X),Y 
      002A17 81               [ 4]  686     RET
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;  D2* ( d -- d*2 )
                                    690 ;  multiply double by 2 
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A18                        692     _HEADER D2STAR,3,"D2*"
      002A18 2A 03                    1         .word LINK 
                           002A1A     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A1A 03                       3         .byte 3  
      002A1B 44 32 2A                 4         .ascii "D2*"
      002A1E                          5         D2STAR:
      002A1E 90 93            [ 1]  693     LDW Y,X 
      002A20 90 EE 02         [ 2]  694     LDW Y,(2,Y)
      002A23 98               [ 1]  695     RCF 
      002A24 90 59            [ 2]  696     RLCW Y 
      002A26 EF 02            [ 2]  697     LDW (2,X),Y 
      002A28 90 93            [ 1]  698     LDW Y,X 
      002A2A 90 FE            [ 2]  699     LDW Y,(Y)
      002A2C 90 59            [ 2]  700     RLCW Y 
      002A2E FF               [ 2]  701     LDW (X),Y 
      002A2F 81               [ 4]  702     RET 
                                    703 
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    705 ;   DLSHIFT ( d n -- d )
                                    706 ;   left shift double 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A30                        708     _HEADER DLSHIFT,7,"DLSHIFT"
      002A30 2A 1A                    1         .word LINK 
                           002A32     2         LINK=.
      002A32 07                       3         .byte 7  
      002A33 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002A3A                          5         DLSHIFT:
      002A3A E6 01            [ 1]  709     LD A,(1,X) ; shift count 
      002A3C A4 1F            [ 1]  710     AND A,#31
      002A3E 1C 00 02         [ 2]  711     ADDW X,#CELLL 
      002A41 90 93            [ 1]  712     LDW Y,X 
      002A43 90 FE            [ 2]  713     LDW Y,(Y)
      002A45 90 BF 26         [ 2]  714     LDW YTEMP,Y  ; d hi 
      002A48 90 93            [ 1]  715     LDW Y,X 
      002A4A 90 EE 02         [ 2]  716     LDW Y,(2,Y)  ; d low 
      002A4D                        717 DLSHIFT1:
      002A4D 4D               [ 1]  718     TNZ A 
      002A4E 27 12            [ 1]  719     JREQ DLSHIFT2 
      002A50 98               [ 1]  720     RCF 
      002A51 90 59            [ 2]  721     RLCW Y 
      002A53 90 89            [ 2]  722     PUSHW Y 
      002A55 90 BE 26         [ 2]  723     LDW Y,YTEMP 
      002A58 90 59            [ 2]  724     RLCW Y 
      002A5A 90 BF 26         [ 2]  725     LDW YTEMP,Y 
      002A5D 90 85            [ 2]  726     POPW Y 
      002A5F 4A               [ 1]  727     DEC A 
      002A60 20 EB            [ 2]  728     JRA DLSHIFT1 
      002A62                        729 DLSHIFT2:
      002A62 EF 02            [ 2]  730     LDW (2,X),Y 
      002A64 90 BE 26         [ 2]  731     LDW Y,YTEMP 
      002A67 FF               [ 2]  732     LDW (X),Y 
      002A68 81               [ 4]  733     RET 
                                    734 
                                    735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    736 ;  DRSHIFT ( d n -- d )
                                    737 ;  shift right n bits 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A69                        739     _HEADER DRSHIFT,7,"DRSHIFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002A69 2A 32                    1         .word LINK 
                           002A6B     2         LINK=.
      002A6B 07                       3         .byte 7  
      002A6C 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002A73                          5         DRSHIFT:
      002A73 E6 01            [ 1]  740     LD A,(1,X)
      002A75 A4 1F            [ 1]  741     AND A,#31
      002A77 1C 00 02         [ 2]  742     ADDW X,#2 
      002A7A                        743 DRSHIFT1:
      002A7A 4D               [ 1]  744     TNZ A 
      002A7B 27 13            [ 1]  745     JREQ DRSHIFT2 
      002A7D 90 93            [ 1]  746     LDW Y,X 
      002A7F 90 FE            [ 2]  747     LDW Y,(Y)
      002A81 90 54            [ 2]  748     SRLW Y 
      002A83 FF               [ 2]  749     LDW (X),Y 
      002A84 90 93            [ 1]  750     LDW Y,X 
      002A86 90 EE 02         [ 2]  751     LDW Y,(2,Y)
      002A89 90 56            [ 2]  752     RRCW Y 
      002A8B EF 02            [ 2]  753     LDW (2,X),Y 
      002A8D 4A               [ 1]  754     DEC A
      002A8E 20 EA            [ 2]  755     JRA DRSHIFT1  
      002A90                        756 DRSHIFT2:
      002A90 81               [ 4]  757     RET 
                                    758 
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    761 ;   D* ( d1 d2 -- d3 )
                                    762 ;   double product 
                                    763 ;   d3 = d1 * d2
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A91                        765     _HEADER DSTAR,2,"D*"
      002A91 2A 6B                    1         .word LINK 
                           002A93     2         LINK=.
      002A93 02                       3         .byte 2  
      002A94 44 2A                    4         .ascii "D*"
      002A96                          5         DSTAR:
      002A96 90 5F            [ 1]  766     CLRW Y 
      002A98 F6               [ 1]  767     LD A,(X)   ; d2 sign 
      002A99 E8 04            [ 1]  768     XOR A,(4,X) ; d1 sign 
      002A9B 2A 02            [ 1]  769     JRPL 1$
      002A9D 90 53            [ 2]  770     CPLW Y  
      002A9F 52 02            [ 2]  771 1$: SUB SP,#2 
      002AA1 17 01            [ 2]  772     LDW (1,SP),Y ; R: prod_sign 
      002AA3 CD 26 C0         [ 4]  773     CALL DABS   
      002AA6 CD 29 28         [ 4]  774     CALL DTOR 
      002AA9 CD 26 C0         [ 4]  775     CALL DABS
      002AAC CD 08 28         [ 4]  776     CALL DDUP   ; ud1 ud1  
      002AAF CD 05 35         [ 4]  777     CALL RFROM  ; ud1 ud1 ud2hi 
      002AB2 CD 27 B3         [ 4]  778     CALL DSSTAR ; ud1 dprodhi 
                                    779 ; shift partial product 16 bits left 
      002AB5                        780     _DROP   ; drop overflow 
      002AB5 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002AB8 CD 0C 0F         [ 4]  781     CALL ZERO   ; ud1 prodhi 
      002ABB CD 06 2A         [ 4]  782     CALL SWAPP  
      002ABE CD 27 D9         [ 4]  783     CALL DSWAP  ; dprodhi ud1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002AC1 CD 05 35         [ 4]  784     CALL RFROM  ; dprodhi ud1 ud2lo
      002AC4 CD 27 B3         [ 4]  785     CALL DSSTAR ; dprodhi dprodlo 
      002AC7 CD 2B DB         [ 4]  786     CALL DPLUS    
      002ACA CD 05 35         [ 4]  787     CALL RFROM    ; dprod ps 
      002ACD                        788     _QBRAN DDSTAR3 
      002ACD CD 04 99         [ 4]    1     CALL QBRAN
      002AD0 2A D5                    2     .word DDSTAR3
      002AD2 CC 08 99         [ 2]  789     JP DNEGA 
      002AD5                        790 DDSTAR3:  
      002AD5 81               [ 4]  791     RET 
                                    792 
                                    793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    794 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AD6                        796     _HEADER UDSLMOD,6,"UD/MOD"
      002AD6 2A 93                    1         .word LINK 
                           002AD8     2         LINK=.
      002AD8 06                       3         .byte 6  
      002AD9 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002ADF                          5         UDSLMOD:
                                    797 ;;;;;;;;;;;LOCAL VARIABLES ;;;;;;;;;;;;;;;;
                           000007   798     QLO = 7   ;   int16 
                           000005   799     QHI = 5   ;   int16 
                           000004   800     CNT1 = 4  ;   byte 
                           000003   801     CNT2 = 3  ;   byte 
                           000001   802     QLBIT = 1 ;   int16
                                    803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    804 ; unsigned double division 
      002ADF 52 08            [ 2]  805     SUB SP,#4*CELLL ; space for local variables 
      002AE1 90 5F            [ 1]  806     CLRW Y 
      002AE3 17 07            [ 2]  807     LDW (QLO,SP),Y 
      002AE5 17 05            [ 2]  808     LDW (QHI,SP),Y ; quotient=0  
      002AE7 CD 29 EE         [ 4]  809     CALL DOVER 
      002AEA CD 28 07         [ 4]  810     CALL DCLZ ; n2, dividend leading zeros  
      002AED CD 05 E3         [ 4]  811     CALL TOR 
      002AF0 CD 08 28         [ 4]  812     CALL DDUP    
      002AF3 CD 28 07         [ 4]  813     CALL DCLZ  ; n1, divisor leading zeros
      002AF6 CD 05 35         [ 4]  814     CALL RFROM ; n1 n2 
      002AF9 CD 08 D3         [ 4]  815     CALL SUBB  ; loop count 
      002AFC 90 93            [ 1]  816     LDW Y,X 
      002AFE 90 FE            [ 2]  817     LDW Y,(Y)
      002B00 90 9F            [ 1]  818     LD A,YL 
      002B02 6B 04            [ 1]  819     LD (CNT1,SP),A
      002B04 6B 03            [ 1]  820     LD (CNT2,SP),A 
      002B06 90 5D            [ 2]  821     TNZW Y 
      002B08 2B 45            [ 1]  822     JRMI UDSLA7 ; quotient is null 
      002B0A CD 2A 3A         [ 4]  823     CALL DLSHIFT ; align divisor with dividend 
      002B0D 90 5F            [ 1]  824     CLRW Y  
      002B0F 17 01            [ 2]  825     LDW (QLBIT,SP),Y ; quotient least bit R: qlo qhi cntr qlbit 
      002B11                        826 UDSLA3: ; division loop -- dividend divisor  
      002B11 0F 02            [ 1]  827     CLR (2,SP)  ; qlbit=0 
      002B13 CD 29 EE         [ 4]  828     CALL DOVER 
      002B16 CD 29 EE         [ 4]  829     CALL DOVER 
      002B19 CD 2C 0D         [ 4]  830     CALL DSUB
      002B1C F6               [ 1]  831     LD A,(X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B1D 2B 08            [ 1]  832     JRMI UDSLA4  
      002B1F CD 27 D9         [ 4]  833     CALL DSWAP 
      002B22 CD 28 73         [ 4]  834     CALL DROT 
      002B25 0C 02            [ 1]  835     INC (2,SP) ; quotient least bit 1 
      002B27                        836 UDSLA4: ; shift quotient and add qlbit 
      002B27                        837     _DDROP 
      002B27 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002B2A 16 07            [ 2]  838     LDW Y,(QLO,SP) ; quotient low 
      002B2C 98               [ 1]  839     RCF 
      002B2D 90 59            [ 2]  840     RLCW Y
      002B2F 17 07            [ 2]  841     LDW (QLO,SP),Y 
      002B31 16 05            [ 2]  842     LDW Y,(QHI,SP) ; quotient hi 
      002B33 90 59            [ 2]  843     RLCW Y 
      002B35 17 05            [ 2]  844     LDW (QHI,SP),Y 
      002B37 16 07            [ 2]  845     LDW Y,(QLO,SP) 
      002B39 72 F9 01         [ 2]  846     ADDW Y,(QLBIT,SP)
      002B3C 17 07            [ 2]  847     LDW (QLO,SP),Y 
      002B3E 7B 03            [ 1]  848     LD A,(CNT2,SP)
      002B40 27 1B            [ 1]  849     JREQ UDSLA8 
      002B42 0A 03            [ 1]  850     DEC (CNT2,SP) ; loop counter  
                                    851 ; shift dividend left 1 bit      
      002B44 CD 27 D9         [ 4]  852     CALL DSWAP 
      002B47 CD 2A 1E         [ 4]  853     CALL D2STAR 
      002B4A CD 27 D9         [ 4]  854     CALL DSWAP 
      002B4D 20 C2            [ 2]  855     JRA UDSLA3 
      002B4F                        856 UDSLA7:
      002B4F                        857     _DROP 
      002B4F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B52 CD 0C 0F         [ 4]  858     CALL ZERO 
      002B55                        859     _DOLIT 2   ; cnt1 local var 
      002B55 CD 04 70         [ 4]    1     CALL DOLIT 
      002B58 00 02                    2     .word 2 
      002B5A CD 05 BF         [ 4]  860     CALL NRSTO ; R: 0 0 cnt1 cnt2 qlbit     
      002B5D                        861 UDSLA8:
      002B5D 1C 00 04         [ 2]  862     ADDW X,#4 ; drop divisor
      002B60 5B 03            [ 2]  863     ADDW SP,#3 ; drop cnt2 qlbit   
      002B62 84               [ 1]  864     POP A 
      002B63 90 5F            [ 1]  865     CLRW Y 
      002B65 90 97            [ 1]  866     LD YL,A 
      002B67 1D 00 02         [ 2]  867     SUBW X,#CELLL 
      002B6A FF               [ 2]  868     LDW (X),Y  
      002B6B CD 2A 73         [ 4]  869     CALL DRSHIFT 
                                    870     ; quotient replace dividend 
      002B6E CD 29 46         [ 4]  871     CALL DRFROM  ; quotient 
      002B71 81               [ 4]  872     RET 
                                    873 
                                    874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    875 ;   D/MOD  ( d1 d2 -- dr dq )
                                    876 ;   double division dq=d1/d2
                                    877 ;   dr remainder double 
                                    878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B72                        879     _HEADER DDSLMOD,5,"D/MOD"  
      002B72 2A D8                    1         .word LINK 
                           002B74     2         LINK=.
      002B74 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002B75 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B7A                          5         DDSLMOD:
      002B7A F6               [ 1]  880     LD A,(X) ; disisor sign 
      002B7B 88               [ 1]  881     PUSH A 
      002B7C E6 04            [ 1]  882     LD A,(4,X) ; dividend sign 
      002B7E 88               [ 1]  883     PUSH A   ; R: sdivsor sdivnd 
      002B7F CD 26 C0         [ 4]  884     CALL DABS 
      002B82 CD 29 28         [ 4]  885     CALL DTOR ; R: sign abs(divisor)
      002B85 CD 26 C0         [ 4]  886     CALL DABS  ; ud1  
      002B88 CD 29 5E         [ 4]  887     CALL DRAT  ; ud1 ud2 R: sign abs(divisor) 
      002B8B CD 2A DF         [ 4]  888     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002B8E 7B 05            [ 1]  889     LD A,(5,SP) ; sdivnd 
      002B90 18 06            [ 1]  890     XOR A,(6,SP) ; 
      002B92 2A 23            [ 1]  891     JRPL DSLA8 
      002B94 CD 08 99         [ 4]  892     CALL DNEGA ; negate quotient  
      002B97 CD 29 EE         [ 4]  893     CALL DOVER 
      002B9A CD 28 AE         [ 4]  894     CALL DZEQUAL
      002B9D                        895     _TBRAN DSLA9 
      002B9D CD 04 A7         [ 4]    1     CALL TBRAN 
      002BA0 2B C4                    2     .word DSLA9 
      002BA2 CD 0C 1A         [ 4]  896     CALL ONE 
      002BA5 CD 0C 0F         [ 4]  897     CALL ZERO 
      002BA8 CD 2C 0D         [ 4]  898     CALL DSUB  
      002BAB CD 29 5E         [ 4]  899     CALL DRAT 
      002BAE CD 28 73         [ 4]  900     CALL DROT 
      002BB1 CD 2C 0D         [ 4]  901     CALL DSUB  ; corrected_remainder=divisor-remainder 
      002BB4 CD 27 D9         [ 4]  902     CALL DSWAP
      002BB7                        903 DSLA8:      
                                    904 ; check for divisor sign 
                                    905 ; if negative change negate remainder 
      002BB7 7B 06            [ 1]  906     LD A,(6,SP) ; divisor sign 
      002BB9 2A 09            [ 1]  907     JRPL DSLA9 
      002BBB CD 29 28         [ 4]  908     CALL DTOR 
      002BBE CD 08 99         [ 4]  909     CALL DNEGA 
      002BC1 CD 29 46         [ 4]  910     CALL DRFROM 
      002BC4                        911 DSLA9:
      002BC4 5B 06            [ 2]  912     ADDW SP,#6 
      002BC6 81               [ 4]  913     RET 
                                    914 
                                    915 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    916 ;   D/  ( d1 d2 -- dq )
                                    917 ;   division double by double 
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC7                        919     _HEADER DSLASH,2,"D/"
      002BC7 2B 74                    1         .word LINK 
                           002BC9     2         LINK=.
      002BC9 02                       3         .byte 2  
      002BCA 44 2F                    4         .ascii "D/"
      002BCC                          5         DSLASH:
      002BCC CD 2B 7A         [ 4]  920     CALL DDSLMOD
      002BCF CD 27 D9         [ 4]  921     CALL DSWAP
      002BD2                        922     _DDROP 
      002BD2 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002BD5 81               [ 4]  923     RET 
                                    924 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;   D+ ( d1 d2 -- d3 )
                                    927 ;   add 2 doubles 
                                    928 ;   d3=d1+d2 
                                    929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD6                        930     _HEADER DPLUS,2,"D+"
      002BD6 2B C9                    1         .word LINK 
                           002BD8     2         LINK=.
      002BD8 02                       3         .byte 2  
      002BD9 44 2B                    4         .ascii "D+"
      002BDB                          5         DPLUS:
      002BDB 90 93            [ 1]  931     LDW Y,X 
      002BDD 90 FE            [ 2]  932     LDW Y,(Y)
      002BDF 90 BF 26         [ 2]  933     LDW YTEMP,Y ; d2 hi 
      002BE2 90 93            [ 1]  934     LDW Y,X 
      002BE4 90 EE 02         [ 2]  935     LDW Y,(2,Y)
      002BE7 90 BF 24         [ 2]  936     LDW XTEMP,Y ; d2 lo 
      002BEA 1C 00 04         [ 2]  937     ADDW X,#4 
      002BED 90 93            [ 1]  938     LDW Y,X 
      002BEF 90 EE 02         [ 2]  939     LDW Y,(2,Y) ; d1 lo
      002BF2 72 B9 00 24      [ 2]  940     ADDW Y,XTEMP
      002BF6 EF 02            [ 2]  941     LDW (2,X),Y 
      002BF8 90 93            [ 1]  942     LDW Y,X 
      002BFA 90 FE            [ 2]  943     LDW Y,(Y) ; d1 hi 
      002BFC 24 04            [ 1]  944     JRNC DPLUS1 
      002BFE 72 A9 00 01      [ 2]  945     ADDW Y,#1 
      002C02                        946 DPLUS1: 
      002C02 72 B9 00 26      [ 2]  947     ADDW Y,YTEMP 
      002C06 FF               [ 2]  948     LDW (X),Y 
      002C07 81               [ 4]  949     RET 
                                    950 
                                    951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    952 ;   D- ( d1 d2 -- d3 )
                                    953 ;   d3=d1-d2 
                                    954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C08                        955     _HEADER DSUB,2,"D-"
      002C08 2B D8                    1         .word LINK 
                           002C0A     2         LINK=.
      002C0A 02                       3         .byte 2  
      002C0B 44 2D                    4         .ascii "D-"
      002C0D                          5         DSUB:
      002C0D 90 93            [ 1]  956     LDW Y,X 
      002C0F 90 FE            [ 2]  957     LDW Y,(Y)
      002C11 90 BF 26         [ 2]  958     LDW YTEMP,Y ; d2 hi 
      002C14 90 93            [ 1]  959     LDW Y,X 
      002C16 90 EE 02         [ 2]  960     LDW Y,(2,Y)
      002C19 90 BF 24         [ 2]  961     LDW XTEMP,Y ; d2 lo 
      002C1C 1C 00 04         [ 2]  962     ADDW X,#4 
      002C1F 90 93            [ 1]  963     LDW Y,X 
      002C21 90 EE 02         [ 2]  964     LDW Y,(2,Y) ; d1 lo
      002C24 72 B2 00 24      [ 2]  965     SUBW Y,XTEMP
      002C28 EF 02            [ 2]  966     LDW (2,X),Y 
      002C2A 90 93            [ 1]  967     LDW Y,X 
      002C2C 90 FE            [ 2]  968     LDW Y,(Y) ; d1 hi 
      002C2E 24 04            [ 1]  969     JRNC DSUB1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002C30 72 A2 00 01      [ 2]  970     SUBW Y,#1 
      002C34                        971 DSUB1: 
      002C34 72 B2 00 26      [ 2]  972     SUBW Y,YTEMP 
      002C38 FF               [ 2]  973     LDW (X),Y 
      002C39 81               [ 4]  974     RET 
                                    975 
                                    976 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   4654 .endif 
                           000001  4655 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   4656         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C3A                         56     _HEADER FVER,9,"FLOAT-VER"
      002C3A 2C 0A                    1         .word LINK 
                           002C3C     2         LINK=.
      002C3C 09                       3         .byte 9  
      002C3D 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002C46                          5         FVER:
      002C46 CD 0F 96         [ 4]   57     CALL CR 
      002C49 CD 0F C3         [ 4]   58     CALL DOTQP 
      002C4C 11                      59     .byte  17 
      002C4D 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002C5E CD 1B 60         [ 4]   61     CALL PRT_LICENCE 
      002C61 CD 1B 38         [ 4]   62     CALL COPYRIGHT 
      002C64                         63     _DOLIT FLOAT_MAJOR     
      002C64 CD 04 70         [ 4]    1     CALL DOLIT 
      002C67 00 01                    2     .word FLOAT_MAJOR 
      002C69                         64     _DOLIT FLOAT_MINOR 
      002C69 CD 04 70         [ 4]    1     CALL DOLIT 
      002C6C 00 00                    2     .word FLOAT_MINOR 
      002C6E CC 1B 74         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C71                         75     _HEADER FPSW,4,"FPSW"
      002C71 2C 3C                    1         .word LINK 
                           002C73     2         LINK=.
      002C73 04                       3         .byte 4  
      002C74 46 50 53 57              4         .ascii "FPSW"
      002C78                          5         FPSW:
      002C78 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C7C 1D 00 02         [ 2]   77 	SUBW X,#2
      002C7F FF               [ 2]   78     LDW (X),Y
      002C80 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C81                         85     _HEADER FRESET,6,"FRESET"
      002C81 2C 73                    1         .word LINK 
                           002C83     2         LINK=.
      002C83 06                       3         .byte 6  
      002C84 46 52 45 53 45 54        4         .ascii "FRESET"
      002C8A                          5         FRESET:
      002C8A CD 0C 0F         [ 4]   86     CALL ZERO  
      002C8D CD 2C 78         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002C90 CD 04 D2         [ 4]   88     CALL STORE 
      002C93 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C94                         96     _HEADER FINIT,5,"FINIT"
      002C94 2C 83                    1         .word LINK 
                           002C96     2         LINK=.
      002C96 05                       3         .byte 5  
      002C97 46 49 4E 49 54           4         .ascii "FINIT"
      002C9C                          5         FINIT:
      002C9C CD 2C 8A         [ 4]   97     CALL FRESET 
      002C9F 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CA0                        104     _HEADER FER,3,"FER"
      002CA0 2C 96                    1         .word LINK 
                           002CA2     2         LINK=.
      002CA2 03                       3         .byte 3  
      002CA3 46 45 52                 4         .ascii "FER"
      002CA6                          5         FER:
      002CA6 CD 2C 78         [ 4]  105     CALL FPSW 
      002CA9 CD 04 E4         [ 4]  106     CALL AT 
      002CAC 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CAD                        113     _HEADER FZE,3,"FZE"
      002CAD 2C A2                    1         .word LINK 
                           002CAF     2         LINK=.
      002CAF 03                       3         .byte 3  
      002CB0 46 5A 45                 4         .ascii "FZE"
      002CB3                          5         FZE:
      002CB3 CD 2C 78         [ 4]  114     CALL FPSW
      002CB6 CD 04 E4         [ 4]  115     CALL AT  
      002CB9 CD 0C 1A         [ 4]  116     CALL ONE 
      002CBC CD 06 77         [ 4]  117     CALL ANDD
      002CBF CD 08 87         [ 4]  118     CALL NEGAT  
      002CC2 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CC3                        125     _HEADER FNE,3,"FNE"
      002CC3 2C AF                    1         .word LINK 
                           002CC5     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002CC5 03                       3         .byte 3  
      002CC6 46 4E 45                 4         .ascii "FNE"
      002CC9                          5         FNE:
      002CC9 CD 2C 78         [ 4]  126     CALL FPSW 
      002CCC CD 04 E4         [ 4]  127     CALL AT 
      002CCF                        128     _DOLIT 2 
      002CCF CD 04 70         [ 4]    1     CALL DOLIT 
      002CD2 00 02                    2     .word 2 
      002CD4 CD 06 77         [ 4]  129     CALL ANDD
      002CD7 CD 0B F5         [ 4]  130     CALL TWOSL
      002CDA CD 08 87         [ 4]  131     CALL NEGAT   
      002CDD 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CDE                        138     _HEADER FOV,3,"FOV"
      002CDE 2C C5                    1         .word LINK 
                           002CE0     2         LINK=.
      002CE0 03                       3         .byte 3  
      002CE1 46 4F 56                 4         .ascii "FOV"
      002CE4                          5         FOV:
      002CE4 CD 2C 78         [ 4]  139     CALL FPSW
      002CE7 CD 04 E4         [ 4]  140     CALL AT  
      002CEA                        141     _DOLIT 4 
      002CEA CD 04 70         [ 4]    1     CALL DOLIT 
      002CED 00 04                    2     .word 4 
      002CEF CD 06 77         [ 4]  142     CALL ANDD
      002CF2                        143     _DOLIT 2 
      002CF2 CD 04 70         [ 4]    1     CALL DOLIT 
      002CF5 00 02                    2     .word 2 
      002CF7 CD 0B DD         [ 4]  144     CALL RSHIFT 
      002CFA CD 08 87         [ 4]  145     CALL NEGAT  
      002CFD 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CFE                        152     _HEADER SFZ,3,"SFZ"
      002CFE 2C E0                    1         .word LINK 
                           002D00     2         LINK=.
      002D00 03                       3         .byte 3  
      002D01 53 46 5A                 4         .ascii "SFZ"
      002D04                          5         SFZ:
      002D04 CD 2C A6         [ 4]  153     CALL FER 
      002D07                        154     _DOLIT 0xfffe 
      002D07 CD 04 70         [ 4]    1     CALL DOLIT 
      002D0A FF FE                    2     .word 0xfffe 
      002D0C CD 06 77         [ 4]  155     CALL ANDD 
      002D0F CD 05 E3         [ 4]  156     CALL TOR    
      002D12 CD 08 28         [ 4]  157     CALL DDUP 
      002D15                        158     _DOLIT 0xFF  
      002D15 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002D18 00 FF                    2     .word 0xFF 
      002D1A CD 06 77         [ 4]  159     CALL ANDD
      002D1D CD 28 AE         [ 4]  160     CALL DZEQUAL 
      002D20                        161     _DOLIT 1 
      002D20 CD 04 70         [ 4]    1     CALL DOLIT 
      002D23 00 01                    2     .word 1 
      002D25 CD 06 77         [ 4]  162     CALL ANDD 
      002D28 CD 05 35         [ 4]  163     CALL RFROM 
      002D2B CD 06 8B         [ 4]  164     CALL ORR 
      002D2E CD 2C 78         [ 4]  165     CALL FPSW 
      002D31 CD 04 D2         [ 4]  166     CALL STORE 
      002D34 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D35                        174     _HEADER SFN,3,"SFN"
      002D35 2D 00                    1         .word LINK 
                           002D37     2         LINK=.
      002D37 03                       3         .byte 3  
      002D38 53 46 4E                 4         .ascii "SFN"
      002D3B                          5         SFN:
      002D3B CD 2C A6         [ 4]  175     CALL FER 
      002D3E                        176     _DOLIT 0xFFFD 
      002D3E CD 04 70         [ 4]    1     CALL DOLIT 
      002D41 FF FD                    2     .word 0xFFFD 
      002D43 CD 06 77         [ 4]  177     CALL ANDD  
      002D46 CD 05 E3         [ 4]  178     CALL TOR 
      002D49 CD 06 1A         [ 4]  179     CALL DUPP 
      002D4C                        180     _DOLIT 0X80 
      002D4C CD 04 70         [ 4]    1     CALL DOLIT 
      002D4F 00 80                    2     .word 0X80 
      002D51 CD 06 77         [ 4]  181     CALL ANDD 
      002D54                        182     _DOLIT 6 
      002D54 CD 04 70         [ 4]    1     CALL DOLIT 
      002D57 00 06                    2     .word 6 
      002D59 CD 0B DD         [ 4]  183     CALL RSHIFT 
      002D5C CD 05 35         [ 4]  184     CALL RFROM 
      002D5F CD 06 8B         [ 4]  185     CALL ORR 
      002D62 CD 2C 78         [ 4]  186     CALL FPSW 
      002D65 CD 04 D2         [ 4]  187     CALL STORE 
      002D68 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D69                        195     _HEADER SFV,3,"SFV"
      002D69 2D 37                    1         .word LINK 
                           002D6B     2         LINK=.
      002D6B 03                       3         .byte 3  
      002D6C 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002D6F                          5         SFV:
      002D6F CD 2C A6         [ 4]  196     CALL FER 
      002D72                        197     _DOLIT 4 
      002D72 CD 04 70         [ 4]    1     CALL DOLIT 
      002D75 00 04                    2     .word 4 
      002D77 CD 06 8B         [ 4]  198     CALL ORR 
      002D7A CD 2C 78         [ 4]  199     CALL FPSW 
      002D7D CD 04 D2         [ 4]  200     CALL STORE 
      002D80 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D81                        209     _HEADER ATEXP,4,"F>ME"             
      002D81 2D 6B                    1         .word LINK 
                           002D83     2         LINK=.
      002D83 04                       3         .byte 4  
      002D84 46 3E 4D 45              4         .ascii "F>ME"
      002D88                          5         ATEXP:
      002D88 CD 2C 8A         [ 4]  210     CALL FRESET
      002D8B CD 2D 3B         [ 4]  211     CALL SFN
      002D8E CD 2D 04         [ 4]  212     CALL SFZ 
      002D91 90 93            [ 1]  213     LDW Y,X 
      002D93 90 FE            [ 2]  214     LDW Y,(Y)
      002D95 90 89            [ 2]  215     PUSHW Y 
      002D97 4F               [ 1]  216     CLR A  
      002D98 90 5E            [ 1]  217     SWAPW Y 
      002D9A 2A 01            [ 1]  218     JRPL ATEXP1 
      002D9C 43               [ 1]  219     CPL A 
      002D9D                        220 ATEXP1: ; sign extend mantissa 
      002D9D 90 5E            [ 1]  221     SWAPW Y 
      002D9F 90 95            [ 1]  222     LD YH,A 
      002DA1 FF               [ 2]  223     LDW (X),Y 
      002DA2 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002DA5 90 85            [ 2]  225     POPW Y 
      002DA7 4F               [ 1]  226     CLR A 
      002DA8 90 5D            [ 2]  227     TNZW Y 
      002DAA 2A 01            [ 1]  228     JRPL ATEXP2 
      002DAC 43               [ 1]  229     CPL A 
      002DAD                        230 ATEXP2:
      002DAD 90 5E            [ 1]  231     SWAPW Y 
      002DAF 90 95            [ 1]  232     LD YH,A 
      002DB1 FF               [ 2]  233     LDW (X),Y 
      002DB2 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DB3                        241     _HEADER STEXP,4,"ME>F"
      002DB3 2D 83                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                           002DB5     2         LINK=.
      002DB5 04                       3         .byte 4  
      002DB6 4D 45 3E 46              4         .ascii "ME>F"
      002DBA                          5         STEXP:
      002DBA CD 06 1A         [ 4]  242     CALL DUPP 
      002DBD CD 08 ED         [ 4]  243     CALL ABSS 
      002DC0                        244     _DOLIT 127 
      002DC0 CD 04 70         [ 4]    1     CALL DOLIT 
      002DC3 00 7F                    2     .word 127 
      002DC5 CD 09 54         [ 4]  245     CALL GREAT
      002DC8                        246     _QBRAN STEXP1
      002DC8 CD 04 99         [ 4]    1     CALL QBRAN
      002DCB 2D D0                    2     .word STEXP1
      002DCD CD 2D 6F         [ 4]  247     CALL SFV
      002DD0                        248 STEXP1:
      002DD0 90 93            [ 1]  249     LDW Y,X 
      002DD2 90 FE            [ 2]  250     LDW Y,(Y)
      002DD4 4F               [ 1]  251     CLR A 
      002DD5 90 95            [ 1]  252     LD YH,A
      002DD7 90 5E            [ 1]  253     SWAPW Y 
      002DD9 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002DDB 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002DDE CD 08 28         [ 4]  256     CALL DDUP 
      002DE1 CD 26 C0         [ 4]  257     CALL DABS
      002DE4 CD 06 2A         [ 4]  258     CALL SWAPP 
      002DE7                        259     _DROP  
      002DE7 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002DEA                        260     _DOLIT 127 
      002DEA CD 04 70         [ 4]    1     CALL DOLIT 
      002DED 00 7F                    2     .word 127 
      002DEF CD 09 54         [ 4]  261     CALL GREAT 
      002DF2                        262     _QBRAN STEXP2 
      002DF2 CD 04 99         [ 4]    1     CALL QBRAN
      002DF5 2D FA                    2     .word STEXP2
      002DF7 CD 2D 6F         [ 4]  263     CALL SFV 
      002DFA                        264 STEXP2: 
      002DFA 4F               [ 1]  265     CLR A 
      002DFB F7               [ 1]  266     LD (X),A     
      002DFC CD 05 35         [ 4]  267     CALL RFROM 
      002DFF CD 06 8B         [ 4]  268     CALL ORR
      002E02 CD 2D 04         [ 4]  269     CALL SFZ 
      002E05 CD 2D 3B         [ 4]  270     CALL SFN 
      002E08 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E09                        279     _HEADER EDOT,2,"E."
      002E09 2D B5                    1         .word LINK 
                           002E0B     2         LINK=.
      002E0B 02                       3         .byte 2  
      002E0C 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002E0E                          5         EDOT:
      002E0E CD 06 E0         [ 4]  280     CALL BASE 
      002E11 CD 04 E4         [ 4]  281     CALL AT 
      002E14 CD 05 E3         [ 4]  282     CALL TOR 
      002E17                        283     _DOLIT 10 
      002E17 CD 04 70         [ 4]    1     CALL DOLIT 
      002E1A 00 0A                    2     .word 10 
      002E1C CD 06 E0         [ 4]  284     CALL BASE 
      002E1F CD 04 D2         [ 4]  285     CALL STORE 
      002E22 CD 2D 88         [ 4]  286     CALL ATEXP ; m e 
      002E25                        287 EDOT0:
      002E25 CD 05 E3         [ 4]  288     CALL TOR   
      002E28 CD 26 C0         [ 4]  289     CALL DABS 
      002E2B CD 0F 53         [ 4]  290     CALL SPACE 
      002E2E CD 0E 17         [ 4]  291     CALL BDIGS     
      002E31                        292 EDOT2: 
      002E31 CD 27 2C         [ 4]  293     CALL DDIG
      002E34 CD 05 35         [ 4]  294     CALL RFROM 
      002E37 CD 0B A3         [ 4]  295     CALL ONEP 
      002E3A CD 05 E3         [ 4]  296     CALL TOR 
      002E3D CD 06 1A         [ 4]  297     CALL DUPP
      002E40                        298     _QBRAN EDOT3 
      002E40 CD 04 99         [ 4]    1     CALL QBRAN
      002E43 2E 47                    2     .word EDOT3
      002E45 20 EA            [ 2]  299     JRA EDOT2  
      002E47                        300 EDOT3:
      002E47 CD 06 42         [ 4]  301     CALL OVER 
      002E4A CD 06 E0         [ 4]  302     CALL BASE 
      002E4D CD 04 E4         [ 4]  303     CALL AT 
      002E50 CD 09 11         [ 4]  304     CALL ULESS 
      002E53                        305     _QBRAN EDOT2 
      002E53 CD 04 99         [ 4]    1     CALL QBRAN
      002E56 2E 31                    2     .word EDOT2
      002E58                        306     _DOLIT '.'
      002E58 CD 04 70         [ 4]    1     CALL DOLIT 
      002E5B 00 2E                    2     .word '.' 
      002E5D CD 0E 27         [ 4]  307     CALL HOLD  
      002E60 CD 27 2C         [ 4]  308     CALL DDIG
      002E63 CD 2C C9         [ 4]  309     CALL FNE 
      002E66                        310     _QBRAN EDOT4 
      002E66 CD 04 99         [ 4]    1     CALL QBRAN
      002E69 2E 73                    2     .word EDOT4
      002E6B                        311     _DOLIT '-'
      002E6B CD 04 70         [ 4]    1     CALL DOLIT 
      002E6E 00 2D                    2     .word '-' 
      002E70 CD 0E 27         [ 4]  312     CALL HOLD 
      002E73                        313 EDOT4:       
      002E73                        314     _DROP 
      002E73 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E76 CD 0E 7C         [ 4]  315     CALL EDIGS 
      002E79 CD 0F 7D         [ 4]  316     CALL TYPES
      002E7C CD 05 35         [ 4]  317     CALL RFROM 
      002E7F CD 07 CD         [ 4]  318     CALL QDUP 
      002E82                        319     _QBRAN EDOT5     
      002E82 CD 04 99         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002E85 2E 92                    2     .word EDOT5
      002E87                        320     _DOLIT 'E'
      002E87 CD 04 70         [ 4]    1     CALL DOLIT 
      002E8A 00 45                    2     .word 'E' 
      002E8C CD 04 37         [ 4]  321     CALL EMIT 
      002E8F CD 10 3C         [ 4]  322     CALL DOT
      002E92                        323 EDOT5: 
      002E92 CD 05 35         [ 4]  324     CALL RFROM 
      002E95 CD 06 E0         [ 4]  325     CALL BASE 
      002E98 CD 04 D2         [ 4]  326     CALL STORE  
      002E9B 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E9C                        334     _HEADER FDOT,2,"F."
      002E9C 2E 0B                    1         .word LINK 
                           002E9E     2         LINK=.
      002E9E 02                       3         .byte 2  
      002E9F 46 2E                    4         .ascii "F."
      002EA1                          5         FDOT:
      002EA1 CD 06 E0         [ 4]  335     CALL BASE 
      002EA4 CD 04 E4         [ 4]  336     CALL AT 
      002EA7 CD 05 E3         [ 4]  337     CALL TOR 
      002EAA                        338     _DOLIT 10 
      002EAA CD 04 70         [ 4]    1     CALL DOLIT 
      002EAD 00 0A                    2     .word 10 
      002EAF CD 06 E0         [ 4]  339     CALL BASE 
      002EB2 CD 04 D2         [ 4]  340     CALL STORE 
      002EB5 CD 2D 88         [ 4]  341     CALL    ATEXP
      002EB8 CD 06 1A         [ 4]  342     CALL    DUPP  
      002EBB CD 08 ED         [ 4]  343     CALL    ABSS 
      002EBE                        344     _DOLIT  8
      002EBE CD 04 70         [ 4]    1     CALL DOLIT 
      002EC1 00 08                    2     .word 8 
      002EC3 CD 09 54         [ 4]  345     CALL    GREAT 
      002EC6                        346     _QBRAN  FDOT1 
      002EC6 CD 04 99         [ 4]    1     CALL QBRAN
      002EC9 2E CE                    2     .word FDOT1
      002ECB CC 2E 25         [ 2]  347     JP      EDOT0 
      002ECE                        348 FDOT1:
      002ECE CD 0F 53         [ 4]  349     CALL    SPACE 
      002ED1 CD 05 E3         [ 4]  350     CALL    TOR 
      002ED4 CD 2C C9         [ 4]  351     CALL    FNE 
      002ED7                        352     _QBRAN  FDOT0 
      002ED7 CD 04 99         [ 4]    1     CALL QBRAN
      002EDA 2E DF                    2     .word FDOT0
      002EDC CD 08 99         [ 4]  353     CALL    DNEGA 
      002EDF                        354 FDOT0: 
      002EDF CD 0E 17         [ 4]  355     CALL    BDIGS
      002EE2 CD 05 46         [ 4]  356     CALL    RAT  
      002EE5 CD 06 51         [ 4]  357     CALL    ZLESS 
      002EE8                        358     _QBRAN  FDOT6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002EE8 CD 04 99         [ 4]    1     CALL QBRAN
      002EEB 2F 10                    2     .word FDOT6
      002EED                        359 FDOT2: ; e<0 
      002EED CD 27 2C         [ 4]  360     CALL    DDIG 
      002EF0 CD 05 35         [ 4]  361     CALL    RFROM
      002EF3 CD 0B A3         [ 4]  362     CALL    ONEP 
      002EF6 CD 07 CD         [ 4]  363     CALL    QDUP 
      002EF9                        364     _QBRAN  FDOT3 
      002EF9 CD 04 99         [ 4]    1     CALL QBRAN
      002EFC 2F 03                    2     .word FDOT3
      002EFE CD 05 E3         [ 4]  365     CALL    TOR 
      002F01 20 EA            [ 2]  366     JRA   FDOT2 
      002F03                        367 FDOT3:
      002F03                        368     _DOLIT  '.' 
      002F03 CD 04 70         [ 4]    1     CALL DOLIT 
      002F06 00 2E                    2     .word '.' 
      002F08 CD 0E 27         [ 4]  369     CALL    HOLD 
      002F0B CD 27 44         [ 4]  370     CALL    DDIGS
      002F0E 20 12            [ 2]  371     JRA   FDOT9  
      002F10                        372 FDOT6: ; e>=0 
      002F10 20 08            [ 2]  373     JRA   FDOT8
      002F12                        374 FDOT7:     
      002F12                        375     _DOLIT  '0'
      002F12 CD 04 70         [ 4]    1     CALL DOLIT 
      002F15 00 30                    2     .word '0' 
      002F17 CD 0E 27         [ 4]  376     CALL    HOLD 
      002F1A                        377 FDOT8:
      002F1A CD 04 84         [ 4]  378     CALL    DONXT 
      002F1D 2F 12                  379     .word   FDOT7
      002F1F CD 27 44         [ 4]  380     CALL    DDIGS 
      002F22                        381 FDOT9:
      002F22 CD 2C C9         [ 4]  382     CALL    FNE 
      002F25                        383     _QBRAN  FDOT10 
      002F25 CD 04 99         [ 4]    1     CALL QBRAN
      002F28 2F 32                    2     .word FDOT10
      002F2A                        384     _DOLIT '-' 
      002F2A CD 04 70         [ 4]    1     CALL DOLIT 
      002F2D 00 2D                    2     .word '-' 
      002F2F CD 0E 27         [ 4]  385     CALL   HOLD 
      002F32                        386 FDOT10:
      002F32 CD 0E 7C         [ 4]  387     CALL    EDIGS 
      002F35 CD 0F 7D         [ 4]  388     CALL    TYPES 
      002F38 CD 05 35         [ 4]  389     CALL    RFROM 
      002F3B CD 06 E0         [ 4]  390     CALL    BASE 
      002F3E CD 04 D2         [ 4]  391     CALL    STORE 
      002F41 81               [ 4]  392     RET 
                                    393 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F42                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002F42 CD 05 E3         [ 4]  400     CALL TOR   ; R: cntr 
      002F45 CD 06 1A         [ 4]  401     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002F48 CD 05 02         [ 4]  402     CALL CAT 
      002F4B                        403     _DOLIT 'E' 
      002F4B CD 04 70         [ 4]    1     CALL DOLIT 
      002F4E 00 45                    2     .word 'E' 
      002F50 CD 08 FB         [ 4]  404     CALL EQUAL 
      002F53                        405     _QBRAN 1$
      002F53 CD 04 99         [ 4]    1     CALL QBRAN
      002F56 2F 83                    2     .word 1$
      002F58 CD 0B A3         [ 4]  406     CALL ONEP 
      002F5B CD 05 35         [ 4]  407     CALL RFROM  ; a cntr 
      002F5E CD 0B B0         [ 4]  408     CALL ONEM
      002F61 CD 06 1A         [ 4]  409     CALL DUPP 
      002F64                        410     _QBRAN 2$ ; a cntr 
      002F64 CD 04 99         [ 4]    1     CALL QBRAN
      002F67 2F 86                    2     .word 2$
      002F69 CD 0C 0F         [ 4]  411     CALL ZERO
      002F6C CD 06 1A         [ 4]  412     CALL DUPP 
      002F6F CD 27 D9         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F72 CD 25 68         [ 4]  414     CALL nsign 
      002F75 CD 05 E3         [ 4]  415     CALL TOR   ; R: esign  
      002F78 CD 25 95         [ 4]  416     CALL parse_digits
      002F7B                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F7B CD 04 99         [ 4]    1     CALL QBRAN
      002F7E 2F 8D                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F80                        419     _DDROP ; 0 a 
      002F80 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F83                        420 1$: 
      002F83 CD 05 35         [ 4]  421     CALL RFROM ; sign||cntr  
      002F86                        422 2$:
      002F86                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F86 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F89 CD 0C 0F         [ 4]  424     CALL ZERO   ; return only 0 
      002F8C 81               [ 4]  425     RET 
      002F8D                        426 PARSEXP_SUCCESS: 
      002F8D                        427     _DDROP ; drop dhi a 
      002F8D 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F90 CD 05 35         [ 4]  428     CALL RFROM ; es 
      002F93                        429     _QBRAN 1$
      002F93 CD 04 99         [ 4]    1     CALL QBRAN
      002F96 2F 9B                    2     .word 1$
      002F98 CD 08 87         [ 4]  430     CALL NEGAT
      002F9B                        431 1$:
      002F9B                        432     _DOLIT -1 ; -- e -1 
      002F9B CD 04 70         [ 4]    1     CALL DOLIT 
      002F9E FF FF                    2     .word -1 
      002FA0 81               [ 4]  433     RET 
                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FA1                        441     _HEADER FLOATQ,5,"FLOAT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      002FA1 2E 9E                    1         .word LINK 
                           002FA3     2         LINK=.
      002FA3 05                       3         .byte 5  
      002FA4 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002FAA                          5         FLOATQ:
      002FAA                        442     _QBRAN FLOATQ0 
      002FAA CD 04 99         [ 4]    1     CALL QBRAN
      002FAD 2F B2                    2     .word FLOATQ0
      002FAF CC 30 51         [ 2]  443     JP FLOAT_ERROR  ; not a float, string start with '#'
      002FB2                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002FB2 CD 06 E0         [ 4]  446     CALL BASE 
      002FB5 CD 04 E4         [ 4]  447     CALL AT 
      002FB8                        448     _DOLIT 10 
      002FB8 CD 04 70         [ 4]    1     CALL DOLIT 
      002FBB 00 0A                    2     .word 10 
      002FBD CD 08 FB         [ 4]  449     CALL EQUAL 
      002FC0                        450     _QBRAN FLOAT_ERROR 
      002FC0 CD 04 99         [ 4]    1     CALL QBRAN
      002FC3 30 51                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002FC5 CD 05 E3         [ 4]  452     CALL TOR ; R: sign  
      002FC8 CD 05 E3         [ 4]  453     CALL TOR ; R: sign cntr 
      002FCB CD 06 1A         [ 4]  454     CALL DUPP
      002FCE CD 05 02         [ 4]  455     CALL CAT 
      002FD1                        456     _DOLIT '.' 
      002FD1 CD 04 70         [ 4]    1     CALL DOLIT 
      002FD4 00 2E                    2     .word '.' 
      002FD6 CD 08 FB         [ 4]  457     CALL EQUAL 
      002FD9                        458     _QBRAN FLOATQ1 ; not a dot 
      002FD9 CD 04 99         [ 4]    1     CALL QBRAN
      002FDC 30 11                    2     .word FLOATQ1
      002FDE CD 0B A3         [ 4]  459     CALL ONEP 
      002FE1 CD 05 35         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002FE4 CD 0B B0         [ 4]  461     CALL ONEM 
      002FE7 CD 06 1A         [ 4]  462     CALL DUPP 
      002FEA CD 05 E3         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002FED CD 25 95         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002FF0 CD 06 1A         [ 4]  466     CALL DUPP 
      002FF3 CD 05 35         [ 4]  467     CALL RFROM 
      002FF6 CD 06 2A         [ 4]  468     CALL SWAPP 
      002FF9 CD 08 D3         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002FFC CD 05 E3         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002FFF CD 06 1A         [ 4]  471     CALL DUPP ; cntr cntr  
      003002                        472     _QBRAN 1$ ; end of string, no exponent
      003002 CD 04 99         [ 4]    1     CALL QBRAN
      003005 30 09                    2     .word 1$
      003007 20 11            [ 2]  473     JRA FLOATQ2
      003009 CD 06 2A         [ 4]  474 1$: CALL SWAPP 
      00300C                        475     _DROP ; a
      00300C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00300F 20 11            [ 2]  476     JRA FLOATQ3        
      003011                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      003011 CD 05 35         [ 4]  478     CALL RFROM ; cntr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003014 CD 0C 0F         [ 4]  479     CALL ZERO  ; fd 
      003017 CD 05 E3         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      00301A                        481 FLOATQ2: 
      00301A CD 2F 42         [ 4]  482     CALL parse_exponent 
      00301D                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      00301D CD 04 99         [ 4]    1     CALL QBRAN
      003020 30 4E                    2     .word FLOAT_ERROR0
      003022                        484 FLOATQ3: ; dm 0 || dm e  
      003022 CD 05 35         [ 4]  485     CALL RFROM ;  fd  
      003025 CD 08 D3         [ 4]  486     CALL SUBB  ; exp=e-fd 
      003028 CD 07 FD         [ 4]  487     CALL NROT 
      00302B CD 05 35         [ 4]  488     CALL RFROM  ; sign 
      00302E                        489     _QBRAN FLOATQ4 
      00302E CD 04 99         [ 4]    1     CALL QBRAN
      003031 30 36                    2     .word FLOATQ4
      003033 CD 08 99         [ 4]  490     CALL DNEGA 
      003036                        491 FLOATQ4:
      003036 CD 07 DE         [ 4]  492     CALL ROT 
      003039 CD 2D BA         [ 4]  493     CALL STEXP 
      00303C CD 07 DE         [ 4]  494     CALL ROT 
      00303F                        495     _DROP 
      00303F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003042 CD 2D 3B         [ 4]  496     CALL SFN 
      003045 CD 2D 04         [ 4]  497     CALL SFZ 
      003048                        498     _DOLIT -3 
      003048 CD 04 70         [ 4]    1     CALL DOLIT 
      00304B FF FD                    2     .word -3 
      00304D 81               [ 4]  499     RET       
      00304E                        500 FLOAT_ERROR0: 
      00304E CD 29 46         [ 4]  501     CALL DRFROM ; sign df      
      003051                        502 FLOAT_ERROR: 
      003051 CD 0C 51         [ 4]  503     CALL DEPTH 
      003054 CD 0B 96         [ 4]  504     CALL CELLS 
      003057 CD 05 FA         [ 4]  505     CALL SPAT 
      00305A CD 06 2A         [ 4]  506     CALL SWAPP 
      00305D CD 08 3D         [ 4]  507     CALL PLUS  
      003060 CD 06 07         [ 4]  508     CALL SPSTO 
      003063 CD 0C 0F         [ 4]  509     CALL ZERO 
      003066 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003067                        516     _HEADER LSCALE,6,"LSCALE"
      003067 2F A3                    1         .word LINK 
                           003069     2         LINK=.
      003069 06                       3         .byte 6  
      00306A 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      003070                          5         LSCALE:
      003070 CD 2D 88         [ 4]  517     CALL ATEXP 
      003073 CD 0C 1A         [ 4]  518     CALL ONE 
      003076 CD 08 D3         [ 4]  519     CALL SUBB 
      003079 CD 05 E3         [ 4]  520     CALL TOR
      00307C                        521     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00307C CD 04 70         [ 4]    1     CALL DOLIT 
      00307F 00 0A                    2     .word 10 
      003081 CD 27 B3         [ 4]  522     CALL DSSTAR
      003084 CD 05 35         [ 4]  523     CALL RFROM 
      003087 CD 2D BA         [ 4]  524     CALL STEXP 
      00308A 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00308B                        531     _HEADER RSCALE,6,"RSCALE"
      00308B 30 69                    1         .word LINK 
                           00308D     2         LINK=.
      00308D 06                       3         .byte 6  
      00308E 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003094                          5         RSCALE:
      003094 CD 2D 88         [ 4]  532     CALL ATEXP 
      003097 CD 0C 1A         [ 4]  533     CALL ONE 
      00309A CD 08 3D         [ 4]  534     CALL PLUS 
      00309D CD 05 E3         [ 4]  535     CALL TOR 
      0030A0                        536     _DOLIT 10 
      0030A0 CD 04 70         [ 4]    1     CALL DOLIT 
      0030A3 00 0A                    2     .word 10 
      0030A5 CD 26 EB         [ 4]  537     CALL DSLMOD 
      0030A8 CD 07 DE         [ 4]  538     CALL ROT 
      0030AB                        539     _DROP 
      0030AB 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0030AE CD 05 35         [ 4]  540     CALL RFROM 
      0030B1 CD 2D BA         [ 4]  541     CALL STEXP 
      0030B4 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030B5                        551 SCALEUP:
      0030B5 CD 08 28         [ 4]  552     CALL DDUP
      0030B8 CD 09 27         [ 4]  553     CALL LESS  
      0030BB                        554     _QBRAN SCALEUP3
      0030BB CD 04 99         [ 4]    1     CALL QBRAN
      0030BE 30 EB                    2     .word SCALEUP3
      0030C0 CD 29 28         [ 4]  555     CALL DTOR   ; R: u1 u2  
      0030C3 CD 08 28         [ 4]  556     CALL DDUP 
      0030C6                        557     _DOLIT 0XCCCC 
      0030C6 CD 04 70         [ 4]    1     CALL DOLIT 
      0030C9 CC CC                    2     .word 0XCCCC 
      0030CB                        558     _DOLIT 0XCCC 
      0030CB CD 04 70         [ 4]    1     CALL DOLIT 
      0030CE 0C CC                    2     .word 0XCCC 
      0030D0 CD 28 EB         [ 4]  559     CALL DGREAT  
      0030D3                        560     _TBRAN SCALEUP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0030D3 CD 04 A7         [ 4]    1     CALL TBRAN 
      0030D6 30 E8                    2     .word SCALEUP2 
      0030D8                        561     _DOLIT 10 
      0030D8 CD 04 70         [ 4]    1     CALL DOLIT 
      0030DB 00 0A                    2     .word 10 
      0030DD CD 27 92         [ 4]  562     CALL UDSSTAR 
      0030E0 CD 29 46         [ 4]  563     CALL DRFROM 
      0030E3 CD 0B B0         [ 4]  564     CALL ONEM
      0030E6 20 CD            [ 2]  565     JRA SCALEUP
      0030E8                        566 SCALEUP2:
      0030E8 CD 29 46         [ 4]  567     CALL DRFROM
      0030EB                        568 SCALEUP3: 
      0030EB 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030EC                        578 SCALEDOWN: 
      0030EC CD 08 28         [ 4]  579     CALL DDUP 
      0030EF CD 09 54         [ 4]  580     CALL GREAT 
      0030F2                        581     _QBRAN SCALDN3 
      0030F2 CD 04 99         [ 4]    1     CALL QBRAN
      0030F5 31 1B                    2     .word SCALDN3
      0030F7 CD 29 28         [ 4]  582     CALL DTOR 
      0030FA CD 08 28         [ 4]  583     CALL DDUP 
      0030FD CD 28 AE         [ 4]  584     CALL DZEQUAL 
      003100                        585     _TBRAN SCALDN2  
      003100 CD 04 A7         [ 4]    1     CALL TBRAN 
      003103 31 18                    2     .word SCALDN2 
      003105                        586     _DOLIT 10
      003105 CD 04 70         [ 4]    1     CALL DOLIT 
      003108 00 0A                    2     .word 10 
      00310A CD 0C 0F         [ 4]  587     CALL ZERO  
      00310D CD 2B CC         [ 4]  588     CALL DSLASH 
      003110 CD 29 46         [ 4]  589     CALL DRFROM 
      003113 CD 0B A3         [ 4]  590     CALL ONEP  
      003116 20 D4            [ 2]  591     JRA SCALEDOWN 
      003118                        592 SCALDN2:
      003118 CD 29 46         [ 4]  593     CALL DRFROM 
      00311B                        594 SCALDN3:
      00311B 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00311C                        602     _HEADER FALIGN,7,"F-ALIGN"
      00311C 30 8D                    1         .word LINK 
                           00311E     2         LINK=.
      00311E 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00311F 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      003126                          5         FALIGN:
      003126 CD 2D 88         [ 4]  603     CALL ATEXP 
      003129 CD 05 E3         [ 4]  604     CALL TOR 
      00312C CD 27 D9         [ 4]  605     CALL DSWAP 
      00312F CD 2D 88         [ 4]  606     CALL ATEXP 
      003132 CD 05 E3         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      003135 CD 27 D9         [ 4]  608     CALL DSWAP 
      003138 CD 29 5E         [ 4]  609     CALL DRAT 
      00313B CD 08 FB         [ 4]  610     CALL EQUAL 
      00313E                        611     _TBRAN FALGN8
      00313E CD 04 A7         [ 4]    1     CALL TBRAN 
      003141 31 C3                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      003143 CD 29 5E         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      003146 CD 09 54         [ 4]  616     CALL GREAT 
      003149                        617     _QBRAN FALGN4 ; e2<e1 
      003149 CD 04 99         [ 4]    1     CALL QBRAN
      00314C 31 5F                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      00314E CD 29 46         [ 4]  619     CALL DRFROM 
      003151 CD 06 2A         [ 4]  620     CALL SWAPP 
      003154 CD 30 B5         [ 4]  621     CALL SCALEUP 
      003157 CD 06 2A         [ 4]  622     CALL SWAPP 
      00315A CD 29 28         [ 4]  623     CALL DTOR 
      00315D 20 0F            [ 2]  624     JRA FALGN6
      00315F                        625 FALGN4: ; e2<e1 then scaleup m1 
      00315F CD 27 D9         [ 4]  626     CALL DSWAP 
      003162 CD 29 46         [ 4]  627     CALL DRFROM 
      003165 CD 30 B5         [ 4]  628     CALL SCALEUP 
      003168 CD 29 28         [ 4]  629     CALL DTOR
      00316B CD 27 D9         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      00316E                        635 FALGN6: 
      00316E CD 29 5E         [ 4]  636     CALL DRAT 
      003171 CD 08 FB         [ 4]  637     CALL EQUAL 
      003174                        638     _TBRAN FALGN8 
      003174 CD 04 A7         [ 4]    1     CALL TBRAN 
      003177 31 C3                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003179 CD 29 5E         [ 4]  640     CALL DRAT 
      00317C CD 09 54         [ 4]  641     CALL GREAT 
      00317F                        642     _QBRAN FALGN7 ; e2<e1 
      00317F CD 04 99         [ 4]    1     CALL QBRAN
      003182 31 95                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      003184 CD 27 D9         [ 4]  644     CALL DSWAP 
      003187 CD 29 46         [ 4]  645     CALL DRFROM 
      00318A CD 30 EC         [ 4]  646     CALL SCALEDOWN
      00318D CD 06 2A         [ 4]  647     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      003190 CD 29 28         [ 4]  648     CALL DTOR 
      003193 20 0F            [ 2]  649     JRA FALGN71  
      003195                        650 FALGN7: ; e2<e1 scaledown m2 
      003195 CD 29 46         [ 4]  651     CALL DRFROM 
      003198 CD 06 2A         [ 4]  652     CALL SWAPP 
      00319B CD 30 EC         [ 4]  653     CALL SCALEDOWN 
      00319E CD 06 2A         [ 4]  654     CALL SWAPP 
      0031A1 CD 29 28         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      0031A4                        660 FALGN71:
      0031A4 CD 29 5E         [ 4]  661     CALL DRAT 
      0031A7 CD 08 FB         [ 4]  662     CALL EQUAL
      0031AA                        663     _TBRAN FALGN8 
      0031AA CD 04 A7         [ 4]    1     CALL TBRAN 
      0031AD 31 C3                    2     .word FALGN8 
      0031AF CD 29 46         [ 4]  664     CALL DRFROM 
      0031B2 CD 08 28         [ 4]  665     CALL DDUP 
      0031B5 CD 09 54         [ 4]  666     CALL GREAT 
      0031B8                        667     _TBRAN FALGN72
      0031B8 CD 04 A7         [ 4]    1     CALL TBRAN 
      0031BB 31 C0                    2     .word FALGN72 
      0031BD CD 06 2A         [ 4]  668     CALL SWAPP     
      0031C0                        669 FALGN72:
      0031C0 CD 29 28         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      0031C3                        671 FALGN8:
      0031C3 CD 29 46         [ 4]  672     CALL DRFROM 
      0031C6                        673     _DROP 
      0031C6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0031C9 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031CA                        680     _HEADER FPLUS,2,"F+"
      0031CA 31 1E                    1         .word LINK 
                           0031CC     2         LINK=.
      0031CC 02                       3         .byte 2  
      0031CD 46 2B                    4         .ascii "F+"
      0031CF                          5         FPLUS:
      0031CF CD 31 26         [ 4]  681     CALL FALIGN 
      0031D2 CD 05 E3         [ 4]  682     CALL TOR 
      0031D5 CD 2B DB         [ 4]  683     CALL DPLUS
      0031D8 CD 26 D1         [ 4]  684     CALL DSIGN 
      0031DB CD 05 E3         [ 4]  685     CALL TOR 
      0031DE CD 26 C0         [ 4]  686     CALL DABS 
      0031E1 CD 32 44         [ 4]  687     CALL SCALETOM
      0031E4 CD 05 35         [ 4]  688     CALL RFROM 
      0031E7                        689     _QBRAN FPLUS1 
      0031E7 CD 04 99         [ 4]    1     CALL QBRAN
      0031EA 31 EF                    2     .word FPLUS1
      0031EC CD 08 99         [ 4]  690     CALL DNEGA  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0031EF                        691 FPLUS1: 
      0031EF CD 07 DE         [ 4]  692     CALL ROT   
      0031F2 CD 05 35         [ 4]  693     CALL RFROM
      0031F5 CD 08 3D         [ 4]  694     CALL PLUS  
      0031F8 CD 2D BA         [ 4]  695     CALL STEXP 
      0031FB 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031FC                        702     _HEADER FSUB,2,"F-"
      0031FC 31 CC                    1         .word LINK 
                           0031FE     2         LINK=.
      0031FE 02                       3         .byte 2  
      0031FF 46 2D                    4         .ascii "F-"
      003201                          5         FSUB:
      003201 CD 31 26         [ 4]  703     CALL FALIGN 
      003204 CD 05 E3         [ 4]  704     CALL TOR 
      003207 CD 2C 0D         [ 4]  705     CALL DSUB
      00320A CD 26 D1         [ 4]  706     CALL DSIGN 
      00320D CD 05 E3         [ 4]  707     CALL TOR 
      003210 CD 26 C0         [ 4]  708     CALL DABS 
      003213 CD 32 44         [ 4]  709     CALL SCALETOM 
      003216 CD 05 35         [ 4]  710     CALL RFROM 
      003219                        711     _QBRAN FSUB1 
      003219 CD 04 99         [ 4]    1     CALL QBRAN
      00321C 32 21                    2     .word FSUB1
      00321E CD 08 99         [ 4]  712     CALL DNEGA 
      003221                        713 FSUB1:
      003221 CD 07 DE         [ 4]  714     CALL ROT 
      003224 CD 05 35         [ 4]  715     CALL RFROM
      003227 CD 08 3D         [ 4]  716     CALL PLUS  
      00322A CD 2D BA         [ 4]  717     CALL STEXP 
      00322D 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00322E                        725 UMOD10:
      00322E                        726     _DOLIT 10 
      00322E CD 04 70         [ 4]    1     CALL DOLIT 
      003231 00 0A                    2     .word 10 
      003233 CD 26 EB         [ 4]  727     CALL DSLMOD
      003236 CD 07 DE         [ 4]  728     CALL ROT  
      003239 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00323A                        739     _HEADER SCALETOM,7,"SCALE>M"
      00323A 31 FE                    1         .word LINK 
                           00323C     2         LINK=.
      00323C 07                       3         .byte 7  
      00323D 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      003244                          5         SCALETOM:
      003244 CD 0C 0F         [ 4]  740     CALL ZERO 
      003247 CD 07 FD         [ 4]  741     CALL NROT 
      00324A                        742 SCAL1:
      00324A CD 06 1A         [ 4]  743     CALL DUPP 
      00324D                        744     _DOLIT 0X7F 
      00324D CD 04 70         [ 4]    1     CALL DOLIT 
      003250 00 7F                    2     .word 0X7F 
      003252 CD 09 3E         [ 4]  745     CALL UGREAT 
      003255                        746     _QBRAN SCAL2  
      003255 CD 04 99         [ 4]    1     CALL QBRAN
      003258 32 6B                    2     .word SCAL2
      00325A CD 32 2E         [ 4]  747     CALL UMOD10 
      00325D                        748     _DROP 
      00325D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003260 CD 07 DE         [ 4]  749     CALL ROT 
      003263 CD 0B A3         [ 4]  750     CALL ONEP 
      003266 CD 07 FD         [ 4]  751     CALL NROT  
      003269 20 DF            [ 2]  752     JRA SCAL1 
      00326B                        753 SCAL2: 
      00326B 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00326C                        761 UDIV10:
      00326C 90 93            [ 1]  762     LDW Y,X 
      00326E 90 FE            [ 2]  763     LDW Y,(Y)
      003270 A6 0A            [ 1]  764     LD A,#10 
      003272 90 62            [ 2]  765     DIV Y,A 
      003274 FF               [ 2]  766     LDW (X),Y 
      003275 90 95            [ 1]  767     LD YH,A 
      003277 E6 02            [ 1]  768     LD A,(2,X)
      003279 90 97            [ 1]  769     LD YL,A 
      00327B A6 0A            [ 1]  770     LD A,#10 
      00327D 90 62            [ 2]  771     DIV Y,A 
      00327F 90 95            [ 1]  772     LD YH,A 
      003281 90 9F            [ 1]  773     LD A,YL 
      003283 E7 02            [ 1]  774     LD (2,X),A 
      003285 E6 03            [ 1]  775     LD A,(3,X)
      003287 90 97            [ 1]  776     LD YL,A 
      003289 A6 0A            [ 1]  777     LD A,#10 
      00328B 90 62            [ 2]  778     DIV Y,A 
      00328D 90 95            [ 1]  779     LD YH,A 
      00328F 90 9F            [ 1]  780     LD A,YL 
      003291 E7 03            [ 1]  781     LD (3,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      003293 E6 04            [ 1]  782     LD A,(4,X)
      003295 90 97            [ 1]  783     LD YL,A 
      003297 A6 0A            [ 1]  784     LD A,#10 
      003299 90 62            [ 2]  785     DIV Y,A 
      00329B 90 95            [ 1]  786     LD YH,A 
      00329D 90 9F            [ 1]  787     LD A,YL 
      00329F E7 04            [ 1]  788     LD (4,X),A 
      0032A1 E6 05            [ 1]  789     LD A,(5,X)
      0032A3 90 97            [ 1]  790     LD YL,A 
      0032A5 A6 0A            [ 1]  791     LD A,#10 
      0032A7 90 62            [ 2]  792     DIV Y,A 
      0032A9 90 9F            [ 1]  793     LD A,YL 
      0032AB E7 05            [ 1]  794     LD (5,X),A 
      0032AD 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0032AE                        806     _HEADER MMSTAR,3,"MM*"
      0032AE 32 3C                    1         .word LINK 
                           0032B0     2         LINK=.
      0032B0 03                       3         .byte 3  
      0032B1 4D 4D 2A                 4         .ascii "MM*"
      0032B4                          5         MMSTAR:
      0032B4 CD 08 28         [ 4]  807     CALL DDUP
      0032B7 CD 28 AE         [ 4]  808     CALL DZEQUAL
      0032BA                        809     _TBRAN MMSTA2
      0032BA CD 04 A7         [ 4]    1     CALL TBRAN 
      0032BD 32 CA                    2     .word MMSTA2 
      0032BF                        810 MMSTA1:
      0032BF CD 29 EE         [ 4]  811     CALL DOVER 
      0032C2 CD 28 AE         [ 4]  812     CALL DZEQUAL 
      0032C5                        813     _QBRAN MMSTA3 
      0032C5 CD 04 99         [ 4]    1     CALL QBRAN
      0032C8 32 D5                    2     .word MMSTA3
      0032CA                        814 MMSTA2: ; ( -- 0 0 0 )
      0032CA 1C 00 02         [ 2]  815     ADDW X,#2 
      0032CD 90 5F            [ 1]  816     CLRW Y 
      0032CF FF               [ 2]  817     LDW (X),Y 
      0032D0 EF 02            [ 2]  818     LDW (2,X),Y
      0032D2 EF 04            [ 2]  819     LDW (4,X),Y 
      0032D4 81               [ 4]  820     RET 
      0032D5                        821 MMSTA3:
      0032D5 CD 26 D1         [ 4]  822     CALL DSIGN 
      0032D8 CD 05 E3         [ 4]  823     CALL TOR    ; R: m2sign 
      0032DB CD 26 C0         [ 4]  824     CALL DABS   ; m1 um2 
      0032DE CD 27 D9         [ 4]  825     CALL DSWAP  ; um2 m1 
      0032E1 CD 26 D1         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      0032E4 CD 05 35         [ 4]  827     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0032E7 CD 06 A0         [ 4]  828     CALL XORR 
      0032EA CD 05 E3         [ 4]  829     CALL TOR   ; R: product_sign 
      0032ED CD 26 C0         [ 4]  830     CALL DABS  ; um2 um1  
      0032F0 CD 29 28         [ 4]  831     CALL DTOR  ; um2 
      0032F3 CD 06 1A         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032F6 CD 05 46         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      0032F9 CD 0B 22         [ 4]  836     CALL STAR 
      0032FC CD 0C 0F         [ 4]  837     CALL ZERO 
      0032FF CD 06 2A         [ 4]  838     CALL SWAPP ; pd1<<16  
      003302 CD 27 D9         [ 4]  839     CALL DSWAP ; pd1 um2 
      003305 CD 06 42         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      003308 CD 05 35         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      00330B CD 0A D8         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      00330E CD 27 D9         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      003311 CD 05 46         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      003314 CD 0A D8         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003317 CD 07 DE         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      00331A CD 05 E3         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      00331D CD 2B DB         [ 4]  851     CALL DPLUS 
      003320 CD 2B DB         [ 4]  852     CALL DPLUS  
      003323 CD 29 46         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      003326 CD 0A D8         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      003329 CD 29 28         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      00332C 90 93            [ 1]  859     LDW Y,X 
      00332E 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      003331 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      003334 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      003336 90 93            [ 1]  863     LDW Y,X
      003338 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      00333A 24 04            [ 1]  865     JRNC MMSTA4
      00333C 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
      003340                        867 MMSTA4:     
      003340 1D 00 02         [ 2]  868     SUBW X,#2 
      003343 FF               [ 2]  869     LDW (X),Y 
      003344 90 85            [ 2]  870     POPW Y 
      003346 EF 02            [ 2]  871     LDW (2,X),Y 
      003348 90 85            [ 2]  872     POPW Y 
      00334A EF 04            [ 2]  873     LDW (4,X),Y
      00334C CD 0C 0F         [ 4]  874     CALL ZERO 
      00334F CD 05 E3         [ 4]  875     CALL TOR 
      003352                        876 MMSTA5:
      003352 CD 07 CD         [ 4]  877     CALL QDUP 
      003355                        878     _QBRAN MMSTA6 
      003355 CD 04 99         [ 4]    1     CALL QBRAN
      003358 33 68                    2     .word MMSTA6
      00335A CD 32 6C         [ 4]  879     CALL UDIV10 
      00335D CD 05 35         [ 4]  880     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      003360 CD 0B A3         [ 4]  881     CALL ONEP 
      003363 CD 05 E3         [ 4]  882     CALL TOR 
      003366 20 EA            [ 2]  883     JRA MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      003368                        886 MMSTA6: 
      003368 CD 05 35         [ 4]  887     CALL RFROM 
      00336B CD 07 FD         [ 4]  888     CALL NROT 
      00336E CD 32 44         [ 4]  889     CALL SCALETOM
      003371 CD 29 28         [ 4]  890     CALL DTOR 
      003374 CD 08 3D         [ 4]  891     CALL PLUS 
      003377 CD 29 46         [ 4]  892     CALL DRFROM 
      00337A CD 05 35         [ 4]  893     CALL RFROM
      00337D                        894     _QBRAN MMSTA7
      00337D CD 04 99         [ 4]    1     CALL QBRAN
      003380 33 85                    2     .word MMSTA7
      003382 CD 08 99         [ 4]  895     CALL DNEGA
      003385                        896 MMSTA7:
      003385 CD 07 DE         [ 4]  897     CALL ROT ; m e 
      003388 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003389                        905     _HEADER FSTAR,2,"F*"
      003389 32 B0                    1         .word LINK 
                           00338B     2         LINK=.
      00338B 02                       3         .byte 2  
      00338C 46 2A                    4         .ascii "F*"
      00338E                          5         FSTAR:
      00338E CD 2D 88         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      003391 CD 05 E3         [ 4]  907     CALL TOR   
      003394 CD 27 D9         [ 4]  908     CALL DSWAP ; m2 f#1
      003397 CD 2D 88         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      00339A CD 05 35         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
      00339D CD 08 3D         [ 4]  911     CALL PLUS  ; m2 m1 e 
      0033A0 CD 05 E3         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      0033A3 CD 32 B4         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      0033A6 CD 05 35         [ 4]  914     CALL RFROM 
      0033A9 CD 08 3D         [ 4]  915     CALL PLUS 
      0033AC CD 2D BA         [ 4]  916     CALL STEXP ; f#3 
      0033AF 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0033B0                        924     _HEADER FSLASH,2,"F/"
      0033B0 33 8B                    1         .word LINK 
                           0033B2     2         LINK=.
      0033B2 02                       3         .byte 2  
      0033B3 46 2F                    4         .ascii "F/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      0033B5                          5         FSLASH:
      0033B5 CD 2D 88         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      0033B8 CD 05 E3         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      0033BB CD 26 D1         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      0033BE CD 05 E3         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      0033C1 CD 26 C0         [ 4]  929     CALL DABS   ; F#1 um2 
      0033C4 CD 27 D9         [ 4]  930     CALL DSWAP  ; m2 f#1 
      0033C7 CD 2D 88         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      0033CA CD 0C 1A         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      0033CD CD 05 A0         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      0033D0 CD 08 D3         [ 4]  934     CALL SUBB   ; m2 m1 e 
      0033D3 CD 0C 1A         [ 4]  935     CALL ONE    ; e slot on rstack 
      0033D6 CD 05 BF         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      0033D9 CD 26 D1         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      0033DC CD 05 35         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      0033DF CD 06 A0         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      0033E2 CD 05 35         [ 4]  940     CALL RFROM   
      0033E5 CD 29 28         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      0033E8 CD 26 C0         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      0033EB CD 27 D9         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033EE CD 08 28         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033F1 CD 29 28         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033F4 CD 2A DF         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0033F7                        947 FSLASH1: 
      0033F7 CD 29 EE         [ 4]  948     CALL DOVER ; if remainder null done 
      0033FA CD 28 AE         [ 4]  949     CALL DZEQUAL 
      0033FD                        950     _TBRAN FSLASH8 
      0033FD CD 04 A7         [ 4]    1     CALL TBRAN 
      003400 34 5A                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      003402 CD 08 28         [ 4]  954     CALL DDUP 
      003405                        955     _DOLIT 0XCCCC 
      003405 CD 04 70         [ 4]    1     CALL DOLIT 
      003408 CC CC                    2     .word 0XCCCC 
      00340A                        956     _DOLIT 0xC
      00340A CD 04 70         [ 4]    1     CALL DOLIT 
      00340D 00 0C                    2     .word 0xC 
      00340F CD 28 EB         [ 4]  957     CALL DGREAT 
      003412                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      003412 CD 04 A7         [ 4]    1     CALL TBRAN 
      003415 34 5A                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      003417                        960     _DOLIT 10 
      003417 CD 04 70         [ 4]    1     CALL DOLIT 
      00341A 00 0A                    2     .word 10 
      00341C CD 0C 0F         [ 4]  961     CALL ZERO 
      00341F CD 2A 96         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      003422 CD 27 D9         [ 4]  964     CALL DSWAP 
      003425                        965     _DOLIT 10 
      003425 CD 04 70         [ 4]    1     CALL DOLIT 
      003428 00 0A                    2     .word 10 
      00342A CD 0C 0F         [ 4]  966     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00342D CD 2A 96         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      003430 CD 29 5E         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      003433 CD 2A DF         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      003436 CD 27 D9         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      003439 CD 29 28         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      00343C CD 2B DB         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      00343F CD 29 46         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      003442 CD 27 D9         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      003445                        977     _DOLIT 2    ; e slot on rstack 
      003445 CD 04 70         [ 4]    1     CALL DOLIT 
      003448 00 02                    2     .word 2 
      00344A CD 05 A0         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      00344D CD 0B A3         [ 4]  979     CALL ONEP   ; increment exponent 
      003450                        980     _DOLIT 2 
      003450 CD 04 70         [ 4]    1     CALL DOLIT 
      003453 00 02                    2     .word 2 
      003455 CD 05 BF         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      003458 20 9D            [ 2]  982     JRA FSLASH1
      00345A                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      00345A CD 27 D9         [ 4]  984     CALL DSWAP  
      00345D                        985     _DDROP  ; drop remainder     
      00345D 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003460 CD 29 46         [ 4]  986     CALL DRFROM
      003463                        987     _DDROP  ; drop divisor 
      003463 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003466 CD 15 F1         [ 4]  988     CALL JFETCH    ; quotient sign 
      003469                        989     _QBRAN FSLASH9 
      003469 CD 04 99         [ 4]    1     CALL QBRAN
      00346C 34 71                    2     .word FSLASH9
      00346E CD 08 99         [ 4]  990     CALL DNEGA  
      003471                        991 FSLASH9:
      003471 CD 05 35         [ 4]  992     CALL RFROM  ; exponent 
      003474 CD 2D BA         [ 4]  993     CALL STEXP 
      003477 CD 05 35         [ 4]  994     CALL RFROM 
      00347A                        995     _DROP ; drop qs 
      00347A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00347D 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00347E                       1002     _HEADER DTOF,3,"D>F"
      00347E 33 B2                    1         .word LINK 
                           003480     2         LINK=.
      003480 03                       3         .byte 3  
      003481 44 3E 46                 4         .ascii "D>F"
      003484                          5         DTOF:
      003484 CD 26 D1         [ 4] 1003     CALL DSIGN 
      003487 CD 05 E3         [ 4] 1004     CALL TOR
      00348A CD 26 C0         [ 4] 1005     CALL DABS  
      00348D                       1006 DTOF1:      
      00348D CD 32 44         [ 4] 1007     CALL SCALETOM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      003490 CD 05 35         [ 4] 1008     CALL RFROM
      003493                       1009     _QBRAN DTOF2 
      003493 CD 04 99         [ 4]    1     CALL QBRAN
      003496 34 9B                    2     .word DTOF2
      003498 CD 08 99         [ 4] 1010     CALL DNEGA 
      00349B                       1011 DTOF2: 
      00349B CD 07 DE         [ 4] 1012     CALL ROT 
      00349E CD 2D BA         [ 4] 1013     CALL STEXP 
      0034A1 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0034A2                       1020     _HEADER FTOD,3,"F>D"
      0034A2 34 80                    1         .word LINK 
                           0034A4     2         LINK=.
      0034A4 03                       3         .byte 3  
      0034A5 46 3E 44                 4         .ascii "F>D"
      0034A8                          5         FTOD:
      0034A8 CD 2D 88         [ 4] 1021     CALL ATEXP ; m e 
      0034AB CD 07 CD         [ 4] 1022     CALL QDUP
      0034AE                       1023     _QBRAN FTOD9
      0034AE CD 04 99         [ 4]    1     CALL QBRAN
      0034B1 35 32                    2     .word FTOD9
      0034B3 CD 05 E3         [ 4] 1024     CALL TOR 
      0034B6 CD 26 D1         [ 4] 1025     CALL DSIGN 
      0034B9 CD 07 FD         [ 4] 1026     CALL NROT 
      0034BC CD 26 C0         [ 4] 1027     CALL DABS
      0034BF CD 05 35         [ 4] 1028     CALL RFROM  
      0034C2 CD 06 1A         [ 4] 1029     CALL DUPP   
      0034C5 CD 06 51         [ 4] 1030     CALL ZLESS 
      0034C8                       1031     _QBRAN FTOD4 
      0034C8 CD 04 99         [ 4]    1     CALL QBRAN
      0034CB 34 FD                    2     .word FTOD4
                                   1032 ; negative exponent 
      0034CD CD 08 ED         [ 4] 1033     CALL ABSS 
      0034D0 CD 05 E3         [ 4] 1034     CALL TOR
      0034D3 20 19            [ 2] 1035     JRA FTOD2  
      0034D5                       1036 FTOD1:
      0034D5 CD 08 28         [ 4] 1037     CALL DDUP 
      0034D8 CD 28 AE         [ 4] 1038     CALL DZEQUAL 
      0034DB                       1039     _TBRAN FTOD3 
      0034DB CD 04 A7         [ 4]    1     CALL TBRAN 
      0034DE 34 F5                    2     .word FTOD3 
      0034E0                       1040     _DOLIT 10 
      0034E0 CD 04 70         [ 4]    1     CALL DOLIT 
      0034E3 00 0A                    2     .word 10 
      0034E5 CD 26 EB         [ 4] 1041     CALL DSLMOD 
      0034E8 CD 07 DE         [ 4] 1042     CALL ROT 
      0034EB                       1043     _DROP
      0034EB 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034EE                       1044 FTOD2:      
      0034EE                       1045     _DONXT FTOD1
      0034EE CD 04 84         [ 4]    1     CALL DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0034F1 34 D5                    2     .word FTOD1 
      0034F3 20 32            [ 2] 1046     JRA FTOD8   
      0034F5                       1047 FTOD3: 
      0034F5 CD 05 35         [ 4] 1048     CALL RFROM 
      0034F8                       1049     _DROP 
      0034F8 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034FB 20 2A            [ 2] 1050     JRA FTOD8  
                                   1051 ; positive exponent 
      0034FD                       1052 FTOD4:
      0034FD CD 05 E3         [ 4] 1053     CALL TOR 
      003500 20 20            [ 2] 1054     JRA FTOD6
      003502                       1055 FTOD5:
      003502 CD 08 28         [ 4] 1056     CALL DDUP 
      003505                       1057     _DOLIT 0XCCCC
      003505 CD 04 70         [ 4]    1     CALL DOLIT 
      003508 CC CC                    2     .word 0XCCCC 
      00350A                       1058     _DOLIT 0XCCC  
      00350A CD 04 70         [ 4]    1     CALL DOLIT 
      00350D 0C CC                    2     .word 0XCCC 
      00350F CD 28 EB         [ 4] 1059     CALL DGREAT 
      003512                       1060     _TBRAN FTOD3 
      003512 CD 04 A7         [ 4]    1     CALL TBRAN 
      003515 34 F5                    2     .word FTOD3 
      003517                       1061     _DOLIT 10 
      003517 CD 04 70         [ 4]    1     CALL DOLIT 
      00351A 00 0A                    2     .word 10 
      00351C CD 0C 0F         [ 4] 1062     CALL ZERO 
      00351F CD 2A 96         [ 4] 1063     CALL DSTAR 
      003522                       1064 FTOD6: 
      003522                       1065     _DONXT FTOD5 
      003522 CD 04 84         [ 4]    1     CALL DONXT 
      003525 35 02                    2     .word FTOD5 
      003527                       1066 FTOD8:
      003527 CD 07 DE         [ 4] 1067     CALL ROT 
      00352A                       1068     _QBRAN FTOD9 
      00352A CD 04 99         [ 4]    1     CALL QBRAN
      00352D 35 32                    2     .word FTOD9
      00352F CD 08 99         [ 4] 1069     CALL DNEGA
      003532                       1070 FTOD9:          
      003532 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      003533                       1078     _HEADER FZLESS,3,"F0<"
      003533 34 A4                    1         .word LINK 
                           003535     2         LINK=.
      003535 03                       3         .byte 3  
      003536 46 30 3C                 4         .ascii "F0<"
      003539                          5         FZLESS:
      003539 CD 2D 88         [ 4] 1079     CALL ATEXP 
      00353C                       1080     _DROP 
      00353C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      00353F CD 06 2A         [ 4] 1081     CALL SWAPP 
      003542                       1082     _DROP 
      003542 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003545 CD 06 51         [ 4] 1083     CALL ZLESS 
      003548 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      003549                       1090     _HEADER FLESS,2,"F<"
      003549 35 35                    1         .word LINK 
                           00354B     2         LINK=.
      00354B 02                       3         .byte 2  
      00354C 46 3C                    4         .ascii "F<"
      00354E                          5         FLESS:
      00354E CD 32 01         [ 4] 1091     CALL FSUB  
      003551 CC 35 39         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003554                       1098     _HEADER FGREAT,2,"F>"
      003554 35 4B                    1         .word LINK 
                           003556     2         LINK=.
      003556 02                       3         .byte 2  
      003557 46 3E                    4         .ascii "F>"
      003559                          5         FGREAT:
      003559 CD 27 D9         [ 4] 1099     CALL DSWAP 
      00355C CC 35 4E         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00355F                       1106     _HEADER FEQUAL,2,"F="
      00355F 35 56                    1         .word LINK 
                           003561     2         LINK=.
      003561 02                       3         .byte 2  
      003562 46 3D                    4         .ascii "F="
      003564                          5         FEQUAL:
      003564 CC 28 CA         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003567                       1113     _HEADER FZEQUAL,3,"F0="
      003567 35 61                    1         .word LINK 
                           003569     2         LINK=.
      003569 03                       3         .byte 3  
      00356A 46 30 3D                 4         .ascii "F0="
      00356D                          5         FZEQUAL:
      00356D CD 2D 88         [ 4] 1114     CALL ATEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      003570                       1115     _DROP 
      003570 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003573 CC 28 AE         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003576                       1122     _HEADER FNEGA,7,"FNEGATE"
      003576 35 69                    1         .word LINK 
                           003578     2         LINK=.
      003578 07                       3         .byte 7  
      003579 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003580                          5         FNEGA:
      003580 CD 2D 88         [ 4] 1123     CALL ATEXP 
      003583 CD 05 E3         [ 4] 1124     CALL TOR 
      003586 CD 08 99         [ 4] 1125     CALL DNEGA
      003589 CD 05 35         [ 4] 1126     CALL RFROM 
      00358C CD 2D BA         [ 4] 1127     CALL STEXP 
      00358F CD 2D 3B         [ 4] 1128     CALL SFN 
      003592 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003593                       1134     _HEADER FABS,4,"FABS"
      003593 35 78                    1         .word LINK 
                           003595     2         LINK=.
      003595 04                       3         .byte 4  
      003596 46 41 42 53              4         .ascii "FABS"
      00359A                          5         FABS:
      00359A CD 2D 88         [ 4] 1135     CALL ATEXP 
      00359D CD 05 E3         [ 4] 1136     CALL TOR 
      0035A0 CD 06 1A         [ 4] 1137     CALL DUPP 
      0035A3                       1138     _DOLIT 0X80 
      0035A3 CD 04 70         [ 4]    1     CALL DOLIT 
      0035A6 00 80                    2     .word 0X80 
      0035A8 CD 06 77         [ 4] 1139     CALL ANDD 
      0035AB                       1140     _QBRAN FABS1
      0035AB CD 04 99         [ 4]    1     CALL QBRAN
      0035AE 35 B3                    2     .word FABS1
      0035B0 CD 08 99         [ 4] 1141     CALL DNEGA 
      0035B3                       1142 FABS1: 
      0035B3 CD 05 35         [ 4] 1143     CALL RFROM 
      0035B6 CD 2D BA         [ 4] 1144     CALL STEXP 
      0035B9 CD 2D 3B         [ 4] 1145     CALL SFN 
      0035BC 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   4657 .endif 
                                   4658 
                                   4659 ;===============================================================
                                   4660 
                           003595  4661 LASTN =	LINK   ;last name defined
                                   4662 
                                   4663 ; application code begin here
      003600                       4664 	.bndry 128 ; align on flash block  
      003600                       4665 app_space: 
                                   4666 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F6 R   |   6 ABOR1      001406 R
  6 ABOR2      00141D R   |   6 ABORQ      0013FE R   |   6 ABORT      0013EF R
  6 ABRTQ      0016E9 R   |   6 ABSS       0008ED R   |   6 ACCEP      001385 R
  6 ACCP1      00138E R   |   6 ACCP2      0013B4 R   |   6 ACCP3      0013B7 R
  6 ACCP4      0013B9 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BD R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0016D4 R   |   6 AGAIN      00161E R
  6 AHEAD      001681 R   |   6 ALLOT      00152B R   |   6 ANDD       000677 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E4 R   |   6 ATEXE      000D1F R
  6 ATEXP      002D88 R   |   6 ATEXP1     002D9D R   |   6 ATEXP2     002DAD R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E1 R   |     B19200  =  000003     |   6 B19K2      0003BE R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038F R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039D R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CF R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AD R   |   6 BACK1      00132D R   |   6 BASE       0006E0 R
    BASEE   =  00000A     |   6 BAUD       0003F1 R   |     BCNT    =  000001 
  6 BCOMP      00156E R   |   6 BDIGS      000E17 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001600 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001182 R   |   6 BKSP       0012FD R   |     BKSPP   =  000008 
  6 BLANK      000C02 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B5 R   |     BTW     =  000001 
  6 BUF2ROW    0021FF R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     002448 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000502 R   |   6 CCOMMA     001550 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B87 R
  6 CELLP      000B78 R   |   6 CELLS      000B96 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000F6D R
  6 CHAR2      000F70 R   |   6 CHKIVEC    0020ED R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D52 R
  6 CMOV2      000D66 R   |   6 CMOV3      000D7A R   |   6 CMOVE      000D36 R
    CNT     =  000001     |     CNT1    =  000004     |     CNT2    =  000003 
    CNTDWN  =  000032     |   6 CNTXT      000763 R   |   6 COLD       001BEE R
  6 COLD1      001BEE R   |   6 COLON      0018D2 R   |   6 COMMA      001539 R
  6 COMPI      00157E R   |     COMPO   =  000040     |   6 CONSTANT   00197C R
  6 COPYRIGH   001B38 R   |   6 COUNT      000CD2 R   |   6 CPP        00077F R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F96 R
  6 CREAT      001918 R   |     CRR     =  00000D     |   6 CSTOR      0004F1 R
  6 CTABLE     002469 R   |   6 CTAT       00248A R   |   6 CTINIT     0024B2 R
  6 D2SLASH    002A07 R   |   6 D2STAR     002A1E R   |   6 DABS       0026C0 R
  6 DABS1      0026C8 R   |   6 DAT        000CB6 R   |     DATSTK  =  001680 
  6 DBLVER     002536 R   |   6 DCLZ       002807 R   |   6 DCLZ1      002810 R
  6 DCLZ4      002819 R   |   6 DCLZ8      002826 R   |   6 DCONST     0019B1 R
  6 DDIG       00272C R   |   6 DDIGS      002744 R   |   6 DDOT       00275B R
  6 DDOT0      00276F R   |   6 DDOT1      002785 R   |   6 DDROP      00081D R
  6 DDSLMOD    002B7A R   |   6 DDSTAR3    002AD5 R   |   6 DDUP       000828 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000EC7 R
  6 DEPTH      000C51 R   |   6 DEQU4      0028DF R   |   6 DEQUAL     0028CA R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     0028EB R
  6 DGTQ1      000F0C R   |   6 DI         0000C4 R   |   6 DIG        000E40 R
  6 DIGIT      000DDB R   |   6 DIGS       000E51 R   |   6 DIGS1      000E51 R
  6 DIGS2      000E5E R   |   6 DIGTQ      000EDB R   |     DISCOVER=  000000 
  6 DLESS      0028F6 R   |   6 DLESS4     00290A R   |   6 DLITER     0029C7 R
  6 DLSHIFT    002A3A R   |   6 DLSHIFT1   002A4D R   |   6 DLSHIFT2   002A62 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0008B4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGA      000899 R   |   6 DOCONST    00199C R   |   6 DOLIT      000470 R
  6 DONXT      000484 R   |     DOORBELL=  000000     |   6 DOSTR      000FA6 R
  6 DOT        00103C R   |   6 DOT1       001051 R   |   6 DOTI1      001B01 R
  6 DOTID      001AEB R   |   6 DOTO1      001492 R   |   6 DOTOK      001478 R
  6 DOTPR      001163 R   |   6 DOTQ       001703 R   |   6 DOTQP      000FC3 R
  6 DOTR       000FD1 R   |   6 DOTS       001A8D R   |   6 DOTS1      001A98 R
  6 DOTS2      001AA1 R   |   6 DOVAR      0006D0 R   |   6 DOVER      0029EE R
  6 DO_DCONS   0019D4 R   |     DP      =  000005     |   6 DPLUS      002BDB R
  6 DPLUS1     002C02 R   |   6 DRAT       00295E R   |   6 DRFROM     002946 R
  6 DROP       000610 R   |   6 DROT       002873 R   |   6 DRSHIFT    002A73 R
  6 DRSHIFT1   002A7A R   |   6 DRSHIFT2   002A90 R   |   6 DSIGN      0026D1 R
  6 DSIGN1     0026DB R   |   6 DSLA8      002BB7 R   |   6 DSLA9      002BC4 R
  6 DSLASH     002BCC R   |   6 DSLMOD     0026EB R   |   6 DSLMOD3    002706 R
  6 DSLMOD4    002712 R   |   6 DSLMODa    00270D R   |   6 DSLMODb    002718 R
  6 DSSTAR     0027B3 R   |   6 DSSTAR3    0027D0 R   |   6 DSTAR      002A96 R
  6 DSTOR      000C9D R   |   6 DSUB       002C0D R   |   6 DSUB1      002C34 R
  6 DSWAP      0027D9 R   |   6 DTOF       003484 R   |   6 DTOF1      00348D R
  6 DTOF2      00349B R   |   6 DTOR       002928 R   |   6 DUMP       001A43 R
  6 DUMP1      001A5A R   |   6 DUMP3      001A7C R   |   6 DUMPP      001A12 R
  6 DUPP       00061A R   |   6 DVARIA     00297C R   |     DVER_MAJ=  000001 
    DVER_MIN=  000000     |   6 DZEQUAL    0028AE R   |   6 DZLESS     002911 R
  6 DZLESS1    00291B R   |   6 EDIGS      000E7C R   |   6 EDOT       002E0E R
  6 EDOT0      002E25 R   |   6 EDOT2      002E31 R   |   6 EDOT3      002E47 R
  6 EDOT4      002E73 R   |   6 EDOT5      002E92 R   |   6 EECSTORE   001E9E R
  6 EEPCP      001CC4 R   |   6 EEPLAST    001C97 R   |   6 EEPROM     001C7F R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001CAE R   |   6 EEPVP      001CDA R
  6 EESTORE    001EEA R   |   6 EE_CCOMM   0021B4 R   |   6 EE_COMMA   002193 R
  6 EE_CREAD   001E2F R   |   6 EE_READ    001E0D R   |   6 EI         0000BD R
  6 ELSEE      001659 R   |   6 EMIT       000437 R   |   6 ENEPER     0023D4 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000908 R
  6 EQUAL      0008FB R   |   6 ERASE      000DA9 R   |     ERR     =  00001B 
  6 EVAL       0014BB R   |   6 EVAL1      0014BB R   |   6 EVAL2      0014D4 R
  6 EXE1       000D2D R   |   6 EXECU      0004C5 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000E03 R
  6 FABS       00359A R   |   6 FABS1      0035B3 R   |   6 FADDR      002281 R
  6 FALGN4     00315F R   |   6 FALGN6     00316E R   |   6 FALGN7     003195 R
  6 FALGN71    0031A4 R   |   6 FALGN72    0031C0 R   |   6 FALGN8     0031C3 R
  6 FALIGN     003126 R   |   6 FALSE      000869 R   |   6 FARAT      001D45 R
  6 FARCAT     001D51 R   |   6 FC_XOFF    000464 R   |   6 FC_XON     00044E R
  6 FDOT       002EA1 R   |   6 FDOT0      002EDF R   |   6 FDOT1      002ECE R
  6 FDOT10     002F32 R   |   6 FDOT2      002EED R   |   6 FDOT3      002F03 R
  6 FDOT6      002F10 R   |   6 FDOT7      002F12 R   |   6 FDOT8      002F1A R
  6 FDOT9      002F22 R   |   6 FEQUAL     003564 R   |   6 FER        002CA6 R
  6 FGREAT     003559 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000D89 R   |   6 FILL0      000D97 R   |   6 FILL1      000D9F R
  6 FIND       001259 R   |   6 FIND1      001277 R   |   6 FIND2      0012A5 R
  6 FIND3      0012B1 R   |   6 FIND4      0012C5 R   |   6 FIND5      0012D2 R
  6 FIND6      0012B6 R   |   6 FINIT      002C9C R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLESS      00354E R
  6 FLOATQ     002FAA R   |   6 FLOATQ0    002FB2 R   |   6 FLOATQ1    003011 R
  6 FLOATQ2    00301A R   |   6 FLOATQ3    003022 R   |   6 FLOATQ4    003036 R
  6 FLOAT_ER   003051 R   |   6 FLOAT_ER   00304E R   |     FLOAT_MA=  000001 
    FLOAT_MI=  000000     |     FLSI    =  01F400     |   6 FMOVE      00228C R
  6 FMOVE2     0022BD R   |   6 FNE        002CC9 R   |   6 FNEGA      003580 R
  6 FOR        0015C8 R   |   6 FORGET     00015A R   |   6 FORGET1    000189 R
  6 FORGET2    00020F R   |   6 FORGET4    000218 R   |   6 FORGET6    0001D1 R
  6 FOV        002CE4 R   |   6 FPLUS      0031CF R   |   6 FPLUS1     0031EF R
  6 FPSTOR     001C60 R   |   6 FPSW       002C78 R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002C8A R
  6 FSLASH     0033B5 R   |   6 FSLASH1    0033F7 R   |   6 FSLASH8    00345A R
  6 FSLASH9    003471 R   |   6 FSTAR      00338E R   |   6 FSUB       003201 R
  6 FSUB1      003221 R   |   6 FTOD       0034A8 R   |   6 FTOD1      0034D5 R
  6 FTOD2      0034EE R   |   6 FTOD3      0034F5 R   |   6 FTOD4      0034FD R
  6 FTOD5      003502 R   |   6 FTOD6      003522 R   |   6 FTOD8      003527 R
  6 FTOD9      003532 R   |   6 FVER       002C46 R   |   6 FZE        002CB3 R
  6 FZEQUAL    00356D R   |   6 FZLESS     003539 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      000954 R   |   6 GREAT1     00095F R   |   6 HDOT       001020 R
  6 HERE       000CE9 R   |   6 HEX        000EB2 R   |   6 HI         001BA3 R
  6 HLD        000750 R   |   6 HOLD       000E27 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0018E3 R   |   6 IFETCH     0015E6 R   |   6 IFF        001631 R
  6 IFMOVE     002365 R   |     IMEDD   =  000080     |   6 IMMED      0018F5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 INCH       00042B R   |   6 INC_FPTR   001DDA R   |   6 INITOFS    0018AB R
  6 INN        0006FE R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      00145A R
  6 INTER      001430 R   |   6 INTQ       00250E R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000876 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0017FA R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     0015F1 R   |     JPIMM   =  0000CC 
  6 JSRC       00184F R   |   6 JSRC1      001872 R   |   6 JSRC2      001895 R
  6 KEY        000F1B R   |   6 KTAP       00134A R   |   6 KTAP1      00136D R
  6 KTAP2      001370 R   |   6 LAST       00078F R   |   6 LASTN   =  003595 R
  6 LBRAC      001467 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       000927 R   |     LF      =  00000A 
  6 LINK    =  003595 R   |   6 LITER      0015A0 R   |   6 LN2S       002430 R
  6 LOCAL      000555 R   |   6 LOCK       001DC6 R   |   6 LOG2S      00241A R
  6 LSCALE     003070 R   |   6 LSHIFT     000BC1 R   |   6 LSHIFT1    000BCA R
  6 LSHIFT4    000BD2 R   |   6 LT1        000932 R   |     MASKK   =  001F7F 
  6 MAX        00096C R   |   6 MAX1       000976 R   |     MAX_MANT=  7FFFFF 
  6 MIN        000980 R   |   6 MIN1       00098A R   |   6 MMOD1      000A39 R
  6 MMOD2      000A4D R   |   6 MMOD3      000A64 R   |   6 MMSM0      0009C9 R
  6 MMSM1      0009D9 R   |   6 MMSM3      0009DD R   |   6 MMSM4      0009E9 R
  6 MMSMa      0009E4 R   |   6 MMSMb      0009EF R   |   6 MMSTA1     0032BF R
  6 MMSTA2     0032CA R   |   6 MMSTA3     0032D5 R   |   6 MMSTA4     003340 R
  6 MMSTA5     003352 R   |   6 MMSTA6     003368 R   |   6 MMSTA7     003385 R
  6 MMSTAR     0032B4 R   |   6 MODD       000ABF R   |   6 MONE       000C28 R
    MS      =  000030     |   6 MSEC       0002D1 R   |   6 MSMOD      000A1C R
  6 MSTA1      000B50 R   |   6 MSTAR      000B2D R   |     NAFR    =  004804 
  6 NAMEQ      0012F2 R   |   6 NAMET      001203 R   |     NCLKOPT =  004808 
  6 NDROT      002837 R   |   6 NEGAT      000887 R   |   6 NEG_SIGN   002579 R
  6 NEX1       000491 R   |   6 NEXT       0015D7 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NRAT       0005A0 R   |   6 NRDROP     00057C R   |   6 NROT       0007FD R
  6 NRSTO      0005BF R   |   6 NTIB       00070E R   |     NUBC    =  004802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

    NUCLEO  =  000001     |   6 NUFQ       000F31 R   |   6 NUFQ1      000F4A R
  6 NUMBQ      0025E8 R   |   6 NUMQ0      002629 R   |   6 NUMQ1      002653 R
  6 NUMQ3      00267D R   |   6 NUMQ4      00269B R   |   6 NUMQ5      0026A6 R
  6 NUMQ6      0026A8 R   |   6 NUMQ8      0026B0 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007B4 R
    OFS     =  000005     |   6 ONE        000C1A R   |   6 ONEM       000BB0 R
  6 ONEP       000BA3 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        00068B R   |   6 OUTPUT     00043C R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000642 R   |   6 OVERT      0017C8 R
    PA      =  000000     |   6 PACKS      000DBA R   |   6 PAD        000CFA R
  6 PAREN      001172 R   |   6 PARS       00106B R   |   6 PARS1      001096 R
  6 PARS2      0010C1 R   |   6 PARS3      0010C4 R   |   6 PARS4      0010CD R
  6 PARS5      0010F0 R   |   6 PARS6      001105 R   |   6 PARS7      001114 R
  6 PARS8      001123 R   |   6 PARSE      001134 R   |   6 PARSEXP_   002F8D R
  6 PAUSE      0002E1 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001A25 R   |   6 PDUM2      001A36 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000C68 R
  6 PII        002393 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00083D R   |   6 PNAM1      00176D R
  6 PRESE      0014E3 R   |   6 PRINT_VE   001B74 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PRT_LICE   001B60 R   |   6 PSTOR      000C7F R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001DF2 R   |   6 QBRAN      000499 R
  6 QDUP       0007CD R   |   6 QDUP1      0007D7 R   |     QHI     =  000005 
  6 QKEY       000419 R   |     QLBIT   =  000001     |     QLO     =  000007 
  6 QSTAC      00149E R   |   6 QUERY      0013CA R   |   6 QUEST      00105E R
  6 QUIT       001500 R   |   6 QUIT1      001508 R   |   6 QUIT2      00150B R
  6 RAM2EE     00222D R   |     RAMBASE =  000000     |   6 RAMLAST    0007A2 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027F R   |   6 RAT        000546 R   |   6 RBRAC      00183C R
  6 REPEA      0016B4 R   |   6 RFREE      002214 R   |   6 RFROM      000535 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    ROP     =  004800     |   6 ROT        0007DE R   |   6 ROW2BUF    0021D6 R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000512 R
    RPP     =  0017FF     |   6 RPSTO      00051F R   |   6 RSCALE     003094 R
  6 RSHIFT     000BDD R   |   6 RSHIFT1    000BE6 R   |   6 RSHIFT4    000BEE R
    RST_SR  =  0050B3     |   6 RT12_2     002403 R   |   6 SAME1      001221 R
  6 SAME2      00124A R   |   6 SAMEQ      001219 R   |   6 SCAL1      00324A R
  6 SCAL2      00326B R   |   6 SCALDN2    003118 R   |   6 SCALDN3    00311B R
  6 SCALEDOW   0030EC R   |   6 SCALETOM   003244 R   |   6 SCALEUP    0030B5 R
  6 SCALEUP2   0030E8 R   |   6 SCALEUP3   0030EB R   |   6 SCOM1      0017A2 R
  6 SCOM2      0017A5 R   |   6 SCOMP      001784 R   |   6 SEED       000266 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      0017D8 R
  6 SETISP     0000D0 R   |   6 SET_RAML   001965 R   |   6 SFN        002D3B R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002D6F R
  6 SFZ        002D04 R   |   6 SIGN       000E66 R   |   6 SIGN1      000E76 R
  6 SLASH      000AC9 R   |   6 SLMOD      000A6C R   |   6 SLMOD1     000AA9 R
  6 SLMOD8     000AB6 R   |   6 SNAME      001737 R   |     SP0     =  00002C 
  6 SPACE      000F53 R   |   6 SPACS      000F62 R   |   6 SPAT       0005FA R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000607 R   |   6 SQRT10     0023EC R
  6 SQRT2      0023AA R   |   6 SQRT3      0023C1 R   |   6 SSMOD      000B59 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000B22 R
  6 STASL      000B6A R   |   6 STEXP      002DBA R   |   6 STEXP1     002DD0 R
  6 STEXP2     002DFA R   |   6 STOD       0008BC R   |   6 STORE      0004D2 R
  6 STO_SIGN   002591 R   |   6 STR        000E94 R   |   6 STRCQ      0015A8 R
  6 STRQ       0016F6 R   |   6 STRQP      000FBF R   |   6 SUBB       0008D3 R
  6 SWAPP      00062A R   |     SWIM_CSR=  007F80     |   6 TAP        001334 R
  6 TBOOT      001BE2 R   |   6 TBRAN      0004A7 R   |   6 TBUF       00071E R
    TBUFFBAS=  001680     |   6 TCHAR      000C39 R   |   6 TEMP       0006EF R
  6 TEVAL      000741 R   |   6 TFLASH     000730 R   |   6 THENN      001646 R
  6 TIB        000D0B R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001517 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000311 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

  6 TIMER      0002FB R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001ABB R   |   6 TNAM3      001AD9 R   |   6 TNAM4      001ADF R
  6 TNAME      001AB8 R   |   6 TOFLASH    000336 R   |   6 TOKEN      0011F5 R
  6 TOR        0005E3 R   |   6 TORAM      000376 R   |   6 TRUE       000858 R
    TRUEE   =  00FFFF     |   6 TWOSL      000BF5 R   |   6 TYPE1      000F82 R
  6 TYPE2      000F88 R   |   6 TYPES      000F7D R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDIV10     00326C R   |   6 UDOT       00100C R
  6 UDOTR      000FEC R   |   6 UDSLA3     002B11 R   |   6 UDSLA4     002B27 R
  6 UDSLA7     002B4F R   |   6 UDSLA8     002B5D R   |   6 UDSLMOD    002ADF R
  6 UDSSTAR    002792 R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     00093E R   |   6 UGREAT1    000949 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00091C R   |   6 ULESS      000911 R   |   6 UMMOD      0009B2 R
  6 UMOD10     00322E R   |   6 UMSTA      000AD8 R   |   6 UNIQ1      001734 R
  6 UNIQU      001715 R   |   6 UNLKEE     001D60 R   |   6 UNLKFL     001D7F R
  6 UNLOCK     001D9E R   |   6 UNTIL      00160B R   |     UOFFSET =  00001E 
  6 UPDATCP    001D1D R   |   6 UPDATLAS   001CF4 R   |   6 UPDATPTR   002320 R
  6 UPDATRUN   001D0C R   |   6 UPDATVP    001D34 R   |   6 UPL1       0006CC R
  6 UPLUS      0006B5 R   |     UPP     =  000006     |   6 UPPER      0011B8 R
  6 UPPER1     0011DB R   |   6 UPPER2     0011E4 R   |     URLAST  =  000022 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Symbol Table

  6 USLMOD     000A01 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      0019F5 R   |   6 UTYP2      001A04 R
  6 UTYPE      0019F0 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      001932 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        000771 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00169A R
  6 WITHI      000997 R   |   6 WORDD      00119E R   |   6 WORDS      001B15 R
  6 WORS1      001B1B R   |   6 WORS2      001B37 R   |   6 WR_BYTE    001E49 R
  6 WR_WORD    001E6E R   |   6 WTABLE     002478 R   |   6 WTAT       00249C R
  6 WTINIT     0024E1 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       0006A0 R   |     XTEMP   =  000024     |     YTEMP   =  000026 
    YTMP    =  000003     |   6 ZEQ1       0028BE R   |   6 ZEQU1      00066D R
  6 ZEQUAL     000663 R   |   6 ZERO       000C0F R   |   6 ZL1        00065A R
  6 ZLESS      000651 R   |   6 app_spac   003600 R   |   6 baudrate   00037C R
  6 block_er   001F34 R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001F94 R   |   6 copy_buf   001FB3 R   |   6 copy_pro   001FB3 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     0029D2 R   |   6 erase_fl   001F56 R
  6 fmove_do   002309 R   |   6 main       000016 R   |   6 next_row   0022C6 R
  6 no_move    002310 R   |   6 nsign      002568 R   |   6 parse_d4   0025D1 R
  6 parse_d5   0025DD R   |   6 parse_di   002595 R   |   6 parse_ex   002F42 R
  6 pristine   002034 R   |   6 proceed_   001F59 R   |   6 reboot     000328 R
  6 reset_ve   00209B R   |   6 row_eras   001F14 R   |   6 row_eras   001F6D R
  6 row_eras   001F94 R   |   6 set_opti   002008 R   |   6 set_vect   00213C R
  6 uart_ini   000076 R   |   6 write_ro   001FD8 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3600   flags    0

