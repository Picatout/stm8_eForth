ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000001    89 .if NUCLEO 
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    94 .else ; DISCOVERY
                                     95 STACK   =	0x7FF 	;system (return) stack empty 
                                     96 DATSTK  =	0x680	;data stack  empty
                                     97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           000011   169 XON     =     17
                           000013   170 XOFF    =     19
                           00001B   171 ERR     =     27      ;error escape
                           000027   172 TIC     =     39      ;tick
                           0000CD   173 CALLL   =     0xCD     ;CALL opcodes
                           000080   174 IRET_CODE =   0x80    ; IRET opcode 
                                    175 
                                    176         .macro _ledon
                                    177         .if NUCLEO
                                    178         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .else ;DISCOVERY 
                                    180         .if DISCOVERY
                                    181         bres PD_ODR,#LD1_BIT 
                                    182         .endif
                                    183         .endif
                                    184         .endm
                                    185 
                                    186         .macro _ledoff
                                    187         .if NUCLEO 
                                    188         bres PC_ODR,#LED2_BIT
                                    189         .else ;DISCOVERY 
                                    190         .if DISCOVERY
                                    191         bset PD_ODR,#LD1_BIT 
                                    192         .endif 
                                    193         .endif
                                    194         .endm
                                    195 
                                    196 ;**********************************************************
                                    197         .area DATA (ABS)
      000000                        198         .org RAMBASE 
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area SSEG (ABS) ; STACK
      001700                        203         .org 0x1700
      001700                        204         .ds 256 
                                    205 ; space for DATSTK,TIB and STACK         
                                    206 ;**********************************************************
                                    207 
                                    208 ;**********************************************************
                                    209         .area HOME ; vectors table
                                    210 ;**********************************************************
      000000 82 00 00 16            211 	int main	        ; reset
      000004 82 00 00 00            212 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            213 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            214 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            215 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            216 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            217 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            218 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            219 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            220 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            221 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            222 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            223 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            224 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            225 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            226 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            227 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            228 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            229 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            230 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            231 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            232 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            233 	int NonHandledInterrupt	; irq20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00005C 82 00 00 00            234 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            235 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            236 	int Timer4Handler	; irq23
      000068 82 00 00 00            237 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            238 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            239 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            240 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            241 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            242 	int NonHandledInterrupt	; irq29
                                    243 
                                    244 ;**********************************************************
                                    245         .area CODE
                                    246 ;**********************************************************
                                    247 
                                    248 ; non handled interrupt reset MCU
      000000                        249 NonHandledInterrupt:
      000000 A6 80            [ 1]  250         ld a, #0x80
      000002 C7 50 D1         [ 1]  251         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    252 	;iret
                                    253 
                                    254 ; used for milliseconds counter 
                                    255 ; MS is 16 bits counter 
      000005                        256 Timer4Handler:
      000005 72 5F 53 42      [ 1]  257 	clr TIM4_SR 
      000009 BE 2E            [ 2]  258         ldw x,MS 
      00000B 5C               [ 1]  259         incw x 
      00000C BF 2E            [ 2]  260         ldw MS,x
      00000E BE 30            [ 2]  261         ldw x,CNTDWN 
      000010 27 03            [ 1]  262         jreq 1$
      000012 5A               [ 2]  263         decw x 
      000013 BF 30            [ 2]  264         ldw CNTDWN,x 
      000015                        265 1$:         
      000015 80               [11]  266         iret 
                                    267 
                                    268 
                                    269 ;; Main entry points and COLD start data
      000016                        270 main:
                                    271 ; clear all RAM
      000016 AE 00 00         [ 2]  272 	ldw X,#RAMBASE
      000019                        273 clear_ram0:
      000019 7F               [ 1]  274 	clr (X)
      00001A 5C               [ 1]  275 	incw X
      00001B A3 17 FF         [ 2]  276 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  277 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  278         ldw x,#RPP
      000023 94               [ 1]  279         ldw sp,x
                                    280 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  281         inc SEEDX+1 
      000026 3C 39            [ 1]  282         inc SEEDY+1          
      000028 CC 00 47         [ 2]  283 	jp ORIG
                                    284 
                                    285 ; COLD initialize these variables.
      00002B                        286 UZERO:
      00002B 00 0A                  287         .word      BASEE   ;BASE
      00002D 00 00                  288         .word      0       ;tmp
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002F 00 00                  289         .word      0       ;>IN
      000031 00 00                  290         .word      0       ;#TIB
      000033 17 00                  291         .word      TIBB    ;TIB
      000035 13 94                  292         .word      INTER   ;'EVAL
      000037 00 00                  293         .word      0       ;HLD
      000039 23 B0                  294         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  295         .word      VAR_BASE   ;variables free space pointer 
      00003D 24 00                  296         .word      app_space ; FLASH free space pointer 
      00003F 23 B0                  297         .word      LASTN   ;LAST
      000041 00 00                  298         .word      0        ; OFFSET 
      000043 00 00                  299         .word      0       ; TFLASH
                                    300 ;       .word      0       ; URLAST   
      000045 00 00                  301 UEND:   .word      0
                                    302 
      000047                        303 ORIG:   
                                    304 ; initialize SP
      000047 AE 17 FF         [ 2]  305         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  306         LDW     SP,X
      00004B BF 2C            [ 2]  307         LDW     RP0,X
      00004D AE 16 80         [ 2]  308         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  309         LDW     SP0,X
                           000001   310 .if NUCLEO        
                                    311 ; initialize PC_5 as output to control LED2
                                    312 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  313         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  314         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  315         bset PC_DDR,#LED2_BIT
                                    316 .endif 
                           000000   317 .if DISCOVERY
                                    318         bset PD_CR1,#LD1_BIT
                                    319         bset PD_CR2,#LD1_BIT
                                    320         bset PD_DDR,#LD1_BIT 
                                    321 .endif
      00005E                        322         _ledoff
                           000001     1         .if NUCLEO 
      00005E 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    323 ; initialize clock to HSI
                                    324 ; no divisor 16Mhz 
                                    325 ; Added by Picatout 
      000062                        326 clock_init:
      000062 72 5F 50 C6      [ 1]  327         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  328 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   329 .if NUCLEO|DOORBELL
      00006A A6 E1            [ 1]  330 	ld a,#CLK_SWR_HSI
                           000000   331 .else ; DISCOVERY as 16Mhz crystal
                                    332 	ld a,#CLK_SWR_HSE
                                    333 .endif 
      00006C C7 50 C4         [ 1]  334 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  335 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  336 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    337         
                                    338 ; initialize UART, 115200 8N1
      000074                        339 uart_init:
                           000001   340 .if NUCLEO 
      000074 72 14 50 C7      [ 1]  341 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    342 	; configure tx pin
      000078 72 1A 50 02      [ 1]  343 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  344 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  345 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    346 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   347 .else ; DISCOVERY use UART2 
                                    348 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    349 	; configure tx pin
                                    350 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    351 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    352 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    353 .endif
                                    354 ; baud rate 115200 Fmaster=8Mhz  
      000084 35 0B 52 33      [ 1]  355 	mov UART_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  356 	mov UART_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  357 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    358 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  359 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  360 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  361 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  362 	bset TIM4_IER,#TIM4_IER_UIE 
                                    363 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  364         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  365         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  366         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  367         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  368         rim
      0000AB CC 1A 98         [ 2]  369         jp  COLD   ;default=MN1
                                    370 
                                    371 
                                    372 ;; place MCU in sleep mode with
                                    373 ;; halt opcode 
                                    374 ;; BYE ( -- )
      0000AE 00 00                  375         .word 0
                           0000B0   376         LINK=.
      0000B0 03                     377         .byte 3 
      0000B1 42 59 45               378         .ascii "BYE"
      0000B4                        379 BYE: 
      0000B4 8E               [10]  380         halt 
      0000B5 81               [ 4]  381         ret 
                                    382 
                                    383 ; Enable interrupts 
                                    384 ; EI ( -- )
      0000B6 00 B0                  385         .word LINK 
                           0000B8   386         LINK=.
      0000B8 02                     387         .byte 2
      0000B9 45 49                  388         .ascii "EI"
      0000BB                        389 EI:
      0000BB 9A               [ 1]  390         rim 
      0000BC 81               [ 4]  391         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    392 
                                    393 ; Disable interrupts
                                    394 ; DI ( -- )
      0000BD 00 B8                  395         .word LINK 
                           0000BF   396         LINK=.
      0000BF 02                     397         .byte 2 
      0000C0 44 49                  398         .ascii "DI"
      0000C2                        399 DI:
      0000C2 9B               [ 1]  400         sim 
      0000C3 81               [ 4]  401         ret 
                                    402 
                                    403 ; set interrupt priority level 
                                    404 ; SET-ISP ( n1 n2 -- )
                                    405 ; n1 level {1..3}
                                    406 ; n2 vector {0..29}
      0000C4 00 BF                  407         .word LINK 
                           0000C6   408         LINK=.
      0000C6 07                     409         .byte 7 
      0000C7 53 45 54 2D 49 53 50   410         .ascii "SET-ISP"
      0000CE                        411 SETISP:
      0000CE 90 93            [ 1]  412         ldw y,x 
      0000D0 90 FE            [ 2]  413         ldw y,(y)
      0000D2 A6 04            [ 1]  414         ld a,#4 ; 4 slot per register 
                                    415 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  416         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  417         and a,#3 
      0000D8 48               [ 1]  418         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  419         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  420         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  421         clrw y 
      0000E0 90 97            [ 1]  422         ld yl,a 
      0000E2 1D 00 02         [ 2]  423         subw x,#CELLL 
      0000E5 FF               [ 2]  424         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  425         ldw y,x 
      0000E8 90 EE 02         [ 2]  426         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  427         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  428         subw x,#CELLL 
      0000F0 FF               [ 2]  429         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 C4         [ 4]  430         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 04 75         [ 4]  431         call DOLIT 
      0000F7 00 03                  432         .word 3
      0000F9 CD 05 AA         [ 4]  433         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 0A 93         [ 4]  434         call LSHIFT ; creat slot mask 
      0000FF CD 07 AF         [ 4]  435         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 E6         [ 4]  436         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 05 63         [ 4]  437         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 07 55         [ 4]  438         call ROT  ; ( reg lshift level )
      00010B CD 05 AA         [ 4]  439         call SWAPP ; ( reg level lshift )
      00010E CD 0A 93         [ 4]  440         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 05 44         [ 4]  441         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 FA         [ 4]  442         call ORR   ; ( reg updated_rval )
      000117 CD 05 AA         [ 4]  443         call SWAPP 
      00011A CD 05 00         [ 4]  444         call CSTOR
                                    445 
                                    446 ; sélectionne l'application 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    447 ; qui démarre automatique lors 
                                    448 ; d'un COLD start 
      00011D 00 C6                  449         .word LINK 
                           00011F   450         LINK=.
      00011F 07                     451         .byte 7
      000120 41 55 54 4F 52 55 4E   452         .ascii "AUTORUN"
      000127                        453 AUTORUN:
      000127 CD 11 59         [ 4]  454         call TOKEN 
      00012A CD 05 9A         [ 4]  455         call DUPP 
      00012D CD 04 A8         [ 4]  456         call QBRAN 
      000130 02 0D                  457         .word FORGET2
      000132 CD 12 56         [ 4]  458         call NAMEQ
      000135 CD 07 44         [ 4]  459         call QDUP 
      000138 CD 04 A8         [ 4]  460         call QBRAN 
      00013B 02 0D                  461         .word FORGET2
      00013D CD 05 90         [ 4]  462         call DROP 
      000140 1D 00 04         [ 2]  463         subw x,#2*CELLL 
      000143 90 5F            [ 1]  464         clrw y 
      000145 FF               [ 2]  465         ldw (x),y 
      000146 90 AE 40 02      [ 2]  466         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  467         ldw (2,x),y 
      00014C CC 1D 91         [ 2]  468         jp EESTORE 
                                    469 
                                    470 ;; Reset dictionary pointer before 
                                    471 ;; forgotten word. RAM space and 
                                    472 ;; interrupt vector defined after 
                                    473 ;; must be resetted also.
      00014F 01 1F                  474         .word LINK 
                           000151   475         LINK=.
      000151 06                     476         .byte 6
      000152 46 4F 52 47 45 54      477         .ascii "FORGET" 
      000158                        478 FORGET: 
      000158 CD 11 59         [ 4]  479         call TOKEN
      00015B CD 05 9A         [ 4]  480         call DUPP 
      00015E CD 04 A8         [ 4]  481         call QBRAN 
      000161 02 0D                  482         .word FORGET2
      000163 CD 12 56         [ 4]  483         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 07 44         [ 4]  484         call QDUP 
      000169 CD 04 A8         [ 4]  485         call QBRAN 
      00016C 02 0D                  486         .word FORGET2
                                    487 ; only forget users words 
      00016E CD 05 9A         [ 4]  488         call DUPP ; ( ca na na )
      000171 CD 04 75         [ 4]  489         call DOLIT 
      000174 24 00                  490         .word app_space 
      000176 CD 05 AA         [ 4]  491         call SWAPP 
      000179 CD 08 55         [ 4]  492         call  ULESS 
      00017C CD 04 A8         [ 4]  493         call QBRAN 
      00017F 01 CF                  494         .word FORGET6 
                                    495 ; ( ca na -- )        
                                    496 ;reset ivec with address >= ca
      000181 CD 05 AA         [ 4]  497         call SWAPP ; ( na ca -- ) 
      000184 CD 1F 94         [ 4]  498         call CHKIVEC ; ( na -- ) 
                                    499 ; start at LAST and link back to na 
                                    500 ; if variable found reset VP at that point.
      000187                        501 FORGET1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000187 CD 07 06         [ 4]  502         call LAST 
      00018A CD 04 F3         [ 4]  503         call AT 
      00018D CD 05 9A         [ 4]  504         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  505         call FREEVAR ; ( -- na last )
      000193 CD 05 9A         [ 4]  506         call DUPP 
      000196 CD 04 75         [ 4]  507         call DOLIT 
      000199 00 02                  508         .word 2 
      00019B CD 08 0E         [ 4]  509         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 F3         [ 4]  510         call AT 
      0001A1 CD 05 9A         [ 4]  511         call DUPP ; ( -- na last a a )
      0001A4 CD 06 DA         [ 4]  512         call CNTXT 
      0001A7 CD 04 DC         [ 4]  513         call STORE
      0001AA CD 07 06         [ 4]  514         call LAST  
      0001AD CD 04 DC         [ 4]  515         call STORE ; ( --  na last )
      0001B0 CD 05 C4         [ 4]  516         call OVER 
      0001B3 CD 08 36         [ 4]  517         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 04 A8         [ 4]  518         call QBRAN 
      0001B9 01 87                  519         .word FORGET1 
                                    520 ; ( na -- )
      0001BB CD 04 75         [ 4]  521         call DOLIT 
      0001BE 00 02                  522         .word 2 
      0001C0 CD 08 0E         [ 4]  523         call SUBB 
      0001C3 CD 06 F6         [ 4]  524         call CPP 
      0001C6 CD 04 DC         [ 4]  525         call STORE  
      0001C9 CD 1B C4         [ 4]  526         call UPDATCP 
      0001CC CC 1B 9B         [ 2]  527         jp UPDATLAST 
      0001CF                        528 FORGET6: ; tried to forget a RAM or system word 
                                    529 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  530         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  531         ldw y,SP0 
      0001D5 FF               [ 2]  532         ldw (x),y  
      0001D6 CD 08 55         [ 4]  533         call ULESS
      0001D9 CD 04 A8         [ 4]  534         call QBRAN 
      0001DC 01 FF                  535         .word PROTECTED 
      0001DE CD 13 62         [ 4]  536         call ABORQ 
      0001E1 1D                     537         .byte 29
      0001E2 20 46 6F 72 20 52 41   538         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        539 PROTECTED:
      0001FF CD 13 62         [ 4]  540         call ABORQ
      000202 0A                     541         .byte 10
      000203 20 50 72 6F 74 65 63   542         .ascii " Protected"
             74 65 64
      00020D                        543 FORGET2: ; no name or not found in dictionary 
      00020D CD 13 62         [ 4]  544         call ABORQ
      000210 05                     545         .byte 5
      000211 20 77 68 61 74         546         .ascii " what"
      000216                        547 FORGET4:
      000216 CC 05 90         [ 2]  548         jp DROP 
                                    549 
                                    550 
                                    551 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    552 ; if na is variable 
                                    553 ; free variable data  
                                    554 ; FREEVAR ( na -- )
                                    555 ;---------------------------------
      000219 01 51                  556         .word LINK 
                           00021B   557         LINK=.
      00021B 07                     558         .byte 7 
      00021C 46 52 45 45 56 41 52   559         .ascii "FREEVAR"
      000223                        560 FREEVAR:
      000223 CD 05 9A         [ 4]  561         call DUPP ; ( na na -- )
      000226 CD 05 11         [ 4]  562         CALL CAT  ; ( na c -- )
      000229 CD 0A 75         [ 4]  563         call ONEP ;
      00022C CD 07 95         [ 4]  564         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 0A 75         [ 4]  565         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 05 9A         [ 4]  566         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 F3         [ 4]  567         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 04 75         [ 4]  568         call DOLIT 
      00023B 06 47                  569         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 08 36         [ 4]  570         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 04 A8         [ 4]  571         call QBRAN 
      000243 02 59                  572         .word FREEVAR4 
      000245 CD 04 75         [ 4]  573         call DOLIT 
      000248 00 02                  574         .word 2 
      00024A CD 07 95         [ 4]  575         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 F3         [ 4]  576         call AT 
      000250 CD 06 E8         [ 4]  577         call VPP   
      000253 CD 04 DC         [ 4]  578         call STORE 
      000256 CC 1B DB         [ 2]  579         jp UPDATVP 
      000259                        580 FREEVAR4: ; not variable
      000259 CC 05 90         [ 2]  581         jp  DROP 
                                    582 
                                    583 ;    SEED ( n -- )
                                    584 ; Initialize PRNG seed with n 
      00025C 02 1B                  585         .word LINK 
                           00025E   586         LINK=. 
      00025E 04                     587         .byte 4 
      00025F 53 45 45 44            588         .ascii "SEED" 
      000263                        589 SEED:
      000263 90 93            [ 1]  590         ldw y,x 
      000265 1C 00 02         [ 2]  591         addw x,#CELLL
      000268 90 FE            [ 2]  592         ldw y,(y)
      00026A 90 9E            [ 1]  593         ld a,yh 
      00026C B7 36            [ 1]  594         ld SEEDX,a 
      00026E 90 9F            [ 1]  595         ld a,yl 
      000270 B7 38            [ 1]  596         ld SEEDY,a 
      000272 81               [ 4]  597         ret 
                                    598 
                                    599 ;    RANDOM ( u1 -- u2 )
                                    600 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  601         .word LINK 
                           000275   602         LINK=.
      000275 06                     603         .byte 6
      000276 52 41 4E 44 4F 4D      604         .ascii "RANDOM" 
      00027C                        605 RANDOM:
                                    606 ;local variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027C 52 02            [ 2]  609         sub sp,#VSIZE
      00027E 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  612         ldw y,x 
      000282 90 FE            [ 2]  613         ldw y,(y)
      000284 90 BF 24         [ 2]  614         ldw YTEMP,y 
      000287 BE 36            [ 2]  615 	ldw x,SEEDX 
      000289 58               [ 2]  616 	sllw x 
      00028A 58               [ 2]  617 	sllw x 
      00028B 58               [ 2]  618 	sllw x 
      00028C 58               [ 2]  619 	sllw x 
      00028D 58               [ 2]  620 	sllw x 
      00028E 9E               [ 1]  621 	ld a,xh 
      00028F B8 36            [ 1]  622 	xor a,SEEDX 
      000291 B7 22            [ 1]  623 	ld XTEMP,a 
      000293 9F               [ 1]  624 	ld a,xl 
      000294 B8 37            [ 1]  625 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  628 	ldw x,SEEDY 
      00029A BF 36            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  631 	srlw x 
      00029D 9E               [ 1]  632 	ld a,xh 
      00029E B8 38            [ 1]  633 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  634 	ld SEEDY,a  
      0002A2 9F               [ 1]  635 	ld a,xl 
      0002A3 B8 39            [ 1]  636 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  639 	ldw x,XTEMP 
      0002A9 54               [ 2]  640 	srlw x 
      0002AA 54               [ 2]  641 	srlw x 
      0002AB 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AC 9E               [ 1]  644 	ld a,xh 
      0002AD B8 22            [ 1]  645 	xor a,XTEMP 
      0002AF 95               [ 1]  646 	ld xh,a 
      0002B0 9F               [ 1]  647 	ld a,xl 
      0002B1 B8 23            [ 1]  648 	xor a,XTEMP+1  
      0002B3 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B4 B8 39            [ 1]  651 	xor a,SEEDY+1
      0002B6 97               [ 1]  652 	ld xl,a 
      0002B7 9E               [ 1]  653 	ld a,xh 
      0002B8 B8 38            [ 1]  654 	xor a,SEEDY
      0002BA 95               [ 1]  655 	ld xh,a 
      0002BB BF 38            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  658 	ldw y,YTEMP  
      0002C0 65               [ 2]  659 	divw x,y 
      0002C1 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  661         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C4 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C6 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  670         .word LINK  
                           0002C9   671         LINK = . 
      0002C9 04                     672         .byte 4
      0002CA 4D 53 45 43            673         .ascii "MSEC"
      0002CE                        674 MSEC: 
      0002CE 1D 00 02         [ 2]  675         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  676         ldw y,MS 
      0002D4 FF               [ 2]  677         ldw (x),y 
      0002D5 81               [ 4]  678         ret 
                                    679 
                                    680 ; suspend execution for u msec 
                                    681 ;  pause ( u -- )
      0002D6 02 C9                  682         .word LINK 
                           0002D8   683         LINK=.
      0002D8 05                     684         .byte 5 
      0002D9 50 41 55 53 45         685         .ascii "PAUSE"
      0002DE                        686 PAUSE:
      0002DE 90 93            [ 1]  687         ldw y,x
      0002E0 90 FE            [ 2]  688         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  689         addw y,MS 
      0002E6 8F               [10]  690 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  691         cpw y,MS  
      0002EA 26 FA            [ 1]  692         jrne 1$        
      0002EC 1C 00 02         [ 2]  693         addw x,#CELLL 
      0002EF 81               [ 4]  694         ret 
                                    695 
                                    696 ; initialize count down timer 
                                    697 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  698         .word LINK 
                           0002F2   699         LINK=.
      0002F2 05                     700         .byte 5 
      0002F3 54 49 4D 45 52         701         .ascii "TIMER" 
      0002F8                        702 TIMER:
      0002F8 90 93            [ 1]  703         ldw y,x
      0002FA 90 FE            [ 2]  704         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  705         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  706         addw x,#CELLL 
      000302 81               [ 4]  707         ret 
                                    708 
                                    709 ; check for TIMER exiparition 
                                    710 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  711         .word LINK 
                           000305   712         LINK=. 
      000305 08                     713         .byte 8 
      000306 54 49 4D 45 4F 55 54   714         .ascii "TIMEOUT?"
             3F
      00030E                        715 TIMEOUTQ: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00030E 4F               [ 1]  716         clr a
      00030F 1D 00 02         [ 2]  717         subw x,#CELLL 
      000312 90 BE 30         [ 2]  718         ldw y,CNTDWN 
      000315 26 01            [ 1]  719         jrne 1$ 
      000317 43               [ 1]  720         cpl a 
      000318 E7 01            [ 1]  721 1$:     ld (1,x),a 
      00031A F7               [ 1]  722         ld (x),a 
      00031B 81               [ 4]  723         ret         
                                    724 
                                    725 ; reboot MCU 
                                    726 ; REBOOT ( -- )
      00031C 03 05                  727         .word LINK 
                           00031E   728         LINK=. 
      00031E 06                     729         .byte 6 
      00031F 52 45 42 4F 4F 54      730         .ascii "REBOOT"
      000325                        731 reboot:
      000325 CC 00 00         [ 2]  732         jp NonHandledInterrupt
                                    733 
                                    734 ; compile to flash memory 
                                    735 ; TO-FLASH ( -- )
      000328 03 1E                  736         .word LINK 
                           00032A   737         LINK=.
      00032A 08                     738         .byte 8
      00032B 54 4F 2D 46 4C 41 53   739         .ascii "TO-FLASH"
             48
      000333                        740 TOFLASH:
      000333 CD 07 19         [ 4]  741         call RAMLAST 
      000336 CD 04 F3         [ 4]  742         call AT 
      000339 CD 07 44         [ 4]  743         call QDUP 
      00033C CD 04 A8         [ 4]  744         call QBRAN
      00033F 03 62                  745         .word 1$
      000341 CD 13 62         [ 4]  746         call ABORQ 
      000344 1D                     747         .byte 29
      000345 20 4E 6F 74 20 77 68   748         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  749 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  750         ldw UTFLASH,y
      000369 81               [ 4]  751         ret 
                                    752 
                                    753 ; compile to RAM 
                                    754 ; TO-RAM ( -- )
      00036A 03 2A                  755         .word LINK 
                           00036C   756         LINK=.
      00036C 06                     757         .byte 6 
      00036D 54 4F 2D 52 41 4D      758         .ascii "TO-RAM"
      000373                        759 TORAM:
      000373 90 5F            [ 1]  760         clrw y 
      000375 90 BF 1E         [ 2]  761         ldw UTFLASH,y 
      000378 81               [ 4]  762         ret 
                                    763 
                                    764 ;; BAUD RATE constants table
                                    765 ; values to put in BRR1 & BRR2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000379                        766 baudrate: 
      000379 A0 1B                  767 	.byte 0xa0,0x1b ; 2400
      00037B D0 05                  768 	.byte 0xd0,0x5  ; 4800 
      00037D 68 03                  769 	.byte 0x68,0x3  ; 9600
      00037F 34 01                  770 	.byte 0x34,0x1  ; 19200
      000381 11 06                  771 	.byte 0x11,0x6  ; 57600
      000383 08 0B                  772 	.byte 0x8,0xb   ; 115200
                                    773 
                                    774 ; BAUD RATE CONSTANTS names 
                                    775 ; 2400 baud
      000385 03 6C                  776 	.word LINK
                           000387   777 LINK	= .
      000387 04                     778 	.byte 4
      000388 42 32 4B 34            779 	.ascii "B2K4" 
      00038C                        780 B2K4:
      00038C 1D 00 02         [ 2]  781 	subw x,#CELLL 
      00038F 90 5F            [ 1]  782         clrw y
      000391 FF               [ 2]  783         ldw (x),y
      000392 81               [ 4]  784 	ret
                                    785 ; 4800 baud	
      000393 03 87                  786 	.word LINK
                           000395   787 LINK	= .
      000395 04                     788 	.byte 4
      000396 42 34 4B 38            789 	.ascii "B4K8" 
      00039A                        790 B4K8:
      00039A 1D 00 02         [ 2]  791         subw x,#CELLL 
      00039D 90 AE 00 02      [ 2]  792         ldw y,#2 
      0003A1 FF               [ 2]  793         ldw (x),y
      0003A2 81               [ 4]  794         ret 
                                    795 ; 9600 baud
      0003A3 03 95                  796 	.word LINK
                           0003A5   797 LINK	= .
      0003A5 04                     798 	.byte 4
      0003A6 42 39 4B 36            799 	.ascii "B9K6" 
      0003AA                        800 B9K6:
      0003AA 1D 00 02         [ 2]  801         subw x,#CELLL 
      0003AD 90 AE 00 04      [ 2]  802         ldw y,#4 
      0003B1 FF               [ 2]  803         ldw (x),y 
      0003B2 81               [ 4]  804         ret 
                                    805 ; 19200 baud
      0003B3 03 A5                  806 	.word LINK
                           0003B5   807 LINK	= .
      0003B5 05                     808 	.byte 5
      0003B6 42 31 39 4B 32         809 	.ascii "B19K2" 
      0003BB                        810 B19K2:
      0003BB 1D 00 02         [ 2]  811         subw x,#CELLL
      0003BE 90 AE 00 06      [ 2]  812         ldw y,#6 
      0003C2 FF               [ 2]  813         ldw (x),y 
      0003C3 81               [ 4]  814         ret 
                                    815 ; 57600 baud        
      0003C4 03 B5                  816 	.word LINK
                           0003C6   817 LINK	= .
      0003C6 05                     818 	.byte 5
      0003C7 42 35 37 4B 36         819 	.ascii "B57K6" 
      0003CC                        820 B57K6:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003CC 1D 00 02         [ 2]  821         subw x,#CELLL 
      0003CF 90 AE 00 08      [ 2]  822         ldw y,#8 
      0003D3 FF               [ 2]  823         ldw (x),y 
      0003D4 81               [ 4]  824         ret 
                                    825 ; 115200 baud 
      0003D5 03 C6                  826 	.word LINK
                           0003D7   827 LINK	= .
      0003D7 06                     828 	.byte 6
      0003D8 42 31 31 35 4B 32      829 	.ascii "B115K2" 
      0003DE                        830 B115K2:
      0003DE 1D 00 02         [ 2]  831 	subw x,#CELLL 
      0003E1 90 AE 00 0A      [ 2]  832         ldw y,#10 
      0003E5 FF               [ 2]  833         ldw (x),y 
      0003E6 81               [ 4]  834         ret 
                                    835 	
                                    836 ;; set UART2 BAUD rate
                                    837 ;	BAUD ( u -- )
      0003E7 03 D7                  838 	.word LINK 
                           0003E9   839 LINK	= .
      0003E9 04                     840 	.byte 4
      0003EA 42 41 55 44            841 	.ascii "BAUD" 
      0003EE                        842 BAUD:
      0003EE 1D 00 02         [ 2]  843 	subw x,#CELLL
      0003F1 90 AE 03 79      [ 2]  844         ldw y,#baudrate 
      0003F5 FF               [ 2]  845         ldw (x),y 
      0003F6 CD 07 95         [ 4]  846         call PLUS
      0003F9 90 93            [ 1]  847         ldw y,x  
      0003FB 90 FE            [ 2]  848         ldw y,(y)
      0003FD 90 F6            [ 1]  849         ld a,(y)
      0003FF 88               [ 1]  850         push a 
      000400 90 5C            [ 1]  851         incw y 
      000402 90 F6            [ 1]  852         ld a,(y)
      000404 C7 52 33         [ 1]  853         ld UART_BRR2,a 
      000407 84               [ 1]  854         pop a
      000408 C7 52 32         [ 1]  855         ld UART_BRR1,a 
      00040B 1C 00 02         [ 2]  856         addw x,#CELLL 
      00040E 81               [ 4]  857         ret 
                                    858 
                                    859 ;; Device dependent I/O
                                    860 ;       ?RX     ( -- c T | F )
                                    861 ;         Return input byte and true, or false.
      00040F 03 E9                  862         .word      LINK 
                           000411   863 LINK	= .
      000411 04                     864         .byte      4
      000412 3F 4B 45 59            865         .ascii     "?KEY"
      000416                        866 QKEY:
      000416 90 5F            [ 1]  867         CLRW Y 
      000418 72 0B 52 30 0B   [ 2]  868         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041D C6 52 31         [ 1]  869         LD    A,UART_DR   ;get char in A
      000420 1D 00 02         [ 2]  870 	SUBW	X,#2
      000423 E7 01            [ 1]  871         LD     (1,X),A
      000425 7F               [ 1]  872 	CLR	(X)
      000426 90 53            [ 2]  873         CPLW     Y
      000428                        874 INCH:
      000428 1D 00 02         [ 2]  875 		SUBW	X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042B FF               [ 2]  876         LDW     (X),Y
      00042C 81               [ 4]  877         RET
                                    878 
                                    879 ;       TX!     ( c -- )
                                    880 ;       Send character c to  output device.
      00042D 04 11                  881         .word      LINK
                           00042F   882 LINK	= .
      00042F 04                     883         .byte      4
      000430 45 4D 49 54            884         .ascii     "EMIT"
      000434                        885 EMIT:
      000434 E6 01            [ 1]  886         LD     A,(1,X)
      000436 1C 00 02         [ 2]  887 	ADDW	X,#2
      000439 72 0F 52 30 FB   [ 2]  888 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      00043E C7 52 31         [ 1]  889         LD    UART_DR,A   ;send A
      000441 81               [ 4]  890         RET
                                    891 
                                    892 ;       FC-XON  ( -- )
                                    893 ;       send XON character 
      000442 04 2F                  894         .word LINK
                           000444   895 LINK    = .
      000444 06                     896         .byte 6 
      000445 46 43 2D 58 4F 4E      897         .ascii "FC-XON"
      00044B                        898 FC_XON:
      00044B 1D 00 02         [ 2]  899         subw x,#CELLL 
      00044E 7F               [ 1]  900         clr (x)
      00044F A6 11            [ 1]  901         ld a,#XON 
      000451 E7 01            [ 1]  902         ld (1,x),a 
      000453 CD 04 34         [ 4]  903         call EMIT 
      000456 81               [ 4]  904         ret 
                                    905 
                                    906 ;       FC-XOFF ( -- )
                                    907 ;       Send XOFF character 
      000457 04 44                  908         .word LINK
                           000459   909 LINK    = .
      000459 07                     910         .byte 7
      00045A 46 43 2D 58 4F 46 46   911         .ascii "FC-XOFF"
      000461                        912 FC_XOFF:
      000461 1D 00 02         [ 2]  913         subw x,#CELLL 
      000464 7F               [ 1]  914         clr (x)
      000465 A6 13            [ 1]  915         ld a,#XOFF 
      000467 E7 01            [ 1]  916         ld (1,x),a 
      000469 CD 04 34         [ 4]  917         call EMIT 
      00046C 81               [ 4]  918         ret
                                    919 
                                    920 ;; The kernel
                                    921 
                                    922 ;       doLIT   ( -- w )
                                    923 ;       Push an inline literal.
      00046D 04 59                  924         .word      LINK
                           00046F   925 LINK	= 	.
      00046F 45                     926 	.byte      COMPO+5
      000470 44 4F 4C 49 54         927         .ascii     "DOLIT"
      000475                        928 DOLIT:
      000475 1D 00 02         [ 2]  929 	SUBW X,#2
      000478 16 01            [ 2]  930         ldw y,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00047A 90 FE            [ 2]  931         ldw y,(y)
      00047C FF               [ 2]  932         ldw (x),y
      00047D 90 85            [ 2]  933         popw y 
      00047F 90 EC 02         [ 2]  934         jp (2,y)
                                    935 
                                    936 ;       next    ( -- )
                                    937 ;       Code for  single index loop.
      000482 04 6F                  938         .word      LINK
                           000484   939 LINK	= 	.
      000484 44                     940 	.byte      COMPO+4
      000485 6E 65 78 74            941         .ascii     "next"
      000489                        942 DONXT:
      000489 16 03            [ 2]  943 	LDW Y,(3,SP)
      00048B 90 5A            [ 2]  944 	DECW Y
      00048D 2A 07            [ 1]  945 	JRPL NEX1 ; jump if N=0
      00048F 90 85            [ 2]  946 	POPW Y
      000491 5B 02            [ 2]  947         addw sp,#2
      000493 90 EC 02         [ 2]  948         JP (2,Y)
      000496                        949 NEX1:
      000496 17 03            [ 2]  950         LDW (3,SP),Y
      000498 90 85            [ 2]  951         POPW Y
      00049A 90 FE            [ 2]  952 	LDW Y,(Y)
      00049C 90 FC            [ 2]  953 	JP (Y)
                                    954 
                                    955 ;       ?branch ( f -- )
                                    956 ;       Branch if flag is zero.
      00049E 04 84                  957         .word      LINK
                           0004A0   958 LINK	= 	.
      0004A0 47                     959 	.byte      COMPO+7
      0004A1 3F 42 52 41 4E 43 48   960         .ascii     "?BRANCH"
      0004A8                        961 QBRAN:	
      0004A8 90 93            [ 1]  962         LDW Y,X
      0004AA 1C 00 02         [ 2]  963 	ADDW X,#2
      0004AD 90 FE            [ 2]  964 	LDW Y,(Y)
      0004AF 27 0E            [ 1]  965         JREQ     BRAN
      0004B1 90 85            [ 2]  966 	POPW Y
      0004B3 90 EC 02         [ 2]  967 	JP (2,Y)
                                    968         
                                    969 ;       branch  ( -- )
                                    970 ;       Branch to an inline address.
      0004B6 04 A0                  971         .word      LINK
                           0004B8   972 LINK	= 	.
      0004B8 46                     973 	.byte      COMPO+6
      0004B9 42 52 41 4E 43 48      974         .ascii     "BRANCH"
      0004BF                        975 BRAN:
      0004BF 90 85            [ 2]  976         POPW Y
      0004C1 90 FE            [ 2]  977 	LDW Y,(Y)
      0004C3 90 FC            [ 2]  978         JP     (Y)
                                    979 
                                    980 ;       EXECUTE ( ca -- )
                                    981 ;       Execute  word at ca.
      0004C5 04 B8                  982         .word      LINK
                           0004C7   983 LINK	= 	.
      0004C7 07                     984         .byte       7
      0004C8 45 58 45 43 55 54 45   985         .ascii     "EXECUTE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004CF                        986 EXECU:
      0004CF 90 93            [ 1]  987         LDW Y,X
      0004D1 1C 00 02         [ 2]  988 	ADDW X,#2
      0004D4 90 FE            [ 2]  989 	LDW  Y,(Y)
      0004D6 90 FC            [ 2]  990         JP   (Y)
                                    991 
                           000001   992 OPTIMIZE = 1
                           000001   993 .if OPTIMIZE 
                                    994 ; remplacement de CALL EXIT par 
                                    995 ; le opcode de RET.
                                    996 ; Voir modification au code de ";"
                           000000   997 .else 
                                    998 ;       EXIT    ( -- )
                                    999 ;       Terminate a colon definition.
                                   1000         .word      LINK
                                   1001 LINK = .
                                   1002         .byte      4
                                   1003         .ascii     "EXIT"
                                   1004 EXIT:
                                   1005         POPW Y
                                   1006         RET
                                   1007 .endif 
                                   1008 
                                   1009 ;       !       ( w a -- )
                                   1010 ;       Pop  data stack to memory.
      0004D8 04 C7                 1011         .word      LINK
                           0004DA  1012 LINK = .
      0004DA 01                    1013         .byte      1
      0004DB 21                    1014         .ascii     "!"
      0004DC                       1015 STORE:
      0004DC 90 93            [ 1] 1016         LDW Y,X
      0004DE 90 FE            [ 2] 1017         LDW Y,(Y)    ;Y=a
      0004E0 90 BF 24         [ 2] 1018         LDW YTEMP,Y
      0004E3 90 93            [ 1] 1019         LDW Y,X
      0004E5 90 EE 02         [ 2] 1020         LDW Y,(2,Y)
      0004E8 91 CF 24         [ 5] 1021         LDW [YTEMP],Y ;store w at a
      0004EB 1C 00 04         [ 2] 1022         ADDW X,#4 ; DDROP 
      0004EE 81               [ 4] 1023         RET     
                                   1024 
                                   1025 ;       @       ( a -- w )
                                   1026 ;       Push memory location to stack.
      0004EF 04 DA                 1027         .word      LINK
                           0004F1  1028 LINK	= 	.
      0004F1 01                    1029         .byte    1
      0004F2 40                    1030         .ascii	"@"
      0004F3                       1031 AT:
      0004F3 90 93            [ 1] 1032         LDW Y,X     ;Y = a
      0004F5 90 FE            [ 2] 1033         LDW Y,(Y)   ; address 
      0004F7 90 FE            [ 2] 1034         LDW Y,(Y)   ; value 
      0004F9 FF               [ 2] 1035         LDW (X),Y ;w = @Y
      0004FA 81               [ 4] 1036         RET     
                                   1037 
                                   1038 ;       C!      ( c b -- )
                                   1039 ;       Pop  data stack to byte memory.
      0004FB 04 F1                 1040         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           0004FD  1041 LINK	= .
      0004FD 02                    1042         .byte      2
      0004FE 43 21                 1043         .ascii     "C!"
      000500                       1044 CSTOR:
      000500 90 93            [ 1] 1045         LDW Y,X
      000502 90 FE            [ 2] 1046 	LDW Y,(Y)    ;Y=b
      000504 E6 03            [ 1] 1047         LD A,(3,X)    ;D = c
      000506 90 F7            [ 1] 1048         LD  (Y),A     ;store c at b
      000508 1C 00 04         [ 2] 1049 	ADDW X,#4 ; DDROP 
      00050B 81               [ 4] 1050         RET     
                                   1051 
                                   1052 ;       C@      ( b -- c )
                                   1053 ;       Push byte in memory to  stack.
      00050C 04 FD                 1054         .word      LINK
                           00050E  1055 LINK	= 	.
      00050E 02                    1056         .byte      2
      00050F 43 40                 1057         .ascii     "C@"
      000511                       1058 CAT:
      000511 90 93            [ 1] 1059         LDW Y,X     ;Y=b
      000513 90 FE            [ 2] 1060         LDW Y,(Y)
      000515 90 F6            [ 1] 1061         LD A,(Y)
      000517 E7 01            [ 1] 1062         LD (1,X),A
      000519 7F               [ 1] 1063         CLR (X)
      00051A 81               [ 4] 1064         RET     
                                   1065 
                                   1066 ;       RP@     ( -- a )
                                   1067 ;       Push current RP to data stack.
      00051B 05 0E                 1068         .word      LINK
                           00051D  1069 LINK	= .
      00051D 03                    1070         .byte      3
      00051E 52 50 40              1071         .ascii     "RP@"
      000521                       1072 RPAT:
      000521 90 96            [ 1] 1073         LDW Y,SP    ;save return addr
      000523 1D 00 02         [ 2] 1074         SUBW X,#2
      000526 FF               [ 2] 1075         LDW (X),Y
      000527 81               [ 4] 1076         RET     
                                   1077 
                                   1078 ;       RP!     ( a -- )
                                   1079 ;       Set  return stack pointer.
      000528 05 1D                 1080         .word      LINK
                           00052A  1081 LINK	= 	. 
      00052A 43                    1082 	.byte      COMPO+3
      00052B 52 50 21              1083         .ascii     "RP!"
      00052E                       1084 RPSTO:
      00052E 90 85            [ 2] 1085         POPW Y
      000530 90 BF 24         [ 2] 1086         LDW YTEMP,Y
      000533 90 93            [ 1] 1087         LDW Y,X
      000535 90 FE            [ 2] 1088         LDW Y,(Y)
      000537 90 94            [ 1] 1089         LDW SP,Y
      000539 1C 00 02         [ 2] 1090         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00053C 92 CC 24         [ 5] 1091         JP [YTEMP]
                                   1092 
                                   1093 ;       R>      ( -- w )
                                   1094 ;       Pop return stack to data stack.
      00053F 05 2A                 1095         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000541  1096 LINK	= 	. 
      000541 42                    1097 	.byte      COMPO+2
      000542 52 3E                 1098         .ascii     "R>"
      000544                       1099 RFROM:
      000544 90 85            [ 2] 1100         POPW Y    ;save return addr
      000546 90 BF 24         [ 2] 1101         LDW YTEMP,Y
      000549 90 85            [ 2] 1102         POPW Y
      00054B 1D 00 02         [ 2] 1103         SUBW X,#2
      00054E FF               [ 2] 1104         LDW (X),Y
      00054F 92 CC 24         [ 5] 1105         JP [YTEMP]
                                   1106 
                                   1107 ;       R@      ( -- w )
                                   1108 ;       Copy top of return stack to stack.
      000552 05 41                 1109         .word      LINK
                           000554  1110 LINK	= 	. 
      000554 02                    1111         .byte      2
      000555 52 40                 1112         .ascii     "R@"
      000557                       1113 RAT:
      000557 16 03            [ 2] 1114         ldw y,(3,sp)
      000559 1D 00 02         [ 2] 1115         subw x,#CELLL 
      00055C FF               [ 2] 1116         ldw (x),y 
      00055D 81               [ 4] 1117         ret 
                                   1118 
                                   1119 ;       >R      ( w -- )
                                   1120 ;       Push data stack to return stack.
      00055E 05 54                 1121         .word      LINK
                           000560  1122 LINK	= 	. 
      000560 42                    1123 	.byte      COMPO+2
      000561 3E 52                 1124         .ascii     ">R"
      000563                       1125 TOR:
      000563 90 85            [ 2] 1126         POPW Y    ;save return addr
      000565 90 BF 24         [ 2] 1127         LDW YTEMP,Y
      000568 90 93            [ 1] 1128         LDW Y,X
      00056A 90 FE            [ 2] 1129         LDW Y,(Y)
      00056C 90 89            [ 2] 1130         PUSHW Y    ;restore return addr
      00056E 1C 00 02         [ 2] 1131         ADDW X,#2
      000571 92 CC 24         [ 5] 1132         JP [YTEMP]
                                   1133 
                                   1134 ;       SP@     ( -- a )
                                   1135 ;       Push current stack pointer.
      000574 05 60                 1136         .word      LINK
                           000576  1137 LINK	= 	. 
      000576 03                    1138         .byte      3
      000577 53 50 40              1139         .ascii     "SP@"
      00057A                       1140 SPAT:
      00057A 90 93            [ 1] 1141 	LDW Y,X
      00057C 1D 00 02         [ 2] 1142         SUBW X,#2
      00057F FF               [ 2] 1143 	LDW (X),Y
      000580 81               [ 4] 1144         RET     
                                   1145 
                                   1146 ;       SP!     ( a -- )
                                   1147 ;       Set  data stack pointer.
      000581 05 76                 1148         .word      LINK
                           000583  1149 LINK	= 	. 
      000583 03                    1150         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000584 53 50 21              1151         .ascii     "SP!"
      000587                       1152 SPSTO:
      000587 FE               [ 2] 1153         LDW     X,(X)     ;X = a
      000588 81               [ 4] 1154         RET     
                                   1155 
                                   1156 ;       DROP    ( w -- )
                                   1157 ;       Discard top stack item.
      000589 05 83                 1158         .word      LINK
                           00058B  1159 LINK	= 	. 
      00058B 04                    1160         .byte      4
      00058C 44 52 4F 50           1161         .ascii     "DROP"
      000590                       1162 DROP:
      000590 1C 00 02         [ 2] 1163         ADDW X,#2     
      000593 81               [ 4] 1164         RET     
                                   1165 
                                   1166 ;       DUP     ( w -- w w )
                                   1167 ;       Duplicate  top stack item.
      000594 05 8B                 1168         .word      LINK
                           000596  1169 LINK	= 	. 
      000596 03                    1170         .byte      3
      000597 44 55 50              1171         .ascii     "DUP"
      00059A                       1172 DUPP:
      00059A 90 93            [ 1] 1173 	LDW Y,X
      00059C 1D 00 02         [ 2] 1174         SUBW X,#2
      00059F 90 FE            [ 2] 1175 	LDW Y,(Y)
      0005A1 FF               [ 2] 1176 	LDW (X),Y
      0005A2 81               [ 4] 1177         RET     
                                   1178 
                                   1179 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1180 ;       Exchange top two stack items.
      0005A3 05 96                 1181         .word      LINK
                           0005A5  1182 LINK	= 	. 
      0005A5 04                    1183         .byte      4
      0005A6 53 57 41 50           1184         .ascii     "SWAP"
      0005AA                       1185 SWAPP:
      0005AA 90 93            [ 1] 1186         LDW Y,X
      0005AC 90 FE            [ 2] 1187         LDW Y,(Y)
      0005AE 90 BF 24         [ 2] 1188         LDW YTEMP,Y
      0005B1 90 93            [ 1] 1189         LDW Y,X
      0005B3 90 EE 02         [ 2] 1190         LDW Y,(2,Y)
      0005B6 FF               [ 2] 1191         LDW (X),Y
      0005B7 90 BE 24         [ 2] 1192         LDW Y,YTEMP
      0005BA EF 02            [ 2] 1193         LDW (2,X),Y
      0005BC 81               [ 4] 1194         RET     
                                   1195 
                                   1196 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1197 ;       Copy second stack item to top.
      0005BD 05 A5                 1198         .word      LINK
                           0005BF  1199 LINK	= . 
      0005BF 04                    1200         .byte      4
      0005C0 4F 56 45 52           1201         .ascii     "OVER"
      0005C4                       1202 OVER:
      0005C4 1D 00 02         [ 2] 1203         SUBW X,#2
      0005C7 90 93            [ 1] 1204         LDW Y,X
      0005C9 90 EE 04         [ 2] 1205         LDW Y,(4,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005CC FF               [ 2] 1206         LDW (X),Y
      0005CD 81               [ 4] 1207         RET     
                                   1208 
                                   1209 ;       0<      ( n -- t )
                                   1210 ;       Return true if n is negative.
      0005CE 05 BF                 1211         .word      LINK
                           0005D0  1212 LINK	= . 
      0005D0 02                    1213         .byte      2
      0005D1 30 3C                 1214         .ascii     "0<"
      0005D3                       1215 ZLESS:
      0005D3 A6 FF            [ 1] 1216         LD A,#0xFF
      0005D5 90 93            [ 1] 1217         LDW Y,X
      0005D7 90 FE            [ 2] 1218         LDW Y,(Y)
      0005D9 2B 01            [ 1] 1219         JRMI     ZL1
      0005DB 4F               [ 1] 1220         CLR A   ;false
      0005DC F7               [ 1] 1221 ZL1:    LD     (X),A
      0005DD E7 01            [ 1] 1222         LD (1,X),A
      0005DF 81               [ 4] 1223 	RET     
                                   1224 
                                   1225 ;       AND     ( w w -- w )
                                   1226 ;       Bitwise AND.
      0005E0 05 D0                 1227         .word      LINK
                           0005E2  1228 LINK	= . 
      0005E2 03                    1229         .byte      3
      0005E3 41 4E 44              1230         .ascii     "AND"
      0005E6                       1231 ANDD:
      0005E6 F6               [ 1] 1232         LD  A,(X)    ;D=w
      0005E7 E4 02            [ 1] 1233         AND A,(2,X)
      0005E9 E7 02            [ 1] 1234         LD (2,X),A
      0005EB E6 01            [ 1] 1235         LD A,(1,X)
      0005ED E4 03            [ 1] 1236         AND A,(3,X)
      0005EF E7 03            [ 1] 1237         LD (3,X),A
      0005F1 1C 00 02         [ 2] 1238         ADDW X,#2
      0005F4 81               [ 4] 1239         RET
                                   1240 
                                   1241 ;       OR      ( w w -- w )
                                   1242 ;       Bitwise inclusive OR.
      0005F5 05 E2                 1243         .word      LINK
                           0005F7  1244 LINK = . 
      0005F7 02                    1245         .byte      2
      0005F8 4F 52                 1246         .ascii     "OR"
      0005FA                       1247 ORR:
      0005FA F6               [ 1] 1248         LD A,(X)    ;D=w
      0005FB EA 02            [ 1] 1249         OR A,(2,X)
      0005FD E7 02            [ 1] 1250         LD (2,X),A
      0005FF E6 01            [ 1] 1251         LD A,(1,X)
      000601 EA 03            [ 1] 1252         OR A,(3,X)
      000603 E7 03            [ 1] 1253         LD (3,X),A
      000605 1C 00 02         [ 2] 1254         ADDW X,#2
      000608 81               [ 4] 1255         RET
                                   1256 
                                   1257 ;       XOR     ( w w -- w )
                                   1258 ;       Bitwise exclusive OR.
      000609 05 F7                 1259         .word      LINK
                           00060B  1260 LINK	= . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00060B 03                    1261         .byte      3
      00060C 58 4F 52              1262         .ascii     "XOR"
      00060F                       1263 XORR:
      00060F F6               [ 1] 1264         LD A,(X)    ;D=w
      000610 E8 02            [ 1] 1265         XOR A,(2,X)
      000612 E7 02            [ 1] 1266         LD (2,X),A
      000614 E6 01            [ 1] 1267         LD A,(1,X)
      000616 E8 03            [ 1] 1268         XOR A,(3,X)
      000618 E7 03            [ 1] 1269         LD (3,X),A
      00061A 1C 00 02         [ 2] 1270         ADDW X,#2
      00061D 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;       UM+     ( u u -- udsum )
                                   1274 ;       Add two unsigned single
                                   1275 ;       and return a double sum.
      00061E 06 0B                 1276         .word      LINK
                           000620  1277 LINK	= . 
      000620 03                    1278         .byte      3
      000621 55 4D 2B              1279         .ascii     "UM+"
      000624                       1280 UPLUS:
      000624 A6 01            [ 1] 1281         LD A,#1
      000626 90 93            [ 1] 1282         LDW Y,X
      000628 90 EE 02         [ 2] 1283         LDW Y,(2,Y)
      00062B 90 BF 24         [ 2] 1284         LDW YTEMP,Y
      00062E 90 93            [ 1] 1285         LDW Y,X
      000630 90 FE            [ 2] 1286         LDW Y,(Y)
      000632 72 B9 00 24      [ 2] 1287         ADDW Y,YTEMP
      000636 EF 02            [ 2] 1288         LDW (2,X),Y
      000638 25 01            [ 1] 1289         JRC     UPL1
      00063A 4F               [ 1] 1290         CLR A
      00063B E7 01            [ 1] 1291 UPL1:   LD     (1,X),A
      00063D 7F               [ 1] 1292         CLR (X)
      00063E 81               [ 4] 1293         RET
                                   1294 
                                   1295 ;; System and user variables
                                   1296 
                                   1297 ;       doVAR   ( -- a )
                                   1298 ;       Code for VARIABLE and CREATE.
      00063F 06 20                 1299         .word      LINK
                           000641  1300 LINK	= . 
      000641 45                    1301 	.byte      COMPO+5
      000642 44 4F 56 41 52        1302         .ascii     "DOVAR"
      000647                       1303 DOVAR:
      000647 1D 00 02         [ 2] 1304 	SUBW X,#2
      00064A 90 85            [ 2] 1305         POPW Y    ;get return addr (pfa)
      00064C 90 FE            [ 2] 1306         LDW Y,(Y) ; indirect address 
      00064E FF               [ 2] 1307         LDW (X),Y    ;push on stack
      00064F 81               [ 4] 1308         RET     ;go to RET of EXEC
                                   1309 
                                   1310 ;       BASE    ( -- a )
                                   1311 ;       Radix base for numeric I/O.
      000650 06 41                 1312         .word      LINK        
                           000652  1313 LINK = . 
      000652 04                    1314         .byte      4
      000653 42 41 53 45           1315         .ascii     "BASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000657                       1316 BASE:
      000657 90 AE 00 06      [ 2] 1317 	LDW Y,#UBASE 
      00065B 1D 00 02         [ 2] 1318 	SUBW X,#2
      00065E FF               [ 2] 1319         LDW (X),Y
      00065F 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;       tmp     ( -- a )
                                   1323 ;       A temporary storage.
      000660 06 52                 1324         .word      LINK
                                   1325         
                           000662  1326 LINK = . 
      000662 03                    1327 	.byte      3
      000663 54 4D 50              1328         .ascii     "TMP"
      000666                       1329 TEMP:
      000666 90 AE 00 08      [ 2] 1330 	LDW Y,#UTMP
      00066A 1D 00 02         [ 2] 1331 	SUBW X,#2
      00066D FF               [ 2] 1332         LDW (X),Y
      00066E 81               [ 4] 1333         RET
                                   1334 
                                   1335 ;       >IN     ( -- a )
                                   1336 ;        Hold parsing pointer.
      00066F 06 62                 1337         .word      LINK
                           000671  1338 LINK = . 
      000671 03                    1339         .byte      3
      000672 3E 49 4E              1340         .ascii    ">IN"
      000675                       1341 INN:
      000675 90 AE 00 0A      [ 2] 1342 	LDW Y,#UINN 
      000679 1D 00 02         [ 2] 1343 	SUBW X,#2
      00067C FF               [ 2] 1344         LDW (X),Y
      00067D 81               [ 4] 1345         RET
                                   1346 
                                   1347 ;       #TIB    ( -- a )
                                   1348 ;       Count in terminal input buffer.
      00067E 06 71                 1349         .word      LINK
                           000680  1350 LINK = . 
      000680 04                    1351         .byte      4
      000681 23 54 49 42           1352         .ascii     "#TIB"
      000685                       1353 NTIB:
      000685 90 AE 00 0C      [ 2] 1354 	LDW Y,#UCTIB 
      000689 1D 00 02         [ 2] 1355 	SUBW X,#2
      00068C FF               [ 2] 1356         LDW (X),Y
      00068D 81               [ 4] 1357         RET
                                   1358 
                                   1359 ;       TBUF ( -- a )
                                   1360 ;       address of 128 bytes transaction buffer 
      00068E 06 80                 1361         .word LINK 
                           000690  1362         LINK=.
      000690 04                    1363         .byte 4 
      000691 54 42 55 46           1364         .ascii "TBUF"
      000695                       1365 TBUF:
      000695 90 AE 16 80      [ 2] 1366         ldw y,#ROWBUFF
      000699 1D 00 02         [ 2] 1367         subw x,#CELLL
      00069C FF               [ 2] 1368         ldw (x),y 
      00069D 81               [ 4] 1369         ret 
                                   1370 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1371 ; systeme variable 
                                   1372 ; compilation destination 
                                   1373 ; TFLASH ( -- A )
      00069E 06 90                 1374         .word LINK 
                           0006A0  1375         LINK=.
      0006A0 06                    1376         .byte 6 
      0006A1 54 46 4C 41 53 48     1377         .ascii "TFLASH"         
      0006A7                       1378 TFLASH:
      0006A7 1D 00 02         [ 2] 1379         subw x,#CELLL 
      0006AA 90 AE 00 1E      [ 2] 1380         ldw y,#UTFLASH
      0006AE FF               [ 2] 1381         ldw (x),y 
      0006AF 81               [ 4] 1382         ret 
                                   1383 
                                   1384 ;       "EVAL   ( -- a )
                                   1385 ;       Execution vector of EVAL.
      0006B0 06 A0                 1386         .word      LINK
                           0006B2  1387 LINK = . 
      0006B2 05                    1388         .byte      5
      0006B3 27 45 56 41 4C        1389         .ascii     "'EVAL"
      0006B8                       1390 TEVAL:
      0006B8 90 AE 00 10      [ 2] 1391 	LDW Y,#UINTER 
      0006BC 1D 00 02         [ 2] 1392 	SUBW X,#2
      0006BF FF               [ 2] 1393         LDW (X),Y
      0006C0 81               [ 4] 1394         RET
                                   1395 
                                   1396 ;       HLD     ( -- a )
                                   1397 ;       Hold a pointer of output string.
      0006C1 06 B2                 1398         .word      LINK
                           0006C3  1399 LINK = . 
      0006C3 03                    1400         .byte      3
      0006C4 48 4C 44              1401         .ascii     "HLD"
      0006C7                       1402 HLD:
      0006C7 90 AE 00 12      [ 2] 1403 	LDW Y,#UHLD 
      0006CB 1D 00 02         [ 2] 1404 	SUBW X,#2
      0006CE FF               [ 2] 1405         LDW (X),Y
      0006CF 81               [ 4] 1406         RET
                                   1407 
                                   1408 ;       CONTEXT ( -- a )
                                   1409 ;       Start vocabulary search.
      0006D0 06 C3                 1410         .word      LINK
                           0006D2  1411 LINK = . 
      0006D2 07                    1412         .byte      7
      0006D3 43 4F 4E 54 45 58 54  1413         .ascii     "CONTEXT"
      0006DA                       1414 CNTXT:
      0006DA 90 AE 00 14      [ 2] 1415 	LDW Y,#UCNTXT
      0006DE 1D 00 02         [ 2] 1416 	SUBW X,#2
      0006E1 FF               [ 2] 1417         LDW (X),Y
      0006E2 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;       VP      ( -- a )
                                   1421 ;       Point to top of variables
      0006E3 06 D2                 1422         .word      LINK
                           0006E5  1423 LINK = . 
      0006E5 02                    1424         .byte      2
      0006E6 56 50                 1425         .ascii     "VP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006E8                       1426 VPP:
      0006E8 90 AE 00 16      [ 2] 1427 	LDW Y,#UVP 
      0006EC 1D 00 02         [ 2] 1428 	SUBW X,#2
      0006EF FF               [ 2] 1429         LDW (X),Y
      0006F0 81               [ 4] 1430         RET
                                   1431 
                                   1432 ;       CP    ( -- a )
                                   1433 ;       Pointer to top of FLASH 
      0006F1 06 E5                 1434         .word LINK 
                           0006F3  1435         LINK=.
      0006F3 02                    1436         .byte 2 
      0006F4 43 50                 1437         .ascii "CP"
      0006F6                       1438 CPP: 
      0006F6 90 AE 00 18      [ 2] 1439         ldw y,#UCP 
      0006FA 1D 00 02         [ 2] 1440         subw x,#CELLL 
      0006FD FF               [ 2] 1441         ldw (x),y 
      0006FE 81               [ 4] 1442         ret                
                                   1443 
                                   1444 ;       LAST    ( -- a )
                                   1445 ;       Point to last name in dictionary.
      0006FF 06 F3                 1446         .word      LINK
                           000701  1447 LINK = . 
      000701 04                    1448         .byte      4
      000702 4C 41 53 54           1449         .ascii     "LAST"
      000706                       1450 LAST:
      000706 90 AE 00 1A      [ 2] 1451 	LDW Y,#ULAST 
      00070A 1D 00 02         [ 2] 1452 	SUBW X,#2
      00070D FF               [ 2] 1453         LDW (X),Y
      00070E 81               [ 4] 1454         RET
                                   1455 
                                   1456 ; address of system variable URLAST 
                                   1457 ;       RAMLAST ( -- a )
                                   1458 ; RAM dictionary context 
      00070F 07 01                 1459         .word LINK 
                           000711  1460         LINK=. 
      000711 07                    1461         .byte 7  
      000712 52 41 4D 4C 41 53 54  1462         .ascii "RAMLAST" 
      000719                       1463 RAMLAST: 
      000719 90 AE 00 20      [ 2] 1464         ldw y,#URLAST 
      00071D 1D 00 02         [ 2] 1465         subw x,#CELLL 
      000720 FF               [ 2] 1466         ldw (x),y 
      000721 81               [ 4] 1467         ret 
                                   1468 
                                   1469 ; OFFSET ( -- a )
                                   1470 ; address of system variable OFFSET 
      000722 07 11                 1471         .word LINK 
                           000724  1472         LINK=.
      000724 06                    1473         .byte 6
      000725 4F 46 46 53 45 54     1474         .ascii "OFFSET" 
      00072B                       1475 OFFSET: 
      00072B 1D 00 02         [ 2] 1476         subw x,#CELLL
      00072E 90 AE 00 1C      [ 2] 1477         ldw y,#UOFFSET 
      000732 FF               [ 2] 1478         ldw (x),y 
      000733 81               [ 4] 1479         ret 
                                   1480 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1481 ; adjust jump address adding OFFSET
                                   1482 ; ADR-ADJ ( a -- a+offset )
      000734                       1483 ADRADJ: 
      000734 CD 07 2B         [ 4] 1484         call OFFSET 
      000737 CD 04 F3         [ 4] 1485         call AT 
      00073A CC 07 95         [ 2] 1486         jp PLUS 
                                   1487 
                                   1488 
                                   1489 ;; Common functions
                                   1490 
                                   1491 ;       ?DUP    ( w -- w w | 0 )
                                   1492 ;       Dup tos if its is not zero.
      00073D 07 24                 1493         .word      LINK
                           00073F  1494 LINK = . 
      00073F 04                    1495         .byte      4
      000740 3F 44 55 50           1496         .ascii     "?DUP"
      000744                       1497 QDUP:
      000744 90 93            [ 1] 1498         LDW Y,X
      000746 90 FE            [ 2] 1499 	LDW Y,(Y)
      000748 27 04            [ 1] 1500         JREQ     QDUP1
      00074A 1D 00 02         [ 2] 1501 	SUBW X,#2
      00074D FF               [ 2] 1502         LDW (X),Y
      00074E 81               [ 4] 1503 QDUP1:  RET
                                   1504 
                                   1505 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1506 ;       Rot 3rd item to top.
      00074F 07 3F                 1507         .word      LINK
                           000751  1508 LINK = . 
      000751 03                    1509         .byte      3
      000752 52 4F 54              1510         .ascii     "ROT"
      000755                       1511 ROT:
      000755 90 93            [ 1] 1512         ldw y,x 
      000757 90 FE            [ 2] 1513         ldw y,(y)
      000759 90 89            [ 2] 1514         pushw y 
      00075B 90 93            [ 1] 1515         ldw y,x 
      00075D 90 EE 04         [ 2] 1516         ldw y,(4,y)
      000760 FF               [ 2] 1517         ldw (x),y 
      000761 90 93            [ 1] 1518         ldw y,x 
      000763 90 EE 02         [ 2] 1519         ldw y,(2,y)
      000766 EF 04            [ 2] 1520         ldw (4,x),y 
      000768 90 85            [ 2] 1521         popw y 
      00076A EF 02            [ 2] 1522         ldw (2,x),y
      00076C 81               [ 4] 1523         ret 
                                   1524 
                                   1525 ;       2DROP   ( w w -- )
                                   1526 ;       Discard two items on stack.
      00076D 07 51                 1527         .word      LINK
                           00076F  1528 LINK = . 
      00076F 05                    1529         .byte      5
      000770 32 44 52 4F 50        1530         .ascii     "2DROP"
      000775                       1531 DDROP:
      000775 1C 00 04         [ 2] 1532         ADDW X,#4
      000778 81               [ 4] 1533         RET
                                   1534 
                                   1535 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1536 ;       Duplicate top two items.
      000779 07 6F                 1537         .word      LINK
                           00077B  1538 LINK = . 
      00077B 04                    1539         .byte      4
      00077C 32 44 55 50           1540         .ascii     "2DUP"
      000780                       1541 DDUP:
      000780 1D 00 04         [ 2] 1542         SUBW X,#4
      000783 90 93            [ 1] 1543         LDW Y,X
      000785 90 EE 06         [ 2] 1544         LDW Y,(6,Y)
      000788 EF 02            [ 2] 1545         LDW (2,X),Y
      00078A 90 93            [ 1] 1546         LDW Y,X
      00078C 90 EE 04         [ 2] 1547         LDW Y,(4,Y)
      00078F FF               [ 2] 1548         LDW (X),Y
      000790 81               [ 4] 1549         RET
                                   1550 
                                   1551 ;       +       ( w w -- sum )
                                   1552 ;       Add top two items.
      000791 07 7B                 1553         .word      LINK
                           000793  1554 LINK = . 
      000793 01                    1555         .byte      1
      000794 2B                    1556         .ascii     "+"
      000795                       1557 PLUS:
      000795 90 93            [ 1] 1558         LDW Y,X
      000797 90 FE            [ 2] 1559         LDW Y,(Y)
      000799 90 BF 24         [ 2] 1560         LDW YTEMP,Y
      00079C 1C 00 02         [ 2] 1561         ADDW X,#2
      00079F 90 93            [ 1] 1562         LDW Y,X
      0007A1 90 FE            [ 2] 1563         LDW Y,(Y)
      0007A3 72 B9 00 24      [ 2] 1564         ADDW Y,YTEMP
      0007A7 FF               [ 2] 1565         LDW (X),Y
      0007A8 81               [ 4] 1566         RET
                                   1567 
                                   1568 ;       NOT     ( w -- w )
                                   1569 ;       One's complement of tos.
      0007A9 07 93                 1570         .word      LINK
                           0007AB  1571 LINK = . 
      0007AB 03                    1572         .byte      3
      0007AC 4E 4F 54              1573         .ascii     "NOT"
      0007AF                       1574 INVER:
      0007AF 90 93            [ 1] 1575         LDW Y,X
      0007B1 90 FE            [ 2] 1576         LDW Y,(Y)
      0007B3 90 53            [ 2] 1577         CPLW Y
      0007B5 FF               [ 2] 1578         LDW (X),Y
      0007B6 81               [ 4] 1579         RET
                                   1580 
                                   1581 ;       NEGATE  ( n -- -n )
                                   1582 ;       Two's complement of tos.
      0007B7 07 AB                 1583         .word      LINK
                           0007B9  1584 LINK = . 
      0007B9 06                    1585         .byte      6
      0007BA 4E 45 47 41 54 45     1586         .ascii     "NEGATE"
      0007C0                       1587 NEGAT:
      0007C0 90 93            [ 1] 1588         LDW Y,X
      0007C2 90 FE            [ 2] 1589         LDW Y,(Y)
      0007C4 90 50            [ 2] 1590         NEGW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C6 FF               [ 2] 1591         LDW (X),Y
      0007C7 81               [ 4] 1592         RET
                                   1593 
                                   1594 ;       DNEGATE ( d -- -d )
                                   1595 ;       Two's complement of top double.
      0007C8 07 B9                 1596         .word      LINK
                           0007CA  1597 LINK = . 
      0007CA 07                    1598         .byte      7
      0007CB 44 4E 45 47 41 54 45  1599         .ascii     "DNEGATE"
      0007D2                       1600 DNEGA:
      0007D2 90 93            [ 1] 1601         LDW Y,X
      0007D4 90 FE            [ 2] 1602 	LDW Y,(Y)
      0007D6 90 53            [ 2] 1603         CPLW Y     
      0007D8 90 BF 24         [ 2] 1604 	LDW YTEMP,Y
      0007DB 90 93            [ 1] 1605         LDW Y,X
      0007DD 90 EE 02         [ 2] 1606         LDW Y,(2,Y)
      0007E0 90 53            [ 2] 1607         CPLW Y
      0007E2 72 A9 00 01      [ 2] 1608         addw y,#1
      0007E6 EF 02            [ 2] 1609         LDW (2,X),Y
      0007E8 90 BE 24         [ 2] 1610         LDW Y,YTEMP
      0007EB 24 02            [ 1] 1611         JRNC DN1 
      0007ED 90 5C            [ 1] 1612         INCW Y
      0007EF FF               [ 2] 1613 DN1:    LDW (X),Y
      0007F0 81               [ 4] 1614         RET
                                   1615 
                                   1616 
                                   1617 ;       S>D ( n -- d )
                                   1618 ; convert single integer to double 
      0007F1 07 CA                 1619         .word LINK 
                           0007F3  1620         LINK=. 
      0007F3 03                    1621         .byte 3 
      0007F4 53 3E 44              1622         .ascii "S>D"
      0007F7                       1623 STOD: 
      0007F7 1D 00 02         [ 2] 1624         subw x,#CELLL 
      0007FA 90 5F            [ 1] 1625         clrw y 
      0007FC FF               [ 2] 1626         ldw (x),y 
      0007FD 90 93            [ 1] 1627         ldw y,x 
      0007FF 90 EE 02         [ 2] 1628         ldw y,(2,y)
      000802 2A 05            [ 1] 1629         jrpl 1$ 
      000804 90 AE FF FF      [ 2] 1630         ldw y,#-1
      000808 FF               [ 2] 1631         ldw (x),y 
      000809 81               [ 4] 1632 1$:     ret 
                                   1633 
                                   1634 
                                   1635 
                                   1636 
                                   1637 ;       -       ( n1 n2 -- n1-n2 )
                                   1638 ;       Subtraction.
      00080A 07 F3                 1639         .word      LINK
                           00080C  1640 LINK = . 
      00080C 01                    1641         .byte      1
      00080D 2D                    1642         .ascii     "-"
      00080E                       1643 SUBB:
      00080E 90 93            [ 1] 1644         LDW Y,X
      000810 90 FE            [ 2] 1645         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000812 90 BF 24         [ 2] 1646         LDW YTEMP,Y
      000815 1C 00 02         [ 2] 1647         ADDW X,#2
      000818 90 93            [ 1] 1648         LDW Y,X
      00081A 90 FE            [ 2] 1649         LDW Y,(Y)
      00081C 72 B2 00 24      [ 2] 1650         SUBW Y,YTEMP
      000820 FF               [ 2] 1651         LDW (X),Y
      000821 81               [ 4] 1652         RET
                                   1653 
                                   1654 ;       ABS     ( n -- n )
                                   1655 ;       Return  absolute value of n.
      000822 08 0C                 1656         .word      LINK
                           000824  1657 LINK = . 
      000824 03                    1658         .byte      3
      000825 41 42 53              1659         .ascii     "ABS"
      000828                       1660 ABSS:
      000828 90 93            [ 1] 1661         LDW Y,X
      00082A 90 FE            [ 2] 1662 	LDW Y,(Y)
      00082C 2A 03            [ 1] 1663         JRPL     AB1     ;negate:
      00082E 90 50            [ 2] 1664         NEGW     Y     ;else negate hi byte
      000830 FF               [ 2] 1665         LDW (X),Y
      000831 81               [ 4] 1666 AB1:    RET
                                   1667 
                                   1668 ;       =       ( w w -- t )
                                   1669 ;       Return true if top two are =al.
      000832 08 24                 1670         .word      LINK
                           000834  1671 LINK = . 
      000834 01                    1672         .byte      1
      000835 3D                    1673         .ascii     "="
      000836                       1674 EQUAL:
      000836 A6 FF            [ 1] 1675         LD A,#0xFF  ;true
      000838 90 93            [ 1] 1676         LDW Y,X    ;D = n2
      00083A 90 FE            [ 2] 1677         LDW Y,(Y)
      00083C 90 BF 24         [ 2] 1678         LDW YTEMP,Y
      00083F 1C 00 02         [ 2] 1679         ADDW X,#2
      000842 90 93            [ 1] 1680         LDW Y,X
      000844 90 FE            [ 2] 1681         LDW Y,(Y)
      000846 90 B3 24         [ 2] 1682         CPW Y,YTEMP     ;if n2 <> n1
      000849 27 01            [ 1] 1683         JREQ     EQ1
      00084B 4F               [ 1] 1684         CLR A
      00084C F7               [ 1] 1685 EQ1:    LD (X),A
      00084D E7 01            [ 1] 1686         LD (1,X),A
      00084F 81               [ 4] 1687 	RET     
                                   1688 
                                   1689 ;       U<      ( u u -- t )
                                   1690 ;       Unsigned compare of top two items.
      000850 08 34                 1691         .word      LINK
                           000852  1692 LINK = . 
      000852 02                    1693         .byte      2
      000853 55 3C                 1694         .ascii     "U<"
      000855                       1695 ULESS:
      000855 A6 FF            [ 1] 1696         LD A,#0xFF  ;true
      000857 90 93            [ 1] 1697         LDW Y,X    ;D = n2
      000859 90 FE            [ 2] 1698         LDW Y,(Y)
      00085B 90 BF 24         [ 2] 1699         LDW YTEMP,Y
      00085E 1C 00 02         [ 2] 1700         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000861 90 93            [ 1] 1701         LDW Y,X
      000863 90 FE            [ 2] 1702         LDW Y,(Y)
      000865 90 B3 24         [ 2] 1703         CPW Y,YTEMP     ;if n2 <> n1
      000868 25 01            [ 1] 1704         JRULT     ULES1
      00086A 4F               [ 1] 1705         CLR A
      00086B F7               [ 1] 1706 ULES1:  LD (X),A
      00086C E7 01            [ 1] 1707         LD (1,X),A
      00086E 81               [ 4] 1708 	RET     
                                   1709 
                                   1710 ;       <       ( n1 n2 -- t )
                                   1711 ;       Signed compare of top two items.
      00086F 08 52                 1712         .word      LINK
                           000871  1713 LINK = . 
      000871 01                    1714         .byte      1
      000872 3C                    1715         .ascii     "<"
      000873                       1716 LESS:
      000873 A6 FF            [ 1] 1717         LD A,#0xFF  ;true
      000875 90 93            [ 1] 1718         LDW Y,X    ;D = n2
      000877 90 FE            [ 2] 1719         LDW Y,(Y)
      000879 90 BF 24         [ 2] 1720         LDW YTEMP,Y
      00087C 1C 00 02         [ 2] 1721         ADDW X,#2
      00087F 90 93            [ 1] 1722         LDW Y,X
      000881 90 FE            [ 2] 1723         LDW Y,(Y)
      000883 90 B3 24         [ 2] 1724         CPW Y,YTEMP     ;if n2 <> n1
      000886 2F 01            [ 1] 1725         JRSLT     LT1
      000888 4F               [ 1] 1726         CLR A
      000889 F7               [ 1] 1727 LT1:    LD (X),A
      00088A E7 01            [ 1] 1728         LD (1,X),A
      00088C 81               [ 4] 1729 	RET     
                                   1730 
                                   1731 ;       MAX     ( n n -- n )
                                   1732 ;       Return greater of two top items.
      00088D 08 71                 1733         .word      LINK
                           00088F  1734 LINK = . 
      00088F 03                    1735         .byte      3
      000890 4D 41 58              1736         .ascii     "MAX"
      000893                       1737 MAX:
      000893 90 93            [ 1] 1738         LDW Y,X    ;D = n2
      000895 90 EE 02         [ 2] 1739         LDW Y,(2,Y)
      000898 90 BF 24         [ 2] 1740         LDW YTEMP,Y
      00089B 90 93            [ 1] 1741         LDW Y,X
      00089D 90 FE            [ 2] 1742         LDW Y,(Y)
      00089F 90 B3 24         [ 2] 1743         CPW Y,YTEMP     ;if n2 <> n1
      0008A2 2F 02            [ 1] 1744         JRSLT     MAX1
      0008A4 EF 02            [ 2] 1745         LDW (2,X),Y
      0008A6 1C 00 02         [ 2] 1746 MAX1:   ADDW X,#2
      0008A9 81               [ 4] 1747 	RET     
                                   1748 
                                   1749 ;       MIN     ( n n -- n )
                                   1750 ;       Return smaller of top two items.
      0008AA 08 8F                 1751         .word      LINK
                           0008AC  1752 LINK = . 
      0008AC 03                    1753         .byte      3
      0008AD 4D 49 4E              1754         .ascii     "MIN"
      0008B0                       1755 MIN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008B0 90 93            [ 1] 1756         LDW Y,X    ;D = n2
      0008B2 90 EE 02         [ 2] 1757         LDW Y,(2,Y)
      0008B5 90 BF 24         [ 2] 1758         LDW YTEMP,Y
      0008B8 90 93            [ 1] 1759         LDW Y,X
      0008BA 90 FE            [ 2] 1760         LDW Y,(Y)
      0008BC 90 B3 24         [ 2] 1761         CPW Y,YTEMP     ;if n2 <> n1
      0008BF 2C 02            [ 1] 1762         JRSGT     MIN1
      0008C1 EF 02            [ 2] 1763         LDW (2,X),Y
      0008C3 1C 00 02         [ 2] 1764 MIN1:	ADDW X,#2
      0008C6 81               [ 4] 1765 	RET     
                                   1766 
                                   1767 ;       WITHIN  ( u ul uh -- t )
                                   1768 ;       Return true if u is within
                                   1769 ;       range of ul and uh. ( ul <= u < uh )
      0008C7 08 AC                 1770         .word      LINK
                           0008C9  1771 LINK = . 
      0008C9 06                    1772         .byte      6
      0008CA 57 49 54 48 49 4E     1773         .ascii     "WITHIN"
      0008D0                       1774 WITHI:
      0008D0 CD 05 C4         [ 4] 1775         CALL     OVER
      0008D3 CD 08 0E         [ 4] 1776         CALL     SUBB
      0008D6 CD 05 63         [ 4] 1777         CALL     TOR
      0008D9 CD 08 0E         [ 4] 1778         CALL     SUBB
      0008DC CD 05 44         [ 4] 1779         CALL     RFROM
      0008DF CC 08 55         [ 2] 1780         JP     ULESS
                                   1781 
                                   1782 ;; Divide
                                   1783 
                                   1784 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1785 ;       Unsigned divide of a double by a
                                   1786 ;       single. Return mod and quotient.
      0008E2 08 C9                 1787         .word      LINK
                           0008E4  1788 LINK = . 
      0008E4 06                    1789         .byte      6
      0008E5 55 4D 2F 4D 4F 44     1790         .ascii     "UM/MOD"
      0008EB                       1791 UMMOD:
      0008EB 90 93            [ 1] 1792         LDW     Y,X             ; stack pointer to Y
      0008ED FE               [ 2] 1793         LDW     X,(X)           ; un
      0008EE BF 24            [ 2] 1794         LDW     YTEMP,X         ; save un
      0008F0 93               [ 1] 1795         LDW     X,Y
      0008F1 5C               [ 1] 1796         INCW    X               ; drop un
      0008F2 5C               [ 1] 1797         INCW    X
      0008F3 89               [ 2] 1798         PUSHW   X               ; save stack pointer
      0008F4 FE               [ 2] 1799         LDW     X,(X)           ; X=udh
      0008F5 90 EE 04         [ 2] 1800         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0008F8 B3 24            [ 2] 1801         CPW     X,YTEMP
      0008FA 25 0B            [ 1] 1802         JRULT   MMSM1           ; X is still on the R-stack
      0008FC 85               [ 2] 1803         POPW    X               ; restore stack pointer
      0008FD 90 AE FF FF      [ 2] 1804         LDW     Y,#0xFFFF       ; overflow result:
      000901 FF               [ 2] 1805         LDW     (X),Y           ; quotient max. 16 bit value
      000902 90 5F            [ 1] 1806         CLRW    Y
      000904 EF 02            [ 2] 1807         LDW     (2,X),Y         ; remainder 0
      000906 81               [ 4] 1808         RET
      000907                       1809 MMSM1:
      000907 A6 10            [ 1] 1810         LD      A,#16           ; loop count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000909 90 58            [ 2] 1811         SLLW    Y               ; udl shift udl into udh
      00090B                       1812 MMSM3:
      00090B 59               [ 2] 1813         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00090C 25 04            [ 1] 1814         JRC     MMSMa           ; if carry out of rotate
      00090E B3 24            [ 2] 1815         CPW     X,YTEMP         ; compare udh to un
      000910 25 05            [ 1] 1816         JRULT   MMSM4           ; can't subtract
      000912                       1817 MMSMa:
      000912 72 B0 00 24      [ 2] 1818         SUBW    X,YTEMP         ; can subtract
      000916 98               [ 1] 1819         RCF
      000917                       1820 MMSM4:
      000917 8C               [ 1] 1821         CCF                     ; quotient bit
      000918 90 59            [ 2] 1822         RLCW    Y               ; rotate into quotient, rotate out udl
      00091A 4A               [ 1] 1823         DEC     A               ; repeat
      00091B 26 EE            [ 1] 1824         JRNE    MMSM3           ; if A == 0
      00091D                       1825 MMSMb:
      00091D BF 24            [ 2] 1826         LDW     YTEMP,X         ; done, save remainder
      00091F 85               [ 2] 1827         POPW    X               ; restore stack pointer
      000920 FF               [ 2] 1828         LDW     (X),Y           ; save quotient
      000921 90 BE 24         [ 2] 1829         LDW     Y,YTEMP         ; remainder onto stack
      000924 EF 02            [ 2] 1830         LDW     (2,X),Y
      000926 81               [ 4] 1831         RET
                                   1832 
                                   1833 
                                   1834 ;----------------------------------------------	
                                   1835 ;       M/MOD   ( d n -- r q )
                                   1836 ;       Signed floored divide of double by
                                   1837 ;       single. Return mod and quotient.
                                   1838 ;----------------------------------------------	
      000927 08 E4                 1839         .word      LINK
                           000929  1840 LINK = . 
      000929 05                    1841         .byte      5
      00092A 4D 2F 4D 4F 44        1842         .ascii     "M/MOD"
      00092F                       1843 MSMOD:  
      00092F CD 05 9A         [ 4] 1844         CALL	DUPP
      000932 CD 05 D3         [ 4] 1845         CALL	ZLESS
      000935 CD 05 9A         [ 4] 1846         CALL	DUPP
      000938 CD 05 63         [ 4] 1847         CALL	TOR
      00093B CD 04 A8         [ 4] 1848         CALL	QBRAN
      00093E 09 4C                 1849         .word	MMOD1
      000940 CD 07 C0         [ 4] 1850         CALL	NEGAT
      000943 CD 05 63         [ 4] 1851         CALL	TOR
      000946 CD 07 D2         [ 4] 1852         CALL	DNEGA
      000949 CD 05 44         [ 4] 1853         CALL	RFROM
      00094C CD 05 63         [ 4] 1854 MMOD1:	CALL	TOR
      00094F CD 05 9A         [ 4] 1855         CALL	DUPP
      000952 CD 05 D3         [ 4] 1856         CALL	ZLESS
      000955 CD 04 A8         [ 4] 1857         CALL	QBRAN
      000958 09 60                 1858         .word	MMOD2
      00095A CD 05 57         [ 4] 1859         CALL	RAT
      00095D CD 07 95         [ 4] 1860         CALL	PLUS
      000960 CD 05 44         [ 4] 1861 MMOD2:	CALL	RFROM
      000963 CD 08 EB         [ 4] 1862         CALL	UMMOD
      000966 CD 05 44         [ 4] 1863         CALL	RFROM
      000969 CD 04 A8         [ 4] 1864         CALL	QBRAN
      00096C 09 77                 1865         .word	MMOD3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00096E CD 05 AA         [ 4] 1866         CALL	SWAPP
      000971 CD 07 C0         [ 4] 1867         CALL	NEGAT
      000974 CD 05 AA         [ 4] 1868         CALL	SWAPP
      000977 81               [ 4] 1869 MMOD3:	RET
                                   1870 
                                   1871 ;       /MOD    ( n n -- r q )
                                   1872 ;       Signed divide. Return mod and quotient.
      000978 09 29                 1873         .word      LINK
                           00097A  1874 LINK = . 
      00097A 04                    1875         .byte      4
      00097B 2F 4D 4F 44           1876         .ascii     "/MOD"
      00097F                       1877 SLMOD:
      00097F CD 05 C4         [ 4] 1878         CALL	OVER
      000982 CD 05 D3         [ 4] 1879         CALL	ZLESS
      000985 CD 05 AA         [ 4] 1880         CALL	SWAPP
      000988 CC 09 2F         [ 2] 1881         JP	MSMOD
                                   1882 
                                   1883 ;       MOD     ( n n -- r )
                                   1884 ;       Signed divide. Return mod only.
      00098B 09 7A                 1885         .word      LINK
                           00098D  1886 LINK = . 
      00098D 03                    1887         .byte      3
      00098E 4D 4F 44              1888         .ascii     "MOD"
      000991                       1889 MODD:
      000991 CD 09 7F         [ 4] 1890 	CALL	SLMOD
      000994 CC 05 90         [ 2] 1891 	JP	DROP
                                   1892 
                                   1893 ;       /       ( n n -- q )
                                   1894 ;       Signed divide. Return quotient only.
      000997 09 8D                 1895         .word      LINK
                           000999  1896 LINK = . 
      000999 01                    1897         .byte      1
      00099A 2F                    1898         .ascii     "/"
      00099B                       1899 SLASH:
      00099B CD 09 7F         [ 4] 1900         CALL	SLMOD
      00099E CD 05 AA         [ 4] 1901         CALL	SWAPP
      0009A1 CC 05 90         [ 2] 1902         JP	DROP
                                   1903 
                                   1904 ;; Multiply
                                   1905 
                                   1906 ;       UM*     ( u u -- ud )
                                   1907 ;       Unsigned multiply. Return double product.
      0009A4 09 99                 1908         .word      LINK
                           0009A6  1909 LINK = . 
      0009A6 03                    1910         .byte      3
      0009A7 55 4D 2A              1911         .ascii     "UM*"
      0009AA                       1912 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1913 ; take advantage of SP addressing modes
                                   1914 ; these PRODx in RAM are not required
                                   1915 ; the product is kept on stack as local variable 
                                   1916         ;; bytes offset on data stack 
                           000002  1917         da=2 
                           000003  1918         db=3 
                           000000  1919         dc=0 
                           000001  1920         dd=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1921         ;; product bytes offset on return stack 
                           000001  1922         UD1=1  ; ud bits 31..24
                           000002  1923         UD2=2  ; ud bits 23..16
                           000003  1924         UD3=3  ; ud bits 15..8 
                           000004  1925         UD4=4  ; ud bits 7..0 
                                   1926         ;; local variable for product set to zero   
      0009AA 90 5F            [ 1] 1927         clrw y 
      0009AC 90 89            [ 2] 1928         pushw y  ; bits 15..0
      0009AE 90 89            [ 2] 1929         pushw y  ; bits 31..16 
      0009B0 E6 03            [ 1] 1930         ld a,(db,x) ; b 
      0009B2 90 97            [ 1] 1931         ld yl,a 
      0009B4 E6 01            [ 1] 1932         ld a,(dd,x)   ; d
      0009B6 90 42            [ 4] 1933         mul y,a    ; b*d  
      0009B8 17 03            [ 2] 1934         ldw (UD3,sp),y ; lowest weight product 
      0009BA E6 03            [ 1] 1935         ld a,(db,x)
      0009BC 90 97            [ 1] 1936         ld yl,a 
      0009BE E6 00            [ 1] 1937         ld a,(dc,x)
      0009C0 90 42            [ 4] 1938         mul y,a  ; b*c 
                                   1939         ;;; do the partial sum 
      0009C2 72 F9 02         [ 2] 1940         addw y,(UD2,sp)
      0009C5 4F               [ 1] 1941         clr a 
      0009C6 49               [ 1] 1942         rlc a
      0009C7 6B 01            [ 1] 1943         ld (UD1,sp),a 
      0009C9 17 02            [ 2] 1944         ldw (UD2,sp),y 
      0009CB E6 02            [ 1] 1945         ld a,(da,x)
      0009CD 90 97            [ 1] 1946         ld yl,a 
      0009CF E6 01            [ 1] 1947         ld a,(dd,x)
      0009D1 90 42            [ 4] 1948         mul y,a   ; a*d 
                                   1949         ;; do partial sum 
      0009D3 72 F9 02         [ 2] 1950         addw y,(UD2,sp)
      0009D6 4F               [ 1] 1951         clr a 
      0009D7 19 01            [ 1] 1952         adc a,(UD1,sp)
      0009D9 6B 01            [ 1] 1953         ld (UD1,sp),a  
      0009DB 17 02            [ 2] 1954         ldw (UD2,sp),y 
      0009DD E6 02            [ 1] 1955         ld a,(da,x)
      0009DF 90 97            [ 1] 1956         ld yl,a 
      0009E1 E6 00            [ 1] 1957         ld a,(dc,x)
      0009E3 90 42            [ 4] 1958         mul y,a  ;  a*c highest weight product 
                                   1959         ;;; do partial sum 
      0009E5 72 F9 01         [ 2] 1960         addw y,(UD1,sp)
      0009E8 FF               [ 2] 1961         ldw (x),y  ; udh 
      0009E9 16 03            [ 2] 1962         ldw y,(UD3,sp)
      0009EB EF 02            [ 2] 1963         ldw (2,x),y  ; udl  
      0009ED 5B 04            [ 2] 1964         addw sp,#4 ; drop local variable 
      0009EF 81               [ 4] 1965         ret  
                                   1966 
                                   1967 
                                   1968 ;       *       ( n n -- n )
                                   1969 ;       Signed multiply. Return single product.
      0009F0 09 A6                 1970         .word      LINK
                           0009F2  1971 LINK = . 
      0009F2 01                    1972         .byte      1
      0009F3 2A                    1973         .ascii     "*"
      0009F4                       1974 STAR:
      0009F4 CD 09 AA         [ 4] 1975 	CALL	UMSTA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009F7 CC 05 90         [ 2] 1976 	JP	DROP
                                   1977 
                                   1978 ;       M*      ( n n -- d )
                                   1979 ;       Signed multiply. Return double product.
      0009FA 09 F2                 1980         .word      LINK
                           0009FC  1981 LINK = . 
      0009FC 02                    1982         .byte      2
      0009FD 4D 2A                 1983         .ascii     "M*"
      0009FF                       1984 MSTAR:      
      0009FF CD 07 80         [ 4] 1985         CALL	DDUP
      000A02 CD 06 0F         [ 4] 1986         CALL	XORR
      000A05 CD 05 D3         [ 4] 1987         CALL	ZLESS
      000A08 CD 05 63         [ 4] 1988         CALL	TOR
      000A0B CD 08 28         [ 4] 1989         CALL	ABSS
      000A0E CD 05 AA         [ 4] 1990         CALL	SWAPP
      000A11 CD 08 28         [ 4] 1991         CALL	ABSS
      000A14 CD 09 AA         [ 4] 1992         CALL	UMSTA
      000A17 CD 05 44         [ 4] 1993         CALL	RFROM
      000A1A CD 04 A8         [ 4] 1994         CALL	QBRAN
      000A1D 0A 22                 1995         .word	MSTA1
      000A1F CD 07 D2         [ 4] 1996         CALL	DNEGA
      000A22 81               [ 4] 1997 MSTA1:	RET
                                   1998 
                                   1999 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2000 ;       Multiply n1 and n2, then divide
                                   2001 ;       by n3. Return mod and quotient.
      000A23 09 FC                 2002         .word      LINK
                           000A25  2003 LINK = . 
      000A25 05                    2004         .byte      5
      000A26 2A 2F 4D 4F 44        2005         .ascii     "*/MOD"
      000A2B                       2006 SSMOD:
      000A2B CD 05 63         [ 4] 2007         CALL     TOR
      000A2E CD 09 FF         [ 4] 2008         CALL     MSTAR
      000A31 CD 05 44         [ 4] 2009         CALL     RFROM
      000A34 CC 09 2F         [ 2] 2010         JP     MSMOD
                                   2011 
                                   2012 ;       */      ( n1 n2 n3 -- q )
                                   2013 ;       Multiply n1 by n2, then divide
                                   2014 ;       by n3. Return quotient only.
      000A37 0A 25                 2015         .word      LINK
                           000A39  2016 LINK = . 
      000A39 02                    2017         .byte      2
      000A3A 2A 2F                 2018         .ascii     "*/"
      000A3C                       2019 STASL:
      000A3C CD 0A 2B         [ 4] 2020         CALL	SSMOD
      000A3F CD 05 AA         [ 4] 2021         CALL	SWAPP
      000A42 CC 05 90         [ 2] 2022         JP	DROP
                                   2023 
                                   2024 ;; Miscellaneous
                                   2025 
                                   2026 ;       CELL+   ( a -- a )
                                   2027 ;       Add cell size in byte to address.
      000A45 0A 39                 2028         .word      LINK
                           000A47  2029 LINK = . 
      000A47 02                    2030         .byte       2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A48 32 2B                 2031         .ascii     "2+"
      000A4A                       2032 CELLP:
      000A4A 90 93            [ 1] 2033         LDW Y,X
      000A4C 90 FE            [ 2] 2034 	LDW Y,(Y)
      000A4E 72 A9 00 02      [ 2] 2035         ADDW Y,#CELLL 
      000A52 FF               [ 2] 2036         LDW (X),Y
      000A53 81               [ 4] 2037         RET
                                   2038 
                                   2039 ;       CELL-   ( a -- a )
                                   2040 ;       Subtract 2 from address.
      000A54 0A 47                 2041         .word      LINK
                           000A56  2042 LINK = . 
      000A56 02                    2043         .byte       2
      000A57 32 2D                 2044         .ascii     "2-"
      000A59                       2045 CELLM:
      000A59 90 93            [ 1] 2046         LDW Y,X
      000A5B 90 FE            [ 2] 2047 	LDW Y,(Y)
      000A5D 72 A2 00 02      [ 2] 2048         SUBW Y,#CELLL
      000A61 FF               [ 2] 2049         LDW (X),Y
      000A62 81               [ 4] 2050         RET
                                   2051 
                                   2052 ;       CELLS   ( n -- n )
                                   2053 ;       Multiply tos by 2.
      000A63 0A 56                 2054         .word      LINK
                           000A65  2055 LINK = . 
      000A65 02                    2056         .byte       2
      000A66 32 2A                 2057         .ascii     "2*"
      000A68                       2058 CELLS:
      000A68 90 93            [ 1] 2059         LDW Y,X
      000A6A 90 FE            [ 2] 2060 	LDW Y,(Y)
      000A6C 90 58            [ 2] 2061         SLAW Y
      000A6E FF               [ 2] 2062         LDW (X),Y
      000A6F 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;       1+      ( a -- a )
                                   2066 ;       Add cell size in byte to address.
      000A70 0A 65                 2067         .word      LINK
                           000A72  2068 LINK = . 
      000A72 02                    2069         .byte      2
      000A73 31 2B                 2070         .ascii     "1+"
      000A75                       2071 ONEP:
      000A75 90 93            [ 1] 2072         LDW Y,X
      000A77 90 FE            [ 2] 2073 	LDW Y,(Y)
      000A79 90 5C            [ 1] 2074         INCW Y
      000A7B FF               [ 2] 2075         LDW (X),Y
      000A7C 81               [ 4] 2076         RET
                                   2077 
                                   2078 ;       1-      ( a -- a )
                                   2079 ;       Subtract 2 from address.
      000A7D 0A 72                 2080         .word      LINK
                           000A7F  2081 LINK = . 
      000A7F 02                    2082         .byte      2
      000A80 31 2D                 2083         .ascii     "1-"
      000A82                       2084 ONEM:
      000A82 90 93            [ 1] 2085         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A84 90 FE            [ 2] 2086 	LDW Y,(Y)
      000A86 90 5A            [ 2] 2087         DECW Y
      000A88 FF               [ 2] 2088         LDW (X),Y
      000A89 81               [ 4] 2089         RET
                                   2090 
                                   2091 ;  shift left n times 
                                   2092 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000A8A 0A 7F                 2093         .word LINK 
                           000A8C  2094         LINK=.
      000A8C 06                    2095         .byte 6 
      000A8D 4C 53 48 49 46 54     2096         .ascii "LSHIFT"
      000A93                       2097 LSHIFT:
      000A93 E6 01            [ 1] 2098         ld a,(1,x)
      000A95 1C 00 02         [ 2] 2099         addw x,#CELLL 
      000A98 90 93            [ 1] 2100         ldw y,x 
      000A9A 90 FE            [ 2] 2101         ldw y,(y)
      000A9C                       2102 LSHIFT1:
      000A9C 4D               [ 1] 2103         tnz a 
      000A9D 27 05            [ 1] 2104         jreq LSHIFT4 
      000A9F 90 58            [ 2] 2105         sllw y 
      000AA1 4A               [ 1] 2106         dec a 
      000AA2 20 F8            [ 2] 2107         jra LSHIFT1 
      000AA4                       2108 LSHIFT4:
      000AA4 FF               [ 2] 2109         ldw (x),y 
      000AA5 81               [ 4] 2110         ret 
                                   2111 
                                   2112 ; shift right n times                 
                                   2113 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AA6 0A 8C                 2114         .word LINK 
                           000AA8  2115         LINK=.
      000AA8 06                    2116         .byte 6
      000AA9 52 53 48 49 46 54     2117         .ascii "RSHIFT"
      000AAF                       2118 RSHIFT:
      000AAF E6 01            [ 1] 2119         ld a,(1,x)
      000AB1 1C 00 02         [ 2] 2120         addw x,#CELLL 
      000AB4 90 93            [ 1] 2121         ldw y,x 
      000AB6 90 FE            [ 2] 2122         ldw y,(y)
      000AB8                       2123 RSHIFT1:
      000AB8 4D               [ 1] 2124         tnz a 
      000AB9 27 05            [ 1] 2125         jreq RSHIFT4 
      000ABB 90 54            [ 2] 2126         srlw y 
      000ABD 4A               [ 1] 2127         dec a 
      000ABE 20 F8            [ 2] 2128         jra RSHIFT1 
      000AC0                       2129 RSHIFT4:
      000AC0 FF               [ 2] 2130         ldw (x),y 
      000AC1 81               [ 4] 2131         ret 
                                   2132 
                                   2133 
                                   2134 ;       2/      ( n -- n )
                                   2135 ;       divide  tos by 2.
      000AC2 0A A8                 2136         .word      LINK
                           000AC4  2137 LINK = . 
      000AC4 02                    2138         .byte      2
      000AC5 32 2F                 2139         .ascii     "2/"
      000AC7                       2140 TWOSL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC7 90 93            [ 1] 2141         LDW Y,X
      000AC9 90 FE            [ 2] 2142 	LDW Y,(Y)
      000ACB 90 57            [ 2] 2143         SRAW Y
      000ACD FF               [ 2] 2144         LDW (X),Y
      000ACE 81               [ 4] 2145         RET
                                   2146 
                                   2147 ;       BL      ( -- 32 )
                                   2148 ;       Return 32,  blank character.
      000ACF 0A C4                 2149         .word      LINK
                           000AD1  2150 LINK = . 
      000AD1 02                    2151         .byte      2
      000AD2 42 4C                 2152         .ascii     "BL"
      000AD4                       2153 BLANK:
      000AD4 1D 00 02         [ 2] 2154         SUBW X,#2
      000AD7 90 AE 00 20      [ 2] 2155 	LDW Y,#32
      000ADB FF               [ 2] 2156         LDW (X),Y
      000ADC 81               [ 4] 2157         RET
                                   2158 
                                   2159 ;         0     ( -- 0)
                                   2160 ;         Return 0.
      000ADD 0A D1                 2161         .word      LINK
                           000ADF  2162 LINK = . 
      000ADF 01                    2163         .byte       1
      000AE0 30                    2164         .ascii     "0"
      000AE1                       2165 ZERO:
      000AE1 1D 00 02         [ 2] 2166         SUBW X,#2
      000AE4 90 5F            [ 1] 2167 	CLRW Y
      000AE6 FF               [ 2] 2168         LDW (X),Y
      000AE7 81               [ 4] 2169         RET
                                   2170 
                                   2171 ;         1     ( -- 1)
                                   2172 ;         Return 1.
      000AE8 0A DF                 2173         .word      LINK
                           000AEA  2174 LINK = . 
      000AEA 01                    2175         .byte       1
      000AEB 31                    2176         .ascii     "1"
      000AEC                       2177 ONE:
      000AEC 1D 00 02         [ 2] 2178         SUBW X,#2
      000AEF 90 AE 00 01      [ 2] 2179 	LDW Y,#1
      000AF3 FF               [ 2] 2180         LDW (X),Y
      000AF4 81               [ 4] 2181         RET
                                   2182 
                                   2183 ;         -1    ( -- -1)
                                   2184 ;         Return 32,  blank character.
      000AF5 0A EA                 2185         .word      LINK
                           000AF7  2186 LINK = . 
      000AF7 02                    2187         .byte       2
      000AF8 2D 31                 2188         .ascii     "-1"
      000AFA                       2189 MONE:
      000AFA 1D 00 02         [ 2] 2190         SUBW X,#2
      000AFD 90 AE FF FF      [ 2] 2191 	LDW Y,#0xFFFF
      000B01 FF               [ 2] 2192         LDW (X),Y
      000B02 81               [ 4] 2193         RET
                                   2194 
                                   2195 ;       >CHAR   ( c -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2196 ;       Filter non-printing characters.
      000B03 0A F7                 2197         .word      LINK
                           000B05  2198 LINK = . 
      000B05 05                    2199         .byte      5
      000B06 3E 43 48 41 52        2200         .ascii     ">CHAR"
      000B0B                       2201 TCHAR:
      000B0B E6 01            [ 1] 2202         ld a,(1,x)
      000B0D A1 20            [ 1] 2203         cp a,#32  
      000B0F 2B 05            [ 1] 2204         jrmi 1$ 
      000B11 A1 7F            [ 1] 2205         cp a,#127 
      000B13 2A 01            [ 1] 2206         jrpl 1$ 
      000B15 81               [ 4] 2207         ret 
      000B16 A6 5F            [ 1] 2208 1$:     ld a,#'_ 
      000B18 E7 01            [ 1] 2209         ld (1,x),a 
      000B1A 81               [ 4] 2210         ret 
                                   2211 
                                   2212 ;       DEPTH   ( -- n )
                                   2213 ;       Return  depth of  data stack.
      000B1B 0B 05                 2214         .word      LINK
                           000B1D  2215 LINK = . 
      000B1D 05                    2216         .byte      5
      000B1E 44 45 50 54 48        2217         .ascii     "DEPTH"
      000B23                       2218 DEPTH: 
      000B23 90 BE 2A         [ 2] 2219         LDW Y,SP0    ;save data stack ptr
      000B26 BF 22            [ 2] 2220 	LDW XTEMP,X
      000B28 72 B2 00 22      [ 2] 2221         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B2C 90 57            [ 2] 2222         SRAW Y    ;Y = #stack items
      000B2E 1D 00 02         [ 2] 2223 	SUBW X,#2
      000B31 FF               [ 2] 2224         LDW (X),Y     ; if neg, underflow
      000B32 81               [ 4] 2225         RET
                                   2226 
                                   2227 ;       PICK    ( ... +n -- ... w )
                                   2228 ;       Copy  nth stack item to tos.
      000B33 0B 1D                 2229         .word      LINK
                           000B35  2230 LINK = . 
      000B35 04                    2231         .byte      4
      000B36 50 49 43 4B           2232         .ascii     "PICK"
      000B3A                       2233 PICK:
      000B3A 90 93            [ 1] 2234         LDW Y,X   ;D = n1
      000B3C 90 FE            [ 2] 2235         LDW Y,(Y)
                                   2236 ; modified for standard compliance          
                                   2237 ; 0 PICK must be equivalent to DUP 
      000B3E 90 5C            [ 1] 2238         INCW Y 
      000B40 90 58            [ 2] 2239         SLAW Y
      000B42 BF 22            [ 2] 2240         LDW XTEMP,X
      000B44 72 B9 00 22      [ 2] 2241         ADDW Y,XTEMP
      000B48 90 FE            [ 2] 2242         LDW Y,(Y)
      000B4A FF               [ 2] 2243         LDW (X),Y
      000B4B 81               [ 4] 2244         RET
                                   2245 
                                   2246 ;; Memory access
                                   2247 
                                   2248 ;       +!      ( n a -- )
                                   2249 ;       Add n to  contents at address a.
      000B4C 0B 35                 2250         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           000B4E  2251 LINK = . 
      000B4E 02                    2252         .byte      2
      000B4F 2B 21                 2253         .ascii     "+!"
      000B51                       2254 PSTOR:
      000B51 90 93            [ 1] 2255         ldw y,x 
      000B53 90 FE            [ 2] 2256         ldw y,(y)
      000B55 90 BF 24         [ 2] 2257         ldw YTEMP,y  ; address
      000B58 90 FE            [ 2] 2258         ldw y,(y)  
      000B5A 90 89            [ 2] 2259         pushw y  ; value at address 
      000B5C 90 93            [ 1] 2260         ldw y,x 
      000B5E 90 EE 02         [ 2] 2261         ldw y,(2,y) ; n 
      000B61 72 F9 01         [ 2] 2262         addw y,(1,sp) ; n+value
      000B64 91 CF 24         [ 5] 2263         ldw [YTEMP],y ;  a!
      000B67 90 85            [ 2] 2264         popw y    ;drop local var
      000B69 1C 00 04         [ 2] 2265         addw x,#4 ; DDROP 
      000B6C 81               [ 4] 2266         ret 
                                   2267 
                                   2268 ;       2!      ( d a -- )
                                   2269 ;       Store  double integer to address a.
      000B6D 0B 4E                 2270         .word      LINK
                           000B6F  2271 LINK = . 
      000B6F 02                    2272         .byte      2
      000B70 32 21                 2273         .ascii     "2!"
      000B72                       2274 DSTOR:
      000B72 90 93            [ 1] 2275         ldw y,x 
      000B74 90 FE            [ 2] 2276         ldw y,(y)
      000B76 90 BF 24         [ 2] 2277         ldw YTEMP,y ; address 
      000B79 1C 00 02         [ 2] 2278         addw x,#CELLL ; drop a 
      000B7C 90 93            [ 1] 2279         ldw y,x 
      000B7E 90 FE            [ 2] 2280         ldw y,(y) ; hi word 
      000B80 89               [ 2] 2281         pushw x 
      000B81 EE 02            [ 2] 2282         ldw x,(2,x) ; lo word 
      000B83 91 CF 24         [ 5] 2283         ldw [YTEMP],y
      000B86 90 93            [ 1] 2284         ldw y,x 
      000B88 AE 00 02         [ 2] 2285         ldw x,#2 
      000B8B 92 DF 24         [ 5] 2286         ldw ([YTEMP],x),y 
      000B8E 85               [ 2] 2287         popw x 
      000B8F 1C 00 04         [ 2] 2288         addw x,#4 ; DDROP 
      000B92 81               [ 4] 2289         ret 
                                   2290 
                                   2291 ;       2@      ( a -- d )
                                   2292 ;       Fetch double integer from address a.
      000B93 0B 6F                 2293         .word      LINK
                           000B95  2294 LINK = . 
      000B95 02                    2295         .byte      2
      000B96 32 40                 2296         .ascii     "2@"
      000B98                       2297 DAT:
      000B98 90 93            [ 1] 2298         ldw y,x 
      000B9A 90 FE            [ 2] 2299         ldw y,(y) ;address 
      000B9C 90 BF 24         [ 2] 2300         ldw YTEMP,y 
      000B9F 1D 00 02         [ 2] 2301         subw x,#CELLL ; space for udh 
      000BA2 91 CE 24         [ 5] 2302         ldw y,[YTEMP] ; udh 
      000BA5 FF               [ 2] 2303         ldw (x),y 
      000BA6 90 AE 00 02      [ 2] 2304         ldw y,#2
      000BAA 91 DE 24         [ 5] 2305         ldw y,([YTEMP],y) ; udl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BAD EF 02            [ 2] 2306         ldw (2,x),y
      000BAF 81               [ 4] 2307         ret 
                                   2308 
                                   2309 ;       COUNT   ( b -- b +n )
                                   2310 ;       Return count byte of a string
                                   2311 ;       and add 1 to byte address.
      000BB0 0B 95                 2312         .word      LINK
                           000BB2  2313 LINK = . 
      000BB2 05                    2314         .byte      5
      000BB3 43 4F 55 4E 54        2315         .ascii     "COUNT"
      000BB8                       2316 COUNT:
      000BB8 90 93            [ 1] 2317         ldw y,x 
      000BBA 90 FE            [ 2] 2318         ldw y,(y) ; address 
      000BBC 90 F6            [ 1] 2319         ld a,(y)  ; count 
      000BBE 90 5C            [ 1] 2320         incw y 
      000BC0 FF               [ 2] 2321         ldw (x),y 
      000BC1 1D 00 02         [ 2] 2322         subw x,#CELLL 
      000BC4 E7 01            [ 1] 2323         ld (1,x),a 
      000BC6 7F               [ 1] 2324         clr (x)
      000BC7 81               [ 4] 2325         ret 
                                   2326 
                                   2327 ;       HERE    ( -- a )
                                   2328 ;       Return  top of  variables
      000BC8 0B B2                 2329         .word      LINK
                           000BCA  2330 LINK = . 
      000BCA 04                    2331         .byte      4
      000BCB 48 45 52 45           2332         .ascii     "HERE"
      000BCF                       2333 HERE:
      000BCF 90 AE 00 16      [ 2] 2334       	ldw y,#UVP 
      000BD3 90 FE            [ 2] 2335         ldw y,(y)
      000BD5 1D 00 02         [ 2] 2336         subw x,#CELLL 
      000BD8 FF               [ 2] 2337         ldw (x),y 
      000BD9 81               [ 4] 2338         ret 
                                   2339 
                                   2340 ;       PAD     ( -- a )
                                   2341 ;       Return address of text buffer
                                   2342 ;       above  code dictionary.
      000BDA 0B CA                 2343         .word      LINK
                           000BDC  2344 LINK = . 
      000BDC 03                    2345         .byte      3
      000BDD 50 41 44              2346         .ascii     "PAD"
      000BE0                       2347 PAD:
      000BE0 CD 0B CF         [ 4] 2348         CALL     HERE
      000BE3 CD 04 75         [ 4] 2349         CALL     DOLIT
      000BE6 00 50                 2350         .word      80
      000BE8 CC 07 95         [ 2] 2351         JP     PLUS
                                   2352 
                                   2353 ;       TIB     ( -- a )
                                   2354 ;       Return address of terminal input buffer.
      000BEB 0B DC                 2355         .word      LINK
                           000BED  2356 LINK = . 
      000BED 03                    2357         .byte      3
      000BEE 54 49 42              2358         .ascii     "TIB"
      000BF1                       2359 TIB:
      000BF1 CD 06 85         [ 4] 2360         CALL     NTIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BF4 CD 0A 4A         [ 4] 2361         CALL     CELLP
      000BF7 CC 04 F3         [ 2] 2362         JP     AT
                                   2363 
                                   2364 ;       @EXECUTE        ( a -- )
                                   2365 ;       Execute vector stored in address a.
      000BFA 0B ED                 2366         .word      LINK
                           000BFC  2367 LINK = . 
      000BFC 08                    2368         .byte      8
      000BFD 40 45 58 45 43 55 54  2369         .ascii     "@EXECUTE"
             45
      000C05                       2370 ATEXE:
      000C05 CD 04 F3         [ 4] 2371         CALL     AT
      000C08 CD 07 44         [ 4] 2372         CALL     QDUP    ;?address or zero
      000C0B CD 04 A8         [ 4] 2373         CALL     QBRAN
      000C0E 0C 13                 2374         .word      EXE1
      000C10 CD 04 CF         [ 4] 2375         CALL     EXECU   ;execute if non-zero
      000C13 81               [ 4] 2376 EXE1:   RET     ;do nothing if zero
                                   2377 
                                   2378 ;       CMOVE   ( b1 b2 u -- )
                                   2379 ;       Copy u bytes from b1 to b2.
      000C14 0B FC                 2380         .word      LINK
                           000C16  2381 LINK = . 
      000C16 05                    2382         .byte      5
      000C17 43 4D 4F 56 45        2383         .ascii     "CMOVE"
      000C1C                       2384 CMOVE:
      000C1C CD 05 63         [ 4] 2385         CALL	TOR
      000C1F CD 04 BF         [ 4] 2386         CALL	BRAN
      000C22 0C 3C                 2387         .word	CMOV2
      000C24 CD 05 63         [ 4] 2388 CMOV1:	CALL	TOR
      000C27 CD 05 9A         [ 4] 2389         CALL	DUPP
      000C2A CD 05 11         [ 4] 2390         CALL	CAT
      000C2D CD 05 57         [ 4] 2391         CALL	RAT
      000C30 CD 05 00         [ 4] 2392         CALL	CSTOR
      000C33 CD 0A 75         [ 4] 2393         CALL	ONEP
      000C36 CD 05 44         [ 4] 2394         CALL	RFROM
      000C39 CD 0A 75         [ 4] 2395         CALL	ONEP
      000C3C CD 04 89         [ 4] 2396 CMOV2:	CALL	DONXT
      000C3F 0C 24                 2397         .word	CMOV1
      000C41 CC 07 75         [ 2] 2398         JP	DDROP
                                   2399 
                                   2400 ;       FILL    ( b u c -- )
                                   2401 ;       Fill u bytes of character c
                                   2402 ;       to area beginning at b.
      000C44 0C 16                 2403         .word       LINK
                           000C46  2404 LINK = . 
      000C46 04                    2405         .byte       4
      000C47 46 49 4C 4C           2406         .ascii     "FILL"
      000C4B                       2407 FILL:
      000C4B 90 93            [ 1] 2408         ldw y,x 
      000C4D 90 E6 01         [ 1] 2409         ld a,(1,y) ; c 
      000C50 1C 00 02         [ 2] 2410         addw x,#CELLL ; drop c 
      000C53 90 93            [ 1] 2411         ldw y,x 
      000C55 90 FE            [ 2] 2412         ldw y,(y) ; count
      000C57 90 89            [ 2] 2413         pushw y 
      000C59 1C 00 02         [ 2] 2414         addw x,#CELLL ; drop u 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C5C 90 93            [ 1] 2415         ldw y,x 
      000C5E 1C 00 02         [ 2] 2416         addw x,#CELLL ; drop b 
      000C61 90 FE            [ 2] 2417         ldw y,(y) ; address
      000C63 90 BF 24         [ 2] 2418         ldw YTEMP,y
      000C66 90 85            [ 2] 2419         popw y ; count 
      000C68                       2420 FILL1:  
      000C68 92 C7 24         [ 4] 2421         ld [YTEMP],a 
      000C6B 3C 25            [ 1] 2422         inc YTEMP+1
      000C6D 24 02            [ 1] 2423         jrnc FILL2 
      000C6F 3C 24            [ 1] 2424         inc YTEMP
      000C71                       2425 FILL2: 
      000C71 90 5A            [ 2] 2426         decw y ; count 
      000C73 26 F3            [ 1] 2427         jrne FILL1  
      000C75 81               [ 4] 2428         ret 
                                   2429 
                                   2430 ;       ERASE   ( b u -- )
                                   2431 ;       Erase u bytes beginning at b.
      000C76 0C 46                 2432         .word      LINK
                           000C78  2433 LINK = . 
      000C78 05                    2434         .byte      5
      000C79 45 52 41 53 45        2435         .ascii     "ERASE"
      000C7E                       2436 ERASE:
      000C7E 90 5F            [ 1] 2437         clrw y 
      000C80 1D 00 02         [ 2] 2438         subw x,#CELLL 
      000C83 FF               [ 2] 2439         ldw (x),y 
      000C84 CC 0C 4B         [ 2] 2440         jp FILL 
                                   2441 
                                   2442 
                                   2443 ;       PACK0   ( b u a -- a )
                                   2444 ;       Build a counted string with
                                   2445 ;       u characters from b. Null fill.
      000C87 0C 78                 2446         .word      LINK
                           000C89  2447 LINK = . 
      000C89 05                    2448         .byte      5
      000C8A 50 41 43 4B 30        2449         .ascii     "PACK0"
      000C8F                       2450 PACKS:
      000C8F CD 05 9A         [ 4] 2451         CALL     DUPP
      000C92 CD 05 63         [ 4] 2452         CALL     TOR     ;strings only on cell boundary
      000C95 CD 07 80         [ 4] 2453         CALL     DDUP
      000C98 CD 05 00         [ 4] 2454         CALL     CSTOR
      000C9B CD 0A 75         [ 4] 2455         CALL     ONEP ;save count
      000C9E CD 05 AA         [ 4] 2456         CALL     SWAPP
      000CA1 CD 0C 1C         [ 4] 2457         CALL     CMOVE
      000CA4 CD 05 44         [ 4] 2458         CALL     RFROM
      000CA7 81               [ 4] 2459         RET
                                   2460 
                                   2461 ;; Numeric output, single precision
                                   2462 
                                   2463 ;       DIGIT   ( u -- c )
                                   2464 ;       Convert digit u to a character.
      000CA8 0C 89                 2465         .word      LINK
                           000CAA  2466 LINK = . 
      000CAA 05                    2467         .byte      5
      000CAB 44 49 47 49 54        2468         .ascii     "DIGIT"
      000CB0                       2469 DIGIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CB0 CD 04 75         [ 4] 2470         CALL	DOLIT
      000CB3 00 09                 2471         .word	9
      000CB5 CD 05 C4         [ 4] 2472         CALL	OVER
      000CB8 CD 08 73         [ 4] 2473         CALL	LESS
      000CBB CD 04 75         [ 4] 2474         CALL	DOLIT
      000CBE 00 07                 2475         .word	7
      000CC0 CD 05 E6         [ 4] 2476         CALL	ANDD
      000CC3 CD 07 95         [ 4] 2477         CALL	PLUS
      000CC6 CD 04 75         [ 4] 2478         CALL	DOLIT
      000CC9 00 30                 2479         .word	48	;'0'
      000CCB CC 07 95         [ 2] 2480         JP	PLUS
                                   2481 
                                   2482 ;       EXTRACT ( n base -- n c )
                                   2483 ;       Extract least significant digit from n.
      000CCE 0C AA                 2484         .word      LINK
                           000CD0  2485 LINK = . 
      000CD0 07                    2486         .byte      7
      000CD1 45 58 54 52 41 43 54  2487         .ascii     "EXTRACT"
      000CD8                       2488 EXTRC:
      000CD8 CD 0A E1         [ 4] 2489         CALL     ZERO
      000CDB CD 05 AA         [ 4] 2490         CALL     SWAPP
      000CDE CD 08 EB         [ 4] 2491         CALL     UMMOD
      000CE1 CD 05 AA         [ 4] 2492         CALL     SWAPP
      000CE4 CC 0C B0         [ 2] 2493         JP     DIGIT
                                   2494 
                                   2495 ;       <#      ( -- )
                                   2496 ;       Initiate  numeric output process.
      000CE7 0C D0                 2497         .word      LINK
                           000CE9  2498 LINK = . 
      000CE9 02                    2499         .byte      2
      000CEA 3C 23                 2500         .ascii     "<#"
      000CEC                       2501 BDIGS:
      000CEC CD 0B E0         [ 4] 2502         CALL     PAD
      000CEF CD 06 C7         [ 4] 2503         CALL     HLD
      000CF2 CC 04 DC         [ 2] 2504         JP     STORE
                                   2505 
                                   2506 ;       HOLD    ( c -- )
                                   2507 ;       Insert a character into output string.
      000CF5 0C E9                 2508         .word      LINK
                           000CF7  2509 LINK = . 
      000CF7 04                    2510         .byte      4
      000CF8 48 4F 4C 44           2511         .ascii     "HOLD"
      000CFC                       2512 HOLD:
      000CFC CD 06 C7         [ 4] 2513         CALL     HLD
      000CFF CD 04 F3         [ 4] 2514         CALL     AT
      000D02 CD 0A 82         [ 4] 2515         CALL     ONEM
      000D05 CD 05 9A         [ 4] 2516         CALL     DUPP
      000D08 CD 06 C7         [ 4] 2517         CALL     HLD
      000D0B CD 04 DC         [ 4] 2518         CALL     STORE
      000D0E CC 05 00         [ 2] 2519         JP     CSTOR
                                   2520 
                                   2521 ;       #       ( u -- u )
                                   2522 ;       Extract one digit from u and
                                   2523 ;       append digit to output string.
      000D11 0C F7                 2524         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000D13  2525 LINK = . 
      000D13 01                    2526         .byte      1
      000D14 23                    2527         .ascii     "#"
      000D15                       2528 DIG:
      000D15 CD 06 57         [ 4] 2529         CALL     BASE
      000D18 CD 04 F3         [ 4] 2530         CALL     AT
      000D1B CD 0C D8         [ 4] 2531         CALL     EXTRC
      000D1E CC 0C FC         [ 2] 2532         JP     HOLD
                                   2533 
                                   2534 ;       #S      ( u -- 0 )
                                   2535 ;       Convert u until all digits
                                   2536 ;       are added to output string.
      000D21 0D 13                 2537         .word      LINK
                           000D23  2538 LINK = . 
      000D23 02                    2539         .byte      2
      000D24 23 53                 2540         .ascii     "#S"
      000D26                       2541 DIGS:
      000D26 CD 0D 15         [ 4] 2542 DIGS1:  CALL     DIG
      000D29 CD 05 9A         [ 4] 2543         CALL     DUPP
      000D2C CD 04 A8         [ 4] 2544         CALL     QBRAN
      000D2F 0D 33                 2545         .word      DIGS2
      000D31 20 F3            [ 2] 2546         JRA     DIGS1
      000D33 81               [ 4] 2547 DIGS2:  RET
                                   2548 
                                   2549 ;       SIGN    ( n -- )
                                   2550 ;       Add a minus sign to
                                   2551 ;       numeric output string.
      000D34 0D 23                 2552         .word      LINK
                           000D36  2553 LINK = . 
      000D36 04                    2554         .byte      4
      000D37 53 49 47 4E           2555         .ascii     "SIGN"
      000D3B                       2556 SIGN:
      000D3B CD 05 D3         [ 4] 2557         CALL     ZLESS
      000D3E CD 04 A8         [ 4] 2558         CALL     QBRAN
      000D41 0D 4B                 2559         .word      SIGN1
      000D43 CD 04 75         [ 4] 2560         CALL     DOLIT
      000D46 00 2D                 2561         .word      45	;"-"
      000D48 CC 0C FC         [ 2] 2562         JP     HOLD
      000D4B 81               [ 4] 2563 SIGN1:  RET
                                   2564 
                                   2565 ;       #>      ( w -- b u )
                                   2566 ;       Prepare output string.
      000D4C 0D 36                 2567         .word      LINK
                           000D4E  2568 LINK = . 
      000D4E 02                    2569         .byte      2
      000D4F 23 3E                 2570         .ascii     "#>"
      000D51                       2571 EDIGS:
      000D51 CD 05 90         [ 4] 2572         CALL     DROP
      000D54 CD 06 C7         [ 4] 2573         CALL     HLD
      000D57 CD 04 F3         [ 4] 2574         CALL     AT
      000D5A CD 0B E0         [ 4] 2575         CALL     PAD
      000D5D CD 05 C4         [ 4] 2576         CALL     OVER
      000D60 CC 08 0E         [ 2] 2577         JP     SUBB
                                   2578 
                                   2579 ;       str     ( w -- b u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2580 ;       Convert a signed integer
                                   2581 ;       to a numeric string.
      000D63 0D 4E                 2582         .word      LINK
                           000D65  2583 LINK = . 
      000D65 03                    2584         .byte      3
      000D66 53 54 52              2585         .ascii     "STR"
      000D69                       2586 STR:
      000D69 CD 05 9A         [ 4] 2587         CALL     DUPP
      000D6C CD 05 63         [ 4] 2588         CALL     TOR
      000D6F CD 08 28         [ 4] 2589         CALL     ABSS
      000D72 CD 0C EC         [ 4] 2590         CALL     BDIGS
      000D75 CD 0D 26         [ 4] 2591         CALL     DIGS
      000D78 CD 05 44         [ 4] 2592         CALL     RFROM
      000D7B CD 0D 3B         [ 4] 2593         CALL     SIGN
      000D7E CC 0D 51         [ 2] 2594         JP     EDIGS
                                   2595 
                                   2596 ;       HEX     ( -- )
                                   2597 ;       Use radix 16 as base for
                                   2598 ;       numeric conversions.
      000D81 0D 65                 2599         .word      LINK
                           000D83  2600 LINK = . 
      000D83 03                    2601         .byte      3
      000D84 48 45 58              2602         .ascii     "HEX"
      000D87                       2603 HEX:
      000D87 CD 04 75         [ 4] 2604         CALL     DOLIT
      000D8A 00 10                 2605         .word      16
      000D8C CD 06 57         [ 4] 2606         CALL     BASE
      000D8F CC 04 DC         [ 2] 2607         JP     STORE
                                   2608 
                                   2609 ;       DECIMAL ( -- )
                                   2610 ;       Use radix 10 as base
                                   2611 ;       for numeric conversions.
      000D92 0D 83                 2612         .word      LINK
                           000D94  2613 LINK = . 
      000D94 07                    2614         .byte      7
      000D95 44 45 43 49 4D 41 4C  2615         .ascii     "DECIMAL"
      000D9C                       2616 DECIM:
      000D9C CD 04 75         [ 4] 2617         CALL     DOLIT
      000D9F 00 0A                 2618         .word      10
      000DA1 CD 06 57         [ 4] 2619         CALL     BASE
      000DA4 CC 04 DC         [ 2] 2620         JP     STORE
                                   2621 
                                   2622 ;; Numeric input, single precision
                                   2623 
                                   2624 ;       DIGIT?  ( c base -- u t )
                                   2625 ;       Convert a character to its numeric
                                   2626 ;       value. A flag indicates success.
      000DA7 0D 94                 2627         .word      LINK
                           000DA9  2628 LINK = . 
      000DA9 06                    2629         .byte       6
      000DAA 44 49 47 49 54 3F     2630         .ascii     "DIGIT?"
      000DB0                       2631 DIGTQ:
      000DB0 CD 05 63         [ 4] 2632         CALL     TOR
      000DB3 CD 04 75         [ 4] 2633         CALL     DOLIT
      000DB6 00 30                 2634         .word     48	; "0"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000DB8 CD 08 0E         [ 4] 2635         CALL     SUBB
      000DBB CD 04 75         [ 4] 2636         CALL     DOLIT
      000DBE 00 09                 2637         .word      9
      000DC0 CD 05 C4         [ 4] 2638         CALL     OVER
      000DC3 CD 08 73         [ 4] 2639         CALL     LESS
      000DC6 CD 04 A8         [ 4] 2640         CALL     QBRAN
      000DC9 0D E1                 2641         .word      DGTQ1
      000DCB CD 04 75         [ 4] 2642         CALL     DOLIT
      000DCE 00 07                 2643         .word      7
      000DD0 CD 08 0E         [ 4] 2644         CALL     SUBB
      000DD3 CD 05 9A         [ 4] 2645         CALL     DUPP
      000DD6 CD 04 75         [ 4] 2646         CALL     DOLIT
      000DD9 00 0A                 2647         .word      10
      000DDB CD 08 73         [ 4] 2648         CALL     LESS
      000DDE CD 05 FA         [ 4] 2649         CALL     ORR
      000DE1 CD 05 9A         [ 4] 2650 DGTQ1:  CALL     DUPP
      000DE4 CD 05 44         [ 4] 2651         CALL     RFROM
      000DE7 CC 08 55         [ 2] 2652         JP     ULESS
                                   2653 
                                   2654 ;       NUMBER? ( a -- n T | a F )
                                   2655 ;       Convert a number string to
                                   2656 ;       integer. Push a flag on tos.
      000DEA 0D A9                 2657         .word      LINK
                           000DEC  2658 LINK = . 
      000DEC 07                    2659         .byte      7
      000DED 4E 55 4D 42 45 52 3F  2660         .ascii     "NUMBER?"
      000DF4                       2661 NUMBQ:
      000DF4 CD 06 57         [ 4] 2662         CALL     BASE
      000DF7 CD 04 F3         [ 4] 2663         CALL     AT
      000DFA CD 05 63         [ 4] 2664         CALL     TOR
      000DFD CD 0A E1         [ 4] 2665         CALL     ZERO
      000E00 CD 05 C4         [ 4] 2666         CALL     OVER
      000E03 CD 0B B8         [ 4] 2667         CALL     COUNT
      000E06 CD 05 C4         [ 4] 2668         CALL     OVER
      000E09 CD 05 11         [ 4] 2669         CALL     CAT
      000E0C CD 04 75         [ 4] 2670         CALL     DOLIT
      000E0F 00 24                 2671         .word     36	; "0x"
      000E11 CD 08 36         [ 4] 2672         CALL     EQUAL
      000E14 CD 04 A8         [ 4] 2673         CALL     QBRAN
      000E17 0E 28                 2674         .word      NUMQ1
      000E19 CD 0D 87         [ 4] 2675         CALL     HEX
      000E1C CD 05 AA         [ 4] 2676         CALL     SWAPP
      000E1F CD 0A 75         [ 4] 2677         CALL     ONEP
      000E22 CD 05 AA         [ 4] 2678         CALL     SWAPP
      000E25 CD 0A 82         [ 4] 2679         CALL     ONEM
      000E28 CD 05 C4         [ 4] 2680 NUMQ1:  CALL     OVER
      000E2B CD 05 11         [ 4] 2681         CALL     CAT
      000E2E CD 04 75         [ 4] 2682         CALL     DOLIT
      000E31 00 2D                 2683         .word     45	; "-"
      000E33 CD 08 36         [ 4] 2684         CALL     EQUAL
      000E36 CD 05 63         [ 4] 2685         CALL     TOR
      000E39 CD 05 AA         [ 4] 2686         CALL     SWAPP
      000E3C CD 05 57         [ 4] 2687         CALL     RAT
      000E3F CD 08 0E         [ 4] 2688         CALL     SUBB
      000E42 CD 05 AA         [ 4] 2689         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E45 CD 05 57         [ 4] 2690         CALL     RAT
      000E48 CD 07 95         [ 4] 2691         CALL     PLUS
      000E4B CD 07 44         [ 4] 2692         CALL     QDUP
      000E4E CD 04 A8         [ 4] 2693         CALL     QBRAN
      000E51 0E B2                 2694         .word      NUMQ6
      000E53 CD 0A 82         [ 4] 2695         CALL     ONEM
      000E56 CD 05 63         [ 4] 2696         CALL     TOR
      000E59 CD 05 9A         [ 4] 2697 NUMQ2:  CALL     DUPP
      000E5C CD 05 63         [ 4] 2698         CALL     TOR
      000E5F CD 05 11         [ 4] 2699         CALL     CAT
      000E62 CD 06 57         [ 4] 2700         CALL     BASE
      000E65 CD 04 F3         [ 4] 2701         CALL     AT
      000E68 CD 0D B0         [ 4] 2702         CALL     DIGTQ
      000E6B CD 04 A8         [ 4] 2703         CALL     QBRAN
      000E6E 0E A0                 2704         .word      NUMQ4
      000E70 CD 05 AA         [ 4] 2705         CALL     SWAPP
      000E73 CD 06 57         [ 4] 2706         CALL     BASE
      000E76 CD 04 F3         [ 4] 2707         CALL     AT
      000E79 CD 09 F4         [ 4] 2708         CALL     STAR
      000E7C CD 07 95         [ 4] 2709         CALL     PLUS
      000E7F CD 05 44         [ 4] 2710         CALL     RFROM
      000E82 CD 0A 75         [ 4] 2711         CALL     ONEP
      000E85 CD 04 89         [ 4] 2712         CALL     DONXT
      000E88 0E 59                 2713         .word      NUMQ2
      000E8A CD 05 57         [ 4] 2714         CALL     RAT
      000E8D CD 05 AA         [ 4] 2715         CALL     SWAPP
      000E90 CD 05 90         [ 4] 2716         CALL     DROP
      000E93 CD 04 A8         [ 4] 2717         CALL     QBRAN
      000E96 0E 9B                 2718         .word      NUMQ3
      000E98 CD 07 C0         [ 4] 2719         CALL     NEGAT
      000E9B CD 05 AA         [ 4] 2720 NUMQ3:  CALL     SWAPP
      000E9E 20 0F            [ 2] 2721         JRA     NUMQ5
      000EA0 CD 05 44         [ 4] 2722 NUMQ4:  CALL     RFROM
      000EA3 CD 05 44         [ 4] 2723         CALL     RFROM
      000EA6 CD 07 75         [ 4] 2724         CALL     DDROP
      000EA9 CD 07 75         [ 4] 2725         CALL     DDROP
      000EAC CD 0A E1         [ 4] 2726         CALL     ZERO
      000EAF CD 05 9A         [ 4] 2727 NUMQ5:  CALL     DUPP
      000EB2 CD 05 44         [ 4] 2728 NUMQ6:  CALL     RFROM
      000EB5 CD 07 75         [ 4] 2729         CALL     DDROP
      000EB8 CD 05 44         [ 4] 2730         CALL     RFROM
      000EBB CD 06 57         [ 4] 2731         CALL     BASE
      000EBE CC 04 DC         [ 2] 2732         JP     STORE
                                   2733 
                                   2734 ;; Basic I/O
                                   2735 
                                   2736 ;       KEY     ( -- c )
                                   2737 ;       Wait for and return an
                                   2738 ;       input character.
      000EC1 0D EC                 2739         .word      LINK
                           000EC3  2740 LINK = . 
      000EC3 03                    2741         .byte      3
      000EC4 4B 45 59              2742         .ascii     "KEY"
      000EC7                       2743 KEY:
      000EC7 72 0B 52 30 FB   [ 2] 2744         btjf UART_SR,#UART_SR_RXNE,. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000ECC C6 52 31         [ 1] 2745         ld a,UART_DR 
      000ECF 1D 00 02         [ 2] 2746         subw x,#CELLL 
      000ED2 E7 01            [ 1] 2747         ld (1,x),a 
      000ED4 7F               [ 1] 2748         clr (x)
      000ED5 81               [ 4] 2749         ret 
                                   2750 
                                   2751 ;       NUF?    ( -- t )
                                   2752 ;       Return false if no input,
                                   2753 ;       else pause and if CR return true.
      000ED6 0E C3                 2754         .word      LINK
                           000ED8  2755 LINK = . 
      000ED8 04                    2756         .byte      4
      000ED9 4E 55 46 3F           2757         .ascii     "NUF?"
      000EDD                       2758 NUFQ:
      000EDD CD 04 16         [ 4] 2759         CALL     QKEY
      000EE0 CD 05 9A         [ 4] 2760         CALL     DUPP
      000EE3 CD 04 A8         [ 4] 2761         CALL     QBRAN
      000EE6 0E F6                 2762         .word    NUFQ1
      000EE8 CD 07 75         [ 4] 2763         CALL     DDROP
      000EEB CD 0E C7         [ 4] 2764         CALL     KEY
      000EEE CD 04 75         [ 4] 2765         CALL     DOLIT
      000EF1 00 0D                 2766         .word      CRR
      000EF3 CC 08 36         [ 2] 2767         JP     EQUAL
      000EF6 81               [ 4] 2768 NUFQ1:  RET
                                   2769 
                                   2770 ;       SPACE   ( -- )
                                   2771 ;       Send  blank character to
                                   2772 ;       output device.
      000EF7 0E D8                 2773         .word      LINK
                           000EF9  2774 LINK = . 
      000EF9 05                    2775         .byte      5
      000EFA 53 50 41 43 45        2776         .ascii     "SPACE"
      000EFF                       2777 SPACE:
      000EFF CD 0A D4         [ 4] 2778         CALL     BLANK
      000F02 CC 04 34         [ 2] 2779         JP     EMIT
                                   2780 
                                   2781 ;       SPACES  ( +n -- )
                                   2782 ;       Send n spaces to output device.
      000F05 0E F9                 2783         .word      LINK
                           000F07  2784 LINK = . 
      000F07 06                    2785         .byte      6
      000F08 53 50 41 43 45 53     2786         .ascii     "SPACES"
      000F0E                       2787 SPACS:
      000F0E CD 0A E1         [ 4] 2788         CALL     ZERO
      000F11 CD 08 93         [ 4] 2789         CALL     MAX
      000F14 CD 05 63         [ 4] 2790         CALL     TOR
      000F17 20 03            [ 2] 2791         JRA      CHAR2
      000F19 CD 0E FF         [ 4] 2792 CHAR1:  CALL     SPACE
      000F1C CD 04 89         [ 4] 2793 CHAR2:  CALL     DONXT
      000F1F 0F 19                 2794         .word    CHAR1
      000F21 81               [ 4] 2795         RET
                                   2796 
                                   2797 ;       TYPE    ( b u -- )
                                   2798 ;       Output u characters from b.
      000F22 0F 07                 2799         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                           000F24  2800 LINK = . 
      000F24 04                    2801         .byte      4
      000F25 54 59 50 45           2802         .ascii     "TYPE"
      000F29                       2803 TYPES:
      000F29 CD 05 63         [ 4] 2804         CALL     TOR
      000F2C 20 0C            [ 2] 2805         JRA     TYPE2
      000F2E CD 05 9A         [ 4] 2806 TYPE1:  CALL     DUPP
      000F31 CD 05 11         [ 4] 2807         CALL     CAT
      000F34 CD 04 34         [ 4] 2808         CALL     EMIT
      000F37 CD 0A 75         [ 4] 2809         CALL     ONEP
      000F3A CD 04 89         [ 4] 2810 TYPE2:  CALL     DONXT
      000F3D 0F 2E                 2811         .word      TYPE1
      000F3F CC 05 90         [ 2] 2812         JP     DROP
                                   2813 
                                   2814 ;       CR      ( -- )
                                   2815 ;       Output a carriage return
                                   2816 ;       and a line feed.
      000F42 0F 24                 2817         .word      LINK
                           000F44  2818 LINK = . 
      000F44 02                    2819         .byte      2
      000F45 43 52                 2820         .ascii     "CR"
      000F47                       2821 CR:
      000F47 CD 04 75         [ 4] 2822         CALL     DOLIT
      000F4A 00 0D                 2823         .word      CRR
      000F4C CD 04 34         [ 4] 2824         CALL     EMIT
      000F4F CD 04 75         [ 4] 2825         CALL     DOLIT
      000F52 00 0A                 2826         .word      LF
      000F54 CC 04 34         [ 2] 2827         JP     EMIT
                                   2828 
                                   2829 ;       do$     ( -- a )
                                   2830 ;       Return  address of a compiled
                                   2831 ;       string.
      000F57 0F 44                 2832         .word      LINK
                           000F59  2833 LINK = . 
      000F59 43                    2834 	.byte      COMPO+3
      000F5A 44 4F 24              2835         .ascii     "DO$"
      000F5D                       2836 DOSTR:
      000F5D CD 05 44         [ 4] 2837         CALL     RFROM
      000F60 CD 05 57         [ 4] 2838         CALL     RAT
      000F63 CD 05 44         [ 4] 2839         CALL     RFROM
      000F66 CD 0B B8         [ 4] 2840         CALL     COUNT
      000F69 CD 07 95         [ 4] 2841         CALL     PLUS
      000F6C CD 05 63         [ 4] 2842         CALL     TOR
      000F6F CD 05 AA         [ 4] 2843         CALL     SWAPP
      000F72 CD 05 63         [ 4] 2844         CALL     TOR
      000F75 81               [ 4] 2845         RET
                                   2846 
                                   2847 ;       $"|     ( -- a )
                                   2848 ;       Run time routine compiled by $".
                                   2849 ;       Return address of a compiled string.
      000F76 0F 59                 2850         .word      LINK
                           000F78  2851 LINK = . 
      000F78 43                    2852 	.byte      COMPO+3
      000F79 24 22 7C              2853         .byte     '$','"','|'
      000F7C                       2854 STRQP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F7C CD 0F 5D         [ 4] 2855         CALL     DOSTR
      000F7F 81               [ 4] 2856         RET
                                   2857 
                                   2858 ;       ."|     ( -- )
                                   2859 ;       Run time routine of ." .
                                   2860 ;       Output a compiled string.
      000F80 0F 78                 2861         .word      LINK
                           000F82  2862 LINK = . 
      000F82 43                    2863 	.byte      COMPO+3
      000F83 2E 22 7C              2864         .byte     '.','"','|'
      000F86                       2865 DOTQP:
      000F86 CD 0F 5D         [ 4] 2866         CALL     DOSTR
      000F89 CD 0B B8         [ 4] 2867         CALL     COUNT
      000F8C CC 0F 29         [ 2] 2868         JP     TYPES
                                   2869 
                                   2870 ;       .R      ( n +n -- )
                                   2871 ;       Display an integer in a field
                                   2872 ;       of n columns, right justified.
      000F8F 0F 82                 2873         .word      LINK
                           000F91  2874 LINK = . 
      000F91 02                    2875         .byte      2
      000F92 2E 52                 2876         .ascii     ".R"
      000F94                       2877 DOTR:
      000F94 CD 05 63         [ 4] 2878         CALL     TOR
      000F97 CD 0D 69         [ 4] 2879         CALL     STR
      000F9A CD 05 44         [ 4] 2880         CALL     RFROM
      000F9D CD 05 C4         [ 4] 2881         CALL     OVER
      000FA0 CD 08 0E         [ 4] 2882         CALL     SUBB
      000FA3 CD 0F 0E         [ 4] 2883         CALL     SPACS
      000FA6 CC 0F 29         [ 2] 2884         JP     TYPES
                                   2885 
                                   2886 ;       U.R     ( u +n -- )
                                   2887 ;       Display an unsigned integer
                                   2888 ;       in n column, right justified.
      000FA9 0F 91                 2889         .word      LINK
                           000FAB  2890 LINK = . 
      000FAB 03                    2891         .byte      3
      000FAC 55 2E 52              2892         .ascii     "U.R"
      000FAF                       2893 UDOTR:
      000FAF CD 05 63         [ 4] 2894         CALL     TOR
      000FB2 CD 0C EC         [ 4] 2895         CALL     BDIGS
      000FB5 CD 0D 26         [ 4] 2896         CALL     DIGS
      000FB8 CD 0D 51         [ 4] 2897         CALL     EDIGS
      000FBB CD 05 44         [ 4] 2898         CALL     RFROM
      000FBE CD 05 C4         [ 4] 2899         CALL     OVER
      000FC1 CD 08 0E         [ 4] 2900         CALL     SUBB
      000FC4 CD 0F 0E         [ 4] 2901         CALL     SPACS
      000FC7 CC 0F 29         [ 2] 2902         JP     TYPES
                                   2903 
                                   2904 ;       U.      ( u -- )
                                   2905 ;       Display an unsigned integer
                                   2906 ;       in free format.
      000FCA 0F AB                 2907         .word      LINK
                           000FCC  2908 LINK = . 
      000FCC 02                    2909         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FCD 55 2E                 2910         .ascii     "U."
      000FCF                       2911 UDOT:
      000FCF CD 0C EC         [ 4] 2912         CALL     BDIGS
      000FD2 CD 0D 26         [ 4] 2913         CALL     DIGS
      000FD5 CD 0D 51         [ 4] 2914         CALL     EDIGS
      000FD8 CD 0E FF         [ 4] 2915         CALL     SPACE
      000FDB CC 0F 29         [ 2] 2916         JP     TYPES
                                   2917 
                                   2918 ;       .       ( w -- )
                                   2919 ;       Display an integer in free
                                   2920 ;       format, preceeded by a space.
      000FDE 0F CC                 2921         .word      LINK
                           000FE0  2922 LINK = . 
      000FE0 01                    2923         .byte      1
      000FE1 2E                    2924         .ascii     "."
      000FE2                       2925 DOT:
      000FE2 CD 06 57         [ 4] 2926         CALL     BASE
      000FE5 CD 04 F3         [ 4] 2927         CALL     AT
      000FE8 CD 04 75         [ 4] 2928         CALL     DOLIT
      000FEB 00 0A                 2929         .word      10
      000FED CD 06 0F         [ 4] 2930         CALL     XORR    ;?decimal
      000FF0 CD 04 A8         [ 4] 2931         CALL     QBRAN
      000FF3 0F F8                 2932         .word      DOT1
      000FF5 CC 0F CF         [ 2] 2933         JP     UDOT
      000FF8 CD 0D 69         [ 4] 2934 DOT1:   CALL     STR
      000FFB CD 0E FF         [ 4] 2935         CALL     SPACE
      000FFE CC 0F 29         [ 2] 2936         JP     TYPES
                                   2937 
                                   2938 ;       ?       ( a -- )
                                   2939 ;       Display contents in memory cell.
      001001 0F E0                 2940         .word      LINK
                                   2941         
                           001003  2942 LINK = . 
      001003 01                    2943         .byte      1
      001004 3F                    2944         .ascii     "?"
      001005                       2945 QUEST:
      001005 CD 04 F3         [ 4] 2946         CALL     AT
      001008 CC 0F E2         [ 2] 2947         JP     DOT
                                   2948 
                                   2949 ;; Parsing
                                   2950 
                                   2951 ;       parse   ( b u c -- b u delta ; <string> )
                                   2952 ;       Scan string delimited by c.
                                   2953 ;       Return found string and its offset.
      00100B 10 03                 2954         .word      LINK
                           00100D  2955 LINK = . 
      00100D 05                    2956         .byte      5
      00100E 70 61 72 73 65        2957         .ascii     "parse"
      001013                       2958 PARS:
      001013 CD 06 66         [ 4] 2959         CALL     TEMP
      001016 CD 04 DC         [ 4] 2960         CALL     STORE
      001019 CD 05 C4         [ 4] 2961         CALL     OVER
      00101C CD 05 63         [ 4] 2962         CALL     TOR
      00101F CD 05 9A         [ 4] 2963         CALL     DUPP
      001022 CD 04 A8         [ 4] 2964         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001025 10 CB                 2965         .word    PARS8
      001027 CD 0A 82         [ 4] 2966         CALL     ONEM
      00102A CD 06 66         [ 4] 2967         CALL     TEMP
      00102D CD 04 F3         [ 4] 2968         CALL     AT
      001030 CD 0A D4         [ 4] 2969         CALL     BLANK
      001033 CD 08 36         [ 4] 2970         CALL     EQUAL
      001036 CD 04 A8         [ 4] 2971         CALL     QBRAN
      001039 10 6C                 2972         .word      PARS3
      00103B CD 05 63         [ 4] 2973         CALL     TOR
      00103E CD 0A D4         [ 4] 2974 PARS1:  CALL     BLANK
      001041 CD 05 C4         [ 4] 2975         CALL     OVER
      001044 CD 05 11         [ 4] 2976         CALL     CAT     ;skip leading blanks ONLY
      001047 CD 08 0E         [ 4] 2977         CALL     SUBB
      00104A CD 05 D3         [ 4] 2978         CALL     ZLESS
      00104D CD 07 AF         [ 4] 2979         CALL     INVER
      001050 CD 04 A8         [ 4] 2980         CALL     QBRAN
      001053 10 69                 2981         .word      PARS2
      001055 CD 0A 75         [ 4] 2982         CALL     ONEP
      001058 CD 04 89         [ 4] 2983         CALL     DONXT
      00105B 10 3E                 2984         .word      PARS1
      00105D CD 05 44         [ 4] 2985         CALL     RFROM
      001060 CD 05 90         [ 4] 2986         CALL     DROP
      001063 CD 0A E1         [ 4] 2987         CALL     ZERO
      001066 CC 05 9A         [ 2] 2988         JP     DUPP
      001069 CD 05 44         [ 4] 2989 PARS2:  CALL     RFROM
      00106C CD 05 C4         [ 4] 2990 PARS3:  CALL     OVER
      00106F CD 05 AA         [ 4] 2991         CALL     SWAPP
      001072 CD 05 63         [ 4] 2992         CALL     TOR
      001075 CD 06 66         [ 4] 2993 PARS4:  CALL     TEMP
      001078 CD 04 F3         [ 4] 2994         CALL     AT
      00107B CD 05 C4         [ 4] 2995         CALL     OVER
      00107E CD 05 11         [ 4] 2996         CALL     CAT
      001081 CD 08 0E         [ 4] 2997         CALL     SUBB    ;scan for delimiter
      001084 CD 06 66         [ 4] 2998         CALL     TEMP
      001087 CD 04 F3         [ 4] 2999         CALL     AT
      00108A CD 0A D4         [ 4] 3000         CALL     BLANK
      00108D CD 08 36         [ 4] 3001         CALL     EQUAL
      001090 CD 04 A8         [ 4] 3002         CALL     QBRAN
      001093 10 98                 3003         .word      PARS5
      001095 CD 05 D3         [ 4] 3004         CALL     ZLESS
      001098 CD 04 A8         [ 4] 3005 PARS5:  CALL     QBRAN
      00109B 10 AD                 3006         .word      PARS6
      00109D CD 0A 75         [ 4] 3007         CALL     ONEP
      0010A0 CD 04 89         [ 4] 3008         CALL     DONXT
      0010A3 10 75                 3009         .word      PARS4
      0010A5 CD 05 9A         [ 4] 3010         CALL     DUPP
      0010A8 CD 05 63         [ 4] 3011         CALL     TOR
      0010AB 20 0F            [ 2] 3012         JRA     PARS7
      0010AD CD 05 44         [ 4] 3013 PARS6:  CALL     RFROM
      0010B0 CD 05 90         [ 4] 3014         CALL     DROP
      0010B3 CD 05 9A         [ 4] 3015         CALL     DUPP
      0010B6 CD 0A 75         [ 4] 3016         CALL     ONEP
      0010B9 CD 05 63         [ 4] 3017         CALL     TOR
      0010BC CD 05 C4         [ 4] 3018 PARS7:  CALL     OVER
      0010BF CD 08 0E         [ 4] 3019         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010C2 CD 05 44         [ 4] 3020         CALL     RFROM
      0010C5 CD 05 44         [ 4] 3021         CALL     RFROM
      0010C8 CC 08 0E         [ 2] 3022         JP     SUBB
      0010CB CD 05 C4         [ 4] 3023 PARS8:  CALL     OVER
      0010CE CD 05 44         [ 4] 3024         CALL     RFROM
      0010D1 CC 08 0E         [ 2] 3025         JP     SUBB
                                   3026 
                                   3027 ;       PARSE   ( c -- b u ; <string> )
                                   3028 ;       Scan input stream and return
                                   3029 ;       counted string delimited by c.
      0010D4 10 0D                 3030         .word      LINK
                           0010D6  3031 LINK = . 
      0010D6 05                    3032         .byte      5
      0010D7 50 41 52 53 45        3033         .ascii     "PARSE"
      0010DC                       3034 PARSE:
      0010DC CD 05 63         [ 4] 3035         CALL     TOR
      0010DF CD 0B F1         [ 4] 3036         CALL     TIB
      0010E2 CD 06 75         [ 4] 3037         CALL     INN
      0010E5 CD 04 F3         [ 4] 3038         CALL     AT
      0010E8 CD 07 95         [ 4] 3039         CALL     PLUS    ;current input buffer pointer
      0010EB CD 06 85         [ 4] 3040         CALL     NTIB
      0010EE CD 04 F3         [ 4] 3041         CALL     AT
      0010F1 CD 06 75         [ 4] 3042         CALL     INN
      0010F4 CD 04 F3         [ 4] 3043         CALL     AT
      0010F7 CD 08 0E         [ 4] 3044         CALL     SUBB    ;remaining count
      0010FA CD 05 44         [ 4] 3045         CALL     RFROM
      0010FD CD 10 13         [ 4] 3046         CALL     PARS
      001100 CD 06 75         [ 4] 3047         CALL     INN
      001103 CC 0B 51         [ 2] 3048         JP     PSTOR
                                   3049 
                                   3050 ;       .(      ( -- )
                                   3051 ;       Output following string up to next ) .
      001106 10 D6                 3052         .word      LINK
                           001108  3053 LINK = . 
      001108 82                    3054 	.byte      IMEDD+2
      001109 2E 28                 3055         .ascii     ".("
      00110B                       3056 DOTPR:
      00110B CD 04 75         [ 4] 3057         CALL     DOLIT
      00110E 00 29                 3058         .word     41	; ")"
      001110 CD 10 DC         [ 4] 3059         CALL     PARSE
      001113 CC 0F 29         [ 2] 3060         JP     TYPES
                                   3061 
                                   3062 ;       (       ( -- )
                                   3063 ;       Ignore following string up to next ).
                                   3064 ;       A comment.
      001116 11 08                 3065         .word      LINK
                           001118  3066 LINK = . 
      001118 81                    3067 	.byte      IMEDD+1
      001119 28                    3068         .ascii     "("
      00111A                       3069 PAREN:
      00111A CD 04 75         [ 4] 3070         CALL     DOLIT
      00111D 00 29                 3071         .word     41	; ")"
      00111F CD 10 DC         [ 4] 3072         CALL     PARSE
      001122 CC 07 75         [ 2] 3073         JP     DDROP
                                   3074 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3075 ;       \       ( -- )
                                   3076 ;       Ignore following text till
                                   3077 ;       end of line.
      001125 11 18                 3078         .word      LINK
                           001127  3079 LINK = . 
      001127 81                    3080 	.byte      IMEDD+1
      001128 5C                    3081         .ascii     "\"
      001129                       3082 BKSLA:
      001129 90 AE 00 0C      [ 2] 3083         ldw y,#UCTIB ; #TIB  
      00112D 90 FE            [ 2] 3084         ldw y,(y)
      00112F 90 89            [ 2] 3085         pushw y ; count in TIB 
      001131 90 AE 00 0A      [ 2] 3086         ldw y,#UINN ; >IN 
      001135 90 BF 24         [ 2] 3087         ldw YTEMP,y
      001138 90 85            [ 2] 3088         popw y 
      00113A 91 CF 24         [ 5] 3089         ldw [YTEMP],y
      00113D 81               [ 4] 3090         ret 
                                   3091 
                                   3092 ;       WORD    ( c -- a ; <string> )
                                   3093 ;       Parse a word from input stream
                                   3094 ;       and copy it to code dictionary.
      00113E 11 27                 3095         .word      LINK
                           001140  3096 LINK = . 
      001140 04                    3097         .byte      4
      001141 57 4F 52 44           3098         .ascii     "WORD"
      001145                       3099 WORDD:
      001145 CD 10 DC         [ 4] 3100         CALL     PARSE
      001148 CD 0B CF         [ 4] 3101         CALL     HERE
      00114B CD 0A 4A         [ 4] 3102         CALL     CELLP
      00114E CC 0C 8F         [ 2] 3103         JP     PACKS
                                   3104 
                                   3105 ;       TOKEN   ( -- a ; <string> )
                                   3106 ;       Parse a word from input stream
                                   3107 ;       and copy it to name dictionary.
      001151 11 40                 3108         .word      LINK
                           001153  3109 LINK = . 
      001153 05                    3110         .byte      5
      001154 54 4F 4B 45 4E        3111         .ascii     "TOKEN"
      001159                       3112 TOKEN:
      001159 CD 0A D4         [ 4] 3113         CALL     BLANK
      00115C CC 11 45         [ 2] 3114         JP     WORDD
                                   3115 
                                   3116 ;; Dictionary search
                                   3117 
                                   3118 ;       NAME>   ( na -- ca )
                                   3119 ;       Return a code address given
                                   3120 ;       a name address.
      00115F 11 53                 3121         .word      LINK
                           001161  3122 LINK = . 
      001161 05                    3123         .byte      5
      001162 4E 41 4D 45 3E        3124         .ascii     "NAME>"
      001167                       3125 NAMET:
      001167 CD 0B B8         [ 4] 3126         CALL     COUNT
      00116A CD 04 75         [ 4] 3127         CALL     DOLIT
      00116D 00 1F                 3128         .word      31
      00116F CD 05 E6         [ 4] 3129         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001172 CC 07 95         [ 2] 3130         JP     PLUS
                                   3131 
                                   3132 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3133 ;       Compare u cells in two
                                   3134 ;       strings. Return 0 if identical.
      001175 11 61                 3135         .word      LINK
                           001177  3136 LINK = . 
      001177 05                    3137         .byte       5
      001178 53 41 4D 45 3F        3138         .ascii     "SAME?"
      00117D                       3139 SAMEQ:
      00117D CD 0A 82         [ 4] 3140         CALL     ONEM
      001180 CD 05 63         [ 4] 3141         CALL     TOR
      001183 20 29            [ 2] 3142         JRA     SAME2
      001185 CD 05 C4         [ 4] 3143 SAME1:  CALL     OVER
      001188 CD 05 57         [ 4] 3144         CALL     RAT
      00118B CD 07 95         [ 4] 3145         CALL     PLUS
      00118E CD 05 11         [ 4] 3146         CALL     CAT
      001191 CD 05 C4         [ 4] 3147         CALL     OVER
      001194 CD 05 57         [ 4] 3148         CALL     RAT
      001197 CD 07 95         [ 4] 3149         CALL     PLUS
      00119A CD 05 11         [ 4] 3150         CALL     CAT
      00119D CD 08 0E         [ 4] 3151         CALL     SUBB
      0011A0 CD 07 44         [ 4] 3152         CALL     QDUP
      0011A3 CD 04 A8         [ 4] 3153         CALL     QBRAN
      0011A6 11 AE                 3154         .word      SAME2
      0011A8 CD 05 44         [ 4] 3155         CALL     RFROM
      0011AB CC 05 90         [ 2] 3156         JP     DROP
      0011AE CD 04 89         [ 4] 3157 SAME2:  CALL     DONXT
      0011B1 11 85                 3158         .word      SAME1
      0011B3 CC 0A E1         [ 2] 3159         JP     ZERO
                                   3160 
                                   3161 ;       find    ( a va -- ca na | a F )
                                   3162 ;       Search vocabulary for string.
                                   3163 ;       Return ca and na if succeeded.
      0011B6 11 77                 3164         .word      LINK
                           0011B8  3165 LINK = . 
      0011B8 04                    3166         .byte      4
      0011B9 46 49 4E 44           3167         .ascii     "FIND"
      0011BD                       3168 FIND:
      0011BD CD 05 AA         [ 4] 3169         CALL     SWAPP
      0011C0 CD 05 9A         [ 4] 3170         CALL     DUPP
      0011C3 CD 05 11         [ 4] 3171         CALL     CAT
      0011C6 CD 06 66         [ 4] 3172         CALL     TEMP
      0011C9 CD 04 DC         [ 4] 3173         CALL     STORE
      0011CC CD 05 9A         [ 4] 3174         CALL     DUPP
      0011CF CD 04 F3         [ 4] 3175         CALL     AT
      0011D2 CD 05 63         [ 4] 3176         CALL     TOR
      0011D5 CD 0A 4A         [ 4] 3177         CALL     CELLP
      0011D8 CD 05 AA         [ 4] 3178         CALL     SWAPP
      0011DB CD 04 F3         [ 4] 3179 FIND1:  CALL     AT
      0011DE CD 05 9A         [ 4] 3180         CALL     DUPP
      0011E1 CD 04 A8         [ 4] 3181         CALL     QBRAN
      0011E4 12 1A                 3182         .word      FIND6
      0011E6 CD 05 9A         [ 4] 3183         CALL     DUPP
      0011E9 CD 04 F3         [ 4] 3184         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011EC CD 04 75         [ 4] 3185         CALL     DOLIT
      0011EF 1F 7F                 3186         .word      MASKK
      0011F1 CD 05 E6         [ 4] 3187         CALL     ANDD
      0011F4 CD 05 57         [ 4] 3188         CALL     RAT
      0011F7 CD 06 0F         [ 4] 3189         CALL     XORR
      0011FA CD 04 A8         [ 4] 3190         CALL     QBRAN
      0011FD 12 09                 3191         .word      FIND2
      0011FF CD 0A 4A         [ 4] 3192         CALL     CELLP
      001202 CD 04 75         [ 4] 3193         CALL     DOLIT
      001205 FF FF                 3194         .word     0xFFFF
      001207 20 0C            [ 2] 3195         JRA     FIND3
      001209 CD 0A 4A         [ 4] 3196 FIND2:  CALL     CELLP
      00120C CD 06 66         [ 4] 3197         CALL     TEMP
      00120F CD 04 F3         [ 4] 3198         CALL     AT
      001212 CD 11 7D         [ 4] 3199         CALL     SAMEQ
      001215 CD 04 BF         [ 4] 3200 FIND3:  CALL     BRAN
      001218 12 29                 3201         .word      FIND4
      00121A CD 05 44         [ 4] 3202 FIND6:  CALL     RFROM
      00121D CD 05 90         [ 4] 3203         CALL     DROP
      001220 CD 05 AA         [ 4] 3204         CALL     SWAPP
      001223 CD 0A 59         [ 4] 3205         CALL     CELLM
      001226 CC 05 AA         [ 2] 3206         JP     SWAPP
      001229 CD 04 A8         [ 4] 3207 FIND4:  CALL     QBRAN
      00122C 12 36                 3208         .word      FIND5
      00122E CD 0A 59         [ 4] 3209         CALL     CELLM
      001231 CD 0A 59         [ 4] 3210         CALL     CELLM
      001234 20 A5            [ 2] 3211         JRA     FIND1
      001236 CD 05 44         [ 4] 3212 FIND5:  CALL     RFROM
      001239 CD 05 90         [ 4] 3213         CALL     DROP
      00123C CD 05 AA         [ 4] 3214         CALL     SWAPP
      00123F CD 05 90         [ 4] 3215         CALL     DROP
      001242 CD 0A 59         [ 4] 3216         CALL     CELLM
      001245 CD 05 9A         [ 4] 3217         CALL     DUPP
      001248 CD 11 67         [ 4] 3218         CALL     NAMET
      00124B CC 05 AA         [ 2] 3219         JP     SWAPP
                                   3220 
                                   3221 ;       NAME?   ( a -- ca na | a F )
                                   3222 ;       Search vocabularies for a string.
      00124E 11 B8                 3223         .word      LINK
                           001250  3224 LINK = . 
      001250 05                    3225         .byte      5
      001251 4E 41 4D 45 3F        3226         .ascii     "NAME?"
      001256                       3227 NAMEQ:
      001256 CD 06 DA         [ 4] 3228         CALL   CNTXT
      001259 CC 11 BD         [ 2] 3229         JP     FIND
                                   3230 
                                   3231 ;; Terminal response
                                   3232 
                                   3233 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3234 ;       Backup cursor by one character.
      00125C 12 50                 3235         .word      LINK
                           00125E  3236 LINK = . 
      00125E 02                    3237         .byte      2
      00125F 5E 48                 3238         .ascii     "^H"
      001261                       3239 BKSP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001261 CD 05 63         [ 4] 3240         CALL     TOR
      001264 CD 05 C4         [ 4] 3241         CALL     OVER
      001267 CD 05 44         [ 4] 3242         CALL     RFROM
      00126A CD 05 AA         [ 4] 3243         CALL     SWAPP
      00126D CD 05 C4         [ 4] 3244         CALL     OVER
      001270 CD 06 0F         [ 4] 3245         CALL     XORR
      001273 CD 04 A8         [ 4] 3246         CALL     QBRAN
      001276 12 91                 3247         .word      BACK1
      001278 CD 04 75         [ 4] 3248         CALL     DOLIT
      00127B 00 08                 3249         .word      BKSPP
      00127D CD 04 34         [ 4] 3250         CALL     EMIT
      001280 CD 0A 82         [ 4] 3251         CALL     ONEM
      001283 CD 0A D4         [ 4] 3252         CALL     BLANK
      001286 CD 04 34         [ 4] 3253         CALL     EMIT
      001289 CD 04 75         [ 4] 3254         CALL     DOLIT
      00128C 00 08                 3255         .word      BKSPP
      00128E CC 04 34         [ 2] 3256         JP     EMIT
      001291 81               [ 4] 3257 BACK1:  RET
                                   3258 
                                   3259 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3260 ;       Accept and echo key stroke
                                   3261 ;       and bump cursor.
      001292 12 5E                 3262         .word      LINK
                           001294  3263 LINK = . 
      001294 03                    3264         .byte      3
      001295 54 41 50              3265         .ascii     "TAP"
      001298                       3266 TAP:
      001298 CD 05 9A         [ 4] 3267         CALL     DUPP
      00129B CD 04 34         [ 4] 3268         CALL     EMIT
      00129E CD 05 C4         [ 4] 3269         CALL     OVER
      0012A1 CD 05 00         [ 4] 3270         CALL     CSTOR
      0012A4 CC 0A 75         [ 2] 3271         JP     ONEP
                                   3272 
                                   3273 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3274 ;       Process a key stroke,
                                   3275 ;       CR,LF or backspace.
      0012A7 12 94                 3276         .word      LINK
                           0012A9  3277 LINK = . 
      0012A9 04                    3278         .byte      4
      0012AA 4B 54 41 50           3279         .ascii     "KTAP"
      0012AE                       3280 KTAP:
      0012AE CD 05 9A         [ 4] 3281         CALL     DUPP
      0012B1 CD 04 75         [ 4] 3282         CALL     DOLIT
                           000001  3283 .if EOL_CR
      0012B4 00 0D                 3284         .word   CRR
                           000000  3285 .else ; EOL_LF 
                                   3286         .word   LF
                                   3287 .endif 
      0012B6 CD 06 0F         [ 4] 3288         CALL     XORR
      0012B9 CD 04 A8         [ 4] 3289         CALL     QBRAN
      0012BC 12 D4                 3290         .word      KTAP2
      0012BE CD 04 75         [ 4] 3291         CALL     DOLIT
      0012C1 00 08                 3292         .word      BKSPP
      0012C3 CD 06 0F         [ 4] 3293         CALL     XORR
      0012C6 CD 04 A8         [ 4] 3294         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012C9 12 D1                 3295         .word      KTAP1
      0012CB CD 0A D4         [ 4] 3296         CALL     BLANK
      0012CE CC 12 98         [ 2] 3297         JP     TAP
      0012D1 CC 12 61         [ 2] 3298 KTAP1:  JP     BKSP
      0012D4 CD 05 90         [ 4] 3299 KTAP2:  CALL     DROP
      0012D7 CD 05 AA         [ 4] 3300         CALL     SWAPP
      0012DA CD 05 90         [ 4] 3301         CALL     DROP
      0012DD CC 05 9A         [ 2] 3302         JP     DUPP
                                   3303 
                                   3304 ;       accept  ( b u -- b u )
                                   3305 ;       Accept characters to input
                                   3306 ;       buffer. Return with actual count.
      0012E0 12 A9                 3307         .word      LINK
                           0012E2  3308 LINK = . 
      0012E2 06                    3309         .byte      6
      0012E3 41 43 43 45 50 54     3310         .ascii     "ACCEPT"
      0012E9                       3311 ACCEP:
      0012E9 CD 05 C4         [ 4] 3312         CALL     OVER
      0012EC CD 07 95         [ 4] 3313         CALL     PLUS
      0012EF CD 05 C4         [ 4] 3314         CALL     OVER
      0012F2 CD 07 80         [ 4] 3315 ACCP1:  CALL     DDUP
      0012F5 CD 06 0F         [ 4] 3316         CALL     XORR
      0012F8 CD 04 A8         [ 4] 3317         CALL     QBRAN
      0012FB 13 1D                 3318         .word      ACCP4
      0012FD CD 0E C7         [ 4] 3319         CALL     KEY
      001300 CD 05 9A         [ 4] 3320         CALL     DUPP
      001303 CD 0A D4         [ 4] 3321         CALL     BLANK
      001306 CD 04 75         [ 4] 3322         CALL     DOLIT
      001309 00 7F                 3323         .word      127
      00130B CD 08 D0         [ 4] 3324         CALL     WITHI
      00130E CD 04 A8         [ 4] 3325         CALL     QBRAN
      001311 13 18                 3326         .word      ACCP2
      001313 CD 12 98         [ 4] 3327         CALL     TAP
      001316 20 03            [ 2] 3328         JRA     ACCP3
      001318 CD 12 AE         [ 4] 3329 ACCP2:  CALL     KTAP
      00131B 20 D5            [ 2] 3330 ACCP3:  JRA     ACCP1
      00131D CD 05 90         [ 4] 3331 ACCP4:  CALL     DROP
      001320 CD 05 C4         [ 4] 3332         CALL     OVER
      001323 CC 08 0E         [ 2] 3333         JP     SUBB
                                   3334 
                                   3335 ;       QUERY   ( -- )
                                   3336 ;       Accept input stream to
                                   3337 ;       terminal input buffer.
      001326 12 E2                 3338         .word      LINK
                                   3339         
                           001328  3340 LINK = . 
      001328 05                    3341         .byte      5
      001329 51 55 45 52 59        3342         .ascii     "QUERY"
      00132E                       3343 QUERY:
      00132E CD 0B F1         [ 4] 3344         CALL     TIB
      001331 CD 04 75         [ 4] 3345         CALL     DOLIT
      001334 00 50                 3346         .word      80
      001336 CD 12 E9         [ 4] 3347         CALL     ACCEP
      001339 CD 06 85         [ 4] 3348         CALL     NTIB
      00133C CD 04 DC         [ 4] 3349         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00133F CD 05 90         [ 4] 3350         CALL     DROP
      001342 CD 0A E1         [ 4] 3351         CALL     ZERO
      001345 CD 06 75         [ 4] 3352         CALL     INN
      001348 CC 04 DC         [ 2] 3353         JP     STORE
                                   3354 
                                   3355 ;       ABORT   ( -- )
                                   3356 ;       Reset data stack and
                                   3357 ;       jump to QUIT.
      00134B 13 28                 3358         .word      LINK
                           00134D  3359 LINK = . 
      00134D 05                    3360         .byte      5
      00134E 41 42 4F 52 54        3361         .ascii     "ABORT"
      001353                       3362 ABORT:
      001353 CD 14 4A         [ 4] 3363         CALL     PRESE
      001356 CC 14 67         [ 2] 3364         JP     QUIT
                                   3365 
                                   3366 ;       abort"  ( f -- )
                                   3367 ;       Run time routine of ABORT".
                                   3368 ;       Abort with a message.
      001359 13 4D                 3369         .word      LINK
                           00135B  3370 LINK = . 
      00135B 46                    3371 	.byte      COMPO+6
      00135C 41 42 4F 52 54        3372         .ascii     "ABORT"
      001361 22                    3373         .byte      '"'
      001362                       3374 ABORQ:
      001362 CD 04 A8         [ 4] 3375         CALL     QBRAN
      001365 13 81                 3376         .word      ABOR2   ;text flag
      001367 CD 0F 5D         [ 4] 3377         CALL     DOSTR
      00136A CD 0E FF         [ 4] 3378 ABOR1:  CALL     SPACE
      00136D CD 0B B8         [ 4] 3379         CALL     COUNT
      001370 CD 0F 29         [ 4] 3380         CALL     TYPES
      001373 CD 04 75         [ 4] 3381         CALL     DOLIT
      001376 00 3F                 3382         .word     63 ; "?"
      001378 CD 04 34         [ 4] 3383         CALL     EMIT
      00137B CD 0F 47         [ 4] 3384         CALL     CR
      00137E CC 13 53         [ 2] 3385         JP     ABORT   ;pass error string
      001381 CD 0F 5D         [ 4] 3386 ABOR2:  CALL     DOSTR
      001384 CC 05 90         [ 2] 3387         JP     DROP
                                   3388 
                                   3389 ;; The text interpreter
                                   3390 
                                   3391 ;       $INTERPRET      ( a -- )
                                   3392 ;       Interpret a word. If failed,
                                   3393 ;       try to convert it to an integer.
      001387 13 5B                 3394         .word      LINK
                           001389  3395 LINK = . 
      001389 0A                    3396         .byte      10
      00138A 24 49 4E 54 45 52 50  3397         .ascii     "$INTERPRET"
             52 45 54
      001394                       3398 INTER:
      001394 CD 12 56         [ 4] 3399         CALL     NAMEQ
      001397 CD 07 44         [ 4] 3400         CALL     QDUP    ;?defined
      00139A CD 04 A8         [ 4] 3401         CALL     QBRAN
      00139D 13 BE                 3402         .word      INTE1
      00139F CD 04 F3         [ 4] 3403         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0013A2 CD 04 75         [ 4] 3404         CALL     DOLIT
      0013A5 40 00                 3405 	.word       0x4000	; COMPO*256
      0013A7 CD 05 E6         [ 4] 3406         CALL     ANDD    ;?compile only lexicon bits
      0013AA CD 13 62         [ 4] 3407         CALL     ABORQ
      0013AD 0D                    3408         .byte      13
      0013AE 20 63 6F 6D 70 69 6C  3409         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013BB CC 04 CF         [ 2] 3410         JP     EXECU
      0013BE CD 0D F4         [ 4] 3411 INTE1:  CALL     NUMBQ   ;convert a number
      0013C1 CD 04 A8         [ 4] 3412         CALL     QBRAN
      0013C4 13 6A                 3413         .word    ABOR1
      0013C6 81               [ 4] 3414         RET
                                   3415 
                                   3416 ;       [       ( -- )
                                   3417 ;       Start  text interpreter.
      0013C7 13 89                 3418         .word      LINK
                           0013C9  3419 LINK = . 
      0013C9 81                    3420 	.byte      IMEDD+1
      0013CA 5B                    3421         .ascii     "["
      0013CB                       3422 LBRAC:
      0013CB CD 04 75         [ 4] 3423         CALL   DOLIT
      0013CE 13 94                 3424         .word  INTER
      0013D0 CD 06 B8         [ 4] 3425         CALL   TEVAL
      0013D3 CC 04 DC         [ 2] 3426         JP     STORE
                                   3427 
                                   3428 ;       .OK     ( -- )
                                   3429 ;       Display 'ok' while interpreting.
      0013D6 13 C9                 3430         .word      LINK
                           0013D8  3431 LINK = . 
      0013D8 03                    3432         .byte      3
      0013D9 2E 4F 4B              3433         .ascii     ".OK"
      0013DC                       3434 DOTOK:
      0013DC CD 04 75         [ 4] 3435         CALL     DOLIT
      0013DF 13 94                 3436         .word      INTER
      0013E1 CD 06 B8         [ 4] 3437         CALL     TEVAL
      0013E4 CD 04 F3         [ 4] 3438         CALL     AT
      0013E7 CD 08 36         [ 4] 3439         CALL     EQUAL
      0013EA CD 04 A8         [ 4] 3440         CALL     QBRAN
      0013ED 13 F6                 3441         .word      DOTO1
      0013EF CD 0F 86         [ 4] 3442         CALL     DOTQP
      0013F2 03                    3443         .byte      3
      0013F3 20 6F 6B              3444         .ascii     " ok"
      0013F6 CC 0F 47         [ 2] 3445 DOTO1:  JP     CR
                                   3446 
                                   3447 ;       ?STACK  ( -- )
                                   3448 ;       Abort if stack underflows.
      0013F9 13 D8                 3449         .word      LINK
                           0013FB  3450 LINK = . 
      0013FB 06                    3451         .byte      6
      0013FC 3F 53 54 41 43 4B     3452         .ascii     "?STACK"
      001402                       3453 QSTAC: 
      001402 CD 0B 23         [ 4] 3454         CALL     DEPTH
      001405 CD 05 D3         [ 4] 3455         CALL     ZLESS   ;check only for underflow
      001408 CD 13 62         [ 4] 3456         CALL     ABORQ
      00140B 0B                    3457         .byte      11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00140C 20 75 6E 64 65 72 66  3458         .ascii     " underflow "
             6C 6F 77 20
      001417 81               [ 4] 3459         RET
                                   3460 
                                   3461 ;       EVAL    ( -- )
                                   3462 ;       Interpret  input stream.
      001418 13 FB                 3463         .word      LINK
                           00141A  3464 LINK = . 
      00141A 04                    3465         .byte      4
      00141B 45 56 41 4C           3466         .ascii     "EVAL"
      00141F                       3467 EVAL:
      00141F CD 11 59         [ 4] 3468 EVAL1:  CALL     TOKEN
      001422 CD 05 9A         [ 4] 3469         CALL     DUPP
      001425 CD 05 11         [ 4] 3470         CALL     CAT     ;?input stream empty
      001428 CD 04 A8         [ 4] 3471         CALL     QBRAN
      00142B 14 3B                 3472         .word    EVAL2
      00142D CD 06 B8         [ 4] 3473         CALL     TEVAL
      001430 CD 0C 05         [ 4] 3474         CALL     ATEXE
      001433 CD 14 02         [ 4] 3475         CALL     QSTAC   ;evaluate input, check stack
      001436 CD 04 BF         [ 4] 3476         CALL     BRAN
      001439 14 1F                 3477         .word    EVAL1
      00143B CD 05 90         [ 4] 3478 EVAL2:  CALL     DROP
      00143E CC 13 DC         [ 2] 3479         JP       DOTOK
                                   3480 
                                   3481 ;       PRESET  ( -- )
                                   3482 ;       Reset data stack pointer and
                                   3483 ;       terminal input buffer.
      001441 14 1A                 3484         .word      LINK
                           001443  3485 LINK = . 
      001443 06                    3486         .byte      6
      001444 50 52 45 53 45 54     3487         .ascii     "PRESET"
      00144A                       3488 PRESE:
      00144A CD 04 75         [ 4] 3489         CALL     DOLIT
      00144D 16 80                 3490         .word      SPP
      00144F CD 05 87         [ 4] 3491         CALL     SPSTO
      001452 CD 04 75         [ 4] 3492         CALL     DOLIT
      001455 17 00                 3493         .word      TIBB
      001457 CD 06 85         [ 4] 3494         CALL     NTIB
      00145A CD 0A 4A         [ 4] 3495         CALL     CELLP
      00145D CC 04 DC         [ 2] 3496         JP     STORE
                                   3497 
                                   3498 ;       QUIT    ( -- )
                                   3499 ;       Reset return stack pointer
                                   3500 ;       and start text interpreter.
      001460 14 43                 3501         .word      LINK
                           001462  3502 LINK = . 
      001462 04                    3503         .byte      4
      001463 51 55 49 54           3504         .ascii     "QUIT"
      001467                       3505 QUIT:
      001467 CD 04 75         [ 4] 3506         CALL     DOLIT
      00146A 17 FF                 3507         .word      RPP
      00146C CD 05 2E         [ 4] 3508         CALL     RPSTO   ;reset return stack pointer
      00146F CD 13 CB         [ 4] 3509 QUIT1:  CALL     LBRAC   ;start interpretation
      001472 CD 13 2E         [ 4] 3510 QUIT2:  CALL     QUERY   ;get input
      001475 CD 14 1F         [ 4] 3511         CALL     EVAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001478 20 F8            [ 2] 3512         JRA     QUIT2   ;continue till error
                                   3513 
                                   3514 ;; The compiler
                                   3515 
                                   3516 ;       '       ( -- ca )
                                   3517 ;       Search vocabularies for
                                   3518 ;       next word in input stream.
      00147A 14 62                 3519         .word      LINK
                           00147C  3520 LINK = . 
      00147C 01                    3521         .byte      1
      00147D 27                    3522         .ascii     "'"
      00147E                       3523 TICK:
      00147E CD 11 59         [ 4] 3524         CALL     TOKEN
      001481 CD 12 56         [ 4] 3525         CALL     NAMEQ   ;?defined
      001484 CD 04 A8         [ 4] 3526         CALL     QBRAN
      001487 13 6A                 3527         .word      ABOR1
      001489 81               [ 4] 3528         RET     ;yes, push code address
                                   3529 
                                   3530 ;       ALLOT   ( n -- )
                                   3531 ;       Allocate n bytes to RAM 
      00148A 14 7C                 3532         .word      LINK
                           00148C  3533         LINK = . 
      00148C 05                    3534         .byte      5
      00148D 41 4C 4C 4F 54        3535         .ascii     "ALLOT"
      001492                       3536 ALLOT:
      001492 CD 06 E8         [ 4] 3537         CALL     VPP
                                   3538 ; must update APP_VP each time VP is modidied
      001495 CD 0B 51         [ 4] 3539         call PSTOR 
      001498 CC 1B DB         [ 2] 3540         jp UPDATVP 
                                   3541 
                                   3542 ;       ,       ( w -- )
                                   3543 ;         Compile an integer into
                                   3544 ;         variable space.
      00149B 14 8C                 3545         .word      LINK
                           00149D  3546 LINK = . 
      00149D 01                    3547         .byte      1
      00149E 2C                    3548         .ascii     ","
      00149F                       3549 COMMA:
      00149F CD 0B CF         [ 4] 3550         CALL     HERE
      0014A2 CD 05 9A         [ 4] 3551         CALL     DUPP
      0014A5 CD 0A 4A         [ 4] 3552         CALL     CELLP   ;cell boundary
      0014A8 CD 06 E8         [ 4] 3553         CALL     VPP
      0014AB CD 04 DC         [ 4] 3554         CALL     STORE
      0014AE CC 04 DC         [ 2] 3555         JP     STORE
                                   3556 
                                   3557 ;       C,      ( c -- )
                                   3558 ;       Compile a byte into
                                   3559 ;       variables space.
      0014B1 14 9D                 3560        .word      LINK
                           0014B3  3561 LINK = . 
      0014B3 02                    3562         .byte      2
      0014B4 43 2C                 3563         .ascii     "C,"
      0014B6                       3564 CCOMMA:
      0014B6 CD 0B CF         [ 4] 3565         CALL     HERE
      0014B9 CD 05 9A         [ 4] 3566         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014BC CD 0A 75         [ 4] 3567         CALL     ONEP
      0014BF CD 06 E8         [ 4] 3568         CALL     VPP
      0014C2 CD 04 DC         [ 4] 3569         CALL     STORE
      0014C5 CC 05 00         [ 2] 3570         JP     CSTOR
                                   3571 
                                   3572 ;       [COMPILE]       ( -- ; <string> )
                                   3573 ;       Compile next immediate
                                   3574 ;       word into code dictionary.
      0014C8 14 B3                 3575         .word      LINK
                           0014CA  3576 LINK = . 
      0014CA 89                    3577 	.byte      IMEDD+9
      0014CB 5B 43 4F 4D 50 49 4C  3578         .ascii     "[COMPILE]"
             45 5D
      0014D4                       3579 BCOMP:
      0014D4 CD 14 7E         [ 4] 3580         CALL     TICK
      0014D7 CC 17 9A         [ 2] 3581         JP     JSRC
                                   3582 
                                   3583 ;       COMPILE ( -- )
                                   3584 ;       Compile next jsr in
                                   3585 ;       colon list to code dictionary.
      0014DA 14 CA                 3586         .word      LINK
                           0014DC  3587 LINK = . 
      0014DC 47                    3588 	.byte      COMPO+7
      0014DD 43 4F 4D 50 49 4C 45  3589         .ascii     "COMPILE"
      0014E4                       3590 COMPI:
      0014E4 CD 05 44         [ 4] 3591         CALL     RFROM
      0014E7 CD 05 9A         [ 4] 3592         CALL     DUPP
      0014EA CD 04 F3         [ 4] 3593         CALL     AT
      0014ED CD 17 9A         [ 4] 3594         CALL     JSRC    ;compile subroutine
      0014F0 CD 0A 4A         [ 4] 3595         CALL     CELLP
      0014F3 90 93            [ 1] 3596         ldw y,x 
      0014F5 90 FE            [ 2] 3597         ldw y,(y)
      0014F7 1C 00 02         [ 2] 3598         addw x,#CELLL 
      0014FA 90 FC            [ 2] 3599         jp (y)
                                   3600 
                                   3601 ;       LITERAL ( w -- )
                                   3602 ;       Compile tos to dictionary
                                   3603 ;       as an integer literal.
      0014FC 14 DC                 3604         .word      LINK
                           0014FE  3605 LINK = . 
      0014FE 87                    3606 	.byte      IMEDD+7
      0014FF 4C 49 54 45 52 41 4C  3607         .ascii     "LITERAL"
      001506                       3608 LITER:
      001506 CD 14 E4         [ 4] 3609         CALL     COMPI
      001509 04 75                 3610         .word DOLIT 
      00150B CC 14 9F         [ 2] 3611         JP     COMMA
                                   3612 
                                   3613 ;       $,"     ( -- )
                                   3614 ;       Compile a literal string
                                   3615 ;       up to next " .
      00150E 14 FE                 3616         .word      LINK
                           001510  3617 LINK = . 
      001510 03                    3618         .byte      3
      001511 24 2C 22              3619         .byte     '$',',','"'
      001514                       3620 STRCQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001514 CD 04 75         [ 4] 3621         CALL     DOLIT
      001517 00 22                 3622         .word     34	; "
      001519 CD 10 DC         [ 4] 3623         CALL     PARSE
      00151C CD 0B CF         [ 4] 3624         CALL     HERE
      00151F CD 0C 8F         [ 4] 3625         CALL     PACKS   ;string to code dictionary
      001522 CD 0B B8         [ 4] 3626         CALL     COUNT
      001525 CD 07 95         [ 4] 3627         CALL     PLUS    ;calculate aligned end of string
      001528 CD 06 E8         [ 4] 3628         CALL     VPP
      00152B CC 04 DC         [ 2] 3629         JP     STORE
                                   3630 
                                   3631 ;; Structures
                                   3632 
                                   3633 ;       FOR     ( -- a )
                                   3634 ;       Start a FOR-NEXT loop
                                   3635 ;       structure in a colon definition.
      00152E 15 10                 3636         .word      LINK
                           001530  3637 LINK = . 
      001530 83                    3638 	.byte      IMEDD+3
      001531 46 4F 52              3639         .ascii     "FOR"
      001534                       3640 FOR:
      001534 CD 14 E4         [ 4] 3641         CALL     COMPI
      001537 05 63                 3642         .word TOR 
      001539 CC 0B CF         [ 2] 3643         JP     HERE
                                   3644 
                                   3645 ;       NEXT    ( a -- )
                                   3646 ;       Terminate a FOR-NEXT loop.
      00153C 15 30                 3647         .word      LINK
                           00153E  3648 LINK = . 
      00153E 84                    3649 	.byte      IMEDD+4
      00153F 4E 45 58 54           3650         .ascii     "NEXT"
      001543                       3651 NEXT:
      001543 CD 14 E4         [ 4] 3652         CALL     COMPI
      001546 04 89                 3653         .word DONXT 
      001548 CD 07 34         [ 4] 3654         call ADRADJ
      00154B CC 14 9F         [ 2] 3655         JP     COMMA
                                   3656 
                                   3657 ;       I ( -- n )
                                   3658 ;       stack FOR-NEXT COUNTER 
      00154E 15 3E                 3659         .word LINK 
                           001550  3660         LINK=.
      001550 01                    3661         .byte 1 
      001551 49                    3662         .ascii "I"
      001552                       3663 IFETCH: 
      001552 1D 00 02         [ 2] 3664         subw x,#CELLL 
      001555 16 03            [ 2] 3665         ldw y,(3,sp)
      001557 FF               [ 2] 3666         ldw (x),y 
      001558 81               [ 4] 3667         ret 
                                   3668 
                                   3669 ;       BEGIN   ( -- a )
                                   3670 ;       Start an infinite or
                                   3671 ;       indefinite loop structure.
      001559 15 50                 3672         .word      LINK
                           00155B  3673 LINK = . 
      00155B 85                    3674 	.byte      IMEDD+5
      00155C 42 45 47 49 4E        3675         .ascii     "BEGIN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001561                       3676 BEGIN:
      001561 CC 0B CF         [ 2] 3677         JP     HERE
                                   3678 
                                   3679 ;       UNTIL   ( a -- )
                                   3680 ;       Terminate a BEGIN-UNTIL
                                   3681 ;       indefinite loop structure.
      001564 15 5B                 3682         .word      LINK
                           001566  3683 LINK = . 
      001566 85                    3684 	.byte      IMEDD+5
      001567 55 4E 54 49 4C        3685         .ascii     "UNTIL"
      00156C                       3686 UNTIL:
      00156C CD 14 E4         [ 4] 3687         CALL     COMPI
      00156F 04 A8                 3688         .word    QBRAN 
      001571 CD 07 34         [ 4] 3689         call ADRADJ
      001574 CC 14 9F         [ 2] 3690         JP     COMMA
                                   3691 
                                   3692 ;       AGAIN   ( a -- )
                                   3693 ;       Terminate a BEGIN-AGAIN
                                   3694 ;       infinite loop structure.
      001577 15 66                 3695         .word      LINK
                           001579  3696 LINK = . 
      001579 85                    3697 	.byte      IMEDD+5
      00157A 41 47 41 49 4E        3698         .ascii     "AGAIN"
      00157F                       3699 AGAIN:
      00157F CD 14 E4         [ 4] 3700         CALL     COMPI
      001582 04 BF                 3701         .word BRAN
      001584 CD 07 34         [ 4] 3702         call ADRADJ 
      001587 CC 14 9F         [ 2] 3703         JP     COMMA
                                   3704 
                                   3705 ;       IF      ( -- A )
                                   3706 ;       Begin a conditional branch.
      00158A 15 79                 3707         .word      LINK
                           00158C  3708 LINK = . 
      00158C 82                    3709 	.byte      IMEDD+2
      00158D 49 46                 3710         .ascii     "IF"
      00158F                       3711 IFF:
      00158F CD 14 E4         [ 4] 3712         CALL     COMPI
      001592 04 A8                 3713         .word QBRAN
      001594 CD 0B CF         [ 4] 3714         CALL     HERE
      001597 CD 0A E1         [ 4] 3715         CALL     ZERO
      00159A CC 14 9F         [ 2] 3716         JP     COMMA
                                   3717 
                                   3718 ;       THEN        ( A -- )
                                   3719 ;       Terminate a conditional branch structure.
      00159D 15 8C                 3720         .word      LINK
                           00159F  3721 LINK = . 
      00159F 84                    3722 	.byte      IMEDD+4
      0015A0 54 48 45 4E           3723         .ascii     "THEN"
      0015A4                       3724 THENN:
      0015A4 CD 0B CF         [ 4] 3725         CALL     HERE
      0015A7 CD 07 34         [ 4] 3726         call ADRADJ 
      0015AA CD 05 AA         [ 4] 3727         CALL     SWAPP
      0015AD CC 04 DC         [ 2] 3728         JP     STORE
                                   3729 
                                   3730 ;       ELSE        ( A -- A )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3731 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015B0 15 9F                 3732         .word      LINK
                           0015B2  3733 LINK = . 
      0015B2 84                    3734 	.byte      IMEDD+4
      0015B3 45 4C 53 45           3735         .ascii     "ELSE"
      0015B7                       3736 ELSEE:
      0015B7 CD 14 E4         [ 4] 3737         CALL     COMPI
      0015BA 04 BF                 3738         .word BRAN
      0015BC CD 0B CF         [ 4] 3739         CALL     HERE
      0015BF CD 0A E1         [ 4] 3740         CALL     ZERO
      0015C2 CD 14 9F         [ 4] 3741         CALL     COMMA
      0015C5 CD 05 AA         [ 4] 3742         CALL     SWAPP
      0015C8 CD 0B CF         [ 4] 3743         CALL     HERE
      0015CB CD 07 34         [ 4] 3744         call ADRADJ 
      0015CE CD 05 AA         [ 4] 3745         CALL     SWAPP
      0015D1 CC 04 DC         [ 2] 3746         JP     STORE
                                   3747 
                                   3748 ;       AHEAD       ( -- A )
                                   3749 ;       Compile a forward branch instruction.
      0015D4 15 B2                 3750         .word      LINK
                           0015D6  3751 LINK = . 
      0015D6 85                    3752 	.byte      IMEDD+5
      0015D7 41 48 45 41 44        3753         .ascii     "AHEAD"
      0015DC                       3754 AHEAD:
      0015DC CD 14 E4         [ 4] 3755         CALL     COMPI
      0015DF 04 BF                 3756         .word BRAN
      0015E1 CD 0B CF         [ 4] 3757         CALL     HERE
      0015E4 CD 0A E1         [ 4] 3758         CALL     ZERO
      0015E7 CC 14 9F         [ 2] 3759         JP     COMMA
                                   3760 
                                   3761 ;       WHILE       ( a -- A a )
                                   3762 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015EA 15 D6                 3763         .word      LINK
                           0015EC  3764 LINK = . 
      0015EC 85                    3765 	.byte      IMEDD+5
      0015ED 57 48 49 4C 45        3766         .ascii     "WHILE"
      0015F2                       3767 WHILE:
      0015F2 CD 14 E4         [ 4] 3768         CALL     COMPI
      0015F5 04 A8                 3769         .word QBRAN
      0015F7 CD 0B CF         [ 4] 3770         CALL     HERE
      0015FA CD 0A E1         [ 4] 3771         CALL     ZERO
      0015FD CD 14 9F         [ 4] 3772         CALL     COMMA
      001600 CC 05 AA         [ 2] 3773         JP     SWAPP
                                   3774 
                                   3775 ;       REPEAT      ( A a -- )
                                   3776 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001603 15 EC                 3777         .word      LINK
                           001605  3778 LINK = . 
      001605 86                    3779         .byte      IMEDD+6
      001606 52 45 50 45 41 54     3780         .ascii     "REPEAT"
      00160C                       3781 REPEA:
      00160C CD 14 E4         [ 4] 3782         CALL     COMPI
      00160F 04 BF                 3783         .word BRAN
      001611 CD 07 34         [ 4] 3784         call ADRADJ 
      001614 CD 14 9F         [ 4] 3785         CALL     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001617 CD 0B CF         [ 4] 3786         CALL     HERE
      00161A CD 07 34         [ 4] 3787         call ADRADJ 
      00161D CD 05 AA         [ 4] 3788         CALL     SWAPP
      001620 CC 04 DC         [ 2] 3789         JP     STORE
                                   3790 
                                   3791 ;       AFT         ( a -- a A )
                                   3792 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001623 16 05                 3793         .word      LINK
                           001625  3794 LINK = . 
      001625 83                    3795 	.byte      IMEDD+3
      001626 41 46 54              3796         .ascii     "AFT"
      001629                       3797 AFT:
      001629 CD 05 90         [ 4] 3798         CALL     DROP
      00162C CD 15 DC         [ 4] 3799         CALL     AHEAD
      00162F CD 0B CF         [ 4] 3800         CALL     HERE
      001632 CC 05 AA         [ 2] 3801         JP     SWAPP
                                   3802 
                                   3803 ;       ABORT"      ( -- ; <string> )
                                   3804 ;       Conditional abort with an error message.
      001635 16 25                 3805         .word      LINK
                           001637  3806 LINK = . 
      001637 86                    3807 	.byte      IMEDD+6
      001638 41 42 4F 52 54        3808         .ascii     "ABORT"
      00163D 22                    3809         .byte      '"'
      00163E                       3810 ABRTQ:
      00163E CD 14 E4         [ 4] 3811         CALL     COMPI
      001641 13 62                 3812         .word ABORQ
      001643 CC 15 14         [ 2] 3813         JP     STRCQ
                                   3814 
                                   3815 ;       $"     ( -- ; <string> )
                                   3816 ;       Compile an inline string literal.
      001646 16 37                 3817         .word      LINK
                           001648  3818 LINK = . 
      001648 82                    3819 	.byte      IMEDD+2
      001649 24 22                 3820         .byte     '$','"'
      00164B                       3821 STRQ:
      00164B CD 14 E4         [ 4] 3822         CALL     COMPI
      00164E 0F 7C                 3823         .word STRQP 
      001650 CC 15 14         [ 2] 3824         JP     STRCQ
                                   3825 
                                   3826 ;       ."          ( -- ; <string> )
                                   3827 ;       Compile an inline string literal to be typed out at run time.
      001653 16 48                 3828         .word      LINK
                           001655  3829 LINK = . 
      001655 82                    3830 	.byte      IMEDD+2
      001656 2E 22                 3831         .byte     '.','"'
      001658                       3832 DOTQ:
      001658 CD 14 E4         [ 4] 3833         CALL     COMPI
      00165B 0F 86                 3834         .word DOTQP 
      00165D CC 15 14         [ 2] 3835         JP     STRCQ
                                   3836 
                                   3837 ;; Name compiler
                                   3838 
                                   3839 ;       ?UNIQUE ( a -- a )
                                   3840 ;       Display a warning message
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3841 ;       if word already exists.
      001660 16 55                 3842         .word      LINK
                           001662  3843 LINK = . 
      001662 07                    3844         .byte      7
      001663 3F 55 4E 49 51 55 45  3845         .ascii     "?UNIQUE"
      00166A                       3846 UNIQU:
      00166A CD 05 9A         [ 4] 3847         CALL     DUPP
      00166D CD 12 56         [ 4] 3848         CALL     NAMEQ   ;?name exists
      001670 CD 04 A8         [ 4] 3849         CALL     QBRAN
      001673 16 89                 3850         .word      UNIQ1
      001675 CD 0F 86         [ 4] 3851         CALL     DOTQP   ;redef are OK
      001678 07                    3852         .byte       7
      001679 20 72 65 44 65 66 20  3853         .ascii     " reDef "       
      001680 CD 05 C4         [ 4] 3854         CALL     OVER
      001683 CD 0B B8         [ 4] 3855         CALL     COUNT
      001686 CD 0F 29         [ 4] 3856         CALL     TYPES   ;just in case
      001689 CC 05 90         [ 2] 3857 UNIQ1:  JP     DROP
                                   3858 
                                   3859 ;       $,n     ( na -- )
                                   3860 ;       Build a new dictionary name
                                   3861 ;       using string at na.
                                   3862 ; compile dans l'espace des variables 
      00168C 16 62                 3863         .word      LINK
                           00168E  3864 LINK = . 
      00168E 03                    3865         .byte      3
      00168F 24 2C 6E              3866         .ascii     "$,n"
      001692                       3867 SNAME:
      001692 CD 05 9A         [ 4] 3868         CALL     DUPP
      001695 CD 05 11         [ 4] 3869         CALL     CAT     ;?null input
      001698 CD 04 A8         [ 4] 3870         CALL     QBRAN
      00169B 16 C8                 3871         .word      PNAM1
      00169D CD 16 6A         [ 4] 3872         CALL     UNIQU   ;?redefinition
      0016A0 CD 05 9A         [ 4] 3873         CALL     DUPP
      0016A3 CD 0B B8         [ 4] 3874         CALL     COUNT
      0016A6 CD 07 95         [ 4] 3875         CALL     PLUS
      0016A9 CD 06 E8         [ 4] 3876         CALL     VPP
      0016AC CD 04 DC         [ 4] 3877         CALL     STORE
      0016AF CD 05 9A         [ 4] 3878         CALL     DUPP
      0016B2 CD 07 06         [ 4] 3879         CALL     LAST
      0016B5 CD 04 DC         [ 4] 3880         CALL     STORE   ;save na for vocabulary link
      0016B8 CD 0A 59         [ 4] 3881         CALL     CELLM   ;link address
      0016BB CD 06 DA         [ 4] 3882         CALL     CNTXT
      0016BE CD 04 F3         [ 4] 3883         CALL     AT
      0016C1 CD 05 AA         [ 4] 3884         CALL     SWAPP
      0016C4 CD 04 DC         [ 4] 3885         CALL     STORE
      0016C7 81               [ 4] 3886         RET     ;save code pointer
      0016C8 CD 0F 7C         [ 4] 3887 PNAM1:  CALL     STRQP
      0016CB 05                    3888         .byte      5
      0016CC 20 6E 61 6D 65        3889         .ascii     " name" ;null input
      0016D1 CC 13 6A         [ 2] 3890         JP     ABOR1
                                   3891 
                                   3892 ;; FORTH compiler
                                   3893 
                                   3894 ;       $COMPILE        ( a -- )
                                   3895 ;       Compile next word to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3896 ;       dictionary as a token or literal.
      0016D4 16 8E                 3897         .word      LINK
                           0016D6  3898 LINK = . 
      0016D6 08                    3899         .byte      8
      0016D7 24 43 4F 4D 50 49 4C  3900         .ascii     "$COMPILE"
             45
      0016DF                       3901 SCOMP:
      0016DF CD 12 56         [ 4] 3902         CALL     NAMEQ
      0016E2 CD 07 44         [ 4] 3903         CALL     QDUP    ;?defined
      0016E5 CD 04 A8         [ 4] 3904         CALL     QBRAN
      0016E8 17 00                 3905         .word      SCOM2
      0016EA CD 04 F3         [ 4] 3906         CALL     AT
      0016ED CD 04 75         [ 4] 3907         CALL     DOLIT
      0016F0 80 00                 3908         .word     0x8000	;  IMEDD*256
      0016F2 CD 05 E6         [ 4] 3909         CALL     ANDD    ;?immediate
      0016F5 CD 04 A8         [ 4] 3910         CALL     QBRAN
      0016F8 16 FD                 3911         .word      SCOM1
      0016FA CC 04 CF         [ 2] 3912         JP     EXECU
      0016FD CC 17 9A         [ 2] 3913 SCOM1:  JP     JSRC
      001700 CD 0D F4         [ 4] 3914 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001703 CD 04 A8         [ 4] 3915         CALL     QBRAN
      001706 13 6A                 3916         .word      ABOR1
      001708 CC 15 06         [ 2] 3917         JP     LITER
                                   3918 
                                   3919 ;       OVERT   ( -- )
                                   3920 ;       Link a new word into vocabulary.
      00170B 16 D6                 3921         .word      LINK
                           00170D  3922 LINK = . 
      00170D 05                    3923         .byte      5
      00170E 4F 56 45 52 54        3924         .ascii     "OVERT"
      001713                       3925 OVERT:
      001713 CD 07 06         [ 4] 3926         CALL     LAST
      001716 CD 04 F3         [ 4] 3927         CALL     AT
      001719 CD 06 DA         [ 4] 3928         CALL     CNTXT
      00171C CC 04 DC         [ 2] 3929         JP     STORE
                                   3930 
                                   3931 ;       ;       ( -- )
                                   3932 ;       Terminate a colon definition.
      00171F 17 0D                 3933         .word      LINK
                           001721  3934 LINK = . 
      001721 C1                    3935 	.byte      IMEDD+COMPO+1
      001722 3B                    3936         .ascii     ";"
      001723                       3937 SEMIS:
                           000001  3938 .if OPTIMIZE ; more compact and faster
      001723 CD 04 75         [ 4] 3939         call DOLIT 
      001726 00 81                 3940         .word 0x81   ; opcode for RET 
      001728 CD 14 B6         [ 4] 3941         call CCOMMA 
                           000000  3942 .else
                                   3943         CALL     COMPI
                                   3944         .word EXIT 
                                   3945 .endif 
      00172B CD 13 CB         [ 4] 3946         CALL     LBRAC
      00172E CD 17 13         [ 4] 3947         call OVERT 
      001731 CD 21 33         [ 4] 3948         CALL FMOVE
      001734 CD 07 44         [ 4] 3949         call QDUP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001737 CD 04 A8         [ 4] 3950         call QBRAN 
      00173A 18 6A                 3951         .word SET_RAMLAST 
      00173C CD 21 C7         [ 4] 3952         CALL UPDATPTR
      00173F 81               [ 4] 3953         RET 
                                   3954 
                                   3955 
                                   3956 ;       Terminate an ISR definition 
                                   3957 ;       retourn ca of ISR as double
                                   3958 ;       I; ( -- ud )
      001740 17 21                 3959         .word LINK 
                           001742  3960         LINK=.
      001742 C2                    3961         .byte 2+IMEDD+COMPO 
      001743 49 3B                 3962         .ascii "I;" 
      001745                       3963 ISEMI:
      001745 1D 00 02         [ 2] 3964         subw x,#CELLL  
      001748 90 AE 00 80      [ 2] 3965         ldw y,#IRET_CODE 
      00174C FF               [ 2] 3966         ldw (x),y 
      00174D CD 14 B6         [ 4] 3967         call CCOMMA
      001750 CD 13 CB         [ 4] 3968         call LBRAC 
      001753 CD 22 0C         [ 4] 3969         call IFMOVE
      001756 CD 07 44         [ 4] 3970         call QDUP 
      001759 CD 04 A8         [ 4] 3971         CALL QBRAN 
      00175C 18 6A                 3972         .word SET_RAMLAST
      00175E CD 06 F6         [ 4] 3973         CALL CPP
      001761 CD 04 F3         [ 4] 3974         call AT 
      001764 CD 05 AA         [ 4] 3975         call SWAPP 
      001767 CD 06 F6         [ 4] 3976         CALL CPP 
      00176A CD 04 DC         [ 4] 3977         call STORE 
      00176D CD 1B C4         [ 4] 3978         call UPDATCP 
      001770 CD 1B 81         [ 4] 3979         call EEPVP 
      001773 CD 05 90         [ 4] 3980         call DROP 
      001776 CD 04 F3         [ 4] 3981         call AT 
      001779 CD 06 E8         [ 4] 3982         call VPP 
      00177C CD 04 DC         [ 4] 3983         call STORE 
      00177F CC 0A E1         [ 2] 3984         jp ZERO
      001782 81               [ 4] 3985         ret           
                                   3986         
                                   3987 
                                   3988 ;       ]       ( -- )
                                   3989 ;       Start compiling words in
                                   3990 ;       input stream.
      001783 17 42                 3991         .word      LINK
                           001785  3992 LINK = . 
      001785 01                    3993         .byte      1
      001786 5D                    3994         .ascii     "]"
      001787                       3995 RBRAC:
      001787 CD 04 75         [ 4] 3996         CALL   DOLIT
      00178A 16 DF                 3997         .word  SCOMP
      00178C CD 06 B8         [ 4] 3998         CALL   TEVAL
      00178F CC 04 DC         [ 2] 3999         JP     STORE
                                   4000 
                                   4001 ;       CALL,    ( ca -- )
                                   4002 ;       Compile a subroutine call.
      001792 17 85                 4003         .word      LINK
                           001794  4004 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001794 05                    4005         .byte      5
      001795 43 41 4C 4C 2C        4006         .ascii     "CALL,"
      00179A                       4007 JSRC:
      00179A CD 04 75         [ 4] 4008         CALL     DOLIT
      00179D 00 CD                 4009         .word     CALLL     ;CALL
      00179F CD 14 B6         [ 4] 4010         CALL     CCOMMA
      0017A2 CC 14 9F         [ 2] 4011         JP     COMMA
                                   4012 
                                   4013 ;       INIT-OFS ( -- )
                                   4014 ;       compute offset to adjust jump address 
                                   4015 ;       set variable OFFSET 
      0017A5 17 94                 4016         .word LINK 
                           0017A7  4017         LINK=.
      0017A7 08                    4018         .byte 8 
      0017A8 49 4E 49 54 2D 4F 46  4019         .ascii "INIT-OFS" 
             53
      0017B0                       4020 INITOFS:
      0017B0 CD 06 A7         [ 4] 4021         call TFLASH 
      0017B3 CD 04 F3         [ 4] 4022         CALL AT 
      0017B6 CD 05 9A         [ 4] 4023         CALL DUPP 
      0017B9 CD 04 A8         [ 4] 4024         call QBRAN
      0017BC 17 CD                 4025         .word 1$
      0017BE CD 05 90         [ 4] 4026         call DROP  
      0017C1 CD 06 F6         [ 4] 4027         call CPP 
      0017C4 CD 04 F3         [ 4] 4028         call AT 
      0017C7 CD 0B CF         [ 4] 4029         call HERE
      0017CA CD 08 0E         [ 4] 4030         call SUBB 
      0017CD CD 07 2B         [ 4] 4031 1$:     call OFFSET 
      0017D0 CC 04 DC         [ 2] 4032         jp STORE  
                                   4033 
                                   4034 ;       :       ( -- ; <string> )
                                   4035 ;       Start a new colon definition
                                   4036 ;       using next word as its name.
      0017D3 17 A7                 4037         .word      LINK
                           0017D5  4038 LINK = . 
      0017D5 01                    4039         .byte      1
      0017D6 3A                    4040         .ascii     ":"
      0017D7                       4041 COLON:
      0017D7 CD 17 B0         [ 4] 4042         call INITOFS       
      0017DA CD 11 59         [ 4] 4043         CALL   TOKEN
      0017DD CD 16 92         [ 4] 4044         CALL   SNAME
      0017E0 CC 17 87         [ 2] 4045         JP     RBRAC
                                   4046 
                                   4047 ;       I:  ( -- )
                                   4048 ;       Start interrupt service routine definition
                                   4049 ;       those definition have no name.
      0017E3 17 D5                 4050         .word LINK
                           0017E5  4051         LINK=.
      0017E5 02                    4052         .byte 2 
      0017E6 49 3A                 4053         .ascii "I:" 
      0017E8                       4054 ICOLON:
      0017E8 CD 17 B0         [ 4] 4055         call INITOFS 
      0017EB CC 17 87         [ 2] 4056         jp RBRAC  
                                   4057 
                                   4058 ;       IMMEDIATE       ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4059 ;       Make last compiled word
                                   4060 ;       an immediate word.
      0017EE 17 E5                 4061         .word      LINK
                           0017F0  4062 LINK = . 
      0017F0 09                    4063         .byte      9
      0017F1 49 4D 4D 45 44 49 41  4064         .ascii     "IMMEDIATE"
             54 45
      0017FA                       4065 IMMED:
      0017FA CD 04 75         [ 4] 4066         CALL     DOLIT
      0017FD 80 00                 4067         .word     0x8000	;  IMEDD*256
      0017FF CD 07 06         [ 4] 4068         CALL     LAST
      001802 CD 04 F3         [ 4] 4069         CALL     AT
      001805 CD 04 F3         [ 4] 4070         CALL     AT
      001808 CD 05 FA         [ 4] 4071         CALL     ORR
      00180B CD 07 06         [ 4] 4072         CALL     LAST
      00180E CD 04 F3         [ 4] 4073         CALL     AT
      001811 CC 04 DC         [ 2] 4074         JP     STORE
                                   4075 
                                   4076 ;; Defining words
                                   4077 
                                   4078 ;       CREATE  ( -- ; <string> )
                                   4079 ;       Compile a new array
                                   4080 ;       without allocating space.
      001814 17 F0                 4081         .word      LINK
                           001816  4082 LINK = . 
      001816 06                    4083         .byte      6
      001817 43 52 45 41 54 45     4084         .ascii     "CREATE"
      00181D                       4085 CREAT:
      00181D CD 11 59         [ 4] 4086         CALL     TOKEN
      001820 CD 16 92         [ 4] 4087         CALL     SNAME
      001823 CD 17 13         [ 4] 4088         CALL     OVERT        
      001826 CD 14 E4         [ 4] 4089         CALL     COMPI 
      001829 06 47                 4090         .word DOVAR 
      00182B 81               [ 4] 4091         RET
                                   4092 
                                   4093 ;       VARIABLE        ( -- ; <string> )
                                   4094 ;       Compile a new variable
                                   4095 ;       initialized to 0.
      00182C 18 16                 4096         .word      LINK
                           00182E  4097 LINK = . 
      00182E 08                    4098         .byte      8
      00182F 56 41 52 49 41 42 4C  4099         .ascii     "VARIABLE"
             45
      001837                       4100 VARIA:
                                   4101 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001837 CD 0B CF         [ 4] 4102         CALL HERE
      00183A CD 05 9A         [ 4] 4103         CALL DUPP 
      00183D CD 0A 4A         [ 4] 4104         CALL CELLP
      001840 CD 06 E8         [ 4] 4105         CALL VPP 
      001843 CD 04 DC         [ 4] 4106         CALL STORE
      001846 CD 18 1D         [ 4] 4107         CALL CREAT
      001849 CD 05 9A         [ 4] 4108         CALL DUPP
      00184C CD 14 9F         [ 4] 4109         CALL COMMA
      00184F CD 0A E1         [ 4] 4110         CALL ZERO
      001852 CD 05 AA         [ 4] 4111         call SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001855 CD 04 DC         [ 4] 4112         CALL STORE
      001858 CD 21 33         [ 4] 4113         CALL FMOVE ; move definition to FLASH
      00185B CD 07 44         [ 4] 4114         CALL QDUP 
      00185E CD 04 A8         [ 4] 4115         CALL QBRAN 
      001861 18 6A                 4116         .word SET_RAMLAST   
      001863 CD 1B DB         [ 4] 4117         call UPDATVP  ; don't update if variable kept in RAM.
      001866 CD 21 C7         [ 4] 4118         CALL UPDATPTR
      001869 81               [ 4] 4119         RET         
      00186A                       4120 SET_RAMLAST: 
      00186A CD 07 06         [ 4] 4121         CALL LAST 
      00186D CD 04 F3         [ 4] 4122         CALL AT 
      001870 CD 07 19         [ 4] 4123         CALL RAMLAST 
      001873 CC 04 DC         [ 2] 4124         jp STORE  
                                   4125 
                                   4126 
                                   4127 ;       CONSTANT  ( n -- ; <string> )
                                   4128 ;       Compile a new constant 
                                   4129 ;       n CONSTANT name 
      001876 18 2E                 4130         .word LINK 
                           001878  4131         LINK=. 
      001878 08                    4132         .byte 8 
      001879 43 4F 4E 53 54 41 4E  4133         .ascii "CONSTANT" 
             54
      001881                       4134 CONSTANT:          
      001881 CD 11 59         [ 4] 4135         CALL TOKEN
      001884 CD 16 92         [ 4] 4136         CALL SNAME 
      001887 CD 17 13         [ 4] 4137         CALL OVERT 
      00188A CD 14 E4         [ 4] 4138         CALL COMPI 
      00188D 18 AB                 4139         .word DOCONST
      00188F CD 14 9F         [ 4] 4140         CALL COMMA 
      001892 CD 21 33         [ 4] 4141         CALL FMOVE
      001895 CD 07 44         [ 4] 4142         CALL QDUP 
      001898 CD 04 A8         [ 4] 4143         CALL QBRAN 
      00189B 18 6A                 4144         .word SET_RAMLAST  
      00189D CD 21 C7         [ 4] 4145         CALL UPDATPTR  
      0018A0 81               [ 4] 4146 1$:     RET          
                                   4147 
                                   4148 ; CONSTANT runtime semantic 
                                   4149 ; doCONST  ( -- n )
      0018A1 18 78                 4150         .word LINK 
                           0018A3  4151         LINK=.
      0018A3 07                    4152         .byte 7
      0018A4 44 4F 43 4F 4E 53 54  4153         .ascii "DOCONST"
      0018AB                       4154 DOCONST:
      0018AB 1D 00 02         [ 2] 4155         subw x,#CELLL
      0018AE 90 85            [ 2] 4156         popw y 
      0018B0 90 FE            [ 2] 4157         ldw y,(y) 
      0018B2 FF               [ 2] 4158         ldw (x),y 
      0018B3 81               [ 4] 4159         ret 
                                   4160 
                                   4161 ;----------------------------------
                                   4162 ; create double constant 
                                   4163 ; DCONST ( d -- ; <string> )
                                   4164 ;----------------------------------
      0018B4 18 A3                 4165     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                           0018B6  4166     LINK=.
      0018B6 06                    4167     .byte 6 
      0018B7 44 43 4F 4E 53 54     4168     .ascii "DCONST"
      0018BD                       4169 DCONST:
      0018BD CD 11 59         [ 4] 4170         CALL TOKEN
      0018C0 CD 16 92         [ 4] 4171         CALL SNAME 
      0018C3 CD 17 13         [ 4] 4172         CALL OVERT 
      0018C6 CD 14 E4         [ 4] 4173         CALL COMPI 
      0018C9 18 EC                 4174         .word DO_DCONST
      0018CB CD 14 9F         [ 4] 4175         CALL COMMA
      0018CE CD 14 9F         [ 4] 4176         CALL COMMA  
      0018D1 CD 21 33         [ 4] 4177         CALL FMOVE
      0018D4 CD 07 44         [ 4] 4178         CALL QDUP 
      0018D7 CD 04 A8         [ 4] 4179         CALL QBRAN 
      0018DA 18 6A                 4180         .word SET_RAMLAST  
      0018DC CD 21 C7         [ 4] 4181         CALL UPDATPTR  
      0018DF 81               [ 4] 4182 1$:     RET          
                                   4183     
                                   4184 ;----------------------------------
                                   4185 ; runtime for DCONST 
                                   4186 ; stack double constant 
                                   4187 ; DO-DCONST ( -- d )
                                   4188 ;-----------------------------------
      0018E0 18 B6                 4189         .word LINK 
                           0018E2  4190         LINK=.
      0018E2 09                    4191         .byte 9 
      0018E3 44 4F 2D 44 43 4F 4E  4192         .ascii "DO-DCONST"
             53 54
      0018EC                       4193 DO_DCONST:
      0018EC 90 85            [ 2] 4194     popw y 
      0018EE 90 BF 24         [ 2] 4195     ldw YTEMP,y 
      0018F1 1D 00 04         [ 2] 4196     subw x,#2*CELLL 
      0018F4 90 FE            [ 2] 4197     ldw y,(y)
      0018F6 FF               [ 2] 4198     ldw (x),y 
      0018F7 90 BE 24         [ 2] 4199     ldw y,YTEMP 
      0018FA 90 EE 02         [ 2] 4200     ldw y,(2,y)
      0018FD EF 02            [ 2] 4201     ldw (2,x),y 
      0018FF 81               [ 4] 4202     ret 
                                   4203 
                                   4204 ;; Tools
                                   4205 
                                   4206 ;       _TYPE   ( b u -- )
                                   4207 ;       Display a string. Filter
                                   4208 ;       non-printing characters.
      001900 18 E2                 4209         .word      LINK
                           001902  4210 LINK = . 
      001902 05                    4211         .byte      5
      001903 5F 54 59 50 45        4212         .ascii     "_TYPE"
      001908                       4213 UTYPE:
      001908 CD 05 63         [ 4] 4214         CALL     TOR     ;start count down loop
      00190B 20 0F            [ 2] 4215         JRA     UTYP2   ;skip first pass
      00190D CD 05 9A         [ 4] 4216 UTYP1:  CALL     DUPP
      001910 CD 05 11         [ 4] 4217         CALL     CAT
      001913 CD 0B 0B         [ 4] 4218         CALL     TCHAR
      001916 CD 04 34         [ 4] 4219         CALL     EMIT    ;display only printable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001919 CD 0A 75         [ 4] 4220         CALL     ONEP    ;increment address
      00191C CD 04 89         [ 4] 4221 UTYP2:  CALL     DONXT
      00191F 19 0D                 4222         .word      UTYP1   ;loop till done
      001921 CC 05 90         [ 2] 4223         JP     DROP
                                   4224 
                                   4225 ;       dm+     ( a u -- a )
                                   4226 ;       Dump u bytes from ,
                                   4227 ;       leaving a+u on  stack.
      001924 19 02                 4228         .word      LINK
                           001926  4229 LINK = . 
      001926 03                    4230         .byte      3
      001927 64 6D 2B              4231         .ascii     "dm+"
      00192A                       4232 DUMPP:
      00192A CD 05 C4         [ 4] 4233         CALL     OVER
      00192D CD 04 75         [ 4] 4234         CALL     DOLIT
      001930 00 04                 4235         .word      4
      001932 CD 0F AF         [ 4] 4236         CALL     UDOTR   ;display address
      001935 CD 0E FF         [ 4] 4237         CALL     SPACE
      001938 CD 05 63         [ 4] 4238         CALL     TOR     ;start count down loop
      00193B 20 11            [ 2] 4239         JRA     PDUM2   ;skip first pass
      00193D CD 05 9A         [ 4] 4240 PDUM1:  CALL     DUPP
      001940 CD 05 11         [ 4] 4241         CALL     CAT
      001943 CD 04 75         [ 4] 4242         CALL     DOLIT
      001946 00 03                 4243         .word      3
      001948 CD 0F AF         [ 4] 4244         CALL     UDOTR   ;display numeric data
      00194B CD 0A 75         [ 4] 4245         CALL     ONEP    ;increment address
      00194E CD 04 89         [ 4] 4246 PDUM2:  CALL     DONXT
      001951 19 3D                 4247         .word      PDUM1   ;loop till done
      001953 81               [ 4] 4248         RET
                                   4249 
                                   4250 ;       DUMP    ( a u -- )
                                   4251 ;       Dump u bytes from a,
                                   4252 ;       in a formatted manner.
      001954 19 26                 4253         .word      LINK
                           001956  4254 LINK = . 
      001956 04                    4255         .byte      4
      001957 44 55 4D 50           4256         .ascii     "DUMP"
      00195B                       4257 DUMP:
      00195B CD 06 57         [ 4] 4258         CALL     BASE
      00195E CD 04 F3         [ 4] 4259         CALL     AT
      001961 CD 05 63         [ 4] 4260         CALL     TOR
      001964 CD 0D 87         [ 4] 4261         CALL     HEX     ;save radix, set hex
      001967 CD 04 75         [ 4] 4262         CALL     DOLIT
      00196A 00 10                 4263         .word      16
      00196C CD 09 9B         [ 4] 4264         CALL     SLASH   ;change count to lines
      00196F CD 05 63         [ 4] 4265         CALL     TOR     ;start count down loop
      001972 CD 0F 47         [ 4] 4266 DUMP1:  CALL     CR
      001975 CD 04 75         [ 4] 4267         CALL     DOLIT
      001978 00 10                 4268         .word      16
      00197A CD 07 80         [ 4] 4269         CALL     DDUP
      00197D CD 19 2A         [ 4] 4270         CALL     DUMPP   ;display numeric
      001980 CD 07 55         [ 4] 4271         CALL     ROT
      001983 CD 07 55         [ 4] 4272         CALL     ROT
      001986 CD 0E FF         [ 4] 4273         CALL     SPACE
      001989 CD 0E FF         [ 4] 4274         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00198C CD 19 08         [ 4] 4275         CALL     UTYPE   ;display printable characters
      00198F CD 04 89         [ 4] 4276         CALL     DONXT
      001992 19 72                 4277         .word      DUMP1   ;loop till done
      001994 CD 05 90         [ 4] 4278 DUMP3:  CALL     DROP
      001997 CD 05 44         [ 4] 4279         CALL     RFROM
      00199A CD 06 57         [ 4] 4280         CALL     BASE
      00199D CC 04 DC         [ 2] 4281         JP     STORE   ;restore radix
                                   4282 
                                   4283 ;       .S      ( ... -- ... )
                                   4284 ;        Display  contents of stack.
      0019A0 19 56                 4285         .word      LINK
                           0019A2  4286 LINK = . 
      0019A2 02                    4287         .byte      2
      0019A3 2E 53                 4288         .ascii     ".S"
      0019A5                       4289 DOTS:
      0019A5 CD 0F 47         [ 4] 4290         CALL     CR
      0019A8 CD 0B 23         [ 4] 4291         CALL     DEPTH   ;stack depth
      0019AB CD 05 63         [ 4] 4292         CALL     TOR     ;start count down loop
      0019AE 20 09            [ 2] 4293         JRA     DOTS2   ;skip first pass
      0019B0 CD 05 57         [ 4] 4294 DOTS1:  CALL     RAT
      0019B3 CD 0B 3A         [ 4] 4295 	CALL     PICK
      0019B6 CD 0F E2         [ 4] 4296         CALL     DOT     ;index stack, display contents
      0019B9 CD 04 89         [ 4] 4297 DOTS2:  CALL     DONXT
      0019BC 19 B0                 4298         .word      DOTS1   ;loop till done
      0019BE CD 0F 86         [ 4] 4299         CALL     DOTQP
      0019C1 05                    4300         .byte      5
      0019C2 20 3C 73 70 20        4301         .ascii     " <sp "
      0019C7 81               [ 4] 4302         RET
                                   4303 
                                   4304 ;       >NAME   ( ca -- na | F )
                                   4305 ;       Convert code address
                                   4306 ;       to a name address.
      0019C8 19 A2                 4307         .word      LINK
                           0019CA  4308 LINK = . 
      0019CA 05                    4309         .byte      5
      0019CB 3E 4E 41 4D 45        4310         .ascii     ">NAME"
      0019D0                       4311 TNAME:
      0019D0 CD 06 DA         [ 4] 4312         CALL     CNTXT   ;vocabulary link
      0019D3 CD 04 F3         [ 4] 4313 TNAM2:  CALL     AT
      0019D6 CD 05 9A         [ 4] 4314         CALL     DUPP    ;?last word in a vocabulary
      0019D9 CD 04 A8         [ 4] 4315         CALL     QBRAN
      0019DC 19 F7                 4316         .word      TNAM4
      0019DE CD 07 80         [ 4] 4317         CALL     DDUP
      0019E1 CD 11 67         [ 4] 4318         CALL     NAMET
      0019E4 CD 06 0F         [ 4] 4319         CALL     XORR    ;compare
      0019E7 CD 04 A8         [ 4] 4320         CALL     QBRAN
      0019EA 19 F1                 4321         .word      TNAM3
      0019EC CD 0A 59         [ 4] 4322         CALL     CELLM   ;continue with next word
      0019EF 20 E2            [ 2] 4323         JRA     TNAM2
      0019F1 CD 05 AA         [ 4] 4324 TNAM3:  CALL     SWAPP
      0019F4 CC 05 90         [ 2] 4325         JP     DROP
      0019F7 CD 07 75         [ 4] 4326 TNAM4:  CALL     DDROP
      0019FA CC 0A E1         [ 2] 4327         JP     ZERO
                                   4328 
                                   4329 ;       .ID     ( na -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4330 ;        Display  name at address.
      0019FD 19 CA                 4331         .word      LINK
                           0019FF  4332 LINK = . 
      0019FF 03                    4333         .byte      3
      001A00 2E 49 44              4334         .ascii     ".ID"
      001A03                       4335 DOTID:
      001A03 CD 07 44         [ 4] 4336         CALL     QDUP    ;if zero no name
      001A06 CD 04 A8         [ 4] 4337         CALL     QBRAN
      001A09 1A 19                 4338         .word      DOTI1
      001A0B CD 0B B8         [ 4] 4339         CALL     COUNT
      001A0E CD 04 75         [ 4] 4340         CALL     DOLIT
      001A11 00 1F                 4341         .word      0x1F
      001A13 CD 05 E6         [ 4] 4342         CALL     ANDD    ;mask lexicon bits
      001A16 CC 19 08         [ 2] 4343         JP     UTYPE
      001A19 CD 0F 86         [ 4] 4344 DOTI1:  CALL     DOTQP
      001A1C 09                    4345         .byte      9
      001A1D 20 6E 6F 4E 61 6D 65  4346         .ascii     " noName"
      001A24 81               [ 4] 4347         RET
                                   4348 
                           000000  4349 WANT_SEE=0
                           000000  4350 .if WANT_SEE 
                                   4351 ;       SEE     ( -- ; <string> )
                                   4352 ;       A simple decompiler.
                                   4353 ;       Updated for byte machines.
                                   4354         .word      LINK
                                   4355 LINK = . 
                                   4356         .byte      3
                                   4357         .ascii     "SEE"
                                   4358 SEE:
                                   4359         CALL     TICK    ;starting address
                                   4360         CALL     CR
                                   4361         CALL     ONEM
                                   4362 SEE1:   CALL     ONEP
                                   4363         CALL     DUPP
                                   4364         CALL     AT
                                   4365         CALL     DUPP
                                   4366         CALL     QBRAN
                                   4367         .word    SEE2
                                   4368         CALL     TNAME   ;?is it a name
                                   4369 SEE2:   CALL     QDUP    ;name address or zero
                                   4370         CALL     QBRAN
                                   4371         .word    SEE3
                                   4372         CALL     SPACE
                                   4373         CALL     DOTID   ;display name
                                   4374         CALL     ONEP
                                   4375         JRA      SEE4
                                   4376 SEE3:   CALL     DUPP
                                   4377         CALL     CAT
                                   4378         CALL     UDOT    ;display number
                                   4379 SEE4:   CALL     NUFQ    ;user control
                                   4380         CALL     QBRAN
                                   4381         .word    SEE1
                                   4382         JP     DROP
                                   4383 .endif ; WANT_SEE 
                                   4384 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4385 ;       WORDS   ( -- )
                                   4386 ;       Display names in vocabulary.
      001A25 19 FF                 4387         .word      LINK
                           001A27  4388 LINK = . 
      001A27 05                    4389         .byte      5
      001A28 57 4F 52 44 53        4390         .ascii     "WORDS"
      001A2D                       4391 WORDS:
      001A2D CD 0F 47         [ 4] 4392         CALL     CR
      001A30 CD 06 DA         [ 4] 4393         CALL     CNTXT   ;only in context
      001A33 CD 04 F3         [ 4] 4394 WORS1:  CALL     AT
      001A36 CD 07 44         [ 4] 4395         CALL     QDUP    ;?at end of list
      001A39 CD 04 A8         [ 4] 4396         CALL     QBRAN
      001A3C 1A 4F                 4397         .word      WORS2
      001A3E CD 05 9A         [ 4] 4398         CALL     DUPP
      001A41 CD 0E FF         [ 4] 4399         CALL     SPACE
      001A44 CD 1A 03         [ 4] 4400         CALL     DOTID   ;display a name
      001A47 CD 0A 59         [ 4] 4401         CALL     CELLM
      001A4A CD 04 BF         [ 4] 4402         CALL     BRAN
      001A4D 1A 33                 4403         .word      WORS1
      001A4F 81               [ 4] 4404 WORS2:  RET
                                   4405 
                                   4406         
                                   4407 ;; Hardware reset
                                   4408 
                                   4409 ;       hi      ( -- )
                                   4410 ;       Display sign-on message.
      001A50 1A 27                 4411         .word      LINK
                           001A52  4412 LINK = . 
      001A52 02                    4413         .byte      2
      001A53 68 69                 4414         .ascii     "hi"
      001A55                       4415 HI:
      001A55 CD 0F 47         [ 4] 4416         CALL     CR
      001A58 CD 0F 86         [ 4] 4417         CALL     DOTQP   ;initialize I/O
      001A5B 0F                    4418         .byte      15
      001A5C 73 74 6D 38 65 46 6F  4419         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A68 33                    4420 	.byte      VER+'0'
      001A69 2E                    4421         .byte      '.' 
      001A6A 30                    4422 	.byte      EXT+'0' ;version
      001A6B CD 0F 86         [ 4] 4423         CALL    DOTQP
                           000001  4424 .if NUCLEO          
      001A6E 12                    4425         .byte 18
      001A6F 20 6F 6E 20 4E 55 43  4426         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4427 .endif
                           000000  4428 .if DISCOVERY
                                   4429         .byte 19
                                   4430         .ascii  " on STM8S-DISCOVERY"
                                   4431 .endif
                           000000  4432 .if DOORBELL
                                   4433         .byte 16
                                   4434         .ascii " on stm8s105k6b6"
                                   4435 .endif
      001A81 CC 0F 47         [ 2] 4436         JP     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437 
                           000000  4438 WANT_DEBUG=0
                           000000  4439 .if WANT_DEBUG 
                                   4440 ;       DEBUG      ( -- )
                                   4441 ;       Display sign-on message.
                                   4442 ;        .word      LINK
                                   4443 LINK = . 
                                   4444         .byte      5
                                   4445         .ascii     "DEBUG"
                                   4446 DEBUG:
                                   4447 	CALL DOLIT
                                   4448 	.word 0x65
                                   4449 	CALL EMIT
                                   4450 	CALL DOLIT
                                   4451 	.word 0
                                   4452  	CALL ZLESS 
                                   4453 	CALL DOLIT
                                   4454 	.word 0xFFFE
                                   4455 	CALL ZLESS 
                                   4456 	CALL UPLUS 
                                   4457  	CALL DROP 
                                   4458 	CALL DOLIT
                                   4459 	.word 3
                                   4460 	CALL UPLUS 
                                   4461 	CALL UPLUS 
                                   4462  	CALL DROP
                                   4463 	CALL DOLIT
                                   4464 	.word 0x43
                                   4465 	CALL UPLUS 
                                   4466  	CALL DROP
                                   4467 	CALL EMIT
                                   4468 	CALL DOLIT
                                   4469 	.word 0x4F
                                   4470 	CALL DOLIT
                                   4471 	.word 0x6F
                                   4472  	CALL XORR
                                   4473 	CALL DOLIT
                                   4474 	.word 0xF0
                                   4475  	CALL ANDD
                                   4476 	CALL DOLIT
                                   4477 	.word 0x4F
                                   4478  	CALL ORR
                                   4479 	CALL EMIT
                                   4480 	CALL DOLIT
                                   4481 	.word 8
                                   4482 	CALL DOLIT
                                   4483 	.word 6
                                   4484  	CALL SWAPP
                                   4485 	CALL OVER
                                   4486 	CALL XORR
                                   4487 	CALL DOLIT
                                   4488 	.word 3
                                   4489 	CALL ANDD 
                                   4490 	CALL ANDD
                                   4491 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4492 	.word 0x70
                                   4493 	CALL UPLUS 
                                   4494 	CALL DROP
                                   4495 	CALL EMIT
                                   4496 	CALL DOLIT
                                   4497 	.word 0
                                   4498 	CALL QBRAN
                                   4499 	.word DEBUG1
                                   4500 	CALL DOLIT
                                   4501 	.word 0x3F
                                   4502 DEBUG1:
                                   4503 	CALL DOLIT
                                   4504 	.word 0xFFFF
                                   4505 	CALL QBRAN
                                   4506 	.word DEBUG2
                                   4507 	CALL DOLIT
                                   4508 	.word 0x74
                                   4509 	CALL BRAN
                                   4510 	.word DEBUG3
                                   4511 DEBUG2:
                                   4512 	CALL DOLIT
                                   4513 	.word 0x21
                                   4514 DEBUG3:
                                   4515 	CALL EMIT
                                   4516 	CALL DOLIT
                                   4517 	.word 0x68
                                   4518 	CALL DOLIT
                                   4519 	.word 0x80
                                   4520 	CALL STORE
                                   4521 	CALL DOLIT
                                   4522 	.word 0x80
                                   4523 	CALL AT
                                   4524 	CALL EMIT
                                   4525 	CALL DOLIT
                                   4526 	.word 0x4D
                                   4527 	CALL TOR
                                   4528 	CALL RAT
                                   4529 	CALL RFROM
                                   4530 	CALL ANDD
                                   4531 	CALL EMIT
                                   4532 	CALL DOLIT
                                   4533 	.word 0x61
                                   4534 	CALL DOLIT
                                   4535 	.word 0xA
                                   4536 	CALL TOR
                                   4537 DEBUG4:
                                   4538 	CALL DOLIT
                                   4539 	.word 1
                                   4540 	CALL UPLUS 
                                   4541 	CALL DROP
                                   4542 	CALL DONXT
                                   4543 	.word DEBUG4
                                   4544 	CALL EMIT
                                   4545 	CALL DOLIT
                                   4546 	.word 0x656D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 	CALL DOLIT
                                   4548 	.word 0x100
                                   4549 	CALL UMSTA
                                   4550 	CALL SWAPP
                                   4551 	CALL DOLIT
                                   4552 	.word 0x100
                                   4553 	CALL UMSTA
                                   4554 	CALL SWAPP 
                                   4555 	CALL DROP
                                   4556 	CALL EMIT
                                   4557 	CALL EMIT
                                   4558 	CALL DOLIT
                                   4559 	.word 0x2043
                                   4560 	CALL DOLIT
                                   4561 	.word 0
                                   4562 	CALL DOLIT
                                   4563 	.word 0x100
                                   4564 	CALL UMMOD
                                   4565 	CALL EMIT
                                   4566 	CALL EMIT
                                   4567 	;JP ORIG
                                   4568 	RET
                                   4569 .endif ; WANT_DEBUG 
                                   4570 
                                   4571 
                                   4572 ;       'BOOT   ( -- a )
                                   4573 ;       The application startup vector.
      001A84 1A 52                 4574         .word      LINK
                           001A86  4575 LINK = . 
      001A86 05                    4576         .byte      5
      001A87 27 42 4F 4F 54        4577         .ascii     "'BOOT"
      001A8C                       4578 TBOOT:
      001A8C CD 06 47         [ 4] 4579         CALL     DOVAR
      001A8F 40 02                 4580         .word    APP_RUN      ;application to boot
                                   4581 
                                   4582 ;       COLD    ( -- )
                                   4583 ;       The hilevel cold start s=ence.
      001A91 1A 86                 4584         .word      LINK
                           001A93  4585         LINK = . 
      001A93 04                    4586         .byte      4
      001A94 43 4F 4C 44           4587         .ascii     "COLD"
      001A98                       4588 COLD:
                           000000  4589 .if WANT_DEBUG
                                   4590         CALL DEBUG
                                   4591 .endif ; WANT_DEBUG
      001A98 CD 04 75         [ 4] 4592 COLD1:  CALL     DOLIT
      001A9B 00 2B                 4593         .word      UZERO
      001A9D CD 04 75         [ 4] 4594 	CALL     DOLIT
      001AA0 00 06                 4595         .word      UPP
      001AA2 CD 04 75         [ 4] 4596         CALL     DOLIT
      001AA5 00 1A                 4597 	.word      UEND-UZERO
      001AA7 CD 0C 1C         [ 4] 4598         CALL     CMOVE   ;initialize user area
                                   4599 
                                   4600 ; if APP_RUN==0 initialize with ca de 'hi'  
      001AAA 90 CE 40 02      [ 2] 4601         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001AAE 26 0B            [ 1] 4602         jrne 0$
      001AB0 1D 00 02         [ 2] 4603         subw x,#CELLL 
      001AB3 90 AE 1A 55      [ 2] 4604         ldw y,#HI  
      001AB7 FF               [ 2] 4605         ldw (x),y
      001AB8 CD 1B B3         [ 4] 4606         call UPDATRUN 
      001ABB                       4607 0$:        
                                   4608 ; update LAST with APP_LAST 
                                   4609 ; if APP_LAST > LAST else do the opposite
      001ABB 90 CE 40 00      [ 2] 4610         ldw y,APP_LAST 
      001ABF 90 B3 1A         [ 2] 4611         cpw y,ULAST 
      001AC2 22 05            [ 1] 4612         jrugt 1$ 
                                   4613 ; save LAST at APP_LAST  
      001AC4 CD 1B 9B         [ 4] 4614         call UPDATLAST 
      001AC7 20 06            [ 2] 4615         jra 2$
      001AC9                       4616 1$: ; update LAST with APP_LAST 
      001AC9 90 BF 1A         [ 2] 4617         ldw ULAST,y
      001ACC 90 BF 14         [ 2] 4618         ldw UCNTXT,y
      001ACF                       4619 2$:  
                                   4620 ; update APP_CP if < app_space 
      001ACF 90 CE 40 04      [ 2] 4621         ldw y,APP_CP  
      001AD3 90 B3 18         [ 2] 4622         cpw y,UCP   
      001AD6 24 06            [ 1] 4623         jruge 3$ 
      001AD8 CD 1B C4         [ 4] 4624         call UPDATCP
      001ADB 90 BE 18         [ 2] 4625         ldw y,UCP   
      001ADE                       4626 3$:
      001ADE 90 BF 18         [ 2] 4627         ldw UCP,y                 
                                   4628 ; update UVP with APP_VP  
                                   4629 ; if APP_VP>UVP else do the opposite 
      001AE1 90 CE 40 06      [ 2] 4630         ldw y,APP_VP 
      001AE5 90 B3 16         [ 2] 4631         cpw y,UVP 
      001AE8 22 05            [ 1] 4632         jrugt 4$
      001AEA CD 1B DB         [ 4] 4633         call UPDATVP 
      001AED 20 03            [ 2] 4634         jra 6$
      001AEF                       4635 4$: ; update UVP with APP_VP 
      001AEF 90 BF 16         [ 2] 4636         ldw UVP,y 
      001AF2                       4637 6$:      
      001AF2 CD 14 4A         [ 4] 4638         CALL     PRESE   ;initialize data stack and TIB
      001AF5 CD 1A 8C         [ 4] 4639         CALL     TBOOT
      001AF8 CD 0C 05         [ 4] 4640         CALL     ATEXE   ;application boot
      001AFB CD 17 13         [ 4] 4641         CALL     OVERT
      001AFE CC 14 67         [ 2] 4642         JP     QUIT    ;start interpretation
                                   4643 
                                   4644 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4645         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B01 1A 93                   30     .word LINK 
                           001B03    31     LINK=.
      001B03 03                      32     .byte 3 
      001B04 46 50 21                33     .ascii "FP!"
      001B07                         34 FPSTOR:
      001B07 90 93            [ 1]   35     ldw y,x
      001B09 90 FE            [ 2]   36     ldw y,(y)
      001B0B 90 9F            [ 1]   37     ld a,yl 
      001B0D B7 32            [ 1]   38     ld FPTR,a 
      001B0F 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B12 90 93            [ 1]   40     ldw y,x 
      001B14 90 FE            [ 2]   41     ldw y,(y)
      001B16 90 BF 33         [ 2]   42     ldw PTR16,y
      001B19 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B1C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B1D 1B 03                   51     .word LINK 
                           001B1F    52 LINK=.
      001B1F 06                      53     .byte 6 
      001B20 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B26                         55 EEPROM: 
      001B26 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B2A 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B2D EF 02            [ 2]   58     ldw (2,x),y 
      001B2F 90 5F            [ 1]   59     clrw y 
      001B31 FF               [ 2]   60     ldw (x),y 
      001B32 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B33 1B 1F                   67 	.word LINK 
                           001B35    68 	LINK=.
      001B35 08                      69 	.byte 8 
      001B36 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B3E                         71 EEPLAST:
      001B3E 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B41 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B45 EF 02            [ 2]   74 	ldw (2,x),y 
      001B47 90 5F            [ 1]   75 	clrw y 
      001B49 FF               [ 2]   76 	ldw (x),y 
      001B4A 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B4B 1B 35                   83 	.word LINK 
                           001B4D    84 	LINK=.
      001B4D 07                      85 	.byte 7
      001B4E 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B55                         87 EEPRUN:
      001B55 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B58 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B5C EF 02            [ 2]   90 	ldw (2,x),y 
      001B5E 90 5F            [ 1]   91 	clrw y 
      001B60 FF               [ 2]   92 	ldw (x),y 
      001B61 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B62 1B 4D                   99 	.word LINK
                           001B64   100 	LINK=.
      001B64 06                     101 	.byte 6 
      001B65 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B6B                        103 EEPCP:
      001B6B 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B6E 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B72 EF 02            [ 2]  106 	ldw (2,x),y 
      001B74 90 5F            [ 1]  107 	clrw y 
      001B76 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B77 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B78 1B 64                  115 	.word LINK
                           001B7A   116 	LINK=.
      001B7A 06                     117 	.byte 6
      001B7B 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B81                        119 EEPVP:
      001B81 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B84 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B88 EF 02            [ 2]  122 	ldw (2,x),y 
      001B8A 90 5F            [ 1]  123 	clrw y 
      001B8C FF               [ 2]  124 	ldw (x),y 
      001B8D 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B8E 1B 7A                  131 	.word LINK 
                           001B90   132 	LINK=.
      001B90 0A                     133 	.byte 10
      001B91 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B9B                        135 UPDATLAST:
      001B9B CD 07 06         [ 4]  136 	call LAST
      001B9E CD 04 F3         [ 4]  137 	call AT  
      001BA1 CD 1B 3E         [ 4]  138 	call EEPLAST
      001BA4 CC 1D 91         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001BA7 1B 90                  145 	.word LINK
                           001BA9   146 	LINK=.
      001BA9 09                     147 	.byte 9
      001BAA 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001BB3                        149 UPDATRUN:
      001BB3 CD 1B 55         [ 4]  150 	call EEPRUN
      001BB6 CC 1D 91         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001BB9 1B A9                  157 	.word LINK 
                           001BBB   158 	LINK=.
      001BBB 08                     159 	.byte 8 
      001BBC 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001BC4                        161 UPDATCP:
      001BC4 CD 06 F6         [ 4]  162 	call CPP 
      001BC7 CD 04 F3         [ 4]  163 	call AT 
      001BCA CD 1B 6B         [ 4]  164 	call EEPCP 
      001BCD CC 1D 91         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BD0 1B BB                  171 	.word LINK
                           001BD2   172 	LINK=.
      001BD2 08                     173 	.byte 8 
      001BD3 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BDB                        175 UPDATVP:
      001BDB CD 06 E8         [ 4]  176 	call VPP 
      001BDE CD 04 F3         [ 4]  177 	call AT
      001BE1 CD 1B 81         [ 4]  178 	call EEPVP 
      001BE4 CC 1D 91         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BE7 1B D2                  186     .word LINK 
                           001BE9   187 LINK=.
      001BE9 02                     188     .byte 2
      001BEA 46 40                  189     .ascii "F@"
      001BEC                        190 FARAT:
      001BEC CD 1B 07         [ 4]  191     call FPSTOR
      001BEF CC 1C B4         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BF2 1B E9                  199     .word LINK
                           001BF4   200     LINK=.
      001BF4 03                     201     .byte 3 
      001BF5 46 43 40               202     .ascii "FC@" 
      001BF8                        203 FARCAT:
      001BF8 CD 1B 07         [ 4]  204     call FPSTOR
      001BFB CC 1C D6         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BFE 1B F4                  213     .word LINK 
                           001C00   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001C00 06                     215     .byte 6 
      001C01 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001C07                        217 UNLKEE:
      001C07 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001C0B 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C0F 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C13 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C17 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C1C 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C1D 1C 00                  230     .word LINK 
                           001C1F   231 LINK=. 
      001C1F 06                     232     .byte 6 
      001C20 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C26                        234 UNLKFL:
      001C26 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C2A 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C2E 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C32 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C36 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C3B 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C3C 1C 1F                  247 	.word LINK 
                           001C3E   248 	LINK=.
      001C3E 06                     249 	.byte 6
      001C3F 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C45                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C45 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C48 3D 32            [ 1]  255 	tnz FPTR 
      001C4A 26 16            [ 1]  256 	jrne 4$
      001C4C 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C50 24 10            [ 1]  258     jruge 4$
      001C52 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C56 25 0D            [ 1]  260     jrult 9$
      001C58 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C5C 22 07            [ 1]  262 	jrugt 9$
      001C5E CD 1C 07         [ 4]  263 	call UNLKEE
      001C61 81               [ 4]  264 	ret 
      001C62 CD 1C 26         [ 4]  265 4$: call UNLKFL
      001C65 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C66 1C 3E                  273 	.word LINK 
                           001C68   274 	LINK=.
      001C68 04                     275 	.byte 4 
      001C69 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C6D                        277 LOCK: 
      001C6D 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C71 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C75 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C76 1C 68                  286 	.word LINK 
                           001C78   287 	LINK=. 
      001C78 08                     288 	.byte 8 
      001C79 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C81                        290 INC_FPTR:
      001C81 3C 34            [ 1]  291 	inc PTR8 
      001C83 26 0C            [ 1]  292 	jrne 1$
      001C85 90 89            [ 2]  293 	pushw y 
      001C87 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001C8A 90 5C            [ 1]  295 	incw y 
      001C8C 90 BF 32         [ 2]  296 	ldw FPTR,y
      001C8F 90 85            [ 2]  297 	popw y  
      001C91 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C92 1C 78                  304 	.word LINK 
                           001C94   305 	LINK=.
      001C94 04                     306 	.byte 4 
      001C95 50 54 52 2B            307 	.ascii "PTR+"
      001C99                        308 PTRPLUS:
      001C99 90 93            [ 1]  309 	ldw y,x 
      001C9B 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C9E 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001CA2 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001CA5 24 02            [ 1]  313 	jrnc 1$
      001CA7 3C 32            [ 1]  314 	inc FPTR 
      001CA9 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001CAA 1C 94                  322 	.word LINK 
                           001CAC   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CAC 07                     324 	.byte 7 
      001CAD 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001CB4                        326 EE_READ:
      001CB4 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001CB7 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001CBB 90 95            [ 1]  329 	ld yh,a 
      001CBD CD 1C 81         [ 4]  330 	call INC_FPTR 
      001CC0 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001CC4 CD 1C 81         [ 4]  332 	call INC_FPTR 
      001CC7 90 97            [ 1]  333 	ld yl,a 
      001CC9 FF               [ 2]  334 	ldw (x),y 
      001CCA 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CCB 1C AC                  341 	.word LINK 
                           001CCD   342 	LINK=.
      001CCD 08                     343 	.byte 8
      001CCE 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CD6                        345 EE_CREAD:
      001CD6 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CD9 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001CDD CD 1C 81         [ 4]  348 	call INC_FPTR
      001CE0 90 5F            [ 1]  349 	clrw y 
      001CE2 90 97            [ 1]  350 	ld yl,a 
      001CE4 FF               [ 2]  351 	ldw (x),y 
      001CE5 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CE6 1C CD                  361 	.word LINK 
                           001CE8   362 	LINK=. 
      001CE8 07                     363 	.byte 7 
      001CE9 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CF0                        366 WR_BYTE:
      001CF0 CD 04 61         [ 4]  367 	call FC_XOFF
      001CF3 90 93            [ 1]  368 	ldw y,x 
      001CF5 90 FE            [ 2]  369 	ldw y,(y)
      001CF7 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CFA 90 9F            [ 1]  371 	ld a,yl
      001CFC 92 BD 00 32      [ 4]  372 	ldf [FPTR],a
      001D00 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D05 CD 04 4B         [ 4]  374 	call FC_XON
      001D08 CC 1C 81         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001D0B 1C E8                  384 	.word LINK 
                           001D0D   385 	LINK=.
      001D0D 07                     386 	.byte 7 
      001D0E 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D15                        388 WR_WORD:
      001D15 CD 04 61         [ 4]  389 	call FC_XOFF
      001D18 90 93            [ 1]  390 	ldw y,x
      001D1A 90 FE            [ 2]  391 	ldw y,(y)
      001D1C 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D1F 90 9E            [ 1]  393 	ld a,yh 
      001D21 92 BD 00 32      [ 4]  394 	ldf [FPTR],a
      001D25 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D2A CD 1C 81         [ 4]  396 	call INC_FPTR 
      001D2D 90 9F            [ 1]  397 	ld a,yl 
      001D2F 92 BD 00 32      [ 4]  398 	ldf [FPTR],a
      001D33 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D38 CD 04 4B         [ 4]  400 	call FC_XON
      001D3B CC 1C 81         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D3E 1D 0D                  408     .word LINK 
                           001D40   409 	LINK=.
      001D40 04                     410     .byte 4 
      001D41 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D45                        416 EECSTORE:
      001D45 52 02            [ 2]  417 	sub sp,#VSIZE
      001D47 CD 1B 07         [ 4]  418     call FPSTOR
      001D4A E6 01            [ 1]  419 	ld a,(1,x)
      001D4C 43               [ 1]  420 	cpl a 
      001D4D 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D4F 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D51 CD 1C 45         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D54 3D 32            [ 1]  425 	tnz FPTR 
      001D56 26 19            [ 1]  426 	jrne 2$
      001D58 90 BE 33         [ 2]  427 	ldw y,PTR16 
      001D5B 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D5F 2B 10            [ 1]  429 	jrmi 2$
      001D61 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D65 2A 0A            [ 1]  431 	jrpl 2$
      001D67 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D69 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D6D 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D71                        436 2$: 
      001D71 CD 1C F0         [ 4]  437 	call WR_BYTE 	
      001D74 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D76 27 0D            [ 1]  439 	jreq 3$ 
      001D78 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D7A 90 5F            [ 1]  441     clrw y
      001D7C 90 97            [ 1]  442 	ld yl,a 
      001D7E 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D81 FF               [ 2]  444 	ldw (x),y 
      001D82 CD 1C F0         [ 4]  445 	call WR_BYTE
      001D85                        446 3$: 
      001D85 CD 1C 6D         [ 4]  447 	call LOCK 
      001D88 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D8A 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D8B 1D 40                  455 	.word LINK 
                           001D8D   456 	LINK=.
      001D8D 03                     457 	.byte 3 
      001D8E 45 45 21               458 	.ascii "EE!"
      001D91                        459 EESTORE:
      001D91 CD 1B 07         [ 4]  460 	call FPSTOR 
      001D94 CD 1C 45         [ 4]  461 	call UNLOCK 
      001D97 90 93            [ 1]  462 	ldw y,x 
      001D99 90 FE            [ 2]  463 	ldw y,(y)
      001D9B 90 89            [ 2]  464 	pushw y 
      001D9D 90 5E            [ 1]  465 	swapw y 
      001D9F FF               [ 2]  466 	ldw (x),y 
      001DA0 CD 1C F0         [ 4]  467 	call WR_BYTE 
      001DA3 90 85            [ 2]  468 	popw y 
      001DA5 1D 00 02         [ 2]  469 	subw x,#CELLL
      001DA8 FF               [ 2]  470 	ldw (x),y 
      001DA9 CD 1C F0         [ 4]  471 	call WR_BYTE
      001DAC CC 1C 6D         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001DAF 1D 8D                  480 	.word LINK 
                           001DB1   481 	LINK=. 
      001DB1 09                     482 	.byte 9 
      001DB2 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001DBB                        484 row_erase:
      001DBB CD 04 61         [ 4]  485 	call FC_XOFF
      001DBE CD 1B 07         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001DC1 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001DC4 90 AE 1E 14      [ 2]  490 	ldw y,#row_erase_proc
      001DC8 FF               [ 2]  491 	ldw (x),y 
      001DC9 CD 0B E0         [ 4]  492 	call PAD 
      001DCC 90 AE 1E 3B      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DD0 72 A2 1E 14      [ 2]  494 	subw y,#row_erase_proc
      001DD4 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DD7 FF               [ 2]  496 	ldw (x),y 
      001DD8 CD 0C 1C         [ 4]  497 	call CMOVE 
      001DDB                        498 block_erase:
      001DDB 90 BE 33         [ 2]  499 	ldw y,FPTR+1
      001DDE 90 A3 24 00      [ 2]  500 	cpw y,#app_space 
      001DE2 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DE4 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DE8 24 04            [ 1]  504 	jruge 1$
      001DEA CD 04 4B         [ 4]  505 	call FC_XON
      001DED 81               [ 4]  506 	ret ; bad address 
      001DEE 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DF2 23 04            [ 2]  508 	jrule 2$ 
      001DF4 CD 04 4B         [ 4]  509 	call FC_XON
      001DF7 81               [ 4]  510 	ret ; bad address 
      001DF8                        511 2$:	
      001DF8 CD 1C 07         [ 4]  512 	call UNLKEE 
      001DFB 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001DFD                        515 erase_flash:
      001DFD CD 1C 26         [ 4]  516 	call UNLKFL 
      001E00                        517 proceed_erase:
      001E00 CD 0B E0         [ 4]  518 	call PAD 
      001E03 90 93            [ 1]  519 	ldw y,x
      001E05 90 FE            [ 2]  520 	ldw y,(y)
      001E07 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001E0A 90 FD            [ 4]  522 	call (y) 
      001E0C 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E10 CD 04 4B         [ 4]  524 	call FC_XON
      001E13 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E14                        528 row_erase_proc:
      001E14 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E18 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E1C 4F               [ 1]  531 	clr a 
      001E1D 90 5F            [ 1]  532 	clrw y 
      001E1F 91 A7 00 32      [ 1]  533 	ldf ([FPTR],y),a
      001E23 90 5C            [ 1]  534     incw y
      001E25 91 A7 00 32      [ 1]  535 	ldf ([FPTR],y),a
      001E29 90 5C            [ 1]  536     incw y
      001E2B 91 A7 00 32      [ 1]  537 	ldf ([FPTR],y),a
      001E2F 90 5C            [ 1]  538     incw y
      001E31 91 A7 00 32      [ 1]  539 	ldf ([FPTR],y),a
      001E35 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E3A 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E3B                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E3B                        555 copy_buffer:
      001E3B 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E3D 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E41 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E45 90 5F            [ 1]  560 	clrw y
      001E47 F6               [ 1]  561 1$:	ld a,(x)
      001E48 91 A7 00 32      [ 1]  562 	ldf ([FPTR],y),a
      001E4C 5C               [ 1]  563 	incw x 
      001E4D 90 5C            [ 1]  564 	incw y 
      001E4F 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E51 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E53 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E58 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E59 81               [ 4]  570 	ret 
      001E5A                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E5A                        577 copy_prog_to_ram:
      001E5A 1D 00 06         [ 2]  578 	subw x,#6
      001E5D 90 AE 1E 3B      [ 2]  579 	ldw y,#copy_buffer 
      001E61 EF 04            [ 2]  580 	ldw (4,x),y 
      001E63 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E67 EF 02            [ 2]  582 	ldw (2,x),y 
      001E69 90 AE 1E 5A      [ 2]  583 	ldw y,#copy_buffer_end 
      001E6D 72 A2 1E 3B      [ 2]  584 	subw y,#copy_buffer  
      001E71 FF               [ 2]  585 	ldw (x),y 
      001E72 CD 0C 1C         [ 4]  586 	call CMOVE 
      001E75 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E76 1D B1                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001E78   597 	LINK=.
      001E78 06                     598 	.byte 6 
      001E79 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E7F                        600 write_row:
      001E7F CD 04 61         [ 4]  601 	call FC_XOFF
      001E82 CD 1B 07         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E85 A6 80            [ 1]  604 	ld a,#0x80 
      001E87 B4 34            [ 1]  605 	and a,PTR8 
      001E89 B7 34            [ 1]  606 	ld PTR8,a  
      001E8B CD 1E 5A         [ 4]  607 	call copy_prog_to_ram
      001E8E CD 1C 45         [ 4]  608 	call UNLOCK
      001E91 90 93            [ 1]  609 	ldw y,x 
      001E93 90 FE            [ 2]  610 	ldw y,(y)
      001E95 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E98 89               [ 2]  612 	pushw x 
      001E99 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E9A CD 17 00         [ 4]  614 	call TIBBASE
      001E9D CD 1C 6D         [ 4]  615 	call LOCK
      001EA0 85               [ 2]  616 	popw x 
      001EA1 CD 04 4B         [ 4]  617 	call FC_XON 
      001EA4 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001EA5 1E 78                  626 		.word LINK 
                           001EA7   627 		LINK=.
      001EA7 07                     628 		.byte 7 
      001EA8 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001EAF                        630 set_option: 
      001EAF 90 93            [ 1]  631 		ldw y,x 
      001EB1 90 FE            [ 2]  632 		ldw y,(y)
      001EB3 27 06            [ 1]  633 		jreq 1$
      001EB5 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001EB9 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001EBB 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001EBE 81               [ 4]  638 		ret
      001EBF 90 58            [ 2]  639 2$:		sllw y 
      001EC1 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001EC5 FF               [ 2]  641 		ldw (x),y 
      001EC6 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001EC9 90 5F            [ 1]  643 		clrw y 
      001ECB FF               [ 2]  644 		ldw (x),y 
      001ECC CD 1D 45         [ 4]  645 		call EECSTORE
      001ECF 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001ED0 1E A7                  655 	.word LINK  
                           001ED2   656 	LINK=.
      001ED2 08                     657 	.byte 8 
      001ED3 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EDB                        659 pristine:
                                    660 ;;; erase EEPROM
      001EDB CD 1B 26         [ 4]  661 	call EEPROM 
      001EDE CD 07 80         [ 4]  662 1$:	call DDUP 
      001EE1 CD 1D BB         [ 4]  663 	call row_erase
      001EE4 90 93            [ 1]  664 	ldw y,x 
      001EE6 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EE9 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EED EF 02            [ 2]  667 	ldw (2,x),y
      001EEF 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EF3 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EF5 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001EF9 FF               [ 2]  672 2$:	ldw (x),y   
      001EFA 90 5F            [ 1]  673 	clrw y 
      001EFC EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EFE CD 07 80         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001F01 CD 1E AF         [ 4]  676 	call set_option
      001F04 90 93            [ 1]  677 	ldw y,x 
      001F06 90 FE            [ 2]  678 	ldw y,(y)
      001F08 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001F0A 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001F0E 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F10 90 AE 24 00      [ 2]  683 	ldw y,#app_space
      001F14 EF 02            [ 2]  684 	ldw (2,x),y  
      001F16 90 5F            [ 1]  685 	clrw y 
      001F18 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F19 CD 1D BB         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F1C 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F1F 90 5F            [ 1]  690 	clrw y  
      001F21 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F22 CD 05 9A         [ 4]  692 	call DUPP  
      001F25 CD 1F 42         [ 4]  693 	call reset_vector
      001F28 90 93            [ 1]  694 	ldw y,x 
      001F2A 90 FE            [ 2]  695 	ldw y,(y)
      001F2C 90 5C            [ 1]  696 	incw y   ; next vector 
      001F2E 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F32 25 ED            [ 1]  698 	jrult 4$
      001F34 CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F37 1E D2                  707 	.word LINK 
                           001F39   708 	LINK=. 
      001F39 08                     709 	.byte 8 
      001F3A 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F42                        711 reset_vector:
      001F42 90 93            [ 1]  712 	ldw y,x
      001F44 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F47 90 FE            [ 2]  714 	ldw y,(y)
      001F49 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F4D 27 3A            [ 1]  716 	jreq 9$
      001F4F 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F53 22 34            [ 1]  718 	jrugt 9$  
      001F55 90 58            [ 2]  719 	sllw y 
      001F57 90 58            [ 2]  720 	sllw y 
      001F59 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F5D 90 BF 24         [ 2]  722 	ldw YTEMP,y
      001F60 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F63 EF 02            [ 2]  724 	ldw (2,x),y 
      001F65 90 5F            [ 1]  725 	clrw y
      001F67 FF               [ 2]  726 	ldw (x),y 
      001F68 A6 82            [ 1]  727 	ld a,#0x82 
      001F6A 90 95            [ 1]  728 	ld yh,a
      001F6C EF 04            [ 2]  729 	ldw (4,x),y
      001F6E CD 1D 91         [ 4]  730 	call EESTORE
      001F71 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F74 90 5F            [ 1]  732 	clrw y 
      001F76 FF               [ 2]  733 	ldw (x),y 
      001F77 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F7B EF 04            [ 2]  735 	ldw (4,x),y 
      001F7D 90 BE 24         [ 2]  736 	ldw y,YTEMP  
      001F80 72 A9 00 02      [ 2]  737 	addw y,#2
      001F84 EF 02            [ 2]  738 	ldw (2,x),y 
      001F86 CD 1D 91         [ 4]  739 	call EESTORE
      001F89 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F8A 1F 39                  749 	.word LINK 
                           001F8C   750 	LINK=.
      001F8C 07                     751 	.byte 7
      001F8D 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F94                        758 CHKIVEC:
      001F94 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F96 90 93            [ 1]  760 	ldw y,x 
      001F98 90 FE            [ 2]  761 	ldw y,(y)
      001F9A 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001F9C 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001F9E AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001FA1 BF 33            [ 2]  765 	ldw PTR16,X
      001FA3 AE FF FC         [ 2]  766 	ldw x,#-4 
      001FA6 1C 00 04         [ 2]  767 1$:	addw x,#4
      001FA9 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001FAC 27 22            [ 1]  769 	jreq 9$
      001FAE 90 93            [ 1]  770 	ldw y,x  
      001FB0 91 D6 33         [ 4]  771 	ld a,([PTR16],y)
      001FB3 11 03            [ 1]  772 	cp a,(CADR,sp)
      001FB5 25 EF            [ 1]  773 	jrult 1$
      001FB7 90 5C            [ 1]  774 	incw y 
      001FB9 91 D6 33         [ 4]  775 	ld a,([PTR16],y)
      001FBC 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001FBE 25 E6            [ 1]  777 	jrult 1$ 
      001FC0 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001FC2 54               [ 2]  779 	srlw x
      001FC3 54               [ 2]  780 	srlw x 
      001FC4 90 93            [ 1]  781 	ldw y,x 
      001FC6 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FC8 FF               [ 2]  783 	ldw (x),y
      001FC9 CD 1F 42         [ 4]  784 	call reset_vector
      001FCC 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FCE 20 D6            [ 2]  786 	jra 1$
      001FD0 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FD2 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FD5 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FD7 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FD8 1F 8C                  798 	.word LINK
                           001FDA   799 	LINK=.
      001FDA 08                     800 	.byte 8 
      001FDB 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FE3                        802 set_vector:
      001FE3 90 93            [ 1]  803     ldw y,x 
      001FE5 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FE8 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FEA 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FEE 23 04            [ 2]  807 	jrule 2$
      001FF0 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FF3 81               [ 4]  809 	ret
      001FF4 90 58            [ 2]  810 2$:	sllw y 
      001FF6 90 58            [ 2]  811 	sllw y 
      001FF8 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      001FFC 90 BF 24         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FFF A6 82            [ 1]  814 	ld a,#0x82 
      002001 90 95            [ 1]  815 	ld yh,a 
      002003 E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      002005 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      002007 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      00200A EF 04            [ 2]  820 	ldw (4,x),y 
      00200C 90 BE 24         [ 2]  821 	ldw y,YTEMP
      00200F EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002011 90 5F            [ 1]  823 	clrw y 
      002013 FF               [ 2]  824 	ldw (x),y   ; as a double 
      002014 CD 1D 91         [ 4]  825 	call EESTORE 
      002017 90 93            [ 1]  826 	ldw y,x 
      002019 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      00201C 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      00201F EF 04            [ 2]  829 	ldw (4,x),y 
      002021 90 BE 24         [ 2]  830 	ldw y,YTEMP 
      002024 72 A9 00 02      [ 2]  831 	addw y,#2 
      002028 EF 02            [ 2]  832 	ldw (2,x),y 
      00202A 90 5F            [ 1]  833 	clrw y 
      00202C FF               [ 2]  834 	ldw (x),y 
      00202D CD 1D 91         [ 4]  835 	call EESTORE
      002030 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      002033 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      002034 1F DA                  844 	.word LINK
                           002036   845 	LINK=.
      002036 03                     846 	.byte 3
      002037 45 45 2C               847 	.ascii "EE,"
      00203A                        848 EE_COMMA:
      00203A 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      00203D 90 BE 18         [ 2]  850 	ldw y,UCP
      002040 90 89            [ 2]  851 	pushw y 
      002042 EF 02            [ 2]  852 	ldw (2,x),y 
      002044 90 5F            [ 1]  853 	clrw y 
      002046 FF               [ 2]  854 	ldw (x),y
      002047 CD 1D 91         [ 4]  855 	call EESTORE
      00204A 90 85            [ 2]  856 	popw y 
      00204C 72 A9 00 02      [ 2]  857 	addw y,#2
      002050 90 BF 18         [ 2]  858 	ldw UCP,y
      002053 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      002054 20 36                  866 	.word LINK 
                           002056   867 	LINK=.
      002056 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002057 45 45 43 2C            869 	.ascii "EEC,"
      00205B                        870 EE_CCOMMA:
      00205B 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      00205E 90 BE 18         [ 2]  872 	ldw y,UCP
      002061 90 89            [ 2]  873 	pushw y 
      002063 EF 02            [ 2]  874 	ldw (2,x),y 
      002065 90 5F            [ 1]  875 	clrw y 
      002067 FF               [ 2]  876 	ldw (x),y
      002068 CD 1D 45         [ 4]  877 	call EECSTORE
      00206B 90 85            [ 2]  878 	popw y 
      00206D 90 5C            [ 1]  879 	incw y 
      00206F 90 BF 18         [ 2]  880 	ldw UCP,y
      002072 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      002073 20 56                  888 	.word LINK 
                           002075   889 	LINK=.
      002075 07                     890 	.byte 7 
      002076 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      00207D                        892 ROW2BUF: 
      00207D CD 1B 07         [ 4]  893 	call FPSTOR 
      002080 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      002082 88               [ 1]  895 	push a 
      002083 B4 34            [ 1]  896 	and a,PTR8 ; block align 
      002085 B7 34            [ 1]  897 	ld PTR8,a
      002087 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      00208B 92 BC 00 32      [ 5]  899 1$: ldf a,[FPTR]
      00208F 90 F7            [ 1]  900 	ld (y),a
      002091 CD 1C 81         [ 4]  901 	call INC_FPTR
      002094 90 5C            [ 1]  902 	incw y 
      002096 0A 01            [ 1]  903 	dec (1,sp)
      002098 26 F1            [ 1]  904 	jrne 1$ 
      00209A 84               [ 1]  905 	pop a 
      00209B 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      00209C 20 75                  914 	.word LINK 
                           00209E   915 	LINK=.
      00209E 07                     916 	.byte 7 
      00209F 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      0020A6                        918 BUF2ROW:
      0020A6 CD 06 95         [ 4]  919 	call TBUF ; ( ud rb -- )
      0020A9 CD 07 55         [ 4]  920 	call ROT 
      0020AC CD 07 55         [ 4]  921 	call ROT  ; ( rb ud -- )
      0020AF CD 1E 7F         [ 4]  922 	call write_row 
      0020B2 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      0020B3 20 9E                  930 	.word LINK 
                           0020B5   931 	LINK=.
      0020B5 05                     932 	.byte 5 
      0020B6 52 46 52 45 45         933 	.ascii "RFREE"
      0020BB                        934 RFREE:
      0020BB E6 01            [ 1]  935 	ld a,(1,x)
      0020BD A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      0020BF B7 24            [ 1]  937 	ld YTEMP,a 
      0020C1 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      0020C3 B0 24            [ 1]  939 	sub a,YTEMP 
      0020C5 90 5F            [ 1]  940 	clrw y 
      0020C7 90 97            [ 1]  941 	ld yl,a
      0020C9 FF               [ 2]  942 	ldw (x),y 
      0020CA 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020CB 20 B5                  954 	.word LINK 
                           0020CD   955 	LINK=. 
      0020CD 06                     956 	.byte 6
      0020CE 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020D4                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020D4 90 93            [ 1]  961 	ldw y,x 
      0020D6 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020D9 90 BF 24         [ 2]  963 	ldw YTEMP,y 
      0020DC 90 93            [ 1]  964 	ldw y,x 
      0020DE 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020E1 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020E4 FF               [ 2]  967 	ldw (x),y 
      0020E5 90 BE 24         [ 2]  968 	ldw y,YTEMP 
      0020E8 EF 02            [ 2]  969 	ldw (2,x),y 
      0020EA CD 20 7D         [ 4]  970 	call ROW2BUF 
      0020ED 90 93            [ 1]  971 	ldw y,x 
      0020EF 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020F2 90 89            [ 2]  973 	pushw y ; udl 
      0020F4 90 9F            [ 1]  974 	ld a,yl
      0020F6 A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020F8 90 5F            [ 1]  976 	clrw y 
      0020FA 90 97            [ 1]  977 	ld yl,a 
      0020FC 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002100 1D 00 02         [ 2]  979 	subw x,#CELLL 
      002103 FF               [ 2]  980 	ldw (x),y  
      002104 CD 05 AA         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      002107 CD 05 44         [ 4]  982 	call RFROM  
      00210A CD 20 BB         [ 4]  983 	call RFREE 
      00210D CD 08 B0         [ 4]  984 	call MIN
      002110 CD 05 9A         [ 4]  985 	call DUPP 
      002113 CD 05 63         [ 4]  986 	call TOR  
      002116 CD 0C 1C         [ 4]  987 	call CMOVE
      002119 CD 20 A6         [ 4]  988 	call BUF2ROW 
      00211C CD 05 44         [ 4]  989 	call RFROM 
      00211F 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002120 20 CD                  998 	.word LINK 
                           002122   999 	LINK=. 
      002122 05                    1000 	.byte 5 
      002123 46 41 44 44 52        1001 	.ascii "FADDR"
      002128                       1002 FADDR:
      002128 CC 0A E1         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      00212B 21 22                 1019 	.word LINK 
                           00212D  1020 	LINK=.
      00212D 05                    1021 	.byte 5 
      00212E 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      002133                       1023 FMOVE:
      002133 CD 06 A7         [ 4] 1024 	call TFLASH 
      002136 CD 04 F3         [ 4] 1025 	CALL AT 
      002139 CD 04 A8         [ 4] 1026 	CALL QBRAN 
      00213C 21 B7                 1027 	.word no_move  
      00213E CD 06 F6         [ 4] 1028 	call CPP
      002141 CD 04 F3         [ 4] 1029 	call AT  
      002144 CD 05 9A         [ 4] 1030 	call DUPP ; ( udl udl -- )
      002147 CD 06 DA         [ 4] 1031 	call CNTXT 
      00214A CD 04 F3         [ 4] 1032 	call AT 
      00214D CD 04 75         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002150 00 02                 1034 	.word 2 
      002152 CD 08 0E         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      002155 CD 05 AA         [ 4] 1036 	call SWAPP 
      002158 CD 21 28         [ 4] 1037 	call FADDR 
      00215B CD 07 55         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      00215E CD 05 9A         [ 4] 1039 	call DUPP 
      002161 CD 05 63         [ 4] 1040 	call TOR    ; R: a 
      002164                       1041 FMOVE2: 
      002164 CD 0B CF         [ 4] 1042 	call HERE 
      002167 CD 05 57         [ 4] 1043 	call RAT 
      00216A CD 08 0E         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      00216D                       1045 next_row:
      00216D CD 05 9A         [ 4] 1046 	call DUPP 
      002170 CD 05 63         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002173 CD 20 D4         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002176 CD 05 9A         [ 4] 1049 	call DUPP 
      002179 CD 05 63         [ 4] 1050 	call TOR
      00217C CD 07 95         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      00217F CD 05 9A         [ 4] 1052 	call DUPP 
      002182 CD 0A E1         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      002185 CD 05 44         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002188 CD 05 44         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00218B CD 05 C4         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00218E CD 08 0E         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002191 CD 05 9A         [ 4] 1058 	call DUPP 
      002194 CD 04 A8         [ 4] 1059 	call QBRAN
      002197 21 B0                 1060 	.word fmove_done 
      002199 CD 05 AA         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00219C CD 05 44         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      00219F CD 07 95         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      0021A2 CD 05 9A         [ 4] 1064 	call DUPP 
      0021A5 CD 05 63         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0021A8 CD 05 AA         [ 4] 1066 	call SWAPP 
      0021AB CD 04 BF         [ 4] 1067 	call BRAN
      0021AE 21 6D                 1068 	.word next_row  
      0021B0                       1069 fmove_done:	
      0021B0 CD 05 44         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021B3 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021B6 81               [ 4] 1072  	ret  
      0021B7                       1073 no_move:
      0021B7 CD 0A E1         [ 4] 1074 	call ZERO
      0021BA 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      0021BB 21 2D                 1082 	.word LINK 
                           0021BD  1083 	LINK=.
      0021BD 09                    1084 	.byte 9
      0021BE 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      0021C7                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      0021C7 CD 1B 81         [ 4] 1088 	call EEPVP 
      0021CA CD 05 90         [ 4] 1089 	call DROP 
      0021CD CD 04 F3         [ 4] 1090 	call AT
      0021D0 CD 06 E8         [ 4] 1091 	call VPP 
      0021D3 CD 04 DC         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021D6 CD 1B 6B         [ 4] 1094 	call EEPCP 
      0021D9 CD 05 90         [ 4] 1095 	call DROP
      0021DC CD 04 F3         [ 4] 1096 	call AT
      0021DF CD 04 75         [ 4] 1097 	call DOLIT 
      0021E2 00 02                 1098 	.word 2 
      0021E4 CD 07 95         [ 4] 1099 	call PLUS 
      0021E7 CD 05 9A         [ 4] 1100 	call DUPP 
      0021EA CD 06 DA         [ 4] 1101 	call CNTXT 
      0021ED CD 04 DC         [ 4] 1102 	call STORE
      0021F0 CD 07 06         [ 4] 1103 	call LAST
      0021F3 CD 04 DC         [ 4] 1104 	call STORE 
      0021F6 CD 1B 9B         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021F9 CD 06 F6         [ 4] 1107 	call CPP 
      0021FC CD 04 DC         [ 4] 1108 	call STORE
      0021FF CD 1B C4         [ 4] 1109 	call UPDATCP 
      002202 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      002203 21 BD                 1116 	.word LINK 
                           002205  1117 	LINK=. 
      002205 06                    1118 	.byte 6
      002206 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      00220C                       1120 IFMOVE:
      00220C CD 06 A7         [ 4] 1121 	call TFLASH 
      00220F CD 04 F3         [ 4] 1122 	CALL AT 
      002212 CD 04 A8         [ 4] 1123 	CALL QBRAN 
      002215 21 B7                 1124 	.word no_move 
      002217 CD 06 F6         [ 4] 1125 	call CPP 
      00221A CD 04 F3         [ 4] 1126 	call AT 
      00221D CD 05 9A         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002220 CD 1B 81         [ 4] 1128 	call EEPVP 
      002223 CD 05 90         [ 4] 1129 	call DROP
      002226 CD 04 F3         [ 4] 1130 	call AT  ; ( udl udl a )
      002229 CD 05 63         [ 4] 1131 	call TOR 
      00222C CD 21 28         [ 4] 1132 	call FADDR
      00222F CD 05 57         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      002232 CC 21 64         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           000001  4646 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4647         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002235 22 05                   31         .word LINK 
                           002237    32         LINK=.
      002237 02                      33         .byte 2
      002238 50 49                   34         .ascii "PI" 
      00223A                         35 PII:
      00223A 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      00223D 90 AE 01 63      [ 2]   37         ldw y,#355 
      002241 EF 02            [ 2]   38         ldw (2,x),y 
      002243 90 AE 00 71      [ 2]   39         ldw y,#113 
      002247 FF               [ 2]   40         ldw (x),y 
      002248 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002249 22 37                   48         .word LINK 
                           00224B    49         LINK=.
      00224B 05                      50         .byte 5 
      00224C 53 51 52 54 32          51         .ascii "SQRT2" 
      002251                         52 SQRT2:
      002251 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002254 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002258 EF 02            [ 2]   55         ldw (2,x),y 
      00225A 90 AE 36 24      [ 2]   56         ldw y,#13860 
      00225E FF               [ 2]   57         ldw (x),y 
      00225F 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002260 22 4B                   63         .word LINK 
                           002262    64         LINK=.
      002262 05                      65         .byte 5
      002263 53 51 52 54 33          66         .ascii "SQRT3" 
      002268                         67 SQRT3: 
      002268 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      00226B 90 AE 49 81      [ 2]   69     ldw y,#18817 
      00226F EF 02            [ 2]   70     ldw (2,x),y 
      002271 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      002275 FF               [ 2]   72     ldw (x),y 
      002276 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      002277 22 62                   78         .word LINK 
                           002279    79         LINK=.
      002279 01                      80         .byte 1
      00227A 45                      81         .ascii "E" 
      00227B                         82 ENEPER:
      00227B 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      00227E 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      002282 EF 02            [ 2]   85     ldw (2,x),y 
      002284 90 AE 29 32      [ 2]   86     ldw y,#10546 
      002288 FF               [ 2]   87     ldw (x),y 
      002289 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      00228A 22 79                   92         .word LINK 
                           00228C    93         LINK=.
      00228C 06                      94         .byte 6 
      00228D 53 51 52 54 31 30       95         .ascii "SQRT10" 
      002293                         96 SQRT10:
      002293 1D 00 04         [ 2]   97     subw x,#2*CELLL
      002296 90 AE 59 98      [ 2]   98     ldw y,#22936 
      00229A EF 02            [ 2]   99     ldw (2,x),y 
      00229C 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0022A0 FF               [ 2]  101     ldw (x),y 
      0022A1 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0022A2 22 8C                  107         .word LINK 
                           0022A4   108         LINK=. 
      0022A4 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0022A5 31 32 52 54 32         110         .ascii "12RT2"
      0022AA                        111 RT12_2:
      0022AA 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0022AD 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0022B1 EF 02            [ 2]  114     ldw (2,x),y 
      0022B3 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0022B7 FF               [ 2]  116     ldw (x),y 
      0022B8 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0022B9 22 A4                  122         .word LINK 
                           0022BB   123         LINK=.
      0022BB 05                     124         .byte 5 
      0022BC 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0022C1                        126 LOG2S:
      0022C1 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0022C4 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0022C8 EF 02            [ 2]  129     ldw (2,x),y 
      0022CA 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0022CE FF               [ 2]  131     ldw (x),y 
      0022CF 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0022D0 22 BB                  137         .word LINK 
                           0022D2   138         LINK=.
      0022D2 04                     139         .byte 4 
      0022D3 4C 4E 32 53            140         .ascii "LN2S" 
      0022D7                        141 LN2S: 
      0022D7 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022DA 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022DE EF 02            [ 2]  144     ldw (2,x),y 
      0022E0 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022E4 FF               [ 2]  146     ldw (x),y 
      0022E5 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4648 .endif
                           000001  4649 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4650         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022E6 22 D2                   32     .word LINK 
                           0022E8    33     LINK=.
      0022E8 06                      34     .byte 6
      0022E9 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022EF                         36 CALLOT:
      0022EF CD 06 F6         [ 4]   37     CALL CPP
      0022F2 CD 05 9A         [ 4]   38     CALL DUPP 
      0022F5 CD 04 F3         [ 4]   39     CALL AT 
      0022F8 CD 05 63         [ 4]   40     CALL TOR 
      0022FB CD 0B 51         [ 4]   41     CALL PSTOR 
      0022FE CD 1B C4         [ 4]   42     CALL UPDATCP 
      002301 CD 05 44         [ 4]   43     CALL RFROM
      002304 CC 0A E1         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      002307 22 E8                   52     .word LINK 
                           002309    53     LINK=.
      002309 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00230A 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002310                         56 CTABLE:
      002310 CD 22 EF         [ 4]   57     CALL CALLOT     
      002313 CC 18 BD         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      002316 23 09                   67     .word LINK 
                           002318    68     LINK=.
      002318 06                      69     .byte 6
      002319 57 54 41 42 4C 45       70     .ascii "WTABLE"
      00231F                         71 WTABLE:
      00231F CD 0A 68         [ 4]   72     CALL CELLS  
      002322 CD 22 EF         [ 4]   73     CALL CALLOT 
      002325 CC 18 BD         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002328 23 18                   82     .word LINK 
                           00232A    83     LINK=.
      00232A 06                      84     .byte 6
      00232B 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002331                         86 CTAT:
      002331 CD 1B 07         [ 4]   87     call FPSTOR 
      002334 CD 1C 99         [ 4]   88     call PTRPLUS 
      002337 CC 1C D6         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00233A 23 2A                   97     .word LINK 
                           00233C    98     LINK=.
      00233C 06                      99     .byte 6
      00233D 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002343                        101 WTAT:
      002343 CD 1B 07         [ 4]  102     call FPSTOR 
      002346 CD 0A 68         [ 4]  103     call CELLS 
      002349 CD 1C 99         [ 4]  104     call PTRPLUS 
      00234C CD 1C B4         [ 4]  105     call EE_READ 
      00234F 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002350 23 3C                  113     .word LINK 
                           002352   114     LINK=.
      002352 06                     115     .byte 6 
      002353 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002359                        117 CTINIT:
      002359 CD 1B 07         [ 4]  118     CALL FPSTOR
      00235C CD 1C 45         [ 4]  119     CALL UNLOCK
      00235F CD 0A E1         [ 4]  120     CALL ZERO 
      002362 CD 0A 75         [ 4]  121 1$: CALL ONEP 
      002365 CD 05 9A         [ 4]  122     CALL DUPP 
      002368 CD 23 B5         [ 4]  123     CALL INTQ 
      00236B CD 04 A8         [ 4]  124     CALL QBRAN 
      00236E 23 78                  125     .word 2$
      002370 CD 1C F0         [ 4]  126     call WR_BYTE 
      002373 CD 04 BF         [ 4]  127     CALL BRAN 
      002376 23 62                  128     .word 1$ 
      002378 CD 07 75         [ 4]  129 2$: CALL DDROP 
      00237B CD 1C 6D         [ 4]  130     CALL LOCK 
      00237E 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      00237F 23 52                  138     .word LINK 
                           002381   139     LINK=.
      002381 06                     140     .byte 6 
      002382 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002388                        142 WTINIT:
      002388 CD 1B 07         [ 4]  143     CALL FPSTOR
      00238B CD 1C 45         [ 4]  144     CALL UNLOCK
      00238E CD 0A E1         [ 4]  145     CALL ZERO 
      002391 CD 0A 75         [ 4]  146 1$: CALL ONEP 
      002394 CD 05 9A         [ 4]  147     CALL DUPP
      002397 CD 23 B5         [ 4]  148     CALL INTQ
      00239A CD 04 A8         [ 4]  149     CALL QBRAN 
      00239D 23 A7                  150     .word 2$
      00239F CD 1D 15         [ 4]  151     call WR_WORD 
      0023A2 CD 04 BF         [ 4]  152     CALL BRAN 
      0023A5 23 91                  153     .word 1$ 
      0023A7 CD 07 75         [ 4]  154 2$: CALL DDROP 
      0023AA CD 1C 6D         [ 4]  155     CALL LOCK 
      0023AD 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0023AE 23 81                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           0023B0   165     LINK=.
      0023B0 04                     166     .byte 4
      0023B1 5B 4E 5D 3F            167     .ascii "[N]?" 
      0023B5                        168 INTQ:
      0023B5 CD 0F 47         [ 4]  169     CALL CR 
      0023B8 CD 04 75         [ 4]  170     call DOLIT 
      0023BB 00 5B                  171     .word '[
      0023BD CD 04 34         [ 4]  172     CALL EMIT 
      0023C0 CD 0F E2         [ 4]  173     CALL DOT 
      0023C3 CD 0F 86         [ 4]  174     CALL  DOTQP
      0023C6 03                     175     .byte 3
      0023C7 5D 3F 20               176     .ascii "]? " 
      0023CA CD 13 2E         [ 4]  177     CALL QUERY 
      0023CD CD 11 59         [ 4]  178     call TOKEN 
      0023D0 CC 0D F4         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4651 .endif
                                   4652 
                                   4653 ;===============================================================
                                   4654 
                           0023B0  4655 LASTN =	LINK   ;last name defined
                                   4656 
                                   4657 ; application code begin here
      002400                       4658 	.bndry 128 ; align on flash block  
      002400                       4659 app_space: 
                                   4660 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000831 R   |   6 ABOR1      00136A R
  6 ABOR2      001381 R   |   6 ABORQ      001362 R   |   6 ABORT      001353 R
  6 ABRTQ      00163E R   |   6 ABSS       000828 R   |   6 ACCEP      0012E9 R
  6 ACCP1      0012F2 R   |   6 ACCP2      001318 R   |   6 ACCP3      00131B R
  6 ACCP4      00131D R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000734 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001629 R   |   6 AGAIN      00157F R   |   6 AHEAD      0015DC R
  6 ALLOT      001492 R   |   6 ANDD       0005E6 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F3 R   |   6 ATEXE      000C05 R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003DE R
    B19200  =  000003     |   6 B19K2      0003BB R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       00038C R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039A R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003CC R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AA R
  6 BACK1      001291 R   |   6 BASE       000657 R   |     BASEE   =  00000A 
  6 BAUD       0003EE R   |     BCNT    =  000001     |   6 BCOMP      0014D4 R
  6 BDIGS      000CEC R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      001561 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      001129 R
  6 BKSP       001261 R   |     BKSPP   =  000008     |   6 BLANK      000AD4 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004BF R   |     BTW     =  000001     |   6 BUF2ROW    0020A6 R
  6 BYE        0000B4 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0022EF R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  000028     |   6 CAT        000511 R
  6 CCOMMA     0014B6 R   |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELLL   =  000002 
  6 CELLM      000A59 R   |   6 CELLP      000A4A R   |   6 CELLS      000A68 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  6 CHAR1      000F19 R   |   6 CHAR2      000F1C R   |   6 CHKIVEC    001F94 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000C24 R   |   6 CMOV2      000C3C R   |   6 CMOVE      000C1C R
    CNTDWN  =  000030     |   6 CNTXT      0006DA R   |   6 COLD       001A98 R
  6 COLD1      001A98 R   |   6 COLON      0017D7 R   |   6 COMMA      00149F R
  6 COMPI      0014E4 R   |     COMPO   =  000040     |   6 CONSTANT   001881 R
  6 COUNT      000BB8 R   |   6 CPP        0006F6 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000F47 R   |   6 CREAT      00181D R
    CRR     =  00000D     |   6 CSTOR      000500 R   |   6 CTABLE     002310 R
  6 CTAT       002331 R   |   6 CTINIT     002359 R   |   6 DAT        000B98 R
    DATSTK  =  001680     |   6 DCONST     0018BD R   |   6 DDROP      000775 R
  6 DDUP       000780 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000D9C R   |   6 DEPTH      000B23 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000DE1 R   |   6 DI         0000C2 R
  6 DIG        000D15 R   |   6 DIGIT      000CB0 R   |   6 DIGS       000D26 R
  6 DIGS1      000D26 R   |   6 DIGS2      000D33 R   |   6 DIGTQ      000DB0 R
    DISCOVER=  000000     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0007EF R   |   6 DNEGA      0007D2 R   |   6 DOCONST    0018AB R
  6 DOLIT      000475 R   |   6 DONXT      000489 R   |     DOORBELL=  000000 
  6 DOSTR      000F5D R   |   6 DOT        000FE2 R   |   6 DOT1       000FF8 R
  6 DOTI1      001A19 R   |   6 DOTID      001A03 R   |   6 DOTO1      0013F6 R
  6 DOTOK      0013DC R   |   6 DOTPR      00110B R   |   6 DOTQ       001658 R
  6 DOTQP      000F86 R   |   6 DOTR       000F94 R   |   6 DOTS       0019A5 R
  6 DOTS1      0019B0 R   |   6 DOTS2      0019B9 R   |   6 DOVAR      000647 R
  6 DO_DCONS   0018EC R   |   6 DROP       000590 R   |   6 DSTOR      000B72 R
  6 DUMP       00195B R   |   6 DUMP1      001972 R   |   6 DUMP3      001994 R
  6 DUMPP      00192A R   |   6 DUPP       00059A R   |   6 EDIGS      000D51 R
  6 EECSTORE   001D45 R   |   6 EEPCP      001B6B R   |   6 EEPLAST    001B3E R
  6 EEPROM     001B26 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    EEPROM_R=  000010     |     EEPROM_S=  000800     |   6 EEPRUN     001B55 R
  6 EEPVP      001B81 R   |   6 EESTORE    001D91 R   |   6 EE_CCOMM   00205B R
  6 EE_COMMA   00203A R   |   6 EE_CREAD   001CD6 R   |   6 EE_READ    001CB4 R
  6 EI         0000BB R   |   6 ELSEE      0015B7 R   |   6 EMIT       000434 R
  6 ENEPER     00227B R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        00084C R   |   6 EQUAL      000836 R   |   6 ERASE      000C7E R
    ERR     =  00001B     |   6 EVAL       00141F R   |   6 EVAL1      00141F R
  6 EVAL2      00143B R   |   6 EXE1       000C13 R   |   6 EXECU      0004CF R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000CD8 R   |   6 FADDR      002128 R   |   6 FARAT      001BEC R
  6 FARCAT     001BF8 R   |   6 FC_XOFF    000461 R   |   6 FC_XON     00044B R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000C4B R
  6 FILL1      000C68 R   |   6 FILL2      000C71 R   |   6 FIND       0011BD R
  6 FIND1      0011DB R   |   6 FIND2      001209 R   |   6 FIND3      001215 R
  6 FIND4      001229 R   |   6 FIND5      001236 R   |   6 FIND6      00121A R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      002133 R   |   6 FMOVE2     002164 R
  6 FOR        001534 R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FPSTOR     001B07 R   |     FPTR    =  000032     |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000BCF R
  6 HEX        000D87 R   |   6 HI         001A55 R   |   6 HLD        0006C7 R
  6 HOLD       000CFC R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0017E8 R
  6 IFETCH     001552 R   |   6 IFF        00158F R   |   6 IFMOVE     00220C R
    IMEDD   =  000080     |   6 IMMED      0017FA R   |   6 INCH       000428 R
  6 INC_FPTR   001C81 R   |   6 INITOFS    0017B0 R   |   6 INN        000675 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      0013BE R   |   6 INTER      001394 R
  6 INTQ       0023B5 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0007AF R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      001745 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       00179A R   |   6 KEY        000EC7 R   |   6 KTAP       0012AE R
  6 KTAP1      0012D1 R   |   6 KTAP2      0012D4 R   |   6 LAST       000706 R
  6 LASTN   =  0023B0 R   |   6 LBRAC      0013CB R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000873 R
    LF      =  00000A     |   6 LINK    =  0023B0 R   |   6 LITER      001506 R
  6 LN2S       0022D7 R   |   6 LOCK       001C6D R   |   6 LOG2S      0022C1 R
  6 LSHIFT     000A93 R   |   6 LSHIFT1    000A9C R   |   6 LSHIFT4    000AA4 R
  6 LT1        000889 R   |     MASKK   =  001F7F     |   6 MAX        000893 R
  6 MAX1       0008A6 R   |   6 MIN        0008B0 R   |   6 MIN1       0008C3 R
  6 MMOD1      00094C R   |   6 MMOD2      000960 R   |   6 MMOD3      000977 R
  6 MMSM1      000907 R   |   6 MMSM3      00090B R   |   6 MMSM4      000917 R
  6 MMSMa      000912 R   |   6 MMSMb      00091D R   |   6 MODD       000991 R
  6 MONE       000AFA R   |     MS      =  00002E     |   6 MSEC       0002CE R
  6 MSMOD      00092F R   |   6 MSTA1      000A22 R   |   6 MSTAR      0009FF R
    NAFR    =  004804     |   6 NAMEQ      001256 R   |   6 NAMET      001167 R
    NCLKOPT =  004808     |   6 NEGAT      0007C0 R   |   6 NEX1       000496 R
  6 NEXT       001543 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       000685 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       000EDD R
  6 NUFQ1      000EF6 R   |   6 NUMBQ      000DF4 R   |   6 NUMQ1      000E28 R
  6 NUMQ2      000E59 R   |   6 NUMQ3      000E9B R   |   6 NUMQ4      000EA0 R
  6 NUMQ5      000EAF R   |   6 NUMQ6      000EB2 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     00072B R
    OFS     =  000005     |   6 ONE        000AEC R   |   6 ONEM       000A82 R
  6 ONEP       000A75 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000047 R   |   6 ORR        0005FA R   |   6 OUTPUT     000439 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005C4 R   |   6 OVERT      001713 R
    PA      =  000000     |   6 PACKS      000C8F R   |   6 PAD        000BE0 R
  6 PAREN      00111A R   |   6 PARS       001013 R   |   6 PARS1      00103E R
  6 PARS2      001069 R   |   6 PARS3      00106C R   |   6 PARS4      001075 R
  6 PARS5      001098 R   |   6 PARS6      0010AD R   |   6 PARS7      0010BC R
  6 PARS8      0010CB R   |   6 PARSE      0010DC R   |   6 PAUSE      0002DE R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      00193D R   |   6 PDUM2      00194E R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000B3A R   |   6 PII        00223A R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       000795 R   |   6 PNAM1      0016C8 R   |   6 PRESE      00144A R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTOR      000B51 R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 PTRPLUS    001C99 R   |   6 QBRAN      0004A8 R
  6 QDUP       000744 R   |   6 QDUP1      00074E R   |   6 QKEY       000416 R
  6 QSTAC      001402 R   |   6 QUERY      00132E R   |   6 QUEST      001005 R
  6 QUIT       001467 R   |   6 QUIT1      00146F R   |   6 QUIT2      001472 R
  6 RAM2EE     0020D4 R   |     RAMBASE =  000000     |   6 RAMLAST    000719 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027C R   |   6 RAT        000557 R   |   6 RBRAC      001787 R
  6 REPEA      00160C R   |   6 RFREE      0020BB R   |   6 RFROM      000544 R
    ROP     =  004800     |   6 ROT        000755 R   |   6 ROW2BUF    00207D R
    ROWBUFF =  001680     |     RP0     =  00002C     |   6 RPAT       000521 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    RPP     =  0017FF     |   6 RPSTO      00052E R   |   6 RSHIFT     000AAF R
  6 RSHIFT1    000AB8 R   |   6 RSHIFT4    000AC0 R   |     RST_SR  =  0050B3 
  6 RT12_2     0022AA R   |   6 SAME1      001185 R   |   6 SAME2      0011AE R
  6 SAMEQ      00117D R   |   6 SCOM1      0016FD R   |   6 SCOM2      001700 R
  6 SCOMP      0016DF R   |   6 SEED       000263 R   |     SEEDX   =  000036 
    SEEDY   =  000038     |   6 SEMIS      001723 R   |   6 SETISP     0000CE R
  6 SET_RAML   00186A R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000D3B R   |   6 SIGN1      000D4B R   |   6 SLASH      00099B R
  6 SLMOD      00097F R   |   6 SNAME      001692 R   |     SP0     =  00002A 
  6 SPACE      000EFF R   |   6 SPACS      000F0E R   |   6 SPAT       00057A R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000587 R   |   6 SQRT10     002293 R
  6 SQRT2      002251 R   |   6 SQRT3      002268 R   |   6 SSMOD      000A2B R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       0009F4 R
  6 STASL      000A3C R   |   6 STOD       0007F7 R   |   6 STORE      0004DC R
  6 STR        000D69 R   |   6 STRCQ      001514 R   |   6 STRQ       00164B R
  6 STRQP      000F7C R   |   6 SUBB       00080E R   |   6 SWAPP      0005AA R
    SWIM_CSR=  007F80     |   6 TAP        001298 R   |   6 TBOOT      001A8C R
  6 TBUF       000695 R   |     TBUFFBAS=  001680     |   6 TCHAR      000B0B R
  6 TEMP       000666 R   |   6 TEVAL      0006B8 R   |   6 TFLASH     0006A7 R
  6 THENN      0015A4 R   |   6 TIB        000BF1 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       00147E R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      0019D3 R   |   6 TNAM3      0019F1 R
  6 TNAM4      0019F7 R   |   6 TNAME      0019D0 R   |   6 TOFLASH    000333 R
  6 TOKEN      001159 R   |   6 TOR        000563 R   |   6 TORAM      000373 R
    TRUEE   =  00FFFF     |   6 TWOSL      000AC7 R   |   6 TYPE1      000F2E R
  6 TYPE2      000F3A R   |   6 TYPES      000F29 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000FCF R   |   6 UDOTR      000FAF R
  6 UEND       000045 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      00086B R
  6 ULESS      000855 R   |   6 UMMOD      0008EB R   |   6 UMSTA      0009AA R
  6 UNIQ1      001689 R   |   6 UNIQU      00166A R   |   6 UNLKEE     001C07 R
  6 UNLKFL     001C26 R   |   6 UNLOCK     001C45 R   |   6 UNTIL      00156C R
    UOFFSET =  00001C     |   6 UPDATCP    001BC4 R   |   6 UPDATLAS   001B9B R
  6 UPDATPTR   0021C7 R   |   6 UPDATRUN   001BB3 R   |   6 UPDATVP    001BDB R
  6 UPL1       00063B R   |   6 UPLUS      000624 R   |     UPP     =  000006 
    URLAST  =  000020     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      00190D R   |   6 UTYP2      00191C R
  6 UTYPE      001908 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001837 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        0006E8 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0015F2 R   |   6 WITHI      0008D0 R   |   6 WORDD      001145 R
  6 WORDS      001A2D R   |   6 WORS1      001A33 R   |   6 WORS2      001A4F R
  6 WR_BYTE    001CF0 R   |   6 WR_WORD    001D15 R   |   6 WTABLE     00231F R
  6 WTAT       002343 R   |   6 WTINIT     002388 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

    XON     =  000011     |   6 XORR       00060F R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000AE1 R   |   6 ZL1        0005DC R
  6 ZLESS      0005D3 R   |   6 app_spac   002400 R   |   6 baudrate   000379 R
  6 block_er   001DDB R   |   6 clear_ra   000019 R   |   6 clock_in   000062 R
  6 copy_buf   001E3B R   |   6 copy_buf   001E5A R   |   6 copy_pro   001E5A R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001DFD R   |   6 fmove_do   0021B0 R
  6 main       000016 R   |   6 next_row   00216D R   |   6 no_move    0021B7 R
  6 pristine   001EDB R   |   6 proceed_   001E00 R   |   6 reboot     000325 R
  6 reset_ve   001F42 R   |   6 row_eras   001DBB R   |   6 row_eras   001E14 R
  6 row_eras   001E3B R   |   6 set_opti   001EAF R   |   6 set_vect   001FE3 R
  6 uart_ini   000074 R   |   6 write_ro   001E7F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2400   flags    0

