ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART2 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85       
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           000001    90 .if NUCLEO 
                           0017FF    91 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    92 DATSTK  =	0x1680	;data stack  empty
                           001680    93 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    94 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    95 .else ; DISCOVERY
                                     96 STACK   =	0x7FF 	;system (return) stack empty 
                                     97 DATSTK  =	0x680	;data stack  empty
                                     98 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     99 TIBBASE =       0X700  ; transaction input buffer addr.
                                    100 .endif
                                    101 
                                    102 ;; Memory allocation
                           000006   103 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   104 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   105 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   106 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   107 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   108 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   109 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    110 
                                    111 ; user variables constants 
                           000006   112 UBASE = UPP       ; numeric base 
                           000008   113 UFBASE = UBASE+2  ; floating point base 
                           00000A   114 UFPSW = UFBASE+2  ; floating point state word 
                           00000C   115 UTMP = UFPSW+2    ; temporary storage
                           00000E   116 UINN = UTMP+2     ; >IN tib pointer 
                           000010   117 UCTIB = UINN+2    ; tib count 
                           000012   118 UTIB = UCTIB+2    ; tib address 
                           000014   119 UINTER = UTIB+2   ; interpreter vector 
                           000016   120 UHLD = UINTER+2   ; hold 
                           000018   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           00001A   122 UVP = UCNTXT+2    ; variable pointer 
                           00001C   123 UCP = UVP+2      ; code pointer
                           00001E   124 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   125 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           000022   126 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000024   127 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    128 
                                    129 ;******  System Variables  ******
                           000026   130 XTEMP	=	URLAST +2;address called by CREATE
                           000028   131 YTEMP	=	XTEMP+2	;address called by CREATE
                           000026   132 PROD1 = XTEMP	;space for UM*
                           000028   133 PROD2 = PROD1+2
                           00002A   134 PROD3 = PROD2+2
                           00002C   135 CARRY = PROD3+2
                           00002E   136 SP0	= CARRY+2	;initial data stack pointer
                           000030   137 RP0	= SP0+2		;initial return stack pointer
                           000032   138 MS    =   RP0+2         ; millisecond counter 
                           000034   139 CNTDWN =  MS+2          ; count down timer 
                           000036   140 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000037   141 PTR16 = FPTR+1          ; middle byte of farptr 
                           000038   142 PTR8 = FPTR+2           ; least byte of farptr 
                           00003A   143 SEEDX = PTR8+2          ; PRNG seed X 
                           00003C   144 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    145 
                                    146 ; EEPROM persistant data  
                           004000   147 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   148 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   149 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   150 APP_VP = APP_CP+2  ; free data space pointer 
                                    151 
                                    152 
                                    153 ;***********************************************
                                    154 ;; Version control
                                    155 
                           000003   156 VER     =     3         ;major release version
                           000000   157 EXT     =     0         ;minor extension
                                    158 
                                    159 ;; Constants
                                    160 
                           00FFFF   161 TRUEE   =     0xFFFF      ;true flag
                                    162 
                           000040   163 COMPO   =     0x40     ;lexicon compile only bit
                           000080   164 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   165 MASKK   =     0x1F7F  ;lexicon bit mask
                                    166 
                           000002   167 CELLL   =     2       ;size of a cell
                           00000A   168 BASEE   =     10      ;default radix
                           000008   169 BKSPP   =     8       ;back space
                           00000A   170 LF      =     10      ;line feed
                           00000D   171 CRR     =     13      ;carriage return
                           000011   172 XON     =     17
                           000013   173 XOFF    =     19
                           00001B   174 ERR     =     27      ;error escape
                           000027   175 TIC     =     39      ;tick
                           0000CD   176 CALLL   =     0xCD     ;CALL opcodes
                           000080   177 IRET_CODE =   0x80    ; IRET opcode 
                                    178 
                                    179         .macro _ledon
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .if NUCLEO
                                    181         bset PC_ODR,#LED2_BIT
                                    182         .else ;DISCOVERY 
                                    183         .if DISCOVERY
                                    184         bres PD_ODR,#LD1_BIT 
                                    185         .endif
                                    186         .endif
                                    187         .endm
                                    188 
                                    189         .macro _ledoff
                                    190         .if NUCLEO 
                                    191         bres PC_ODR,#LED2_BIT
                                    192         .else ;DISCOVERY 
                                    193         .if DISCOVERY
                                    194         bset PD_ODR,#LD1_BIT 
                                    195         .endif 
                                    196         .endif
                                    197         .endm
                                    198 
                                    199 ;**********************************************************
                                    200         .area DATA (ABS)
      000000                        201         .org RAMBASE 
                                    202 ;**********************************************************
                                    203 
                                    204 ;**********************************************************
                                    205         .area SSEG (ABS) ; STACK
      001700                        206         .org 0x1700
      001700                        207         .ds 256 
                                    208 ; space for DATSTK,TIB and STACK         
                                    209 ;**********************************************************
                                    210 
                                    211 ;**********************************************************
                                    212         .area HOME ; vectors table
                                    213 ;**********************************************************
      000000 82 00 00 16            214 	int main	        ; reset
      000004 82 00 00 00            215 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            216 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            217 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            218 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            219 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            220 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            221 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            222 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            223 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            224 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            225 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            226 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            227 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            228 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            229 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            230 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            231 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            232 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            233 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            234 	int NonHandledInterrupt	; irq18
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000054 82 00 00 00            235 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            236 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            237 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            238 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            239 	int Timer4Handler	; irq23
      000068 82 00 00 00            240 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            241 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            242 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            243 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            244 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            245 	int NonHandledInterrupt	; irq29
                                    246 
                                    247 ;**********************************************************
                                    248         .area CODE
                                    249 ;**********************************************************
                                    250 
                                    251 ; non handled interrupt reset MCU
      000000                        252 NonHandledInterrupt:
      000000 A6 80            [ 1]  253         ld a, #0x80
      000002 C7 50 D1         [ 1]  254         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    255 	;iret
                                    256 
                                    257 ; used for milliseconds counter 
                                    258 ; MS is 16 bits counter 
      000005                        259 Timer4Handler:
      000005 72 5F 53 42      [ 1]  260 	clr TIM4_SR 
      000009 BE 32            [ 2]  261         ldw x,MS 
      00000B 5C               [ 1]  262         incw x 
      00000C BF 32            [ 2]  263         ldw MS,x
      00000E BE 34            [ 2]  264         ldw x,CNTDWN 
      000010 27 03            [ 1]  265         jreq 1$
      000012 5A               [ 2]  266         decw x 
      000013 BF 34            [ 2]  267         ldw CNTDWN,x 
      000015                        268 1$:         
      000015 80               [11]  269         iret 
                                    270 
                                    271 
                                    272 ;; Main entry points and COLD start data
      000016                        273 main:
                                    274 ; clear all RAM
      000016 AE 00 00         [ 2]  275 	ldw X,#RAMBASE
      000019                        276 clear_ram0:
      000019 7F               [ 1]  277 	clr (X)
      00001A 5C               [ 1]  278 	incw X
      00001B A3 17 FF         [ 2]  279 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  280 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  281         ldw x,#RPP
      000023 94               [ 1]  282         ldw sp,x
                                    283 ; set SEEDX and SEEDY to 1 
      000024 3C 3B            [ 1]  284         inc SEEDX+1 
      000026 3C 3D            [ 1]  285         inc SEEDY+1          
      000028 CC 00 4B         [ 2]  286 	jp ORIG
                                    287 
                                    288 ; COLD initialize these variables.
      00002B                        289 UZERO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B 00 0A                  290         .word      BASEE   ;BASE
      00002D 00 0A                  291         .word      10      ; floating point base 
      00002F 00 00                  292         .word      0       ; floating point state 
      000031 00 00                  293         .word      0       ;tmp
      000033 00 00                  294         .word      0       ;>IN
      000035 00 00                  295         .word      0       ;#TIB
      000037 17 00                  296         .word      TIBB    ;TIB
      000039 13 61                  297         .word      INTER   ;'EVAL
      00003B 00 00                  298         .word      0       ;HLD
      00003D 29 66                  299         .word      LASTN  ;CNTXT pointer
      00003F 00 80                  300         .word      VAR_BASE   ;variables free space pointer 
      000041 2A 00                  301         .word      app_space ; FLASH free space pointer 
      000043 29 66                  302         .word      LASTN   ;LAST
      000045 00 00                  303         .word      0        ; OFFSET 
      000047 00 00                  304         .word      0       ; TFLASH
                                    305 ;       .word      0       ; URLAST   
      000049 00 00                  306 UEND:   .word      0
                                    307 
      00004B                        308 ORIG:   
                                    309 ; initialize SP
      00004B AE 17 FF         [ 2]  310         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  311         LDW     SP,X
      00004F BF 30            [ 2]  312         LDW     RP0,X
      000051 AE 16 80         [ 2]  313         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2E            [ 2]  314         LDW     SP0,X
                           000001   315 .if NUCLEO        
                                    316 ; initialize PC_5 as output to control LED2
                                    317 ; added by Picatout 
      000056 72 1A 50 0D      [ 1]  318         bset PC_CR1,#LED2_BIT
      00005A 72 1A 50 0E      [ 1]  319         bset PC_CR2,#LED2_BIT
      00005E 72 1A 50 0C      [ 1]  320         bset PC_DDR,#LED2_BIT
                                    321 .endif 
                           000000   322 .if DISCOVERY
                                    323         bset PD_CR1,#LD1_BIT
                                    324         bset PD_CR2,#LD1_BIT
                                    325         bset PD_DDR,#LD1_BIT 
                                    326 .endif
      000062                        327         _ledoff
                           000001     1         .if NUCLEO 
      000062 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    328 ; initialize clock to HSI
                                    329 ; no divisor 16Mhz 
                                    330 ; Added by Picatout 
      000066                        331 clock_init:
      000066 72 5F 50 C6      [ 1]  332         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  333 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   334 .if NUCLEO|DOORBELL
      00006E A6 E1            [ 1]  335 	ld a,#CLK_SWR_HSI
                           000000   336 .else ; DISCOVERY as 16Mhz crystal
                                    337 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    338 .endif 
      000070 C7 50 C4         [ 1]  339 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  340 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  341 	jrne 1$
                                    342         
                                    343 ; initialize UART, 115200 8N1
      000078                        344 uart_init:
                           000001   345 .if NUCLEO 
      000078 72 14 50 C7      [ 1]  346 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    347 	; configure tx pin
      00007C 72 1A 50 02      [ 1]  348 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000080 72 1A 50 03      [ 1]  349 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000084 72 1A 50 04      [ 1]  350 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    351 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   352 .else ; DISCOVERY use UART2 
                                    353 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    354 	; configure tx pin
                                    355 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    356 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    357 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    358 .endif
                                    359 ; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 33      [ 1]  360 	mov UART_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 32      [ 1]  361 	mov UART_BRR1,#0x8
      000090 35 0C 52 35      [ 1]  362 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    363 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  364 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  365 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  366 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  367 	bset TIM4_IER,#TIM4_IER_UIE 
                                    368 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  369         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  370         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  371         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  372         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  373         rim
      0000AF CC 1A 65         [ 2]  374         jp  COLD   ;default=MN1
                                    375 
                                    376 
                                    377 ;; place MCU in sleep mode with
                                    378 ;; halt opcode 
                                    379 ;; BYE ( -- )
      0000B2 00 00                  380         .word 0
                           0000B4   381         LINK=.
      0000B4 03                     382         .byte 3 
      0000B5 42 59 45               383         .ascii "BYE"
      0000B8                        384 BYE: 
      0000B8 8E               [10]  385         halt 
      0000B9 81               [ 4]  386         ret 
                                    387 
                                    388 ; Enable interrupts 
                                    389 ; EI ( -- )
      0000BA 00 B4                  390         .word LINK 
                           0000BC   391         LINK=.
      0000BC 02                     392         .byte 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 45 49                  393         .ascii "EI"
      0000BF                        394 EI:
      0000BF 9A               [ 1]  395         rim 
      0000C0 81               [ 4]  396         ret 
                                    397 
                                    398 ; Disable interrupts
                                    399 ; DI ( -- )
      0000C1 00 BC                  400         .word LINK 
                           0000C3   401         LINK=.
      0000C3 02                     402         .byte 2 
      0000C4 44 49                  403         .ascii "DI"
      0000C6                        404 DI:
      0000C6 9B               [ 1]  405         sim 
      0000C7 81               [ 4]  406         ret 
                                    407 
                                    408 ; set interrupt priority level 
                                    409 ; SET-ISP ( n1 n2 -- )
                                    410 ; n1 level {1..3}
                                    411 ; n2 vector {0..29}
      0000C8 00 C3                  412         .word LINK 
                           0000CA   413         LINK=.
      0000CA 07                     414         .byte 7 
      0000CB 53 45 54 2D 49 53 50   415         .ascii "SET-ISP"
      0000D2                        416 SETISP:
      0000D2 90 93            [ 1]  417         ldw y,x 
      0000D4 90 FE            [ 2]  418         ldw y,(y)
      0000D6 A6 04            [ 1]  419         ld a,#4 ; 4 slot per register 
                                    420 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  421         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  422         and a,#3 
      0000DC 48               [ 1]  423         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  424         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  425         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  426         clrw y 
      0000E4 90 97            [ 1]  427         ld yl,a 
      0000E6 1D 00 02         [ 2]  428         subw x,#CELLL 
      0000E9 FF               [ 2]  429         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  430         ldw y,x 
      0000EC 90 EE 02         [ 2]  431         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  432         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  433         subw x,#CELLL 
      0000F4 FF               [ 2]  434         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 C8         [ 4]  435         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 04 79         [ 4]  436         call DOLIT 
      0000FB 00 03                  437         .word 3
      0000FD CD 05 AE         [ 4]  438         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 0A D6         [ 4]  439         call LSHIFT ; creat slot mask 
      000103 CD 07 D4         [ 4]  440         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 EA         [ 4]  441         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 05 67         [ 4]  442         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 07 59         [ 4]  443         call ROT  ; ( reg lshift level )
      00010F CD 05 AE         [ 4]  444         call SWAPP ; ( reg level lshift )
      000112 CD 0A D6         [ 4]  445         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 05 48         [ 4]  446         call RFROM ; ( reg slot_level masked_val )
      000118 CD 05 FE         [ 4]  447         call ORR   ; ( reg updated_rval )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00011B CD 05 AE         [ 4]  448         call SWAPP 
      00011E CD 05 04         [ 4]  449         call CSTOR
                                    450 
                                    451 ; sélectionne l'application 
                                    452 ; qui démarre automatique lors 
                                    453 ; d'un COLD start 
      000121 00 CA                  454         .word LINK 
                           000123   455         LINK=.
      000123 07                     456         .byte 7
      000124 41 55 54 4F 52 55 4E   457         .ascii "AUTORUN"
      00012B                        458 AUTORUN:
      00012B CD 11 26         [ 4]  459         call TOKEN 
      00012E CD 05 9E         [ 4]  460         call DUPP 
      000131 CD 04 AC         [ 4]  461         call QBRAN 
      000134 02 11                  462         .word FORGET2
      000136 CD 12 23         [ 4]  463         call NAMEQ
      000139 CD 07 48         [ 4]  464         call QDUP 
      00013C CD 04 AC         [ 4]  465         call QBRAN 
      00013F 02 11                  466         .word FORGET2
      000141 CD 05 94         [ 4]  467         call DROP 
      000144 1D 00 04         [ 2]  468         subw x,#2*CELLL 
      000147 90 5F            [ 1]  469         clrw y 
      000149 FF               [ 2]  470         ldw (x),y 
      00014A 90 AE 40 02      [ 2]  471         ldw y,#APP_RUN 
      00014E EF 02            [ 2]  472         ldw (2,x),y 
      000150 CC 1D 5E         [ 2]  473         jp EESTORE 
                                    474 
                                    475 ;; Reset dictionary pointer before 
                                    476 ;; forgotten word. RAM space and 
                                    477 ;; interrupt vector defined after 
                                    478 ;; must be resetted also.
      000153 01 23                  479         .word LINK 
                           000155   480         LINK=.
      000155 06                     481         .byte 6
      000156 46 4F 52 47 45 54      482         .ascii "FORGET" 
      00015C                        483 FORGET: 
      00015C CD 11 26         [ 4]  484         call TOKEN
      00015F CD 05 9E         [ 4]  485         call DUPP 
      000162 CD 04 AC         [ 4]  486         call QBRAN 
      000165 02 11                  487         .word FORGET2
      000167 CD 12 23         [ 4]  488         call NAMEQ ; ( a -- ca na | a F )
      00016A CD 07 48         [ 4]  489         call QDUP 
      00016D CD 04 AC         [ 4]  490         call QBRAN 
      000170 02 11                  491         .word FORGET2
                                    492 ; only forget users words 
      000172 CD 05 9E         [ 4]  493         call DUPP ; ( ca na na )
      000175 CD 04 79         [ 4]  494         call DOLIT 
      000178 2A 00                  495         .word app_space 
      00017A CD 05 AE         [ 4]  496         call SWAPP 
      00017D CD 08 7A         [ 4]  497         call  ULESS 
      000180 CD 04 AC         [ 4]  498         call QBRAN 
      000183 01 D3                  499         .word FORGET6 
                                    500 ; ( ca na -- )        
                                    501 ;reset ivec with address >= ca
      000185 CD 05 AE         [ 4]  502         call SWAPP ; ( na ca -- ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000188 CD 1F 61         [ 4]  503         call CHKIVEC ; ( na -- ) 
                                    504 ; start at LAST and link back to na 
                                    505 ; if variable found reset VP at that point.
      00018B                        506 FORGET1:
      00018B CD 07 0A         [ 4]  507         call LAST 
      00018E CD 04 F7         [ 4]  508         call AT 
      000191 CD 05 9E         [ 4]  509         call DUPP  ; ( -- na last last )
      000194 CD 02 27         [ 4]  510         call FREEVAR ; ( -- na last )
      000197 CD 05 9E         [ 4]  511         call DUPP 
      00019A CD 04 79         [ 4]  512         call DOLIT 
      00019D 00 02                  513         .word 2 
      00019F CD 08 33         [ 4]  514         call SUBB ; ( na last -- na last lfa ) link address 
      0001A2 CD 04 F7         [ 4]  515         call AT 
      0001A5 CD 05 9E         [ 4]  516         call DUPP ; ( -- na last a a )
      0001A8 CD 06 DE         [ 4]  517         call CNTXT 
      0001AB CD 04 E0         [ 4]  518         call STORE
      0001AE CD 07 0A         [ 4]  519         call LAST  
      0001B1 CD 04 E0         [ 4]  520         call STORE ; ( --  na last )
      0001B4 CD 05 C8         [ 4]  521         call OVER 
      0001B7 CD 08 5B         [ 4]  522         call EQUAL ; ( na last na -- na T|F ) 
      0001BA CD 04 AC         [ 4]  523         call QBRAN 
      0001BD 01 8B                  524         .word FORGET1 
                                    525 ; ( na -- )
      0001BF CD 04 79         [ 4]  526         call DOLIT 
      0001C2 00 02                  527         .word 2 
      0001C4 CD 08 33         [ 4]  528         call SUBB 
      0001C7 CD 06 FA         [ 4]  529         call CPP 
      0001CA CD 04 E0         [ 4]  530         call STORE  
      0001CD CD 1B 91         [ 4]  531         call UPDATCP 
      0001D0 CC 1B 68         [ 2]  532         jp UPDATLAST 
      0001D3                        533 FORGET6: ; tried to forget a RAM or system word 
                                    534 ; ( ca na -- )
      0001D3 1D 00 02         [ 2]  535         subw x,#CELLL 
      0001D6 90 BE 2E         [ 2]  536         ldw y,SP0 
      0001D9 FF               [ 2]  537         ldw (x),y  
      0001DA CD 08 7A         [ 4]  538         call ULESS
      0001DD CD 04 AC         [ 4]  539         call QBRAN 
      0001E0 02 03                  540         .word PROTECTED 
      0001E2 CD 13 2F         [ 4]  541         call ABORQ 
      0001E5 1D                     542         .byte 29
      0001E6 20 46 6F 72 20 52 41   543         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000203                        544 PROTECTED:
      000203 CD 13 2F         [ 4]  545         call ABORQ
      000206 0A                     546         .byte 10
      000207 20 50 72 6F 74 65 63   547         .ascii " Protected"
             74 65 64
      000211                        548 FORGET2: ; no name or not found in dictionary 
      000211 CD 13 2F         [ 4]  549         call ABORQ
      000214 05                     550         .byte 5
      000215 20 77 68 61 74         551         .ascii " what"
      00021A                        552 FORGET4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00021A CC 05 94         [ 2]  553         jp DROP 
                                    554 
                                    555 
                                    556 ;---------------------------------
                                    557 ; if na is variable 
                                    558 ; free variable data  
                                    559 ; FREEVAR ( na -- )
                                    560 ;---------------------------------
      00021D 01 55                  561         .word LINK 
                           00021F   562         LINK=.
      00021F 07                     563         .byte 7 
      000220 46 52 45 45 56 41 52   564         .ascii "FREEVAR"
      000227                        565 FREEVAR:
      000227 CD 05 9E         [ 4]  566         call DUPP ; ( na na -- )
      00022A CD 05 15         [ 4]  567         CALL CAT  ; ( na c -- )
      00022D CD 0A B8         [ 4]  568         call ONEP ;
      000230 CD 07 BA         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000233 CD 0A B8         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000236 CD 05 9E         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000239 CD 04 F7         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023C CD 04 79         [ 4]  573         call DOLIT 
      00023F 06 4B                  574         .word DOVAR ; if routine address is DOVAR then variable 
      000241 CD 08 5B         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000244 CD 04 AC         [ 4]  576         call QBRAN 
      000247 02 5D                  577         .word FREEVAR4 
      000249 CD 04 79         [ 4]  578         call DOLIT 
      00024C 00 02                  579         .word 2 
      00024E CD 07 BA         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000251 CD 04 F7         [ 4]  581         call AT 
      000254 CD 06 EC         [ 4]  582         call VPP   
      000257 CD 04 E0         [ 4]  583         call STORE 
      00025A CC 1B A8         [ 2]  584         jp UPDATVP 
      00025D                        585 FREEVAR4: ; not variable
      00025D CC 05 94         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;    SEED ( n -- )
                                    589 ; Initialize PRNG seed with n 
      000260 02 1F                  590         .word LINK 
                           000262   591         LINK=. 
      000262 04                     592         .byte 4 
      000263 53 45 45 44            593         .ascii "SEED" 
      000267                        594 SEED:
      000267 90 93            [ 1]  595         ldw y,x 
      000269 1C 00 02         [ 2]  596         addw x,#CELLL
      00026C 90 FE            [ 2]  597         ldw y,(y)
      00026E 90 9E            [ 1]  598         ld a,yh 
      000270 B7 3A            [ 1]  599         ld SEEDX,a 
      000272 90 9F            [ 1]  600         ld a,yl 
      000274 B7 3C            [ 1]  601         ld SEEDY,a 
      000276 81               [ 4]  602         ret 
                                    603 
                                    604 ;    RANDOM ( u1 -- u2 )
                                    605 ; Pseudo random number betwen 0 and u1-1
      000277 02 62                  606         .word LINK 
                           000279   607         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000279 06                     608         .byte 6
      00027A 52 41 4E 44 4F 4D      609         .ascii "RANDOM" 
      000280                        610 RANDOM:
                                    611 ;local variable 
                           000001   612         SPSAVE=1
                           000002   613         VSIZE=2 
      000280 52 02            [ 2]  614         sub sp,#VSIZE
      000282 1F 01            [ 2]  615         ldw (SPSAVE,sp),x  
                                    616 ; XTEMP=(SEEDX<<5)^SEEDX 
      000284 90 93            [ 1]  617         ldw y,x 
      000286 90 FE            [ 2]  618         ldw y,(y)
      000288 90 BF 28         [ 2]  619         ldw YTEMP,y 
      00028B BE 3A            [ 2]  620 	ldw x,SEEDX 
      00028D 58               [ 2]  621 	sllw x 
      00028E 58               [ 2]  622 	sllw x 
      00028F 58               [ 2]  623 	sllw x 
      000290 58               [ 2]  624 	sllw x 
      000291 58               [ 2]  625 	sllw x 
      000292 9E               [ 1]  626 	ld a,xh 
      000293 B8 3A            [ 1]  627 	xor a,SEEDX 
      000295 B7 26            [ 1]  628 	ld XTEMP,a 
      000297 9F               [ 1]  629 	ld a,xl 
      000298 B8 3B            [ 1]  630 	xor a,SEEDX+1 
      00029A B7 27            [ 1]  631 	ld XTEMP+1,a 
                                    632 ; SEEDX=SEEDY 
      00029C BE 3C            [ 2]  633 	ldw x,SEEDY 
      00029E BF 3A            [ 2]  634 	ldw SEEDX,x  
                                    635 ; SEEDY=SEEDY^(SEEDY>>1)
      0002A0 54               [ 2]  636 	srlw x 
      0002A1 9E               [ 1]  637 	ld a,xh 
      0002A2 B8 3C            [ 1]  638 	xor a,SEEDY 
      0002A4 B7 3C            [ 1]  639 	ld SEEDY,a  
      0002A6 9F               [ 1]  640 	ld a,xl 
      0002A7 B8 3D            [ 1]  641 	xor a,SEEDY+1 
      0002A9 B7 3D            [ 1]  642 	ld SEEDY+1,a 
                                    643 ; XTEMP>>3 
      0002AB BE 26            [ 2]  644 	ldw x,XTEMP 
      0002AD 54               [ 2]  645 	srlw x 
      0002AE 54               [ 2]  646 	srlw x 
      0002AF 54               [ 2]  647 	srlw x 
                                    648 ; x=XTEMP^x 
      0002B0 9E               [ 1]  649 	ld a,xh 
      0002B1 B8 26            [ 1]  650 	xor a,XTEMP 
      0002B3 95               [ 1]  651 	ld xh,a 
      0002B4 9F               [ 1]  652 	ld a,xl 
      0002B5 B8 27            [ 1]  653 	xor a,XTEMP+1  
      0002B7 97               [ 1]  654 	ld xl,a 
                                    655 ; SEEDY=x^SEEDY 
      0002B8 B8 3D            [ 1]  656 	xor a,SEEDY+1
      0002BA 97               [ 1]  657 	ld xl,a 
      0002BB 9E               [ 1]  658 	ld a,xh 
      0002BC B8 3C            [ 1]  659 	xor a,SEEDY
      0002BE 95               [ 1]  660 	ld xh,a 
      0002BF BF 3C            [ 2]  661 	ldw SEEDY,x 
                                    662 ; return SEEDY modulo YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C1 90 BE 28         [ 2]  663 	ldw y,YTEMP  
      0002C4 65               [ 2]  664 	divw x,y 
      0002C5 1E 01            [ 2]  665 	ldw x,(SPSAVE,sp)
      0002C7 FF               [ 2]  666         ldw (x),y 
      0002C8 5B 02            [ 2]  667         addw sp,#VSIZE 
      0002CA 81               [ 4]  668 	ret 
                                    669 
                                    670 
                                    671 ;;
                                    672 ;; get millisecond counter 
                                    673 ;; msec ( -- u )
                                    674 ;; Added by Picatout 2020-04-26
      0002CB 02 79                  675         .word LINK  
                           0002CD   676         LINK = . 
      0002CD 04                     677         .byte 4
      0002CE 4D 53 45 43            678         .ascii "MSEC"
      0002D2                        679 MSEC: 
      0002D2 1D 00 02         [ 2]  680         subw x,#CELLL 
      0002D5 90 BE 32         [ 2]  681         ldw y,MS 
      0002D8 FF               [ 2]  682         ldw (x),y 
      0002D9 81               [ 4]  683         ret 
                                    684 
                                    685 ; suspend execution for u msec 
                                    686 ;  pause ( u -- )
      0002DA 02 CD                  687         .word LINK 
                           0002DC   688         LINK=.
      0002DC 05                     689         .byte 5 
      0002DD 50 41 55 53 45         690         .ascii "PAUSE"
      0002E2                        691 PAUSE:
      0002E2 90 93            [ 1]  692         ldw y,x
      0002E4 90 FE            [ 2]  693         ldw y,(y)
      0002E6 72 B9 00 32      [ 2]  694         addw y,MS 
      0002EA 8F               [10]  695 1$:     wfi  
      0002EB 90 B3 32         [ 2]  696         cpw y,MS  
      0002EE 26 FA            [ 1]  697         jrne 1$        
      0002F0 1C 00 02         [ 2]  698         addw x,#CELLL 
      0002F3 81               [ 4]  699         ret 
                                    700 
                                    701 ; initialize count down timer 
                                    702 ;  TIMER ( u -- )  milliseconds 
      0002F4 02 DC                  703         .word LINK 
                           0002F6   704         LINK=.
      0002F6 05                     705         .byte 5 
      0002F7 54 49 4D 45 52         706         .ascii "TIMER" 
      0002FC                        707 TIMER:
      0002FC 90 93            [ 1]  708         ldw y,x
      0002FE 90 FE            [ 2]  709         ldw y,(y) 
      000300 90 BF 34         [ 2]  710         ldw CNTDWN,y
      000303 1C 00 02         [ 2]  711         addw x,#CELLL 
      000306 81               [ 4]  712         ret 
                                    713 
                                    714 ; check for TIMER exiparition 
                                    715 ;  TIMEOUT? ( -- 0|-1 )
      000307 02 F6                  716         .word LINK 
                           000309   717         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000309 08                     718         .byte 8 
      00030A 54 49 4D 45 4F 55 54   719         .ascii "TIMEOUT?"
             3F
      000312                        720 TIMEOUTQ: 
      000312 4F               [ 1]  721         clr a
      000313 1D 00 02         [ 2]  722         subw x,#CELLL 
      000316 90 BE 34         [ 2]  723         ldw y,CNTDWN 
      000319 26 01            [ 1]  724         jrne 1$ 
      00031B 43               [ 1]  725         cpl a 
      00031C E7 01            [ 1]  726 1$:     ld (1,x),a 
      00031E F7               [ 1]  727         ld (x),a 
      00031F 81               [ 4]  728         ret         
                                    729 
                                    730 ; reboot MCU 
                                    731 ; REBOOT ( -- )
      000320 03 09                  732         .word LINK 
                           000322   733         LINK=. 
      000322 06                     734         .byte 6 
      000323 52 45 42 4F 4F 54      735         .ascii "REBOOT"
      000329                        736 reboot:
      000329 CC 00 00         [ 2]  737         jp NonHandledInterrupt
                                    738 
                                    739 ; compile to flash memory 
                                    740 ; TO-FLASH ( -- )
      00032C 03 22                  741         .word LINK 
                           00032E   742         LINK=.
      00032E 08                     743         .byte 8
      00032F 54 4F 2D 46 4C 41 53   744         .ascii "TO-FLASH"
             48
      000337                        745 TOFLASH:
      000337 CD 07 1D         [ 4]  746         call RAMLAST 
      00033A CD 04 F7         [ 4]  747         call AT 
      00033D CD 07 48         [ 4]  748         call QDUP 
      000340 CD 04 AC         [ 4]  749         call QBRAN
      000343 03 66                  750         .word 1$
      000345 CD 13 2F         [ 4]  751         call ABORQ 
      000348 1D                     752         .byte 29
      000349 20 4E 6F 74 20 77 68   753         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000366 90 AE FF FF      [ 2]  754 1$:     ldw y,#-1 
      00036A 90 BF 22         [ 2]  755         ldw UTFLASH,y
      00036D 81               [ 4]  756         ret 
                                    757 
                                    758 ; compile to RAM 
                                    759 ; TO-RAM ( -- )
      00036E 03 2E                  760         .word LINK 
                           000370   761         LINK=.
      000370 06                     762         .byte 6 
      000371 54 4F 2D 52 41 4D      763         .ascii "TO-RAM"
      000377                        764 TORAM:
      000377 90 5F            [ 1]  765         clrw y 
      000379 90 BF 22         [ 2]  766         ldw UTFLASH,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037C 81               [ 4]  767         ret 
                                    768 
                                    769 ;; BAUD RATE constants table
                                    770 ; values to put in BRR1 & BRR2 
      00037D                        771 baudrate: 
      00037D A0 1B                  772 	.byte 0xa0,0x1b ; 2400
      00037F D0 05                  773 	.byte 0xd0,0x5  ; 4800 
      000381 68 03                  774 	.byte 0x68,0x3  ; 9600
      000383 34 01                  775 	.byte 0x34,0x1  ; 19200
      000385 11 06                  776 	.byte 0x11,0x6  ; 57600
      000387 08 0B                  777 	.byte 0x8,0xb   ; 115200
                                    778 
                                    779 ; BAUD RATE CONSTANTS names 
                                    780 ; 2400 baud
      000389 03 70                  781 	.word LINK
                           00038B   782 LINK	= .
      00038B 04                     783 	.byte 4
      00038C 42 32 4B 34            784 	.ascii "B2K4" 
      000390                        785 B2K4:
      000390 1D 00 02         [ 2]  786 	subw x,#CELLL 
      000393 90 5F            [ 1]  787         clrw y
      000395 FF               [ 2]  788         ldw (x),y
      000396 81               [ 4]  789 	ret
                                    790 ; 4800 baud	
      000397 03 8B                  791 	.word LINK
                           000399   792 LINK	= .
      000399 04                     793 	.byte 4
      00039A 42 34 4B 38            794 	.ascii "B4K8" 
      00039E                        795 B4K8:
      00039E 1D 00 02         [ 2]  796         subw x,#CELLL 
      0003A1 90 AE 00 02      [ 2]  797         ldw y,#2 
      0003A5 FF               [ 2]  798         ldw (x),y
      0003A6 81               [ 4]  799         ret 
                                    800 ; 9600 baud
      0003A7 03 99                  801 	.word LINK
                           0003A9   802 LINK	= .
      0003A9 04                     803 	.byte 4
      0003AA 42 39 4B 36            804 	.ascii "B9K6" 
      0003AE                        805 B9K6:
      0003AE 1D 00 02         [ 2]  806         subw x,#CELLL 
      0003B1 90 AE 00 04      [ 2]  807         ldw y,#4 
      0003B5 FF               [ 2]  808         ldw (x),y 
      0003B6 81               [ 4]  809         ret 
                                    810 ; 19200 baud
      0003B7 03 A9                  811 	.word LINK
                           0003B9   812 LINK	= .
      0003B9 05                     813 	.byte 5
      0003BA 42 31 39 4B 32         814 	.ascii "B19K2" 
      0003BF                        815 B19K2:
      0003BF 1D 00 02         [ 2]  816         subw x,#CELLL
      0003C2 90 AE 00 06      [ 2]  817         ldw y,#6 
      0003C6 FF               [ 2]  818         ldw (x),y 
      0003C7 81               [ 4]  819         ret 
                                    820 ; 57600 baud        
      0003C8 03 B9                  821 	.word LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           0003CA   822 LINK	= .
      0003CA 05                     823 	.byte 5
      0003CB 42 35 37 4B 36         824 	.ascii "B57K6" 
      0003D0                        825 B57K6:
      0003D0 1D 00 02         [ 2]  826         subw x,#CELLL 
      0003D3 90 AE 00 08      [ 2]  827         ldw y,#8 
      0003D7 FF               [ 2]  828         ldw (x),y 
      0003D8 81               [ 4]  829         ret 
                                    830 ; 115200 baud 
      0003D9 03 CA                  831 	.word LINK
                           0003DB   832 LINK	= .
      0003DB 06                     833 	.byte 6
      0003DC 42 31 31 35 4B 32      834 	.ascii "B115K2" 
      0003E2                        835 B115K2:
      0003E2 1D 00 02         [ 2]  836 	subw x,#CELLL 
      0003E5 90 AE 00 0A      [ 2]  837         ldw y,#10 
      0003E9 FF               [ 2]  838         ldw (x),y 
      0003EA 81               [ 4]  839         ret 
                                    840 	
                                    841 ;; set UART2 BAUD rate
                                    842 ;	BAUD ( u -- )
      0003EB 03 DB                  843 	.word LINK 
                           0003ED   844 LINK	= .
      0003ED 04                     845 	.byte 4
      0003EE 42 41 55 44            846 	.ascii "BAUD" 
      0003F2                        847 BAUD:
      0003F2 1D 00 02         [ 2]  848 	subw x,#CELLL
      0003F5 90 AE 03 7D      [ 2]  849         ldw y,#baudrate 
      0003F9 FF               [ 2]  850         ldw (x),y 
      0003FA CD 07 BA         [ 4]  851         call PLUS
      0003FD 90 93            [ 1]  852         ldw y,x  
      0003FF 90 FE            [ 2]  853         ldw y,(y)
      000401 90 F6            [ 1]  854         ld a,(y)
      000403 88               [ 1]  855         push a 
      000404 90 5C            [ 1]  856         incw y 
      000406 90 F6            [ 1]  857         ld a,(y)
      000408 C7 52 33         [ 1]  858         ld UART_BRR2,a 
      00040B 84               [ 1]  859         pop a
      00040C C7 52 32         [ 1]  860         ld UART_BRR1,a 
      00040F 1C 00 02         [ 2]  861         addw x,#CELLL 
      000412 81               [ 4]  862         ret 
                                    863 
                                    864 ;; Device dependent I/O
                                    865 ;       ?RX     ( -- c T | F )
                                    866 ;         Return input byte and true, or false.
      000413 03 ED                  867         .word      LINK 
                           000415   868 LINK	= .
      000415 04                     869         .byte      4
      000416 3F 4B 45 59            870         .ascii     "?KEY"
      00041A                        871 QKEY:
      00041A 90 5F            [ 1]  872         CLRW Y 
      00041C 72 0B 52 30 0B   [ 2]  873         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000421 C6 52 31         [ 1]  874         LD    A,UART_DR   ;get char in A
      000424 1D 00 02         [ 2]  875 	SUBW	X,#2
      000427 E7 01            [ 1]  876         LD     (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000429 7F               [ 1]  877 	CLR	(X)
      00042A 90 53            [ 2]  878         CPLW     Y
      00042C                        879 INCH:
      00042C 1D 00 02         [ 2]  880 		SUBW	X,#2
      00042F FF               [ 2]  881         LDW     (X),Y
      000430 81               [ 4]  882         RET
                                    883 
                                    884 ;       TX!     ( c -- )
                                    885 ;       Send character c to  output device.
      000431 04 15                  886         .word      LINK
                           000433   887 LINK	= .
      000433 04                     888         .byte      4
      000434 45 4D 49 54            889         .ascii     "EMIT"
      000438                        890 EMIT:
      000438 E6 01            [ 1]  891         LD     A,(1,X)
      00043A 1C 00 02         [ 2]  892 	ADDW	X,#2
      00043D 72 0F 52 30 FB   [ 2]  893 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000442 C7 52 31         [ 1]  894         LD    UART_DR,A   ;send A
      000445 81               [ 4]  895         RET
                                    896 
                                    897 ;       FC-XON  ( -- )
                                    898 ;       send XON character 
      000446 04 33                  899         .word LINK
                           000448   900 LINK    = .
      000448 06                     901         .byte 6 
      000449 46 43 2D 58 4F 4E      902         .ascii "FC-XON"
      00044F                        903 FC_XON:
      00044F 1D 00 02         [ 2]  904         subw x,#CELLL 
      000452 7F               [ 1]  905         clr (x)
      000453 A6 11            [ 1]  906         ld a,#XON 
      000455 E7 01            [ 1]  907         ld (1,x),a 
      000457 CD 04 38         [ 4]  908         call EMIT 
      00045A 81               [ 4]  909         ret 
                                    910 
                                    911 ;       FC-XOFF ( -- )
                                    912 ;       Send XOFF character 
      00045B 04 48                  913         .word LINK
                           00045D   914 LINK    = .
      00045D 07                     915         .byte 7
      00045E 46 43 2D 58 4F 46 46   916         .ascii "FC-XOFF"
      000465                        917 FC_XOFF:
      000465 1D 00 02         [ 2]  918         subw x,#CELLL 
      000468 7F               [ 1]  919         clr (x)
      000469 A6 13            [ 1]  920         ld a,#XOFF 
      00046B E7 01            [ 1]  921         ld (1,x),a 
      00046D CD 04 38         [ 4]  922         call EMIT 
      000470 81               [ 4]  923         ret
                                    924 
                                    925 ;; The kernel
                                    926 
                                    927 ;       doLIT   ( -- w )
                                    928 ;       Push an inline literal.
      000471 04 5D                  929         .word      LINK
                           000473   930 LINK	= 	.
      000473 45                     931 	.byte      COMPO+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000474 44 4F 4C 49 54         932         .ascii     "DOLIT"
      000479                        933 DOLIT:
      000479 1D 00 02         [ 2]  934 	SUBW X,#2
      00047C 16 01            [ 2]  935         ldw y,(1,sp)
      00047E 90 FE            [ 2]  936         ldw y,(y)
      000480 FF               [ 2]  937         ldw (x),y
      000481 90 85            [ 2]  938         popw y 
      000483 90 EC 02         [ 2]  939         jp (2,y)
                                    940 
                                    941 ;       next    ( -- )
                                    942 ;       Code for  single index loop.
      000486 04 73                  943         .word      LINK
                           000488   944 LINK	= 	.
      000488 44                     945 	.byte      COMPO+4
      000489 6E 65 78 74            946         .ascii     "next"
      00048D                        947 DONXT:
      00048D 16 03            [ 2]  948 	LDW Y,(3,SP)
      00048F 90 5A            [ 2]  949 	DECW Y
      000491 2A 07            [ 1]  950 	JRPL NEX1 ; jump if N=0
      000493 90 85            [ 2]  951 	POPW Y
      000495 5B 02            [ 2]  952         addw sp,#2
      000497 90 EC 02         [ 2]  953         JP (2,Y)
      00049A                        954 NEX1:
      00049A 17 03            [ 2]  955         LDW (3,SP),Y
      00049C 90 85            [ 2]  956         POPW Y
      00049E 90 FE            [ 2]  957 	LDW Y,(Y)
      0004A0 90 FC            [ 2]  958 	JP (Y)
                                    959 
                                    960 ;       ?branch ( f -- )
                                    961 ;       Branch if flag is zero.
      0004A2 04 88                  962         .word      LINK
                           0004A4   963 LINK	= 	.
      0004A4 47                     964 	.byte      COMPO+7
      0004A5 3F 42 52 41 4E 43 48   965         .ascii     "?BRANCH"
      0004AC                        966 QBRAN:	
      0004AC 90 93            [ 1]  967         LDW Y,X
      0004AE 1C 00 02         [ 2]  968 	ADDW X,#2
      0004B1 90 FE            [ 2]  969 	LDW Y,(Y)
      0004B3 27 0E            [ 1]  970         JREQ     BRAN
      0004B5 90 85            [ 2]  971 	POPW Y
      0004B7 90 EC 02         [ 2]  972 	JP (2,Y)
                                    973         
                                    974 ;       branch  ( -- )
                                    975 ;       Branch to an inline address.
      0004BA 04 A4                  976         .word      LINK
                           0004BC   977 LINK	= 	.
      0004BC 46                     978 	.byte      COMPO+6
      0004BD 42 52 41 4E 43 48      979         .ascii     "BRANCH"
      0004C3                        980 BRAN:
      0004C3 90 85            [ 2]  981         POPW Y
      0004C5 90 FE            [ 2]  982 	LDW Y,(Y)
      0004C7 90 FC            [ 2]  983         JP     (Y)
                                    984 
                                    985 ;       EXECUTE ( ca -- )
                                    986 ;       Execute  word at ca.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C9 04 BC                  987         .word      LINK
                           0004CB   988 LINK	= 	.
      0004CB 07                     989         .byte       7
      0004CC 45 58 45 43 55 54 45   990         .ascii     "EXECUTE"
      0004D3                        991 EXECU:
      0004D3 90 93            [ 1]  992         LDW Y,X
      0004D5 1C 00 02         [ 2]  993 	ADDW X,#2
      0004D8 90 FE            [ 2]  994 	LDW  Y,(Y)
      0004DA 90 FC            [ 2]  995         JP   (Y)
                                    996 
                           000001   997 OPTIMIZE = 1
                           000001   998 .if OPTIMIZE 
                                    999 ; remplacement de CALL EXIT par 
                                   1000 ; le opcode de RET.
                                   1001 ; Voir modification au code de ";"
                           000000  1002 .else 
                                   1003 ;       EXIT    ( -- )
                                   1004 ;       Terminate a colon definition.
                                   1005         .word      LINK
                                   1006 LINK = .
                                   1007         .byte      4
                                   1008         .ascii     "EXIT"
                                   1009 EXIT:
                                   1010         POPW Y
                                   1011         RET
                                   1012 .endif 
                                   1013 
                                   1014 ;       !       ( w a -- )
                                   1015 ;       Pop  data stack to memory.
      0004DC 04 CB                 1016         .word      LINK
                           0004DE  1017 LINK = .
      0004DE 01                    1018         .byte      1
      0004DF 21                    1019         .ascii     "!"
      0004E0                       1020 STORE:
      0004E0 90 93            [ 1] 1021         LDW Y,X
      0004E2 90 FE            [ 2] 1022         LDW Y,(Y)    ;Y=a
      0004E4 90 BF 28         [ 2] 1023         LDW YTEMP,Y
      0004E7 90 93            [ 1] 1024         LDW Y,X
      0004E9 90 EE 02         [ 2] 1025         LDW Y,(2,Y)
      0004EC 91 CF 28         [ 5] 1026         LDW [YTEMP],Y ;store w at a
      0004EF 1C 00 04         [ 2] 1027         ADDW X,#4 ; DDROP 
      0004F2 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       @       ( a -- w )
                                   1031 ;       Push memory location to stack.
      0004F3 04 DE                 1032         .word      LINK
                           0004F5  1033 LINK	= 	.
      0004F5 01                    1034         .byte    1
      0004F6 40                    1035         .ascii	"@"
      0004F7                       1036 AT:
      0004F7 90 93            [ 1] 1037         LDW Y,X     ;Y = a
      0004F9 90 FE            [ 2] 1038         LDW Y,(Y)   ; address 
      0004FB 90 FE            [ 2] 1039         LDW Y,(Y)   ; value 
      0004FD FF               [ 2] 1040         LDW (X),Y ;w = @Y
      0004FE 81               [ 4] 1041         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1042 
                                   1043 ;       C!      ( c b -- )
                                   1044 ;       Pop  data stack to byte memory.
      0004FF 04 F5                 1045         .word      LINK
                           000501  1046 LINK	= .
      000501 02                    1047         .byte      2
      000502 43 21                 1048         .ascii     "C!"
      000504                       1049 CSTOR:
      000504 90 93            [ 1] 1050         LDW Y,X
      000506 90 FE            [ 2] 1051 	LDW Y,(Y)    ;Y=b
      000508 E6 03            [ 1] 1052         LD A,(3,X)    ;D = c
      00050A 90 F7            [ 1] 1053         LD  (Y),A     ;store c at b
      00050C 1C 00 04         [ 2] 1054 	ADDW X,#4 ; DDROP 
      00050F 81               [ 4] 1055         RET     
                                   1056 
                                   1057 ;       C@      ( b -- c )
                                   1058 ;       Push byte in memory to  stack.
      000510 05 01                 1059         .word      LINK
                           000512  1060 LINK	= 	.
      000512 02                    1061         .byte      2
      000513 43 40                 1062         .ascii     "C@"
      000515                       1063 CAT:
      000515 90 93            [ 1] 1064         LDW Y,X     ;Y=b
      000517 90 FE            [ 2] 1065         LDW Y,(Y)
      000519 90 F6            [ 1] 1066         LD A,(Y)
      00051B E7 01            [ 1] 1067         LD (1,X),A
      00051D 7F               [ 1] 1068         CLR (X)
      00051E 81               [ 4] 1069         RET     
                                   1070 
                                   1071 ;       RP@     ( -- a )
                                   1072 ;       Push current RP to data stack.
      00051F 05 12                 1073         .word      LINK
                           000521  1074 LINK	= .
      000521 03                    1075         .byte      3
      000522 52 50 40              1076         .ascii     "RP@"
      000525                       1077 RPAT:
      000525 90 96            [ 1] 1078         LDW Y,SP    ;save return addr
      000527 1D 00 02         [ 2] 1079         SUBW X,#2
      00052A FF               [ 2] 1080         LDW (X),Y
      00052B 81               [ 4] 1081         RET     
                                   1082 
                                   1083 ;       RP!     ( a -- )
                                   1084 ;       Set  return stack pointer.
      00052C 05 21                 1085         .word      LINK
                           00052E  1086 LINK	= 	. 
      00052E 43                    1087 	.byte      COMPO+3
      00052F 52 50 21              1088         .ascii     "RP!"
      000532                       1089 RPSTO:
      000532 90 85            [ 2] 1090         POPW Y
      000534 90 BF 28         [ 2] 1091         LDW YTEMP,Y
      000537 90 93            [ 1] 1092         LDW Y,X
      000539 90 FE            [ 2] 1093         LDW Y,(Y)
      00053B 90 94            [ 1] 1094         LDW SP,Y
      00053D 1C 00 02         [ 2] 1095         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000540 92 CC 28         [ 5] 1096         JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1097 
                                   1098 ;       R>      ( -- w )
                                   1099 ;       Pop return stack to data stack.
      000543 05 2E                 1100         .word      LINK
                           000545  1101 LINK	= 	. 
      000545 42                    1102 	.byte      COMPO+2
      000546 52 3E                 1103         .ascii     "R>"
      000548                       1104 RFROM:
      000548 90 85            [ 2] 1105         POPW Y    ;save return addr
      00054A 90 BF 28         [ 2] 1106         LDW YTEMP,Y
      00054D 90 85            [ 2] 1107         POPW Y
      00054F 1D 00 02         [ 2] 1108         SUBW X,#2
      000552 FF               [ 2] 1109         LDW (X),Y
      000553 92 CC 28         [ 5] 1110         JP [YTEMP]
                                   1111 
                                   1112 ;       R@      ( -- w )
                                   1113 ;       Copy top of return stack to stack.
      000556 05 45                 1114         .word      LINK
                           000558  1115 LINK	= 	. 
      000558 02                    1116         .byte      2
      000559 52 40                 1117         .ascii     "R@"
      00055B                       1118 RAT:
      00055B 16 03            [ 2] 1119         ldw y,(3,sp)
      00055D 1D 00 02         [ 2] 1120         subw x,#CELLL 
      000560 FF               [ 2] 1121         ldw (x),y 
      000561 81               [ 4] 1122         ret 
                                   1123 
                                   1124 ;       >R      ( w -- )
                                   1125 ;       Push data stack to return stack.
      000562 05 58                 1126         .word      LINK
                           000564  1127 LINK	= 	. 
      000564 42                    1128 	.byte      COMPO+2
      000565 3E 52                 1129         .ascii     ">R"
      000567                       1130 TOR:
      000567 90 85            [ 2] 1131         POPW Y    ;save return addr
      000569 90 BF 28         [ 2] 1132         LDW YTEMP,Y
      00056C 90 93            [ 1] 1133         LDW Y,X
      00056E 90 FE            [ 2] 1134         LDW Y,(Y)
      000570 90 89            [ 2] 1135         PUSHW Y    ;restore return addr
      000572 1C 00 02         [ 2] 1136         ADDW X,#2
      000575 92 CC 28         [ 5] 1137         JP [YTEMP]
                                   1138 
                                   1139 ;       SP@     ( -- a )
                                   1140 ;       Push current stack pointer.
      000578 05 64                 1141         .word      LINK
                           00057A  1142 LINK	= 	. 
      00057A 03                    1143         .byte      3
      00057B 53 50 40              1144         .ascii     "SP@"
      00057E                       1145 SPAT:
      00057E 90 93            [ 1] 1146 	LDW Y,X
      000580 1D 00 02         [ 2] 1147         SUBW X,#2
      000583 FF               [ 2] 1148 	LDW (X),Y
      000584 81               [ 4] 1149         RET     
                                   1150 
                                   1151 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1152 ;       Set  data stack pointer.
      000585 05 7A                 1153         .word      LINK
                           000587  1154 LINK	= 	. 
      000587 03                    1155         .byte      3
      000588 53 50 21              1156         .ascii     "SP!"
      00058B                       1157 SPSTO:
      00058B FE               [ 2] 1158         LDW     X,(X)     ;X = a
      00058C 81               [ 4] 1159         RET     
                                   1160 
                                   1161 ;       DROP    ( w -- )
                                   1162 ;       Discard top stack item.
      00058D 05 87                 1163         .word      LINK
                           00058F  1164 LINK	= 	. 
      00058F 04                    1165         .byte      4
      000590 44 52 4F 50           1166         .ascii     "DROP"
      000594                       1167 DROP:
      000594 1C 00 02         [ 2] 1168         ADDW X,#2     
      000597 81               [ 4] 1169         RET     
                                   1170 
                                   1171 ;       DUP     ( w -- w w )
                                   1172 ;       Duplicate  top stack item.
      000598 05 8F                 1173         .word      LINK
                           00059A  1174 LINK	= 	. 
      00059A 03                    1175         .byte      3
      00059B 44 55 50              1176         .ascii     "DUP"
      00059E                       1177 DUPP:
      00059E 90 93            [ 1] 1178 	LDW Y,X
      0005A0 1D 00 02         [ 2] 1179         SUBW X,#2
      0005A3 90 FE            [ 2] 1180 	LDW Y,(Y)
      0005A5 FF               [ 2] 1181 	LDW (X),Y
      0005A6 81               [ 4] 1182         RET     
                                   1183 
                                   1184 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1185 ;       Exchange top two stack items.
      0005A7 05 9A                 1186         .word      LINK
                           0005A9  1187 LINK	= 	. 
      0005A9 04                    1188         .byte      4
      0005AA 53 57 41 50           1189         .ascii     "SWAP"
      0005AE                       1190 SWAPP:
      0005AE 90 93            [ 1] 1191         LDW Y,X
      0005B0 90 FE            [ 2] 1192         LDW Y,(Y)
      0005B2 90 BF 28         [ 2] 1193         LDW YTEMP,Y
      0005B5 90 93            [ 1] 1194         LDW Y,X
      0005B7 90 EE 02         [ 2] 1195         LDW Y,(2,Y)
      0005BA FF               [ 2] 1196         LDW (X),Y
      0005BB 90 BE 28         [ 2] 1197         LDW Y,YTEMP
      0005BE EF 02            [ 2] 1198         LDW (2,X),Y
      0005C0 81               [ 4] 1199         RET     
                                   1200 
                                   1201 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1202 ;       Copy second stack item to top.
      0005C1 05 A9                 1203         .word      LINK
                           0005C3  1204 LINK	= . 
      0005C3 04                    1205         .byte      4
      0005C4 4F 56 45 52           1206         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C8                       1207 OVER:
      0005C8 1D 00 02         [ 2] 1208         SUBW X,#2
      0005CB 90 93            [ 1] 1209         LDW Y,X
      0005CD 90 EE 04         [ 2] 1210         LDW Y,(4,Y)
      0005D0 FF               [ 2] 1211         LDW (X),Y
      0005D1 81               [ 4] 1212         RET     
                                   1213 
                                   1214 ;       0<      ( n -- t )
                                   1215 ;       Return true if n is negative.
      0005D2 05 C3                 1216         .word      LINK
                           0005D4  1217 LINK	= . 
      0005D4 02                    1218         .byte      2
      0005D5 30 3C                 1219         .ascii     "0<"
      0005D7                       1220 ZLESS:
      0005D7 A6 FF            [ 1] 1221         LD A,#0xFF
      0005D9 90 93            [ 1] 1222         LDW Y,X
      0005DB 90 FE            [ 2] 1223         LDW Y,(Y)
      0005DD 2B 01            [ 1] 1224         JRMI     ZL1
      0005DF 4F               [ 1] 1225         CLR A   ;false
      0005E0 F7               [ 1] 1226 ZL1:    LD     (X),A
      0005E1 E7 01            [ 1] 1227         LD (1,X),A
      0005E3 81               [ 4] 1228 	RET     
                                   1229 
                                   1230 ;       AND     ( w w -- w )
                                   1231 ;       Bitwise AND.
      0005E4 05 D4                 1232         .word      LINK
                           0005E6  1233 LINK	= . 
      0005E6 03                    1234         .byte      3
      0005E7 41 4E 44              1235         .ascii     "AND"
      0005EA                       1236 ANDD:
      0005EA F6               [ 1] 1237         LD  A,(X)    ;D=w
      0005EB E4 02            [ 1] 1238         AND A,(2,X)
      0005ED E7 02            [ 1] 1239         LD (2,X),A
      0005EF E6 01            [ 1] 1240         LD A,(1,X)
      0005F1 E4 03            [ 1] 1241         AND A,(3,X)
      0005F3 E7 03            [ 1] 1242         LD (3,X),A
      0005F5 1C 00 02         [ 2] 1243         ADDW X,#2
      0005F8 81               [ 4] 1244         RET
                                   1245 
                                   1246 ;       OR      ( w w -- w )
                                   1247 ;       Bitwise inclusive OR.
      0005F9 05 E6                 1248         .word      LINK
                           0005FB  1249 LINK = . 
      0005FB 02                    1250         .byte      2
      0005FC 4F 52                 1251         .ascii     "OR"
      0005FE                       1252 ORR:
      0005FE F6               [ 1] 1253         LD A,(X)    ;D=w
      0005FF EA 02            [ 1] 1254         OR A,(2,X)
      000601 E7 02            [ 1] 1255         LD (2,X),A
      000603 E6 01            [ 1] 1256         LD A,(1,X)
      000605 EA 03            [ 1] 1257         OR A,(3,X)
      000607 E7 03            [ 1] 1258         LD (3,X),A
      000609 1C 00 02         [ 2] 1259         ADDW X,#2
      00060C 81               [ 4] 1260         RET
                                   1261 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1262 ;       XOR     ( w w -- w )
                                   1263 ;       Bitwise exclusive OR.
      00060D 05 FB                 1264         .word      LINK
                           00060F  1265 LINK	= . 
      00060F 03                    1266         .byte      3
      000610 58 4F 52              1267         .ascii     "XOR"
      000613                       1268 XORR:
      000613 F6               [ 1] 1269         LD A,(X)    ;D=w
      000614 E8 02            [ 1] 1270         XOR A,(2,X)
      000616 E7 02            [ 1] 1271         LD (2,X),A
      000618 E6 01            [ 1] 1272         LD A,(1,X)
      00061A E8 03            [ 1] 1273         XOR A,(3,X)
      00061C E7 03            [ 1] 1274         LD (3,X),A
      00061E 1C 00 02         [ 2] 1275         ADDW X,#2
      000621 81               [ 4] 1276         RET
                                   1277 
                                   1278 ;       UM+     ( u u -- udsum )
                                   1279 ;       Add two unsigned single
                                   1280 ;       and return a double sum.
      000622 06 0F                 1281         .word      LINK
                           000624  1282 LINK	= . 
      000624 03                    1283         .byte      3
      000625 55 4D 2B              1284         .ascii     "UM+"
      000628                       1285 UPLUS:
      000628 A6 01            [ 1] 1286         LD A,#1
      00062A 90 93            [ 1] 1287         LDW Y,X
      00062C 90 EE 02         [ 2] 1288         LDW Y,(2,Y)
      00062F 90 BF 28         [ 2] 1289         LDW YTEMP,Y
      000632 90 93            [ 1] 1290         LDW Y,X
      000634 90 FE            [ 2] 1291         LDW Y,(Y)
      000636 72 B9 00 28      [ 2] 1292         ADDW Y,YTEMP
      00063A EF 02            [ 2] 1293         LDW (2,X),Y
      00063C 25 01            [ 1] 1294         JRC     UPL1
      00063E 4F               [ 1] 1295         CLR A
      00063F E7 01            [ 1] 1296 UPL1:   LD     (1,X),A
      000641 7F               [ 1] 1297         CLR (X)
      000642 81               [ 4] 1298         RET
                                   1299 
                                   1300 ;; System and user variables
                                   1301 
                                   1302 ;       doVAR   ( -- a )
                                   1303 ;       Code for VARIABLE and CREATE.
      000643 06 24                 1304         .word      LINK
                           000645  1305 LINK	= . 
      000645 45                    1306 	.byte      COMPO+5
      000646 44 4F 56 41 52        1307         .ascii     "DOVAR"
      00064B                       1308 DOVAR:
      00064B 1D 00 02         [ 2] 1309 	SUBW X,#2
      00064E 90 85            [ 2] 1310         POPW Y    ;get return addr (pfa)
      000650 90 FE            [ 2] 1311         LDW Y,(Y) ; indirect address 
      000652 FF               [ 2] 1312         LDW (X),Y    ;push on stack
      000653 81               [ 4] 1313         RET     ;go to RET of EXEC
                                   1314 
                                   1315 ;       BASE    ( -- a )
                                   1316 ;       Radix base for numeric I/O.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000654 06 45                 1317         .word      LINK        
                           000656  1318 LINK = . 
      000656 04                    1319         .byte      4
      000657 42 41 53 45           1320         .ascii     "BASE"
      00065B                       1321 BASE:
      00065B 90 AE 00 06      [ 2] 1322 	LDW Y,#UBASE 
      00065F 1D 00 02         [ 2] 1323 	SUBW X,#2
      000662 FF               [ 2] 1324         LDW (X),Y
      000663 81               [ 4] 1325         RET
                                   1326 
                                   1327 ;       tmp     ( -- a )
                                   1328 ;       A temporary storage.
      000664 06 56                 1329         .word      LINK
                                   1330         
                           000666  1331 LINK = . 
      000666 03                    1332 	.byte      3
      000667 54 4D 50              1333         .ascii     "TMP"
      00066A                       1334 TEMP:
      00066A 90 AE 00 0C      [ 2] 1335 	LDW Y,#UTMP
      00066E 1D 00 02         [ 2] 1336 	SUBW X,#2
      000671 FF               [ 2] 1337         LDW (X),Y
      000672 81               [ 4] 1338         RET
                                   1339 
                                   1340 ;       >IN     ( -- a )
                                   1341 ;        Hold parsing pointer.
      000673 06 66                 1342         .word      LINK
                           000675  1343 LINK = . 
      000675 03                    1344         .byte      3
      000676 3E 49 4E              1345         .ascii    ">IN"
      000679                       1346 INN:
      000679 90 AE 00 0E      [ 2] 1347 	LDW Y,#UINN 
      00067D 1D 00 02         [ 2] 1348 	SUBW X,#2
      000680 FF               [ 2] 1349         LDW (X),Y
      000681 81               [ 4] 1350         RET
                                   1351 
                                   1352 ;       #TIB    ( -- a )
                                   1353 ;       Count in terminal input buffer.
      000682 06 75                 1354         .word      LINK
                           000684  1355 LINK = . 
      000684 04                    1356         .byte      4
      000685 23 54 49 42           1357         .ascii     "#TIB"
      000689                       1358 NTIB:
      000689 90 AE 00 10      [ 2] 1359 	LDW Y,#UCTIB 
      00068D 1D 00 02         [ 2] 1360 	SUBW X,#2
      000690 FF               [ 2] 1361         LDW (X),Y
      000691 81               [ 4] 1362         RET
                                   1363 
                                   1364 ;       TBUF ( -- a )
                                   1365 ;       address of 128 bytes transaction buffer 
      000692 06 84                 1366         .word LINK 
                           000694  1367         LINK=.
      000694 04                    1368         .byte 4 
      000695 54 42 55 46           1369         .ascii "TBUF"
      000699                       1370 TBUF:
      000699 90 AE 16 80      [ 2] 1371         ldw y,#ROWBUFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00069D 1D 00 02         [ 2] 1372         subw x,#CELLL
      0006A0 FF               [ 2] 1373         ldw (x),y 
      0006A1 81               [ 4] 1374         ret 
                                   1375 
                                   1376 ; systeme variable 
                                   1377 ; compilation destination 
                                   1378 ; TFLASH ( -- A )
      0006A2 06 94                 1379         .word LINK 
                           0006A4  1380         LINK=.
      0006A4 06                    1381         .byte 6 
      0006A5 54 46 4C 41 53 48     1382         .ascii "TFLASH"         
      0006AB                       1383 TFLASH:
      0006AB 1D 00 02         [ 2] 1384         subw x,#CELLL 
      0006AE 90 AE 00 22      [ 2] 1385         ldw y,#UTFLASH
      0006B2 FF               [ 2] 1386         ldw (x),y 
      0006B3 81               [ 4] 1387         ret 
                                   1388 
                                   1389 ;       "EVAL   ( -- a )
                                   1390 ;       Execution vector of EVAL.
      0006B4 06 A4                 1391         .word      LINK
                           0006B6  1392 LINK = . 
      0006B6 05                    1393         .byte      5
      0006B7 27 45 56 41 4C        1394         .ascii     "'EVAL"
      0006BC                       1395 TEVAL:
      0006BC 90 AE 00 14      [ 2] 1396 	LDW Y,#UINTER 
      0006C0 1D 00 02         [ 2] 1397 	SUBW X,#2
      0006C3 FF               [ 2] 1398         LDW (X),Y
      0006C4 81               [ 4] 1399         RET
                                   1400 
                                   1401 ;       HLD     ( -- a )
                                   1402 ;       Hold a pointer of output string.
      0006C5 06 B6                 1403         .word      LINK
                           0006C7  1404 LINK = . 
      0006C7 03                    1405         .byte      3
      0006C8 48 4C 44              1406         .ascii     "HLD"
      0006CB                       1407 HLD:
      0006CB 90 AE 00 16      [ 2] 1408 	LDW Y,#UHLD 
      0006CF 1D 00 02         [ 2] 1409 	SUBW X,#2
      0006D2 FF               [ 2] 1410         LDW (X),Y
      0006D3 81               [ 4] 1411         RET
                                   1412 
                                   1413 ;       CONTEXT ( -- a )
                                   1414 ;       Start vocabulary search.
      0006D4 06 C7                 1415         .word      LINK
                           0006D6  1416 LINK = . 
      0006D6 07                    1417         .byte      7
      0006D7 43 4F 4E 54 45 58 54  1418         .ascii     "CONTEXT"
      0006DE                       1419 CNTXT:
      0006DE 90 AE 00 18      [ 2] 1420 	LDW Y,#UCNTXT
      0006E2 1D 00 02         [ 2] 1421 	SUBW X,#2
      0006E5 FF               [ 2] 1422         LDW (X),Y
      0006E6 81               [ 4] 1423         RET
                                   1424 
                                   1425 ;       VP      ( -- a )
                                   1426 ;       Point to top of variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006E7 06 D6                 1427         .word      LINK
                           0006E9  1428 LINK = . 
      0006E9 02                    1429         .byte      2
      0006EA 56 50                 1430         .ascii     "VP"
      0006EC                       1431 VPP:
      0006EC 90 AE 00 1A      [ 2] 1432 	LDW Y,#UVP 
      0006F0 1D 00 02         [ 2] 1433 	SUBW X,#2
      0006F3 FF               [ 2] 1434         LDW (X),Y
      0006F4 81               [ 4] 1435         RET
                                   1436 
                                   1437 ;       CP    ( -- a )
                                   1438 ;       Pointer to top of FLASH 
      0006F5 06 E9                 1439         .word LINK 
                           0006F7  1440         LINK=.
      0006F7 02                    1441         .byte 2 
      0006F8 43 50                 1442         .ascii "CP"
      0006FA                       1443 CPP: 
      0006FA 90 AE 00 1C      [ 2] 1444         ldw y,#UCP 
      0006FE 1D 00 02         [ 2] 1445         subw x,#CELLL 
      000701 FF               [ 2] 1446         ldw (x),y 
      000702 81               [ 4] 1447         ret                
                                   1448 
                                   1449 ;       LAST    ( -- a )
                                   1450 ;       Point to last name in dictionary.
      000703 06 F7                 1451         .word      LINK
                           000705  1452 LINK = . 
      000705 04                    1453         .byte      4
      000706 4C 41 53 54           1454         .ascii     "LAST"
      00070A                       1455 LAST:
      00070A 90 AE 00 1E      [ 2] 1456 	LDW Y,#ULAST 
      00070E 1D 00 02         [ 2] 1457 	SUBW X,#2
      000711 FF               [ 2] 1458         LDW (X),Y
      000712 81               [ 4] 1459         RET
                                   1460 
                                   1461 ; address of system variable URLAST 
                                   1462 ;       RAMLAST ( -- a )
                                   1463 ; RAM dictionary context 
      000713 07 05                 1464         .word LINK 
                           000715  1465         LINK=. 
      000715 07                    1466         .byte 7  
      000716 52 41 4D 4C 41 53 54  1467         .ascii "RAMLAST" 
      00071D                       1468 RAMLAST: 
      00071D 90 AE 00 24      [ 2] 1469         ldw y,#URLAST 
      000721 1D 00 02         [ 2] 1470         subw x,#CELLL 
      000724 FF               [ 2] 1471         ldw (x),y 
      000725 81               [ 4] 1472         ret 
                                   1473 
                                   1474 ; OFFSET ( -- a )
                                   1475 ; address of system variable OFFSET 
      000726 07 15                 1476         .word LINK 
                           000728  1477         LINK=.
      000728 06                    1478         .byte 6
      000729 4F 46 46 53 45 54     1479         .ascii "OFFSET" 
      00072F                       1480 OFFSET: 
      00072F 1D 00 02         [ 2] 1481         subw x,#CELLL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000732 90 AE 00 20      [ 2] 1482         ldw y,#UOFFSET 
      000736 FF               [ 2] 1483         ldw (x),y 
      000737 81               [ 4] 1484         ret 
                                   1485 
                                   1486 ; adjust jump address adding OFFSET
                                   1487 ; ADR-ADJ ( a -- a+offset )
      000738                       1488 ADRADJ: 
      000738 CD 07 2F         [ 4] 1489         call OFFSET 
      00073B CD 04 F7         [ 4] 1490         call AT 
      00073E CC 07 BA         [ 2] 1491         jp PLUS 
                                   1492 
                                   1493 
                                   1494 ;; Common functions
                                   1495 
                                   1496 ;       ?DUP    ( w -- w w | 0 )
                                   1497 ;       Dup tos if its is not zero.
      000741 07 28                 1498         .word      LINK
                           000743  1499 LINK = . 
      000743 04                    1500         .byte      4
      000744 3F 44 55 50           1501         .ascii     "?DUP"
      000748                       1502 QDUP:
      000748 90 93            [ 1] 1503         LDW Y,X
      00074A 90 FE            [ 2] 1504 	LDW Y,(Y)
      00074C 27 04            [ 1] 1505         JREQ     QDUP1
      00074E 1D 00 02         [ 2] 1506 	SUBW X,#2
      000751 FF               [ 2] 1507         LDW (X),Y
      000752 81               [ 4] 1508 QDUP1:  RET
                                   1509 
                                   1510 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1511 ;       Rot 3rd item to top.
      000753 07 43                 1512         .word      LINK
                           000755  1513 LINK = . 
      000755 03                    1514         .byte      3
      000756 52 4F 54              1515         .ascii     "ROT"
      000759                       1516 ROT:
      000759 90 93            [ 1] 1517         ldw y,x 
      00075B 90 FE            [ 2] 1518         ldw y,(y)
      00075D 90 89            [ 2] 1519         pushw y 
      00075F 90 93            [ 1] 1520         ldw y,x 
      000761 90 EE 04         [ 2] 1521         ldw y,(4,y)
      000764 FF               [ 2] 1522         ldw (x),y 
      000765 90 93            [ 1] 1523         ldw y,x 
      000767 90 EE 02         [ 2] 1524         ldw y,(2,y)
      00076A EF 04            [ 2] 1525         ldw (4,x),y 
      00076C 90 85            [ 2] 1526         popw y 
      00076E EF 02            [ 2] 1527         ldw (2,x),y
      000770 81               [ 4] 1528         ret 
                                   1529 
                                   1530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1531 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1532 ;    rotate left 3 top elements 
                                   1533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000771                       1534     _HEADER NROT,4,"<ROT"
      000771 07 55                    1         .word LINK 
                           000773     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000773 04                       3         .byte 4  
      000774 3C 52 4F 54              4         .ascii "<ROT"
      000778                          5         NROT:
      000778 90 93            [ 1] 1535     LDW Y,X 
      00077A 90 FE            [ 2] 1536     LDW Y,(Y)
      00077C 90 BF 28         [ 2] 1537     LDW YTEMP,Y ; n3  
      00077F 90 93            [ 1] 1538     LDW Y,X 
      000781 90 EE 02         [ 2] 1539     LDW Y,(2,Y) ; Y = n2 
      000784 FF               [ 2] 1540     LDW (X),Y   ; TOS = n2 
      000785 90 93            [ 1] 1541     LDW Y,X    
      000787 90 EE 04         [ 2] 1542     LDW Y,(4,Y) ; Y = n1 
      00078A EF 02            [ 2] 1543     LDW (2,X),Y ;   = n1 
      00078C 90 BE 28         [ 2] 1544     LDW Y,YTEMP 
      00078F EF 04            [ 2] 1545     LDW (4,X),Y ; = n3 
      000791 81               [ 4] 1546     RET 
                                   1547 
                                   1548 ;       2DROP   ( w w -- )
                                   1549 ;       Discard two items on stack.
      000792 07 73                 1550         .word      LINK
                           000794  1551 LINK = . 
      000794 05                    1552         .byte      5
      000795 32 44 52 4F 50        1553         .ascii     "2DROP"
      00079A                       1554 DDROP:
      00079A 1C 00 04         [ 2] 1555         ADDW X,#4
      00079D 81               [ 4] 1556         RET
                                   1557 
                                   1558 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1559 ;       Duplicate top two items.
      00079E 07 94                 1560         .word      LINK
                           0007A0  1561 LINK = . 
      0007A0 04                    1562         .byte      4
      0007A1 32 44 55 50           1563         .ascii     "2DUP"
      0007A5                       1564 DDUP:
      0007A5 1D 00 04         [ 2] 1565         SUBW X,#4
      0007A8 90 93            [ 1] 1566         LDW Y,X
      0007AA 90 EE 06         [ 2] 1567         LDW Y,(6,Y)
      0007AD EF 02            [ 2] 1568         LDW (2,X),Y
      0007AF 90 93            [ 1] 1569         LDW Y,X
      0007B1 90 EE 04         [ 2] 1570         LDW Y,(4,Y)
      0007B4 FF               [ 2] 1571         LDW (X),Y
      0007B5 81               [ 4] 1572         RET
                                   1573 
                                   1574 ;       +       ( w w -- sum )
                                   1575 ;       Add top two items.
      0007B6 07 A0                 1576         .word      LINK
                           0007B8  1577 LINK = . 
      0007B8 01                    1578         .byte      1
      0007B9 2B                    1579         .ascii     "+"
      0007BA                       1580 PLUS:
      0007BA 90 93            [ 1] 1581         LDW Y,X
      0007BC 90 FE            [ 2] 1582         LDW Y,(Y)
      0007BE 90 BF 28         [ 2] 1583         LDW YTEMP,Y
      0007C1 1C 00 02         [ 2] 1584         ADDW X,#2
      0007C4 90 93            [ 1] 1585         LDW Y,X
      0007C6 90 FE            [ 2] 1586         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C8 72 B9 00 28      [ 2] 1587         ADDW Y,YTEMP
      0007CC FF               [ 2] 1588         LDW (X),Y
      0007CD 81               [ 4] 1589         RET
                                   1590 
                                   1591 ;       NOT     ( w -- w )
                                   1592 ;       One's complement of tos.
      0007CE 07 B8                 1593         .word      LINK
                           0007D0  1594 LINK = . 
      0007D0 03                    1595         .byte      3
      0007D1 4E 4F 54              1596         .ascii     "NOT"
      0007D4                       1597 INVER:
      0007D4 90 93            [ 1] 1598         LDW Y,X
      0007D6 90 FE            [ 2] 1599         LDW Y,(Y)
      0007D8 90 53            [ 2] 1600         CPLW Y
      0007DA FF               [ 2] 1601         LDW (X),Y
      0007DB 81               [ 4] 1602         RET
                                   1603 
                                   1604 ;       NEGATE  ( n -- -n )
                                   1605 ;       Two's complement of tos.
      0007DC 07 D0                 1606         .word      LINK
                           0007DE  1607 LINK = . 
      0007DE 06                    1608         .byte      6
      0007DF 4E 45 47 41 54 45     1609         .ascii     "NEGATE"
      0007E5                       1610 NEGAT:
      0007E5 90 93            [ 1] 1611         LDW Y,X
      0007E7 90 FE            [ 2] 1612         LDW Y,(Y)
      0007E9 90 50            [ 2] 1613         NEGW Y
      0007EB FF               [ 2] 1614         LDW (X),Y
      0007EC 81               [ 4] 1615         RET
                                   1616 
                                   1617 ;       DNEGATE ( d -- -d )
                                   1618 ;       Two's complement of top double.
      0007ED 07 DE                 1619         .word      LINK
                           0007EF  1620 LINK = . 
      0007EF 07                    1621         .byte      7
      0007F0 44 4E 45 47 41 54 45  1622         .ascii     "DNEGATE"
      0007F7                       1623 DNEGA:
      0007F7 90 93            [ 1] 1624         LDW Y,X
      0007F9 90 FE            [ 2] 1625 	LDW Y,(Y)
      0007FB 90 53            [ 2] 1626         CPLW Y     
      0007FD 90 BF 28         [ 2] 1627 	LDW YTEMP,Y
      000800 90 93            [ 1] 1628         LDW Y,X
      000802 90 EE 02         [ 2] 1629         LDW Y,(2,Y)
      000805 90 53            [ 2] 1630         CPLW Y
      000807 72 A9 00 01      [ 2] 1631         addw y,#1
      00080B EF 02            [ 2] 1632         LDW (2,X),Y
      00080D 90 BE 28         [ 2] 1633         LDW Y,YTEMP
      000810 24 02            [ 1] 1634         JRNC DN1 
      000812 90 5C            [ 1] 1635         INCW Y
      000814 FF               [ 2] 1636 DN1:    LDW (X),Y
      000815 81               [ 4] 1637         RET
                                   1638 
                                   1639 
                                   1640 ;       S>D ( n -- d )
                                   1641 ; convert single integer to double 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000816 07 EF                 1642         .word LINK 
                           000818  1643         LINK=. 
      000818 03                    1644         .byte 3 
      000819 53 3E 44              1645         .ascii "S>D"
      00081C                       1646 STOD: 
      00081C 1D 00 02         [ 2] 1647         subw x,#CELLL 
      00081F 90 5F            [ 1] 1648         clrw y 
      000821 FF               [ 2] 1649         ldw (x),y 
      000822 90 93            [ 1] 1650         ldw y,x 
      000824 90 EE 02         [ 2] 1651         ldw y,(2,y)
      000827 2A 05            [ 1] 1652         jrpl 1$ 
      000829 90 AE FF FF      [ 2] 1653         ldw y,#-1
      00082D FF               [ 2] 1654         ldw (x),y 
      00082E 81               [ 4] 1655 1$:     ret 
                                   1656 
                                   1657 
                                   1658 
                                   1659 
                                   1660 ;       -       ( n1 n2 -- n1-n2 )
                                   1661 ;       Subtraction.
      00082F 08 18                 1662         .word      LINK
                           000831  1663 LINK = . 
      000831 01                    1664         .byte      1
      000832 2D                    1665         .ascii     "-"
      000833                       1666 SUBB:
      000833 90 93            [ 1] 1667         LDW Y,X
      000835 90 FE            [ 2] 1668         LDW Y,(Y)
      000837 90 BF 28         [ 2] 1669         LDW YTEMP,Y
      00083A 1C 00 02         [ 2] 1670         ADDW X,#2
      00083D 90 93            [ 1] 1671         LDW Y,X
      00083F 90 FE            [ 2] 1672         LDW Y,(Y)
      000841 72 B2 00 28      [ 2] 1673         SUBW Y,YTEMP
      000845 FF               [ 2] 1674         LDW (X),Y
      000846 81               [ 4] 1675         RET
                                   1676 
                                   1677 ;       ABS     ( n -- n )
                                   1678 ;       Return  absolute value of n.
      000847 08 31                 1679         .word      LINK
                           000849  1680 LINK = . 
      000849 03                    1681         .byte      3
      00084A 41 42 53              1682         .ascii     "ABS"
      00084D                       1683 ABSS:
      00084D 90 93            [ 1] 1684         LDW Y,X
      00084F 90 FE            [ 2] 1685 	LDW Y,(Y)
      000851 2A 03            [ 1] 1686         JRPL     AB1     ;negate:
      000853 90 50            [ 2] 1687         NEGW     Y     ;else negate hi byte
      000855 FF               [ 2] 1688         LDW (X),Y
      000856 81               [ 4] 1689 AB1:    RET
                                   1690 
                                   1691 ;       =       ( w w -- t )
                                   1692 ;       Return true if top two are =al.
      000857 08 49                 1693         .word      LINK
                           000859  1694 LINK = . 
      000859 01                    1695         .byte      1
      00085A 3D                    1696         .ascii     "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00085B                       1697 EQUAL:
      00085B A6 FF            [ 1] 1698         LD A,#0xFF  ;true
      00085D 90 93            [ 1] 1699         LDW Y,X    ;D = n2
      00085F 90 FE            [ 2] 1700         LDW Y,(Y)
      000861 90 BF 28         [ 2] 1701         LDW YTEMP,Y
      000864 1C 00 02         [ 2] 1702         ADDW X,#2
      000867 90 93            [ 1] 1703         LDW Y,X
      000869 90 FE            [ 2] 1704         LDW Y,(Y)
      00086B 90 B3 28         [ 2] 1705         CPW Y,YTEMP     ;if n2 <> n1
      00086E 27 01            [ 1] 1706         JREQ     EQ1
      000870 4F               [ 1] 1707         CLR A
      000871 F7               [ 1] 1708 EQ1:    LD (X),A
      000872 E7 01            [ 1] 1709         LD (1,X),A
      000874 81               [ 4] 1710 	RET     
                                   1711 
                                   1712 ;       U<      ( u u -- t )
                                   1713 ;       Unsigned compare of top two items.
      000875 08 59                 1714         .word      LINK
                           000877  1715 LINK = . 
      000877 02                    1716         .byte      2
      000878 55 3C                 1717         .ascii     "U<"
      00087A                       1718 ULESS:
      00087A A6 FF            [ 1] 1719         LD A,#0xFF  ;true
      00087C 90 93            [ 1] 1720         LDW Y,X    ;D = n2
      00087E 90 FE            [ 2] 1721         LDW Y,(Y)
      000880 90 BF 28         [ 2] 1722         LDW YTEMP,Y
      000883 1C 00 02         [ 2] 1723         ADDW X,#2
      000886 90 93            [ 1] 1724         LDW Y,X
      000888 90 FE            [ 2] 1725         LDW Y,(Y)
      00088A 90 B3 28         [ 2] 1726         CPW Y,YTEMP     ;if n2 <> n1
      00088D 25 01            [ 1] 1727         JRULT     ULES1
      00088F 4F               [ 1] 1728         CLR A
      000890 F7               [ 1] 1729 ULES1:  LD (X),A
      000891 E7 01            [ 1] 1730         LD (1,X),A
      000893 81               [ 4] 1731 	RET     
                                   1732 
                                   1733 ;       <       ( n1 n2 -- t )
                                   1734 ;       Signed compare of top two items.
      000894 08 77                 1735         .word      LINK
                           000896  1736 LINK = . 
      000896 01                    1737         .byte      1
      000897 3C                    1738         .ascii     "<"
      000898                       1739 LESS:
      000898 A6 FF            [ 1] 1740         LD A,#0xFF  ;true
      00089A 90 93            [ 1] 1741         LDW Y,X    ;D = n2
      00089C 90 FE            [ 2] 1742         LDW Y,(Y)
      00089E 90 BF 28         [ 2] 1743         LDW YTEMP,Y
      0008A1 1C 00 02         [ 2] 1744         ADDW X,#2
      0008A4 90 93            [ 1] 1745         LDW Y,X
      0008A6 90 FE            [ 2] 1746         LDW Y,(Y)
      0008A8 90 B3 28         [ 2] 1747         CPW Y,YTEMP     ;if n2 <> n1
      0008AB 2F 01            [ 1] 1748         JRSLT     LT1
      0008AD 4F               [ 1] 1749         CLR A
      0008AE F7               [ 1] 1750 LT1:    LD (X),A
      0008AF E7 01            [ 1] 1751         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008B1 81               [ 4] 1752 	RET     
                                   1753 
                                   1754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1755 ;       >   (n1 n2 -- f )
                                   1756 ;  signed compare n1 n2 
                                   1757 ;  true if n1 > n2 
                                   1758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B2 08 96                 1759         .word   LINK 
                           0008B4  1760         LINK = . 
      0008B4 01                    1761         .byte 1
      0008B5 3E                    1762         .ascii ">"
      0008B6                       1763 GREAT:
      0008B6 A6 FF            [ 1] 1764         LD A,#0xFF ;
      0008B8 90 93            [ 1] 1765         LDW Y,X 
      0008BA 90 FE            [ 2] 1766         LDW Y,(Y)
      0008BC 90 BF 28         [ 2] 1767         LDW YTEMP,Y 
      0008BF 1C 00 02         [ 2] 1768         ADDW X,#2 
      0008C2 90 93            [ 1] 1769         LDW Y,X 
      0008C4 90 FE            [ 2] 1770         LDW Y,(Y)
      0008C6 90 B3 28         [ 2] 1771         CPW  Y,YTEMP 
      0008C9 2C 01            [ 1] 1772         JRSGT GREAT1 
      0008CB 4F               [ 1] 1773         CLR  A
      0008CC                       1774 GREAT1:
      0008CC F7               [ 1] 1775         LD (X),A 
      0008CD E7 01            [ 1] 1776         LD (1,X),A 
      0008CF 81               [ 4] 1777         RET 
                                   1778 
                                   1779 
                                   1780 ;       MAX     ( n n -- n )
                                   1781 ;       Return greater of two top items.
      0008D0 08 B4                 1782         .word      LINK
                           0008D2  1783 LINK = . 
      0008D2 03                    1784         .byte      3
      0008D3 4D 41 58              1785         .ascii     "MAX"
      0008D6                       1786 MAX:
      0008D6 90 93            [ 1] 1787         LDW Y,X    ;D = n2
      0008D8 90 EE 02         [ 2] 1788         LDW Y,(2,Y)
      0008DB 90 BF 28         [ 2] 1789         LDW YTEMP,Y
      0008DE 90 93            [ 1] 1790         LDW Y,X
      0008E0 90 FE            [ 2] 1791         LDW Y,(Y)
      0008E2 90 B3 28         [ 2] 1792         CPW Y,YTEMP     ;if n2 <> n1
      0008E5 2F 02            [ 1] 1793         JRSLT     MAX1
      0008E7 EF 02            [ 2] 1794         LDW (2,X),Y
      0008E9 1C 00 02         [ 2] 1795 MAX1:   ADDW X,#2
      0008EC 81               [ 4] 1796 	RET     
                                   1797 
                                   1798 ;       MIN     ( n n -- n )
                                   1799 ;       Return smaller of top two items.
      0008ED 08 D2                 1800         .word      LINK
                           0008EF  1801 LINK = . 
      0008EF 03                    1802         .byte      3
      0008F0 4D 49 4E              1803         .ascii     "MIN"
      0008F3                       1804 MIN:
      0008F3 90 93            [ 1] 1805         LDW Y,X    ;D = n2
      0008F5 90 EE 02         [ 2] 1806         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008F8 90 BF 28         [ 2] 1807         LDW YTEMP,Y
      0008FB 90 93            [ 1] 1808         LDW Y,X
      0008FD 90 FE            [ 2] 1809         LDW Y,(Y)
      0008FF 90 B3 28         [ 2] 1810         CPW Y,YTEMP     ;if n2 <> n1
      000902 2C 02            [ 1] 1811         JRSGT     MIN1
      000904 EF 02            [ 2] 1812         LDW (2,X),Y
      000906 1C 00 02         [ 2] 1813 MIN1:	ADDW X,#2
      000909 81               [ 4] 1814 	RET     
                                   1815 
                                   1816 ;       WITHIN  ( u ul uh -- t )
                                   1817 ;       Return true if u is within
                                   1818 ;       range of ul and uh. ( ul <= u < uh )
      00090A 08 EF                 1819         .word      LINK
                           00090C  1820 LINK = . 
      00090C 06                    1821         .byte      6
      00090D 57 49 54 48 49 4E     1822         .ascii     "WITHIN"
      000913                       1823 WITHI:
      000913 CD 05 C8         [ 4] 1824         CALL     OVER
      000916 CD 08 33         [ 4] 1825         CALL     SUBB
      000919 CD 05 67         [ 4] 1826         CALL     TOR
      00091C CD 08 33         [ 4] 1827         CALL     SUBB
      00091F CD 05 48         [ 4] 1828         CALL     RFROM
      000922 CC 08 7A         [ 2] 1829         JP     ULESS
                                   1830 
                                   1831 ;; Divide
                                   1832 
                                   1833 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1834 ;       Unsigned divide of a double by a
                                   1835 ;       single. Return mod and quotient.
      000925 09 0C                 1836         .word      LINK
                           000927  1837 LINK = . 
      000927 06                    1838         .byte      6
      000928 55 4D 2F 4D 4F 44     1839         .ascii     "UM/MOD"
                                   1840 ; 2021-02-22
                                   1841 ; changed algortihm for Jeeek one 
                                   1842 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      00092E                       1843 UMMOD:
      00092E 90 93            [ 1] 1844         LDW     Y,X             ; stack pointer to Y
      000930 FE               [ 2] 1845         LDW     X,(X)           ; un
      000931 BF 28            [ 2] 1846         LDW     YTEMP,X         ; save un
      000933 93               [ 1] 1847         LDW     X,Y
      000934 5C               [ 1] 1848         INCW    X               ; drop un
      000935 5C               [ 1] 1849         INCW    X
      000936 89               [ 2] 1850         PUSHW   X               ; save stack pointer
      000937 FE               [ 2] 1851         LDW     X,(X)           ; X=udh
      000938 90 EE 04         [ 2] 1852         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00093B B3 28            [ 2] 1853         CPW     X,YTEMP
      00093D 25 0B            [ 1] 1854         JRULT   MMSM1           ; X is still on the R-stack
      00093F 85               [ 2] 1855         POPW    X               ; restore stack pointer
      000940 90 AE FF FF      [ 2] 1856         LDW     Y,#0xFFFF       ; overflow result:
      000944 FF               [ 2] 1857         LDW     (X),Y           ; quotient max. 16 bit value
      000945 90 5F            [ 1] 1858         CLRW    Y
      000947 EF 02            [ 2] 1859         LDW     (2,X),Y         ; remainder 0
      000949 81               [ 4] 1860         RET
      00094A                       1861 MMSM1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00094A A6 10            [ 1] 1862         LD      A,#16           ; loop count
      00094C 90 58            [ 2] 1863         SLLW    Y               ; udl shift udl into udh
      00094E                       1864 MMSM3:
      00094E 59               [ 2] 1865         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00094F 25 04            [ 1] 1866         JRC     MMSMa           ; if carry out of rotate
      000951 B3 28            [ 2] 1867         CPW     X,YTEMP         ; compare udh to un
      000953 25 05            [ 1] 1868         JRULT   MMSM4           ; can't subtract
      000955                       1869 MMSMa:
      000955 72 B0 00 28      [ 2] 1870         SUBW    X,YTEMP         ; can subtract
      000959 98               [ 1] 1871         RCF
      00095A                       1872 MMSM4:
      00095A 8C               [ 1] 1873         CCF                     ; quotient bit
      00095B 90 59            [ 2] 1874         RLCW    Y               ; rotate into quotient, rotate out udl
      00095D 4A               [ 1] 1875         DEC     A               ; repeat
      00095E 26 EE            [ 1] 1876         JRNE    MMSM3           ; if A == 0
      000960                       1877 MMSMb:
      000960 BF 28            [ 2] 1878         LDW     YTEMP,X         ; done, save remainder
      000962 85               [ 2] 1879         POPW    X               ; restore stack pointer
      000963 FF               [ 2] 1880         LDW     (X),Y           ; save quotient
      000964 90 BE 28         [ 2] 1881         LDW     Y,YTEMP         ; remainder onto stack
      000967 EF 02            [ 2] 1882         LDW     (2,X),Y
      000969 81               [ 4] 1883         RET
                                   1884 
                                   1885 
                                   1886 ;----------------------------------------------	
                                   1887 ;       M/MOD   ( d n -- r q )
                                   1888 ;       Signed floored divide of double by
                                   1889 ;       single. Return mod and quotient.
                                   1890 ;----------------------------------------------	
      00096A 09 27                 1891         .word      LINK
                           00096C  1892 LINK = . 
      00096C 05                    1893         .byte      5
      00096D 4D 2F 4D 4F 44        1894         .ascii     "M/MOD"
      000972                       1895 MSMOD:  
      000972 CD 05 9E         [ 4] 1896         CALL	DUPP
      000975 CD 05 D7         [ 4] 1897         CALL	ZLESS
      000978 CD 05 9E         [ 4] 1898         CALL	DUPP
      00097B CD 05 67         [ 4] 1899         CALL	TOR
      00097E CD 04 AC         [ 4] 1900         CALL	QBRAN
      000981 09 8F                 1901         .word	MMOD1
      000983 CD 07 E5         [ 4] 1902         CALL	NEGAT
      000986 CD 05 67         [ 4] 1903         CALL	TOR
      000989 CD 07 F7         [ 4] 1904         CALL	DNEGA
      00098C CD 05 48         [ 4] 1905         CALL	RFROM
      00098F CD 05 67         [ 4] 1906 MMOD1:	CALL	TOR
      000992 CD 05 9E         [ 4] 1907         CALL	DUPP
      000995 CD 05 D7         [ 4] 1908         CALL	ZLESS
      000998 CD 04 AC         [ 4] 1909         CALL	QBRAN
      00099B 09 A3                 1910         .word	MMOD2
      00099D CD 05 5B         [ 4] 1911         CALL	RAT
      0009A0 CD 07 BA         [ 4] 1912         CALL	PLUS
      0009A3 CD 05 48         [ 4] 1913 MMOD2:	CALL	RFROM
      0009A6 CD 09 2E         [ 4] 1914         CALL	UMMOD
      0009A9 CD 05 48         [ 4] 1915         CALL	RFROM
      0009AC CD 04 AC         [ 4] 1916         CALL	QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009AF 09 BA                 1917         .word	MMOD3
      0009B1 CD 05 AE         [ 4] 1918         CALL	SWAPP
      0009B4 CD 07 E5         [ 4] 1919         CALL	NEGAT
      0009B7 CD 05 AE         [ 4] 1920         CALL	SWAPP
      0009BA 81               [ 4] 1921 MMOD3:	RET
                                   1922 
                                   1923 ;       /MOD    ( n n -- r q )
                                   1924 ;       Signed divide. Return mod and quotient.
      0009BB 09 6C                 1925         .word      LINK
                           0009BD  1926 LINK = . 
      0009BD 04                    1927         .byte      4
      0009BE 2F 4D 4F 44           1928         .ascii     "/MOD"
      0009C2                       1929 SLMOD:
      0009C2 CD 05 C8         [ 4] 1930         CALL	OVER
      0009C5 CD 05 D7         [ 4] 1931         CALL	ZLESS
      0009C8 CD 05 AE         [ 4] 1932         CALL	SWAPP
      0009CB CC 09 72         [ 2] 1933         JP	MSMOD
                                   1934 
                                   1935 ;       MOD     ( n n -- r )
                                   1936 ;       Signed divide. Return mod only.
      0009CE 09 BD                 1937         .word      LINK
                           0009D0  1938 LINK = . 
      0009D0 03                    1939         .byte      3
      0009D1 4D 4F 44              1940         .ascii     "MOD"
      0009D4                       1941 MODD:
      0009D4 CD 09 C2         [ 4] 1942 	CALL	SLMOD
      0009D7 CC 05 94         [ 2] 1943 	JP	DROP
                                   1944 
                                   1945 ;       /       ( n n -- q )
                                   1946 ;       Signed divide. Return quotient only.
      0009DA 09 D0                 1947         .word      LINK
                           0009DC  1948 LINK = . 
      0009DC 01                    1949         .byte      1
      0009DD 2F                    1950         .ascii     "/"
      0009DE                       1951 SLASH:
      0009DE CD 09 C2         [ 4] 1952         CALL	SLMOD
      0009E1 CD 05 AE         [ 4] 1953         CALL	SWAPP
      0009E4 CC 05 94         [ 2] 1954         JP	DROP
                                   1955 
                                   1956 ;; Multiply
                                   1957 
                                   1958 ;       UM*     ( u u -- ud )
                                   1959 ;       Unsigned multiply. Return double product.
      0009E7 09 DC                 1960         .word      LINK
                           0009E9  1961 LINK = . 
      0009E9 03                    1962         .byte      3
      0009EA 55 4D 2A              1963         .ascii     "UM*"
      0009ED                       1964 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1965 ; take advantage of SP addressing modes
                                   1966 ; these PRODx in RAM are not required
                                   1967 ; the product is kept on stack as local variable 
                                   1968         ;; bytes offset on data stack 
                           000002  1969         da=2 
                           000003  1970         db=3 
                           000000  1971         dc=0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000001  1972         dd=1 
                                   1973         ;; product bytes offset on return stack 
                           000001  1974         UD1=1  ; ud bits 31..24
                           000002  1975         UD2=2  ; ud bits 23..16
                           000003  1976         UD3=3  ; ud bits 15..8 
                           000004  1977         UD4=4  ; ud bits 7..0 
                                   1978         ;; local variable for product set to zero   
      0009ED 90 5F            [ 1] 1979         clrw y 
      0009EF 90 89            [ 2] 1980         pushw y  ; bits 15..0
      0009F1 90 89            [ 2] 1981         pushw y  ; bits 31..16 
      0009F3 E6 03            [ 1] 1982         ld a,(db,x) ; b 
      0009F5 90 97            [ 1] 1983         ld yl,a 
      0009F7 E6 01            [ 1] 1984         ld a,(dd,x)   ; d
      0009F9 90 42            [ 4] 1985         mul y,a    ; b*d  
      0009FB 17 03            [ 2] 1986         ldw (UD3,sp),y ; lowest weight product 
      0009FD E6 03            [ 1] 1987         ld a,(db,x)
      0009FF 90 97            [ 1] 1988         ld yl,a 
      000A01 E6 00            [ 1] 1989         ld a,(dc,x)
      000A03 90 42            [ 4] 1990         mul y,a  ; b*c 
                                   1991         ;;; do the partial sum 
      000A05 72 F9 02         [ 2] 1992         addw y,(UD2,sp)
      000A08 4F               [ 1] 1993         clr a 
      000A09 49               [ 1] 1994         rlc a
      000A0A 6B 01            [ 1] 1995         ld (UD1,sp),a 
      000A0C 17 02            [ 2] 1996         ldw (UD2,sp),y 
      000A0E E6 02            [ 1] 1997         ld a,(da,x)
      000A10 90 97            [ 1] 1998         ld yl,a 
      000A12 E6 01            [ 1] 1999         ld a,(dd,x)
      000A14 90 42            [ 4] 2000         mul y,a   ; a*d 
                                   2001         ;; do partial sum 
      000A16 72 F9 02         [ 2] 2002         addw y,(UD2,sp)
      000A19 4F               [ 1] 2003         clr a 
      000A1A 19 01            [ 1] 2004         adc a,(UD1,sp)
      000A1C 6B 01            [ 1] 2005         ld (UD1,sp),a  
      000A1E 17 02            [ 2] 2006         ldw (UD2,sp),y 
      000A20 E6 02            [ 1] 2007         ld a,(da,x)
      000A22 90 97            [ 1] 2008         ld yl,a 
      000A24 E6 00            [ 1] 2009         ld a,(dc,x)
      000A26 90 42            [ 4] 2010         mul y,a  ;  a*c highest weight product 
                                   2011         ;;; do partial sum 
      000A28 72 F9 01         [ 2] 2012         addw y,(UD1,sp)
      000A2B FF               [ 2] 2013         ldw (x),y  ; udh 
      000A2C 16 03            [ 2] 2014         ldw y,(UD3,sp)
      000A2E EF 02            [ 2] 2015         ldw (2,x),y  ; udl  
      000A30 5B 04            [ 2] 2016         addw sp,#4 ; drop local variable 
      000A32 81               [ 4] 2017         ret  
                                   2018 
                                   2019 
                                   2020 ;       *       ( n n -- n )
                                   2021 ;       Signed multiply. Return single product.
      000A33 09 E9                 2022         .word      LINK
                           000A35  2023 LINK = . 
      000A35 01                    2024         .byte      1
      000A36 2A                    2025         .ascii     "*"
      000A37                       2026 STAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A37 CD 09 ED         [ 4] 2027 	CALL	UMSTA
      000A3A CC 05 94         [ 2] 2028 	JP	DROP
                                   2029 
                                   2030 ;       M*      ( n n -- d )
                                   2031 ;       Signed multiply. Return double product.
      000A3D 0A 35                 2032         .word      LINK
                           000A3F  2033 LINK = . 
      000A3F 02                    2034         .byte      2
      000A40 4D 2A                 2035         .ascii     "M*"
      000A42                       2036 MSTAR:      
      000A42 CD 07 A5         [ 4] 2037         CALL	DDUP
      000A45 CD 06 13         [ 4] 2038         CALL	XORR
      000A48 CD 05 D7         [ 4] 2039         CALL	ZLESS
      000A4B CD 05 67         [ 4] 2040         CALL	TOR
      000A4E CD 08 4D         [ 4] 2041         CALL	ABSS
      000A51 CD 05 AE         [ 4] 2042         CALL	SWAPP
      000A54 CD 08 4D         [ 4] 2043         CALL	ABSS
      000A57 CD 09 ED         [ 4] 2044         CALL	UMSTA
      000A5A CD 05 48         [ 4] 2045         CALL	RFROM
      000A5D CD 04 AC         [ 4] 2046         CALL	QBRAN
      000A60 0A 65                 2047         .word	MSTA1
      000A62 CD 07 F7         [ 4] 2048         CALL	DNEGA
      000A65 81               [ 4] 2049 MSTA1:	RET
                                   2050 
                                   2051 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2052 ;       Multiply n1 and n2, then divide
                                   2053 ;       by n3. Return mod and quotient.
      000A66 0A 3F                 2054         .word      LINK
                           000A68  2055 LINK = . 
      000A68 05                    2056         .byte      5
      000A69 2A 2F 4D 4F 44        2057         .ascii     "*/MOD"
      000A6E                       2058 SSMOD:
      000A6E CD 05 67         [ 4] 2059         CALL     TOR
      000A71 CD 0A 42         [ 4] 2060         CALL     MSTAR
      000A74 CD 05 48         [ 4] 2061         CALL     RFROM
      000A77 CC 09 72         [ 2] 2062         JP     MSMOD
                                   2063 
                                   2064 ;       */      ( n1 n2 n3 -- q )
                                   2065 ;       Multiply n1 by n2, then divide
                                   2066 ;       by n3. Return quotient only.
      000A7A 0A 68                 2067         .word      LINK
                           000A7C  2068 LINK = . 
      000A7C 02                    2069         .byte      2
      000A7D 2A 2F                 2070         .ascii     "*/"
      000A7F                       2071 STASL:
      000A7F CD 0A 6E         [ 4] 2072         CALL	SSMOD
      000A82 CD 05 AE         [ 4] 2073         CALL	SWAPP
      000A85 CC 05 94         [ 2] 2074         JP	DROP
                                   2075 
                                   2076 ;; Miscellaneous
                                   2077 
                                   2078 ;       CELL+   ( a -- a )
                                   2079 ;       Add cell size in byte to address.
      000A88 0A 7C                 2080         .word      LINK
                           000A8A  2081 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A8A 02                    2082         .byte       2
      000A8B 32 2B                 2083         .ascii     "2+"
      000A8D                       2084 CELLP:
      000A8D 90 93            [ 1] 2085         LDW Y,X
      000A8F 90 FE            [ 2] 2086 	LDW Y,(Y)
      000A91 72 A9 00 02      [ 2] 2087         ADDW Y,#CELLL 
      000A95 FF               [ 2] 2088         LDW (X),Y
      000A96 81               [ 4] 2089         RET
                                   2090 
                                   2091 ;       CELL-   ( a -- a )
                                   2092 ;       Subtract 2 from address.
      000A97 0A 8A                 2093         .word      LINK
                           000A99  2094 LINK = . 
      000A99 02                    2095         .byte       2
      000A9A 32 2D                 2096         .ascii     "2-"
      000A9C                       2097 CELLM:
      000A9C 90 93            [ 1] 2098         LDW Y,X
      000A9E 90 FE            [ 2] 2099 	LDW Y,(Y)
      000AA0 72 A2 00 02      [ 2] 2100         SUBW Y,#CELLL
      000AA4 FF               [ 2] 2101         LDW (X),Y
      000AA5 81               [ 4] 2102         RET
                                   2103 
                                   2104 ;       CELLS   ( n -- n )
                                   2105 ;       Multiply tos by 2.
      000AA6 0A 99                 2106         .word      LINK
                           000AA8  2107 LINK = . 
      000AA8 02                    2108         .byte       2
      000AA9 32 2A                 2109         .ascii     "2*"
      000AAB                       2110 CELLS:
      000AAB 90 93            [ 1] 2111         LDW Y,X
      000AAD 90 FE            [ 2] 2112 	LDW Y,(Y)
      000AAF 90 58            [ 2] 2113         SLAW Y
      000AB1 FF               [ 2] 2114         LDW (X),Y
      000AB2 81               [ 4] 2115         RET
                                   2116 
                                   2117 ;       1+      ( a -- a )
                                   2118 ;       Add cell size in byte to address.
      000AB3 0A A8                 2119         .word      LINK
                           000AB5  2120 LINK = . 
      000AB5 02                    2121         .byte      2
      000AB6 31 2B                 2122         .ascii     "1+"
      000AB8                       2123 ONEP:
      000AB8 90 93            [ 1] 2124         LDW Y,X
      000ABA 90 FE            [ 2] 2125 	LDW Y,(Y)
      000ABC 90 5C            [ 1] 2126         INCW Y
      000ABE FF               [ 2] 2127         LDW (X),Y
      000ABF 81               [ 4] 2128         RET
                                   2129 
                                   2130 ;       1-      ( a -- a )
                                   2131 ;       Subtract 2 from address.
      000AC0 0A B5                 2132         .word      LINK
                           000AC2  2133 LINK = . 
      000AC2 02                    2134         .byte      2
      000AC3 31 2D                 2135         .ascii     "1-"
      000AC5                       2136 ONEM:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AC5 90 93            [ 1] 2137         LDW Y,X
      000AC7 90 FE            [ 2] 2138 	LDW Y,(Y)
      000AC9 90 5A            [ 2] 2139         DECW Y
      000ACB FF               [ 2] 2140         LDW (X),Y
      000ACC 81               [ 4] 2141         RET
                                   2142 
                                   2143 ;  shift left n times 
                                   2144 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000ACD 0A C2                 2145         .word LINK 
                           000ACF  2146         LINK=.
      000ACF 06                    2147         .byte 6 
      000AD0 4C 53 48 49 46 54     2148         .ascii "LSHIFT"
      000AD6                       2149 LSHIFT:
      000AD6 E6 01            [ 1] 2150         ld a,(1,x)
      000AD8 1C 00 02         [ 2] 2151         addw x,#CELLL 
      000ADB 90 93            [ 1] 2152         ldw y,x 
      000ADD 90 FE            [ 2] 2153         ldw y,(y)
      000ADF                       2154 LSHIFT1:
      000ADF 4D               [ 1] 2155         tnz a 
      000AE0 27 05            [ 1] 2156         jreq LSHIFT4 
      000AE2 90 58            [ 2] 2157         sllw y 
      000AE4 4A               [ 1] 2158         dec a 
      000AE5 20 F8            [ 2] 2159         jra LSHIFT1 
      000AE7                       2160 LSHIFT4:
      000AE7 FF               [ 2] 2161         ldw (x),y 
      000AE8 81               [ 4] 2162         ret 
                                   2163 
                                   2164 ; shift right n times                 
                                   2165 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AE9 0A CF                 2166         .word LINK 
                           000AEB  2167         LINK=.
      000AEB 06                    2168         .byte 6
      000AEC 52 53 48 49 46 54     2169         .ascii "RSHIFT"
      000AF2                       2170 RSHIFT:
      000AF2 E6 01            [ 1] 2171         ld a,(1,x)
      000AF4 1C 00 02         [ 2] 2172         addw x,#CELLL 
      000AF7 90 93            [ 1] 2173         ldw y,x 
      000AF9 90 FE            [ 2] 2174         ldw y,(y)
      000AFB                       2175 RSHIFT1:
      000AFB 4D               [ 1] 2176         tnz a 
      000AFC 27 05            [ 1] 2177         jreq RSHIFT4 
      000AFE 90 54            [ 2] 2178         srlw y 
      000B00 4A               [ 1] 2179         dec a 
      000B01 20 F8            [ 2] 2180         jra RSHIFT1 
      000B03                       2181 RSHIFT4:
      000B03 FF               [ 2] 2182         ldw (x),y 
      000B04 81               [ 4] 2183         ret 
                                   2184 
                                   2185 
                                   2186 ;       2/      ( n -- n )
                                   2187 ;       divide  tos by 2.
      000B05 0A EB                 2188         .word      LINK
                           000B07  2189 LINK = . 
      000B07 02                    2190         .byte      2
      000B08 32 2F                 2191         .ascii     "2/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B0A                       2192 TWOSL:
      000B0A 90 93            [ 1] 2193         LDW Y,X
      000B0C 90 FE            [ 2] 2194 	LDW Y,(Y)
      000B0E 90 57            [ 2] 2195         SRAW Y
      000B10 FF               [ 2] 2196         LDW (X),Y
      000B11 81               [ 4] 2197         RET
                                   2198 
                                   2199 ;       BL      ( -- 32 )
                                   2200 ;       Return 32,  blank character.
      000B12 0B 07                 2201         .word      LINK
                           000B14  2202 LINK = . 
      000B14 02                    2203         .byte      2
      000B15 42 4C                 2204         .ascii     "BL"
      000B17                       2205 BLANK:
      000B17 1D 00 02         [ 2] 2206         SUBW X,#2
      000B1A 90 AE 00 20      [ 2] 2207 	LDW Y,#32
      000B1E FF               [ 2] 2208         LDW (X),Y
      000B1F 81               [ 4] 2209         RET
                                   2210 
                                   2211 ;         0     ( -- 0)
                                   2212 ;         Return 0.
      000B20 0B 14                 2213         .word      LINK
                           000B22  2214 LINK = . 
      000B22 01                    2215         .byte       1
      000B23 30                    2216         .ascii     "0"
      000B24                       2217 ZERO:
      000B24 1D 00 02         [ 2] 2218         SUBW X,#2
      000B27 90 5F            [ 1] 2219 	CLRW Y
      000B29 FF               [ 2] 2220         LDW (X),Y
      000B2A 81               [ 4] 2221         RET
                                   2222 
                                   2223 ;         1     ( -- 1)
                                   2224 ;         Return 1.
      000B2B 0B 22                 2225         .word      LINK
                           000B2D  2226 LINK = . 
      000B2D 01                    2227         .byte       1
      000B2E 31                    2228         .ascii     "1"
      000B2F                       2229 ONE:
      000B2F 1D 00 02         [ 2] 2230         SUBW X,#2
      000B32 90 AE 00 01      [ 2] 2231 	LDW Y,#1
      000B36 FF               [ 2] 2232         LDW (X),Y
      000B37 81               [ 4] 2233         RET
                                   2234 
                                   2235 ;         -1    ( -- -1)
                                   2236 ;         Return 32,  blank character.
      000B38 0B 2D                 2237         .word      LINK
                           000B3A  2238 LINK = . 
      000B3A 02                    2239         .byte       2
      000B3B 2D 31                 2240         .ascii     "-1"
      000B3D                       2241 MONE:
      000B3D 1D 00 02         [ 2] 2242         SUBW X,#2
      000B40 90 AE FF FF      [ 2] 2243 	LDW Y,#0xFFFF
      000B44 FF               [ 2] 2244         LDW (X),Y
      000B45 81               [ 4] 2245         RET
                                   2246 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2247 ;       >CHAR   ( c -- c )
                                   2248 ;       Filter non-printing characters.
      000B46 0B 3A                 2249         .word      LINK
                           000B48  2250 LINK = . 
      000B48 05                    2251         .byte      5
      000B49 3E 43 48 41 52        2252         .ascii     ">CHAR"
      000B4E                       2253 TCHAR:
      000B4E E6 01            [ 1] 2254         ld a,(1,x)
      000B50 A1 20            [ 1] 2255         cp a,#32  
      000B52 2B 05            [ 1] 2256         jrmi 1$ 
      000B54 A1 7F            [ 1] 2257         cp a,#127 
      000B56 2A 01            [ 1] 2258         jrpl 1$ 
      000B58 81               [ 4] 2259         ret 
      000B59 A6 5F            [ 1] 2260 1$:     ld a,#'_ 
      000B5B E7 01            [ 1] 2261         ld (1,x),a 
      000B5D 81               [ 4] 2262         ret 
                                   2263 
                                   2264 ;       DEPTH   ( -- n )
                                   2265 ;       Return  depth of  data stack.
      000B5E 0B 48                 2266         .word      LINK
                           000B60  2267 LINK = . 
      000B60 05                    2268         .byte      5
      000B61 44 45 50 54 48        2269         .ascii     "DEPTH"
      000B66                       2270 DEPTH: 
      000B66 90 BE 2E         [ 2] 2271         LDW Y,SP0    ;save data stack ptr
      000B69 BF 26            [ 2] 2272 	LDW XTEMP,X
      000B6B 72 B2 00 26      [ 2] 2273         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B6F 90 57            [ 2] 2274         SRAW Y    ;Y = #stack items
      000B71 1D 00 02         [ 2] 2275 	SUBW X,#2
      000B74 FF               [ 2] 2276         LDW (X),Y     ; if neg, underflow
      000B75 81               [ 4] 2277         RET
                                   2278 
                                   2279 ;       PICK    ( ... +n -- ... w )
                                   2280 ;       Copy  nth stack item to tos.
      000B76 0B 60                 2281         .word      LINK
                           000B78  2282 LINK = . 
      000B78 04                    2283         .byte      4
      000B79 50 49 43 4B           2284         .ascii     "PICK"
      000B7D                       2285 PICK:
      000B7D 90 93            [ 1] 2286         LDW Y,X   ;D = n1
      000B7F 90 FE            [ 2] 2287         LDW Y,(Y)
                                   2288 ; modified for standard compliance          
                                   2289 ; 0 PICK must be equivalent to DUP 
      000B81 90 5C            [ 1] 2290         INCW Y 
      000B83 90 58            [ 2] 2291         SLAW Y
      000B85 BF 26            [ 2] 2292         LDW XTEMP,X
      000B87 72 B9 00 26      [ 2] 2293         ADDW Y,XTEMP
      000B8B 90 FE            [ 2] 2294         LDW Y,(Y)
      000B8D FF               [ 2] 2295         LDW (X),Y
      000B8E 81               [ 4] 2296         RET
                                   2297 
                                   2298 ;; Memory access
                                   2299 
                                   2300 ;       +!      ( n a -- )
                                   2301 ;       Add n to  contents at address a.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B8F 0B 78                 2302         .word      LINK
                           000B91  2303 LINK = . 
      000B91 02                    2304         .byte      2
      000B92 2B 21                 2305         .ascii     "+!"
      000B94                       2306 PSTOR:
      000B94 90 93            [ 1] 2307         ldw y,x 
      000B96 90 FE            [ 2] 2308         ldw y,(y)
      000B98 90 BF 28         [ 2] 2309         ldw YTEMP,y  ; address
      000B9B 90 FE            [ 2] 2310         ldw y,(y)  
      000B9D 90 89            [ 2] 2311         pushw y  ; value at address 
      000B9F 90 93            [ 1] 2312         ldw y,x 
      000BA1 90 EE 02         [ 2] 2313         ldw y,(2,y) ; n 
      000BA4 72 F9 01         [ 2] 2314         addw y,(1,sp) ; n+value
      000BA7 91 CF 28         [ 5] 2315         ldw [YTEMP],y ;  a!
      000BAA 90 85            [ 2] 2316         popw y    ;drop local var
      000BAC 1C 00 04         [ 2] 2317         addw x,#4 ; DDROP 
      000BAF 81               [ 4] 2318         ret 
                                   2319 
                                   2320 ;       2!      ( d a -- )
                                   2321 ;       Store  double integer to address a.
      000BB0 0B 91                 2322         .word      LINK
                           000BB2  2323 LINK = . 
      000BB2 02                    2324         .byte      2
      000BB3 32 21                 2325         .ascii     "2!"
      000BB5                       2326 DSTOR:
      000BB5 90 93            [ 1] 2327         ldw y,x 
      000BB7 90 FE            [ 2] 2328         ldw y,(y)
      000BB9 90 BF 28         [ 2] 2329         ldw YTEMP,y ; address 
      000BBC 1C 00 02         [ 2] 2330         addw x,#CELLL ; drop a 
      000BBF 90 93            [ 1] 2331         ldw y,x 
      000BC1 90 FE            [ 2] 2332         ldw y,(y) ; hi word 
      000BC3 89               [ 2] 2333         pushw x 
      000BC4 EE 02            [ 2] 2334         ldw x,(2,x) ; lo word 
      000BC6 91 CF 28         [ 5] 2335         ldw [YTEMP],y
      000BC9 90 93            [ 1] 2336         ldw y,x 
      000BCB AE 00 02         [ 2] 2337         ldw x,#2 
      000BCE 92 DF 28         [ 5] 2338         ldw ([YTEMP],x),y 
      000BD1 85               [ 2] 2339         popw x 
      000BD2 1C 00 04         [ 2] 2340         addw x,#4 ; DDROP 
      000BD5 81               [ 4] 2341         ret 
                                   2342 
                                   2343 ;       2@      ( a -- d )
                                   2344 ;       Fetch double integer from address a.
      000BD6 0B B2                 2345         .word      LINK
                           000BD8  2346 LINK = . 
      000BD8 02                    2347         .byte      2
      000BD9 32 40                 2348         .ascii     "2@"
      000BDB                       2349 DAT:
      000BDB 90 93            [ 1] 2350         ldw y,x 
      000BDD 90 FE            [ 2] 2351         ldw y,(y) ;address 
      000BDF 90 BF 28         [ 2] 2352         ldw YTEMP,y 
      000BE2 1D 00 02         [ 2] 2353         subw x,#CELLL ; space for udh 
      000BE5 91 CE 28         [ 5] 2354         ldw y,[YTEMP] ; udh 
      000BE8 FF               [ 2] 2355         ldw (x),y 
      000BE9 90 AE 00 02      [ 2] 2356         ldw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BED 91 DE 28         [ 5] 2357         ldw y,([YTEMP],y) ; udl 
      000BF0 EF 02            [ 2] 2358         ldw (2,x),y
      000BF2 81               [ 4] 2359         ret 
                                   2360 
                                   2361 ;       COUNT   ( b -- b +n )
                                   2362 ;       Return count byte of a string
                                   2363 ;       and add 1 to byte address.
      000BF3 0B D8                 2364         .word      LINK
                           000BF5  2365 LINK = . 
      000BF5 05                    2366         .byte      5
      000BF6 43 4F 55 4E 54        2367         .ascii     "COUNT"
      000BFB                       2368 COUNT:
      000BFB 90 93            [ 1] 2369         ldw y,x 
      000BFD 90 FE            [ 2] 2370         ldw y,(y) ; address 
      000BFF 90 F6            [ 1] 2371         ld a,(y)  ; count 
      000C01 90 5C            [ 1] 2372         incw y 
      000C03 FF               [ 2] 2373         ldw (x),y 
      000C04 1D 00 02         [ 2] 2374         subw x,#CELLL 
      000C07 E7 01            [ 1] 2375         ld (1,x),a 
      000C09 7F               [ 1] 2376         clr (x)
      000C0A 81               [ 4] 2377         ret 
                                   2378 
                                   2379 ;       HERE    ( -- a )
                                   2380 ;       Return  top of  variables
      000C0B 0B F5                 2381         .word      LINK
                           000C0D  2382 LINK = . 
      000C0D 04                    2383         .byte      4
      000C0E 48 45 52 45           2384         .ascii     "HERE"
      000C12                       2385 HERE:
      000C12 90 AE 00 1A      [ 2] 2386       	ldw y,#UVP 
      000C16 90 FE            [ 2] 2387         ldw y,(y)
      000C18 1D 00 02         [ 2] 2388         subw x,#CELLL 
      000C1B FF               [ 2] 2389         ldw (x),y 
      000C1C 81               [ 4] 2390         ret 
                                   2391 
                                   2392 ;       PAD     ( -- a )
                                   2393 ;       Return address of text buffer
                                   2394 ;       above  code dictionary.
      000C1D 0C 0D                 2395         .word      LINK
                           000C1F  2396 LINK = . 
      000C1F 03                    2397         .byte      3
      000C20 50 41 44              2398         .ascii     "PAD"
      000C23                       2399 PAD:
      000C23 CD 0C 12         [ 4] 2400         CALL     HERE
      000C26 CD 04 79         [ 4] 2401         CALL     DOLIT
      000C29 00 50                 2402         .word      80
      000C2B CC 07 BA         [ 2] 2403         JP     PLUS
                                   2404 
                                   2405 ;       TIB     ( -- a )
                                   2406 ;       Return address of terminal input buffer.
      000C2E 0C 1F                 2407         .word      LINK
                           000C30  2408 LINK = . 
      000C30 03                    2409         .byte      3
      000C31 54 49 42              2410         .ascii     "TIB"
      000C34                       2411 TIB:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C34 CD 06 89         [ 4] 2412         CALL     NTIB
      000C37 CD 0A 8D         [ 4] 2413         CALL     CELLP
      000C3A CC 04 F7         [ 2] 2414         JP     AT
                                   2415 
                                   2416 ;       @EXECUTE        ( a -- )
                                   2417 ;       Execute vector stored in address a.
      000C3D 0C 30                 2418         .word      LINK
                           000C3F  2419 LINK = . 
      000C3F 08                    2420         .byte      8
      000C40 40 45 58 45 43 55 54  2421         .ascii     "@EXECUTE"
             45
      000C48                       2422 ATEXE:
      000C48 CD 04 F7         [ 4] 2423         CALL     AT
      000C4B CD 07 48         [ 4] 2424         CALL     QDUP    ;?address or zero
      000C4E CD 04 AC         [ 4] 2425         CALL     QBRAN
      000C51 0C 56                 2426         .word      EXE1
      000C53 CD 04 D3         [ 4] 2427         CALL     EXECU   ;execute if non-zero
      000C56 81               [ 4] 2428 EXE1:   RET     ;do nothing if zero
                                   2429 
                                   2430 ;       CMOVE   ( b1 b2 u -- )
                                   2431 ;       Copy u bytes from b1 to b2.
      000C57 0C 3F                 2432         .word      LINK
                           000C59  2433 LINK = . 
      000C59 05                    2434         .byte      5
      000C5A 43 4D 4F 56 45        2435         .ascii     "CMOVE"
      000C5F                       2436 CMOVE:
      000C5F CD 05 67         [ 4] 2437         CALL	TOR
      000C62 CD 04 C3         [ 4] 2438         CALL	BRAN
      000C65 0C 7F                 2439         .word	CMOV2
      000C67 CD 05 67         [ 4] 2440 CMOV1:	CALL	TOR
      000C6A CD 05 9E         [ 4] 2441         CALL	DUPP
      000C6D CD 05 15         [ 4] 2442         CALL	CAT
      000C70 CD 05 5B         [ 4] 2443         CALL	RAT
      000C73 CD 05 04         [ 4] 2444         CALL	CSTOR
      000C76 CD 0A B8         [ 4] 2445         CALL	ONEP
      000C79 CD 05 48         [ 4] 2446         CALL	RFROM
      000C7C CD 0A B8         [ 4] 2447         CALL	ONEP
      000C7F CD 04 8D         [ 4] 2448 CMOV2:	CALL	DONXT
      000C82 0C 67                 2449         .word	CMOV1
      000C84 CC 07 9A         [ 2] 2450         JP	DDROP
                                   2451 
                                   2452 ;       FILL    ( b u c -- )
                                   2453 ;       Fill u bytes of character c
                                   2454 ;       to area beginning at b.
      000C87 0C 59                 2455         .word       LINK
                           000C89  2456 LINK = . 
      000C89 04                    2457         .byte       4
      000C8A 46 49 4C 4C           2458         .ascii     "FILL"
      000C8E                       2459 FILL:
      000C8E 90 93            [ 1] 2460         ldw y,x 
      000C90 90 E6 01         [ 1] 2461         ld a,(1,y) ; c 
      000C93 1C 00 02         [ 2] 2462         addw x,#CELLL ; drop c 
      000C96 90 93            [ 1] 2463         ldw y,x 
      000C98 90 FE            [ 2] 2464         ldw y,(y) ; count
      000C9A 90 89            [ 2] 2465         pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C9C 1C 00 02         [ 2] 2466         addw x,#CELLL ; drop u 
      000C9F 90 93            [ 1] 2467         ldw y,x 
      000CA1 1C 00 02         [ 2] 2468         addw x,#CELLL ; drop b 
      000CA4 90 FE            [ 2] 2469         ldw y,(y) ; address
      000CA6 90 BF 28         [ 2] 2470         ldw YTEMP,y
      000CA9 90 85            [ 2] 2471         popw y ; count 
      000CAB                       2472 FILL1:  
      000CAB 92 C7 28         [ 4] 2473         ld [YTEMP],a 
      000CAE 3C 29            [ 1] 2474         inc YTEMP+1
      000CB0 24 02            [ 1] 2475         jrnc FILL2 
      000CB2 3C 28            [ 1] 2476         inc YTEMP
      000CB4                       2477 FILL2: 
      000CB4 90 5A            [ 2] 2478         decw y ; count 
      000CB6 26 F3            [ 1] 2479         jrne FILL1  
      000CB8 81               [ 4] 2480         ret 
                                   2481 
                                   2482 ;       ERASE   ( b u -- )
                                   2483 ;       Erase u bytes beginning at b.
      000CB9 0C 89                 2484         .word      LINK
                           000CBB  2485 LINK = . 
      000CBB 05                    2486         .byte      5
      000CBC 45 52 41 53 45        2487         .ascii     "ERASE"
      000CC1                       2488 ERASE:
      000CC1 90 5F            [ 1] 2489         clrw y 
      000CC3 1D 00 02         [ 2] 2490         subw x,#CELLL 
      000CC6 FF               [ 2] 2491         ldw (x),y 
      000CC7 CC 0C 8E         [ 2] 2492         jp FILL 
                                   2493 
                                   2494 
                                   2495 ;       PACK0   ( b u a -- a )
                                   2496 ;       Build a counted string with
                                   2497 ;       u characters from b. Null fill.
      000CCA 0C BB                 2498         .word      LINK
                           000CCC  2499 LINK = . 
      000CCC 05                    2500         .byte      5
      000CCD 50 41 43 4B 30        2501         .ascii     "PACK0"
      000CD2                       2502 PACKS:
      000CD2 CD 05 9E         [ 4] 2503         CALL     DUPP
      000CD5 CD 05 67         [ 4] 2504         CALL     TOR     ;strings only on cell boundary
      000CD8 CD 07 A5         [ 4] 2505         CALL     DDUP
      000CDB CD 05 04         [ 4] 2506         CALL     CSTOR
      000CDE CD 0A B8         [ 4] 2507         CALL     ONEP ;save count
      000CE1 CD 05 AE         [ 4] 2508         CALL     SWAPP
      000CE4 CD 0C 5F         [ 4] 2509         CALL     CMOVE
      000CE7 CD 05 48         [ 4] 2510         CALL     RFROM
      000CEA 81               [ 4] 2511         RET
                                   2512 
                                   2513 ;; Numeric output, single precision
                                   2514 
                                   2515 ;       DIGIT   ( u -- c )
                                   2516 ;       Convert digit u to a character.
      000CEB 0C CC                 2517         .word      LINK
                           000CED  2518 LINK = . 
      000CED 05                    2519         .byte      5
      000CEE 44 49 47 49 54        2520         .ascii     "DIGIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CF3                       2521 DIGIT:
      000CF3 CD 04 79         [ 4] 2522         CALL	DOLIT
      000CF6 00 09                 2523         .word	9
      000CF8 CD 05 C8         [ 4] 2524         CALL	OVER
      000CFB CD 08 98         [ 4] 2525         CALL	LESS
      000CFE CD 04 79         [ 4] 2526         CALL	DOLIT
      000D01 00 07                 2527         .word	7
      000D03 CD 05 EA         [ 4] 2528         CALL	ANDD
      000D06 CD 07 BA         [ 4] 2529         CALL	PLUS
      000D09 CD 04 79         [ 4] 2530         CALL	DOLIT
      000D0C 00 30                 2531         .word	48	;'0'
      000D0E CC 07 BA         [ 2] 2532         JP	PLUS
                                   2533 
                                   2534 ;       EXTRACT ( n base -- n c )
                                   2535 ;       Extract least significant digit from n.
      000D11 0C ED                 2536         .word      LINK
                           000D13  2537 LINK = . 
      000D13 07                    2538         .byte      7
      000D14 45 58 54 52 41 43 54  2539         .ascii     "EXTRACT"
      000D1B                       2540 EXTRC:
      000D1B CD 0B 24         [ 4] 2541         CALL     ZERO
      000D1E CD 05 AE         [ 4] 2542         CALL     SWAPP
      000D21 CD 09 2E         [ 4] 2543         CALL     UMMOD
      000D24 CD 05 AE         [ 4] 2544         CALL     SWAPP
      000D27 CC 0C F3         [ 2] 2545         JP     DIGIT
                                   2546 
                                   2547 ;       <#      ( -- )
                                   2548 ;       Initiate  numeric output process.
      000D2A 0D 13                 2549         .word      LINK
                           000D2C  2550 LINK = . 
      000D2C 02                    2551         .byte      2
      000D2D 3C 23                 2552         .ascii     "<#"
      000D2F                       2553 BDIGS:
      000D2F CD 0C 23         [ 4] 2554         CALL     PAD
      000D32 CD 06 CB         [ 4] 2555         CALL     HLD
      000D35 CC 04 E0         [ 2] 2556         JP     STORE
                                   2557 
                                   2558 ;       HOLD    ( c -- )
                                   2559 ;       Insert a character into output string.
      000D38 0D 2C                 2560         .word      LINK
                           000D3A  2561 LINK = . 
      000D3A 04                    2562         .byte      4
      000D3B 48 4F 4C 44           2563         .ascii     "HOLD"
      000D3F                       2564 HOLD:
      000D3F CD 06 CB         [ 4] 2565         CALL     HLD
      000D42 CD 04 F7         [ 4] 2566         CALL     AT
      000D45 CD 0A C5         [ 4] 2567         CALL     ONEM
      000D48 CD 05 9E         [ 4] 2568         CALL     DUPP
      000D4B CD 06 CB         [ 4] 2569         CALL     HLD
      000D4E CD 04 E0         [ 4] 2570         CALL     STORE
      000D51 CC 05 04         [ 2] 2571         JP     CSTOR
                                   2572 
                                   2573 ;       #       ( u -- u )
                                   2574 ;       Extract one digit from u and
                                   2575 ;       append digit to output string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D54 0D 3A                 2576         .word      LINK
                           000D56  2577 LINK = . 
      000D56 01                    2578         .byte      1
      000D57 23                    2579         .ascii     "#"
      000D58                       2580 DIG:
      000D58 CD 06 5B         [ 4] 2581         CALL     BASE
      000D5B CD 04 F7         [ 4] 2582         CALL     AT
      000D5E CD 0D 1B         [ 4] 2583         CALL     EXTRC
      000D61 CC 0D 3F         [ 2] 2584         JP     HOLD
                                   2585 
                                   2586 ;       #S      ( u -- 0 )
                                   2587 ;       Convert u until all digits
                                   2588 ;       are added to output string.
      000D64 0D 56                 2589         .word      LINK
                           000D66  2590 LINK = . 
      000D66 02                    2591         .byte      2
      000D67 23 53                 2592         .ascii     "#S"
      000D69                       2593 DIGS:
      000D69 CD 0D 58         [ 4] 2594 DIGS1:  CALL     DIG
      000D6C CD 05 9E         [ 4] 2595         CALL     DUPP
      000D6F CD 04 AC         [ 4] 2596         CALL     QBRAN
      000D72 0D 76                 2597         .word      DIGS2
      000D74 20 F3            [ 2] 2598         JRA     DIGS1
      000D76 81               [ 4] 2599 DIGS2:  RET
                                   2600 
                                   2601 ;       SIGN    ( n -- )
                                   2602 ;       Add a minus sign to
                                   2603 ;       numeric output string.
      000D77 0D 66                 2604         .word      LINK
                           000D79  2605 LINK = . 
      000D79 04                    2606         .byte      4
      000D7A 53 49 47 4E           2607         .ascii     "SIGN"
      000D7E                       2608 SIGN:
      000D7E CD 05 D7         [ 4] 2609         CALL     ZLESS
      000D81 CD 04 AC         [ 4] 2610         CALL     QBRAN
      000D84 0D 8E                 2611         .word      SIGN1
      000D86 CD 04 79         [ 4] 2612         CALL     DOLIT
      000D89 00 2D                 2613         .word      45	;"-"
      000D8B CC 0D 3F         [ 2] 2614         JP     HOLD
      000D8E 81               [ 4] 2615 SIGN1:  RET
                                   2616 
                                   2617 ;       #>      ( w -- b u )
                                   2618 ;       Prepare output string.
      000D8F 0D 79                 2619         .word      LINK
                           000D91  2620 LINK = . 
      000D91 02                    2621         .byte      2
      000D92 23 3E                 2622         .ascii     "#>"
      000D94                       2623 EDIGS:
      000D94 CD 05 94         [ 4] 2624         CALL     DROP
      000D97 CD 06 CB         [ 4] 2625         CALL     HLD
      000D9A CD 04 F7         [ 4] 2626         CALL     AT
      000D9D CD 0C 23         [ 4] 2627         CALL     PAD
      000DA0 CD 05 C8         [ 4] 2628         CALL     OVER
      000DA3 CC 08 33         [ 2] 2629         JP     SUBB
                                   2630 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2631 ;       str     ( w -- b u )
                                   2632 ;       Convert a signed integer
                                   2633 ;       to a numeric string.
      000DA6 0D 91                 2634         .word      LINK
                           000DA8  2635 LINK = . 
      000DA8 03                    2636         .byte      3
      000DA9 53 54 52              2637         .ascii     "STR"
      000DAC                       2638 STR:
      000DAC CD 05 9E         [ 4] 2639         CALL     DUPP
      000DAF CD 05 67         [ 4] 2640         CALL     TOR
      000DB2 CD 08 4D         [ 4] 2641         CALL     ABSS
      000DB5 CD 0D 2F         [ 4] 2642         CALL     BDIGS
      000DB8 CD 0D 69         [ 4] 2643         CALL     DIGS
      000DBB CD 05 48         [ 4] 2644         CALL     RFROM
      000DBE CD 0D 7E         [ 4] 2645         CALL     SIGN
      000DC1 CC 0D 94         [ 2] 2646         JP     EDIGS
                                   2647 
                                   2648 ;       HEX     ( -- )
                                   2649 ;       Use radix 16 as base for
                                   2650 ;       numeric conversions.
      000DC4 0D A8                 2651         .word      LINK
                           000DC6  2652 LINK = . 
      000DC6 03                    2653         .byte      3
      000DC7 48 45 58              2654         .ascii     "HEX"
      000DCA                       2655 HEX:
      000DCA CD 04 79         [ 4] 2656         CALL     DOLIT
      000DCD 00 10                 2657         .word      16
      000DCF CD 06 5B         [ 4] 2658         CALL     BASE
      000DD2 CC 04 E0         [ 2] 2659         JP     STORE
                                   2660 
                                   2661 ;       DECIMAL ( -- )
                                   2662 ;       Use radix 10 as base
                                   2663 ;       for numeric conversions.
      000DD5 0D C6                 2664         .word      LINK
                           000DD7  2665 LINK = . 
      000DD7 07                    2666         .byte      7
      000DD8 44 45 43 49 4D 41 4C  2667         .ascii     "DECIMAL"
      000DDF                       2668 DECIM:
      000DDF CD 04 79         [ 4] 2669         CALL     DOLIT
      000DE2 00 0A                 2670         .word      10
      000DE4 CD 06 5B         [ 4] 2671         CALL     BASE
      000DE7 CC 04 E0         [ 2] 2672         JP     STORE
                                   2673 
                                   2674 ;; Numeric input, single precision
                                   2675 
                                   2676 ;       DIGIT?  ( c base -- u t )
                                   2677 ;       Convert a character to its numeric
                                   2678 ;       value. A flag indicates success.
      000DEA 0D D7                 2679         .word      LINK
                           000DEC  2680 LINK = . 
      000DEC 06                    2681         .byte       6
      000DED 44 49 47 49 54 3F     2682         .ascii     "DIGIT?"
      000DF3                       2683 DIGTQ:
      000DF3 CD 05 67         [ 4] 2684         CALL     TOR
      000DF6 CD 04 79         [ 4] 2685         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DF9 00 30                 2686         .word     48	; "0"
      000DFB CD 08 33         [ 4] 2687         CALL     SUBB
      000DFE CD 04 79         [ 4] 2688         CALL     DOLIT
      000E01 00 09                 2689         .word      9
      000E03 CD 05 C8         [ 4] 2690         CALL     OVER
      000E06 CD 08 98         [ 4] 2691         CALL     LESS
      000E09 CD 04 AC         [ 4] 2692         CALL     QBRAN
      000E0C 0E 24                 2693         .word      DGTQ1
      000E0E CD 04 79         [ 4] 2694         CALL     DOLIT
      000E11 00 07                 2695         .word      7
      000E13 CD 08 33         [ 4] 2696         CALL     SUBB
      000E16 CD 05 9E         [ 4] 2697         CALL     DUPP
      000E19 CD 04 79         [ 4] 2698         CALL     DOLIT
      000E1C 00 0A                 2699         .word      10
      000E1E CD 08 98         [ 4] 2700         CALL     LESS
      000E21 CD 05 FE         [ 4] 2701         CALL     ORR
      000E24 CD 05 9E         [ 4] 2702 DGTQ1:  CALL     DUPP
      000E27 CD 05 48         [ 4] 2703         CALL     RFROM
      000E2A CC 08 7A         [ 2] 2704         JP     ULESS
                                   2705 
                           000001  2706 .if  WANT_DOUBLE
                           000000  2707 .else 
                                   2708 ;       NUMBER? ( a -- n T | a F )
                                   2709 ;       Convert a number string to
                                   2710 ;       integer. Push a flag on tos.
                                   2711         .word      LINK
                                   2712 LINK = . 
                                   2713         .byte      7
                                   2714         .ascii     "NUMBER?"
                                   2715 NUMBQ:
                                   2716         CALL     BASE
                                   2717         CALL     AT
                                   2718         CALL     TOR
                                   2719         CALL     ZERO
                                   2720         CALL     OVER
                                   2721         CALL     COUNT
                                   2722         CALL     OVER
                                   2723         CALL     CAT
                                   2724         CALL     DOLIT
                                   2725         .word     36	; "0x"
                                   2726         CALL     EQUAL
                                   2727         CALL     QBRAN
                                   2728         .word      NUMQ1
                                   2729         CALL     HEX
                                   2730         CALL     SWAPP
                                   2731         CALL     ONEP
                                   2732         CALL     SWAPP
                                   2733         CALL     ONEM
                                   2734 NUMQ1:  CALL     OVER
                                   2735         CALL     CAT
                                   2736         CALL     DOLIT
                                   2737         .word     45	; "-"
                                   2738         CALL     EQUAL
                                   2739         CALL     TOR
                                   2740         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2741         CALL     RAT
                                   2742         CALL     SUBB
                                   2743         CALL     SWAPP
                                   2744         CALL     RAT
                                   2745         CALL     PLUS
                                   2746         CALL     QDUP
                                   2747         CALL     QBRAN
                                   2748         .word      NUMQ6
                                   2749         CALL     ONEM
                                   2750         CALL     TOR
                                   2751 NUMQ2:  CALL     DUPP
                                   2752         CALL     TOR
                                   2753         CALL     CAT
                                   2754         CALL     BASE
                                   2755         CALL     AT
                                   2756         CALL     DIGTQ
                                   2757         CALL     QBRAN
                                   2758         .word      NUMQ4
                                   2759         CALL     SWAPP
                                   2760         CALL     BASE
                                   2761         CALL     AT
                                   2762         CALL     STAR
                                   2763         CALL     PLUS
                                   2764         CALL     RFROM
                                   2765         CALL     ONEP
                                   2766         CALL     DONXT
                                   2767         .word      NUMQ2
                                   2768         CALL     RAT
                                   2769         CALL     SWAPP
                                   2770         CALL     DROP
                                   2771         CALL     QBRAN
                                   2772         .word      NUMQ3
                                   2773         CALL     NEGAT
                                   2774 NUMQ3:  CALL     SWAPP
                                   2775         JRA     NUMQ5
                                   2776 NUMQ4:  CALL     RFROM
                                   2777         CALL     RFROM
                                   2778         CALL     DDROP
                                   2779         CALL     DDROP
                                   2780         CALL     ZERO
                                   2781 NUMQ5:  CALL     DUPP
                                   2782 NUMQ6:  CALL     RFROM
                                   2783         CALL     DDROP
                                   2784         CALL     RFROM
                                   2785         CALL     BASE
                                   2786         JP     STORE
                                   2787 .endif ; WANT_DOUBLE  
                                   2788 
                                   2789 ;; Basic I/O
                                   2790 
                                   2791 ;       KEY     ( -- c )
                                   2792 ;       Wait for and return an
                                   2793 ;       input character.
      000E2D 0D EC                 2794         .word      LINK
                           000E2F  2795 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E2F 03                    2796         .byte      3
      000E30 4B 45 59              2797         .ascii     "KEY"
      000E33                       2798 KEY:
      000E33 72 0B 52 30 FB   [ 2] 2799         btjf UART_SR,#UART_SR_RXNE,. 
      000E38 C6 52 31         [ 1] 2800         ld a,UART_DR 
      000E3B 1D 00 02         [ 2] 2801         subw x,#CELLL 
      000E3E E7 01            [ 1] 2802         ld (1,x),a 
      000E40 7F               [ 1] 2803         clr (x)
      000E41 81               [ 4] 2804         ret 
                                   2805 
                                   2806 ;       NUF?    ( -- t )
                                   2807 ;       Return false if no input,
                                   2808 ;       else pause and if CR return true.
      000E42 0E 2F                 2809         .word      LINK
                           000E44  2810 LINK = . 
      000E44 04                    2811         .byte      4
      000E45 4E 55 46 3F           2812         .ascii     "NUF?"
      000E49                       2813 NUFQ:
      000E49 CD 04 1A         [ 4] 2814         CALL     QKEY
      000E4C CD 05 9E         [ 4] 2815         CALL     DUPP
      000E4F CD 04 AC         [ 4] 2816         CALL     QBRAN
      000E52 0E 62                 2817         .word    NUFQ1
      000E54 CD 07 9A         [ 4] 2818         CALL     DDROP
      000E57 CD 0E 33         [ 4] 2819         CALL     KEY
      000E5A CD 04 79         [ 4] 2820         CALL     DOLIT
      000E5D 00 0D                 2821         .word      CRR
      000E5F CC 08 5B         [ 2] 2822         JP     EQUAL
      000E62 81               [ 4] 2823 NUFQ1:  RET
                                   2824 
                                   2825 ;       SPACE   ( -- )
                                   2826 ;       Send  blank character to
                                   2827 ;       output device.
      000E63 0E 44                 2828         .word      LINK
                           000E65  2829 LINK = . 
      000E65 05                    2830         .byte      5
      000E66 53 50 41 43 45        2831         .ascii     "SPACE"
      000E6B                       2832 SPACE:
      000E6B CD 0B 17         [ 4] 2833         CALL     BLANK
      000E6E CC 04 38         [ 2] 2834         JP     EMIT
                                   2835 
                                   2836 ;       SPACES  ( +n -- )
                                   2837 ;       Send n spaces to output device.
      000E71 0E 65                 2838         .word      LINK
                           000E73  2839 LINK = . 
      000E73 06                    2840         .byte      6
      000E74 53 50 41 43 45 53     2841         .ascii     "SPACES"
      000E7A                       2842 SPACS:
      000E7A CD 0B 24         [ 4] 2843         CALL     ZERO
      000E7D CD 08 D6         [ 4] 2844         CALL     MAX
      000E80 CD 05 67         [ 4] 2845         CALL     TOR
      000E83 20 03            [ 2] 2846         JRA      CHAR2
      000E85 CD 0E 6B         [ 4] 2847 CHAR1:  CALL     SPACE
      000E88 CD 04 8D         [ 4] 2848 CHAR2:  CALL     DONXT
      000E8B 0E 85                 2849         .word    CHAR1
      000E8D 81               [ 4] 2850         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2851 
                                   2852 ;       TYPE    ( b u -- )
                                   2853 ;       Output u characters from b.
      000E8E 0E 73                 2854         .word      LINK
                           000E90  2855 LINK = . 
      000E90 04                    2856         .byte      4
      000E91 54 59 50 45           2857         .ascii     "TYPE"
      000E95                       2858 TYPES:
      000E95 CD 05 67         [ 4] 2859         CALL     TOR
      000E98 20 0C            [ 2] 2860         JRA     TYPE2
      000E9A CD 05 9E         [ 4] 2861 TYPE1:  CALL     DUPP
      000E9D CD 05 15         [ 4] 2862         CALL     CAT
      000EA0 CD 04 38         [ 4] 2863         CALL     EMIT
      000EA3 CD 0A B8         [ 4] 2864         CALL     ONEP
      000EA6 CD 04 8D         [ 4] 2865 TYPE2:  CALL     DONXT
      000EA9 0E 9A                 2866         .word      TYPE1
      000EAB CC 05 94         [ 2] 2867         JP     DROP
                                   2868 
                                   2869 ;       CR      ( -- )
                                   2870 ;       Output a carriage return
                                   2871 ;       and a line feed.
      000EAE 0E 90                 2872         .word      LINK
                           000EB0  2873 LINK = . 
      000EB0 02                    2874         .byte      2
      000EB1 43 52                 2875         .ascii     "CR"
      000EB3                       2876 CR:
      000EB3 CD 04 79         [ 4] 2877         CALL     DOLIT
      000EB6 00 0D                 2878         .word      CRR
      000EB8 CD 04 38         [ 4] 2879         CALL     EMIT
      000EBB CD 04 79         [ 4] 2880         CALL     DOLIT
      000EBE 00 0A                 2881         .word      LF
      000EC0 CC 04 38         [ 2] 2882         JP     EMIT
                                   2883 
                                   2884 ;       do$     ( -- a )
                                   2885 ;       Return  address of a compiled
                                   2886 ;       string.
      000EC3 0E B0                 2887         .word      LINK
                           000EC5  2888 LINK = . 
      000EC5 43                    2889 	.byte      COMPO+3
      000EC6 44 4F 24              2890         .ascii     "DO$"
      000EC9                       2891 DOSTR:
      000EC9 CD 05 48         [ 4] 2892         CALL     RFROM
      000ECC CD 05 5B         [ 4] 2893         CALL     RAT
      000ECF CD 05 48         [ 4] 2894         CALL     RFROM
      000ED2 CD 0B FB         [ 4] 2895         CALL     COUNT
      000ED5 CD 07 BA         [ 4] 2896         CALL     PLUS
      000ED8 CD 05 67         [ 4] 2897         CALL     TOR
      000EDB CD 05 AE         [ 4] 2898         CALL     SWAPP
      000EDE CD 05 67         [ 4] 2899         CALL     TOR
      000EE1 81               [ 4] 2900         RET
                                   2901 
                                   2902 ;       $"|     ( -- a )
                                   2903 ;       Run time routine compiled by $".
                                   2904 ;       Return address of a compiled string.
      000EE2 0E C5                 2905         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           000EE4  2906 LINK = . 
      000EE4 43                    2907 	.byte      COMPO+3
      000EE5 24 22 7C              2908         .byte     '$','"','|'
      000EE8                       2909 STRQP:
      000EE8 CD 0E C9         [ 4] 2910         CALL     DOSTR
      000EEB 81               [ 4] 2911         RET
                                   2912 
                                   2913 ;       ."|     ( -- )
                                   2914 ;       Run time routine of ." .
                                   2915 ;       Output a compiled string.
      000EEC 0E E4                 2916         .word      LINK
                           000EEE  2917 LINK = . 
      000EEE 43                    2918 	.byte      COMPO+3
      000EEF 2E 22 7C              2919         .byte     '.','"','|'
      000EF2                       2920 DOTQP:
      000EF2 CD 0E C9         [ 4] 2921         CALL     DOSTR
      000EF5 CD 0B FB         [ 4] 2922         CALL     COUNT
      000EF8 CC 0E 95         [ 2] 2923         JP     TYPES
                                   2924 
                                   2925 ;       .R      ( n +n -- )
                                   2926 ;       Display an integer in a field
                                   2927 ;       of n columns, right justified.
      000EFB 0E EE                 2928         .word      LINK
                           000EFD  2929 LINK = . 
      000EFD 02                    2930         .byte      2
      000EFE 2E 52                 2931         .ascii     ".R"
      000F00                       2932 DOTR:
      000F00 CD 05 67         [ 4] 2933         CALL     TOR
      000F03 CD 0D AC         [ 4] 2934         CALL     STR
      000F06 CD 05 48         [ 4] 2935         CALL     RFROM
      000F09 CD 05 C8         [ 4] 2936         CALL     OVER
      000F0C CD 08 33         [ 4] 2937         CALL     SUBB
      000F0F CD 0E 7A         [ 4] 2938         CALL     SPACS
      000F12 CC 0E 95         [ 2] 2939         JP     TYPES
                                   2940 
                                   2941 ;       U.R     ( u +n -- )
                                   2942 ;       Display an unsigned integer
                                   2943 ;       in n column, right justified.
      000F15 0E FD                 2944         .word      LINK
                           000F17  2945 LINK = . 
      000F17 03                    2946         .byte      3
      000F18 55 2E 52              2947         .ascii     "U.R"
      000F1B                       2948 UDOTR:
      000F1B CD 05 67         [ 4] 2949         CALL     TOR
      000F1E CD 0D 2F         [ 4] 2950         CALL     BDIGS
      000F21 CD 0D 69         [ 4] 2951         CALL     DIGS
      000F24 CD 0D 94         [ 4] 2952         CALL     EDIGS
      000F27 CD 05 48         [ 4] 2953         CALL     RFROM
      000F2A CD 05 C8         [ 4] 2954         CALL     OVER
      000F2D CD 08 33         [ 4] 2955         CALL     SUBB
      000F30 CD 0E 7A         [ 4] 2956         CALL     SPACS
      000F33 CC 0E 95         [ 2] 2957         JP     TYPES
                                   2958 
                                   2959 ;       U.      ( u -- )
                                   2960 ;       Display an unsigned integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2961 ;       in free format.
      000F36 0F 17                 2962         .word      LINK
                           000F38  2963 LINK = . 
      000F38 02                    2964         .byte      2
      000F39 55 2E                 2965         .ascii     "U."
      000F3B                       2966 UDOT:
      000F3B CD 0D 2F         [ 4] 2967         CALL     BDIGS
      000F3E CD 0D 69         [ 4] 2968         CALL     DIGS
      000F41 CD 0D 94         [ 4] 2969         CALL     EDIGS
      000F44 CD 0E 6B         [ 4] 2970         CALL     SPACE
      000F47 CC 0E 95         [ 2] 2971         JP     TYPES
                                   2972 
                                   2973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2974 ;   H. ( n -- )
                                   2975 ;   display n in hexadecimal 
                                   2976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4A                       2977         _HEADER HDOT,2,"H."
      000F4A 0F 38                    1         .word LINK 
                           000F4C     2         LINK=.
      000F4C 02                       3         .byte 2  
      000F4D 48 2E                    4         .ascii "H."
      000F4F                          5         HDOT:
      000F4F CD 06 5B         [ 4] 2978         CALL BASE 
      000F52 CD 04 F7         [ 4] 2979         CALL AT 
      000F55 CD 05 67         [ 4] 2980         CALL TOR 
      000F58 CD 0D CA         [ 4] 2981         CALL HEX 
      000F5B CD 0F 3B         [ 4] 2982         CALL UDOT 
      000F5E CD 05 48         [ 4] 2983         CALL RFROM 
      000F61 CD 06 5B         [ 4] 2984         CALL BASE 
      000F64 CD 04 E0         [ 4] 2985         CALL STORE 
      000F67 81               [ 4] 2986         RET 
                                   2987 
                                   2988 
                                   2989 ;       .       ( w -- )
                                   2990 ;       Display an integer in free
                                   2991 ;       format, preceeded by a space.
      000F68 0F 4C                 2992         .word      LINK
                           000F6A  2993 LINK = . 
      000F6A 01                    2994         .byte      1
      000F6B 2E                    2995         .ascii     "."
      000F6C                       2996 DOT:
      000F6C CD 06 5B         [ 4] 2997         CALL     BASE
      000F6F CD 04 F7         [ 4] 2998         CALL     AT
      000F72 CD 04 79         [ 4] 2999         CALL     DOLIT
      000F75 00 0A                 3000         .word      10
      000F77 CD 06 13         [ 4] 3001         CALL     XORR    ;?decimal
      000F7A CD 04 AC         [ 4] 3002         CALL     QBRAN
      000F7D 0F 82                 3003         .word      DOT1
      000F7F CC 0F 3B         [ 2] 3004         JP     UDOT
      000F82 CD 0D AC         [ 4] 3005 DOT1:   CALL     STR
      000F85 CD 0E 6B         [ 4] 3006         CALL     SPACE
      000F88 CC 0E 95         [ 2] 3007         JP     TYPES
                                   3008 
                                   3009 ;       ?       ( a -- )
                                   3010 ;       Display contents in memory cell.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000F8B 0F 6A                 3011         .word      LINK
                                   3012         
                           000F8D  3013 LINK = . 
      000F8D 01                    3014         .byte      1
      000F8E 3F                    3015         .ascii     "?"
      000F8F                       3016 QUEST:
      000F8F CD 04 F7         [ 4] 3017         CALL     AT
      000F92 CC 0F 6C         [ 2] 3018         JP     DOT
                                   3019 
                                   3020 ;; Parsing
                                   3021 
                                   3022 ;       parse   ( b u c -- b u delta ; <string> )
                                   3023 ;       Scan string delimited by c.
                                   3024 ;       Return found string and its offset.
      000F95 0F 8D                 3025         .word      LINK
                           000F97  3026 LINK = . 
      000F97 05                    3027         .byte      5
      000F98 70 61 72 73 65        3028         .ascii     "parse"
      000F9D                       3029 PARS:
      000F9D CD 06 6A         [ 4] 3030         CALL     TEMP
      000FA0 CD 04 E0         [ 4] 3031         CALL     STORE
      000FA3 CD 05 C8         [ 4] 3032         CALL     OVER
      000FA6 CD 05 67         [ 4] 3033         CALL     TOR
      000FA9 CD 05 9E         [ 4] 3034         CALL     DUPP
      000FAC CD 04 AC         [ 4] 3035         CALL     QBRAN
      000FAF 10 55                 3036         .word    PARS8
      000FB1 CD 0A C5         [ 4] 3037         CALL     ONEM
      000FB4 CD 06 6A         [ 4] 3038         CALL     TEMP
      000FB7 CD 04 F7         [ 4] 3039         CALL     AT
      000FBA CD 0B 17         [ 4] 3040         CALL     BLANK
      000FBD CD 08 5B         [ 4] 3041         CALL     EQUAL
      000FC0 CD 04 AC         [ 4] 3042         CALL     QBRAN
      000FC3 0F F6                 3043         .word      PARS3
      000FC5 CD 05 67         [ 4] 3044         CALL     TOR
      000FC8 CD 0B 17         [ 4] 3045 PARS1:  CALL     BLANK
      000FCB CD 05 C8         [ 4] 3046         CALL     OVER
      000FCE CD 05 15         [ 4] 3047         CALL     CAT     ;skip leading blanks ONLY
      000FD1 CD 08 33         [ 4] 3048         CALL     SUBB
      000FD4 CD 05 D7         [ 4] 3049         CALL     ZLESS
      000FD7 CD 07 D4         [ 4] 3050         CALL     INVER
      000FDA CD 04 AC         [ 4] 3051         CALL     QBRAN
      000FDD 0F F3                 3052         .word      PARS2
      000FDF CD 0A B8         [ 4] 3053         CALL     ONEP
      000FE2 CD 04 8D         [ 4] 3054         CALL     DONXT
      000FE5 0F C8                 3055         .word      PARS1
      000FE7 CD 05 48         [ 4] 3056         CALL     RFROM
      000FEA CD 05 94         [ 4] 3057         CALL     DROP
      000FED CD 0B 24         [ 4] 3058         CALL     ZERO
      000FF0 CC 05 9E         [ 2] 3059         JP     DUPP
      000FF3 CD 05 48         [ 4] 3060 PARS2:  CALL     RFROM
      000FF6 CD 05 C8         [ 4] 3061 PARS3:  CALL     OVER
      000FF9 CD 05 AE         [ 4] 3062         CALL     SWAPP
      000FFC CD 05 67         [ 4] 3063         CALL     TOR
      000FFF CD 06 6A         [ 4] 3064 PARS4:  CALL     TEMP
      001002 CD 04 F7         [ 4] 3065         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001005 CD 05 C8         [ 4] 3066         CALL     OVER
      001008 CD 05 15         [ 4] 3067         CALL     CAT
      00100B CD 08 33         [ 4] 3068         CALL     SUBB    ;scan for delimiter
      00100E CD 06 6A         [ 4] 3069         CALL     TEMP
      001011 CD 04 F7         [ 4] 3070         CALL     AT
      001014 CD 0B 17         [ 4] 3071         CALL     BLANK
      001017 CD 08 5B         [ 4] 3072         CALL     EQUAL
      00101A CD 04 AC         [ 4] 3073         CALL     QBRAN
      00101D 10 22                 3074         .word      PARS5
      00101F CD 05 D7         [ 4] 3075         CALL     ZLESS
      001022 CD 04 AC         [ 4] 3076 PARS5:  CALL     QBRAN
      001025 10 37                 3077         .word      PARS6
      001027 CD 0A B8         [ 4] 3078         CALL     ONEP
      00102A CD 04 8D         [ 4] 3079         CALL     DONXT
      00102D 0F FF                 3080         .word      PARS4
      00102F CD 05 9E         [ 4] 3081         CALL     DUPP
      001032 CD 05 67         [ 4] 3082         CALL     TOR
      001035 20 0F            [ 2] 3083         JRA     PARS7
      001037 CD 05 48         [ 4] 3084 PARS6:  CALL     RFROM
      00103A CD 05 94         [ 4] 3085         CALL     DROP
      00103D CD 05 9E         [ 4] 3086         CALL     DUPP
      001040 CD 0A B8         [ 4] 3087         CALL     ONEP
      001043 CD 05 67         [ 4] 3088         CALL     TOR
      001046 CD 05 C8         [ 4] 3089 PARS7:  CALL     OVER
      001049 CD 08 33         [ 4] 3090         CALL     SUBB
      00104C CD 05 48         [ 4] 3091         CALL     RFROM
      00104F CD 05 48         [ 4] 3092         CALL     RFROM
      001052 CC 08 33         [ 2] 3093         JP     SUBB
      001055 CD 05 C8         [ 4] 3094 PARS8:  CALL     OVER
      001058 CD 05 48         [ 4] 3095         CALL     RFROM
      00105B CC 08 33         [ 2] 3096         JP     SUBB
                                   3097 
                                   3098 ;       PARSE   ( c -- b u ; <string> )
                                   3099 ;       Scan input stream and return
                                   3100 ;       counted string delimited by c.
      00105E 0F 97                 3101         .word      LINK
                           001060  3102 LINK = . 
      001060 05                    3103         .byte      5
      001061 50 41 52 53 45        3104         .ascii     "PARSE"
      001066                       3105 PARSE:
      001066 CD 05 67         [ 4] 3106         CALL     TOR
      001069 CD 0C 34         [ 4] 3107         CALL     TIB
      00106C CD 06 79         [ 4] 3108         CALL     INN
      00106F CD 04 F7         [ 4] 3109         CALL     AT
      001072 CD 07 BA         [ 4] 3110         CALL     PLUS    ;current input buffer pointer
      001075 CD 06 89         [ 4] 3111         CALL     NTIB
      001078 CD 04 F7         [ 4] 3112         CALL     AT
      00107B CD 06 79         [ 4] 3113         CALL     INN
      00107E CD 04 F7         [ 4] 3114         CALL     AT
      001081 CD 08 33         [ 4] 3115         CALL     SUBB    ;remaining count
      001084 CD 05 48         [ 4] 3116         CALL     RFROM
      001087 CD 0F 9D         [ 4] 3117         CALL     PARS
      00108A CD 06 79         [ 4] 3118         CALL     INN
      00108D CC 0B 94         [ 2] 3119         JP     PSTOR
                                   3120 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3121 ;       .(      ( -- )
                                   3122 ;       Output following string up to next ) .
      001090 10 60                 3123         .word      LINK
                           001092  3124 LINK = . 
      001092 82                    3125 	.byte      IMEDD+2
      001093 2E 28                 3126         .ascii     ".("
      001095                       3127 DOTPR:
      001095 CD 04 79         [ 4] 3128         CALL     DOLIT
      001098 00 29                 3129         .word     41	; ")"
      00109A CD 10 66         [ 4] 3130         CALL     PARSE
      00109D CC 0E 95         [ 2] 3131         JP     TYPES
                                   3132 
                                   3133 ;       (       ( -- )
                                   3134 ;       Ignore following string up to next ).
                                   3135 ;       A comment.
      0010A0 10 92                 3136         .word      LINK
                           0010A2  3137 LINK = . 
      0010A2 81                    3138 	.byte      IMEDD+1
      0010A3 28                    3139         .ascii     "("
      0010A4                       3140 PAREN:
      0010A4 CD 04 79         [ 4] 3141         CALL     DOLIT
      0010A7 00 29                 3142         .word     41	; ")"
      0010A9 CD 10 66         [ 4] 3143         CALL     PARSE
      0010AC CC 07 9A         [ 2] 3144         JP     DDROP
                                   3145 
                                   3146 ;       \       ( -- )
                                   3147 ;       Ignore following text till
                                   3148 ;       end of line.
      0010AF 10 A2                 3149         .word      LINK
                           0010B1  3150 LINK = . 
      0010B1 81                    3151 	.byte      IMEDD+1
      0010B2 5C                    3152         .ascii     "\"
      0010B3                       3153 BKSLA:
      0010B3 90 AE 00 10      [ 2] 3154         ldw y,#UCTIB ; #TIB  
      0010B7 90 FE            [ 2] 3155         ldw y,(y)
      0010B9 90 89            [ 2] 3156         pushw y ; count in TIB 
      0010BB 90 AE 00 0E      [ 2] 3157         ldw y,#UINN ; >IN 
      0010BF 90 BF 28         [ 2] 3158         ldw YTEMP,y
      0010C2 90 85            [ 2] 3159         popw y 
      0010C4 91 CF 28         [ 5] 3160         ldw [YTEMP],y
      0010C7 81               [ 4] 3161         ret 
                                   3162 
                                   3163 ;       WORD    ( c -- a ; <string> )
                                   3164 ;       Parse a word from input stream
                                   3165 ;       and copy it to code dictionary.
      0010C8 10 B1                 3166         .word      LINK
                           0010CA  3167 LINK = . 
      0010CA 04                    3168         .byte      4
      0010CB 57 4F 52 44           3169         .ascii     "WORD"
      0010CF                       3170 WORDD:
      0010CF CD 10 66         [ 4] 3171         CALL     PARSE
      0010D2 CD 0C 12         [ 4] 3172         CALL     HERE
      0010D5 CD 0A 8D         [ 4] 3173         CALL     CELLP
                           000000  3174 .IF CASE_SENSE 
                                   3175         JP      PACKS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           000001  3176 .ELSE                 
      0010D8 CD 0C D2         [ 4] 3177         CALL     PACKS
                                   3178 ; uppercase TOKEN 
      0010DB CD 05 9E         [ 4] 3179         CALL    DUPP 
      0010DE CD 0B FB         [ 4] 3180         CALL    COUNT 
      0010E1 CD 05 67         [ 4] 3181         CALL    TOR 
      0010E4 CD 04 C3         [ 4] 3182         CALL    BRAN 
      0010E7 11 15                 3183         .word   UPPER2  
      0010E9                       3184 UPPER:
      0010E9 CD 05 9E         [ 4] 3185         CALL    DUPP 
      0010EC CD 05 15         [ 4] 3186         CALL    CAT
      0010EF CD 05 9E         [ 4] 3187         CALL    DUPP 
      0010F2 CD 04 79         [ 4] 3188         CALL   DOLIT
      0010F5 00 61                 3189         .word   'a' 
      0010F7 CD 04 79         [ 4] 3190         CALL    DOLIT
      0010FA 00 7B                 3191         .word   'z'+1 
      0010FC CD 09 13         [ 4] 3192         CALL   WITHI 
      0010FF CD 04 AC         [ 4] 3193         CALL   QBRAN
      001102 11 0C                 3194         .word  UPPER1  
      001104 CD 04 79         [ 4] 3195         CALL    DOLIT 
      001107 00 DF                 3196         .word   0xDF 
      001109 CD 05 EA         [ 4] 3197         CALL    ANDD 
      00110C                       3198 UPPER1:
      00110C CD 05 C8         [ 4] 3199         CALL    OVER 
      00110F CD 05 04         [ 4] 3200         CALL    CSTOR          
      001112 CD 0A B8         [ 4] 3201         CALL    ONEP 
      001115                       3202 UPPER2: 
      001115 CD 04 8D         [ 4] 3203         CALL    DONXT
      001118 10 E9                 3204         .word   UPPER  
      00111A CD 05 94         [ 4] 3205         CALL    DROP  
      00111D 81               [ 4] 3206         RET 
                                   3207 .ENDIF 
                                   3208 
                                   3209 ;       TOKEN   ( -- a ; <string> )
                                   3210 ;       Parse a word from input stream
                                   3211 ;       and copy it to name dictionary.
      00111E 10 CA                 3212         .word      LINK
                           001120  3213 LINK = . 
      001120 05                    3214         .byte      5
      001121 54 4F 4B 45 4E        3215         .ascii     "TOKEN"
      001126                       3216 TOKEN:
      001126 CD 0B 17         [ 4] 3217         CALL     BLANK
      001129 CC 10 CF         [ 2] 3218         JP     WORDD
                                   3219 
                                   3220 ;; Dictionary search
                                   3221 
                                   3222 ;       NAME>   ( na -- ca )
                                   3223 ;       Return a code address given
                                   3224 ;       a name address.
      00112C 11 20                 3225         .word      LINK
                           00112E  3226 LINK = . 
      00112E 05                    3227         .byte      5
      00112F 4E 41 4D 45 3E        3228         .ascii     "NAME>"
      001134                       3229 NAMET:
      001134 CD 0B FB         [ 4] 3230         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001137 CD 04 79         [ 4] 3231         CALL     DOLIT
      00113A 00 1F                 3232         .word      31
      00113C CD 05 EA         [ 4] 3233         CALL     ANDD
      00113F CC 07 BA         [ 2] 3234         JP     PLUS
                                   3235 
                                   3236 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3237 ;       Compare u cells in two
                                   3238 ;       strings. Return 0 if identical.
      001142 11 2E                 3239         .word      LINK
                           001144  3240 LINK = . 
      001144 05                    3241         .byte       5
      001145 53 41 4D 45 3F        3242         .ascii     "SAME?"
      00114A                       3243 SAMEQ:
      00114A CD 0A C5         [ 4] 3244         CALL     ONEM
      00114D CD 05 67         [ 4] 3245         CALL     TOR
      001150 20 29            [ 2] 3246         JRA     SAME2
      001152 CD 05 C8         [ 4] 3247 SAME1:  CALL     OVER
      001155 CD 05 5B         [ 4] 3248         CALL     RAT
      001158 CD 07 BA         [ 4] 3249         CALL     PLUS
      00115B CD 05 15         [ 4] 3250         CALL     CAT
      00115E CD 05 C8         [ 4] 3251         CALL     OVER
      001161 CD 05 5B         [ 4] 3252         CALL     RAT
      001164 CD 07 BA         [ 4] 3253         CALL     PLUS
      001167 CD 05 15         [ 4] 3254         CALL     CAT
      00116A CD 08 33         [ 4] 3255         CALL     SUBB
      00116D CD 07 48         [ 4] 3256         CALL     QDUP
      001170 CD 04 AC         [ 4] 3257         CALL     QBRAN
      001173 11 7B                 3258         .word      SAME2
      001175 CD 05 48         [ 4] 3259         CALL     RFROM
      001178 CC 05 94         [ 2] 3260         JP     DROP
      00117B CD 04 8D         [ 4] 3261 SAME2:  CALL     DONXT
      00117E 11 52                 3262         .word      SAME1
      001180 CC 0B 24         [ 2] 3263         JP     ZERO
                                   3264 
                                   3265 ;       find    ( a va -- ca na | a F )
                                   3266 ;       Search vocabulary for string.
                                   3267 ;       Return ca and na if succeeded.
      001183 11 44                 3268         .word      LINK
                           001185  3269 LINK = . 
      001185 04                    3270         .byte      4
      001186 46 49 4E 44           3271         .ascii     "FIND"
      00118A                       3272 FIND:
      00118A CD 05 AE         [ 4] 3273         CALL     SWAPP
      00118D CD 05 9E         [ 4] 3274         CALL     DUPP
      001190 CD 05 15         [ 4] 3275         CALL     CAT
      001193 CD 06 6A         [ 4] 3276         CALL     TEMP
      001196 CD 04 E0         [ 4] 3277         CALL     STORE
      001199 CD 05 9E         [ 4] 3278         CALL     DUPP
      00119C CD 04 F7         [ 4] 3279         CALL     AT
      00119F CD 05 67         [ 4] 3280         CALL     TOR
      0011A2 CD 0A 8D         [ 4] 3281         CALL     CELLP
      0011A5 CD 05 AE         [ 4] 3282         CALL     SWAPP
      0011A8 CD 04 F7         [ 4] 3283 FIND1:  CALL     AT
      0011AB CD 05 9E         [ 4] 3284         CALL     DUPP
      0011AE CD 04 AC         [ 4] 3285         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011B1 11 E7                 3286         .word      FIND6
      0011B3 CD 05 9E         [ 4] 3287         CALL     DUPP
      0011B6 CD 04 F7         [ 4] 3288         CALL     AT
      0011B9 CD 04 79         [ 4] 3289         CALL     DOLIT
      0011BC 1F 7F                 3290         .word      MASKK
      0011BE CD 05 EA         [ 4] 3291         CALL     ANDD
      0011C1 CD 05 5B         [ 4] 3292         CALL     RAT
      0011C4 CD 06 13         [ 4] 3293         CALL     XORR
      0011C7 CD 04 AC         [ 4] 3294         CALL     QBRAN
      0011CA 11 D6                 3295         .word      FIND2
      0011CC CD 0A 8D         [ 4] 3296         CALL     CELLP
      0011CF CD 04 79         [ 4] 3297         CALL     DOLIT
      0011D2 FF FF                 3298         .word     0xFFFF
      0011D4 20 0C            [ 2] 3299         JRA     FIND3
      0011D6 CD 0A 8D         [ 4] 3300 FIND2:  CALL     CELLP
      0011D9 CD 06 6A         [ 4] 3301         CALL     TEMP
      0011DC CD 04 F7         [ 4] 3302         CALL     AT
      0011DF CD 11 4A         [ 4] 3303         CALL     SAMEQ
      0011E2 CD 04 C3         [ 4] 3304 FIND3:  CALL     BRAN
      0011E5 11 F6                 3305         .word      FIND4
      0011E7 CD 05 48         [ 4] 3306 FIND6:  CALL     RFROM
      0011EA CD 05 94         [ 4] 3307         CALL     DROP
      0011ED CD 05 AE         [ 4] 3308         CALL     SWAPP
      0011F0 CD 0A 9C         [ 4] 3309         CALL     CELLM
      0011F3 CC 05 AE         [ 2] 3310         JP     SWAPP
      0011F6 CD 04 AC         [ 4] 3311 FIND4:  CALL     QBRAN
      0011F9 12 03                 3312         .word      FIND5
      0011FB CD 0A 9C         [ 4] 3313         CALL     CELLM
      0011FE CD 0A 9C         [ 4] 3314         CALL     CELLM
      001201 20 A5            [ 2] 3315         JRA     FIND1
      001203 CD 05 48         [ 4] 3316 FIND5:  CALL     RFROM
      001206 CD 05 94         [ 4] 3317         CALL     DROP
      001209 CD 05 AE         [ 4] 3318         CALL     SWAPP
      00120C CD 05 94         [ 4] 3319         CALL     DROP
      00120F CD 0A 9C         [ 4] 3320         CALL     CELLM
      001212 CD 05 9E         [ 4] 3321         CALL     DUPP
      001215 CD 11 34         [ 4] 3322         CALL     NAMET
      001218 CC 05 AE         [ 2] 3323         JP     SWAPP
                                   3324 
                                   3325 ;       NAME?   ( a -- ca na | a F )
                                   3326 ;       Search vocabularies for a string.
      00121B 11 85                 3327         .word      LINK
                           00121D  3328 LINK = . 
      00121D 05                    3329         .byte      5
      00121E 4E 41 4D 45 3F        3330         .ascii     "NAME?"
      001223                       3331 NAMEQ:
      001223 CD 06 DE         [ 4] 3332         CALL   CNTXT
      001226 CC 11 8A         [ 2] 3333         JP     FIND
                                   3334 
                                   3335 ;; Terminal response
                                   3336 
                                   3337 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3338 ;       Backup cursor by one character.
      001229 12 1D                 3339         .word      LINK
                           00122B  3340 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00122B 02                    3341         .byte      2
      00122C 5E 48                 3342         .ascii     "^H"
      00122E                       3343 BKSP:
      00122E CD 05 67         [ 4] 3344         CALL     TOR
      001231 CD 05 C8         [ 4] 3345         CALL     OVER
      001234 CD 05 48         [ 4] 3346         CALL     RFROM
      001237 CD 05 AE         [ 4] 3347         CALL     SWAPP
      00123A CD 05 C8         [ 4] 3348         CALL     OVER
      00123D CD 06 13         [ 4] 3349         CALL     XORR
      001240 CD 04 AC         [ 4] 3350         CALL     QBRAN
      001243 12 5E                 3351         .word      BACK1
      001245 CD 04 79         [ 4] 3352         CALL     DOLIT
      001248 00 08                 3353         .word      BKSPP
      00124A CD 04 38         [ 4] 3354         CALL     EMIT
      00124D CD 0A C5         [ 4] 3355         CALL     ONEM
      001250 CD 0B 17         [ 4] 3356         CALL     BLANK
      001253 CD 04 38         [ 4] 3357         CALL     EMIT
      001256 CD 04 79         [ 4] 3358         CALL     DOLIT
      001259 00 08                 3359         .word      BKSPP
      00125B CC 04 38         [ 2] 3360         JP     EMIT
      00125E 81               [ 4] 3361 BACK1:  RET
                                   3362 
                                   3363 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3364 ;       Accept and echo key stroke
                                   3365 ;       and bump cursor.
      00125F 12 2B                 3366         .word      LINK
                           001261  3367 LINK = . 
      001261 03                    3368         .byte      3
      001262 54 41 50              3369         .ascii     "TAP"
      001265                       3370 TAP:
      001265 CD 05 9E         [ 4] 3371         CALL     DUPP
      001268 CD 04 38         [ 4] 3372         CALL     EMIT
      00126B CD 05 C8         [ 4] 3373         CALL     OVER
      00126E CD 05 04         [ 4] 3374         CALL     CSTOR
      001271 CC 0A B8         [ 2] 3375         JP     ONEP
                                   3376 
                                   3377 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3378 ;       Process a key stroke,
                                   3379 ;       CR,LF or backspace.
      001274 12 61                 3380         .word      LINK
                           001276  3381 LINK = . 
      001276 04                    3382         .byte      4
      001277 4B 54 41 50           3383         .ascii     "KTAP"
      00127B                       3384 KTAP:
      00127B CD 05 9E         [ 4] 3385         CALL     DUPP
      00127E CD 04 79         [ 4] 3386         CALL     DOLIT
                           000001  3387 .if EOL_CR
      001281 00 0D                 3388         .word   CRR
                           000000  3389 .else ; EOL_LF 
                                   3390         .word   LF
                                   3391 .endif 
      001283 CD 06 13         [ 4] 3392         CALL     XORR
      001286 CD 04 AC         [ 4] 3393         CALL     QBRAN
      001289 12 A1                 3394         .word      KTAP2
      00128B CD 04 79         [ 4] 3395         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00128E 00 08                 3396         .word      BKSPP
      001290 CD 06 13         [ 4] 3397         CALL     XORR
      001293 CD 04 AC         [ 4] 3398         CALL     QBRAN
      001296 12 9E                 3399         .word      KTAP1
      001298 CD 0B 17         [ 4] 3400         CALL     BLANK
      00129B CC 12 65         [ 2] 3401         JP     TAP
      00129E CC 12 2E         [ 2] 3402 KTAP1:  JP     BKSP
      0012A1 CD 05 94         [ 4] 3403 KTAP2:  CALL     DROP
      0012A4 CD 05 AE         [ 4] 3404         CALL     SWAPP
      0012A7 CD 05 94         [ 4] 3405         CALL     DROP
      0012AA CC 05 9E         [ 2] 3406         JP     DUPP
                                   3407 
                                   3408 ;       accept  ( b u -- b u )
                                   3409 ;       Accept characters to input
                                   3410 ;       buffer. Return with actual count.
      0012AD 12 76                 3411         .word      LINK
                           0012AF  3412 LINK = . 
      0012AF 06                    3413         .byte      6
      0012B0 41 43 43 45 50 54     3414         .ascii     "ACCEPT"
      0012B6                       3415 ACCEP:
      0012B6 CD 05 C8         [ 4] 3416         CALL     OVER
      0012B9 CD 07 BA         [ 4] 3417         CALL     PLUS
      0012BC CD 05 C8         [ 4] 3418         CALL     OVER
      0012BF CD 07 A5         [ 4] 3419 ACCP1:  CALL     DDUP
      0012C2 CD 06 13         [ 4] 3420         CALL     XORR
      0012C5 CD 04 AC         [ 4] 3421         CALL     QBRAN
      0012C8 12 EA                 3422         .word      ACCP4
      0012CA CD 0E 33         [ 4] 3423         CALL     KEY
      0012CD CD 05 9E         [ 4] 3424         CALL     DUPP
      0012D0 CD 0B 17         [ 4] 3425         CALL     BLANK
      0012D3 CD 04 79         [ 4] 3426         CALL     DOLIT
      0012D6 00 7F                 3427         .word      127
      0012D8 CD 09 13         [ 4] 3428         CALL     WITHI
      0012DB CD 04 AC         [ 4] 3429         CALL     QBRAN
      0012DE 12 E5                 3430         .word      ACCP2
      0012E0 CD 12 65         [ 4] 3431         CALL     TAP
      0012E3 20 03            [ 2] 3432         JRA     ACCP3
      0012E5 CD 12 7B         [ 4] 3433 ACCP2:  CALL     KTAP
      0012E8 20 D5            [ 2] 3434 ACCP3:  JRA     ACCP1
      0012EA CD 05 94         [ 4] 3435 ACCP4:  CALL     DROP
      0012ED CD 05 C8         [ 4] 3436         CALL     OVER
      0012F0 CC 08 33         [ 2] 3437         JP     SUBB
                                   3438 
                                   3439 ;       QUERY   ( -- )
                                   3440 ;       Accept input stream to
                                   3441 ;       terminal input buffer.
      0012F3 12 AF                 3442         .word      LINK
                                   3443         
                           0012F5  3444 LINK = . 
      0012F5 05                    3445         .byte      5
      0012F6 51 55 45 52 59        3446         .ascii     "QUERY"
      0012FB                       3447 QUERY:
      0012FB CD 0C 34         [ 4] 3448         CALL     TIB
      0012FE CD 04 79         [ 4] 3449         CALL     DOLIT
      001301 00 50                 3450         .word      80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001303 CD 12 B6         [ 4] 3451         CALL     ACCEP
      001306 CD 06 89         [ 4] 3452         CALL     NTIB
      001309 CD 04 E0         [ 4] 3453         CALL     STORE
      00130C CD 05 94         [ 4] 3454         CALL     DROP
      00130F CD 0B 24         [ 4] 3455         CALL     ZERO
      001312 CD 06 79         [ 4] 3456         CALL     INN
      001315 CC 04 E0         [ 2] 3457         JP     STORE
                                   3458 
                                   3459 ;       ABORT   ( -- )
                                   3460 ;       Reset data stack and
                                   3461 ;       jump to QUIT.
      001318 12 F5                 3462         .word      LINK
                           00131A  3463 LINK = . 
      00131A 05                    3464         .byte      5
      00131B 41 42 4F 52 54        3465         .ascii     "ABORT"
      001320                       3466 ABORT:
      001320 CD 14 17         [ 4] 3467         CALL     PRESE
      001323 CC 14 34         [ 2] 3468         JP     QUIT
                                   3469 
                                   3470 ;       abort"  ( f -- )
                                   3471 ;       Run time routine of ABORT".
                                   3472 ;       Abort with a message.
      001326 13 1A                 3473         .word      LINK
                           001328  3474 LINK = . 
      001328 46                    3475 	.byte      COMPO+6
      001329 41 42 4F 52 54        3476         .ascii     "ABORT"
      00132E 22                    3477         .byte      '"'
      00132F                       3478 ABORQ:
      00132F CD 04 AC         [ 4] 3479         CALL     QBRAN
      001332 13 4E                 3480         .word      ABOR2   ;text flag
      001334 CD 0E C9         [ 4] 3481         CALL     DOSTR
      001337 CD 0E 6B         [ 4] 3482 ABOR1:  CALL     SPACE
      00133A CD 0B FB         [ 4] 3483         CALL     COUNT
      00133D CD 0E 95         [ 4] 3484         CALL     TYPES
      001340 CD 04 79         [ 4] 3485         CALL     DOLIT
      001343 00 3F                 3486         .word     63 ; "?"
      001345 CD 04 38         [ 4] 3487         CALL     EMIT
      001348 CD 0E B3         [ 4] 3488         CALL     CR
      00134B CC 13 20         [ 2] 3489         JP     ABORT   ;pass error string
      00134E CD 0E C9         [ 4] 3490 ABOR2:  CALL     DOSTR
      001351 CC 05 94         [ 2] 3491         JP     DROP
                                   3492 
                                   3493 ;; The text interpreter
                                   3494 
                                   3495 ;       $INTERPRET      ( a -- )
                                   3496 ;       Interpret a word. If failed,
                                   3497 ;       try to convert it to an integer.
      001354 13 28                 3498         .word      LINK
                           001356  3499 LINK = . 
      001356 0A                    3500         .byte      10
      001357 24 49 4E 54 45 52 50  3501         .ascii     "$INTERPRET"
             52 45 54
      001361                       3502 INTER:
      001361 CD 12 23         [ 4] 3503         CALL     NAMEQ
      001364 CD 07 48         [ 4] 3504         CALL     QDUP    ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001367 CD 04 AC         [ 4] 3505         CALL     QBRAN
      00136A 13 8B                 3506         .word      INTE1
      00136C CD 04 F7         [ 4] 3507         CALL     AT
      00136F CD 04 79         [ 4] 3508         CALL     DOLIT
      001372 40 00                 3509 	.word       0x4000	; COMPO*256
      001374 CD 05 EA         [ 4] 3510         CALL     ANDD    ;?compile only lexicon bits
      001377 CD 13 2F         [ 4] 3511         CALL     ABORQ
      00137A 0D                    3512         .byte      13
      00137B 20 63 6F 6D 70 69 6C  3513         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001388 CC 04 D3         [ 2] 3514         JP     EXECU
      00138B CD 23 AA         [ 4] 3515 INTE1:  CALL     NUMBQ   ;convert a number
      00138E CD 04 AC         [ 4] 3516         CALL     QBRAN
      001391 13 37                 3517         .word    ABOR1
      001393 81               [ 4] 3518         RET
                                   3519 
                                   3520 ;       [       ( -- )
                                   3521 ;       Start  text interpreter.
      001394 13 56                 3522         .word      LINK
                           001396  3523 LINK = . 
      001396 81                    3524 	.byte      IMEDD+1
      001397 5B                    3525         .ascii     "["
      001398                       3526 LBRAC:
      001398 CD 04 79         [ 4] 3527         CALL   DOLIT
      00139B 13 61                 3528         .word  INTER
      00139D CD 06 BC         [ 4] 3529         CALL   TEVAL
      0013A0 CC 04 E0         [ 2] 3530         JP     STORE
                                   3531 
                                   3532 ;       .OK     ( -- )
                                   3533 ;       Display 'ok' while interpreting.
      0013A3 13 96                 3534         .word      LINK
                           0013A5  3535 LINK = . 
      0013A5 03                    3536         .byte      3
      0013A6 2E 4F 4B              3537         .ascii     ".OK"
      0013A9                       3538 DOTOK:
      0013A9 CD 04 79         [ 4] 3539         CALL     DOLIT
      0013AC 13 61                 3540         .word      INTER
      0013AE CD 06 BC         [ 4] 3541         CALL     TEVAL
      0013B1 CD 04 F7         [ 4] 3542         CALL     AT
      0013B4 CD 08 5B         [ 4] 3543         CALL     EQUAL
      0013B7 CD 04 AC         [ 4] 3544         CALL     QBRAN
      0013BA 13 C3                 3545         .word      DOTO1
      0013BC CD 0E F2         [ 4] 3546         CALL     DOTQP
      0013BF 03                    3547         .byte      3
      0013C0 20 6F 6B              3548         .ascii     " ok"
      0013C3 CC 0E B3         [ 2] 3549 DOTO1:  JP     CR
                                   3550 
                                   3551 ;       ?STACK  ( -- )
                                   3552 ;       Abort if stack underflows.
      0013C6 13 A5                 3553         .word      LINK
                           0013C8  3554 LINK = . 
      0013C8 06                    3555         .byte      6
      0013C9 3F 53 54 41 43 4B     3556         .ascii     "?STACK"
      0013CF                       3557 QSTAC: 
      0013CF CD 0B 66         [ 4] 3558         CALL     DEPTH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013D2 CD 05 D7         [ 4] 3559         CALL     ZLESS   ;check only for underflow
      0013D5 CD 13 2F         [ 4] 3560         CALL     ABORQ
      0013D8 0B                    3561         .byte      11
      0013D9 20 75 6E 64 65 72 66  3562         .ascii     " underflow "
             6C 6F 77 20
      0013E4 81               [ 4] 3563         RET
                                   3564 
                                   3565 ;       EVAL    ( -- )
                                   3566 ;       Interpret  input stream.
      0013E5 13 C8                 3567         .word      LINK
                           0013E7  3568 LINK = . 
      0013E7 04                    3569         .byte      4
      0013E8 45 56 41 4C           3570         .ascii     "EVAL"
      0013EC                       3571 EVAL:
      0013EC CD 11 26         [ 4] 3572 EVAL1:  CALL     TOKEN
      0013EF CD 05 9E         [ 4] 3573         CALL     DUPP
      0013F2 CD 05 15         [ 4] 3574         CALL     CAT     ;?input stream empty
      0013F5 CD 04 AC         [ 4] 3575         CALL     QBRAN
      0013F8 14 08                 3576         .word    EVAL2
      0013FA CD 06 BC         [ 4] 3577         CALL     TEVAL
      0013FD CD 0C 48         [ 4] 3578         CALL     ATEXE
      001400 CD 13 CF         [ 4] 3579         CALL     QSTAC   ;evaluate input, check stack
      001403 CD 04 C3         [ 4] 3580         CALL     BRAN
      001406 13 EC                 3581         .word    EVAL1
      001408 CD 05 94         [ 4] 3582 EVAL2:  CALL     DROP
      00140B CC 13 A9         [ 2] 3583         JP       DOTOK
                                   3584 
                                   3585 ;       PRESET  ( -- )
                                   3586 ;       Reset data stack pointer and
                                   3587 ;       terminal input buffer.
      00140E 13 E7                 3588         .word      LINK
                           001410  3589 LINK = . 
      001410 06                    3590         .byte      6
      001411 50 52 45 53 45 54     3591         .ascii     "PRESET"
      001417                       3592 PRESE:
      001417 CD 04 79         [ 4] 3593         CALL     DOLIT
      00141A 16 80                 3594         .word      SPP
      00141C CD 05 8B         [ 4] 3595         CALL     SPSTO
      00141F CD 04 79         [ 4] 3596         CALL     DOLIT
      001422 17 00                 3597         .word      TIBB
      001424 CD 06 89         [ 4] 3598         CALL     NTIB
      001427 CD 0A 8D         [ 4] 3599         CALL     CELLP
      00142A CC 04 E0         [ 2] 3600         JP     STORE
                                   3601 
                                   3602 ;       QUIT    ( -- )
                                   3603 ;       Reset return stack pointer
                                   3604 ;       and start text interpreter.
      00142D 14 10                 3605         .word      LINK
                           00142F  3606 LINK = . 
      00142F 04                    3607         .byte      4
      001430 51 55 49 54           3608         .ascii     "QUIT"
      001434                       3609 QUIT:
      001434 CD 04 79         [ 4] 3610         CALL     DOLIT
      001437 17 FF                 3611         .word      RPP
      001439 CD 05 32         [ 4] 3612         CALL     RPSTO   ;reset return stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00143C CD 13 98         [ 4] 3613 QUIT1:  CALL     LBRAC   ;start interpretation
      00143F CD 12 FB         [ 4] 3614 QUIT2:  CALL     QUERY   ;get input
      001442 CD 13 EC         [ 4] 3615         CALL     EVAL
      001445 20 F8            [ 2] 3616         JRA     QUIT2   ;continue till error
                                   3617 
                                   3618 ;; The compiler
                                   3619 
                                   3620 ;       '       ( -- ca )
                                   3621 ;       Search vocabularies for
                                   3622 ;       next word in input stream.
      001447 14 2F                 3623         .word      LINK
                           001449  3624 LINK = . 
      001449 01                    3625         .byte      1
      00144A 27                    3626         .ascii     "'"
      00144B                       3627 TICK:
      00144B CD 11 26         [ 4] 3628         CALL     TOKEN
      00144E CD 12 23         [ 4] 3629         CALL     NAMEQ   ;?defined
      001451 CD 04 AC         [ 4] 3630         CALL     QBRAN
      001454 13 37                 3631         .word      ABOR1
      001456 81               [ 4] 3632         RET     ;yes, push code address
                                   3633 
                                   3634 ;       ALLOT   ( n -- )
                                   3635 ;       Allocate n bytes to RAM 
      001457 14 49                 3636         .word      LINK
                           001459  3637         LINK = . 
      001459 05                    3638         .byte      5
      00145A 41 4C 4C 4F 54        3639         .ascii     "ALLOT"
      00145F                       3640 ALLOT:
      00145F CD 06 EC         [ 4] 3641         CALL     VPP
                                   3642 ; must update APP_VP each time VP is modidied
      001462 CD 0B 94         [ 4] 3643         call PSTOR 
      001465 CC 1B A8         [ 2] 3644         jp UPDATVP 
                                   3645 
                                   3646 ;       ,       ( w -- )
                                   3647 ;         Compile an integer into
                                   3648 ;         variable space.
      001468 14 59                 3649         .word      LINK
                           00146A  3650 LINK = . 
      00146A 01                    3651         .byte      1
      00146B 2C                    3652         .ascii     ","
      00146C                       3653 COMMA:
      00146C CD 0C 12         [ 4] 3654         CALL     HERE
      00146F CD 05 9E         [ 4] 3655         CALL     DUPP
      001472 CD 0A 8D         [ 4] 3656         CALL     CELLP   ;cell boundary
      001475 CD 06 EC         [ 4] 3657         CALL     VPP
      001478 CD 04 E0         [ 4] 3658         CALL     STORE
      00147B CC 04 E0         [ 2] 3659         JP     STORE
                                   3660 
                                   3661 ;       C,      ( c -- )
                                   3662 ;       Compile a byte into
                                   3663 ;       variables space.
      00147E 14 6A                 3664        .word      LINK
                           001480  3665 LINK = . 
      001480 02                    3666         .byte      2
      001481 43 2C                 3667         .ascii     "C,"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001483                       3668 CCOMMA:
      001483 CD 0C 12         [ 4] 3669         CALL     HERE
      001486 CD 05 9E         [ 4] 3670         CALL     DUPP
      001489 CD 0A B8         [ 4] 3671         CALL     ONEP
      00148C CD 06 EC         [ 4] 3672         CALL     VPP
      00148F CD 04 E0         [ 4] 3673         CALL     STORE
      001492 CC 05 04         [ 2] 3674         JP     CSTOR
                                   3675 
                                   3676 ;       [COMPILE]       ( -- ; <string> )
                                   3677 ;       Compile next immediate
                                   3678 ;       word into code dictionary.
      001495 14 80                 3679         .word      LINK
                           001497  3680 LINK = . 
      001497 89                    3681 	.byte      IMEDD+9
      001498 5B 43 4F 4D 50 49 4C  3682         .ascii     "[COMPILE]"
             45 5D
      0014A1                       3683 BCOMP:
      0014A1 CD 14 4B         [ 4] 3684         CALL     TICK
      0014A4 CC 17 67         [ 2] 3685         JP     JSRC
                                   3686 
                                   3687 ;       COMPILE ( -- )
                                   3688 ;       Compile next jsr in
                                   3689 ;       colon list to code dictionary.
      0014A7 14 97                 3690         .word      LINK
                           0014A9  3691 LINK = . 
      0014A9 47                    3692 	.byte      COMPO+7
      0014AA 43 4F 4D 50 49 4C 45  3693         .ascii     "COMPILE"
      0014B1                       3694 COMPI:
      0014B1 CD 05 48         [ 4] 3695         CALL     RFROM
      0014B4 CD 05 9E         [ 4] 3696         CALL     DUPP
      0014B7 CD 04 F7         [ 4] 3697         CALL     AT
      0014BA CD 17 67         [ 4] 3698         CALL     JSRC    ;compile subroutine
      0014BD CD 0A 8D         [ 4] 3699         CALL     CELLP
      0014C0 90 93            [ 1] 3700         ldw y,x 
      0014C2 90 FE            [ 2] 3701         ldw y,(y)
      0014C4 1C 00 02         [ 2] 3702         addw x,#CELLL 
      0014C7 90 FC            [ 2] 3703         jp (y)
                                   3704 
                                   3705 ;       LITERAL ( w -- )
                                   3706 ;       Compile tos to dictionary
                                   3707 ;       as an integer literal.
      0014C9 14 A9                 3708         .word      LINK
                           0014CB  3709 LINK = . 
      0014CB 87                    3710 	.byte      IMEDD+7
      0014CC 4C 49 54 45 52 41 4C  3711         .ascii     "LITERAL"
      0014D3                       3712 LITER:
      0014D3 CD 14 B1         [ 4] 3713         CALL     COMPI
      0014D6 04 79                 3714         .word DOLIT 
      0014D8 CC 14 6C         [ 2] 3715         JP     COMMA
                                   3716 
                                   3717 ;       $,"     ( -- )
                                   3718 ;       Compile a literal string
                                   3719 ;       up to next " .
      0014DB 14 CB                 3720         .word      LINK
                           0014DD  3721 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0014DD 03                    3722         .byte      3
      0014DE 24 2C 22              3723         .byte     '$',',','"'
      0014E1                       3724 STRCQ:
      0014E1 CD 04 79         [ 4] 3725         CALL     DOLIT
      0014E4 00 22                 3726         .word     34	; "
      0014E6 CD 10 66         [ 4] 3727         CALL     PARSE
      0014E9 CD 0C 12         [ 4] 3728         CALL     HERE
      0014EC CD 0C D2         [ 4] 3729         CALL     PACKS   ;string to code dictionary
      0014EF CD 0B FB         [ 4] 3730         CALL     COUNT
      0014F2 CD 07 BA         [ 4] 3731         CALL     PLUS    ;calculate aligned end of string
      0014F5 CD 06 EC         [ 4] 3732         CALL     VPP
      0014F8 CC 04 E0         [ 2] 3733         JP     STORE
                                   3734 
                                   3735 ;; Structures
                                   3736 
                                   3737 ;       FOR     ( -- a )
                                   3738 ;       Start a FOR-NEXT loop
                                   3739 ;       structure in a colon definition.
      0014FB 14 DD                 3740         .word      LINK
                           0014FD  3741 LINK = . 
      0014FD 83                    3742 	.byte      IMEDD+3
      0014FE 46 4F 52              3743         .ascii     "FOR"
      001501                       3744 FOR:
      001501 CD 14 B1         [ 4] 3745         CALL     COMPI
      001504 05 67                 3746         .word TOR 
      001506 CC 0C 12         [ 2] 3747         JP     HERE
                                   3748 
                                   3749 ;       NEXT    ( a -- )
                                   3750 ;       Terminate a FOR-NEXT loop.
      001509 14 FD                 3751         .word      LINK
                           00150B  3752 LINK = . 
      00150B 84                    3753 	.byte      IMEDD+4
      00150C 4E 45 58 54           3754         .ascii     "NEXT"
      001510                       3755 NEXT:
      001510 CD 14 B1         [ 4] 3756         CALL     COMPI
      001513 04 8D                 3757         .word DONXT 
      001515 CD 07 38         [ 4] 3758         call ADRADJ
      001518 CC 14 6C         [ 2] 3759         JP     COMMA
                                   3760 
                                   3761 ;       I ( -- n )
                                   3762 ;       stack FOR-NEXT COUNTER 
      00151B 15 0B                 3763         .word LINK 
                           00151D  3764         LINK=.
      00151D 01                    3765         .byte 1 
      00151E 49                    3766         .ascii "I"
      00151F                       3767 IFETCH: 
      00151F 1D 00 02         [ 2] 3768         subw x,#CELLL 
      001522 16 03            [ 2] 3769         ldw y,(3,sp)
      001524 FF               [ 2] 3770         ldw (x),y 
      001525 81               [ 4] 3771         ret 
                                   3772 
                                   3773 ;       BEGIN   ( -- a )
                                   3774 ;       Start an infinite or
                                   3775 ;       indefinite loop structure.
      001526 15 1D                 3776         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           001528  3777 LINK = . 
      001528 85                    3778 	.byte      IMEDD+5
      001529 42 45 47 49 4E        3779         .ascii     "BEGIN"
      00152E                       3780 BEGIN:
      00152E CC 0C 12         [ 2] 3781         JP     HERE
                                   3782 
                                   3783 ;       UNTIL   ( a -- )
                                   3784 ;       Terminate a BEGIN-UNTIL
                                   3785 ;       indefinite loop structure.
      001531 15 28                 3786         .word      LINK
                           001533  3787 LINK = . 
      001533 85                    3788 	.byte      IMEDD+5
      001534 55 4E 54 49 4C        3789         .ascii     "UNTIL"
      001539                       3790 UNTIL:
      001539 CD 14 B1         [ 4] 3791         CALL     COMPI
      00153C 04 AC                 3792         .word    QBRAN 
      00153E CD 07 38         [ 4] 3793         call ADRADJ
      001541 CC 14 6C         [ 2] 3794         JP     COMMA
                                   3795 
                                   3796 ;       AGAIN   ( a -- )
                                   3797 ;       Terminate a BEGIN-AGAIN
                                   3798 ;       infinite loop structure.
      001544 15 33                 3799         .word      LINK
                           001546  3800 LINK = . 
      001546 85                    3801 	.byte      IMEDD+5
      001547 41 47 41 49 4E        3802         .ascii     "AGAIN"
      00154C                       3803 AGAIN:
      00154C CD 14 B1         [ 4] 3804         CALL     COMPI
      00154F 04 C3                 3805         .word BRAN
      001551 CD 07 38         [ 4] 3806         call ADRADJ 
      001554 CC 14 6C         [ 2] 3807         JP     COMMA
                                   3808 
                                   3809 ;       IF      ( -- A )
                                   3810 ;       Begin a conditional branch.
      001557 15 46                 3811         .word      LINK
                           001559  3812 LINK = . 
      001559 82                    3813 	.byte      IMEDD+2
      00155A 49 46                 3814         .ascii     "IF"
      00155C                       3815 IFF:
      00155C CD 14 B1         [ 4] 3816         CALL     COMPI
      00155F 04 AC                 3817         .word QBRAN
      001561 CD 0C 12         [ 4] 3818         CALL     HERE
      001564 CD 0B 24         [ 4] 3819         CALL     ZERO
      001567 CC 14 6C         [ 2] 3820         JP     COMMA
                                   3821 
                                   3822 ;       THEN        ( A -- )
                                   3823 ;       Terminate a conditional branch structure.
      00156A 15 59                 3824         .word      LINK
                           00156C  3825 LINK = . 
      00156C 84                    3826 	.byte      IMEDD+4
      00156D 54 48 45 4E           3827         .ascii     "THEN"
      001571                       3828 THENN:
      001571 CD 0C 12         [ 4] 3829         CALL     HERE
      001574 CD 07 38         [ 4] 3830         call ADRADJ 
      001577 CD 05 AE         [ 4] 3831         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00157A CC 04 E0         [ 2] 3832         JP     STORE
                                   3833 
                                   3834 ;       ELSE        ( A -- A )
                                   3835 ;       Start the false clause in an IF-ELSE-THEN structure.
      00157D 15 6C                 3836         .word      LINK
                           00157F  3837 LINK = . 
      00157F 84                    3838 	.byte      IMEDD+4
      001580 45 4C 53 45           3839         .ascii     "ELSE"
      001584                       3840 ELSEE:
      001584 CD 14 B1         [ 4] 3841         CALL     COMPI
      001587 04 C3                 3842         .word BRAN
      001589 CD 0C 12         [ 4] 3843         CALL     HERE
      00158C CD 0B 24         [ 4] 3844         CALL     ZERO
      00158F CD 14 6C         [ 4] 3845         CALL     COMMA
      001592 CD 05 AE         [ 4] 3846         CALL     SWAPP
      001595 CD 0C 12         [ 4] 3847         CALL     HERE
      001598 CD 07 38         [ 4] 3848         call ADRADJ 
      00159B CD 05 AE         [ 4] 3849         CALL     SWAPP
      00159E CC 04 E0         [ 2] 3850         JP     STORE
                                   3851 
                                   3852 ;       AHEAD       ( -- A )
                                   3853 ;       Compile a forward branch instruction.
      0015A1 15 7F                 3854         .word      LINK
                           0015A3  3855 LINK = . 
      0015A3 85                    3856 	.byte      IMEDD+5
      0015A4 41 48 45 41 44        3857         .ascii     "AHEAD"
      0015A9                       3858 AHEAD:
      0015A9 CD 14 B1         [ 4] 3859         CALL     COMPI
      0015AC 04 C3                 3860         .word BRAN
      0015AE CD 0C 12         [ 4] 3861         CALL     HERE
      0015B1 CD 0B 24         [ 4] 3862         CALL     ZERO
      0015B4 CC 14 6C         [ 2] 3863         JP     COMMA
                                   3864 
                                   3865 ;       WHILE       ( a -- A a )
                                   3866 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015B7 15 A3                 3867         .word      LINK
                           0015B9  3868 LINK = . 
      0015B9 85                    3869 	.byte      IMEDD+5
      0015BA 57 48 49 4C 45        3870         .ascii     "WHILE"
      0015BF                       3871 WHILE:
      0015BF CD 14 B1         [ 4] 3872         CALL     COMPI
      0015C2 04 AC                 3873         .word QBRAN
      0015C4 CD 0C 12         [ 4] 3874         CALL     HERE
      0015C7 CD 0B 24         [ 4] 3875         CALL     ZERO
      0015CA CD 14 6C         [ 4] 3876         CALL     COMMA
      0015CD CC 05 AE         [ 2] 3877         JP     SWAPP
                                   3878 
                                   3879 ;       REPEAT      ( A a -- )
                                   3880 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015D0 15 B9                 3881         .word      LINK
                           0015D2  3882 LINK = . 
      0015D2 86                    3883         .byte      IMEDD+6
      0015D3 52 45 50 45 41 54     3884         .ascii     "REPEAT"
      0015D9                       3885 REPEA:
      0015D9 CD 14 B1         [ 4] 3886         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015DC 04 C3                 3887         .word BRAN
      0015DE CD 07 38         [ 4] 3888         call ADRADJ 
      0015E1 CD 14 6C         [ 4] 3889         CALL     COMMA
      0015E4 CD 0C 12         [ 4] 3890         CALL     HERE
      0015E7 CD 07 38         [ 4] 3891         call ADRADJ 
      0015EA CD 05 AE         [ 4] 3892         CALL     SWAPP
      0015ED CC 04 E0         [ 2] 3893         JP     STORE
                                   3894 
                                   3895 ;       AFT         ( a -- a A )
                                   3896 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0015F0 15 D2                 3897         .word      LINK
                           0015F2  3898 LINK = . 
      0015F2 83                    3899 	.byte      IMEDD+3
      0015F3 41 46 54              3900         .ascii     "AFT"
      0015F6                       3901 AFT:
      0015F6 CD 05 94         [ 4] 3902         CALL     DROP
      0015F9 CD 15 A9         [ 4] 3903         CALL     AHEAD
      0015FC CD 0C 12         [ 4] 3904         CALL     HERE
      0015FF CC 05 AE         [ 2] 3905         JP     SWAPP
                                   3906 
                                   3907 ;       ABORT"      ( -- ; <string> )
                                   3908 ;       Conditional abort with an error message.
      001602 15 F2                 3909         .word      LINK
                           001604  3910 LINK = . 
      001604 86                    3911 	.byte      IMEDD+6
      001605 41 42 4F 52 54        3912         .ascii     "ABORT"
      00160A 22                    3913         .byte      '"'
      00160B                       3914 ABRTQ:
      00160B CD 14 B1         [ 4] 3915         CALL     COMPI
      00160E 13 2F                 3916         .word ABORQ
      001610 CC 14 E1         [ 2] 3917         JP     STRCQ
                                   3918 
                                   3919 ;       $"     ( -- ; <string> )
                                   3920 ;       Compile an inline string literal.
      001613 16 04                 3921         .word      LINK
                           001615  3922 LINK = . 
      001615 82                    3923 	.byte      IMEDD+2
      001616 24 22                 3924         .byte     '$','"'
      001618                       3925 STRQ:
      001618 CD 14 B1         [ 4] 3926         CALL     COMPI
      00161B 0E E8                 3927         .word STRQP 
      00161D CC 14 E1         [ 2] 3928         JP     STRCQ
                                   3929 
                                   3930 ;       ."          ( -- ; <string> )
                                   3931 ;       Compile an inline string literal to be typed out at run time.
      001620 16 15                 3932         .word      LINK
                           001622  3933 LINK = . 
      001622 82                    3934 	.byte      IMEDD+2
      001623 2E 22                 3935         .byte     '.','"'
      001625                       3936 DOTQ:
      001625 CD 14 B1         [ 4] 3937         CALL     COMPI
      001628 0E F2                 3938         .word DOTQP 
      00162A CC 14 E1         [ 2] 3939         JP     STRCQ
                                   3940 
                                   3941 ;; Name compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3942 
                                   3943 ;       ?UNIQUE ( a -- a )
                                   3944 ;       Display a warning message
                                   3945 ;       if word already exists.
      00162D 16 22                 3946         .word      LINK
                           00162F  3947 LINK = . 
      00162F 07                    3948         .byte      7
      001630 3F 55 4E 49 51 55 45  3949         .ascii     "?UNIQUE"
      001637                       3950 UNIQU:
      001637 CD 05 9E         [ 4] 3951         CALL     DUPP
      00163A CD 12 23         [ 4] 3952         CALL     NAMEQ   ;?name exists
      00163D CD 04 AC         [ 4] 3953         CALL     QBRAN
      001640 16 56                 3954         .word      UNIQ1
      001642 CD 0E F2         [ 4] 3955         CALL     DOTQP   ;redef are OK
      001645 07                    3956         .byte       7
      001646 20 72 65 44 65 66 20  3957         .ascii     " reDef "       
      00164D CD 05 C8         [ 4] 3958         CALL     OVER
      001650 CD 0B FB         [ 4] 3959         CALL     COUNT
      001653 CD 0E 95         [ 4] 3960         CALL     TYPES   ;just in case
      001656 CC 05 94         [ 2] 3961 UNIQ1:  JP     DROP
                                   3962 
                                   3963 ;       $,n     ( na -- )
                                   3964 ;       Build a new dictionary name
                                   3965 ;       using string at na.
                                   3966 ; compile dans l'espace des variables 
      001659 16 2F                 3967         .word      LINK
                           00165B  3968 LINK = . 
      00165B 03                    3969         .byte      3
      00165C 24 2C 6E              3970         .ascii     "$,n"
      00165F                       3971 SNAME:
      00165F CD 05 9E         [ 4] 3972         CALL     DUPP
      001662 CD 05 15         [ 4] 3973         CALL     CAT     ;?null input
      001665 CD 04 AC         [ 4] 3974         CALL     QBRAN
      001668 16 95                 3975         .word      PNAM1
      00166A CD 16 37         [ 4] 3976         CALL     UNIQU   ;?redefinition
      00166D CD 05 9E         [ 4] 3977         CALL     DUPP
      001670 CD 0B FB         [ 4] 3978         CALL     COUNT
      001673 CD 07 BA         [ 4] 3979         CALL     PLUS
      001676 CD 06 EC         [ 4] 3980         CALL     VPP
      001679 CD 04 E0         [ 4] 3981         CALL     STORE
      00167C CD 05 9E         [ 4] 3982         CALL     DUPP
      00167F CD 07 0A         [ 4] 3983         CALL     LAST
      001682 CD 04 E0         [ 4] 3984         CALL     STORE   ;save na for vocabulary link
      001685 CD 0A 9C         [ 4] 3985         CALL     CELLM   ;link address
      001688 CD 06 DE         [ 4] 3986         CALL     CNTXT
      00168B CD 04 F7         [ 4] 3987         CALL     AT
      00168E CD 05 AE         [ 4] 3988         CALL     SWAPP
      001691 CD 04 E0         [ 4] 3989         CALL     STORE
      001694 81               [ 4] 3990         RET     ;save code pointer
      001695 CD 0E E8         [ 4] 3991 PNAM1:  CALL     STRQP
      001698 05                    3992         .byte      5
      001699 20 6E 61 6D 65        3993         .ascii     " name" ;null input
      00169E CC 13 37         [ 2] 3994         JP     ABOR1
                                   3995 
                                   3996 ;; FORTH compiler
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3997 
                                   3998 ;       $COMPILE        ( a -- )
                                   3999 ;       Compile next word to
                                   4000 ;       dictionary as a token or literal.
      0016A1 16 5B                 4001         .word      LINK
                           0016A3  4002 LINK = . 
      0016A3 08                    4003         .byte      8
      0016A4 24 43 4F 4D 50 49 4C  4004         .ascii     "$COMPILE"
             45
      0016AC                       4005 SCOMP:
      0016AC CD 12 23         [ 4] 4006         CALL     NAMEQ
      0016AF CD 07 48         [ 4] 4007         CALL     QDUP    ;?defined
      0016B2 CD 04 AC         [ 4] 4008         CALL     QBRAN
      0016B5 16 CD                 4009         .word      SCOM2
      0016B7 CD 04 F7         [ 4] 4010         CALL     AT
      0016BA CD 04 79         [ 4] 4011         CALL     DOLIT
      0016BD 80 00                 4012         .word     0x8000	;  IMEDD*256
      0016BF CD 05 EA         [ 4] 4013         CALL     ANDD    ;?immediate
      0016C2 CD 04 AC         [ 4] 4014         CALL     QBRAN
      0016C5 16 CA                 4015         .word      SCOM1
      0016C7 CC 04 D3         [ 2] 4016         JP     EXECU
      0016CA CC 17 67         [ 2] 4017 SCOM1:  JP     JSRC
      0016CD CD 23 AA         [ 4] 4018 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016D0 CD 04 AC         [ 4] 4019         CALL     QBRAN
      0016D3 13 37                 4020         .word      ABOR1
      0016D5 CC 14 D3         [ 2] 4021         JP     LITER
                                   4022 
                                   4023 ;       OVERT   ( -- )
                                   4024 ;       Link a new word into vocabulary.
      0016D8 16 A3                 4025         .word      LINK
                           0016DA  4026 LINK = . 
      0016DA 05                    4027         .byte      5
      0016DB 4F 56 45 52 54        4028         .ascii     "OVERT"
      0016E0                       4029 OVERT:
      0016E0 CD 07 0A         [ 4] 4030         CALL     LAST
      0016E3 CD 04 F7         [ 4] 4031         CALL     AT
      0016E6 CD 06 DE         [ 4] 4032         CALL     CNTXT
      0016E9 CC 04 E0         [ 2] 4033         JP     STORE
                                   4034 
                                   4035 ;       ;       ( -- )
                                   4036 ;       Terminate a colon definition.
      0016EC 16 DA                 4037         .word      LINK
                           0016EE  4038 LINK = . 
      0016EE C1                    4039 	.byte      IMEDD+COMPO+1
      0016EF 3B                    4040         .ascii     ";"
      0016F0                       4041 SEMIS:
                           000001  4042 .if OPTIMIZE ; more compact and faster
      0016F0 CD 04 79         [ 4] 4043         call DOLIT 
      0016F3 00 81                 4044         .word 0x81   ; opcode for RET 
      0016F5 CD 14 83         [ 4] 4045         call CCOMMA 
                           000000  4046 .else
                                   4047         CALL     COMPI
                                   4048         .word EXIT 
                                   4049 .endif 
      0016F8 CD 13 98         [ 4] 4050         CALL     LBRAC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016FB CD 16 E0         [ 4] 4051         call OVERT 
      0016FE CD 21 00         [ 4] 4052         CALL FMOVE
      001701 CD 07 48         [ 4] 4053         call QDUP 
      001704 CD 04 AC         [ 4] 4054         call QBRAN 
      001707 18 37                 4055         .word SET_RAMLAST 
      001709 CD 21 94         [ 4] 4056         CALL UPDATPTR
      00170C 81               [ 4] 4057         RET 
                                   4058 
                                   4059 
                                   4060 ;       Terminate an ISR definition 
                                   4061 ;       retourn ca of ISR as double
                                   4062 ;       I; ( -- ud )
      00170D 16 EE                 4063         .word LINK 
                           00170F  4064         LINK=.
      00170F C2                    4065         .byte 2+IMEDD+COMPO 
      001710 49 3B                 4066         .ascii "I;" 
      001712                       4067 ISEMI:
      001712 1D 00 02         [ 2] 4068         subw x,#CELLL  
      001715 90 AE 00 80      [ 2] 4069         ldw y,#IRET_CODE 
      001719 FF               [ 2] 4070         ldw (x),y 
      00171A CD 14 83         [ 4] 4071         call CCOMMA
      00171D CD 13 98         [ 4] 4072         call LBRAC 
      001720 CD 21 D9         [ 4] 4073         call IFMOVE
      001723 CD 07 48         [ 4] 4074         call QDUP 
      001726 CD 04 AC         [ 4] 4075         CALL QBRAN 
      001729 18 37                 4076         .word SET_RAMLAST
      00172B CD 06 FA         [ 4] 4077         CALL CPP
      00172E CD 04 F7         [ 4] 4078         call AT 
      001731 CD 05 AE         [ 4] 4079         call SWAPP 
      001734 CD 06 FA         [ 4] 4080         CALL CPP 
      001737 CD 04 E0         [ 4] 4081         call STORE 
      00173A CD 1B 91         [ 4] 4082         call UPDATCP 
      00173D CD 1B 4E         [ 4] 4083         call EEPVP 
      001740 CD 05 94         [ 4] 4084         call DROP 
      001743 CD 04 F7         [ 4] 4085         call AT 
      001746 CD 06 EC         [ 4] 4086         call VPP 
      001749 CD 04 E0         [ 4] 4087         call STORE 
      00174C CC 0B 24         [ 2] 4088         jp ZERO
      00174F 81               [ 4] 4089         ret           
                                   4090         
                                   4091 
                                   4092 ;       ]       ( -- )
                                   4093 ;       Start compiling words in
                                   4094 ;       input stream.
      001750 17 0F                 4095         .word      LINK
                           001752  4096 LINK = . 
      001752 01                    4097         .byte      1
      001753 5D                    4098         .ascii     "]"
      001754                       4099 RBRAC:
      001754 CD 04 79         [ 4] 4100         CALL   DOLIT
      001757 16 AC                 4101         .word  SCOMP
      001759 CD 06 BC         [ 4] 4102         CALL   TEVAL
      00175C CC 04 E0         [ 2] 4103         JP     STORE
                                   4104 
                                   4105 ;       CALL,    ( ca -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4106 ;       Compile a subroutine call.
      00175F 17 52                 4107         .word      LINK
                           001761  4108 LINK = . 
      001761 05                    4109         .byte      5
      001762 43 41 4C 4C 2C        4110         .ascii     "CALL,"
      001767                       4111 JSRC:
      001767 CD 04 79         [ 4] 4112         CALL     DOLIT
      00176A 00 CD                 4113         .word     CALLL     ;CALL
      00176C CD 14 83         [ 4] 4114         CALL     CCOMMA
      00176F CC 14 6C         [ 2] 4115         JP     COMMA
                                   4116 
                                   4117 ;       INIT-OFS ( -- )
                                   4118 ;       compute offset to adjust jump address 
                                   4119 ;       set variable OFFSET 
      001772 17 61                 4120         .word LINK 
                           001774  4121         LINK=.
      001774 08                    4122         .byte 8 
      001775 49 4E 49 54 2D 4F 46  4123         .ascii "INIT-OFS" 
             53
      00177D                       4124 INITOFS:
      00177D CD 06 AB         [ 4] 4125         call TFLASH 
      001780 CD 04 F7         [ 4] 4126         CALL AT 
      001783 CD 05 9E         [ 4] 4127         CALL DUPP 
      001786 CD 04 AC         [ 4] 4128         call QBRAN
      001789 17 9A                 4129         .word 1$
      00178B CD 05 94         [ 4] 4130         call DROP  
      00178E CD 06 FA         [ 4] 4131         call CPP 
      001791 CD 04 F7         [ 4] 4132         call AT 
      001794 CD 0C 12         [ 4] 4133         call HERE
      001797 CD 08 33         [ 4] 4134         call SUBB 
      00179A CD 07 2F         [ 4] 4135 1$:     call OFFSET 
      00179D CC 04 E0         [ 2] 4136         jp STORE  
                                   4137 
                                   4138 ;       :       ( -- ; <string> )
                                   4139 ;       Start a new colon definition
                                   4140 ;       using next word as its name.
      0017A0 17 74                 4141         .word      LINK
                           0017A2  4142 LINK = . 
      0017A2 01                    4143         .byte      1
      0017A3 3A                    4144         .ascii     ":"
      0017A4                       4145 COLON:
      0017A4 CD 17 7D         [ 4] 4146         call INITOFS       
      0017A7 CD 11 26         [ 4] 4147         CALL   TOKEN
      0017AA CD 16 5F         [ 4] 4148         CALL   SNAME
      0017AD CC 17 54         [ 2] 4149         JP     RBRAC
                                   4150 
                                   4151 ;       I:  ( -- )
                                   4152 ;       Start interrupt service routine definition
                                   4153 ;       those definition have no name.
      0017B0 17 A2                 4154         .word LINK
                           0017B2  4155         LINK=.
      0017B2 02                    4156         .byte 2 
      0017B3 49 3A                 4157         .ascii "I:" 
      0017B5                       4158 ICOLON:
      0017B5 CD 17 7D         [ 4] 4159         call INITOFS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0017B8 CC 17 54         [ 2] 4160         jp RBRAC  
                                   4161 
                                   4162 ;       IMMEDIATE       ( -- )
                                   4163 ;       Make last compiled word
                                   4164 ;       an immediate word.
      0017BB 17 B2                 4165         .word      LINK
                           0017BD  4166 LINK = . 
      0017BD 09                    4167         .byte      9
      0017BE 49 4D 4D 45 44 49 41  4168         .ascii     "IMMEDIATE"
             54 45
      0017C7                       4169 IMMED:
      0017C7 CD 04 79         [ 4] 4170         CALL     DOLIT
      0017CA 80 00                 4171         .word     0x8000	;  IMEDD*256
      0017CC CD 07 0A         [ 4] 4172         CALL     LAST
      0017CF CD 04 F7         [ 4] 4173         CALL     AT
      0017D2 CD 04 F7         [ 4] 4174         CALL     AT
      0017D5 CD 05 FE         [ 4] 4175         CALL     ORR
      0017D8 CD 07 0A         [ 4] 4176         CALL     LAST
      0017DB CD 04 F7         [ 4] 4177         CALL     AT
      0017DE CC 04 E0         [ 2] 4178         JP     STORE
                                   4179 
                                   4180 ;; Defining words
                                   4181 
                                   4182 ;       CREATE  ( -- ; <string> )
                                   4183 ;       Compile a new array
                                   4184 ;       without allocating space.
      0017E1 17 BD                 4185         .word      LINK
                           0017E3  4186 LINK = . 
      0017E3 06                    4187         .byte      6
      0017E4 43 52 45 41 54 45     4188         .ascii     "CREATE"
      0017EA                       4189 CREAT:
      0017EA CD 11 26         [ 4] 4190         CALL     TOKEN
      0017ED CD 16 5F         [ 4] 4191         CALL     SNAME
      0017F0 CD 16 E0         [ 4] 4192         CALL     OVERT        
      0017F3 CD 14 B1         [ 4] 4193         CALL     COMPI 
      0017F6 06 4B                 4194         .word DOVAR 
      0017F8 81               [ 4] 4195         RET
                                   4196 
                                   4197 ;       VARIABLE        ( -- ; <string> )
                                   4198 ;       Compile a new variable
                                   4199 ;       initialized to 0.
      0017F9 17 E3                 4200         .word      LINK
                           0017FB  4201 LINK = . 
      0017FB 08                    4202         .byte      8
      0017FC 56 41 52 49 41 42 4C  4203         .ascii     "VARIABLE"
             45
      001804                       4204 VARIA:
                                   4205 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001804 CD 0C 12         [ 4] 4206         CALL HERE
      001807 CD 05 9E         [ 4] 4207         CALL DUPP 
      00180A CD 0A 8D         [ 4] 4208         CALL CELLP
      00180D CD 06 EC         [ 4] 4209         CALL VPP 
      001810 CD 04 E0         [ 4] 4210         CALL STORE
      001813 CD 17 EA         [ 4] 4211         CALL CREAT
      001816 CD 05 9E         [ 4] 4212         CALL DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001819 CD 14 6C         [ 4] 4213         CALL COMMA
      00181C CD 0B 24         [ 4] 4214         CALL ZERO
      00181F CD 05 AE         [ 4] 4215         call SWAPP 
      001822 CD 04 E0         [ 4] 4216         CALL STORE
      001825 CD 21 00         [ 4] 4217         CALL FMOVE ; move definition to FLASH
      001828 CD 07 48         [ 4] 4218         CALL QDUP 
      00182B CD 04 AC         [ 4] 4219         CALL QBRAN 
      00182E 18 37                 4220         .word SET_RAMLAST   
      001830 CD 1B A8         [ 4] 4221         call UPDATVP  ; don't update if variable kept in RAM.
      001833 CD 21 94         [ 4] 4222         CALL UPDATPTR
      001836 81               [ 4] 4223         RET         
      001837                       4224 SET_RAMLAST: 
      001837 CD 07 0A         [ 4] 4225         CALL LAST 
      00183A CD 04 F7         [ 4] 4226         CALL AT 
      00183D CD 07 1D         [ 4] 4227         CALL RAMLAST 
      001840 CC 04 E0         [ 2] 4228         jp STORE  
                                   4229 
                                   4230 
                                   4231 ;       CONSTANT  ( n -- ; <string> )
                                   4232 ;       Compile a new constant 
                                   4233 ;       n CONSTANT name 
      001843 17 FB                 4234         .word LINK 
                           001845  4235         LINK=. 
      001845 08                    4236         .byte 8 
      001846 43 4F 4E 53 54 41 4E  4237         .ascii "CONSTANT" 
             54
      00184E                       4238 CONSTANT:          
      00184E CD 11 26         [ 4] 4239         CALL TOKEN
      001851 CD 16 5F         [ 4] 4240         CALL SNAME 
      001854 CD 16 E0         [ 4] 4241         CALL OVERT 
      001857 CD 14 B1         [ 4] 4242         CALL COMPI 
      00185A 18 78                 4243         .word DOCONST
      00185C CD 14 6C         [ 4] 4244         CALL COMMA 
      00185F CD 21 00         [ 4] 4245         CALL FMOVE
      001862 CD 07 48         [ 4] 4246         CALL QDUP 
      001865 CD 04 AC         [ 4] 4247         CALL QBRAN 
      001868 18 37                 4248         .word SET_RAMLAST  
      00186A CD 21 94         [ 4] 4249         CALL UPDATPTR  
      00186D 81               [ 4] 4250 1$:     RET          
                                   4251 
                                   4252 ; CONSTANT runtime semantic 
                                   4253 ; doCONST  ( -- n )
      00186E 18 45                 4254         .word LINK 
                           001870  4255         LINK=.
      001870 07                    4256         .byte 7
      001871 44 4F 43 4F 4E 53 54  4257         .ascii "DOCONST"
      001878                       4258 DOCONST:
      001878 1D 00 02         [ 2] 4259         subw x,#CELLL
      00187B 90 85            [ 2] 4260         popw y 
      00187D 90 FE            [ 2] 4261         ldw y,(y) 
      00187F FF               [ 2] 4262         ldw (x),y 
      001880 81               [ 4] 4263         ret 
                                   4264 
                                   4265 ;----------------------------------
                                   4266 ; create double constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4267 ; DCONST ( d -- ; <string> )
                                   4268 ;----------------------------------
      001881 18 70                 4269     .word LINK 
                           001883  4270     LINK=.
      001883 06                    4271     .byte 6 
      001884 44 43 4F 4E 53 54     4272     .ascii "DCONST"
      00188A                       4273 DCONST:
      00188A CD 11 26         [ 4] 4274         CALL TOKEN
      00188D CD 16 5F         [ 4] 4275         CALL SNAME 
      001890 CD 16 E0         [ 4] 4276         CALL OVERT 
      001893 CD 14 B1         [ 4] 4277         CALL COMPI 
      001896 18 B9                 4278         .word DO_DCONST
      001898 CD 14 6C         [ 4] 4279         CALL COMMA
      00189B CD 14 6C         [ 4] 4280         CALL COMMA  
      00189E CD 21 00         [ 4] 4281         CALL FMOVE
      0018A1 CD 07 48         [ 4] 4282         CALL QDUP 
      0018A4 CD 04 AC         [ 4] 4283         CALL QBRAN 
      0018A7 18 37                 4284         .word SET_RAMLAST  
      0018A9 CD 21 94         [ 4] 4285         CALL UPDATPTR  
      0018AC 81               [ 4] 4286 1$:     RET          
                                   4287     
                                   4288 ;----------------------------------
                                   4289 ; runtime for DCONST 
                                   4290 ; stack double constant 
                                   4291 ; DO-DCONST ( -- d )
                                   4292 ;-----------------------------------
      0018AD 18 83                 4293         .word LINK 
                           0018AF  4294         LINK=.
      0018AF 09                    4295         .byte 9 
      0018B0 44 4F 2D 44 43 4F 4E  4296         .ascii "DO-DCONST"
             53 54
      0018B9                       4297 DO_DCONST:
      0018B9 90 85            [ 2] 4298     popw y 
      0018BB 90 BF 28         [ 2] 4299     ldw YTEMP,y 
      0018BE 1D 00 04         [ 2] 4300     subw x,#2*CELLL 
      0018C1 90 FE            [ 2] 4301     ldw y,(y)
      0018C3 FF               [ 2] 4302     ldw (x),y 
      0018C4 90 BE 28         [ 2] 4303     ldw y,YTEMP 
      0018C7 90 EE 02         [ 2] 4304     ldw y,(2,y)
      0018CA EF 02            [ 2] 4305     ldw (2,x),y 
      0018CC 81               [ 4] 4306     ret 
                                   4307 
                                   4308 ;; Tools
                                   4309 
                                   4310 ;       _TYPE   ( b u -- )
                                   4311 ;       Display a string. Filter
                                   4312 ;       non-printing characters.
      0018CD 18 AF                 4313         .word      LINK
                           0018CF  4314 LINK = . 
      0018CF 05                    4315         .byte      5
      0018D0 5F 54 59 50 45        4316         .ascii     "_TYPE"
      0018D5                       4317 UTYPE:
      0018D5 CD 05 67         [ 4] 4318         CALL     TOR     ;start count down loop
      0018D8 20 0F            [ 2] 4319         JRA     UTYP2   ;skip first pass
      0018DA CD 05 9E         [ 4] 4320 UTYP1:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0018DD CD 05 15         [ 4] 4321         CALL     CAT
      0018E0 CD 0B 4E         [ 4] 4322         CALL     TCHAR
      0018E3 CD 04 38         [ 4] 4323         CALL     EMIT    ;display only printable
      0018E6 CD 0A B8         [ 4] 4324         CALL     ONEP    ;increment address
      0018E9 CD 04 8D         [ 4] 4325 UTYP2:  CALL     DONXT
      0018EC 18 DA                 4326         .word      UTYP1   ;loop till done
      0018EE CC 05 94         [ 2] 4327         JP     DROP
                                   4328 
                                   4329 ;       dm+     ( a u -- a )
                                   4330 ;       Dump u bytes from ,
                                   4331 ;       leaving a+u on  stack.
      0018F1 18 CF                 4332         .word      LINK
                           0018F3  4333 LINK = . 
      0018F3 03                    4334         .byte      3
      0018F4 64 6D 2B              4335         .ascii     "dm+"
      0018F7                       4336 DUMPP:
      0018F7 CD 05 C8         [ 4] 4337         CALL     OVER
      0018FA CD 04 79         [ 4] 4338         CALL     DOLIT
      0018FD 00 04                 4339         .word      4
      0018FF CD 0F 1B         [ 4] 4340         CALL     UDOTR   ;display address
      001902 CD 0E 6B         [ 4] 4341         CALL     SPACE
      001905 CD 05 67         [ 4] 4342         CALL     TOR     ;start count down loop
      001908 20 11            [ 2] 4343         JRA     PDUM2   ;skip first pass
      00190A CD 05 9E         [ 4] 4344 PDUM1:  CALL     DUPP
      00190D CD 05 15         [ 4] 4345         CALL     CAT
      001910 CD 04 79         [ 4] 4346         CALL     DOLIT
      001913 00 03                 4347         .word      3
      001915 CD 0F 1B         [ 4] 4348         CALL     UDOTR   ;display numeric data
      001918 CD 0A B8         [ 4] 4349         CALL     ONEP    ;increment address
      00191B CD 04 8D         [ 4] 4350 PDUM2:  CALL     DONXT
      00191E 19 0A                 4351         .word      PDUM1   ;loop till done
      001920 81               [ 4] 4352         RET
                                   4353 
                                   4354 ;       DUMP    ( a u -- )
                                   4355 ;       Dump u bytes from a,
                                   4356 ;       in a formatted manner.
      001921 18 F3                 4357         .word      LINK
                           001923  4358 LINK = . 
      001923 04                    4359         .byte      4
      001924 44 55 4D 50           4360         .ascii     "DUMP"
      001928                       4361 DUMP:
      001928 CD 06 5B         [ 4] 4362         CALL     BASE
      00192B CD 04 F7         [ 4] 4363         CALL     AT
      00192E CD 05 67         [ 4] 4364         CALL     TOR
      001931 CD 0D CA         [ 4] 4365         CALL     HEX     ;save radix, set hex
      001934 CD 04 79         [ 4] 4366         CALL     DOLIT
      001937 00 10                 4367         .word      16
      001939 CD 09 DE         [ 4] 4368         CALL     SLASH   ;change count to lines
      00193C CD 05 67         [ 4] 4369         CALL     TOR     ;start count down loop
      00193F CD 0E B3         [ 4] 4370 DUMP1:  CALL     CR
      001942 CD 04 79         [ 4] 4371         CALL     DOLIT
      001945 00 10                 4372         .word      16
      001947 CD 07 A5         [ 4] 4373         CALL     DDUP
      00194A CD 18 F7         [ 4] 4374         CALL     DUMPP   ;display numeric
      00194D CD 07 59         [ 4] 4375         CALL     ROT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001950 CD 07 59         [ 4] 4376         CALL     ROT
      001953 CD 0E 6B         [ 4] 4377         CALL     SPACE
      001956 CD 0E 6B         [ 4] 4378         CALL     SPACE
      001959 CD 18 D5         [ 4] 4379         CALL     UTYPE   ;display printable characters
      00195C CD 04 8D         [ 4] 4380         CALL     DONXT
      00195F 19 3F                 4381         .word      DUMP1   ;loop till done
      001961 CD 05 94         [ 4] 4382 DUMP3:  CALL     DROP
      001964 CD 05 48         [ 4] 4383         CALL     RFROM
      001967 CD 06 5B         [ 4] 4384         CALL     BASE
      00196A CC 04 E0         [ 2] 4385         JP     STORE   ;restore radix
                                   4386 
                                   4387 ;       .S      ( ... -- ... )
                                   4388 ;        Display  contents of stack.
      00196D 19 23                 4389         .word      LINK
                           00196F  4390 LINK = . 
      00196F 02                    4391         .byte      2
      001970 2E 53                 4392         .ascii     ".S"
      001972                       4393 DOTS:
      001972 CD 0E B3         [ 4] 4394         CALL     CR
      001975 CD 0B 66         [ 4] 4395         CALL     DEPTH   ;stack depth
      001978 CD 05 67         [ 4] 4396         CALL     TOR     ;start count down loop
      00197B 20 09            [ 2] 4397         JRA     DOTS2   ;skip first pass
      00197D CD 05 5B         [ 4] 4398 DOTS1:  CALL     RAT
      001980 CD 0B 7D         [ 4] 4399 	CALL     PICK
      001983 CD 0F 6C         [ 4] 4400         CALL     DOT     ;index stack, display contents
      001986 CD 04 8D         [ 4] 4401 DOTS2:  CALL     DONXT
      001989 19 7D                 4402         .word      DOTS1   ;loop till done
      00198B CD 0E F2         [ 4] 4403         CALL     DOTQP
      00198E 05                    4404         .byte      5
      00198F 20 3C 73 70 20        4405         .ascii     " <sp "
      001994 81               [ 4] 4406         RET
                                   4407 
                                   4408 ;       >NAME   ( ca -- na | F )
                                   4409 ;       Convert code address
                                   4410 ;       to a name address.
      001995 19 6F                 4411         .word      LINK
                           001997  4412 LINK = . 
      001997 05                    4413         .byte      5
      001998 3E 4E 41 4D 45        4414         .ascii     ">NAME"
      00199D                       4415 TNAME:
      00199D CD 06 DE         [ 4] 4416         CALL     CNTXT   ;vocabulary link
      0019A0 CD 04 F7         [ 4] 4417 TNAM2:  CALL     AT
      0019A3 CD 05 9E         [ 4] 4418         CALL     DUPP    ;?last word in a vocabulary
      0019A6 CD 04 AC         [ 4] 4419         CALL     QBRAN
      0019A9 19 C4                 4420         .word      TNAM4
      0019AB CD 07 A5         [ 4] 4421         CALL     DDUP
      0019AE CD 11 34         [ 4] 4422         CALL     NAMET
      0019B1 CD 06 13         [ 4] 4423         CALL     XORR    ;compare
      0019B4 CD 04 AC         [ 4] 4424         CALL     QBRAN
      0019B7 19 BE                 4425         .word      TNAM3
      0019B9 CD 0A 9C         [ 4] 4426         CALL     CELLM   ;continue with next word
      0019BC 20 E2            [ 2] 4427         JRA     TNAM2
      0019BE CD 05 AE         [ 4] 4428 TNAM3:  CALL     SWAPP
      0019C1 CC 05 94         [ 2] 4429         JP     DROP
      0019C4 CD 07 9A         [ 4] 4430 TNAM4:  CALL     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0019C7 CC 0B 24         [ 2] 4431         JP     ZERO
                                   4432 
                                   4433 ;       .ID     ( na -- )
                                   4434 ;        Display  name at address.
      0019CA 19 97                 4435         .word      LINK
                           0019CC  4436 LINK = . 
      0019CC 03                    4437         .byte      3
      0019CD 2E 49 44              4438         .ascii     ".ID"
      0019D0                       4439 DOTID:
      0019D0 CD 07 48         [ 4] 4440         CALL     QDUP    ;if zero no name
      0019D3 CD 04 AC         [ 4] 4441         CALL     QBRAN
      0019D6 19 E6                 4442         .word      DOTI1
      0019D8 CD 0B FB         [ 4] 4443         CALL     COUNT
      0019DB CD 04 79         [ 4] 4444         CALL     DOLIT
      0019DE 00 1F                 4445         .word      0x1F
      0019E0 CD 05 EA         [ 4] 4446         CALL     ANDD    ;mask lexicon bits
      0019E3 CC 18 D5         [ 2] 4447         JP     UTYPE
      0019E6 CD 0E F2         [ 4] 4448 DOTI1:  CALL     DOTQP
      0019E9 09                    4449         .byte      9
      0019EA 20 6E 6F 4E 61 6D 65  4450         .ascii     " noName"
      0019F1 81               [ 4] 4451         RET
                                   4452 
                           000000  4453 WANT_SEE=0
                           000000  4454 .if WANT_SEE 
                                   4455 ;       SEE     ( -- ; <string> )
                                   4456 ;       A simple decompiler.
                                   4457 ;       Updated for byte machines.
                                   4458         .word      LINK
                                   4459 LINK = . 
                                   4460         .byte      3
                                   4461         .ascii     "SEE"
                                   4462 SEE:
                                   4463         CALL     TICK    ;starting address
                                   4464         CALL     CR
                                   4465         CALL     ONEM
                                   4466 SEE1:   CALL     ONEP
                                   4467         CALL     DUPP
                                   4468         CALL     AT
                                   4469         CALL     DUPP
                                   4470         CALL     QBRAN
                                   4471         .word    SEE2
                                   4472         CALL     TNAME   ;?is it a name
                                   4473 SEE2:   CALL     QDUP    ;name address or zero
                                   4474         CALL     QBRAN
                                   4475         .word    SEE3
                                   4476         CALL     SPACE
                                   4477         CALL     DOTID   ;display name
                                   4478         CALL     ONEP
                                   4479         JRA      SEE4
                                   4480 SEE3:   CALL     DUPP
                                   4481         CALL     CAT
                                   4482         CALL     UDOT    ;display number
                                   4483 SEE4:   CALL     NUFQ    ;user control
                                   4484         CALL     QBRAN
                                   4485         .word    SEE1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4486         JP     DROP
                                   4487 .endif ; WANT_SEE 
                                   4488 
                                   4489 ;       WORDS   ( -- )
                                   4490 ;       Display names in vocabulary.
      0019F2 19 CC                 4491         .word      LINK
                           0019F4  4492 LINK = . 
      0019F4 05                    4493         .byte      5
      0019F5 57 4F 52 44 53        4494         .ascii     "WORDS"
      0019FA                       4495 WORDS:
      0019FA CD 0E B3         [ 4] 4496         CALL     CR
      0019FD CD 06 DE         [ 4] 4497         CALL     CNTXT   ;only in context
      001A00 CD 04 F7         [ 4] 4498 WORS1:  CALL     AT
      001A03 CD 07 48         [ 4] 4499         CALL     QDUP    ;?at end of list
      001A06 CD 04 AC         [ 4] 4500         CALL     QBRAN
      001A09 1A 1C                 4501         .word      WORS2
      001A0B CD 05 9E         [ 4] 4502         CALL     DUPP
      001A0E CD 0E 6B         [ 4] 4503         CALL     SPACE
      001A11 CD 19 D0         [ 4] 4504         CALL     DOTID   ;display a name
      001A14 CD 0A 9C         [ 4] 4505         CALL     CELLM
      001A17 CD 04 C3         [ 4] 4506         CALL     BRAN
      001A1A 1A 00                 4507         .word      WORS1
      001A1C 81               [ 4] 4508 WORS2:  RET
                                   4509 
                                   4510         
                                   4511 ;; Hardware reset
                                   4512 
                                   4513 ;       hi      ( -- )
                                   4514 ;       Display sign-on message.
      001A1D 19 F4                 4515         .word      LINK
                           001A1F  4516 LINK = . 
      001A1F 02                    4517         .byte      2
      001A20 68 69                 4518         .ascii     "hi"
      001A22                       4519 HI:
      001A22 CD 0E B3         [ 4] 4520         CALL     CR
      001A25 CD 0E F2         [ 4] 4521         CALL     DOTQP   ;initialize I/O
      001A28 0F                    4522         .byte      15
      001A29 73 74 6D 38 65 46 6F  4523         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A35 33                    4524 	.byte      VER+'0'
      001A36 2E                    4525         .byte      '.' 
      001A37 30                    4526 	.byte      EXT+'0' ;version
      001A38 CD 0E F2         [ 4] 4527         CALL    DOTQP
                           000001  4528 .if NUCLEO          
      001A3B 12                    4529         .byte 18
      001A3C 20 6F 6E 20 4E 55 43  4530         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4531 .endif
                           000000  4532 .if DISCOVERY
                                   4533         .byte 19
                                   4534         .ascii  " on STM8S-DISCOVERY"
                                   4535 .endif
                           000000  4536 .if DOORBELL
                                   4537         .byte 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4538         .ascii " on stm8s105k6b6"
                                   4539 .endif
      001A4E CC 0E B3         [ 2] 4540         JP     CR
                                   4541 
                           000000  4542 WANT_DEBUG=0
                           000000  4543 .if WANT_DEBUG 
                                   4544 ;       DEBUG      ( -- )
                                   4545 ;       Display sign-on message.
                                   4546 ;        .word      LINK
                                   4547 LINK = . 
                                   4548         .byte      5
                                   4549         .ascii     "DEBUG"
                                   4550 DEBUG:
                                   4551 	CALL DOLIT
                                   4552 	.word 0x65
                                   4553 	CALL EMIT
                                   4554 	CALL DOLIT
                                   4555 	.word 0
                                   4556  	CALL ZLESS 
                                   4557 	CALL DOLIT
                                   4558 	.word 0xFFFE
                                   4559 	CALL ZLESS 
                                   4560 	CALL UPLUS 
                                   4561  	CALL DROP 
                                   4562 	CALL DOLIT
                                   4563 	.word 3
                                   4564 	CALL UPLUS 
                                   4565 	CALL UPLUS 
                                   4566  	CALL DROP
                                   4567 	CALL DOLIT
                                   4568 	.word 0x43
                                   4569 	CALL UPLUS 
                                   4570  	CALL DROP
                                   4571 	CALL EMIT
                                   4572 	CALL DOLIT
                                   4573 	.word 0x4F
                                   4574 	CALL DOLIT
                                   4575 	.word 0x6F
                                   4576  	CALL XORR
                                   4577 	CALL DOLIT
                                   4578 	.word 0xF0
                                   4579  	CALL ANDD
                                   4580 	CALL DOLIT
                                   4581 	.word 0x4F
                                   4582  	CALL ORR
                                   4583 	CALL EMIT
                                   4584 	CALL DOLIT
                                   4585 	.word 8
                                   4586 	CALL DOLIT
                                   4587 	.word 6
                                   4588  	CALL SWAPP
                                   4589 	CALL OVER
                                   4590 	CALL XORR
                                   4591 	CALL DOLIT
                                   4592 	.word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4593 	CALL ANDD 
                                   4594 	CALL ANDD
                                   4595 	CALL DOLIT
                                   4596 	.word 0x70
                                   4597 	CALL UPLUS 
                                   4598 	CALL DROP
                                   4599 	CALL EMIT
                                   4600 	CALL DOLIT
                                   4601 	.word 0
                                   4602 	CALL QBRAN
                                   4603 	.word DEBUG1
                                   4604 	CALL DOLIT
                                   4605 	.word 0x3F
                                   4606 DEBUG1:
                                   4607 	CALL DOLIT
                                   4608 	.word 0xFFFF
                                   4609 	CALL QBRAN
                                   4610 	.word DEBUG2
                                   4611 	CALL DOLIT
                                   4612 	.word 0x74
                                   4613 	CALL BRAN
                                   4614 	.word DEBUG3
                                   4615 DEBUG2:
                                   4616 	CALL DOLIT
                                   4617 	.word 0x21
                                   4618 DEBUG3:
                                   4619 	CALL EMIT
                                   4620 	CALL DOLIT
                                   4621 	.word 0x68
                                   4622 	CALL DOLIT
                                   4623 	.word 0x80
                                   4624 	CALL STORE
                                   4625 	CALL DOLIT
                                   4626 	.word 0x80
                                   4627 	CALL AT
                                   4628 	CALL EMIT
                                   4629 	CALL DOLIT
                                   4630 	.word 0x4D
                                   4631 	CALL TOR
                                   4632 	CALL RAT
                                   4633 	CALL RFROM
                                   4634 	CALL ANDD
                                   4635 	CALL EMIT
                                   4636 	CALL DOLIT
                                   4637 	.word 0x61
                                   4638 	CALL DOLIT
                                   4639 	.word 0xA
                                   4640 	CALL TOR
                                   4641 DEBUG4:
                                   4642 	CALL DOLIT
                                   4643 	.word 1
                                   4644 	CALL UPLUS 
                                   4645 	CALL DROP
                                   4646 	CALL DONXT
                                   4647 	.word DEBUG4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4648 	CALL EMIT
                                   4649 	CALL DOLIT
                                   4650 	.word 0x656D
                                   4651 	CALL DOLIT
                                   4652 	.word 0x100
                                   4653 	CALL UMSTA
                                   4654 	CALL SWAPP
                                   4655 	CALL DOLIT
                                   4656 	.word 0x100
                                   4657 	CALL UMSTA
                                   4658 	CALL SWAPP 
                                   4659 	CALL DROP
                                   4660 	CALL EMIT
                                   4661 	CALL EMIT
                                   4662 	CALL DOLIT
                                   4663 	.word 0x2043
                                   4664 	CALL DOLIT
                                   4665 	.word 0
                                   4666 	CALL DOLIT
                                   4667 	.word 0x100
                                   4668 	CALL UMMOD
                                   4669 	CALL EMIT
                                   4670 	CALL EMIT
                                   4671 	;JP ORIG
                                   4672 	RET
                                   4673 .endif ; WANT_DEBUG 
                                   4674 
                                   4675 
                                   4676 ;       'BOOT   ( -- a )
                                   4677 ;       The application startup vector.
      001A51 1A 1F                 4678         .word      LINK
                           001A53  4679 LINK = . 
      001A53 05                    4680         .byte      5
      001A54 27 42 4F 4F 54        4681         .ascii     "'BOOT"
      001A59                       4682 TBOOT:
      001A59 CD 06 4B         [ 4] 4683         CALL     DOVAR
      001A5C 40 02                 4684         .word    APP_RUN      ;application to boot
                                   4685 
                                   4686 ;       COLD    ( -- )
                                   4687 ;       The hilevel cold start s=ence.
      001A5E 1A 53                 4688         .word      LINK
                           001A60  4689         LINK = . 
      001A60 04                    4690         .byte      4
      001A61 43 4F 4C 44           4691         .ascii     "COLD"
      001A65                       4692 COLD:
                           000000  4693 .if WANT_DEBUG
                                   4694         CALL DEBUG
                                   4695 .endif ; WANT_DEBUG
      001A65 CD 04 79         [ 4] 4696 COLD1:  CALL     DOLIT
      001A68 00 2B                 4697         .word      UZERO
      001A6A CD 04 79         [ 4] 4698 	CALL     DOLIT
      001A6D 00 06                 4699         .word      UPP
      001A6F CD 04 79         [ 4] 4700         CALL     DOLIT
      001A72 00 1E                 4701 	.word      UEND-UZERO
      001A74 CD 0C 5F         [ 4] 4702         CALL     CMOVE   ;initialize user area
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                           000000  4703 .if WANT_FLOAT 
                                   4704         CALL    FINIT 
                                   4705 .endif 
                                   4706 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A77 90 CE 40 02      [ 2] 4707         ldw y,APP_RUN 
      001A7B 26 0B            [ 1] 4708         jrne 0$
      001A7D 1D 00 02         [ 2] 4709         subw x,#CELLL 
      001A80 90 AE 1A 22      [ 2] 4710         ldw y,#HI  
      001A84 FF               [ 2] 4711         ldw (x),y
      001A85 CD 1B 80         [ 4] 4712         call UPDATRUN 
      001A88                       4713 0$:        
                                   4714 ; update LAST with APP_LAST 
                                   4715 ; if APP_LAST > LAST else do the opposite
      001A88 90 CE 40 00      [ 2] 4716         ldw y,APP_LAST 
      001A8C 90 B3 1E         [ 2] 4717         cpw y,ULAST 
      001A8F 22 05            [ 1] 4718         jrugt 1$ 
                                   4719 ; save LAST at APP_LAST  
      001A91 CD 1B 68         [ 4] 4720         call UPDATLAST 
      001A94 20 06            [ 2] 4721         jra 2$
      001A96                       4722 1$: ; update LAST with APP_LAST 
      001A96 90 BF 1E         [ 2] 4723         ldw ULAST,y
      001A99 90 BF 18         [ 2] 4724         ldw UCNTXT,y
      001A9C                       4725 2$:  
                                   4726 ; update APP_CP if < app_space 
      001A9C 90 CE 40 04      [ 2] 4727         ldw y,APP_CP  
      001AA0 90 B3 1C         [ 2] 4728         cpw y,UCP   
      001AA3 24 06            [ 1] 4729         jruge 3$ 
      001AA5 CD 1B 91         [ 4] 4730         call UPDATCP
      001AA8 90 BE 1C         [ 2] 4731         ldw y,UCP   
      001AAB                       4732 3$:
      001AAB 90 BF 1C         [ 2] 4733         ldw UCP,y                 
                                   4734 ; update UVP with APP_VP  
                                   4735 ; if APP_VP>UVP else do the opposite 
      001AAE 90 CE 40 06      [ 2] 4736         ldw y,APP_VP 
      001AB2 90 B3 1A         [ 2] 4737         cpw y,UVP 
      001AB5 22 05            [ 1] 4738         jrugt 4$
      001AB7 CD 1B A8         [ 4] 4739         call UPDATVP 
      001ABA 20 03            [ 2] 4740         jra 6$
      001ABC                       4741 4$: ; update UVP with APP_VP 
      001ABC 90 BF 1A         [ 2] 4742         ldw UVP,y 
      001ABF                       4743 6$:      
      001ABF CD 14 17         [ 4] 4744         CALL     PRESE   ;initialize data stack and TIB
      001AC2 CD 1A 59         [ 4] 4745         CALL     TBOOT
      001AC5 CD 0C 48         [ 4] 4746         CALL     ATEXE   ;application boot
      001AC8 CD 16 E0         [ 4] 4747         CALL     OVERT
      001ACB CC 14 34         [ 2] 4748         JP     QUIT    ;start interpretation
                                   4749 
                                   4750 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4751         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001ACE 1A 60                   30     .word LINK 
                           001AD0    31     LINK=.
      001AD0 03                      32     .byte 3 
      001AD1 46 50 21                33     .ascii "FP!"
      001AD4                         34 FPSTOR:
      001AD4 90 93            [ 1]   35     ldw y,x
      001AD6 90 FE            [ 2]   36     ldw y,(y)
      001AD8 90 9F            [ 1]   37     ld a,yl 
      001ADA B7 36            [ 1]   38     ld FPTR,a 
      001ADC 1C 00 02         [ 2]   39     addw x,#CELLL 
      001ADF 90 93            [ 1]   40     ldw y,x 
      001AE1 90 FE            [ 2]   41     ldw y,(y)
      001AE3 90 BF 37         [ 2]   42     ldw PTR16,y
      001AE6 1C 00 02         [ 2]   43     addw x,#CELLL 
      001AE9 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001AEA 1A D0                   51     .word LINK 
                           001AEC    52 LINK=.
      001AEC 06                      53     .byte 6 
      001AED 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AF3                         55 EEPROM: 
      001AF3 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001AF7 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001AFA EF 02            [ 2]   58     ldw (2,x),y 
      001AFC 90 5F            [ 1]   59     clrw y 
      001AFE FF               [ 2]   60     ldw (x),y 
      001AFF 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B00 1A EC                   67 	.word LINK 
                           001B02    68 	LINK=.
      001B02 08                      69 	.byte 8 
      001B03 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B0B                         71 EEPLAST:
      001B0B 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B0E 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B12 EF 02            [ 2]   74 	ldw (2,x),y 
      001B14 90 5F            [ 1]   75 	clrw y 
      001B16 FF               [ 2]   76 	ldw (x),y 
      001B17 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B18 1B 02                   83 	.word LINK 
                           001B1A    84 	LINK=.
      001B1A 07                      85 	.byte 7
      001B1B 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B22                         87 EEPRUN:
      001B22 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B25 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B29 EF 02            [ 2]   90 	ldw (2,x),y 
      001B2B 90 5F            [ 1]   91 	clrw y 
      001B2D FF               [ 2]   92 	ldw (x),y 
      001B2E 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B2F 1B 1A                   99 	.word LINK
                           001B31   100 	LINK=.
      001B31 06                     101 	.byte 6 
      001B32 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B38                        103 EEPCP:
      001B38 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B3B 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B3F EF 02            [ 2]  106 	ldw (2,x),y 
      001B41 90 5F            [ 1]  107 	clrw y 
      001B43 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B44 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B45 1B 31                  115 	.word LINK
                           001B47   116 	LINK=.
      001B47 06                     117 	.byte 6
      001B48 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B4E                        119 EEPVP:
      001B4E 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B51 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B55 EF 02            [ 2]  122 	ldw (2,x),y 
      001B57 90 5F            [ 1]  123 	clrw y 
      001B59 FF               [ 2]  124 	ldw (x),y 
      001B5A 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B5B 1B 47                  131 	.word LINK 
                           001B5D   132 	LINK=.
      001B5D 0A                     133 	.byte 10
      001B5E 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B68                        135 UPDATLAST:
      001B68 CD 07 0A         [ 4]  136 	call LAST
      001B6B CD 04 F7         [ 4]  137 	call AT  
      001B6E CD 1B 0B         [ 4]  138 	call EEPLAST
      001B71 CC 1D 5E         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B74 1B 5D                  145 	.word LINK
                           001B76   146 	LINK=.
      001B76 09                     147 	.byte 9
      001B77 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B80                        149 UPDATRUN:
      001B80 CD 1B 22         [ 4]  150 	call EEPRUN
      001B83 CC 1D 5E         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B86 1B 76                  157 	.word LINK 
                           001B88   158 	LINK=.
      001B88 08                     159 	.byte 8 
      001B89 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B91                        161 UPDATCP:
      001B91 CD 06 FA         [ 4]  162 	call CPP 
      001B94 CD 04 F7         [ 4]  163 	call AT 
      001B97 CD 1B 38         [ 4]  164 	call EEPCP 
      001B9A CC 1D 5E         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B9D 1B 88                  171 	.word LINK
                           001B9F   172 	LINK=.
      001B9F 08                     173 	.byte 8 
      001BA0 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BA8                        175 UPDATVP:
      001BA8 CD 06 EC         [ 4]  176 	call VPP 
      001BAB CD 04 F7         [ 4]  177 	call AT
      001BAE CD 1B 4E         [ 4]  178 	call EEPVP 
      001BB1 CC 1D 5E         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BB4 1B 9F                  186     .word LINK 
                           001BB6   187 LINK=.
      001BB6 02                     188     .byte 2
      001BB7 46 40                  189     .ascii "F@"
      001BB9                        190 FARAT:
      001BB9 CD 1A D4         [ 4]  191     call FPSTOR
      001BBC CC 1C 81         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BBF 1B B6                  199     .word LINK
                           001BC1   200     LINK=.
      001BC1 03                     201     .byte 3 
      001BC2 46 43 40               202     .ascii "FC@" 
      001BC5                        203 FARCAT:
      001BC5 CD 1A D4         [ 4]  204     call FPSTOR
      001BC8 CC 1C A3         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BCB 1B C1                  213     .word LINK 
                           001BCD   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BCD 06                     215     .byte 6 
      001BCE 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001BD4                        217 UNLKEE:
      001BD4 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001BD8 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001BDC 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BE0 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BE4 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BE9 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001BEA 1B CD                  230     .word LINK 
                           001BEC   231 LINK=. 
      001BEC 06                     232     .byte 6 
      001BED 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001BF3                        234 UNLKFL:
      001BF3 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001BF7 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001BFB 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BFF 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C03 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C08 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C09 1B EC                  247 	.word LINK 
                           001C0B   248 	LINK=.
      001C0B 06                     249 	.byte 6
      001C0C 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C12                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C12 90 BE 37         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C15 3D 36            [ 1]  255 	tnz FPTR 
      001C17 26 16            [ 1]  256 	jrne 4$
      001C19 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C1D 24 10            [ 1]  258     jruge 4$
      001C1F 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C23 25 0D            [ 1]  260     jrult 9$
      001C25 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C29 22 07            [ 1]  262 	jrugt 9$
      001C2B CD 1B D4         [ 4]  263 	call UNLKEE
      001C2E 81               [ 4]  264 	ret 
      001C2F CD 1B F3         [ 4]  265 4$: call UNLKFL
      001C32 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C33 1C 0B                  273 	.word LINK 
                           001C35   274 	LINK=.
      001C35 04                     275 	.byte 4 
      001C36 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C3A                        277 LOCK: 
      001C3A 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C3E 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C42 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C43 1C 35                  286 	.word LINK 
                           001C45   287 	LINK=. 
      001C45 08                     288 	.byte 8 
      001C46 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C4E                        290 INC_FPTR:
      001C4E 3C 38            [ 1]  291 	inc PTR8 
      001C50 26 0C            [ 1]  292 	jrne 1$
      001C52 90 89            [ 2]  293 	pushw y 
      001C54 90 BE 36         [ 2]  294 	ldw y,FPTR 
      001C57 90 5C            [ 1]  295 	incw y 
      001C59 90 BF 36         [ 2]  296 	ldw FPTR,y
      001C5C 90 85            [ 2]  297 	popw y  
      001C5E 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C5F 1C 45                  304 	.word LINK 
                           001C61   305 	LINK=.
      001C61 04                     306 	.byte 4 
      001C62 50 54 52 2B            307 	.ascii "PTR+"
      001C66                        308 PTRPLUS:
      001C66 90 93            [ 1]  309 	ldw y,x 
      001C68 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C6B 72 B9 00 37      [ 2]  311 	addw y,PTR16 
      001C6F 90 BF 37         [ 2]  312 	ldw PTR16,y  
      001C72 24 02            [ 1]  313 	jrnc 1$
      001C74 3C 36            [ 1]  314 	inc FPTR 
      001C76 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C77 1C 61                  322 	.word LINK 
                           001C79   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001C79 07                     324 	.byte 7 
      001C7A 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001C81                        326 EE_READ:
      001C81 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001C84 92 BC 00 36      [ 5]  328 	ldf a,[FPTR]
      001C88 90 95            [ 1]  329 	ld yh,a 
      001C8A CD 1C 4E         [ 4]  330 	call INC_FPTR 
      001C8D 92 BC 00 36      [ 5]  331 	ldf a,[FPTR]
      001C91 CD 1C 4E         [ 4]  332 	call INC_FPTR 
      001C94 90 97            [ 1]  333 	ld yl,a 
      001C96 FF               [ 2]  334 	ldw (x),y 
      001C97 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001C98 1C 79                  341 	.word LINK 
                           001C9A   342 	LINK=.
      001C9A 08                     343 	.byte 8
      001C9B 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CA3                        345 EE_CREAD:
      001CA3 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CA6 92 BC 00 36      [ 5]  347 	ldf a,[FPTR]	
      001CAA CD 1C 4E         [ 4]  348 	call INC_FPTR
      001CAD 90 5F            [ 1]  349 	clrw y 
      001CAF 90 97            [ 1]  350 	ld yl,a 
      001CB1 FF               [ 2]  351 	ldw (x),y 
      001CB2 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CB3 1C 9A                  361 	.word LINK 
                           001CB5   362 	LINK=. 
      001CB5 07                     363 	.byte 7 
      001CB6 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CBD                        366 WR_BYTE:
      001CBD CD 04 65         [ 4]  367 	call FC_XOFF
      001CC0 90 93            [ 1]  368 	ldw y,x 
      001CC2 90 FE            [ 2]  369 	ldw y,(y)
      001CC4 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001CC7 90 9F            [ 1]  371 	ld a,yl
      001CC9 92 BD 00 36      [ 4]  372 	ldf [FPTR],a
      001CCD 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CD2 CD 04 4F         [ 4]  374 	call FC_XON
      001CD5 CC 1C 4E         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001CD8 1C B5                  384 	.word LINK 
                           001CDA   385 	LINK=.
      001CDA 07                     386 	.byte 7 
      001CDB 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001CE2                        388 WR_WORD:
      001CE2 CD 04 65         [ 4]  389 	call FC_XOFF
      001CE5 90 93            [ 1]  390 	ldw y,x
      001CE7 90 FE            [ 2]  391 	ldw y,(y)
      001CE9 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001CEC 90 9E            [ 1]  393 	ld a,yh 
      001CEE 92 BD 00 36      [ 4]  394 	ldf [FPTR],a
      001CF2 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF7 CD 1C 4E         [ 4]  396 	call INC_FPTR 
      001CFA 90 9F            [ 1]  397 	ld a,yl 
      001CFC 92 BD 00 36      [ 4]  398 	ldf [FPTR],a
      001D00 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D05 CD 04 4F         [ 4]  400 	call FC_XON
      001D08 CC 1C 4E         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D0B 1C DA                  408     .word LINK 
                           001D0D   409 	LINK=.
      001D0D 04                     410     .byte 4 
      001D0E 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D12                        416 EECSTORE:
      001D12 52 02            [ 2]  417 	sub sp,#VSIZE
      001D14 CD 1A D4         [ 4]  418     call FPSTOR
      001D17 E6 01            [ 1]  419 	ld a,(1,x)
      001D19 43               [ 1]  420 	cpl a 
      001D1A 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D1C 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D1E CD 1C 12         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D21 3D 36            [ 1]  425 	tnz FPTR 
      001D23 26 19            [ 1]  426 	jrne 2$
      001D25 90 BE 37         [ 2]  427 	ldw y,PTR16 
      001D28 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D2C 2B 10            [ 1]  429 	jrmi 2$
      001D2E 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D32 2A 0A            [ 1]  431 	jrpl 2$
      001D34 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D36 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D3A 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D3E                        436 2$: 
      001D3E CD 1C BD         [ 4]  437 	call WR_BYTE 	
      001D41 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D43 27 0D            [ 1]  439 	jreq 3$ 
      001D45 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D47 90 5F            [ 1]  441     clrw y
      001D49 90 97            [ 1]  442 	ld yl,a 
      001D4B 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D4E FF               [ 2]  444 	ldw (x),y 
      001D4F CD 1C BD         [ 4]  445 	call WR_BYTE
      001D52                        446 3$: 
      001D52 CD 1C 3A         [ 4]  447 	call LOCK 
      001D55 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D57 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D58 1D 0D                  455 	.word LINK 
                           001D5A   456 	LINK=.
      001D5A 03                     457 	.byte 3 
      001D5B 45 45 21               458 	.ascii "EE!"
      001D5E                        459 EESTORE:
      001D5E CD 1A D4         [ 4]  460 	call FPSTOR 
      001D61 CD 1C 12         [ 4]  461 	call UNLOCK 
      001D64 90 93            [ 1]  462 	ldw y,x 
      001D66 90 FE            [ 2]  463 	ldw y,(y)
      001D68 90 89            [ 2]  464 	pushw y 
      001D6A 90 5E            [ 1]  465 	swapw y 
      001D6C FF               [ 2]  466 	ldw (x),y 
      001D6D CD 1C BD         [ 4]  467 	call WR_BYTE 
      001D70 90 85            [ 2]  468 	popw y 
      001D72 1D 00 02         [ 2]  469 	subw x,#CELLL
      001D75 FF               [ 2]  470 	ldw (x),y 
      001D76 CD 1C BD         [ 4]  471 	call WR_BYTE
      001D79 CC 1C 3A         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001D7C 1D 5A                  480 	.word LINK 
                           001D7E   481 	LINK=. 
      001D7E 09                     482 	.byte 9 
      001D7F 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001D88                        484 row_erase:
      001D88 CD 04 65         [ 4]  485 	call FC_XOFF
      001D8B CD 1A D4         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001D8E 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001D91 90 AE 1D E1      [ 2]  490 	ldw y,#row_erase_proc
      001D95 FF               [ 2]  491 	ldw (x),y 
      001D96 CD 0C 23         [ 4]  492 	call PAD 
      001D99 90 AE 1E 08      [ 2]  493 	ldw y,#row_erase_proc_end 
      001D9D 72 A2 1D E1      [ 2]  494 	subw y,#row_erase_proc
      001DA1 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DA4 FF               [ 2]  496 	ldw (x),y 
      001DA5 CD 0C 5F         [ 4]  497 	call CMOVE 
      001DA8                        498 block_erase:
      001DA8 90 BE 37         [ 2]  499 	ldw y,FPTR+1
      001DAB 90 A3 2A 00      [ 2]  500 	cpw y,#app_space 
      001DAF 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DB1 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DB5 24 04            [ 1]  504 	jruge 1$
      001DB7 CD 04 4F         [ 4]  505 	call FC_XON
      001DBA 81               [ 4]  506 	ret ; bad address 
      001DBB 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DBF 23 04            [ 2]  508 	jrule 2$ 
      001DC1 CD 04 4F         [ 4]  509 	call FC_XON
      001DC4 81               [ 4]  510 	ret ; bad address 
      001DC5                        511 2$:	
      001DC5 CD 1B D4         [ 4]  512 	call UNLKEE 
      001DC8 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001DCA                        515 erase_flash:
      001DCA CD 1B F3         [ 4]  516 	call UNLKFL 
      001DCD                        517 proceed_erase:
      001DCD CD 0C 23         [ 4]  518 	call PAD 
      001DD0 90 93            [ 1]  519 	ldw y,x
      001DD2 90 FE            [ 2]  520 	ldw y,(y)
      001DD4 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001DD7 90 FD            [ 4]  522 	call (y) 
      001DD9 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DDD CD 04 4F         [ 4]  524 	call FC_XON
      001DE0 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001DE1                        528 row_erase_proc:
      001DE1 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DE5 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DE9 4F               [ 1]  531 	clr a 
      001DEA 90 5F            [ 1]  532 	clrw y 
      001DEC 91 A7 00 36      [ 1]  533 	ldf ([FPTR],y),a
      001DF0 90 5C            [ 1]  534     incw y
      001DF2 91 A7 00 36      [ 1]  535 	ldf ([FPTR],y),a
      001DF6 90 5C            [ 1]  536     incw y
      001DF8 91 A7 00 36      [ 1]  537 	ldf ([FPTR],y),a
      001DFC 90 5C            [ 1]  538     incw y
      001DFE 91 A7 00 36      [ 1]  539 	ldf ([FPTR],y),a
      001E02 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E07 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E08                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E08                        555 copy_buffer:
      001E08 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E0A 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E0E 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E12 90 5F            [ 1]  560 	clrw y
      001E14 F6               [ 1]  561 1$:	ld a,(x)
      001E15 91 A7 00 36      [ 1]  562 	ldf ([FPTR],y),a
      001E19 5C               [ 1]  563 	incw x 
      001E1A 90 5C            [ 1]  564 	incw y 
      001E1C 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E1E 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E20 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E25 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E26 81               [ 4]  570 	ret 
      001E27                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E27                        577 copy_prog_to_ram:
      001E27 1D 00 06         [ 2]  578 	subw x,#6
      001E2A 90 AE 1E 08      [ 2]  579 	ldw y,#copy_buffer 
      001E2E EF 04            [ 2]  580 	ldw (4,x),y 
      001E30 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E34 EF 02            [ 2]  582 	ldw (2,x),y 
      001E36 90 AE 1E 27      [ 2]  583 	ldw y,#copy_buffer_end 
      001E3A 72 A2 1E 08      [ 2]  584 	subw y,#copy_buffer  
      001E3E FF               [ 2]  585 	ldw (x),y 
      001E3F CD 0C 5F         [ 4]  586 	call CMOVE 
      001E42 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E43 1D 7E                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                           001E45   597 	LINK=.
      001E45 06                     598 	.byte 6 
      001E46 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E4C                        600 write_row:
      001E4C CD 04 65         [ 4]  601 	call FC_XOFF
      001E4F CD 1A D4         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E52 A6 80            [ 1]  604 	ld a,#0x80 
      001E54 B4 38            [ 1]  605 	and a,PTR8 
      001E56 B7 38            [ 1]  606 	ld PTR8,a  
      001E58 CD 1E 27         [ 4]  607 	call copy_prog_to_ram
      001E5B CD 1C 12         [ 4]  608 	call UNLOCK
      001E5E 90 93            [ 1]  609 	ldw y,x 
      001E60 90 FE            [ 2]  610 	ldw y,(y)
      001E62 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E65 89               [ 2]  612 	pushw x 
      001E66 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001E67 CD 17 00         [ 4]  614 	call TIBBASE
      001E6A CD 1C 3A         [ 4]  615 	call LOCK
      001E6D 85               [ 2]  616 	popw x 
      001E6E CD 04 4F         [ 4]  617 	call FC_XON 
      001E71 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001E72 1E 45                  626 		.word LINK 
                           001E74   627 		LINK=.
      001E74 07                     628 		.byte 7 
      001E75 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001E7C                        630 set_option: 
      001E7C 90 93            [ 1]  631 		ldw y,x 
      001E7E 90 FE            [ 2]  632 		ldw y,(y)
      001E80 27 06            [ 1]  633 		jreq 1$
      001E82 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001E86 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001E88 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001E8B 81               [ 4]  638 		ret
      001E8C 90 58            [ 2]  639 2$:		sllw y 
      001E8E 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001E92 FF               [ 2]  641 		ldw (x),y 
      001E93 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001E96 90 5F            [ 1]  643 		clrw y 
      001E98 FF               [ 2]  644 		ldw (x),y 
      001E99 CD 1D 12         [ 4]  645 		call EECSTORE
      001E9C 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001E9D 1E 74                  655 	.word LINK  
                           001E9F   656 	LINK=.
      001E9F 08                     657 	.byte 8 
      001EA0 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EA8                        659 pristine:
                                    660 ;;; erase EEPROM
      001EA8 CD 1A F3         [ 4]  661 	call EEPROM 
      001EAB CD 07 A5         [ 4]  662 1$:	call DDUP 
      001EAE CD 1D 88         [ 4]  663 	call row_erase
      001EB1 90 93            [ 1]  664 	ldw y,x 
      001EB3 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EB6 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EBA EF 02            [ 2]  667 	ldw (2,x),y
      001EBC 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EC0 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EC2 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001EC6 FF               [ 2]  672 2$:	ldw (x),y   
      001EC7 90 5F            [ 1]  673 	clrw y 
      001EC9 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001ECB CD 07 A5         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001ECE CD 1E 7C         [ 4]  676 	call set_option
      001ED1 90 93            [ 1]  677 	ldw y,x 
      001ED3 90 FE            [ 2]  678 	ldw y,(y)
      001ED5 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001ED7 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001EDB 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001EDD 90 AE 2A 00      [ 2]  683 	ldw y,#app_space
      001EE1 EF 02            [ 2]  684 	ldw (2,x),y  
      001EE3 90 5F            [ 1]  685 	clrw y 
      001EE5 FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001EE6 CD 1D 88         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001EE9 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001EEC 90 5F            [ 1]  690 	clrw y  
      001EEE FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001EEF CD 05 9E         [ 4]  692 	call DUPP  
      001EF2 CD 1F 0F         [ 4]  693 	call reset_vector
      001EF5 90 93            [ 1]  694 	ldw y,x 
      001EF7 90 FE            [ 2]  695 	ldw y,(y)
      001EF9 90 5C            [ 1]  696 	incw y   ; next vector 
      001EFB 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001EFF 25 ED            [ 1]  698 	jrult 4$
      001F01 CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F04 1E 9F                  707 	.word LINK 
                           001F06   708 	LINK=. 
      001F06 08                     709 	.byte 8 
      001F07 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F0F                        711 reset_vector:
      001F0F 90 93            [ 1]  712 	ldw y,x
      001F11 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F14 90 FE            [ 2]  714 	ldw y,(y)
      001F16 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F1A 27 3A            [ 1]  716 	jreq 9$
      001F1C 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F20 22 34            [ 1]  718 	jrugt 9$  
      001F22 90 58            [ 2]  719 	sllw y 
      001F24 90 58            [ 2]  720 	sllw y 
      001F26 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F2A 90 BF 28         [ 2]  722 	ldw YTEMP,y
      001F2D 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F30 EF 02            [ 2]  724 	ldw (2,x),y 
      001F32 90 5F            [ 1]  725 	clrw y
      001F34 FF               [ 2]  726 	ldw (x),y 
      001F35 A6 82            [ 1]  727 	ld a,#0x82 
      001F37 90 95            [ 1]  728 	ld yh,a
      001F39 EF 04            [ 2]  729 	ldw (4,x),y
      001F3B CD 1D 5E         [ 4]  730 	call EESTORE
      001F3E 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F41 90 5F            [ 1]  732 	clrw y 
      001F43 FF               [ 2]  733 	ldw (x),y 
      001F44 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F48 EF 04            [ 2]  735 	ldw (4,x),y 
      001F4A 90 BE 28         [ 2]  736 	ldw y,YTEMP  
      001F4D 72 A9 00 02      [ 2]  737 	addw y,#2
      001F51 EF 02            [ 2]  738 	ldw (2,x),y 
      001F53 CD 1D 5E         [ 4]  739 	call EESTORE
      001F56 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F57 1F 06                  749 	.word LINK 
                           001F59   750 	LINK=.
      001F59 07                     751 	.byte 7
      001F5A 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F61                        758 CHKIVEC:
      001F61 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001F63 90 93            [ 1]  760 	ldw y,x 
      001F65 90 FE            [ 2]  761 	ldw y,(y)
      001F67 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001F69 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001F6B AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001F6E BF 37            [ 2]  765 	ldw PTR16,X
      001F70 AE FF FC         [ 2]  766 	ldw x,#-4 
      001F73 1C 00 04         [ 2]  767 1$:	addw x,#4
      001F76 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001F79 27 22            [ 1]  769 	jreq 9$
      001F7B 90 93            [ 1]  770 	ldw y,x  
      001F7D 91 D6 37         [ 4]  771 	ld a,([PTR16],y)
      001F80 11 03            [ 1]  772 	cp a,(CADR,sp)
      001F82 25 EF            [ 1]  773 	jrult 1$
      001F84 90 5C            [ 1]  774 	incw y 
      001F86 91 D6 37         [ 4]  775 	ld a,([PTR16],y)
      001F89 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001F8B 25 E6            [ 1]  777 	jrult 1$ 
      001F8D 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001F8F 54               [ 2]  779 	srlw x
      001F90 54               [ 2]  780 	srlw x 
      001F91 90 93            [ 1]  781 	ldw y,x 
      001F93 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001F95 FF               [ 2]  783 	ldw (x),y
      001F96 CD 1F 0F         [ 4]  784 	call reset_vector
      001F99 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001F9B 20 D6            [ 2]  786 	jra 1$
      001F9D 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001F9F 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FA2 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FA4 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FA5 1F 59                  798 	.word LINK
                           001FA7   799 	LINK=.
      001FA7 08                     800 	.byte 8 
      001FA8 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FB0                        802 set_vector:
      001FB0 90 93            [ 1]  803     ldw y,x 
      001FB2 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FB5 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FB7 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FBB 23 04            [ 2]  807 	jrule 2$
      001FBD 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FC0 81               [ 4]  809 	ret
      001FC1 90 58            [ 2]  810 2$:	sllw y 
      001FC3 90 58            [ 2]  811 	sllw y 
      001FC5 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      001FC9 90 BF 28         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001FCC A6 82            [ 1]  814 	ld a,#0x82 
      001FCE 90 95            [ 1]  815 	ld yh,a 
      001FD0 E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      001FD2 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      001FD4 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      001FD7 EF 04            [ 2]  820 	ldw (4,x),y 
      001FD9 90 BE 28         [ 2]  821 	ldw y,YTEMP
      001FDC EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      001FDE 90 5F            [ 1]  823 	clrw y 
      001FE0 FF               [ 2]  824 	ldw (x),y   ; as a double 
      001FE1 CD 1D 5E         [ 4]  825 	call EESTORE 
      001FE4 90 93            [ 1]  826 	ldw y,x 
      001FE6 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      001FE9 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      001FEC EF 04            [ 2]  829 	ldw (4,x),y 
      001FEE 90 BE 28         [ 2]  830 	ldw y,YTEMP 
      001FF1 72 A9 00 02      [ 2]  831 	addw y,#2 
      001FF5 EF 02            [ 2]  832 	ldw (2,x),y 
      001FF7 90 5F            [ 1]  833 	clrw y 
      001FF9 FF               [ 2]  834 	ldw (x),y 
      001FFA CD 1D 5E         [ 4]  835 	call EESTORE
      001FFD 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      002000 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      002001 1F A7                  844 	.word LINK
                           002003   845 	LINK=.
      002003 03                     846 	.byte 3
      002004 45 45 2C               847 	.ascii "EE,"
      002007                        848 EE_COMMA:
      002007 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      00200A 90 BE 1C         [ 2]  850 	ldw y,UCP
      00200D 90 89            [ 2]  851 	pushw y 
      00200F EF 02            [ 2]  852 	ldw (2,x),y 
      002011 90 5F            [ 1]  853 	clrw y 
      002013 FF               [ 2]  854 	ldw (x),y
      002014 CD 1D 5E         [ 4]  855 	call EESTORE
      002017 90 85            [ 2]  856 	popw y 
      002019 72 A9 00 02      [ 2]  857 	addw y,#2
      00201D 90 BF 1C         [ 2]  858 	ldw UCP,y
      002020 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      002021 20 03                  866 	.word LINK 
                           002023   867 	LINK=.
      002023 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002024 45 45 43 2C            869 	.ascii "EEC,"
      002028                        870 EE_CCOMMA:
      002028 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      00202B 90 BE 1C         [ 2]  872 	ldw y,UCP
      00202E 90 89            [ 2]  873 	pushw y 
      002030 EF 02            [ 2]  874 	ldw (2,x),y 
      002032 90 5F            [ 1]  875 	clrw y 
      002034 FF               [ 2]  876 	ldw (x),y
      002035 CD 1D 12         [ 4]  877 	call EECSTORE
      002038 90 85            [ 2]  878 	popw y 
      00203A 90 5C            [ 1]  879 	incw y 
      00203C 90 BF 1C         [ 2]  880 	ldw UCP,y
      00203F 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      002040 20 23                  888 	.word LINK 
                           002042   889 	LINK=.
      002042 07                     890 	.byte 7 
      002043 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      00204A                        892 ROW2BUF: 
      00204A CD 1A D4         [ 4]  893 	call FPSTOR 
      00204D A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      00204F 88               [ 1]  895 	push a 
      002050 B4 38            [ 1]  896 	and a,PTR8 ; block align 
      002052 B7 38            [ 1]  897 	ld PTR8,a
      002054 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      002058 92 BC 00 36      [ 5]  899 1$: ldf a,[FPTR]
      00205C 90 F7            [ 1]  900 	ld (y),a
      00205E CD 1C 4E         [ 4]  901 	call INC_FPTR
      002061 90 5C            [ 1]  902 	incw y 
      002063 0A 01            [ 1]  903 	dec (1,sp)
      002065 26 F1            [ 1]  904 	jrne 1$ 
      002067 84               [ 1]  905 	pop a 
      002068 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      002069 20 42                  914 	.word LINK 
                           00206B   915 	LINK=.
      00206B 07                     916 	.byte 7 
      00206C 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      002073                        918 BUF2ROW:
      002073 CD 06 99         [ 4]  919 	call TBUF ; ( ud rb -- )
      002076 CD 07 59         [ 4]  920 	call ROT 
      002079 CD 07 59         [ 4]  921 	call ROT  ; ( rb ud -- )
      00207C CD 1E 4C         [ 4]  922 	call write_row 
      00207F 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      002080 20 6B                  930 	.word LINK 
                           002082   931 	LINK=.
      002082 05                     932 	.byte 5 
      002083 52 46 52 45 45         933 	.ascii "RFREE"
      002088                        934 RFREE:
      002088 E6 01            [ 1]  935 	ld a,(1,x)
      00208A A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      00208C B7 28            [ 1]  937 	ld YTEMP,a 
      00208E A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      002090 B0 28            [ 1]  939 	sub a,YTEMP 
      002092 90 5F            [ 1]  940 	clrw y 
      002094 90 97            [ 1]  941 	ld yl,a
      002096 FF               [ 2]  942 	ldw (x),y 
      002097 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      002098 20 82                  954 	.word LINK 
                           00209A   955 	LINK=. 
      00209A 06                     956 	.byte 6
      00209B 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020A1                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020A1 90 93            [ 1]  961 	ldw y,x 
      0020A3 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020A6 90 BF 28         [ 2]  963 	ldw YTEMP,y 
      0020A9 90 93            [ 1]  964 	ldw y,x 
      0020AB 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020AE 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020B1 FF               [ 2]  967 	ldw (x),y 
      0020B2 90 BE 28         [ 2]  968 	ldw y,YTEMP 
      0020B5 EF 02            [ 2]  969 	ldw (2,x),y 
      0020B7 CD 20 4A         [ 4]  970 	call ROW2BUF 
      0020BA 90 93            [ 1]  971 	ldw y,x 
      0020BC 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020BF 90 89            [ 2]  973 	pushw y ; udl 
      0020C1 90 9F            [ 1]  974 	ld a,yl
      0020C3 A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020C5 90 5F            [ 1]  976 	clrw y 
      0020C7 90 97            [ 1]  977 	ld yl,a 
      0020C9 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      0020CD 1D 00 02         [ 2]  979 	subw x,#CELLL 
      0020D0 FF               [ 2]  980 	ldw (x),y  
      0020D1 CD 05 AE         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      0020D4 CD 05 48         [ 4]  982 	call RFROM  
      0020D7 CD 20 88         [ 4]  983 	call RFREE 
      0020DA CD 08 F3         [ 4]  984 	call MIN
      0020DD CD 05 9E         [ 4]  985 	call DUPP 
      0020E0 CD 05 67         [ 4]  986 	call TOR  
      0020E3 CD 0C 5F         [ 4]  987 	call CMOVE
      0020E6 CD 20 73         [ 4]  988 	call BUF2ROW 
      0020E9 CD 05 48         [ 4]  989 	call RFROM 
      0020EC 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      0020ED 20 9A                  998 	.word LINK 
                           0020EF   999 	LINK=. 
      0020EF 05                    1000 	.byte 5 
      0020F0 46 41 44 44 52        1001 	.ascii "FADDR"
      0020F5                       1002 FADDR:
      0020F5 CC 0B 24         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      0020F8 20 EF                 1019 	.word LINK 
                           0020FA  1020 	LINK=.
      0020FA 05                    1021 	.byte 5 
      0020FB 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      002100                       1023 FMOVE:
      002100 CD 06 AB         [ 4] 1024 	call TFLASH 
      002103 CD 04 F7         [ 4] 1025 	CALL AT 
      002106 CD 04 AC         [ 4] 1026 	CALL QBRAN 
      002109 21 84                 1027 	.word no_move  
      00210B CD 06 FA         [ 4] 1028 	call CPP
      00210E CD 04 F7         [ 4] 1029 	call AT  
      002111 CD 05 9E         [ 4] 1030 	call DUPP ; ( udl udl -- )
      002114 CD 06 DE         [ 4] 1031 	call CNTXT 
      002117 CD 04 F7         [ 4] 1032 	call AT 
      00211A CD 04 79         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00211D 00 02                 1034 	.word 2 
      00211F CD 08 33         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      002122 CD 05 AE         [ 4] 1036 	call SWAPP 
      002125 CD 20 F5         [ 4] 1037 	call FADDR 
      002128 CD 07 59         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      00212B CD 05 9E         [ 4] 1039 	call DUPP 
      00212E CD 05 67         [ 4] 1040 	call TOR    ; R: a 
      002131                       1041 FMOVE2: 
      002131 CD 0C 12         [ 4] 1042 	call HERE 
      002134 CD 05 5B         [ 4] 1043 	call RAT 
      002137 CD 08 33         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      00213A                       1045 next_row:
      00213A CD 05 9E         [ 4] 1046 	call DUPP 
      00213D CD 05 67         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002140 CD 20 A1         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002143 CD 05 9E         [ 4] 1049 	call DUPP 
      002146 CD 05 67         [ 4] 1050 	call TOR
      002149 CD 07 BA         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      00214C CD 05 9E         [ 4] 1052 	call DUPP 
      00214F CD 0B 24         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      002152 CD 05 48         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002155 CD 05 48         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002158 CD 05 C8         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00215B CD 08 33         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      00215E CD 05 9E         [ 4] 1058 	call DUPP 
      002161 CD 04 AC         [ 4] 1059 	call QBRAN
      002164 21 7D                 1060 	.word fmove_done 
      002166 CD 05 AE         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002169 CD 05 48         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      00216C CD 07 BA         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      00216F CD 05 9E         [ 4] 1064 	call DUPP 
      002172 CD 05 67         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002175 CD 05 AE         [ 4] 1066 	call SWAPP 
      002178 CD 04 C3         [ 4] 1067 	call BRAN
      00217B 21 3A                 1068 	.word next_row  
      00217D                       1069 fmove_done:	
      00217D CD 05 48         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002180 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002183 81               [ 4] 1072  	ret  
      002184                       1073 no_move:
      002184 CD 0B 24         [ 4] 1074 	call ZERO
      002187 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      002188 20 FA                 1082 	.word LINK 
                           00218A  1083 	LINK=.
      00218A 09                    1084 	.byte 9
      00218B 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      002194                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002194 CD 1B 4E         [ 4] 1088 	call EEPVP 
      002197 CD 05 94         [ 4] 1089 	call DROP 
      00219A CD 04 F7         [ 4] 1090 	call AT
      00219D CD 06 EC         [ 4] 1091 	call VPP 
      0021A0 CD 04 E0         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021A3 CD 1B 38         [ 4] 1094 	call EEPCP 
      0021A6 CD 05 94         [ 4] 1095 	call DROP
      0021A9 CD 04 F7         [ 4] 1096 	call AT
      0021AC CD 04 79         [ 4] 1097 	call DOLIT 
      0021AF 00 02                 1098 	.word 2 
      0021B1 CD 07 BA         [ 4] 1099 	call PLUS 
      0021B4 CD 05 9E         [ 4] 1100 	call DUPP 
      0021B7 CD 06 DE         [ 4] 1101 	call CNTXT 
      0021BA CD 04 E0         [ 4] 1102 	call STORE
      0021BD CD 07 0A         [ 4] 1103 	call LAST
      0021C0 CD 04 E0         [ 4] 1104 	call STORE 
      0021C3 CD 1B 68         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      0021C6 CD 06 FA         [ 4] 1107 	call CPP 
      0021C9 CD 04 E0         [ 4] 1108 	call STORE
      0021CC CD 1B 91         [ 4] 1109 	call UPDATCP 
      0021CF 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      0021D0 21 8A                 1116 	.word LINK 
                           0021D2  1117 	LINK=. 
      0021D2 06                    1118 	.byte 6
      0021D3 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      0021D9                       1120 IFMOVE:
      0021D9 CD 06 AB         [ 4] 1121 	call TFLASH 
      0021DC CD 04 F7         [ 4] 1122 	CALL AT 
      0021DF CD 04 AC         [ 4] 1123 	CALL QBRAN 
      0021E2 21 84                 1124 	.word no_move 
      0021E4 CD 06 FA         [ 4] 1125 	call CPP 
      0021E7 CD 04 F7         [ 4] 1126 	call AT 
      0021EA CD 05 9E         [ 4] 1127 	call DUPP ; ( udl udl -- )
      0021ED CD 1B 4E         [ 4] 1128 	call EEPVP 
      0021F0 CD 05 94         [ 4] 1129 	call DROP
      0021F3 CD 04 F7         [ 4] 1130 	call AT  ; ( udl udl a )
      0021F6 CD 05 67         [ 4] 1131 	call TOR 
      0021F9 CD 20 F5         [ 4] 1132 	call FADDR
      0021FC CD 05 5B         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      0021FF CC 21 31         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           000001  4752 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4753         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002202 21 D2                   31         .word LINK 
                           002204    32         LINK=.
      002204 02                      33         .byte 2
      002205 50 49                   34         .ascii "PI" 
      002207                         35 PII:
      002207 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      00220A 90 AE 01 63      [ 2]   37         ldw y,#355 
      00220E EF 02            [ 2]   38         ldw (2,x),y 
      002210 90 AE 00 71      [ 2]   39         ldw y,#113 
      002214 FF               [ 2]   40         ldw (x),y 
      002215 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002216 22 04                   48         .word LINK 
                           002218    49         LINK=.
      002218 05                      50         .byte 5 
      002219 53 51 52 54 32          51         .ascii "SQRT2" 
      00221E                         52 SQRT2:
      00221E 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002221 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002225 EF 02            [ 2]   55         ldw (2,x),y 
      002227 90 AE 36 24      [ 2]   56         ldw y,#13860 
      00222B FF               [ 2]   57         ldw (x),y 
      00222C 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      00222D 22 18                   63         .word LINK 
                           00222F    64         LINK=.
      00222F 05                      65         .byte 5
      002230 53 51 52 54 33          66         .ascii "SQRT3" 
      002235                         67 SQRT3: 
      002235 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002238 90 AE 49 81      [ 2]   69     ldw y,#18817 
      00223C EF 02            [ 2]   70     ldw (2,x),y 
      00223E 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      002242 FF               [ 2]   72     ldw (x),y 
      002243 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      002244 22 2F                   78         .word LINK 
                           002246    79         LINK=.
      002246 01                      80         .byte 1
      002247 45                      81         .ascii "E" 
      002248                         82 ENEPER:
      002248 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      00224B 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      00224F EF 02            [ 2]   85     ldw (2,x),y 
      002251 90 AE 29 32      [ 2]   86     ldw y,#10546 
      002255 FF               [ 2]   87     ldw (x),y 
      002256 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      002257 22 46                   92         .word LINK 
                           002259    93         LINK=.
      002259 06                      94         .byte 6 
      00225A 53 51 52 54 31 30       95         .ascii "SQRT10" 
      002260                         96 SQRT10:
      002260 1D 00 04         [ 2]   97     subw x,#2*CELLL
      002263 90 AE 59 98      [ 2]   98     ldw y,#22936 
      002267 EF 02            [ 2]   99     ldw (2,x),y 
      002269 90 AE 1C 55      [ 2]  100     ldw y,#7253
      00226D FF               [ 2]  101     ldw (x),y 
      00226E 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      00226F 22 59                  107         .word LINK 
                           002271   108         LINK=. 
      002271 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      002272 31 32 52 54 32         110         .ascii "12RT2"
      002277                        111 RT12_2:
      002277 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      00227A 90 AE 68 AD      [ 2]  113     ldw y,#26797
      00227E EF 02            [ 2]  114     ldw (2,x),y 
      002280 90 AE 62 CD      [ 2]  115     ldw y,#25293
      002284 FF               [ 2]  116     ldw (x),y 
      002285 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      002286 22 71                  122         .word LINK 
                           002288   123         LINK=.
      002288 05                     124         .byte 5 
      002289 4C 4F 47 32 53         125         .ascii "LOG2S" 
      00228E                        126 LOG2S:
      00228E 1D 00 04         [ 2]  127     subw x,#2*CELLL
      002291 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002295 EF 02            [ 2]  129     ldw (2,x),y 
      002297 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      00229B FF               [ 2]  131     ldw (x),y 
      00229C 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      00229D 22 88                  137         .word LINK 
                           00229F   138         LINK=.
      00229F 04                     139         .byte 4 
      0022A0 4C 4E 32 53            140         .ascii "LN2S" 
      0022A4                        141 LN2S: 
      0022A4 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022A7 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022AB EF 02            [ 2]  144     ldw (2,x),y 
      0022AD 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022B1 FF               [ 2]  146     ldw (x),y 
      0022B2 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                   4754 .endif
                           000001  4755 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4756         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022B3 22 9F                   32     .word LINK 
                           0022B5    33     LINK=.
      0022B5 06                      34     .byte 6
      0022B6 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022BC                         36 CALLOT:
      0022BC CD 06 FA         [ 4]   37     CALL CPP
      0022BF CD 05 9E         [ 4]   38     CALL DUPP 
      0022C2 CD 04 F7         [ 4]   39     CALL AT 
      0022C5 CD 05 67         [ 4]   40     CALL TOR 
      0022C8 CD 0B 94         [ 4]   41     CALL PSTOR 
      0022CB CD 1B 91         [ 4]   42     CALL UPDATCP 
      0022CE CD 05 48         [ 4]   43     CALL RFROM
      0022D1 CC 0B 24         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      0022D4 22 B5                   52     .word LINK 
                           0022D6    53     LINK=.
      0022D6 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0022D7 43 54 41 42 4C 45       55     .ascii "CTABLE"
      0022DD                         56 CTABLE:
      0022DD CD 22 BC         [ 4]   57     CALL CALLOT     
      0022E0 CC 18 8A         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      0022E3 22 D6                   67     .word LINK 
                           0022E5    68     LINK=.
      0022E5 06                      69     .byte 6
      0022E6 57 54 41 42 4C 45       70     .ascii "WTABLE"
      0022EC                         71 WTABLE:
      0022EC CD 0A AB         [ 4]   72     CALL CELLS  
      0022EF CD 22 BC         [ 4]   73     CALL CALLOT 
      0022F2 CC 18 8A         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      0022F5 22 E5                   82     .word LINK 
                           0022F7    83     LINK=.
      0022F7 06                      84     .byte 6
      0022F8 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      0022FE                         86 CTAT:
      0022FE CD 1A D4         [ 4]   87     call FPSTOR 
      002301 CD 1C 66         [ 4]   88     call PTRPLUS 
      002304 CC 1C A3         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      002307 22 F7                   97     .word LINK 
                           002309    98     LINK=.
      002309 06                      99     .byte 6
      00230A 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002310                        101 WTAT:
      002310 CD 1A D4         [ 4]  102     call FPSTOR 
      002313 CD 0A AB         [ 4]  103     call CELLS 
      002316 CD 1C 66         [ 4]  104     call PTRPLUS 
      002319 CD 1C 81         [ 4]  105     call EE_READ 
      00231C 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      00231D 23 09                  113     .word LINK 
                           00231F   114     LINK=.
      00231F 06                     115     .byte 6 
      002320 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002326                        117 CTINIT:
      002326 CD 1A D4         [ 4]  118     CALL FPSTOR
      002329 CD 1C 12         [ 4]  119     CALL UNLOCK
      00232C CD 0B 24         [ 4]  120     CALL ZERO 
      00232F CD 0A B8         [ 4]  121 1$: CALL ONEP 
      002332 CD 05 9E         [ 4]  122     CALL DUPP 
      002335 CD 23 82         [ 4]  123     CALL INTQ 
      002338 CD 04 AC         [ 4]  124     CALL QBRAN 
      00233B 23 45                  125     .word 2$
      00233D CD 1C BD         [ 4]  126     call WR_BYTE 
      002340 CD 04 C3         [ 4]  127     CALL BRAN 
      002343 23 2F                  128     .word 1$ 
      002345 CD 07 9A         [ 4]  129 2$: CALL DDROP 
      002348 CD 1C 3A         [ 4]  130     CALL LOCK 
      00234B 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      00234C 23 1F                  138     .word LINK 
                           00234E   139     LINK=.
      00234E 06                     140     .byte 6 
      00234F 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002355                        142 WTINIT:
      002355 CD 1A D4         [ 4]  143     CALL FPSTOR
      002358 CD 1C 12         [ 4]  144     CALL UNLOCK
      00235B CD 0B 24         [ 4]  145     CALL ZERO 
      00235E CD 0A B8         [ 4]  146 1$: CALL ONEP 
      002361 CD 05 9E         [ 4]  147     CALL DUPP
      002364 CD 23 82         [ 4]  148     CALL INTQ
      002367 CD 04 AC         [ 4]  149     CALL QBRAN 
      00236A 23 74                  150     .word 2$
      00236C CD 1C E2         [ 4]  151     call WR_WORD 
      00236F CD 04 C3         [ 4]  152     CALL BRAN 
      002372 23 5E                  153     .word 1$ 
      002374 CD 07 9A         [ 4]  154 2$: CALL DDROP 
      002377 CD 1C 3A         [ 4]  155     CALL LOCK 
      00237A 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      00237B 23 4E                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           00237D   165     LINK=.
      00237D 04                     166     .byte 4
      00237E 5B 4E 5D 3F            167     .ascii "[N]?" 
      002382                        168 INTQ:
      002382 CD 0E B3         [ 4]  169     CALL CR 
      002385 CD 04 79         [ 4]  170     call DOLIT 
      002388 00 5B                  171     .word '[
      00238A CD 04 38         [ 4]  172     CALL EMIT 
      00238D CD 0F 6C         [ 4]  173     CALL DOT 
      002390 CD 0E F2         [ 4]  174     CALL  DOTQP
      002393 03                     175     .byte 3
      002394 5D 3F 20               176     .ascii "]? " 
      002397 CD 12 FB         [ 4]  177     CALL QUERY 
      00239A CD 11 26         [ 4]  178     call TOKEN 
      00239D CC 23 AA         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                   4757 .endif
                           000001  4758 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   4759         .include "double.asm"
                                      1 ;************************************
                                      2 ;    doubles integers library 
                                      3 ;    doubles are signed 32 bits 
                                      4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      5 
                                      6     .module DOUBLE 
                                      7 
                                      8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      9 ;   NUMBER? (a -- s|d T | a F )
                                     10 ;   convert string to integer 
                                     11 ;   double begin with '!' 
                                     12 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0023A0                         13     _HEADER NUMBQ,7,"NUMBER?"
      0023A0 23 7D                    1         .word LINK 
                           0023A2     2         LINK=.
      0023A2 07                       3         .byte 7  
      0023A3 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0023AA                          5         NUMBQ:
                                     14 ; save current base value 
      0023AA CD 06 5B         [ 4]   15     CALL BASE 
      0023AD CD 04 F7         [ 4]   16     CALL AT 
      0023B0 CD 05 67         [ 4]   17     CALL TOR 
                                     18 ; initialize integer to 0     
      0023B3 1D 00 04         [ 2]   19     SUBW X,#4 
      0023B6 90 5F            [ 1]   20     CLRW Y 
      0023B8 FF               [ 2]   21     LDW (X),Y 
      0023B9 EF 02            [ 2]   22     LDW (2,X),Y ; a 0 0 R: base  
      0023BB                         23     _DOLIT 2 
      0023BB CD 04 79         [ 4]    1     CALL DOLIT 
      0023BE 00 02                    2     .word 2 
      0023C0 CD 0B 7D         [ 4]   24     CALL PICK  ; a 0 0 a R: base    
      0023C3 CD 0B FB         [ 4]   25     CALL COUNT ; a 0 0 a+ n 
                                     26 ; check for '!' double integer 
      0023C6 CD 05 C8         [ 4]   27     CALL OVER  ; a 0 0 a+ n a+
      0023C9 CD 05 15         [ 4]   28     CALL CAT   ; a 0 0 a+ n c 
      0023CC                         29     _DOLIT '!' ; a 0 0 a+ n c '!' 
      0023CC CD 04 79         [ 4]    1     CALL DOLIT 
      0023CF 00 21                    2     .word '!' 
      0023D1 CD 08 5B         [ 4]   30     CALL EQUAL 
      0023D4 CD 05 67         [ 4]   31     CALL TOR   ; a 0 0 a+ n R: base d? 
      0023D7 CD 05 5B         [ 4]   32     CALL RAT   ; a 0 0 a+ n d? R: base d?
      0023DA                         33     _QBRAN NUMQ0
      0023DA CD 04 AC         [ 4]    1     CALL QBRAN
      0023DD 23 EB                    2     .word NUMQ0
                                     34 ; update a and count
      0023DF CD 05 AE         [ 4]   35     CALL SWAPP 
      0023E2 CD 0A B8         [ 4]   36     CALL ONEP 
      0023E5 CD 05 AE         [ 4]   37     CALL SWAPP 
      0023E8 CD 0A C5         [ 4]   38     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                     39 ; check for '$' hexadecimal  
      0023EB                         40 NUMQ0: 
      0023EB CD 05 C8         [ 4]   41     CALL OVER   
      0023EE CD 05 15         [ 4]   42     CALL CAT   
      0023F1                         43     _DOLIT '$'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0023F1 CD 04 79         [ 4]    1     CALL DOLIT 
      0023F4 00 24                    2     .word '$' 
      0023F6 CD 08 5B         [ 4]   44     CALL EQUAL ; a 0 0 a+ n- f  
      0023F9                         45     _QBRAN NUMQ1 
      0023F9 CD 04 AC         [ 4]    1     CALL QBRAN
      0023FC 24 0D                    2     .word NUMQ1
      0023FE CD 0D CA         [ 4]   46     CALL HEX   ; switch to hexadecimal base 
                                     47 ; update a and count 
      002401 CD 05 AE         [ 4]   48     CALL SWAPP 
      002404 CD 0A B8         [ 4]   49     CALL ONEP 
      002407 CD 05 AE         [ 4]   50     CALL SWAPP
      00240A CD 0A C5         [ 4]   51     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                     52 ; check for minus sign 
      00240D                         53 NUMQ1:    
      00240D CD 05 C8         [ 4]   54     CALL OVER 
      002410 CD 05 15         [ 4]   55     CALL CAT   
      002413                         56     _DOLIT '-' 
      002413 CD 04 79         [ 4]    1     CALL DOLIT 
      002416 00 2D                    2     .word '-' 
      002418 CD 08 5B         [ 4]   57     CALL EQUAL 
      00241B CD 05 67         [ 4]   58     CALL TOR ; R: base d? sign  
                                     59 ; update a and n, if sign==0 no change  
      00241E CD 05 5B         [ 4]   60     CALL RAT   
      002421 CD 07 BA         [ 4]   61     CALL PLUS  
      002424 CD 05 AE         [ 4]   62     CALL SWAPP 
      002427 CD 05 5B         [ 4]   63     CALL RAT 
      00242A CD 08 33         [ 4]   64     CALL SUBB  
      00242D CD 05 AE         [ 4]   65     CALL SWAPP 
                                     66 ; check for end of string     
      002430 CD 07 48         [ 4]   67     CALL QDUP    ; count==0?
      002433                         68     _QBRAN NUMQ6 ; yes , not a number 
      002433 CD 04 AC         [ 4]    1     CALL QBRAN
      002436 24 B4                    2     .word NUMQ6
                                     69 ; initialize loop counter 
      002438 CD 0A C5         [ 4]   70     CALL ONEM    ; n-1 
      00243B CD 05 67         [ 4]   71     CALL TOR     ; loop counter 
                                     72 ; parse digits loop 
      00243E                         73 NUMQ2:   ; a dlo dhi a+ R: base d? sign cntr  
      00243E CD 05 9E         [ 4]   74     CALL DUPP 
      002441 CD 05 67         [ 4]   75     CALL TOR   ; a dlo dhi a+ R: base d? sign cntr a+ 
      002444 CD 05 15         [ 4]   76     CALL CAT 
      002447 CD 06 5B         [ 4]   77     CALL BASE 
      00244A CD 04 F7         [ 4]   78     CALL AT 
      00244D CD 0D F3         [ 4]   79     CALL DIGTQ  ; a dlo dhi u f R: base d? sign cntr a+  
      002450                         80     _QBRAN NUMQ4 ; not digit  
      002450 CD 04 AC         [ 4]    1     CALL QBRAN
      002453 24 A4                    2     .word NUMQ4
      002455 CD 05 67         [ 4]   81     CALL TOR    ; a dlo dhi R: base d? sign cntr a+ digit   
      002458 CD 06 5B         [ 4]   82     CALL BASE 
      00245B CD 04 F7         [ 4]   83     CALL AT 
      00245E CD 25 E9         [ 4]   84     CALL DSSTAR 
      002461 CD 05 48         [ 4]   85     CALL RFROM 
      002464 CD 0B 24         [ 4]   86     CALL ZERO 
      002467 CD 29 05         [ 4]   87     CALL DPLUS  
      00246A CD 05 48         [ 4]   88     CALL RFROM  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00246D CD 0A B8         [ 4]   89     CALL ONEP    ; a dlo dhi a+ R: base d? sign cntr 
      002470                         90     _DONXT NUMQ2 
      002470 CD 04 8D         [ 4]    1     CALL DONXT 
      002473 24 3E                    2     .word NUMQ2 
      002475 CD 05 94         [ 4]   91     CALL DROP   ; a dlo dhi R: base d? sign 
      002478 CD 05 48         [ 4]   92     CALL RFROM  
      00247B                         93     _QBRAN NUMQ3
      00247B CD 04 AC         [ 4]    1     CALL QBRAN
      00247E 24 83                    2     .word NUMQ3
      002480 CD 07 F7         [ 4]   94     CALL DNEGA
      002483                         95 NUMQ3: 
      002483 CD 07 59         [ 4]   96     CALL ROT ; dlo dhi a  R: base d?
      002486 CD 05 94         [ 4]   97     CALL DROP 
      002489                         98     _DOLIT -1 
      002489 CD 04 79         [ 4]    1     CALL DOLIT 
      00248C FF FF                    2     .word -1 
      00248E CD 05 48         [ 4]   99     CALL RFROM ; dlo dhi -1 d? R: base 
      002491 CD 07 D4         [ 4]  100     CALL INVER 
      002494                        101     _QBRAN NUMQ8 
      002494 CD 04 AC         [ 4]    1     CALL QBRAN
      002497 24 B9                    2     .word NUMQ8
      002499 CD 05 AE         [ 4]  102     CALL SWAPP 
      00249C CD 05 94         [ 4]  103     CALL DROP 
      00249F                        104     _BRAN NUMQ8 
      00249F CD 04 C3         [ 4]    1     CALL BRAN 
      0024A2 24 B9                    2     .word NUMQ8 
      0024A4                        105 NUMQ4: ; 'u' not digit error , ( a dlo dhi u R: base d? sign cntr a+ )
      0024A4 1C 00 04         [ 2]  106     ADDW X,#4 ; drop dhi u, ( a dlo R: base d? sign cntr a+ ) 
      0024A7 5B 08            [ 2]  107     ADDW SP,#8 ; drop d? sign cntr a+  R: base 
      0024A9 90 5F            [ 1]  108     CLRW Y 
      0024AB FF               [ 2]  109     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
      0024AC                        110     _BRAN NUMQ8 
      0024AC CD 04 C3         [ 4]    1     CALL BRAN 
      0024AF 24 B9                    2     .word NUMQ8 
      0024B1                        111 NUMQ5: 
      0024B1 CD 05 9E         [ 4]  112     CALL DUPP  ; a 0 dlo dlo 
                                    113 ; no digits error 
      0024B4                        114 NUMQ6: ;   a 0 0 a+ R: base d? sign 
      0024B4 1C 00 04         [ 2]  115     ADDW X,#4 ; a 0 R: base d? sign 
      0024B7 5B 04            [ 2]  116     ADDW SP,#4  ; a 0 R: base 
                                    117 ; restore original base value     
      0024B9                        118 NUMQ8: 
      0024B9 CD 05 48         [ 4]  119     CALL RFROM 
      0024BC CD 06 5B         [ 4]  120     CALL BASE 
      0024BF CD 04 E0         [ 4]  121     CALL STORE 
      0024C2 81               [ 4]  122     RET 
                                    123 
                                    124 
                                    125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    126 ;    D0= ( d -- 0|-1 )
                                    127 ;    check if double is 0 
                                    128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024C3                        129     _HEADER DZEQUAL,3,"D0="
      0024C3 23 A2                    1         .word LINK 
                           0024C5     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0024C5 03                       3         .byte 3  
      0024C6 44 30 3D                 4         .ascii "D0="
      0024C9                          5         DZEQUAL:
      0024C9 CD 05 FE         [ 4]  130     CALL ORR 
      0024CC A6 FF            [ 1]  131     LD A,#0xFF
      0024CE 90 93            [ 1]  132     LDW Y,X
      0024D0 90 FE            [ 2]  133     LDW Y,(Y)
      0024D2 90 A3 00 00      [ 2]  134     CPW Y,#0 
      0024D6 27 01            [ 1]  135     JREQ  ZEQ1
      0024D8 4F               [ 1]  136     CLR A   ;false
      0024D9                        137 ZEQ1:
      0024D9 F7               [ 1]  138     LD     (X),A
      0024DA E7 01            [ 1]  139     LD (1,X),A
      0024DC 81               [ 4]  140 	RET     
                                    141     
                                    142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    143 ;  DNEGATE ( d -- d )
                                    144 ;  negate double (2's complement)
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024DD                        146     _HEADER DNEGAT,7,"DNEGATE"
      0024DD 24 C5                    1         .word LINK 
                           0024DF     2         LINK=.
      0024DF 07                       3         .byte 7  
      0024E0 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0024E7                          5         DNEGAT:
      0024E7 CD 07 D4         [ 4]  147     CALL INVER
      0024EA CD 05 AE         [ 4]  148     CALL SWAPP 
      0024ED CD 07 D4         [ 4]  149     CALL INVER 
      0024F0 90 93            [ 1]  150     LDW  Y,X 
      0024F2 90 FE            [ 2]  151     LDW Y,(Y)
      0024F4 72 A9 00 01      [ 2]  152     ADDW Y,#1 
      0024F8 FF               [ 2]  153     LDW (X),Y 
      0024F9 24 0B            [ 1]  154     JRNC DNEG1 
      0024FB 90 93            [ 1]  155     LDW Y,X 
      0024FD 90 EE 02         [ 2]  156     LDW Y,(2,Y)
      002500 72 A9 00 01      [ 2]  157     ADDW Y,#1
      002504 EF 02            [ 2]  158     LDW (2,X),Y 
      002506                        159 DNEG1:
      002506 CD 05 AE         [ 4]  160     CALL SWAPP 
      002509 81               [ 4]  161     RET      
                                    162 
                                    163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    164 ;   DABS ( d -- d )
                                    165 ;   absolute value of double
                                    166 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00250A                        167     _HEADER DABS,4,"DABS"
      00250A 24 DF                    1         .word LINK 
                           00250C     2         LINK=.
      00250C 04                       3         .byte 4  
      00250D 44 41 42 53              4         .ascii "DABS"
      002511                          5         DABS:
      002511 CD 05 9E         [ 4]  168     CALL DUPP 
      002514 CD 05 D7         [ 4]  169     CALL ZLESS 
      002517                        170     _QBRAN DABS1 
      002517 CD 04 AC         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00251A 25 1F                    2     .word DABS1
      00251C CD 07 F7         [ 4]  171     CALL DNEGA 
      00251F                        172 DABS1:
      00251F 81               [ 4]  173     RET 
                                    174 
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 ;  DSIGN ( d -- d f )
                                    177 ;  sign of double 
                                    178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002520                        179     _HEADER DSIGN,5,"DSIGN"
      002520 25 0C                    1         .word LINK 
                           002522     2         LINK=.
      002522 05                       3         .byte 5  
      002523 44 53 49 47 4E           4         .ascii "DSIGN"
      002528                          5         DSIGN:
      002528 A6 00            [ 1]  180     LD A,#0 
      00252A 90 93            [ 1]  181     LDW Y,X 
      00252C 90 FE            [ 2]  182     LDW Y,(Y)
      00252E 2A 02            [ 1]  183     JRPL DSIGN1
      002530 A6 FF            [ 1]  184     LD A,#0XFF 
      002532                        185 DSIGN1:
      002532 1D 00 02         [ 2]  186     SUBW X,#2 
      002535 F7               [ 1]  187     LD (X),A 
      002536 E7 01            [ 1]  188     LD (1,X),A 
      002538 81               [ 4]  189     RET 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   D/MOD ( d s - r qd )
                                    193 ;   unsigned divide double by single 
                                    194 ;   return double quotient 
                                    195 ;   and single remainder 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002539                        197     _HEADER DSLMOD,5,"D/MOD"
      002539 25 22                    1         .word LINK 
                           00253B     2         LINK=.
      00253B 05                       3         .byte 5  
      00253C 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002541                          5         DSLMOD:
      002541 90 93            [ 1]  198         LDW     Y,X             ; stack pointer to Y
      002543 FE               [ 2]  199         LDW     X,(X)           ; un
      002544 BF 28            [ 2]  200         LDW     YTEMP,X         ; save un
      002546 93               [ 1]  201         LDW     X,Y
      002547 89               [ 2]  202         PUSHW   X               ; save stack pointer
      002548 90 89            [ 2]  203         PUSHW   Y 
      00254A EE 02            [ 2]  204         LDW     X,(2,X)           ; X=udh
      00254C 90 BE 28         [ 2]  205         LDW     Y,YTEMP         ; divisor 
      00254F 65               [ 2]  206         DIVW    X,Y 
      002550 BF 26            [ 2]  207         LDW     XTEMP,X         ; QUOTIENT hi 
      002552 93               [ 1]  208         LDW     X,Y             ; remainder in X 
      002553 90 85            [ 2]  209         POPW    Y 
      002555 90 EE 04         [ 2]  210         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002558 A6 10            [ 1]  211         LD      A,#16           ; loop count
      00255A 90 58            [ 2]  212         SLLW    Y               ; udl shift udl into udh
      00255C                        213 DSLMOD3:
      00255C 59               [ 2]  214         RLCW    X               ; rotate udl bit into uhdh (= remainder)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00255D 25 04            [ 1]  215         JRC     DSLMODa         ; if carry out of rotate
      00255F B3 28            [ 2]  216         CPW     X,YTEMP         ; compare udh to un
      002561 25 05            [ 1]  217         JRULT   DSLMOD4         ; can't subtract
      002563                        218 DSLMODa:
      002563 72 B0 00 28      [ 2]  219         SUBW    X,YTEMP         ; can subtract
      002567 98               [ 1]  220         RCF
      002568                        221 DSLMOD4:
      002568 8C               [ 1]  222         CCF                     ; quotient bit
      002569 90 59            [ 2]  223         RLCW    Y               ; rotate into quotient, rotate out udl
      00256B 4A               [ 1]  224         DEC     A               ; repeat
      00256C 26 EE            [ 1]  225         JRNE    DSLMOD3           ; if A == 0
      00256E                        226 DSLMODb:
      00256E BF 28            [ 2]  227         LDW     YTEMP,X         ; done, save remainder
      002570 85               [ 2]  228         POPW    X               ; restore stack pointer
      002571 EF 02            [ 2]  229         LDW     (2,X),Y           ; save quotient low 
      002573 90 BE 26         [ 2]  230         LDW     Y,XTEMP         ; quotient hi 
      002576 FF               [ 2]  231         LDW     (X),Y           ; save quotient hi 
      002577 90 BE 28         [ 2]  232         LDW     Y,YTEMP         ; remainder onto stack
      00257A EF 04            [ 2]  233         LDW     (4,X),Y
      00257C 81               [ 4]  234         RET 
                                    235 
                                    236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    237 ;   D# ( d -- d )
                                    238 ;   extract least digit 
                                    239 ;   from double integer 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00257D                        241     _HEADER DDIG,2,"D#"
      00257D 25 3B                    1         .word LINK 
                           00257F     2         LINK=.
      00257F 02                       3         .byte 2  
      002580 44 23                    4         .ascii "D#"
      002582                          5         DDIG:
      002582 CD 06 5B         [ 4]  242     CALL BASE 
      002585 CD 04 F7         [ 4]  243     CALL AT 
      002588 CD 25 41         [ 4]  244     CALL DSLMOD
      00258B CD 07 59         [ 4]  245     CALL ROT   
      00258E CD 0C F3         [ 4]  246     CALL DIGIT 
      002591 CD 0D 3F         [ 4]  247     CALL HOLD 
      002594 81               [ 4]  248     RET 
                                    249 
                                    250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    251 ;    D#S ( d -- s )
                                    252 ;   extract digit from double 
                                    253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002595                        254     _HEADER DDIGS,3,"D#S"
      002595 25 7F                    1         .word LINK 
                           002597     2         LINK=.
      002597 03                       3         .byte 3  
      002598 44 23 53                 4         .ascii "D#S"
      00259B                          5         DDIGS:
      00259B CD 25 82         [ 4]  255     CALL    DDIG 
      00259E CD 07 A5         [ 4]  256     CALL    DDUP 
      0025A1 CD 24 C9         [ 4]  257     CALL    DZEQUAL
      0025A4                        258     _QBRAN  DDIGS 
      0025A4 CD 04 AC         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0025A7 25 9B                    2     .word DDIGS
      0025A9 CD 05 94         [ 4]  259     CALL    DROP 
      0025AC 81               [ 4]  260     RET 
                                    261 
                                    262 
                                    263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    264 ;   D. ( d -- )
                                    265 ;   display double integer 
                                    266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025AD                        267     _HEADER DDOT,2,"D."
      0025AD 25 97                    1         .word LINK 
                           0025AF     2         LINK=.
      0025AF 02                       3         .byte 2  
      0025B0 44 2E                    4         .ascii "D."
      0025B2                          5         DDOT:
      0025B2 CD 0E 6B         [ 4]  268     CALL SPACE 
      0025B5 CD 25 28         [ 4]  269     CALL DSIGN 
      0025B8 CD 05 67         [ 4]  270     CALL TOR
      0025BB CD 05 5B         [ 4]  271     CALL RAT 
      0025BE                        272     _QBRAN DDOT0
      0025BE CD 04 AC         [ 4]    1     CALL QBRAN
      0025C1 25 C6                    2     .word DDOT0
      0025C3 CD 07 F7         [ 4]  273     CALL DNEGA 
      0025C6                        274 DDOT0:     
      0025C6 CD 0D 2F         [ 4]  275     CALL BDIGS 
      0025C9 CD 25 9B         [ 4]  276     CALL DDIGS 
      0025CC CD 05 48         [ 4]  277     CALL RFROM 
      0025CF                        278     _QBRAN DDOT1 
      0025CF CD 04 AC         [ 4]    1     CALL QBRAN
      0025D2 25 DC                    2     .word DDOT1
      0025D4                        279     _DOLIT '-' 
      0025D4 CD 04 79         [ 4]    1     CALL DOLIT 
      0025D7 00 2D                    2     .word '-' 
      0025D9 CD 0D 3F         [ 4]  280     CALL HOLD 
      0025DC                        281 DDOT1: 
      0025DC CD 0D 94         [ 4]  282     CALL EDIGS 
      0025DF CD 0E 95         [ 4]  283     CALL TYPES     
      0025E2 81               [ 4]  284     RET 
                                    285 
                                    286 
                                    287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    288 ; multiply double by single 
                                    289 ; return double 
                                    290 ;  ( d s -- d )
                                    291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025E3                        292     _HEADER DSSTAR,3,"DS*"
      0025E3 25 AF                    1         .word LINK 
                           0025E5     2         LINK=.
      0025E5 03                       3         .byte 3  
      0025E6 44 53 2A                 4         .ascii "DS*"
      0025E9                          5         DSSTAR:
                                    293 ;DSSTAR:
      0025E9 CD 05 67         [ 4]  294     CALL TOR
      0025EC CD 05 9E         [ 4]  295     CALL DUPP 
      0025EF CD 05 D7         [ 4]  296     CALL ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0025F2 CD 05 9E         [ 4]  297     CALL DUPP 
      0025F5 CD 05 67         [ 4]  298     CALL TOR 
      0025F8                        299     _QBRAN DSSTAR1 
      0025F8 CD 04 AC         [ 4]    1     CALL QBRAN
      0025FB 26 00                    2     .word DSSTAR1
      0025FD CD 07 F7         [ 4]  300     CALL DNEGA 
      002600                        301 DSSTAR1:
      002600 CD 05 48         [ 4]  302     CALL RFROM 
      002603 CD 07 78         [ 4]  303     CALL NROT       
      002606 CD 05 AE         [ 4]  304     CALL SWAPP 
      002609 CD 05 5B         [ 4]  305     CALL RAT 
      00260C CD 09 ED         [ 4]  306     CALL UMSTA
      00260F CD 07 59         [ 4]  307     CALL ROT 
      002612 CD 05 48         [ 4]  308     CALL RFROM 
      002615 CD 09 ED         [ 4]  309     CALL UMSTA 
      002618 CD 05 94         [ 4]  310     CALL DROP ; DROP OVERFLOW 
      00261B CD 07 BA         [ 4]  311     CALL PLUS 
      00261E CD 07 59         [ 4]  312     CALL ROT 
      002621                        313     _QBRAN DSSTAR3 
      002621 CD 04 AC         [ 4]    1     CALL QBRAN
      002624 26 29                    2     .word DSSTAR3
      002626 CD 07 F7         [ 4]  314     CALL DNEGA 
      002629                        315 DSSTAR3:
      002629 81               [ 4]  316     RET 
                                    317 
                                    318 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    319 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    320 ;  swap double 
                                    321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00262A                        322     _HEADER DSWAP,5,"2SWAP"
      00262A 25 E5                    1         .word LINK 
                           00262C     2         LINK=.
      00262C 05                       3         .byte 5  
      00262D 32 53 57 41 50           4         .ascii "2SWAP"
      002632                          5         DSWAP:
      002632 90 93            [ 1]  323     LDW Y,X 
      002634 90 FE            [ 2]  324     LDW Y,(Y)
      002636 90 BF 28         [ 2]  325     LDW YTEMP,Y ; d2 hi 
      002639 90 93            [ 1]  326     LDW Y,X 
      00263B 90 EE 02         [ 2]  327     LDW Y,(2,Y)
      00263E 90 BF 26         [ 2]  328     LDW XTEMP,Y  ; d2 lo 
      002641 90 93            [ 1]  329     LDW Y,X 
      002643 90 EE 04         [ 2]  330     LDW Y,(4,Y)  ; d1 hi 
      002646 FF               [ 2]  331     LDW (X),Y 
      002647 90 93            [ 1]  332     LDW Y,X
      002649 90 EE 06         [ 2]  333     LDW Y,(6,Y)  ; d1 lo 
      00264C EF 02            [ 2]  334     LDW (2,X),Y
      00264E 90 BE 28         [ 2]  335     LDW Y,YTEMP  
      002651 EF 04            [ 2]  336     LDW (4,X),Y 
      002653 90 BE 26         [ 2]  337     LDW Y,XTEMP 
      002656 EF 06            [ 2]  338     LDW (6,X),Y 
      002658 81               [ 4]  339     RET 
                                    340 
                                    341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    342 ;    DCLZ ( d -- u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                    343 ;    double count leading zeros
                                    344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002659                        345     _HEADER DCLZ,4,"DCLZ"
      002659 26 2C                    1         .word LINK 
                           00265B     2         LINK=.
      00265B 04                       3         .byte 4  
      00265C 44 43 4C 5A              4         .ascii "DCLZ"
      002660                          5         DCLZ:
      002660 4F               [ 1]  346     CLR A 
      002661 90 93            [ 1]  347     LDW Y,X 
      002663 90 FE            [ 2]  348     LDW Y,(Y)
      002665 2B 15            [ 1]  349     JRMI DCLZ8 ; no leading zero 
      002667 27 06            [ 1]  350     JREQ DCLZ4 ; >=16 
      002669                        351 DCLZ1: ; <16
      002669 90 58            [ 2]  352     SLLW Y 
      00266B 2B 0F            [ 1]  353     JRMI DCLZ8 
      00266D 20 FA            [ 2]  354     JRA DCLZ1 
      00266F                        355 DCLZ4:
      00266F A6 10            [ 1]  356     LD A,#16 
      002671 90 93            [ 1]  357     LDW Y,X 
      002673 90 EE 02         [ 2]  358     LDW Y,(2,Y)
      002676 2B 04            [ 1]  359     JRMI DCLZ8 
      002678 26 EF            [ 1]  360     JRNE DCLZ1 
      00267A AB 10            [ 1]  361     ADD A,#16
      00267C                        362 DCLZ8: 
      00267C 1C 00 02         [ 2]  363     ADDW X,#2 
      00267F 90 5F            [ 1]  364     CLRW Y 
      002681 90 97            [ 1]  365     LD YL,A 
      002683 FF               [ 2]  366     LDW (X),Y 
      002684 81               [ 4]  367     RET 
                                    368 
                                    369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    370 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    371 ;   rotate left doubles 
                                    372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002685                        373     _HEADER NDROT,5,"<2ROT"
      002685 26 5B                    1         .word LINK 
                           002687     2         LINK=.
      002687 05                       3         .byte 5  
      002688 3C 32 52 4F 54           4         .ascii "<2ROT"
      00268D                          5         NDROT:
                                    374 ; save d3 in temp 
      00268D 90 93            [ 1]  375     LDW Y,X 
      00268F 90 FE            [ 2]  376     LDW Y,(Y)
      002691 90 BF 28         [ 2]  377     LDW YTEMP,Y  ; d3 hi 
      002694 90 93            [ 1]  378     LDW Y,X 
      002696 90 EE 02         [ 2]  379     LDW Y,(2,Y)
      002699 90 BF 26         [ 2]  380     LDW XTEMP,Y  ; d3 lo 
                                    381 ; put d2 in d1 slot 
      00269C 90 93            [ 1]  382     LDW Y,X 
      00269E 90 EE 04         [ 2]  383     LDW Y,(4,Y) 
      0026A1 FF               [ 2]  384     LDW (X),Y   ; d2 hi 
      0026A2 90 93            [ 1]  385     LDW Y,X 
      0026A4 90 EE 06         [ 2]  386     LDW Y,(6,Y)
      0026A7 EF 02            [ 2]  387     LDW (2,X),Y ; d2 lo
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    388 ; put d1 in d2 slot 
      0026A9 90 93            [ 1]  389     LDW Y,X 
      0026AB 90 EE 08         [ 2]  390     LDW Y,(8,Y) 
      0026AE EF 04            [ 2]  391     LDW (4,X),Y ; d1 hi 
      0026B0 90 93            [ 1]  392     LDW Y,X 
      0026B2 90 EE 0A         [ 2]  393     LDW Y,(10,Y)
      0026B5 EF 06            [ 2]  394     LDW (6,X),Y  ; d1 lo 
                                    395 ; put d3 in d1 slot 
      0026B7 90 BE 28         [ 2]  396     LDW Y,YTEMP 
      0026BA EF 08            [ 2]  397     LDW (8,X),Y  ; d3 hi 
      0026BC 90 BE 26         [ 2]  398     LDW Y,XTEMP 
      0026BF EF 0A            [ 2]  399     LDW (10,X),Y  ; d3 lo 
      0026C1 81               [ 4]  400     RET 
                                    401 
                                    402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    403 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    404 ;   rotate right doubles 
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C2                        406     _HEADER DROT,4,"2ROT"
      0026C2 26 87                    1         .word LINK 
                           0026C4     2         LINK=.
      0026C4 04                       3         .byte 4  
      0026C5 32 52 4F 54              4         .ascii "2ROT"
      0026C9                          5         DROT:
                                    407 ; save d3 in temp 
      0026C9 90 93            [ 1]  408     LDW Y,X 
      0026CB 90 FE            [ 2]  409     LDW Y,(Y)
      0026CD 90 BF 28         [ 2]  410     LDW YTEMP,Y ; d3 hi 
      0026D0 90 93            [ 1]  411     LDW Y,X 
      0026D2 90 EE 02         [ 2]  412     LDW Y,(2,Y)
      0026D5 90 BF 26         [ 2]  413     LDW XTEMP,Y ; d3 lo 
                                    414 ; put d1 in d3 slot 
      0026D8 90 93            [ 1]  415     LDW Y,X 
      0026DA 90 EE 08         [ 2]  416     LDW Y,(8,Y)
      0026DD FF               [ 2]  417     LDW (X),Y  ; d1 hi 
      0026DE 90 93            [ 1]  418     LDW Y,X 
      0026E0 90 EE 0A         [ 2]  419     LDW Y,(10,Y) 
      0026E3 EF 02            [ 2]  420     LDW (2,X),Y ; d1 lo 
                                    421 ; put d2 in d1 slot 
      0026E5 90 93            [ 1]  422     LDW Y,X 
      0026E7 90 EE 04         [ 2]  423     LDW Y,(4,Y) ; d2 hi 
      0026EA EF 08            [ 2]  424     LDW (8,X),Y 
      0026EC 90 93            [ 1]  425     LDW Y,X 
      0026EE 90 EE 06         [ 2]  426     LDW Y,(6,Y) ; d2 lo 
      0026F1 EF 0A            [ 2]  427     LDW (10,X),Y 
                                    428 ; put d3 in d2 slot 
      0026F3 90 BE 28         [ 2]  429     LDW Y,YTEMP 
      0026F6 EF 04            [ 2]  430     LDW (4,X),Y 
      0026F8 90 BE 26         [ 2]  431     LDW Y,XTEMP 
      0026FB EF 06            [ 2]  432     LDW (6,X),Y 
      0026FD 81               [ 4]  433     RET 
                                    434 
                                    435 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    436 ;   D= ( d1 d2 -- f )
                                    437 ;   d1==d2?
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    438 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026FE                        439     _HEADER DEQUAL,2,"D="
      0026FE 26 C4                    1         .word LINK 
                           002700     2         LINK=.
      002700 02                       3         .byte 2  
      002701 44 3D                    4         .ascii "D="
      002703                          5         DEQUAL:
      002703 A6 00            [ 1]  440     LD A,#0 
      002705 90 93            [ 1]  441     LDW Y,X 
      002707 90 FE            [ 2]  442     LDW Y,(Y)
      002709 E3 04            [ 2]  443     CPW Y,(4,X)
      00270B 26 0B            [ 1]  444     JRNE DEQU4 
      00270D 90 93            [ 1]  445     LDW Y,X 
      00270F 90 EE 02         [ 2]  446     LDW Y,(2,Y)
      002712 E3 06            [ 2]  447     CPW Y,(6,X)
      002714 26 02            [ 1]  448     JRNE DEQU4 
      002716 A6 FF            [ 1]  449     LD A,#0XFF
      002718                        450 DEQU4:
      002718 1C 00 06         [ 2]  451     ADDW X,#6
      00271B F7               [ 1]  452     LD (X),A 
      00271C E7 01            [ 1]  453     LD (1,X),A 
      00271E 81               [ 4]  454     RET 
                                    455 
                                    456 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    457 ;   D> ( d1 d2 -- f )
                                    458 ;   d1>d2?
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00271F                        460     _HEADER DGREAT,2,"D>"
      00271F 27 00                    1         .word LINK 
                           002721     2         LINK=.
      002721 02                       3         .byte 2  
      002722 44 3E                    4         .ascii "D>"
      002724                          5         DGREAT:
      002724 A6 00            [ 1]  461     LD A,#0 
      002726 90 93            [ 1]  462     LDW Y,X 
      002728 90 EE 04         [ 2]  463     LDW Y,(4,Y)  ; d1 hi 
      00272B F3               [ 2]  464     CPW Y,(X)    ; d2 hi 
      00272C 2F 0B            [ 1]  465     JRSLT DGREAT4 
      00272E 90 93            [ 1]  466     LDW Y,X 
      002730 90 EE 06         [ 2]  467     LDW Y,(6,Y)
      002733 E3 02            [ 2]  468     CPW Y,(2,X)
      002735 2D 02            [ 1]  469     JRSLE DGREAT4 
      002737 A6 FF            [ 1]  470     LD A,#0XFF
      002739                        471 DGREAT4:
      002739 1C 00 06         [ 2]  472     ADDW X,#6
      00273C F7               [ 1]  473     LD (X),A 
      00273D E7 01            [ 1]  474     LD (1,X),A 
      00273F 81               [ 4]  475     RET
                                    476 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    478 ;   D< ( d1 d2 -- f )
                                    479 ;   d1<d2? 
                                    480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002740                        481     _HEADER DLESS,2,"D<"
      002740 27 21                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           002742     2         LINK=.
      002742 02                       3         .byte 2  
      002743 44 3C                    4         .ascii "D<"
      002745                          5         DLESS:
      002745 A6 00            [ 1]  482     LD A,#0 
      002747 90 93            [ 1]  483     LDW Y,X 
      002749 90 EE 04         [ 2]  484     LDW Y,(4,Y)
      00274C F3               [ 2]  485     CPW Y,(X)
      00274D 2C 0B            [ 1]  486     JRSGT DLESS4 
      00274F 90 93            [ 1]  487     LDW Y,X 
      002751 90 EE 06         [ 2]  488     LDW Y,(6,Y)
      002754 E3 02            [ 2]  489     CPW Y,(2,X)
      002756 2E C0            [ 1]  490     JRSGE DEQU4 
      002758 A6 FF            [ 1]  491     LD A,#0XFF
      00275A                        492 DLESS4:
      00275A 1C 00 06         [ 2]  493     ADDW X,#6
      00275D F7               [ 1]  494     LD (X),A 
      00275E E7 01            [ 1]  495     LD (1,X),A 
      002760 81               [ 4]  496     RET
                                    497 
                                    498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    499 ;  D0< ( d -- f )
                                    500 ;  d<0? 
                                    501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002761                        502     _HEADER DZLESS,3,"D0<"
      002761 27 42                    1         .word LINK 
                           002763     2         LINK=.
      002763 03                       3         .byte 3  
      002764 44 30 3C                 4         .ascii "D0<"
      002767                          5         DZLESS:
      002767 A6 00            [ 1]  503     LD A,#0 
      002769 90 93            [ 1]  504     LDW Y,X 
      00276B 90 FE            [ 2]  505     LDW Y,(Y)
      00276D 2A 02            [ 1]  506     JRPL DZLESS1 
      00276F A6 FF            [ 1]  507     LD A,#0XFF 
      002771                        508 DZLESS1:
      002771 1C 00 02         [ 2]  509     ADDW X,#2 
      002774 F7               [ 1]  510     LD (X),A 
      002775 E7 01            [ 1]  511     LD (1,X),A    
      002777 81               [ 4]  512     RET 
                                    513 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    517 ; compare 2 doubles 
                                    518 ; keep the doubles 
                                    519 ; return flag: 
                                    520 ;    -1 if d1<d2 
                                    521 ;     0 if d1==d2
                                    522 ;     1 if d1>d2 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002778                        524     _HEADER DCMP,4,"DCMP"
      002778 27 63                    1         .word LINK 
                           00277A     2         LINK=.
      00277A 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00277B 44 43 4D 50              4         .ascii "DCMP"
      00277F                          5         DCMP:
      00277F 90 93            [ 1]  525     LDW Y,X 
      002781 90 EE 04         [ 2]  526     LDW Y,(4,Y)
      002784 F3               [ 2]  527     CPW Y,(X) 
      002785 27 04            [ 1]  528     JREQ DCMP2 
      002787 2F 13            [ 1]  529     JRSLT DCMP_SMALL 
      002789 20 17            [ 2]  530     JRA  DCMP_GREAT 
      00278B                        531 DCMP2:    
      00278B 90 93            [ 1]  532     LDW Y,X 
      00278D 90 EE 06         [ 2]  533     LDW Y,(6,Y)
      002790 E3 02            [ 2]  534     CPW Y,(2,X)
      002792 27 04            [ 1]  535     JREQ DCMP_EQUAL  
      002794 25 06            [ 1]  536     JRULT DCMP_SMALL 
      002796 20 0A            [ 2]  537     JRA DCMP_GREAT
      002798                        538 DCMP_EQUAL:
      002798 90 5F            [ 1]  539     CLRW Y 
      00279A 20 0A            [ 2]  540     JRA DCMP4 
      00279C                        541 DCMP_SMALL:
      00279C 90 AE FF FF      [ 2]  542     LDW Y,#-1 
      0027A0 20 04            [ 2]  543     JRA DCMP4 
      0027A2                        544 DCMP_GREAT:
      0027A2 90 AE 00 01      [ 2]  545     LDW Y,#1
      0027A6                        546 DCMP4:
      0027A6 1D 00 02         [ 2]  547     SUBW X,#2 
      0027A9 FF               [ 2]  548     LDW (X),Y 
      0027AA 81               [ 4]  549     RET
                                    550 
                                    551 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    552 ;   D>R ( d -- R: d )
                                    553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AB                        554     _HEADER DTOR,3,"D>R"
      0027AB 27 7A                    1         .word LINK 
                           0027AD     2         LINK=.
      0027AD 03                       3         .byte 3  
      0027AE 44 3E 52                 4         .ascii "D>R"
      0027B1                          5         DTOR:
      0027B1 90 85            [ 2]  555     POPW Y 
      0027B3 90 BF 28         [ 2]  556     LDW YTEMP,Y 
      0027B6 90 93            [ 1]  557     LDW Y,X 
      0027B8 90 EE 02         [ 2]  558     LDW Y,(2,Y)
      0027BB 90 89            [ 2]  559     PUSHW Y   ; d low 
      0027BD 90 93            [ 1]  560     LDW Y,X 
      0027BF 90 FE            [ 2]  561     LDW Y,(Y)
      0027C1 90 89            [ 2]  562     PUSHW Y   ; d hi 
      0027C3 1C 00 04         [ 2]  563     ADDW X,#4  
      0027C6 92 CC 28         [ 5]  564     JP [YTEMP]
                                    565 
                                    566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    567 ;  DR> ( -- d ) R: d --      
                                    568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C9                        569     _HEADER DRFROM,3,"DR>"
      0027C9 27 AD                    1         .word LINK 
                           0027CB     2         LINK=.
      0027CB 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0027CC 44 52 3E                 4         .ascii "DR>"
      0027CF                          5         DRFROM:
      0027CF 90 85            [ 2]  570     POPW Y      ; d hi 
      0027D1 90 BF 28         [ 2]  571     LDW YTEMP,Y 
      0027D4 1D 00 04         [ 2]  572     SUBW X,#4
      0027D7 90 85            [ 2]  573     POPW Y       ; d hi 
      0027D9 FF               [ 2]  574     LDW (X),Y 
      0027DA 90 85            [ 2]  575     POPW Y       ; d low  
      0027DC EF 02            [ 2]  576     LDW (2,X),Y 
      0027DE 92 CC 28         [ 5]  577     JP [YTEMP]
                                    578     
                                    579 
                                    580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    581 ;   D2/ ( d -- d/2 )
                                    582 ;   divide double by 2 
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E1                        584     _HEADER D2SLASH,3,"D2/"
      0027E1 27 CB                    1         .word LINK 
                           0027E3     2         LINK=.
      0027E3 03                       3         .byte 3  
      0027E4 44 32 2F                 4         .ascii "D2/"
      0027E7                          5         D2SLASH:
      0027E7 90 93            [ 1]  585     LDW Y,X 
      0027E9 90 FE            [ 2]  586     LDW Y,(Y)
      0027EB 90 57            [ 2]  587     SRAW Y 
      0027ED FF               [ 2]  588     LDW (X),Y 
      0027EE 90 93            [ 1]  589     LDW Y,X 
      0027F0 90 EE 02         [ 2]  590     LDW Y,(2,Y)
      0027F3 90 56            [ 2]  591     RRCW Y 
      0027F5 EF 02            [ 2]  592     LDW (2,X),Y 
      0027F7 81               [ 4]  593     RET
                                    594 
                                    595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    596 ;   DLSHIFT ( d n -- d )
                                    597 ;   left shift double 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F8                        599     _HEADER DLSHIFT,7,"DLSHIFT"
      0027F8 27 E3                    1         .word LINK 
                           0027FA     2         LINK=.
      0027FA 07                       3         .byte 7  
      0027FB 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002802                          5         DLSHIFT:
      002802 E6 01            [ 1]  600     LD A,(1,X) ; shift count 
      002804 1C 00 02         [ 2]  601     ADDW X,#2 
      002807 90 93            [ 1]  602     LDW Y,X 
      002809 90 FE            [ 2]  603     LDW Y,(Y)
      00280B 90 BF 28         [ 2]  604     LDW YTEMP,Y  ; d hi 
      00280E 90 93            [ 1]  605     LDW Y,X 
      002810 90 EE 02         [ 2]  606     LDW Y,(2,Y)  ; d low 
      002813                        607 DLSHIFT1:
      002813 4D               [ 1]  608     TNZ A 
      002814 27 12            [ 1]  609     JREQ DLSHIFT2 
      002816 98               [ 1]  610     RCF 
      002817 90 59            [ 2]  611     RLCW Y 
      002819 90 89            [ 2]  612     PUSHW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00281B 90 BE 28         [ 2]  613     LDW Y,YTEMP 
      00281E 90 59            [ 2]  614     RLCW Y 
      002820 90 BF 28         [ 2]  615     LDW YTEMP,Y 
      002823 90 85            [ 2]  616     POPW Y 
      002825 4A               [ 1]  617     DEC A 
      002826 20 EB            [ 2]  618     JRA DLSHIFT1 
      002828                        619 DLSHIFT2:
      002828 EF 02            [ 2]  620     LDW (2,X),Y 
      00282A 90 BE 28         [ 2]  621     LDW Y,YTEMP 
      00282D FF               [ 2]  622     LDW (X),Y 
      00282E 81               [ 4]  623     RET 
                                    624 
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 ;  DD/MOD ( d1 d2 -- dr dq )
                                    627 ;  unsigned division double 
                                    628 ;  double.
                                    629 ;  return double quotient and 
                                    630 ;  double remainder 
                                    631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00282F                        632     _HEADER DDSLMOD,6,"DD/MOD"
      00282F 27 FA                    1         .word LINK 
                           002831     2         LINK=.
      002831 06                       3         .byte 6  
      002832 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
      002838                          5         DDSLMOD:
      002838 CD 07 A5         [ 4]  633     CALL DDUP 
      00283B CD 26 60         [ 4]  634     CALL DCLZ 
      00283E CD 05 9E         [ 4]  635     CALL DUPP
      002841                        636     _DOLIT 16 
      002841 CD 04 79         [ 4]    1     CALL DOLIT 
      002844 00 10                    2     .word 16 
      002846 CD 08 B6         [ 4]  637     CALL GREAT 
      002849                        638     _QBRAN DDSLMOD1 
      002849 CD 04 AC         [ 4]    1     CALL QBRAN
      00284C 28 55                    2     .word DDSLMOD1
      00284E CD 07 9A         [ 4]  639     CALL DDROP 
      002851 CD 25 41         [ 4]  640     CALL DSLMOD 
      002854 81               [ 4]  641     RET 
      002855                        642 DDSLMOD1:
      002855 CD 05 9E         [ 4]  643     CALL DUPP      
      002858 CD 05 67         [ 4]  644     CALL TOR 
      00285B CD 28 02         [ 4]  645     CALL DLSHIFT
      00285E                        646     _DOLIT 32 
      00285E CD 04 79         [ 4]    1     CALL DOLIT 
      002861 00 20                    2     .word 32 
      002863 CD 05 48         [ 4]  647     CALL RFROM 
      002866 CD 08 33         [ 4]  648     CALL SUBB 
      002869                        649     _DOLIT 5 
      002869 CD 04 79         [ 4]    1     CALL DOLIT 
      00286C 00 05                    2     .word 5 
      00286E CD 0B 7D         [ 4]  650     CALL PICK 
      002871                        651     _DOLIT 5 
      002871 CD 04 79         [ 4]    1     CALL DOLIT 
      002874 00 05                    2     .word 5 
      002876 CD 0B 7D         [ 4]  652     CALL PICK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      002879 CD 26 60         [ 4]  653     CALL DCLZ 
      00287C CD 05 67         [ 4]  654     CALL TOR 
      00287F CD 26 32         [ 4]  655     CALL DSWAP 
      002882 CD 05 5B         [ 4]  656     CALL RAT 
      002885 CD 28 02         [ 4]  657     CALL DLSHIFT 
      002888 CD 26 32         [ 4]  658     CALL DSWAP 
      00288B CD 05 48         [ 4]  659     CALL RFROM 
      00288E CD 05 48         [ 4]  660     CALL RFROM 
      002891 CD 05 AE         [ 4]  661     CALL SWAPP 
      002894 CD 08 33         [ 4]  662     CALL SUBB ; number dividend left shift to do.
                                    663 
      002897 81               [ 4]  664     RET 
                                    665 
                                    666 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    668 ;   D* ( d1 d2 -- d3 )
                                    669 ;   double product 
                                    670 ;   
                                    671 ;   d3 = d1 * d2
                                    672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002898                        673     _HEADER DSTAR,2,"D*"
      002898 28 31                    1         .word LINK 
                           00289A     2         LINK=.
      00289A 02                       3         .byte 2  
      00289B 44 2A                    4         .ascii "D*"
      00289D                          5         DSTAR:
      00289D                        674     _DOLIT 0 
      00289D CD 04 79         [ 4]    1     CALL DOLIT 
      0028A0 00 00                    2     .word 0 
      0028A2 CD 07 78         [ 4]  675     CALL NROT  
      0028A5 CD 05 9E         [ 4]  676     CALL DUPP 
      0028A8 CD 05 D7         [ 4]  677     CALL ZLESS 
      0028AB                        678     _QBRAN DDSTAR1 
      0028AB CD 04 AC         [ 4]    1     CALL QBRAN
      0028AE 28 BC                    2     .word DDSTAR1
      0028B0 CD 07 F7         [ 4]  679     CALL DNEGA 
      0028B3 CD 07 59         [ 4]  680     CALL ROT  
      0028B6 CD 07 D4         [ 4]  681     CALL INVER 
      0028B9 CD 07 78         [ 4]  682     CALL NROT  
      0028BC                        683 DDSTAR1:
      0028BC CD 05 67         [ 4]  684     CALL TOR 
      0028BF CD 05 67         [ 4]  685     CALL TOR
      0028C2 CD 07 78         [ 4]  686     CALL NROT  
      0028C5 CD 05 9E         [ 4]  687     CALL DUPP 
      0028C8 CD 05 D7         [ 4]  688     CALL ZLESS 
      0028CB                        689     _QBRAN DDSTAR2 
      0028CB CD 04 AC         [ 4]    1     CALL QBRAN
      0028CE 28 DC                    2     .word DDSTAR2
      0028D0 CD 07 F7         [ 4]  690     CALL DNEGA 
      0028D3 CD 07 59         [ 4]  691     CALL ROT
      0028D6 CD 07 D4         [ 4]  692     CALL INVER 
      0028D9 CD 07 78         [ 4]  693     CALL NROT 
      0028DC                        694 DDSTAR2:
      0028DC CD 07 A5         [ 4]  695     CALL DDUP 
      0028DF CD 05 48         [ 4]  696     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0028E2 CD 25 E9         [ 4]  697     CALL DSSTAR 
      0028E5 CD 26 32         [ 4]  698     CALL DSWAP 
      0028E8 CD 05 48         [ 4]  699     CALL RFROM 
      0028EB CD 25 E9         [ 4]  700     CALL DSSTAR 
      0028EE CD 05 94         [ 4]  701     CALL DROP
      0028F1 CD 07 BA         [ 4]  702     CALL PLUS
      0028F4 CD 07 59         [ 4]  703     CALL ROT 
      0028F7                        704     _QBRAN DDSTAR3 
      0028F7 CD 04 AC         [ 4]    1     CALL QBRAN
      0028FA 28 FF                    2     .word DDSTAR3
      0028FC CD 07 F7         [ 4]  705     CALL DNEGA 
      0028FF                        706 DDSTAR3:  
      0028FF 81               [ 4]  707     RET 
                                    708 
                                    709 
                                    710 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    711 ;   D+ ( d1 d2 -- d3 )
                                    712 ;   add 2 doubles 
                                    713 ;   d3=d1+d2 
                                    714 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002900                        715     _HEADER DPLUS,2,"D+"
      002900 28 9A                    1         .word LINK 
                           002902     2         LINK=.
      002902 02                       3         .byte 2  
      002903 44 2B                    4         .ascii "D+"
      002905                          5         DPLUS:
      002905 90 93            [ 1]  716     LDW Y,X 
      002907 90 FE            [ 2]  717     LDW Y,(Y)
      002909 90 BF 28         [ 2]  718     LDW YTEMP,Y ; d2 hi 
      00290C 90 93            [ 1]  719     LDW Y,X 
      00290E 90 EE 02         [ 2]  720     LDW Y,(2,Y)
      002911 90 BF 26         [ 2]  721     LDW XTEMP,Y ; d2 lo 
      002914 1C 00 04         [ 2]  722     ADDW X,#4 
      002917 90 93            [ 1]  723     LDW Y,X 
      002919 90 EE 02         [ 2]  724     LDW Y,(2,Y) ; d1 lo
      00291C 72 B9 00 26      [ 2]  725     ADDW Y,XTEMP
      002920 EF 02            [ 2]  726     LDW (2,X),Y 
      002922 90 93            [ 1]  727     LDW Y,X 
      002924 90 FE            [ 2]  728     LDW Y,(Y) ; d1 hi 
      002926 24 04            [ 1]  729     JRNC DPLUS1 
      002928 72 A9 00 01      [ 2]  730     ADDW Y,#1 
      00292C                        731 DPLUS1: 
      00292C 72 B9 00 28      [ 2]  732     ADDW Y,YTEMP 
      002930 FF               [ 2]  733     LDW (X),Y 
      002931 81               [ 4]  734     RET 
                                    735 
                                    736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    737 ;   D- ( d1 d2 -- d3 )
                                    738 ;   d3=d1-d2 
                                    739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002932                        740     _HEADER DSUB,2,"D-"
      002932 29 02                    1         .word LINK 
                           002934     2         LINK=.
      002934 02                       3         .byte 2  
      002935 44 2D                    4         .ascii "D-"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002937                          5         DSUB:
      002937 90 93            [ 1]  741     LDW Y,X 
      002939 90 FE            [ 2]  742     LDW Y,(Y)
      00293B 90 BF 28         [ 2]  743     LDW YTEMP,Y ; d2 hi 
      00293E 90 93            [ 1]  744     LDW Y,X 
      002940 90 EE 02         [ 2]  745     LDW Y,(2,Y)
      002943 90 BF 26         [ 2]  746     LDW XTEMP,Y ; d2 lo 
      002946 1C 00 04         [ 2]  747     ADDW X,#4 
      002949 90 93            [ 1]  748     LDW Y,X 
      00294B 90 EE 02         [ 2]  749     LDW Y,(2,Y) ; d1 lo
      00294E 72 B2 00 26      [ 2]  750     SUBW Y,XTEMP
      002952 EF 02            [ 2]  751     LDW (2,X),Y 
      002954 90 93            [ 1]  752     LDW Y,X 
      002956 90 FE            [ 2]  753     LDW Y,(Y) ; d1 hi 
      002958 24 04            [ 1]  754     JRNC DSUB1 
      00295A 72 A2 00 01      [ 2]  755     SUBW Y,#1 
      00295E                        756 DSUB1: 
      00295E 72 B2 00 28      [ 2]  757     SUBW Y,YTEMP 
      002962 FF               [ 2]  758     LDW (X),Y 
      002963 81               [ 4]  759     RET 
                                    760 
                                    761 
                                    762 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    763 ;    ILOG ( ud base -- n )
                                    764 ;    integer part of double in base 
                                    765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002964                        766     _HEADER ILOG,4,"ILOG"
      002964 29 34                    1         .word LINK 
                           002966     2         LINK=.
      002966 04                       3         .byte 4  
      002967 49 4C 4F 47              4         .ascii "ILOG"
      00296B                          5         ILOG:
      00296B                        767     _DOLIT 0 
      00296B CD 04 79         [ 4]    1     CALL DOLIT 
      00296E 00 00                    2     .word 0 
      002970 CD 05 67         [ 4]  768     CALL TOR 
      002973 CD 07 78         [ 4]  769     CALL NROT 
      002976                        770 ILOG1: 
      002976                        771     _DOLIT 2 
      002976 CD 04 79         [ 4]    1     CALL DOLIT 
      002979 00 02                    2     .word 2 
      00297B CD 0B 7D         [ 4]  772     CALL PICK 
      00297E CD 25 41         [ 4]  773     CALL DSLMOD 
      002981 CD 07 59         [ 4]  774     CALL ROT 
      002984 CD 05 94         [ 4]  775     CALL DROP 
      002987 CD 07 A5         [ 4]  776     CALL DDUP
      00298A CD 24 C9         [ 4]  777     CALL DZEQUAL 
      00298D CD 07 D4         [ 4]  778     CALL INVER 
      002990                        779     _QBRAN ILOG2
      002990 CD 04 AC         [ 4]    1     CALL QBRAN
      002993 29 A3                    2     .word ILOG2
      002995 CD 05 48         [ 4]  780     CALL RFROM 
      002998 CD 0A B8         [ 4]  781     CALL ONEP 
      00299B CD 05 67         [ 4]  782     CALL TOR 
      00299E                        783     _BRAN ILOG1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00299E CD 04 C3         [ 4]    1     CALL BRAN 
      0029A1 29 76                    2     .word ILOG1 
      0029A3                        784 ILOG2:
      0029A3 CD 07 9A         [ 4]  785     CALL DDROP 
      0029A6 CD 05 94         [ 4]  786     CALL DROP 
      0029A9 CD 05 48         [ 4]  787     CALL RFROM 
      0029AC 81               [ 4]  788     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   4760 .endif 
                           000000  4761 .if WANT_FLOAT 
                                   4762         .include "float.asm"
                                   4763 .endif 
                                   4764 
                                   4765 ;===============================================================
                                   4766 
                           002966  4767 LASTN =	LINK   ;last name defined
                                   4768 
                                   4769 ; application code begin here
      002A00                       4770 	.bndry 128 ; align on flash block  
      002A00                       4771 app_space: 
                                   4772 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000856 R   |   6 ABOR1      001337 R
  6 ABOR2      00134E R   |   6 ABORQ      00132F R   |   6 ABORT      001320 R
  6 ABRTQ      00160B R   |   6 ABSS       00084D R   |   6 ACCEP      0012B6 R
  6 ACCP1      0012BF R   |   6 ACCP2      0012E5 R   |   6 ACCP3      0012E8 R
  6 ACCP4      0012EA R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000738 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0015F6 R   |   6 AGAIN      00154C R   |   6 AHEAD      0015A9 R
  6 ALLOT      00145F R   |   6 ANDD       0005EA R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F7 R   |   6 ATEXE      000C48 R   |   6 AUTORUN    00012B R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |   6 B115K2     0003E2 R
    B19200  =  000003     |   6 B19K2      0003BF R   |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |   6 B2K4       000390 R
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00039E R
    B4_MASK =  000010     |     B57600  =  000005     |   6 B57K6      0003D0 R
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 B9K6       0003AE R
  6 BACK1      00125E R   |   6 BASE       00065B R   |     BASEE   =  00000A 
  6 BAUD       0003F2 R   |     BCNT    =  000001     |   6 BCOMP      0014A1 R
  6 BDIGS      000D2F R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |   6 BEGIN      00152E R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      0010B3 R
  6 BKSP       00122E R   |     BKSPP   =  000008     |   6 BLANK      000B17 R
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       0004C3 R   |     BTW     =  000001     |   6 BUF2ROW    002073 R
  6 BYE        0000B8 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     0022BC R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  00002C     |     CASE_SEN=  000000 
  6 CAT        000515 R   |   6 CCOMMA     001483 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000A9C R   |   6 CELLP      000A8D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLS      000AAB R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E85 R   |   6 CHAR2      000E88 R
  6 CHKIVEC    001F61 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000C67 R   |   6 CMOV2      000C7F R
  6 CMOVE      000C5F R   |     CNTDWN  =  000034     |   6 CNTXT      0006DE R
  6 COLD       001A65 R   |   6 COLD1      001A65 R   |   6 COLON      0017A4 R
  6 COMMA      00146C R   |   6 COMPI      0014B1 R   |     COMPO   =  000040 
  6 CONSTANT   00184E R   |   6 COUNT      000BFB R   |   6 CPP        0006FA R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000EB3 R
  6 CREAT      0017EA R   |     CRR     =  00000D     |   6 CSTOR      000504 R
  6 CTABLE     0022DD R   |   6 CTAT       0022FE R   |   6 CTINIT     002326 R
  6 D2SLASH    0027E7 R   |   6 DABS       002511 R   |   6 DABS1      00251F R
  6 DAT        000BDB R   |     DATSTK  =  001680     |   6 DCLZ       002660 R
  6 DCLZ1      002669 R   |   6 DCLZ4      00266F R   |   6 DCLZ8      00267C R
  6 DCMP       00277F R   |   6 DCMP2      00278B R   |   6 DCMP4      0027A6 R
  6 DCMP_EQU   002798 R   |   6 DCMP_GRE   0027A2 R   |   6 DCMP_SMA   00279C R
  6 DCONST     00188A R   |   6 DDIG       002582 R   |   6 DDIGS      00259B R
  6 DDOT       0025B2 R   |   6 DDOT0      0025C6 R   |   6 DDOT1      0025DC R
  6 DDROP      00079A R   |   6 DDSLMOD    002838 R   |   6 DDSLMOD1   002855 R
  6 DDSTAR1    0028BC R   |   6 DDSTAR2    0028DC R   |   6 DDSTAR3    0028FF R
  6 DDUP       0007A5 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000DDF R   |   6 DEPTH      000B66 R   |   6 DEQU4      002718 R
  6 DEQUAL     002703 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     002724 R   |   6 DGREAT4    002739 R   |   6 DGTQ1      000E24 R
  6 DI         0000C6 R   |   6 DIG        000D58 R   |   6 DIGIT      000CF3 R
  6 DIGS       000D69 R   |   6 DIGS1      000D69 R   |   6 DIGS2      000D76 R
  6 DIGTQ      000DF3 R   |     DISCOVER=  000000     |   6 DLESS      002745 R
  6 DLESS4     00275A R   |   6 DLSHIFT    002802 R   |   6 DLSHIFT1   002813 R
  6 DLSHIFT2   002828 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        000814 R   |   6 DNEG1      002506 R   |   6 DNEGA      0007F7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGAT     0024E7 R   |   6 DOCONST    001878 R   |   6 DOLIT      000479 R
  6 DONXT      00048D R   |     DOORBELL=  000000     |   6 DOSTR      000EC9 R
  6 DOT        000F6C R   |   6 DOT1       000F82 R   |   6 DOTI1      0019E6 R
  6 DOTID      0019D0 R   |   6 DOTO1      0013C3 R   |   6 DOTOK      0013A9 R
  6 DOTPR      001095 R   |   6 DOTQ       001625 R   |   6 DOTQP      000EF2 R
  6 DOTR       000F00 R   |   6 DOTS       001972 R   |   6 DOTS1      00197D R
  6 DOTS2      001986 R   |   6 DOVAR      00064B R   |   6 DO_DCONS   0018B9 R
  6 DPLUS      002905 R   |   6 DPLUS1     00292C R   |   6 DRFROM     0027CF R
  6 DROP       000594 R   |   6 DROT       0026C9 R   |   6 DSIGN      002528 R
  6 DSIGN1     002532 R   |   6 DSLMOD     002541 R   |   6 DSLMOD3    00255C R
  6 DSLMOD4    002568 R   |   6 DSLMODa    002563 R   |   6 DSLMODb    00256E R
  6 DSSTAR     0025E9 R   |   6 DSSTAR1    002600 R   |   6 DSSTAR3    002629 R
  6 DSTAR      00289D R   |   6 DSTOR      000BB5 R   |   6 DSUB       002937 R
  6 DSUB1      00295E R   |   6 DSWAP      002632 R   |   6 DTOR       0027B1 R
  6 DUMP       001928 R   |   6 DUMP1      00193F R   |   6 DUMP3      001961 R
  6 DUMPP      0018F7 R   |   6 DUPP       00059E R   |   6 DZEQUAL    0024C9 R
  6 DZLESS     002767 R   |   6 DZLESS1    002771 R   |   6 EDIGS      000D94 R
  6 EECSTORE   001D12 R   |   6 EEPCP      001B38 R   |   6 EEPLAST    001B0B R
  6 EEPROM     001AF3 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_R=  000010     |     EEPROM_S=  000800     |   6 EEPRUN     001B22 R
  6 EEPVP      001B4E R   |   6 EESTORE    001D5E R   |   6 EE_CCOMM   002028 R
  6 EE_COMMA   002007 R   |   6 EE_CREAD   001CA3 R   |   6 EE_READ    001C81 R
  6 EI         0000BF R   |   6 ELSEE      001584 R   |   6 EMIT       000438 R
  6 ENEPER     002248 R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        000871 R   |   6 EQUAL      00085B R   |   6 ERASE      000CC1 R
    ERR     =  00001B     |   6 EVAL       0013EC R   |   6 EVAL1      0013EC R
  6 EVAL2      001408 R   |   6 EXE1       000C56 R   |   6 EXECU      0004D3 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000D1B R   |   6 FADDR      0020F5 R   |   6 FARAT      001BB9 R
  6 FARCAT     001BC5 R   |   6 FC_XOFF    000465 R   |   6 FC_XON     00044F R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000C8E R
  6 FILL1      000CAB R   |   6 FILL2      000CB4 R   |   6 FIND       00118A R
  6 FIND1      0011A8 R   |   6 FIND2      0011D6 R   |   6 FIND3      0011E2 R
  6 FIND4      0011F6 R   |   6 FIND5      001203 R   |   6 FIND6      0011E7 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      002100 R   |   6 FMOVE2     002131 R
  6 FOR        001501 R   |   6 FORGET     00015C R   |   6 FORGET1    00018B R
  6 FORGET2    000211 R   |   6 FORGET4    00021A R   |   6 FORGET6    0001D3 R
  6 FPSTOR     001AD4 R   |     FPTR    =  000036     |   6 FREEVAR    000227 R
  6 FREEVAR4   00025D R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 GREAT      0008B6 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  6 GREAT1     0008CC R   |   6 HDOT       000F4F R   |   6 HERE       000C12 R
  6 HEX        000DCA R   |   6 HI         001A22 R   |   6 HLD        0006CB R
  6 HOLD       000D3F R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0017B5 R
  6 IFETCH     00151F R   |   6 IFF        00155C R   |   6 IFMOVE     0021D9 R
  6 ILOG       00296B R   |   6 ILOG1      002976 R   |   6 ILOG2      0029A3 R
    IMEDD   =  000080     |   6 IMMED      0017C7 R   |   6 INCH       00042C R
  6 INC_FPTR   001C4E R   |   6 INITOFS    00177D R   |   6 INN        000679 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      00138B R   |   6 INTER      001361 R
  6 INTQ       002382 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0007D4 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      001712 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       001767 R   |   6 KEY        000E33 R   |   6 KTAP       00127B R
  6 KTAP1      00129E R   |   6 KTAP2      0012A1 R   |   6 LAST       00070A R
  6 LASTN   =  002966 R   |   6 LBRAC      001398 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000898 R
    LF      =  00000A     |   6 LINK    =  002966 R   |   6 LITER      0014D3 R
  6 LN2S       0022A4 R   |   6 LOCK       001C3A R   |   6 LOG2S      00228E R
  6 LSHIFT     000AD6 R   |   6 LSHIFT1    000ADF R   |   6 LSHIFT4    000AE7 R
  6 LT1        0008AE R   |     MASKK   =  001F7F     |   6 MAX        0008D6 R
  6 MAX1       0008E9 R   |   6 MIN        0008F3 R   |   6 MIN1       000906 R
  6 MMOD1      00098F R   |   6 MMOD2      0009A3 R   |   6 MMOD3      0009BA R
  6 MMSM1      00094A R   |   6 MMSM3      00094E R   |   6 MMSM4      00095A R
  6 MMSMa      000955 R   |   6 MMSMb      000960 R   |   6 MODD       0009D4 R
  6 MONE       000B3D R   |     MS      =  000032     |   6 MSEC       0002D2 R
  6 MSMOD      000972 R   |   6 MSTA1      000A65 R   |   6 MSTAR      000A42 R
    NAFR    =  004804     |   6 NAMEQ      001223 R   |   6 NAMET      001134 R
    NCLKOPT =  004808     |   6 NDROT      00268D R   |   6 NEGAT      0007E5 R
  6 NEX1       00049A R   |   6 NEXT       001510 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NROT       000778 R   |   6 NTIB       000689 R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000E49 R   |   6 NUFQ1      000E62 R
  6 NUMBQ      0023AA R   |   6 NUMQ0      0023EB R   |   6 NUMQ1      00240D R
  6 NUMQ2      00243E R   |   6 NUMQ3      002483 R   |   6 NUMQ4      0024A4 R
  6 NUMQ5      0024B1 R   |   6 NUMQ6      0024B4 R   |   6 NUMQ8      0024B9 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     00072F R   |     OFS     =  000005     |   6 ONE        000B2F R
  6 ONEM       000AC5 R   |   6 ONEP       000AB8 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00004B R   |   6 ORR        0005FE R
  6 OUTPUT     00043D R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       0005C8 R
  6 OVERT      0016E0 R   |     PA      =  000000     |   6 PACKS      000CD2 R
  6 PAD        000C23 R   |   6 PAREN      0010A4 R   |   6 PARS       000F9D R
  6 PARS1      000FC8 R   |   6 PARS2      000FF3 R   |   6 PARS3      000FF6 R
  6 PARS4      000FFF R   |   6 PARS5      001022 R   |   6 PARS6      001037 R
  6 PARS7      001046 R   |   6 PARS8      001055 R   |   6 PARSE      001066 R
  6 PAUSE      0002E2 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00190A R   |   6 PDUM2      00191B R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000B7D R
  6 PII        002207 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007BA R   |   6 PNAM1      001695 R
  6 PRESE      001417 R   |     PROD1   =  000026     |     PROD2   =  000028 
    PROD3   =  00002A     |   6 PROTECTE   000203 R   |   6 PSTOR      000B94 R
    PTR16   =  000037     |     PTR8    =  000038     |   6 PTRPLUS    001C66 R
  6 QBRAN      0004AC R   |   6 QDUP       000748 R   |   6 QDUP1      000752 R
  6 QKEY       00041A R   |   6 QSTAC      0013CF R   |   6 QUERY      0012FB R
  6 QUEST      000F8F R   |   6 QUIT       001434 R   |   6 QUIT1      00143C R
  6 QUIT2      00143F R   |   6 RAM2EE     0020A1 R   |     RAMBASE =  000000 
  6 RAMLAST    00071D R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     000280 R   |   6 RAT        00055B R
  6 RBRAC      001754 R   |   6 REPEA      0015D9 R   |   6 RFREE      002088 R
  6 RFROM      000548 R   |     ROP     =  004800     |   6 ROT        000759 R
  6 ROW2BUF    00204A R   |     ROWBUFF =  001680     |     RP0     =  000030 
  6 RPAT       000525 R   |     RPP     =  0017FF     |   6 RPSTO      000532 R
  6 RSHIFT     000AF2 R   |   6 RSHIFT1    000AFB R   |   6 RSHIFT4    000B03 R
    RST_SR  =  0050B3     |   6 RT12_2     002277 R   |   6 SAME1      001152 R
  6 SAME2      00117B R   |   6 SAMEQ      00114A R   |   6 SCOM1      0016CA R
  6 SCOM2      0016CD R   |   6 SCOMP      0016AC R   |   6 SEED       000267 R
    SEEDX   =  00003A     |     SEEDY   =  00003C     |   6 SEMIS      0016F0 R
  6 SETISP     0000D2 R   |   6 SET_RAML   001837 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000D7E R   |   6 SIGN1      000D8E R
  6 SLASH      0009DE R   |   6 SLMOD      0009C2 R   |   6 SNAME      00165F R
    SP0     =  00002E     |   6 SPACE      000E6B R   |   6 SPACS      000E7A R
  6 SPAT       00057E R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |     SPSAVE  =  000001     |   6 SPSTO      00058B R
  6 SQRT10     002260 R   |   6 SQRT2      00221E R   |   6 SQRT3      002235 R
  6 SSMOD      000A6E R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       000A37 R   |   6 STASL      000A7F R   |   6 STOD       00081C R
  6 STORE      0004E0 R   |   6 STR        000DAC R   |   6 STRCQ      0014E1 R
  6 STRQ       001618 R   |   6 STRQP      000EE8 R   |   6 SUBB       000833 R
  6 SWAPP      0005AE R   |     SWIM_CSR=  007F80     |   6 TAP        001265 R
  6 TBOOT      001A59 R   |   6 TBUF       000699 R   |     TBUFFBAS=  001680 
  6 TCHAR      000B4E R   |   6 TEMP       00066A R   |   6 TEVAL      0006BC R
  6 TFLASH     0006AB R   |   6 THENN      001571 R   |   6 TIB        000C34 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       00144B R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000312 R   |   6 TIMER      0002FC R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0019A0 R
  6 TNAM3      0019BE R   |   6 TNAM4      0019C4 R   |   6 TNAME      00199D R
  6 TOFLASH    000337 R   |   6 TOKEN      001126 R   |   6 TOR        000567 R
  6 TORAM      000377 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000B0A R
  6 TYPE1      000E9A R   |   6 TYPE2      000EA6 R   |   6 TYPES      000E95 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005232     |     UART_BRR=  005233 
    UART_CR1=  005234     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005235     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  005231 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  005230 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000018     |     UCP     =  00001C 
    UCTIB   =  000010     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F3B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

  6 UDOTR      000F1B R   |   6 UEND       000049 R   |     UFBASE  =  000008 
    UFPSW   =  00000A     |     UHLD    =  000016     |     UINN    =  00000E 
    UINTER  =  000014     |     ULAST   =  00001E     |   6 ULES1      000890 R
  6 ULESS      00087A R   |   6 UMMOD      00092E R   |   6 UMSTA      0009ED R
  6 UNIQ1      001656 R   |   6 UNIQU      001637 R   |   6 UNLKEE     001BD4 R
  6 UNLKFL     001BF3 R   |   6 UNLOCK     001C12 R   |   6 UNTIL      001539 R
    UOFFSET =  000020     |   6 UPDATCP    001B91 R   |   6 UPDATLAS   001B68 R
  6 UPDATPTR   002194 R   |   6 UPDATRUN   001B80 R   |   6 UPDATVP    001BA8 R
  6 UPL1       00063F R   |   6 UPLUS      000628 R   |     UPP     =  000006 
  6 UPPER      0010E9 R   |   6 UPPER1     00110C R   |   6 UPPER2     001115 R
    URLAST  =  000024     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000022     |     UTIB    =  000012 
    UTMP    =  00000C     |   6 UTYP1      0018DA R   |   6 UTYP2      0018E9 R
  6 UTYPE      0018D5 R   |     UVP     =  00001A     |   6 UZERO      00002B R
  6 VARIA      001804 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000003     |   6 VPP        0006EC R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000000     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      0015BF R
  6 WITHI      000913 R   |   6 WORDD      0010CF R   |   6 WORDS      0019FA R
  6 WORS1      001A00 R   |   6 WORS2      001A1C R   |   6 WR_BYTE    001CBD R
  6 WR_WORD    001CE2 R   |   6 WTABLE     0022EC R   |   6 WTAT       002310 R
  6 WTINIT     002355 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       000613 R   |     XTEMP   =  000026     |     YTEMP   =  000028 
  6 ZEQ1       0024D9 R   |   6 ZERO       000B24 R   |   6 ZL1        0005E0 R
  6 ZLESS      0005D7 R   |   6 app_spac   002A00 R   |   6 baudrate   00037D R
  6 block_er   001DA8 R   |   6 clear_ra   000019 R   |   6 clock_in   000066 R
  6 copy_buf   001E08 R   |   6 copy_buf   001E27 R   |   6 copy_pro   001E27 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001DCA R   |   6 fmove_do   00217D R
  6 main       000016 R   |   6 next_row   00213A R   |   6 no_move    002184 R
  6 pristine   001EA8 R   |   6 proceed_   001DCD R   |   6 reboot     000329 R
  6 reset_ve   001F0F R   |   6 row_eras   001D88 R   |   6 row_eras   001DE1 R
  6 row_eras   001E08 R   |   6 set_opti   001E7C R   |   6 set_vect   001FB0 R
  6 uart_ini   000078 R   |   6 write_ro   001E4C R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2A00   flags    0

