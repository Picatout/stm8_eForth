ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                                    196 
                                    197         .macro _ledon
                                    198         .if NUCLEO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         bset PC_ODR,#LED2_BIT
                                    200         .else ;DISCOVERY 
                                    201         .if DISCOVERY
                                    202         bres PD_ODR,#LD1_BIT 
                                    203         .endif
                                    204         .endif
                                    205         .endm
                                    206 
                                    207         .macro _ledoff
                                    208         .if NUCLEO 
                                    209         bres PC_ODR,#LED2_BIT
                                    210         .else ;DISCOVERY 
                                    211         .if DISCOVERY
                                    212         bset PD_ODR,#LD1_BIT 
                                    213         .endif 
                                    214         .endif
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 16            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            252 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            255 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 A6 80            [ 1]  271         ld a, #0x80
      000002 C7 50 D1         [ 1]  272         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    273 	;iret
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000005                        277 Timer4Handler:
      000005 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000009 BE 30            [ 2]  279         ldw x,MS 
      00000B 5C               [ 1]  280         incw x 
      00000C BF 30            [ 2]  281         ldw MS,x
      00000E BE 32            [ 2]  282         ldw x,CNTDWN 
      000010 27 03            [ 1]  283         jreq 1$
      000012 5A               [ 2]  284         decw x 
      000013 BF 32            [ 2]  285         ldw CNTDWN,x 
      000015                        286 1$:         
      000015 80               [11]  287         iret 
                                    288 
                                    289 
                                    290 ;; Main entry points and COLD start data
      000016                        291 main:
                                    292 ; clear all RAM
      000016 AE 00 00         [ 2]  293 	ldw X,#RAMBASE
      000019                        294 clear_ram0:
      000019 7F               [ 1]  295 	clr (X)
      00001A 5C               [ 1]  296 	incw X
      00001B A3 17 FF         [ 2]  297 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  298 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  299         ldw x,#RPP
      000023 94               [ 1]  300         ldw sp,x
                                    301 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  302         inc SEEDX+1 
      000026 3C 3B            [ 1]  303         inc SEEDY+1          
      000028 CC 00 49         [ 2]  304 	jp ORIG
                                    305 
                                    306 ; COLD initialize these variables.
      00002B                        307 UZERO:
      00002B 00 0A                  308         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002D 00 00                  309         .word      0       ; floating point state 
      00002F 00 00                  310         .word      0       ;tmp
      000031 00 00                  311         .word      0       ;>IN
      000033 00 00                  312         .word      0       ;#TIB
      000035 17 00                  313         .word      TIBB    ;TIB
      000037 13 4B                  314         .word      INTER   ;'EVAL
      000039 00 00                  315         .word      0       ;HLD
      00003B 31 C2                  316         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  317         .word      VAR_BASE   ;variables free space pointer 
      00003F 32 80                  318         .word      app_space ; FLASH free space pointer 
      000041 31 C2                  319         .word      LASTN   ;LAST
      000043 00 00                  320         .word      0        ; OFFSET 
      000045 00 00                  321         .word      0       ; TFLASH
                                    322 ;       .word      0       ; URLAST   
      000047 00 00                  323 UEND:   .word      0
                                    324 
      000049                        325 ORIG:   
                                    326 ; initialize SP
      000049 AE 17 FF         [ 2]  327         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  328         LDW     SP,X
      00004D BF 2E            [ 2]  329         LDW     RP0,X
      00004F AE 16 80         [ 2]  330         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  331         LDW     SP0,X
                           000001   332 .if NUCLEO        
                                    333 ; initialize PC_5 as output to control LED2
                                    334 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  335         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  336         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  337         bset PC_DDR,#LED2_BIT
                                    338 .endif 
                           000000   339 .if DISCOVERY
                                    340         bset PD_CR1,#LD1_BIT
                                    341         bset PD_CR2,#LD1_BIT
                                    342         bset PD_DDR,#LD1_BIT 
                                    343 .endif
      000060                        344         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    345 ; initialize clock to HSI
                                    346 ; no divisor 16Mhz 
                                    347 ; Added by Picatout 
      000064                        348 clock_init:
      000064 72 5F 50 C6      [ 1]  349         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  350 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   351 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  352 	ld a,#CLK_SWR_HSI
                           000000   353 .else ; DISCOVERY as 16Mhz crystal
                                    354 	ld a,#CLK_SWR_HSE
                                    355 .endif 
      00006E C7 50 C4         [ 1]  356 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000071 C1 50 C3         [ 1]  357 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  358 	jrne 1$
                                    359         
                                    360 ; initialize UART, 115200 8N1
      000076                        361 uart_init:
                           000001   362 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  363 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    364 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  365 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  366 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  367 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    368 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   369 .else ; DISCOVERY use UART2 
                                    370 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    371 	; configure tx pin
                                    372 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    373 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    374 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    375 .endif
                                    376 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  377 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  378 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  379 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    380 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  381 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  382 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  383 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  384 	bset TIM4_IER,#TIM4_IER_UIE 
                                    385 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  386         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  387         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  388         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  389         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  390         rim
      0000AD CC 1A 4C         [ 2]  391         jp  COLD   ;default=MN1
                                    392 
                           000000   393         LINK=0 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    395 ;; place MCU in sleep mode with
                                    396 ;; halt opcode 
                                    397 ;; BYE ( -- )
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        399         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  400         halt 
      0000B7 81               [ 4]  401         ret 
                                    402 
                                    403 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    404 ; Enable interrupts 
                                    405 ; EI ( -- )
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000B8                        407         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  408         rim 
      0000BE 81               [ 4]  409         ret 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    411 ; Disable interrupts
                                    412 ; DI ( -- )
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        414         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  415         sim 
      0000C5 81               [ 4]  416         ret 
                                    417 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    419 ; set interrupt priority level 
                                    420 ; SET-ISP ( n1 n2 -- )
                                    421 ; n1 level {1..3}
                                    422 ; n2 vector {0..29}
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        424         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  425         ldw y,x 
      0000D2 90 FE            [ 2]  426         ldw y,(y)
      0000D4 A6 04            [ 1]  427         ld a,#4 ; 4 slot per register 
                                    428 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  429         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  430         and a,#3 
      0000DA 48               [ 1]  431         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  432         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  433         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  434         clrw y 
      0000E2 90 97            [ 1]  435         ld yl,a 
      0000E4 1D 00 02         [ 2]  436         subw x,#CELLL 
      0000E7 FF               [ 2]  437         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  438         ldw y,x 
      0000EA 90 EE 02         [ 2]  439         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  440         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  441         subw x,#CELLL 
      0000F2 FF               [ 2]  442         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 05 B0         [ 4]  443         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  444         call DOLIT 
      0000F9 00 03                  445         .word 3
      0000FB CD 05 98         [ 4]  446         call SWAPP  ; ( level reg lshift rval 3 lshift )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000FE CD 0A E9         [ 4]  447         call LSHIFT ; creat slot mask 
      000101 CD 07 C7         [ 4]  448         call INVER  ; ( level reg lshift rval mask )
      000104 CD 05 E5         [ 4]  449         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 51         [ 4]  450         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 4C         [ 4]  451         call ROT  ; ( reg lshift level )
      00010D CD 05 98         [ 4]  452         call SWAPP ; ( reg level lshift )
      000110 CD 0A E9         [ 4]  453         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  454         call RFROM ; ( reg slot_level masked_val )
      000116 CD 05 F9         [ 4]  455         call ORR   ; ( reg updated_rval )
      000119 CD 05 98         [ 4]  456         call SWAPP 
      00011C CD 04 F0         [ 4]  457         call CSTOR
                                    458 
                                    459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    460 ; sélectionne l'application 
                                    461 ; qui démarre automatique lors 
                                    462 ; d'un COLD start 
                                    463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        464         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 10         [ 4]  465         call TOKEN 
      00012C CD 05 88         [ 4]  466         call DUPP 
      00012F CD 04 98         [ 4]  467         call QBRAN 
      000132 02 0F                  468         .word FORGET2
      000134 CD 12 0D         [ 4]  469         call NAMEQ
      000137 CD 07 3B         [ 4]  470         call QDUP 
      00013A CD 04 98         [ 4]  471         call QBRAN 
      00013D 02 0F                  472         .word FORGET2
      00013F CD 05 7E         [ 4]  473         call DROP 
      000142 1D 00 04         [ 2]  474         subw x,#2*CELLL 
      000145 90 5F            [ 1]  475         clrw y 
      000147 FF               [ 2]  476         ldw (x),y 
      000148 90 AE 40 02      [ 2]  477         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  478         ldw (2,x),y 
      00014E CC 1D 48         [ 2]  479         jp EESTORE 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;; Reset dictionary pointer before 
                                    483 ;; forgotten word. RAM space and 
                                    484 ;; interrupt vector defined after 
                                    485 ;; must be resetted also.
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        487         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 10         [ 4]  488         call TOKEN
      00015D CD 05 88         [ 4]  489         call DUPP 
      000160 CD 04 98         [ 4]  490         call QBRAN 
      000163 02 0F                  491         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000165 CD 12 0D         [ 4]  492         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 3B         [ 4]  493         call QDUP 
      00016B CD 04 98         [ 4]  494         call QBRAN 
      00016E 02 0F                  495         .word FORGET2
                                    496 ; only forget users words 
      000170 CD 05 88         [ 4]  497         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  498         call DOLIT 
      000176 32 80                  499         .word app_space 
      000178 CD 05 98         [ 4]  500         call SWAPP 
      00017B CD 08 6D         [ 4]  501         call  ULESS 
      00017E CD 04 98         [ 4]  502         call QBRAN 
      000181 01 D1                  503         .word FORGET6 
                                    504 ; ( ca na -- )        
                                    505 ;reset ivec with address >= ca
      000183 CD 05 98         [ 4]  506         call SWAPP ; ( na ca -- ) 
      000186 CD 1F 4B         [ 4]  507         call CHKIVEC ; ( na -- ) 
                                    508 ; start at LAST and link back to na 
                                    509 ; if variable found reset VP at that point.
      000189                        510 FORGET1:
      000189 CD 06 FD         [ 4]  511         call LAST 
      00018C CD 04 E3         [ 4]  512         call AT 
      00018F CD 05 88         [ 4]  513         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  514         call FREEVAR ; ( -- na last )
      000195 CD 05 88         [ 4]  515         call DUPP 
      000198 CD 04 6F         [ 4]  516         call DOLIT 
      00019B 00 02                  517         .word 2 
      00019D CD 08 26         [ 4]  518         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  519         call AT 
      0001A3 CD 05 88         [ 4]  520         call DUPP ; ( -- na last a a )
      0001A6 CD 06 D1         [ 4]  521         call CNTXT 
      0001A9 CD 04 D1         [ 4]  522         call STORE
      0001AC CD 06 FD         [ 4]  523         call LAST  
      0001AF CD 04 D1         [ 4]  524         call STORE ; ( --  na last )
      0001B2 CD 05 B0         [ 4]  525         call OVER 
      0001B5 CD 08 4E         [ 4]  526         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  527         call QBRAN 
      0001BB 01 89                  528         .word FORGET1 
                                    529 ; ( na -- )
      0001BD CD 04 6F         [ 4]  530         call DOLIT 
      0001C0 00 02                  531         .word 2 
      0001C2 CD 08 26         [ 4]  532         call SUBB 
      0001C5 CD 06 ED         [ 4]  533         call CPP 
      0001C8 CD 04 D1         [ 4]  534         call STORE  
      0001CB CD 1B 7B         [ 4]  535         call UPDATCP 
      0001CE CC 1B 52         [ 2]  536         jp UPDATLAST 
      0001D1                        537 FORGET6: ; tried to forget a RAM or system word 
                                    538 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  539         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  540         ldw y,SP0 
      0001D7 FF               [ 2]  541         ldw (x),y  
      0001D8 CD 08 6D         [ 4]  542         call ULESS
      0001DB CD 04 98         [ 4]  543         call QBRAN 
      0001DE 02 01                  544         .word PROTECTED 
      0001E0 CD 13 19         [ 4]  545         call ABORQ 
      0001E3 1D                     546         .byte 29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 20 46 6F 72 20 52 41   547         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        548 PROTECTED:
      000201 CD 13 19         [ 4]  549         call ABORQ
      000204 0A                     550         .byte 10
      000205 20 50 72 6F 74 65 63   551         .ascii " Protected"
             74 65 64
      00020F                        552 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 19         [ 4]  553         call ABORQ
      000212 05                     554         .byte 5
      000213 20 77 68 61 74         555         .ascii " what"
      000218                        556 FORGET4:
      000218 CC 05 7E         [ 2]  557         jp DROP 
                                    558 
                                    559 
                                    560 ;;;;;;;;;;;;;;;;;;;;;
                                    561 ; if na is variable 
                                    562 ; free variable data  
                                    563 ; FREEVAR ( na -- )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        565         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 05 88         [ 4]  566         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  567         CALL CAT  ; ( na c -- )
      00022B CD 0A CB         [ 4]  568         call ONEP ;
      00022E CD 07 AD         [ 4]  569         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0A CB         [ 4]  570         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 05 88         [ 4]  571         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  572         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  573         call DOLIT 
      00023D 06 3E                  574         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 4E         [ 4]  575         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  576         call QBRAN 
      000245 02 5B                  577         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  578         call DOLIT 
      00024A 00 02                  579         .word 2 
      00024C CD 07 AD         [ 4]  580         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  581         call AT 
      000252 CD 06 DF         [ 4]  582         call VPP   
      000255 CD 04 D1         [ 4]  583         call STORE 
      000258 CC 1B 92         [ 2]  584         jp UPDATVP 
      00025B                        585 FREEVAR4: ; not variable
      00025B CC 05 7E         [ 2]  586         jp  DROP 
                                    587 
                                    588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    589 ;    SEED ( n -- )
                                    590 ; Initialize PRNG seed with n 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E                        592         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  593         ldw y,x 
      000267 1C 00 02         [ 2]  594         addw x,#CELLL
      00026A 90 FE            [ 2]  595         ldw y,(y)
      00026C 90 9E            [ 1]  596         ld a,yh 
      00026E B7 38            [ 1]  597         ld SEEDX,a 
      000270 90 9F            [ 1]  598         ld a,yl 
      000272 B7 3A            [ 1]  599         ld SEEDY,a 
      000274 81               [ 4]  600         ret 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    602 ;    RANDOM ( u1 -- u2 )
                                    603 ; Pseudo random number betwen 0 and u1-1
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        605         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    606 ;local variable 
                           000001   607         SPSAVE=1
                           000002   608         VSIZE=2 
      00027E 52 02            [ 2]  609         sub sp,#VSIZE
      000280 1F 01            [ 2]  610         ldw (SPSAVE,sp),x  
                                    611 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  612         ldw y,x 
      000284 90 FE            [ 2]  613         ldw y,(y)
      000286 90 BF 26         [ 2]  614         ldw YTEMP,y 
      000289 BE 38            [ 2]  615 	ldw x,SEEDX 
      00028B 58               [ 2]  616 	sllw x 
      00028C 58               [ 2]  617 	sllw x 
      00028D 58               [ 2]  618 	sllw x 
      00028E 58               [ 2]  619 	sllw x 
      00028F 58               [ 2]  620 	sllw x 
      000290 9E               [ 1]  621 	ld a,xh 
      000291 B8 38            [ 1]  622 	xor a,SEEDX 
      000293 B7 24            [ 1]  623 	ld XTEMP,a 
      000295 9F               [ 1]  624 	ld a,xl 
      000296 B8 39            [ 1]  625 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  626 	ld XTEMP+1,a 
                                    627 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  628 	ldw x,SEEDY 
      00029C BF 38            [ 2]  629 	ldw SEEDX,x  
                                    630 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  631 	srlw x 
      00029F 9E               [ 1]  632 	ld a,xh 
      0002A0 B8 3A            [ 1]  633 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  634 	ld SEEDY,a  
      0002A4 9F               [ 1]  635 	ld a,xl 
      0002A5 B8 3B            [ 1]  636 	xor a,SEEDY+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A7 B7 3B            [ 1]  637 	ld SEEDY+1,a 
                                    638 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  639 	ldw x,XTEMP 
      0002AB 54               [ 2]  640 	srlw x 
      0002AC 54               [ 2]  641 	srlw x 
      0002AD 54               [ 2]  642 	srlw x 
                                    643 ; x=XTEMP^x 
      0002AE 9E               [ 1]  644 	ld a,xh 
      0002AF B8 24            [ 1]  645 	xor a,XTEMP 
      0002B1 95               [ 1]  646 	ld xh,a 
      0002B2 9F               [ 1]  647 	ld a,xl 
      0002B3 B8 25            [ 1]  648 	xor a,XTEMP+1  
      0002B5 97               [ 1]  649 	ld xl,a 
                                    650 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  651 	xor a,SEEDY+1
      0002B8 97               [ 1]  652 	ld xl,a 
      0002B9 9E               [ 1]  653 	ld a,xh 
      0002BA B8 3A            [ 1]  654 	xor a,SEEDY
      0002BC 95               [ 1]  655 	ld xh,a 
      0002BD BF 3A            [ 2]  656 	ldw SEEDY,x 
                                    657 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  658 	ldw y,YTEMP  
      0002C2 65               [ 2]  659 	divw x,y 
      0002C3 1E 01            [ 2]  660 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  661         ldw (x),y 
      0002C6 5B 02            [ 2]  662         addw sp,#VSIZE 
      0002C8 81               [ 4]  663 	ret 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;; get millisecond counter 
                                    668 ;; msec ( -- u )
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        670         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  671         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  672         ldw y,MS 
      0002D6 FF               [ 2]  673         ldw (x),y 
      0002D7 81               [ 4]  674         ret 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ; suspend execution for u msec 
                                    678 ;  pause ( u -- )
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        680         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  681         ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002E2 90 FE            [ 2]  682         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  683         addw y,MS 
      0002E8 8F               [10]  684 1$:     wfi  
      0002E9 90 B3 30         [ 2]  685         cpw y,MS  
      0002EC 26 FA            [ 1]  686         jrne 1$        
      0002EE 1C 00 02         [ 2]  687         addw x,#CELLL 
      0002F1 81               [ 4]  688         ret 
                                    689 
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    691 ; initialize count down timer 
                                    692 ;  TIMER ( u -- )  milliseconds
                                    693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        694         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  695         ldw y,x
      0002FC 90 FE            [ 2]  696         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  697         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  698         addw x,#CELLL 
      000304 81               [ 4]  699         ret 
                                    700 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    702 ; check for TIMER exiparition 
                                    703 ;  TIMEOUT? ( -- 0|-1 )
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        705         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  706         clr a
      000311 1D 00 02         [ 2]  707         subw x,#CELLL 
      000314 90 BE 32         [ 2]  708         ldw y,CNTDWN 
      000317 26 01            [ 1]  709         jrne 1$ 
      000319 43               [ 1]  710         cpl a 
      00031A E7 01            [ 1]  711 1$:     ld (1,x),a 
      00031C F7               [ 1]  712         ld (x),a 
      00031D 81               [ 4]  713         ret         
                                    714 
                                    715 ;;;;;;;;;;;;;;;;;;;;;
                                    716 ; reboot MCU 
                                    717 ; REBOOT ( -- )
                                    718 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        719         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000327                          5         reboot:
      000327 CC 00 00         [ 2]  720         jp NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    721 
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    723 ; compile to flash memory 
                                    724 ; TO-FLASH ( -- )
                                    725 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        726         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 10         [ 4]  727         call RAMLAST 
      000338 CD 04 E3         [ 4]  728         call AT 
      00033B CD 07 3B         [ 4]  729         call QDUP 
      00033E CD 04 98         [ 4]  730         call QBRAN
      000341 03 64                  731         .word 1$
      000343 CD 13 19         [ 4]  732         call ABORQ 
      000346 1D                     733         .byte 29
      000347 20 4E 6F 74 20 77 68   734         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  735 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  736         ldw UTFLASH,y
      00036B 81               [ 4]  737         ret 
                                    738 
                                    739 ;;;;;;;;;;;;;;;;;;;;;;
                                    740 ; compile to RAM 
                                    741 ; TO-RAM ( -- )
                                    742 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        743         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  744         clrw y 
      000377 90 BF 20         [ 2]  745         ldw UTFLASH,y 
      00037A 81               [ 4]  746         ret 
                                    747 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    749 ;; BAUD RATE constants table
                                    750 ; values to put in BRR1 & BRR2 
                                    751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        752 baudrate: 
      00037B A0 1B                  753 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  754 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  755 	.byte 0x68,0x3  ; 9600
      000381 34 01                  756 	.byte 0x34,0x1  ; 19200
      000383 11 06                  757 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  758 	.byte 0x8,0xb   ; 115200
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    761 ; BAUD RATE CONSTANTS names 
                                    762 ; 2400 baud  ( -- n )
                                    763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        764         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  765 	subw x,#CELLL 
      000391 90 5F            [ 1]  766         clrw y
      000393 FF               [ 2]  767         ldw (x),y
      000394 81               [ 4]  768 	ret
                                    769 
                                    770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    771 ; 4800 baud	
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        773         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  774         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  775         ldw y,#2 
      0003A3 FF               [ 2]  776         ldw (x),y
      0003A4 81               [ 4]  777         ret 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;
                                    780 ; 9600 baud
                                    781 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        782         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  783         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  784         ldw y,#4 
      0003B3 FF               [ 2]  785         ldw (x),y 
      0003B4 81               [ 4]  786         ret 
                                    787 ;;;;;;;;;;;;;;
                                    788 ; 19200 baud
                                    789 ;;;;;;;;;;;;;;
      0003B5                        790         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
      0003BD 1D 00 02         [ 2]  791         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  792         ldw y,#6 
      0003C4 FF               [ 2]  793         ldw (x),y 
      0003C5 81               [ 4]  794         ret 
                                    795 ;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    796 ; 57600 baud  
                                    797 ;;;;;;;;;;;;;;
      0003C6                        798         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  799         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  800         ldw y,#8 
      0003D5 FF               [ 2]  801         ldw (x),y 
      0003D6 81               [ 4]  802         ret 
                                    803 ;;;;;;;;;;;;;;
                                    804 ; 115200 baud 
                                    805 ;;;;;;;;;;;;;;
      0003D7                        806         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  807 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  808         ldw y,#10 
      0003E7 FF               [ 2]  809         ldw (x),y 
      0003E8 81               [ 4]  810         ret 
                                    811 
                                    812 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    813 ;; set UART2 BAUD rate
                                    814 ;	BAUD ( u -- )
                                    815 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        816         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  817 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  818         ldw y,#baudrate 
      0003F7 FF               [ 2]  819         ldw (x),y 
      0003F8 CD 07 AD         [ 4]  820         call PLUS
      0003FB 90 93            [ 1]  821         ldw y,x  
      0003FD 90 FE            [ 2]  822         ldw y,(y)
      0003FF 90 F6            [ 1]  823         ld a,(y)
      000401 88               [ 1]  824         push a 
      000402 90 5C            [ 1]  825         incw y 
      000404 90 F6            [ 1]  826         ld a,(y)
      000406 C7 52 33         [ 1]  827         ld UART_BRR2,a 
      000409 84               [ 1]  828         pop a
      00040A C7 52 32         [ 1]  829         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  830         addw x,#CELLL 
      000410 81               [ 4]  831         ret 
                                    832 
                                    833 ;; Device dependent I/O
                                    834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    835 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    836 ;         Return input byte and true, or false.
                                    837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        838         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  839         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  840         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  841         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  842 	SUBW	X,#2
      000425 E7 01            [ 1]  843         LD     (1,X),A
      000427 7F               [ 1]  844 	CLR	(X)
      000428 90 53            [ 2]  845         CPLW     Y
      00042A                        846 INCH:
      00042A 1D 00 02         [ 2]  847 		SUBW	X,#2
      00042D FF               [ 2]  848         LDW     (X),Y
      00042E 81               [ 4]  849         RET
                                    850 
                                    851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    852 ;       TX!     ( c -- )
                                    853 ;       Send character c to  output device.
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        855         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  856         LD     A,(1,X)
      000438 1C 00 02         [ 2]  857 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  858 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  859         LD    UART_DR,A   ;send A
      000443 81               [ 4]  860         RET
                                    861 
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    863 ;       FC-XON  ( -- )
                                    864 ;       send XON character 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        866         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  867         subw x,#CELLL 
      000450 7F               [ 1]  868         clr (x)
      000451 A6 11            [ 1]  869         ld a,#XON 
      000453 E7 01            [ 1]  870         ld (1,x),a 
      000455 CD 04 36         [ 4]  871         call EMIT 
      000458 81               [ 4]  872         ret 
                                    873 
                                    874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    875 ;       FC-XOFF ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    876 ;       Send XOFF character 
                                    877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        878         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  879         subw x,#CELLL 
      000466 7F               [ 1]  880         clr (x)
      000467 A6 13            [ 1]  881         ld a,#XOFF 
      000469 E7 01            [ 1]  882         ld (1,x),a 
      00046B CD 04 36         [ 4]  883         call EMIT 
      00046E 81               [ 4]  884         ret
                                    885 
                                    886 ;; The kernel
                                    887 
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    889 ;       doLIT   ( -- w )
                                    890 ;       Push an inline literal.
                                    891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        892 DOLIT:
      00046F 1D 00 02         [ 2]  893 	SUBW X,#2
      000472 16 01            [ 2]  894         ldw y,(1,sp)
      000474 90 FE            [ 2]  895         ldw y,(y)
      000476 FF               [ 2]  896         ldw (x),y
      000477 90 85            [ 2]  897         popw y 
      000479 90 EC 02         [ 2]  898         jp (2,y)
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;       NEXT    ( -- )
                                    902 ;       Code for  single index loop.
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        904         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  905 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  906 	DECW Y
      000487 2A 07            [ 1]  907 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  908 	POPW Y
      00048B 5B 02            [ 2]  909         addw sp,#2
      00048D 90 EC 02         [ 2]  910         JP (2,Y)
      000490                        911 NEX1:
      000490 17 03            [ 2]  912         LDW (3,SP),Y
      000492 90 85            [ 2]  913         POPW Y
      000494 90 FE            [ 2]  914 	LDW Y,(Y)
      000496 90 FC            [ 2]  915 	JP (Y)
                                    916 
                                    917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    918 ;       ?branch ( f -- )
                                    919 ;       Branch if flag is zero.
                                    920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    921 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        922 QBRAN:	
      000498 90 93            [ 1]  923         LDW Y,X
      00049A 1C 00 02         [ 2]  924 	ADDW X,#2
      00049D 90 FE            [ 2]  925 	LDW Y,(Y)
      00049F 27 13            [ 1]  926         JREQ     BRAN
      0004A1 90 85            [ 2]  927 	POPW Y
      0004A3 90 EC 02         [ 2]  928 	JP (2,Y)
                                    929 
                                    930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    931 ;  TBRANCH ( f -- )
                                    932 ;  branch if f==TRUE 
                                    933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    934 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        935 TBRAN: 
      0004A6 90 93            [ 1]  936         LDW Y,X 
      0004A8 1C 00 02         [ 2]  937         ADDW X,#2 
      0004AB 90 FE            [ 2]  938         LDW Y,(Y)
      0004AD 26 05            [ 1]  939         JRNE BRAN 
      0004AF 90 85            [ 2]  940         POPW Y 
      0004B1 90 EC 02         [ 2]  941         JP (2,Y)
                                    942 
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    944 ;       branch  ( -- )
                                    945 ;       Branch to an inline address.
                                    946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    947 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        948 BRAN:
      0004B4 90 85            [ 2]  949         POPW Y
      0004B6 90 FE            [ 2]  950 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  951         JP     (Y)
                                    952 
                                    953 ;       EXECUTE ( ca -- )
                                    954 ;       Execute  word at ca.
      0004BA 04 7E                  955         .word      LINK
                           0004BC   956 LINK	= 	.
      0004BC 07                     957         .byte       7
      0004BD 45 58 45 43 55 54 45   958         .ascii     "EXECUTE"
      0004C4                        959 EXECU:
      0004C4 90 93            [ 1]  960         LDW Y,X
      0004C6 1C 00 02         [ 2]  961 	ADDW X,#2
      0004C9 90 FE            [ 2]  962 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  963         JP   (Y)
                                    964 
                           000001   965 OPTIMIZE = 1
                           000001   966 .if OPTIMIZE 
                                    967 ; remplacement de CALL EXIT par 
                                    968 ; le opcode de RET.
                                    969 ; Voir modification au code de ";"
                           000000   970 .else 
                                    971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    972 ;       EXIT    ( -- )
                                    973 ;       Terminate a colon definition.
                                    974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    975 ;       _HEADER EXIT,4,"EXIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    976 EXIT:
                                    977         POPW Y
                                    978         RET
                                    979 .endif 
                                    980 
                                    981 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    982 ;       !       ( w a -- )
                                    983 ;       Pop  data stack to memory.
                                    984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        985         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  986         LDW Y,X
      0004D3 90 FE            [ 2]  987         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  988         PUSHW X
      0004D6 EE 02            [ 2]  989         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  990         LDW (Y),X 
      0004DA 85               [ 2]  991         POPW X  
      0004DB 1C 00 04         [ 2]  992         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  993         RET     
                                    994 
                                    995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    996 ;       @       ( a -- w )
                                    997 ;       Push memory location to stack.
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                        999         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1] 1000         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1001         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1002         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1003         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1004         RET     
                                   1005 
                                   1006 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1007 ;       C!      ( c b -- )
                                   1008 ;       Pop  data stack to byte memory.
                                   1009 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1010         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
      0004F0 90 93            [ 1] 1011         LDW Y,X
      0004F2 90 FE            [ 2] 1012 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1013         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1014         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1015 	ADDW X,#4 ; DDROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004FB 81               [ 4] 1016         RET     
                                   1017 
                                   1018 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1019 ;       C@      ( b -- c )
                                   1020 ;       Push byte in memory to  stack.
                                   1021 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1022         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1023         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1024         LDW Y,(Y)
      000505 90 F6            [ 1] 1025         LD A,(Y)
      000507 E7 01            [ 1] 1026         LD (1,X),A
      000509 7F               [ 1] 1027         CLR (X)
      00050A 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1031 ;       RP@     ( -- a )
                                   1032 ;       Push current RP to data stack.
                                   1033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1034         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1035         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1036         SUBW X,#2
      000516 FF               [ 2] 1037         LDW (X),Y
      000517 81               [ 4] 1038         RET     
                                   1039 
                                   1040 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1041 ;       RP!     ( a -- )
                                   1042 ;       Set  return stack pointer.
                                   1043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1044         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1045         POPW Y
      000520 90 BF 26         [ 2] 1046         LDW YTEMP,Y
      000523 90 93            [ 1] 1047         LDW Y,X
      000525 90 FE            [ 2] 1048         LDW Y,(Y)
      000527 90 94            [ 1] 1049         LDW SP,Y
      000529 1C 00 02         [ 2] 1050         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 26         [ 5] 1051         JP [YTEMP]
                                   1052 
                                   1053 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1054 ;       R>      ( -- w )
                                   1055 ;       Pop return stack to data stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1057         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1058         SUBW X,#CELLL 
      000537 16 03            [ 2] 1059         LDW Y,(3,SP)
      000539 FF               [ 2] 1060         LDW (X),Y 
      00053A 90 85            [ 2] 1061         POPW Y 
      00053C 5B 02            [ 2] 1062         ADDW SP,#2 
      00053E 90 FC            [ 2] 1063         JP (Y)
                                   1064 
                                   1065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1066 ;       R@      ( -- w )
                                   1067 ;       Copy top of return stack to stack.
                                   1068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1069         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1070         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1071         subw x,#CELLL 
      00054A FF               [ 2] 1072         ldw (x),y 
      00054B 81               [ 4] 1073         ret 
                                   1074 
                                   1075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1076 ;       >R      ( w -- )
                                   1077 ;       Push data stack to return stack.
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1079         _HEADER TOR,COMPO+2,">R"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 42                       3         .byte COMPO+2  
      00054F 3E 52                    4         .ascii ">R"
      000551                          5         TOR:
      000551 90 85            [ 2] 1080         POPW Y    ;save return addr
      000553 90 BF 26         [ 2] 1081         LDW YTEMP,Y
      000556 90 93            [ 1] 1082         LDW Y,X
      000558 90 FE            [ 2] 1083         LDW Y,(Y)  ; W
      00055A 90 89            [ 2] 1084         PUSHW Y    ;W >R 
      00055C 1C 00 02         [ 2] 1085         ADDW X,#2
      00055F 92 CC 26         [ 5] 1086         JP [YTEMP]
                                   1087 
                                   1088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1089 ;       SP@     ( -- a )
                                   1090 ;       Push current stack pointer.
                                   1091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000562                       1092         _HEADER SPAT,3,"SP@"
      000562 05 4E                    1         .word LINK 
                           000564     2         LINK=.
      000564 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000565 53 50 40                 4         .ascii "SP@"
      000568                          5         SPAT:
      000568 90 93            [ 1] 1093 	LDW Y,X
      00056A 1D 00 02         [ 2] 1094         SUBW X,#2
      00056D FF               [ 2] 1095 	LDW (X),Y
      00056E 81               [ 4] 1096         RET     
                                   1097 
                                   1098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1099 ;       SP!     ( a -- )
                                   1100 ;       Set  data stack pointer.
                                   1101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00056F                       1102         _HEADER SPSTO,3,"SP!"
      00056F 05 64                    1         .word LINK 
                           000571     2         LINK=.
      000571 03                       3         .byte 3  
      000572 53 50 21                 4         .ascii "SP!"
      000575                          5         SPSTO:
      000575 FE               [ 2] 1103         LDW     X,(X)     ;X = a
      000576 81               [ 4] 1104         RET     
                                   1105 
                                   1106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1107 ;       DROP    ( w -- )
                                   1108 ;       Discard top stack item.
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000577                       1110         _HEADER DROP,4,"DROP"
      000577 05 71                    1         .word LINK 
                           000579     2         LINK=.
      000579 04                       3         .byte 4  
      00057A 44 52 4F 50              4         .ascii "DROP"
      00057E                          5         DROP:
      00057E 1C 00 02         [ 2] 1111         ADDW X,#2     
      000581 81               [ 4] 1112         RET     
                                   1113 
                                   1114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1115 ;       DUP     ( w -- w w )
                                   1116 ;       Duplicate  top stack item.
                                   1117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000582                       1118         _HEADER DUPP,3,"DUP"
      000582 05 79                    1         .word LINK 
                           000584     2         LINK=.
      000584 03                       3         .byte 3  
      000585 44 55 50                 4         .ascii "DUP"
      000588                          5         DUPP:
      000588 90 93            [ 1] 1119 	LDW Y,X
      00058A 1D 00 02         [ 2] 1120         SUBW X,#2
      00058D 90 FE            [ 2] 1121 	LDW Y,(Y)
      00058F FF               [ 2] 1122 	LDW (X),Y
      000590 81               [ 4] 1123         RET     
                                   1124 
                                   1125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1126 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1127 ;       Exchange top two stack items.
                                   1128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000591                       1129         _HEADER SWAPP,4,"SWAP"
      000591 05 84                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000593     2         LINK=.
      000593 04                       3         .byte 4  
      000594 53 57 41 50              4         .ascii "SWAP"
      000598                          5         SWAPP:
      000598 90 93            [ 1] 1130         LDW Y,X
      00059A 90 FE            [ 2] 1131         LDW Y,(Y)
      00059C 90 89            [ 2] 1132         PUSHW Y  
      00059E 90 93            [ 1] 1133         LDW Y,X
      0005A0 90 EE 02         [ 2] 1134         LDW Y,(2,Y)
      0005A3 FF               [ 2] 1135         LDW (X),Y
      0005A4 90 85            [ 2] 1136         POPW Y 
      0005A6 EF 02            [ 2] 1137         LDW (2,X),Y
      0005A8 81               [ 4] 1138         RET     
                                   1139 
                                   1140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1141 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1142 ;       Copy second stack item to top.
                                   1143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005A9                       1144         _HEADER OVER,4,"OVER"
      0005A9 05 93                    1         .word LINK 
                           0005AB     2         LINK=.
      0005AB 04                       3         .byte 4  
      0005AC 4F 56 45 52              4         .ascii "OVER"
      0005B0                          5         OVER:
      0005B0 1D 00 02         [ 2] 1145         SUBW X,#2
      0005B3 90 93            [ 1] 1146         LDW Y,X
      0005B5 90 EE 04         [ 2] 1147         LDW Y,(4,Y)
      0005B8 FF               [ 2] 1148         LDW (X),Y
      0005B9 81               [ 4] 1149         RET     
                                   1150 
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1152 ;       0<      ( n -- t )
                                   1153 ;       Return true if n is negative.
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005BA                       1155         _HEADER ZLESS,2,"0<"
      0005BA 05 AB                    1         .word LINK 
                           0005BC     2         LINK=.
      0005BC 02                       3         .byte 2  
      0005BD 30 3C                    4         .ascii "0<"
      0005BF                          5         ZLESS:
      0005BF A6 FF            [ 1] 1156         LD A,#0xFF
      0005C1 90 93            [ 1] 1157         LDW Y,X
      0005C3 90 FE            [ 2] 1158         LDW Y,(Y)
      0005C5 2B 01            [ 1] 1159         JRMI     ZL1
      0005C7 4F               [ 1] 1160         CLR A   ;false
      0005C8 F7               [ 1] 1161 ZL1:    LD     (X),A
      0005C9 E7 01            [ 1] 1162         LD (1,X),A
      0005CB 81               [ 4] 1163 	RET     
                                   1164 
                                   1165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1166 ;       0= ( n -- f )
                                   1167 ;   n==0?
                                   1168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005CC                       1169         _HEADER ZEQUAL,2,"0="
      0005CC 05 BC                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                           0005CE     2         LINK=.
      0005CE 02                       3         .byte 2  
      0005CF 30 3D                    4         .ascii "0="
      0005D1                          5         ZEQUAL:
      0005D1 A6 FF            [ 1] 1170         LD A,#0XFF 
      0005D3 90 93            [ 1] 1171         LDW Y,X 
      0005D5 90 FE            [ 2] 1172         LDW Y,(Y)
      0005D7 27 02            [ 1] 1173         JREQ ZEQU1 
      0005D9 A6 00            [ 1] 1174         LD A,#0 
      0005DB                       1175 ZEQU1:  
      0005DB F7               [ 1] 1176         LD (X),A 
      0005DC E7 01            [ 1] 1177         LD (1,X),A         
      0005DE 81               [ 4] 1178         RET 
                                   1179 
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1181 ;       AND     ( w w -- w )
                                   1182 ;       Bitwise AND.
                                   1183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DF                       1184         _HEADER ANDD,3,"AND"
      0005DF 05 CE                    1         .word LINK 
                           0005E1     2         LINK=.
      0005E1 03                       3         .byte 3  
      0005E2 41 4E 44                 4         .ascii "AND"
      0005E5                          5         ANDD:
      0005E5 F6               [ 1] 1185         LD  A,(X)    ;D=w
      0005E6 E4 02            [ 1] 1186         AND A,(2,X)
      0005E8 E7 02            [ 1] 1187         LD (2,X),A
      0005EA E6 01            [ 1] 1188         LD A,(1,X)
      0005EC E4 03            [ 1] 1189         AND A,(3,X)
      0005EE E7 03            [ 1] 1190         LD (3,X),A
      0005F0 1C 00 02         [ 2] 1191         ADDW X,#2
      0005F3 81               [ 4] 1192         RET
                                   1193 
                                   1194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1195 ;       OR      ( w w -- w )
                                   1196 ;       Bitwise inclusive OR.
                                   1197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1198         _HEADER ORR,2,"OR"
      0005F4 05 E1                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 02                       3         .byte 2  
      0005F7 4F 52                    4         .ascii "OR"
      0005F9                          5         ORR:
      0005F9 F6               [ 1] 1199         LD A,(X)    ;D=w
      0005FA EA 02            [ 1] 1200         OR A,(2,X)
      0005FC E7 02            [ 1] 1201         LD (2,X),A
      0005FE E6 01            [ 1] 1202         LD A,(1,X)
      000600 EA 03            [ 1] 1203         OR A,(3,X)
      000602 E7 03            [ 1] 1204         LD (3,X),A
      000604 1C 00 02         [ 2] 1205         ADDW X,#2
      000607 81               [ 4] 1206         RET
                                   1207 
                                   1208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1209 ;       XOR     ( w w -- w )
                                   1210 ;       Bitwise exclusive OR.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1212         _HEADER XORR,3,"XOR"
      000608 05 F6                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 03                       3         .byte 3  
      00060B 58 4F 52                 4         .ascii "XOR"
      00060E                          5         XORR:
      00060E F6               [ 1] 1213         LD A,(X)    ;D=w
      00060F E8 02            [ 1] 1214         XOR A,(2,X)
      000611 E7 02            [ 1] 1215         LD (2,X),A
      000613 E6 01            [ 1] 1216         LD A,(1,X)
      000615 E8 03            [ 1] 1217         XOR A,(3,X)
      000617 E7 03            [ 1] 1218         LD (3,X),A
      000619 1C 00 02         [ 2] 1219         ADDW X,#2
      00061C 81               [ 4] 1220         RET
                                   1221 
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1223 ;       UM+     ( u u -- udsum )
                                   1224 ;       Add two unsigned single
                                   1225 ;       and return a double sum.
                                   1226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00061D                       1227         _HEADER UPLUS,3,"UM+"
      00061D 06 0A                    1         .word LINK 
                           00061F     2         LINK=.
      00061F 03                       3         .byte 3  
      000620 55 4D 2B                 4         .ascii "UM+"
      000623                          5         UPLUS:
      000623 A6 01            [ 1] 1228         LD A,#1
      000625 90 93            [ 1] 1229         LDW Y,X
      000627 90 EE 02         [ 2] 1230         LDW Y,(2,Y)
      00062A 90 BF 26         [ 2] 1231         LDW YTEMP,Y
      00062D 90 93            [ 1] 1232         LDW Y,X
      00062F 90 FE            [ 2] 1233         LDW Y,(Y)
      000631 72 B9 00 26      [ 2] 1234         ADDW Y,YTEMP
      000635 EF 02            [ 2] 1235         LDW (2,X),Y
      000637 25 01            [ 1] 1236         JRC     UPL1
      000639 4F               [ 1] 1237         CLR A
      00063A E7 01            [ 1] 1238 UPL1:   LD     (1,X),A
      00063C 7F               [ 1] 1239         CLR (X)
      00063D 81               [ 4] 1240         RET
                                   1241 
                                   1242 ;; System and user variables
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;       doVAR   ( -- a )
                                   1246 ;       run time code 
                                   1247 ;       for VARIABLE and CREATE.
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1249 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      00063E                       1250 DOVAR:
      00063E 1D 00 02         [ 2] 1251 	SUBW X,#2
      000641 90 85            [ 2] 1252         POPW Y    ;get return addr (pfa)
      000643 90 FE            [ 2] 1253         LDW Y,(Y) ; indirect address 
      000645 FF               [ 2] 1254         LDW (X),Y    ;push on stack
      000646 81               [ 4] 1255         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1256 
                                   1257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1258 ;       BASE    ( -- a )
                                   1259 ;       Radix base for numeric I/O.
                                   1260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000647                       1261         _HEADER BASE,4,"BASE"
      000647 06 1F                    1         .word LINK 
                           000649     2         LINK=.
      000649 04                       3         .byte 4  
      00064A 42 41 53 45              4         .ascii "BASE"
      00064E                          5         BASE:
      00064E 90 AE 00 06      [ 2] 1262 	LDW Y,#UBASE 
      000652 1D 00 02         [ 2] 1263 	SUBW X,#2
      000655 FF               [ 2] 1264         LDW (X),Y
      000656 81               [ 4] 1265         RET
                                   1266 
                                   1267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1268 ;       tmp     ( -- a )
                                   1269 ;       A temporary storage.
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000657                       1271         _HEADER TEMP,3,"TMP"
      000657 06 49                    1         .word LINK 
                           000659     2         LINK=.
      000659 03                       3         .byte 3  
      00065A 54 4D 50                 4         .ascii "TMP"
      00065D                          5         TEMP:
      00065D 90 AE 00 0A      [ 2] 1272 	LDW Y,#UTMP
      000661 1D 00 02         [ 2] 1273 	SUBW X,#2
      000664 FF               [ 2] 1274         LDW (X),Y
      000665 81               [ 4] 1275         RET
                                   1276 
                                   1277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1278 ;       >IN     ( -- a )
                                   1279 ;        Hold parsing pointer.
                                   1280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000666                       1281         _HEADER INN,3,">IN"
      000666 06 59                    1         .word LINK 
                           000668     2         LINK=.
      000668 03                       3         .byte 3  
      000669 3E 49 4E                 4         .ascii ">IN"
      00066C                          5         INN:
      00066C 90 AE 00 0C      [ 2] 1282 	LDW Y,#UINN 
      000670 1D 00 02         [ 2] 1283 	SUBW X,#2
      000673 FF               [ 2] 1284         LDW (X),Y
      000674 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       #TIB    ( -- a )
                                   1289 ;       Count in terminal input 
                                   1290 ;       buffer.
                                   1291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000675                       1292         _HEADER NTIB,4,"#TIB"
      000675 06 68                    1         .word LINK 
                           000677     2         LINK=.
      000677 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000678 23 54 49 42              4         .ascii "#TIB"
      00067C                          5         NTIB:
      00067C 90 AE 00 0E      [ 2] 1293 	LDW Y,#UCTIB 
      000680 1D 00 02         [ 2] 1294 	SUBW X,#2
      000683 FF               [ 2] 1295         LDW (X),Y
      000684 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1299 ;       TBUF ( -- a )
                                   1300 ;       address of 128 bytes 
                                   1301 ;       transaction buffer
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1303         _HEADER TBUF,4,"TBUF"
      000685 06 77                    1         .word LINK 
                           000687     2         LINK=.
      000687 04                       3         .byte 4  
      000688 54 42 55 46              4         .ascii "TBUF"
      00068C                          5         TBUF:
      00068C 90 AE 16 80      [ 2] 1304         ldw y,#ROWBUFF
      000690 1D 00 02         [ 2] 1305         subw x,#CELLL
      000693 FF               [ 2] 1306         ldw (x),y 
      000694 81               [ 4] 1307         ret 
                                   1308 
                                   1309 ; systeme variable 
                                   1310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1311 ; compilation destination 
                                   1312 ; TFLASH ( -- A )
                                   1313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000695                       1314         _HEADER TFLASH,6,"TFLASH"
      000695 06 87                    1         .word LINK 
                           000697     2         LINK=.
      000697 06                       3         .byte 6  
      000698 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00069E                          5         TFLASH:
      00069E 1D 00 02         [ 2] 1315         subw x,#CELLL 
      0006A1 90 AE 00 20      [ 2] 1316         ldw y,#UTFLASH
      0006A5 FF               [ 2] 1317         ldw (x),y 
      0006A6 81               [ 4] 1318         ret 
                                   1319 
                                   1320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1321 ;       "EVAL   ( -- a )
                                   1322 ;       Execution vector of EVAL.
                                   1323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A7                       1324         _HEADER TEVAL,5,"'EVAL"
      0006A7 06 97                    1         .word LINK 
                           0006A9     2         LINK=.
      0006A9 05                       3         .byte 5  
      0006AA 27 45 56 41 4C           4         .ascii "'EVAL"
      0006AF                          5         TEVAL:
      0006AF 90 AE 00 12      [ 2] 1325 	LDW Y,#UINTER 
      0006B3 1D 00 02         [ 2] 1326 	SUBW X,#2
      0006B6 FF               [ 2] 1327         LDW (X),Y
      0006B7 81               [ 4] 1328         RET
                                   1329 
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1331 ;       HLD     ( -- a )
                                   1332 ;       Hold a pointer of output
                                   1333 ;        string.
                                   1334 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B8                       1335         _HEADER HLD,3,"HLD"
      0006B8 06 A9                    1         .word LINK 
                           0006BA     2         LINK=.
      0006BA 03                       3         .byte 3  
      0006BB 48 4C 44                 4         .ascii "HLD"
      0006BE                          5         HLD:
      0006BE 90 AE 00 14      [ 2] 1336 	LDW Y,#UHLD 
      0006C2 1D 00 02         [ 2] 1337 	SUBW X,#2
      0006C5 FF               [ 2] 1338         LDW (X),Y
      0006C6 81               [ 4] 1339         RET
                                   1340 
                                   1341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1342 ;       CONTEXT ( -- a )
                                   1343 ;       Start vocabulary search.
                                   1344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006C7                       1345         _HEADER CNTXT,7,"CONTEXT"
      0006C7 06 BA                    1         .word LINK 
                           0006C9     2         LINK=.
      0006C9 07                       3         .byte 7  
      0006CA 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      0006D1                          5         CNTXT:
      0006D1 90 AE 00 16      [ 2] 1346 	LDW Y,#UCNTXT
      0006D5 1D 00 02         [ 2] 1347 	SUBW X,#2
      0006D8 FF               [ 2] 1348         LDW (X),Y
      0006D9 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1352 ;       VP      ( -- a )
                                   1353 ;       Point to top of variables
                                   1354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006DA                       1355         _HEADER VPP,2,"VP"
      0006DA 06 C9                    1         .word LINK 
                           0006DC     2         LINK=.
      0006DC 02                       3         .byte 2  
      0006DD 56 50                    4         .ascii "VP"
      0006DF                          5         VPP:
      0006DF 90 AE 00 18      [ 2] 1356 	LDW Y,#UVP 
      0006E3 1D 00 02         [ 2] 1357 	SUBW X,#2
      0006E6 FF               [ 2] 1358         LDW (X),Y
      0006E7 81               [ 4] 1359         RET
                                   1360 
                                   1361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1362 ;       CP    ( -- a )
                                   1363 ;       Pointer to top of FLASH 
                                   1364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1365         _HEADER CPP,2,"CP"
      0006E8 06 DC                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 02                       3         .byte 2  
      0006EB 43 50                    4         .ascii "CP"
      0006ED                          5         CPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0006ED 90 AE 00 1A      [ 2] 1366         ldw y,#UCP 
      0006F1 1D 00 02         [ 2] 1367         subw x,#CELLL 
      0006F4 FF               [ 2] 1368         ldw (x),y 
      0006F5 81               [ 4] 1369         ret                
                                   1370 
                                   1371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1372 ;       LAST    ( -- a )
                                   1373 ;       Point to last name in 
                                   1374 ;       dictionary.
                                   1375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F6                       1376         _HEADER LAST,4,"LAST"
      0006F6 06 EA                    1         .word LINK 
                           0006F8     2         LINK=.
      0006F8 04                       3         .byte 4  
      0006F9 4C 41 53 54              4         .ascii "LAST"
      0006FD                          5         LAST:
      0006FD 90 AE 00 1C      [ 2] 1377 	LDW Y,#ULAST 
      000701 1D 00 02         [ 2] 1378 	SUBW X,#2
      000704 FF               [ 2] 1379         LDW (X),Y
      000705 81               [ 4] 1380         RET
                                   1381 
                                   1382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1383 ; address of system variable URLAST 
                                   1384 ;       RAMLAST ( -- a )
                                   1385 ; RAM dictionary context 
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1387         _HEADER RAMLAST,7,"RAMLAST"
      000706 06 F8                    1         .word LINK 
                           000708     2         LINK=.
      000708 07                       3         .byte 7  
      000709 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      000710                          5         RAMLAST:
      000710 90 AE 00 22      [ 2] 1388         ldw y,#URLAST 
      000714 1D 00 02         [ 2] 1389         subw x,#CELLL 
      000717 FF               [ 2] 1390         ldw (x),y 
      000718 81               [ 4] 1391         ret 
                                   1392 
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1394 ;       OFFSET ( -- a )
                                   1395 ;       address of system 
                                   1396 ;       variable OFFSET 
                                   1397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000719                       1398         _HEADER OFFSET,6,"OFFSET"
      000719 07 08                    1         .word LINK 
                           00071B     2         LINK=.
      00071B 06                       3         .byte 6  
      00071C 4F 46 46 53 45 54        4         .ascii "OFFSET"
      000722                          5         OFFSET:
      000722 1D 00 02         [ 2] 1399         subw x,#CELLL
      000725 90 AE 00 1E      [ 2] 1400         ldw y,#UOFFSET 
      000729 FF               [ 2] 1401         ldw (x),y 
      00072A 81               [ 4] 1402         ret 
                                   1403 
                                   1404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1405 ; adjust jump address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1406 ;  adding OFFSET
                                   1407 ; ADR-ADJ ( a -- a+offset )
                                   1408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00072B                       1409 ADRADJ: 
      00072B CD 07 22         [ 4] 1410         call OFFSET 
      00072E CD 04 E3         [ 4] 1411         call AT 
      000731 CC 07 AD         [ 2] 1412         jp PLUS 
                                   1413 
                                   1414 
                                   1415 ;; Common functions
                                   1416 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ;       ?DUP    ( w -- w w | 0 )
                                   1419 ;       Dup tos if its is not zero.
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000734                       1421         _HEADER QDUP,4,"?DUP"
      000734 07 1B                    1         .word LINK 
                           000736     2         LINK=.
      000736 04                       3         .byte 4  
      000737 3F 44 55 50              4         .ascii "?DUP"
      00073B                          5         QDUP:
      00073B 90 93            [ 1] 1422         LDW Y,X
      00073D 90 FE            [ 2] 1423 	LDW Y,(Y)
      00073F 27 04            [ 1] 1424         JREQ     QDUP1
      000741 1D 00 02         [ 2] 1425 	SUBW X,#2
      000744 FF               [ 2] 1426         LDW (X),Y
      000745 81               [ 4] 1427 QDUP1:  RET
                                   1428 
                                   1429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1430 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1431 ;       Rot 3rd item to top.
                                   1432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000746                       1433         _HEADER ROT,3,"ROT"
      000746 07 36                    1         .word LINK 
                           000748     2         LINK=.
      000748 03                       3         .byte 3  
      000749 52 4F 54                 4         .ascii "ROT"
      00074C                          5         ROT:
      00074C 90 93            [ 1] 1434         ldw y,x 
      00074E 90 FE            [ 2] 1435         ldw y,(y)
      000750 90 89            [ 2] 1436         pushw y 
      000752 90 93            [ 1] 1437         ldw y,x 
      000754 90 EE 04         [ 2] 1438         ldw y,(4,y)
      000757 FF               [ 2] 1439         ldw (x),y 
      000758 90 93            [ 1] 1440         ldw y,x 
      00075A 90 EE 02         [ 2] 1441         ldw y,(2,y)
      00075D EF 04            [ 2] 1442         ldw (4,x),y 
      00075F 90 85            [ 2] 1443         popw y 
      000761 EF 02            [ 2] 1444         ldw (2,x),y
      000763 81               [ 4] 1445         ret 
                                   1446 
                                   1447 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1448 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1449 ;    rotate left 3 top elements 
                                   1450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000764                       1451     _HEADER NROT,4,"<ROT"
      000764 07 48                    1         .word LINK 
                           000766     2         LINK=.
      000766 04                       3         .byte 4  
      000767 3C 52 4F 54              4         .ascii "<ROT"
      00076B                          5         NROT:
      00076B 90 93            [ 1] 1452     LDW Y,X 
      00076D 90 FE            [ 2] 1453     LDW Y,(Y)
      00076F 90 BF 26         [ 2] 1454     LDW YTEMP,Y ; n3  
      000772 90 93            [ 1] 1455     LDW Y,X 
      000774 90 EE 02         [ 2] 1456     LDW Y,(2,Y) ; Y = n2 
      000777 FF               [ 2] 1457     LDW (X),Y   ; TOS = n2 
      000778 90 93            [ 1] 1458     LDW Y,X    
      00077A 90 EE 04         [ 2] 1459     LDW Y,(4,Y) ; Y = n1 
      00077D EF 02            [ 2] 1460     LDW (2,X),Y ;   = n1 
      00077F 90 BE 26         [ 2] 1461     LDW Y,YTEMP 
      000782 EF 04            [ 2] 1462     LDW (4,X),Y ; = n3 
      000784 81               [ 4] 1463     RET 
                                   1464 
                                   1465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1466 ;       2DROP   ( w w -- )
                                   1467 ;       Discard two items on stack.
                                   1468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000785                       1469         _HEADER DDROP,5,"2DROP"
      000785 07 66                    1         .word LINK 
                           000787     2         LINK=.
      000787 05                       3         .byte 5  
      000788 32 44 52 4F 50           4         .ascii "2DROP"
      00078D                          5         DDROP:
      00078D 1C 00 04         [ 2] 1470         ADDW X,#4
      000790 81               [ 4] 1471         RET
                                   1472 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1474 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1475 ;       Duplicate top two items.
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000791                       1477         _HEADER DDUP,4,"2DUP"
      000791 07 87                    1         .word LINK 
                           000793     2         LINK=.
      000793 04                       3         .byte 4  
      000794 32 44 55 50              4         .ascii "2DUP"
      000798                          5         DDUP:
      000798 1D 00 04         [ 2] 1478         SUBW X,#4
      00079B 90 93            [ 1] 1479         LDW Y,X
      00079D 90 EE 06         [ 2] 1480         LDW Y,(6,Y)
      0007A0 EF 02            [ 2] 1481         LDW (2,X),Y
      0007A2 90 93            [ 1] 1482         LDW Y,X
      0007A4 90 EE 04         [ 2] 1483         LDW Y,(4,Y)
      0007A7 FF               [ 2] 1484         LDW (X),Y
      0007A8 81               [ 4] 1485         RET
                                   1486 
                                   1487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1488 ;       +       ( w w -- sum )
                                   1489 ;       Add top two items.
                                   1490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007A9                       1491         _HEADER PLUS,1,"+"
      0007A9 07 93                    1         .word LINK 
                           0007AB     2         LINK=.
      0007AB 01                       3         .byte 1  
      0007AC 2B                       4         .ascii "+"
      0007AD                          5         PLUS:
      0007AD 90 93            [ 1] 1492         LDW Y,X
      0007AF 90 FE            [ 2] 1493         LDW Y,(Y)
      0007B1 90 BF 26         [ 2] 1494         LDW YTEMP,Y
      0007B4 1C 00 02         [ 2] 1495         ADDW X,#2
      0007B7 90 93            [ 1] 1496         LDW Y,X
      0007B9 90 FE            [ 2] 1497         LDW Y,(Y)
      0007BB 72 B9 00 26      [ 2] 1498         ADDW Y,YTEMP
      0007BF FF               [ 2] 1499         LDW (X),Y
      0007C0 81               [ 4] 1500         RET
                                   1501 
                                   1502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1503 ;       NOT     ( w -- w )
                                   1504 ;       One's complement of tos.
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C1                       1506         _HEADER INVER,3,"NOT"
      0007C1 07 AB                    1         .word LINK 
                           0007C3     2         LINK=.
      0007C3 03                       3         .byte 3  
      0007C4 4E 4F 54                 4         .ascii "NOT"
      0007C7                          5         INVER:
      0007C7 90 93            [ 1] 1507         LDW Y,X
      0007C9 90 FE            [ 2] 1508         LDW Y,(Y)
      0007CB 90 53            [ 2] 1509         CPLW Y
      0007CD FF               [ 2] 1510         LDW (X),Y
      0007CE 81               [ 4] 1511         RET
                                   1512 
                                   1513 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1514 ;       NEGATE  ( n -- -n )
                                   1515 ;       Two's complement of tos.
                                   1516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007CF                       1517         _HEADER NEGAT,6,"NEGATE"
      0007CF 07 C3                    1         .word LINK 
                           0007D1     2         LINK=.
      0007D1 06                       3         .byte 6  
      0007D2 4E 45 47 41 54 45        4         .ascii "NEGATE"
      0007D8                          5         NEGAT:
      0007D8 90 93            [ 1] 1518         LDW Y,X
      0007DA 90 FE            [ 2] 1519         LDW Y,(Y)
      0007DC 90 50            [ 2] 1520         NEGW Y
      0007DE FF               [ 2] 1521         LDW (X),Y
      0007DF 81               [ 4] 1522         RET
                                   1523 
                                   1524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1525 ;       DNEGATE ( d -- -d )
                                   1526 ;       Two's complement of top double.
                                   1527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007E0                       1528         _HEADER DNEGA,7,"DNEGATE"
      0007E0 07 D1                    1         .word LINK 
                           0007E2     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0007E2 07                       3         .byte 7  
      0007E3 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0007EA                          5         DNEGA:
      0007EA 90 93            [ 1] 1529         LDW Y,X
      0007EC 90 FE            [ 2] 1530 	LDW Y,(Y)
      0007EE 90 53            [ 2] 1531         CPLW Y     
      0007F0 90 BF 26         [ 2] 1532 	LDW YTEMP,Y
      0007F3 90 93            [ 1] 1533         LDW Y,X
      0007F5 90 EE 02         [ 2] 1534         LDW Y,(2,Y)
      0007F8 90 53            [ 2] 1535         CPLW Y
      0007FA 72 A9 00 01      [ 2] 1536         addw y,#1
      0007FE EF 02            [ 2] 1537         LDW (2,X),Y
      000800 90 BE 26         [ 2] 1538         LDW Y,YTEMP
      000803 24 02            [ 1] 1539         JRNC DN1 
      000805 90 5C            [ 1] 1540         INCW Y
      000807 FF               [ 2] 1541 DN1:    LDW (X),Y
      000808 81               [ 4] 1542         RET
                                   1543 
                                   1544 
                                   1545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1546 ;       S>D ( n -- d )
                                   1547 ; convert single integer to double 
                                   1548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000809                       1549         _HEADER STOD,3,"S>D"
      000809 07 E2                    1         .word LINK 
                           00080B     2         LINK=.
      00080B 03                       3         .byte 3  
      00080C 53 3E 44                 4         .ascii "S>D"
      00080F                          5         STOD:
      00080F 1D 00 02         [ 2] 1550         subw x,#CELLL 
      000812 90 5F            [ 1] 1551         clrw y 
      000814 FF               [ 2] 1552         ldw (x),y 
      000815 90 93            [ 1] 1553         ldw y,x 
      000817 90 EE 02         [ 2] 1554         ldw y,(2,y)
      00081A 2A 05            [ 1] 1555         jrpl 1$ 
      00081C 90 AE FF FF      [ 2] 1556         ldw y,#-1
      000820 FF               [ 2] 1557         ldw (x),y 
      000821 81               [ 4] 1558 1$:     ret 
                                   1559 
                                   1560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1561 ;       -       ( n1 n2 -- n1-n2 )
                                   1562 ;       Subtraction.
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000822                       1564         _HEADER SUBB,1,"-"
      000822 08 0B                    1         .word LINK 
                           000824     2         LINK=.
      000824 01                       3         .byte 1  
      000825 2D                       4         .ascii "-"
      000826                          5         SUBB:
      000826 90 93            [ 1] 1565         LDW Y,X
      000828 90 FE            [ 2] 1566         LDW Y,(Y)
      00082A 90 BF 26         [ 2] 1567         LDW YTEMP,Y
      00082D 1C 00 02         [ 2] 1568         ADDW X,#2
      000830 90 93            [ 1] 1569         LDW Y,X
      000832 90 FE            [ 2] 1570         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000834 72 B2 00 26      [ 2] 1571         SUBW Y,YTEMP
      000838 FF               [ 2] 1572         LDW (X),Y
      000839 81               [ 4] 1573         RET
                                   1574 
                                   1575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1576 ;       ABS     ( n -- n )
                                   1577 ;       Return  absolute value of n.
                                   1578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00083A                       1579         _HEADER ABSS,3,"ABS"
      00083A 08 24                    1         .word LINK 
                           00083C     2         LINK=.
      00083C 03                       3         .byte 3  
      00083D 41 42 53                 4         .ascii "ABS"
      000840                          5         ABSS:
      000840 90 93            [ 1] 1580         LDW Y,X
      000842 90 FE            [ 2] 1581 	LDW Y,(Y)
      000844 2A 03            [ 1] 1582         JRPL     AB1     ;negate:
      000846 90 50            [ 2] 1583         NEGW     Y     ;else negate hi byte
      000848 FF               [ 2] 1584         LDW (X),Y
      000849 81               [ 4] 1585 AB1:    RET
                                   1586 
                                   1587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1588 ;       =       ( w w -- t )
                                   1589 ;       Return true if top two are =al.
                                   1590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00084A                       1591         _HEADER EQUAL,1,"="
      00084A 08 3C                    1         .word LINK 
                           00084C     2         LINK=.
      00084C 01                       3         .byte 1  
      00084D 3D                       4         .ascii "="
      00084E                          5         EQUAL:
      00084E A6 FF            [ 1] 1592         LD A,#0xFF  ;true
      000850 90 93            [ 1] 1593         LDW Y,X    ;D = n2
      000852 90 FE            [ 2] 1594         LDW Y,(Y)
      000854 90 BF 26         [ 2] 1595         LDW YTEMP,Y
      000857 1C 00 02         [ 2] 1596         ADDW X,#2
      00085A 90 93            [ 1] 1597         LDW Y,X
      00085C 90 FE            [ 2] 1598         LDW Y,(Y)
      00085E 90 B3 26         [ 2] 1599         CPW Y,YTEMP     ;if n2 <> n1
      000861 27 01            [ 1] 1600         JREQ     EQ1
      000863 4F               [ 1] 1601         CLR A
      000864 F7               [ 1] 1602 EQ1:    LD (X),A
      000865 E7 01            [ 1] 1603         LD (1,X),A
      000867 81               [ 4] 1604 	RET     
                                   1605 
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1607 ;       U<      ( u u -- t )
                                   1608 ;       Unsigned compare of top two items.
                                   1609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000868                       1610         _HEADER ULESS,2,"U<"
      000868 08 4C                    1         .word LINK 
                           00086A     2         LINK=.
      00086A 02                       3         .byte 2  
      00086B 55 3C                    4         .ascii "U<"
      00086D                          5         ULESS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00086D A6 FF            [ 1] 1611         LD A,#0xFF  ;true
      00086F 90 93            [ 1] 1612         LDW Y,X    ;D = n2
      000871 90 FE            [ 2] 1613         LDW Y,(Y)
      000873 90 BF 26         [ 2] 1614         LDW YTEMP,Y
      000876 1C 00 02         [ 2] 1615         ADDW X,#2
      000879 90 93            [ 1] 1616         LDW Y,X
      00087B 90 FE            [ 2] 1617         LDW Y,(Y)
      00087D 90 B3 26         [ 2] 1618         CPW Y,YTEMP     ;if n2 <> n1
      000880 25 01            [ 1] 1619         JRULT     ULES1
      000882 4F               [ 1] 1620         CLR A
      000883 F7               [ 1] 1621 ULES1:  LD (X),A
      000884 E7 01            [ 1] 1622         LD (1,X),A
      000886 81               [ 4] 1623 	RET     
                                   1624 
                                   1625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1626 ;       <       ( n1 n2 -- t )
                                   1627 ;       Signed compare of top two items.
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000887                       1629         _HEADER LESS,1,"<"
      000887 08 6A                    1         .word LINK 
                           000889     2         LINK=.
      000889 01                       3         .byte 1  
      00088A 3C                       4         .ascii "<"
      00088B                          5         LESS:
      00088B A6 FF            [ 1] 1630         LD A,#0xFF  ;true
      00088D 90 93            [ 1] 1631         LDW Y,X    ;D = n2
      00088F 90 FE            [ 2] 1632         LDW Y,(Y)
      000891 90 BF 26         [ 2] 1633         LDW YTEMP,Y
      000894 1C 00 02         [ 2] 1634         ADDW X,#2
      000897 90 93            [ 1] 1635         LDW Y,X
      000899 90 FE            [ 2] 1636         LDW Y,(Y)
      00089B 90 B3 26         [ 2] 1637         CPW Y,YTEMP     ;if n2 <> n1
      00089E 2F 01            [ 1] 1638         JRSLT     LT1
      0008A0 4F               [ 1] 1639         CLR A
      0008A1 F7               [ 1] 1640 LT1:    LD (X),A
      0008A2 E7 01            [ 1] 1641         LD (1,X),A
      0008A4 81               [ 4] 1642 	RET     
                                   1643 
                                   1644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1645 ;   U> ( u1 u2 -- f )
                                   1646 ;   f = true if u1>u2 
                                   1647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008A5                       1648     _HEADER UGREAT,2,"U>"
      0008A5 08 89                    1         .word LINK 
                           0008A7     2         LINK=.
      0008A7 02                       3         .byte 2  
      0008A8 55 3E                    4         .ascii "U>"
      0008AA                          5         UGREAT:
      0008AA A6 00            [ 1] 1649     LD A,#0 
      0008AC 90 93            [ 1] 1650     LDW Y,X 
      0008AE 90 FE            [ 2] 1651     LDW Y,(Y)
      0008B0 90 BF 26         [ 2] 1652     LDW YTEMP,Y 
      0008B3 1C 00 02         [ 2] 1653     ADDW X,#2 
      0008B6 90 93            [ 1] 1654     LDW Y,X
      0008B8 90 FE            [ 2] 1655     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008BA 90 B3 26         [ 2] 1656     CPW Y,YTEMP 
      0008BD 23 02            [ 2] 1657     JRULE UGREAT1 
      0008BF A6 FF            [ 1] 1658     LD A,#0xff  
      0008C1                       1659 UGREAT1:
      0008C1 F7               [ 1] 1660     LD (X),A 
      0008C2 E7 01            [ 1] 1661     LD (1,X),A 
      0008C4 81               [ 4] 1662     RET 
                                   1663 
                                   1664 
                                   1665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1666 ;       >   (n1 n2 -- f )
                                   1667 ;  signed compare n1 n2 
                                   1668 ;  true if n1 > n2 
                                   1669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008C5                       1670         _HEADER GREAT,1,">"
      0008C5 08 A7                    1         .word LINK 
                           0008C7     2         LINK=.
      0008C7 01                       3         .byte 1  
      0008C8 3E                       4         .ascii ">"
      0008C9                          5         GREAT:
      0008C9 A6 FF            [ 1] 1671         LD A,#0xFF ;
      0008CB 90 93            [ 1] 1672         LDW Y,X 
      0008CD 90 FE            [ 2] 1673         LDW Y,(Y)
      0008CF 90 BF 26         [ 2] 1674         LDW YTEMP,Y 
      0008D2 1C 00 02         [ 2] 1675         ADDW X,#2 
      0008D5 90 93            [ 1] 1676         LDW Y,X 
      0008D7 90 FE            [ 2] 1677         LDW Y,(Y)
      0008D9 90 B3 26         [ 2] 1678         CPW  Y,YTEMP 
      0008DC 2C 01            [ 1] 1679         JRSGT GREAT1 
      0008DE 4F               [ 1] 1680         CLR  A
      0008DF                       1681 GREAT1:
      0008DF F7               [ 1] 1682         LD (X),A 
      0008E0 E7 01            [ 1] 1683         LD (1,X),A 
      0008E2 81               [ 4] 1684         RET 
                                   1685 
                                   1686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1687 ;       MAX     ( n n -- n )
                                   1688 ;       Return greater of two top items.
                                   1689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E3                       1690         _HEADER MAX,3,"MAX"
      0008E3 08 C7                    1         .word LINK 
                           0008E5     2         LINK=.
      0008E5 03                       3         .byte 3  
      0008E6 4D 41 58                 4         .ascii "MAX"
      0008E9                          5         MAX:
      0008E9 90 93            [ 1] 1691         LDW Y,X    ;D = n2
      0008EB 90 EE 02         [ 2] 1692         LDW Y,(2,Y)
      0008EE 90 BF 26         [ 2] 1693         LDW YTEMP,Y
      0008F1 90 93            [ 1] 1694         LDW Y,X
      0008F3 90 FE            [ 2] 1695         LDW Y,(Y)
      0008F5 90 B3 26         [ 2] 1696         CPW Y,YTEMP     ;if n2 <> n1
      0008F8 2F 02            [ 1] 1697         JRSLT     MAX1
      0008FA EF 02            [ 2] 1698         LDW (2,X),Y
      0008FC 1C 00 02         [ 2] 1699 MAX1:   ADDW X,#2
      0008FF 81               [ 4] 1700 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   1701 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1703 ;       MIN     ( n n -- n )
                                   1704 ;       Return smaller of top two items.
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000900                       1706         _HEADER MIN,3,"MIN"
      000900 08 E5                    1         .word LINK 
                           000902     2         LINK=.
      000902 03                       3         .byte 3  
      000903 4D 49 4E                 4         .ascii "MIN"
      000906                          5         MIN:
      000906 90 93            [ 1] 1707         LDW Y,X    ;D = n2
      000908 90 EE 02         [ 2] 1708         LDW Y,(2,Y)
      00090B 90 BF 26         [ 2] 1709         LDW YTEMP,Y
      00090E 90 93            [ 1] 1710         LDW Y,X
      000910 90 FE            [ 2] 1711         LDW Y,(Y)
      000912 90 B3 26         [ 2] 1712         CPW Y,YTEMP     ;if n2 <> n1
      000915 2C 02            [ 1] 1713         JRSGT     MIN1
      000917 EF 02            [ 2] 1714         LDW (2,X),Y
      000919 1C 00 02         [ 2] 1715 MIN1:	ADDW X,#2
      00091C 81               [ 4] 1716 	RET     
                                   1717 
                                   1718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1719 ;       WITHIN  ( u ul uh -- t )
                                   1720 ;       Return true if u is within
                                   1721 ;       range of ul and uh. ( ul <= u < uh )
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00091D                       1723         _HEADER WITHI,6,"WITHIN"
      00091D 09 02                    1         .word LINK 
                           00091F     2         LINK=.
      00091F 06                       3         .byte 6  
      000920 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000926                          5         WITHI:
      000926 CD 05 B0         [ 4] 1724         CALL     OVER
      000929 CD 08 26         [ 4] 1725         CALL     SUBB
      00092C CD 05 51         [ 4] 1726         CALL     TOR
      00092F CD 08 26         [ 4] 1727         CALL     SUBB
      000932 CD 05 34         [ 4] 1728         CALL     RFROM
      000935 CC 08 6D         [ 2] 1729         JP     ULESS
                                   1730 
                                   1731 ;; Divide
                                   1732 
                                   1733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1734 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1735 ;       Unsigned divide of a double by a
                                   1736 ;       single. Return mod and quotient.
                                   1737 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1738         _HEADER UMMOD,6,"UM/MOD"
      000938 09 1F                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 06                       3         .byte 6  
      00093B 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      000941                          5         UMMOD:
                                   1739 ; 2021-02-22
                                   1740 ; changed algortihm for Jeeek one 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1741 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      000941 90 93            [ 1] 1742         LDW     Y,X             ; stack pointer to Y
      000943 FE               [ 2] 1743         LDW     X,(X)           ; un
      000944 BF 26            [ 2] 1744         LDW     YTEMP,X         ; save un
      000946 93               [ 1] 1745         LDW     X,Y
      000947 5C               [ 1] 1746         INCW    X               ; drop un
      000948 5C               [ 1] 1747         INCW    X
      000949 89               [ 2] 1748         PUSHW   X               ; save stack pointer
      00094A FE               [ 2] 1749         LDW     X,(X)           ; X=udh
      00094B 90 EE 04         [ 2] 1750         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00094E B3 26            [ 2] 1751         CPW     X,YTEMP
      000950 25 0B            [ 1] 1752         JRULT   MMSM1           ; X is still on the R-stack
      000952 85               [ 2] 1753         POPW    X               ; restore stack pointer
      000953 90 AE FF FF      [ 2] 1754         LDW     Y,#0xFFFF       ; overflow result:
      000957 FF               [ 2] 1755         LDW     (X),Y           ; quotient max. 16 bit value
      000958 90 5F            [ 1] 1756         CLRW    Y
      00095A EF 02            [ 2] 1757         LDW     (2,X),Y         ; remainder 0
      00095C 81               [ 4] 1758         RET
      00095D                       1759 MMSM1:
      00095D A6 10            [ 1] 1760         LD      A,#16           ; loop count
      00095F 90 58            [ 2] 1761         SLLW    Y               ; udl shift udl into udh
      000961                       1762 MMSM3:
      000961 59               [ 2] 1763         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000962 25 04            [ 1] 1764         JRC     MMSMa           ; if carry out of rotate
      000964 B3 26            [ 2] 1765         CPW     X,YTEMP         ; compare udh to un
      000966 25 05            [ 1] 1766         JRULT   MMSM4           ; can't subtract
      000968                       1767 MMSMa:
      000968 72 B0 00 26      [ 2] 1768         SUBW    X,YTEMP         ; can subtract
      00096C 98               [ 1] 1769         RCF
      00096D                       1770 MMSM4:
      00096D 8C               [ 1] 1771         CCF                     ; quotient bit
      00096E 90 59            [ 2] 1772         RLCW    Y               ; rotate into quotient, rotate out udl
      000970 4A               [ 1] 1773         DEC     A               ; repeat
      000971 26 EE            [ 1] 1774         JRNE    MMSM3           ; if A == 0
      000973                       1775 MMSMb:
      000973 BF 26            [ 2] 1776         LDW     YTEMP,X         ; done, save remainder
      000975 85               [ 2] 1777         POPW    X               ; restore stack pointer
      000976 FF               [ 2] 1778         LDW     (X),Y           ; save quotient
      000977 90 BE 26         [ 2] 1779         LDW     Y,YTEMP         ; remainder onto stack
      00097A EF 02            [ 2] 1780         LDW     (2,X),Y
      00097C 81               [ 4] 1781         RET
                                   1782 
                                   1783 
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1785 ;       M/MOD   ( d n -- r q )
                                   1786 ;       Signed floored divide of double by
                                   1787 ;       single. Return mod and quotient.
                                   1788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097D                       1789         _HEADER MSMOD,5,"M/MOD"
      00097D 09 3A                    1         .word LINK 
                           00097F     2         LINK=.
      00097F 05                       3         .byte 5  
      000980 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000985                          5         MSMOD:
      000985 CD 05 88         [ 4] 1790         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000988 CD 05 BF         [ 4] 1791         CALL	ZLESS
      00098B CD 05 88         [ 4] 1792         CALL	DUPP
      00098E CD 05 51         [ 4] 1793         CALL	TOR
      000991 CD 04 98         [ 4] 1794         CALL	QBRAN
      000994 09 A2                 1795         .word	MMOD1
      000996 CD 07 D8         [ 4] 1796         CALL	NEGAT
      000999 CD 05 51         [ 4] 1797         CALL	TOR
      00099C CD 07 EA         [ 4] 1798         CALL	DNEGA
      00099F CD 05 34         [ 4] 1799         CALL	RFROM
      0009A2 CD 05 51         [ 4] 1800 MMOD1:	CALL	TOR
      0009A5 CD 05 88         [ 4] 1801         CALL	DUPP
      0009A8 CD 05 BF         [ 4] 1802         CALL	ZLESS
      0009AB CD 04 98         [ 4] 1803         CALL	QBRAN
      0009AE 09 B6                 1804         .word	MMOD2
      0009B0 CD 05 45         [ 4] 1805         CALL	RAT
      0009B3 CD 07 AD         [ 4] 1806         CALL	PLUS
      0009B6 CD 05 34         [ 4] 1807 MMOD2:	CALL	RFROM
      0009B9 CD 09 41         [ 4] 1808         CALL	UMMOD
      0009BC CD 05 34         [ 4] 1809         CALL	RFROM
      0009BF CD 04 98         [ 4] 1810         CALL	QBRAN
      0009C2 09 CD                 1811         .word	MMOD3
      0009C4 CD 05 98         [ 4] 1812         CALL	SWAPP
      0009C7 CD 07 D8         [ 4] 1813         CALL	NEGAT
      0009CA CD 05 98         [ 4] 1814         CALL	SWAPP
      0009CD 81               [ 4] 1815 MMOD3:	RET
                                   1816 
                                   1817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1818 ;       /MOD    ( n n -- r q )
                                   1819 ;       Signed divide. Return mod 
                                   1820 ;       and quotient.
                                   1821 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009CE                       1822         _HEADER SLMOD,4,"/MOD"
      0009CE 09 7F                    1         .word LINK 
                           0009D0     2         LINK=.
      0009D0 04                       3         .byte 4  
      0009D1 2F 4D 4F 44              4         .ascii "/MOD"
      0009D5                          5         SLMOD:
      0009D5 CD 05 B0         [ 4] 1823         CALL	OVER
      0009D8 CD 05 BF         [ 4] 1824         CALL	ZLESS
      0009DB CD 05 98         [ 4] 1825         CALL	SWAPP
      0009DE CC 09 85         [ 2] 1826         JP	MSMOD
                                   1827 
                                   1828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1829 ;       MOD     ( n n -- r )
                                   1830 ;       Signed divide. Return mod only.
                                   1831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009E1                       1832         _HEADER MODD,3,"MOD"
      0009E1 09 D0                    1         .word LINK 
                           0009E3     2         LINK=.
      0009E3 03                       3         .byte 3  
      0009E4 4D 4F 44                 4         .ascii "MOD"
      0009E7                          5         MODD:
      0009E7 CD 09 D5         [ 4] 1833 	CALL	SLMOD
      0009EA CC 05 7E         [ 2] 1834 	JP	DROP
                                   1835 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1836 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1837 ;       /       ( n n -- q )
                                   1838 ;       Signed divide. Return quotient only.
                                   1839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009ED                       1840         _HEADER SLASH,1,"/"
      0009ED 09 E3                    1         .word LINK 
                           0009EF     2         LINK=.
      0009EF 01                       3         .byte 1  
      0009F0 2F                       4         .ascii "/"
      0009F1                          5         SLASH:
      0009F1 CD 09 D5         [ 4] 1841         CALL	SLMOD
      0009F4 CD 05 98         [ 4] 1842         CALL	SWAPP
      0009F7 CC 05 7E         [ 2] 1843         JP	DROP
                                   1844 
                                   1845 ;; Multiply
                                   1846 
                                   1847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1848 ;       UM*     ( u u -- ud )
                                   1849 ;       Unsigned multiply. Return 
                                   1850 ;       double product.
                                   1851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009FA                       1852         _HEADER UMSTA,3,"UM*"
      0009FA 09 EF                    1         .word LINK 
                           0009FC     2         LINK=.
      0009FC 03                       3         .byte 3  
      0009FD 55 4D 2A                 4         .ascii "UM*"
      000A00                          5         UMSTA:
                                   1853 ; stack have 4 bytes u1=a,b u2=c,d
                                   1854 ; take advantage of SP addressing modes
                                   1855 ; these PRODx in RAM are not required
                                   1856 ; the product is kept on stack as local variable 
                                   1857         ;; bytes offset on data stack 
                           000002  1858         da=2 
                           000003  1859         db=3 
                           000000  1860         dc=0 
                           000001  1861         dd=1 
                                   1862         ;; product bytes offset on return stack 
                           000001  1863         UD1=1  ; ud bits 31..24
                           000002  1864         UD2=2  ; ud bits 23..16
                           000003  1865         UD3=3  ; ud bits 15..8 
                           000004  1866         UD4=4  ; ud bits 7..0 
                                   1867         ;; local variable for product set to zero   
      000A00 90 5F            [ 1] 1868         clrw y 
      000A02 90 89            [ 2] 1869         pushw y  ; bits 15..0
      000A04 90 89            [ 2] 1870         pushw y  ; bits 31..16 
      000A06 E6 03            [ 1] 1871         ld a,(db,x) ; b 
      000A08 90 97            [ 1] 1872         ld yl,a 
      000A0A E6 01            [ 1] 1873         ld a,(dd,x)   ; d
      000A0C 90 42            [ 4] 1874         mul y,a    ; b*d  
      000A0E 17 03            [ 2] 1875         ldw (UD3,sp),y ; lowest weight product 
      000A10 E6 03            [ 1] 1876         ld a,(db,x)
      000A12 90 97            [ 1] 1877         ld yl,a 
      000A14 E6 00            [ 1] 1878         ld a,(dc,x)
      000A16 90 42            [ 4] 1879         mul y,a  ; b*c 
                                   1880         ;;; do the partial sum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000A18 72 F9 02         [ 2] 1881         addw y,(UD2,sp)
      000A1B 4F               [ 1] 1882         clr a 
      000A1C 49               [ 1] 1883         rlc a
      000A1D 6B 01            [ 1] 1884         ld (UD1,sp),a 
      000A1F 17 02            [ 2] 1885         ldw (UD2,sp),y 
      000A21 E6 02            [ 1] 1886         ld a,(da,x)
      000A23 90 97            [ 1] 1887         ld yl,a 
      000A25 E6 01            [ 1] 1888         ld a,(dd,x)
      000A27 90 42            [ 4] 1889         mul y,a   ; a*d 
                                   1890         ;; do partial sum 
      000A29 72 F9 02         [ 2] 1891         addw y,(UD2,sp)
      000A2C 4F               [ 1] 1892         clr a 
      000A2D 19 01            [ 1] 1893         adc a,(UD1,sp)
      000A2F 6B 01            [ 1] 1894         ld (UD1,sp),a  
      000A31 17 02            [ 2] 1895         ldw (UD2,sp),y 
      000A33 E6 02            [ 1] 1896         ld a,(da,x)
      000A35 90 97            [ 1] 1897         ld yl,a 
      000A37 E6 00            [ 1] 1898         ld a,(dc,x)
      000A39 90 42            [ 4] 1899         mul y,a  ;  a*c highest weight product 
                                   1900         ;;; do partial sum 
      000A3B 72 F9 01         [ 2] 1901         addw y,(UD1,sp)
      000A3E FF               [ 2] 1902         ldw (x),y  ; udh 
      000A3F 16 03            [ 2] 1903         ldw y,(UD3,sp)
      000A41 EF 02            [ 2] 1904         ldw (2,x),y  ; udl  
      000A43 5B 04            [ 2] 1905         addw sp,#4 ; drop local variable 
      000A45 81               [ 4] 1906         ret  
                                   1907 
                                   1908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1909 ;       *       ( n n -- n )
                                   1910 ;       Signed multiply. Return 
                                   1911 ;       single product.
                                   1912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A46                       1913         _HEADER STAR,1,"*"
      000A46 09 FC                    1         .word LINK 
                           000A48     2         LINK=.
      000A48 01                       3         .byte 1  
      000A49 2A                       4         .ascii "*"
      000A4A                          5         STAR:
      000A4A CD 0A 00         [ 4] 1914 	CALL	UMSTA
      000A4D CC 05 7E         [ 2] 1915 	JP	DROP
                                   1916 
                                   1917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1918 ;       M*      ( n n -- d )
                                   1919 ;       Signed multiply. Return 
                                   1920 ;       double product.
                                   1921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A50                       1922         _HEADER MSTAR,2,"M*"
      000A50 0A 48                    1         .word LINK 
                           000A52     2         LINK=.
      000A52 02                       3         .byte 2  
      000A53 4D 2A                    4         .ascii "M*"
      000A55                          5         MSTAR:
      000A55 CD 07 98         [ 4] 1923         CALL	DDUP
      000A58 CD 06 0E         [ 4] 1924         CALL	XORR
      000A5B CD 05 BF         [ 4] 1925         CALL	ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A5E CD 05 51         [ 4] 1926         CALL	TOR
      000A61 CD 08 40         [ 4] 1927         CALL	ABSS
      000A64 CD 05 98         [ 4] 1928         CALL	SWAPP
      000A67 CD 08 40         [ 4] 1929         CALL	ABSS
      000A6A CD 0A 00         [ 4] 1930         CALL	UMSTA
      000A6D CD 05 34         [ 4] 1931         CALL	RFROM
      000A70 CD 04 98         [ 4] 1932         CALL	QBRAN
      000A73 0A 78                 1933         .word	MSTA1
      000A75 CD 07 EA         [ 4] 1934         CALL	DNEGA
      000A78 81               [ 4] 1935 MSTA1:	RET
                                   1936 
                                   1937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1938 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1939 ;       Multiply n1 and n2, then divide
                                   1940 ;       by n3. Return mod and quotient.
                                   1941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A79                       1942         _HEADER SSMOD,5,"*/MOD"
      000A79 0A 52                    1         .word LINK 
                           000A7B     2         LINK=.
      000A7B 05                       3         .byte 5  
      000A7C 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000A81                          5         SSMOD:
      000A81 CD 05 51         [ 4] 1943         CALL     TOR
      000A84 CD 0A 55         [ 4] 1944         CALL     MSTAR
      000A87 CD 05 34         [ 4] 1945         CALL     RFROM
      000A8A CC 09 85         [ 2] 1946         JP     MSMOD
                                   1947 
                                   1948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1949 ;       */      ( n1 n2 n3 -- q )
                                   1950 ;       Multiply n1 by n2, then divide
                                   1951 ;       by n3. Return quotient only.
                                   1952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A8D                       1953         _HEADER STASL,2,"*/"
      000A8D 0A 7B                    1         .word LINK 
                           000A8F     2         LINK=.
      000A8F 02                       3         .byte 2  
      000A90 2A 2F                    4         .ascii "*/"
      000A92                          5         STASL:
      000A92 CD 0A 81         [ 4] 1954         CALL	SSMOD
      000A95 CD 05 98         [ 4] 1955         CALL	SWAPP
      000A98 CC 05 7E         [ 2] 1956         JP	DROP
                                   1957 
                                   1958 ;; Miscellaneous
                                   1959 
                                   1960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1961 ;       CELL+   ( a -- a )
                                   1962 ;       Add cell size in byte to address.
                                   1963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A9B                       1964         _HEADER CELLP,2,"2+"
      000A9B 0A 8F                    1         .word LINK 
                           000A9D     2         LINK=.
      000A9D 02                       3         .byte 2  
      000A9E 32 2B                    4         .ascii "2+"
      000AA0                          5         CELLP:
      000AA0 90 93            [ 1] 1965         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AA2 90 FE            [ 2] 1966 	LDW Y,(Y)
      000AA4 72 A9 00 02      [ 2] 1967         ADDW Y,#CELLL 
      000AA8 FF               [ 2] 1968         LDW (X),Y
      000AA9 81               [ 4] 1969         RET
                                   1970 
                                   1971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1972 ;       CELL-   ( a -- a )
                                   1973 ;       Subtract 2 from address.
                                   1974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AAA                       1975         _HEADER CELLM,2,"2-"
      000AAA 0A 9D                    1         .word LINK 
                           000AAC     2         LINK=.
      000AAC 02                       3         .byte 2  
      000AAD 32 2D                    4         .ascii "2-"
      000AAF                          5         CELLM:
      000AAF 90 93            [ 1] 1976         LDW Y,X
      000AB1 90 FE            [ 2] 1977 	LDW Y,(Y)
      000AB3 72 A2 00 02      [ 2] 1978         SUBW Y,#CELLL
      000AB7 FF               [ 2] 1979         LDW (X),Y
      000AB8 81               [ 4] 1980         RET
                                   1981 
                                   1982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1983 ;       CELLS   ( n -- n )
                                   1984 ;       Multiply tos by 2.
                                   1985 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1986         _HEADER CELLS,2,"2*"
      000AB9 0A AC                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 02                       3         .byte 2  
      000ABC 32 2A                    4         .ascii "2*"
      000ABE                          5         CELLS:
      000ABE 90 93            [ 1] 1987         LDW Y,X
      000AC0 90 FE            [ 2] 1988 	LDW Y,(Y)
      000AC2 90 58            [ 2] 1989         SLAW Y
      000AC4 FF               [ 2] 1990         LDW (X),Y
      000AC5 81               [ 4] 1991         RET
                                   1992 
                                   1993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1994 ;       1+      ( a -- a )
                                   1995 ;       Add cell size in byte 
                                   1996 ;       to address.
                                   1997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC6                       1998         _HEADER ONEP,2,"1+"
      000AC6 0A BB                    1         .word LINK 
                           000AC8     2         LINK=.
      000AC8 02                       3         .byte 2  
      000AC9 31 2B                    4         .ascii "1+"
      000ACB                          5         ONEP:
      000ACB 90 93            [ 1] 1999         LDW Y,X
      000ACD 90 FE            [ 2] 2000 	LDW Y,(Y)
      000ACF 90 5C            [ 1] 2001         INCW Y
      000AD1 FF               [ 2] 2002         LDW (X),Y
      000AD2 81               [ 4] 2003         RET
                                   2004 
                                   2005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2006 ;       1-      ( a -- a )
                                   2007 ;       Subtract 2 from address.
                                   2008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD3                       2009         _HEADER ONEM,2,"1-"
      000AD3 0A C8                    1         .word LINK 
                           000AD5     2         LINK=.
      000AD5 02                       3         .byte 2  
      000AD6 31 2D                    4         .ascii "1-"
      000AD8                          5         ONEM:
      000AD8 90 93            [ 1] 2010         LDW Y,X
      000ADA 90 FE            [ 2] 2011 	LDW Y,(Y)
      000ADC 90 5A            [ 2] 2012         DECW Y
      000ADE FF               [ 2] 2013         LDW (X),Y
      000ADF 81               [ 4] 2014         RET
                                   2015 
                                   2016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2017 ;  shift left n times 
                                   2018 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AE0                       2020         _HEADER LSHIFT,6,"LSHIFT"
      000AE0 0A D5                    1         .word LINK 
                           000AE2     2         LINK=.
      000AE2 06                       3         .byte 6  
      000AE3 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000AE9                          5         LSHIFT:
      000AE9 E6 01            [ 1] 2021         ld a,(1,x)
      000AEB 1C 00 02         [ 2] 2022         addw x,#CELLL 
      000AEE 90 93            [ 1] 2023         ldw y,x 
      000AF0 90 FE            [ 2] 2024         ldw y,(y)
      000AF2                       2025 LSHIFT1:
      000AF2 4D               [ 1] 2026         tnz a 
      000AF3 27 05            [ 1] 2027         jreq LSHIFT4 
      000AF5 90 58            [ 2] 2028         sllw y 
      000AF7 4A               [ 1] 2029         dec a 
      000AF8 20 F8            [ 2] 2030         jra LSHIFT1 
      000AFA                       2031 LSHIFT4:
      000AFA FF               [ 2] 2032         ldw (x),y 
      000AFB 81               [ 4] 2033         ret 
                                   2034 
                                   2035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2036 ; shift right n times                 
                                   2037 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AFC                       2039         _HEADER RSHIFT,6,"RSHIFT"
      000AFC 0A E2                    1         .word LINK 
                           000AFE     2         LINK=.
      000AFE 06                       3         .byte 6  
      000AFF 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000B05                          5         RSHIFT:
      000B05 E6 01            [ 1] 2040         ld a,(1,x)
      000B07 1C 00 02         [ 2] 2041         addw x,#CELLL 
      000B0A 90 93            [ 1] 2042         ldw y,x 
      000B0C 90 FE            [ 2] 2043         ldw y,(y)
      000B0E                       2044 RSHIFT1:
      000B0E 4D               [ 1] 2045         tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B0F 27 05            [ 1] 2046         jreq RSHIFT4 
      000B11 90 54            [ 2] 2047         srlw y 
      000B13 4A               [ 1] 2048         dec a 
      000B14 20 F8            [ 2] 2049         jra RSHIFT1 
      000B16                       2050 RSHIFT4:
      000B16 FF               [ 2] 2051         ldw (x),y 
      000B17 81               [ 4] 2052         ret 
                                   2053 
                                   2054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2055 ;       2/      ( n -- n )
                                   2056 ;       divide  tos by 2.
                                   2057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B18                       2058         _HEADER TWOSL,2,"2/"
      000B18 0A FE                    1         .word LINK 
                           000B1A     2         LINK=.
      000B1A 02                       3         .byte 2  
      000B1B 32 2F                    4         .ascii "2/"
      000B1D                          5         TWOSL:
      000B1D 90 93            [ 1] 2059         LDW Y,X
      000B1F 90 FE            [ 2] 2060 	LDW Y,(Y)
      000B21 90 57            [ 2] 2061         SRAW Y
      000B23 FF               [ 2] 2062         LDW (X),Y
      000B24 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2066 ;       BL      ( -- 32 )
                                   2067 ;       Return 32,  blank character.
                                   2068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B25                       2069         _HEADER BLANK,2,"BL"
      000B25 0B 1A                    1         .word LINK 
                           000B27     2         LINK=.
      000B27 02                       3         .byte 2  
      000B28 42 4C                    4         .ascii "BL"
      000B2A                          5         BLANK:
      000B2A 1D 00 02         [ 2] 2070         SUBW X,#2
      000B2D 90 AE 00 20      [ 2] 2071 	LDW Y,#32
      000B31 FF               [ 2] 2072         LDW (X),Y
      000B32 81               [ 4] 2073         RET
                                   2074 
                                   2075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2076 ;         0     ( -- 0)
                                   2077 ;         Return 0.
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B33                       2079         _HEADER ZERO,1,"0"
      000B33 0B 27                    1         .word LINK 
                           000B35     2         LINK=.
      000B35 01                       3         .byte 1  
      000B36 30                       4         .ascii "0"
      000B37                          5         ZERO:
      000B37 1D 00 02         [ 2] 2080         SUBW X,#2
      000B3A 90 5F            [ 1] 2081 	CLRW Y
      000B3C FF               [ 2] 2082         LDW (X),Y
      000B3D 81               [ 4] 2083         RET
                                   2084 
                                   2085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2086 ;         1     ( -- 1)
                                   2087 ;         Return 1.
                                   2088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B3E                       2089         _HEADER ONE,1,"1"
      000B3E 0B 35                    1         .word LINK 
                           000B40     2         LINK=.
      000B40 01                       3         .byte 1  
      000B41 31                       4         .ascii "1"
      000B42                          5         ONE:
      000B42 1D 00 02         [ 2] 2090         SUBW X,#2
      000B45 90 AE 00 01      [ 2] 2091 	LDW Y,#1
      000B49 FF               [ 2] 2092         LDW (X),Y
      000B4A 81               [ 4] 2093         RET
                                   2094 
                                   2095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2096 ;         -1    ( -- -1)
                                   2097 ;   Return -1
                                   2098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B4B                       2099         _HEADER MONE,2,"-1"
      000B4B 0B 40                    1         .word LINK 
                           000B4D     2         LINK=.
      000B4D 02                       3         .byte 2  
      000B4E 2D 31                    4         .ascii "-1"
      000B50                          5         MONE:
      000B50 1D 00 02         [ 2] 2100         SUBW X,#2
      000B53 90 AE FF FF      [ 2] 2101 	LDW Y,#0xFFFF
      000B57 FF               [ 2] 2102         LDW (X),Y
      000B58 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2106 ;       >CHAR   ( c -- c )
                                   2107 ;       Filter non-printing characters.
                                   2108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B59                       2109         _HEADER TCHAR,5,">CHAR"
      000B59 0B 4D                    1         .word LINK 
                           000B5B     2         LINK=.
      000B5B 05                       3         .byte 5  
      000B5C 3E 43 48 41 52           4         .ascii ">CHAR"
      000B61                          5         TCHAR:
      000B61 E6 01            [ 1] 2110         ld a,(1,x)
      000B63 A1 20            [ 1] 2111         cp a,#32  
      000B65 2B 05            [ 1] 2112         jrmi 1$ 
      000B67 A1 7F            [ 1] 2113         cp a,#127 
      000B69 2A 01            [ 1] 2114         jrpl 1$ 
      000B6B 81               [ 4] 2115         ret 
      000B6C A6 5F            [ 1] 2116 1$:     ld a,#'_ 
      000B6E E7 01            [ 1] 2117         ld (1,x),a 
      000B70 81               [ 4] 2118         ret 
                                   2119 
                                   2120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2121 ;       DEPTH   ( -- n )
                                   2122 ;       Return  depth of  data stack.
                                   2123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B71                       2124         _HEADER DEPTH,5,"DEPTH"
      000B71 0B 5B                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000B73     2         LINK=.
      000B73 05                       3         .byte 5  
      000B74 44 45 50 54 48           4         .ascii "DEPTH"
      000B79                          5         DEPTH:
      000B79 90 BE 2C         [ 2] 2125         LDW Y,SP0    ;save data stack ptr
      000B7C BF 24            [ 2] 2126 	LDW XTEMP,X
      000B7E 72 B2 00 24      [ 2] 2127         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B82 90 57            [ 2] 2128         SRAW Y    ;Y = #stack items
      000B84 1D 00 02         [ 2] 2129 	SUBW X,#2
      000B87 FF               [ 2] 2130         LDW (X),Y     ; if neg, underflow
      000B88 81               [ 4] 2131         RET
                                   2132 
                                   2133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2134 ;       PICK    ( ... +n -- ... w )
                                   2135 ;       Copy  nth stack item to tos.
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B89                       2137         _HEADER PICK,4,"PICK"
      000B89 0B 73                    1         .word LINK 
                           000B8B     2         LINK=.
      000B8B 04                       3         .byte 4  
      000B8C 50 49 43 4B              4         .ascii "PICK"
      000B90                          5         PICK:
      000B90 90 93            [ 1] 2138         LDW Y,X   ;D = n1
      000B92 90 FE            [ 2] 2139         LDW Y,(Y)
                                   2140 ; modified for standard compliance          
                                   2141 ; 0 PICK must be equivalent to DUP 
      000B94 90 5C            [ 1] 2142         INCW Y 
      000B96 90 58            [ 2] 2143         SLAW Y
      000B98 BF 24            [ 2] 2144         LDW XTEMP,X
      000B9A 72 B9 00 24      [ 2] 2145         ADDW Y,XTEMP
      000B9E 90 FE            [ 2] 2146         LDW Y,(Y)
      000BA0 FF               [ 2] 2147         LDW (X),Y
      000BA1 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;; Memory access
                                   2151 
                                   2152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2153 ;       +!      ( n a -- )
                                   2154 ;       Add n to  contents at 
                                   2155 ;       address a.
                                   2156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA2                       2157         _HEADER PSTOR,2,"+!"
      000BA2 0B 8B                    1         .word LINK 
                           000BA4     2         LINK=.
      000BA4 02                       3         .byte 2  
      000BA5 2B 21                    4         .ascii "+!"
      000BA7                          5         PSTOR:
      000BA7 90 93            [ 1] 2158         ldw y,x 
      000BA9 90 FE            [ 2] 2159         ldw y,(y)
      000BAB 90 BF 26         [ 2] 2160         ldw YTEMP,y  ; address
      000BAE 90 FE            [ 2] 2161         ldw y,(y)  
      000BB0 90 89            [ 2] 2162         pushw y  ; value at address 
      000BB2 90 93            [ 1] 2163         ldw y,x 
      000BB4 90 EE 02         [ 2] 2164         ldw y,(2,y) ; n 
      000BB7 72 F9 01         [ 2] 2165         addw y,(1,sp) ; n+value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BBA 91 CF 26         [ 5] 2166         ldw [YTEMP],y ;  a!
      000BBD 90 85            [ 2] 2167         popw y    ;drop local var
      000BBF 1C 00 04         [ 2] 2168         addw x,#4 ; DDROP 
      000BC2 81               [ 4] 2169         ret 
                                   2170 
                                   2171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2172 ;       2!      ( d a -- )
                                   2173 ;       Store  double integer 
                                   2174 ;       to address a.
                                   2175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC3                       2176         _HEADER DSTOR,2,"2!"
      000BC3 0B A4                    1         .word LINK 
                           000BC5     2         LINK=.
      000BC5 02                       3         .byte 2  
      000BC6 32 21                    4         .ascii "2!"
      000BC8                          5         DSTOR:
      000BC8 90 93            [ 1] 2177         LDW Y,X 
      000BCA 89               [ 2] 2178         PUSHW X 
      000BCB FE               [ 2] 2179         LDW X,(X) ; a 
      000BCC 90 EE 02         [ 2] 2180         LDW Y,(2,Y) ; dhi 
      000BCF FF               [ 2] 2181         LDW (X),Y 
      000BD0 16 01            [ 2] 2182         LDW Y,(1,SP)  
      000BD2 90 EE 04         [ 2] 2183         LDW Y,(4,Y) ; dlo 
      000BD5 EF 02            [ 2] 2184         LDW (2,X),Y  
      000BD7 85               [ 2] 2185         POPW X 
      000BD8 1C 00 06         [ 2] 2186         ADDW X,#3*CELLL 
      000BDB 81               [ 4] 2187         RET 
                                   2188 
                                   2189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2190 ;       2@      ( a -- d )
                                   2191 ;       Fetch double integer 
                                   2192 ;       from address a.
                                   2193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BDC                       2194         _HEADER DAT,2,"2@"
      000BDC 0B C5                    1         .word LINK 
                           000BDE     2         LINK=.
      000BDE 02                       3         .byte 2  
      000BDF 32 40                    4         .ascii "2@"
      000BE1                          5         DAT:
      000BE1 90 93            [ 1] 2195         ldw y,x 
      000BE3 1D 00 02         [ 2] 2196         subw x,#CELLL 
      000BE6 90 FE            [ 2] 2197         ldw y,(y) ;address 
      000BE8 90 89            [ 2] 2198         pushw y  
      000BEA 90 FE            [ 2] 2199         ldw y,(y) ; dhi 
      000BEC FF               [ 2] 2200         ldw (x),y 
      000BED 90 85            [ 2] 2201         popw y 
      000BEF 90 EE 02         [ 2] 2202         ldw y,(2,y) ; dlo 
      000BF2 EF 02            [ 2] 2203         ldw (2,x),y 
      000BF4 81               [ 4] 2204         ret 
                                   2205 
                                   2206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2207 ;       COUNT   ( b -- b +n )
                                   2208 ;       Return count byte of a string
                                   2209 ;       and add 1 to byte address.
                                   2210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000BF5                       2211         _HEADER COUNT,5,"COUNT"
      000BF5 0B DE                    1         .word LINK 
                           000BF7     2         LINK=.
      000BF7 05                       3         .byte 5  
      000BF8 43 4F 55 4E 54           4         .ascii "COUNT"
      000BFD                          5         COUNT:
      000BFD 90 93            [ 1] 2212         ldw y,x 
      000BFF 90 FE            [ 2] 2213         ldw y,(y) ; address 
      000C01 90 F6            [ 1] 2214         ld a,(y)  ; count 
      000C03 90 5C            [ 1] 2215         incw y 
      000C05 FF               [ 2] 2216         ldw (x),y 
      000C06 1D 00 02         [ 2] 2217         subw x,#CELLL 
      000C09 E7 01            [ 1] 2218         ld (1,x),a 
      000C0B 7F               [ 1] 2219         clr (x)
      000C0C 81               [ 4] 2220         ret 
                                   2221 
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2223 ;       HERE    ( -- a )
                                   2224 ;       Return  top of  variables
                                   2225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0D                       2226         _HEADER HERE,4,"HERE"
      000C0D 0B F7                    1         .word LINK 
                           000C0F     2         LINK=.
      000C0F 04                       3         .byte 4  
      000C10 48 45 52 45              4         .ascii "HERE"
      000C14                          5         HERE:
      000C14 90 AE 00 18      [ 2] 2227       	ldw y,#UVP 
      000C18 90 FE            [ 2] 2228         ldw y,(y)
      000C1A 1D 00 02         [ 2] 2229         subw x,#CELLL 
      000C1D FF               [ 2] 2230         ldw (x),y 
      000C1E 81               [ 4] 2231         ret 
                                   2232 
                                   2233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2234 ;       PAD     ( -- a )
                                   2235 ;       Return address of text buffer
                                   2236 ;       above  code dictionary.
                                   2237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C1F                       2238         _HEADER PAD,3,"PAD"
      000C1F 0C 0F                    1         .word LINK 
                           000C21     2         LINK=.
      000C21 03                       3         .byte 3  
      000C22 50 41 44                 4         .ascii "PAD"
      000C25                          5         PAD:
      000C25 CD 0C 14         [ 4] 2239         CALL     HERE
      000C28                       2240         _DOLIT   80
      000C28 CD 04 6F         [ 4]    1     CALL DOLIT 
      000C2B 00 50                    2     .word 80 
      000C2D CC 07 AD         [ 2] 2241         JP     PLUS
                                   2242 
                                   2243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2244 ;       TIB     ( -- a )
                                   2245 ;       Return address of 
                                   2246 ;       terminal input buffer.
                                   2247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C30                       2248         _HEADER TIB,3,"TIB"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C30 0C 21                    1         .word LINK 
                           000C32     2         LINK=.
      000C32 03                       3         .byte 3  
      000C33 54 49 42                 4         .ascii "TIB"
      000C36                          5         TIB:
      000C36 CD 06 7C         [ 4] 2249         CALL     NTIB
      000C39 CD 0A A0         [ 4] 2250         CALL     CELLP
      000C3C CC 04 E3         [ 2] 2251         JP     AT
                                   2252 
                                   2253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2254 ;       @EXECUTE        ( a -- )
                                   2255 ;       Execute vector stored in 
                                   2256 ;       address a.
                                   2257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3F                       2258         _HEADER ATEXE,8,"@EXECUTE"
      000C3F 0C 32                    1         .word LINK 
                           000C41     2         LINK=.
      000C41 08                       3         .byte 8  
      000C42 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000C4A                          5         ATEXE:
      000C4A CD 04 E3         [ 4] 2259         CALL     AT
      000C4D CD 07 3B         [ 4] 2260         CALL     QDUP    ;?address or zero
      000C50 CD 04 98         [ 4] 2261         CALL     QBRAN
      000C53 0C 58                 2262         .word      EXE1
      000C55 CD 04 C4         [ 4] 2263         CALL     EXECU   ;execute if non-zero
      000C58 81               [ 4] 2264 EXE1:   RET     ;do nothing if zero
                                   2265 
                                   2266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2267 ;       CMOVE   ( b1 b2 u -- )
                                   2268 ;       Copy u bytes from b1 to b2.
                                   2269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C59                       2270         _HEADER CMOVE,5,"CMOVE"
      000C59 0C 41                    1         .word LINK 
                           000C5B     2         LINK=.
      000C5B 05                       3         .byte 5  
      000C5C 43 4D 4F 56 45           4         .ascii "CMOVE"
      000C61                          5         CMOVE:
      000C61 CD 05 51         [ 4] 2271         CALL	TOR
      000C64 CD 04 B4         [ 4] 2272         CALL	BRAN
      000C67 0C 81                 2273         .word	CMOV2
      000C69 CD 05 51         [ 4] 2274 CMOV1:	CALL	TOR
      000C6C CD 05 88         [ 4] 2275         CALL	DUPP
      000C6F CD 05 01         [ 4] 2276         CALL	CAT
      000C72 CD 05 45         [ 4] 2277         CALL	RAT
      000C75 CD 04 F0         [ 4] 2278         CALL	CSTOR
      000C78 CD 0A CB         [ 4] 2279         CALL	ONEP
      000C7B CD 05 34         [ 4] 2280         CALL	RFROM
      000C7E CD 0A CB         [ 4] 2281         CALL	ONEP
      000C81 CD 04 83         [ 4] 2282 CMOV2:	CALL	DONXT
      000C84 0C 69                 2283         .word	CMOV1
      000C86 CC 07 8D         [ 2] 2284         JP	DDROP
                                   2285 
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2287 ;       FILL    ( b u c -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2288 ;       Fill u bytes of character c
                                   2289 ;       to area beginning at b.
                                   2290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C89                       2291         _HEADER FILL,4,"FILL"
      000C89 0C 5B                    1         .word LINK 
                           000C8B     2         LINK=.
      000C8B 04                       3         .byte 4  
      000C8C 46 49 4C 4C              4         .ascii "FILL"
      000C90                          5         FILL:
      000C90 90 93            [ 1] 2292         ldw y,x 
      000C92 90 E6 01         [ 1] 2293         ld a,(1,y) ; c 
      000C95 1C 00 02         [ 2] 2294         addw x,#CELLL ; drop c 
      000C98 90 93            [ 1] 2295         ldw y,x 
      000C9A 90 FE            [ 2] 2296         ldw y,(y) ; count
      000C9C 90 89            [ 2] 2297         pushw y 
      000C9E 1C 00 02         [ 2] 2298         addw x,#CELLL ; drop u 
      000CA1 90 93            [ 1] 2299         ldw y,x 
      000CA3 1C 00 02         [ 2] 2300         addw x,#CELLL ; drop b 
      000CA6 90 FE            [ 2] 2301         ldw y,(y) ; address
      000CA8 90 BF 26         [ 2] 2302         ldw YTEMP,y
      000CAB 90 85            [ 2] 2303         popw y ; count 
      000CAD                       2304 FILL1:  
      000CAD 92 C7 26         [ 4] 2305         ld [YTEMP],a 
      000CB0 3C 27            [ 1] 2306         inc YTEMP+1
      000CB2 24 02            [ 1] 2307         jrnc FILL2 
      000CB4 3C 26            [ 1] 2308         inc YTEMP
      000CB6                       2309 FILL2: 
      000CB6 90 5A            [ 2] 2310         decw y ; count 
      000CB8 26 F3            [ 1] 2311         jrne FILL1  
      000CBA 81               [ 4] 2312         ret 
                                   2313 
                                   2314 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2315 ;       ERASE   ( b u -- )
                                   2316 ;       Erase u bytes beginning at b.
                                   2317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBB                       2318         _HEADER ERASE,5,"ERASE"
      000CBB 0C 8B                    1         .word LINK 
                           000CBD     2         LINK=.
      000CBD 05                       3         .byte 5  
      000CBE 45 52 41 53 45           4         .ascii "ERASE"
      000CC3                          5         ERASE:
      000CC3 90 5F            [ 1] 2319         clrw y 
      000CC5 1D 00 02         [ 2] 2320         subw x,#CELLL 
      000CC8 FF               [ 2] 2321         ldw (x),y 
      000CC9 CC 0C 90         [ 2] 2322         jp FILL 
                                   2323 
                                   2324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2325 ;       PACK0   ( b u a -- a )
                                   2326 ;       Build a counted string with
                                   2327 ;       u characters from b. Null fill.
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCC                       2329         _HEADER PACKS,5,"PACK0"
      000CCC 0C BD                    1         .word LINK 
                           000CCE     2         LINK=.
      000CCE 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CCF 50 41 43 4B 30           4         .ascii "PACK0"
      000CD4                          5         PACKS:
      000CD4 CD 05 88         [ 4] 2330         CALL     DUPP
      000CD7 CD 05 51         [ 4] 2331         CALL     TOR     ;strings only on cell boundary
      000CDA CD 07 98         [ 4] 2332         CALL     DDUP
      000CDD CD 04 F0         [ 4] 2333         CALL     CSTOR
      000CE0 CD 0A CB         [ 4] 2334         CALL     ONEP ;save count
      000CE3 CD 05 98         [ 4] 2335         CALL     SWAPP
      000CE6 CD 0C 61         [ 4] 2336         CALL     CMOVE
      000CE9 CD 05 34         [ 4] 2337         CALL     RFROM
      000CEC 81               [ 4] 2338         RET
                                   2339 
                                   2340 ;; Numeric output, single precision
                                   2341 
                                   2342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2343 ;       DIGIT   ( u -- c )
                                   2344 ;       Convert digit u to a character.
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CED                       2346         _HEADER DIGIT,5,"DIGIT"
      000CED 0C CE                    1         .word LINK 
                           000CEF     2         LINK=.
      000CEF 05                       3         .byte 5  
      000CF0 44 49 47 49 54           4         .ascii "DIGIT"
      000CF5                          5         DIGIT:
      000CF5 CD 04 6F         [ 4] 2347         CALL	DOLIT
      000CF8 00 09                 2348         .word	9
      000CFA CD 05 B0         [ 4] 2349         CALL	OVER
      000CFD CD 08 8B         [ 4] 2350         CALL	LESS
      000D00 CD 04 6F         [ 4] 2351         CALL	DOLIT
      000D03 00 07                 2352         .word	7
      000D05 CD 05 E5         [ 4] 2353         CALL	ANDD
      000D08 CD 07 AD         [ 4] 2354         CALL	PLUS
      000D0B CD 04 6F         [ 4] 2355         CALL	DOLIT
      000D0E 00 30                 2356         .word	48	;'0'
      000D10 CC 07 AD         [ 2] 2357         JP	PLUS
                                   2358 
                                   2359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2360 ;       EXTRACT ( n base -- n c )
                                   2361 ;       Extract least significant 
                                   2362 ;       digit from n.
                                   2363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D13                       2364         _HEADER EXTRC,7,"EXTRACT"
      000D13 0C EF                    1         .word LINK 
                           000D15     2         LINK=.
      000D15 07                       3         .byte 7  
      000D16 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000D1D                          5         EXTRC:
      000D1D CD 0B 37         [ 4] 2365         CALL     ZERO
      000D20 CD 05 98         [ 4] 2366         CALL     SWAPP
      000D23 CD 09 41         [ 4] 2367         CALL     UMMOD
      000D26 CD 05 98         [ 4] 2368         CALL     SWAPP
      000D29 CC 0C F5         [ 2] 2369         JP     DIGIT
                                   2370 
                                   2371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2372 ;       <#      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2373 ;       Initiate  numeric 
                                   2374 ;       output process.
                                   2375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2C                       2376         _HEADER BDIGS,2,"#<"
      000D2C 0D 15                    1         .word LINK 
                           000D2E     2         LINK=.
      000D2E 02                       3         .byte 2  
      000D2F 23 3C                    4         .ascii "#<"
      000D31                          5         BDIGS:
      000D31 CD 0C 25         [ 4] 2377         CALL     PAD
      000D34 CD 06 BE         [ 4] 2378         CALL     HLD
      000D37 CC 04 D1         [ 2] 2379         JP     STORE
                                   2380 
                                   2381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2382 ;       HOLD    ( c -- )
                                   2383 ;       Insert a character 
                                   2384 ;       into output string.
                                   2385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D3A                       2386         _HEADER HOLD,4,"HOLD"
      000D3A 0D 2E                    1         .word LINK 
                           000D3C     2         LINK=.
      000D3C 04                       3         .byte 4  
      000D3D 48 4F 4C 44              4         .ascii "HOLD"
      000D41                          5         HOLD:
      000D41 CD 06 BE         [ 4] 2387         CALL     HLD
      000D44 CD 04 E3         [ 4] 2388         CALL     AT
      000D47 CD 0A D8         [ 4] 2389         CALL     ONEM
      000D4A CD 05 88         [ 4] 2390         CALL     DUPP
      000D4D CD 06 BE         [ 4] 2391         CALL     HLD
      000D50 CD 04 D1         [ 4] 2392         CALL     STORE
      000D53 CC 04 F0         [ 2] 2393         JP     CSTOR
                                   2394 
                                   2395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2396 ;       #       ( u -- u )
                                   2397 ;       Extract one digit from u and
                                   2398 ;       append digit to output string.
                                   2399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D56                       2400         _HEADER DIG,1,"#"
      000D56 0D 3C                    1         .word LINK 
                           000D58     2         LINK=.
      000D58 01                       3         .byte 1  
      000D59 23                       4         .ascii "#"
      000D5A                          5         DIG:
      000D5A CD 06 4E         [ 4] 2401         CALL     BASE
      000D5D CD 04 E3         [ 4] 2402         CALL     AT
      000D60 CD 0D 1D         [ 4] 2403         CALL     EXTRC
      000D63 CC 0D 41         [ 2] 2404         JP     HOLD
                                   2405 
                                   2406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2407 ;       #S      ( u -- 0 )
                                   2408 ;       Convert u until all digits
                                   2409 ;       are added to output string.
                                   2410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D66                       2411         _HEADER DIGS,2,"#S"
      000D66 0D 58                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000D68     2         LINK=.
      000D68 02                       3         .byte 2  
      000D69 23 53                    4         .ascii "#S"
      000D6B                          5         DIGS:
      000D6B CD 0D 5A         [ 4] 2412 DIGS1:  CALL     DIG
      000D6E CD 05 88         [ 4] 2413         CALL     DUPP
      000D71 CD 04 98         [ 4] 2414         CALL     QBRAN
      000D74 0D 78                 2415         .word      DIGS2
      000D76 20 F3            [ 2] 2416         JRA     DIGS1
      000D78 81               [ 4] 2417 DIGS2:  RET
                                   2418 
                                   2419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2420 ;       SIGN    ( n -- )
                                   2421 ;       Add a minus sign to
                                   2422 ;       numeric output string.
                                   2423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D79                       2424         _HEADER SIGN,4,"SIGN"
      000D79 0D 68                    1         .word LINK 
                           000D7B     2         LINK=.
      000D7B 04                       3         .byte 4  
      000D7C 53 49 47 4E              4         .ascii "SIGN"
      000D80                          5         SIGN:
      000D80 CD 05 BF         [ 4] 2425         CALL     ZLESS
      000D83 CD 04 98         [ 4] 2426         CALL     QBRAN
      000D86 0D 90                 2427         .word      SIGN1
      000D88 CD 04 6F         [ 4] 2428         CALL     DOLIT
      000D8B 00 2D                 2429         .word      45	;"-"
      000D8D CC 0D 41         [ 2] 2430         JP     HOLD
      000D90 81               [ 4] 2431 SIGN1:  RET
                                   2432 
                                   2433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2434 ;       #>      ( w -- b u )
                                   2435 ;       Prepare output string.
                                   2436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D91                       2437         _HEADER EDIGS,2,"#>"
      000D91 0D 7B                    1         .word LINK 
                           000D93     2         LINK=.
      000D93 02                       3         .byte 2  
      000D94 23 3E                    4         .ascii "#>"
      000D96                          5         EDIGS:
      000D96 CD 05 7E         [ 4] 2438         CALL     DROP
      000D99 CD 06 BE         [ 4] 2439         CALL     HLD
      000D9C CD 04 E3         [ 4] 2440         CALL     AT
      000D9F CD 0C 25         [ 4] 2441         CALL     PAD
      000DA2 CD 05 B0         [ 4] 2442         CALL     OVER
      000DA5 CC 08 26         [ 2] 2443         JP     SUBB
                                   2444 
                                   2445 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2446 ;       str     ( w -- b u )
                                   2447 ;       Convert a signed integer
                                   2448 ;       to a numeric string.
                                   2449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA8                       2450         _HEADER STR,3,"STR"
      000DA8 0D 93                    1         .word LINK 
                           000DAA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DAA 03                       3         .byte 3  
      000DAB 53 54 52                 4         .ascii "STR"
      000DAE                          5         STR:
      000DAE CD 05 88         [ 4] 2451         CALL     DUPP
      000DB1 CD 05 51         [ 4] 2452         CALL     TOR
      000DB4 CD 08 40         [ 4] 2453         CALL     ABSS
      000DB7 CD 0D 31         [ 4] 2454         CALL     BDIGS
      000DBA CD 0D 6B         [ 4] 2455         CALL     DIGS
      000DBD CD 05 34         [ 4] 2456         CALL     RFROM
      000DC0 CD 0D 80         [ 4] 2457         CALL     SIGN
      000DC3 CC 0D 96         [ 2] 2458         JP     EDIGS
                                   2459 
                                   2460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2461 ;       HEX     ( -- )
                                   2462 ;       Use radix 16 as base for
                                   2463 ;       numeric conversions.
                                   2464 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC6                       2465         _HEADER HEX,3,"HEX"
      000DC6 0D AA                    1         .word LINK 
                           000DC8     2         LINK=.
      000DC8 03                       3         .byte 3  
      000DC9 48 45 58                 4         .ascii "HEX"
      000DCC                          5         HEX:
      000DCC CD 04 6F         [ 4] 2466         CALL     DOLIT
      000DCF 00 10                 2467         .word      16
      000DD1 CD 06 4E         [ 4] 2468         CALL     BASE
      000DD4 CC 04 D1         [ 2] 2469         JP     STORE
                                   2470 
                                   2471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2472 ;       DECIMAL ( -- )
                                   2473 ;       Use radix 10 as base
                                   2474 ;       for numeric conversions.
                                   2475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DD7                       2476         _HEADER DECIM,7,"DECIMAL"
      000DD7 0D C8                    1         .word LINK 
                           000DD9     2         LINK=.
      000DD9 07                       3         .byte 7  
      000DDA 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000DE1                          5         DECIM:
      000DE1 CD 04 6F         [ 4] 2477         CALL     DOLIT
      000DE4 00 0A                 2478         .word      10
      000DE6 CD 06 4E         [ 4] 2479         CALL     BASE
      000DE9 CC 04 D1         [ 2] 2480         JP     STORE
                                   2481 
                                   2482 ;; Numeric input, single precision
                                   2483 
                                   2484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2485 ;       DIGIT?  ( c base -- u t )
                                   2486 ;       Convert a character to its numeric
                                   2487 ;       value. A flag indicates success.
                                   2488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DEC                       2489         _HEADER DIGTQ,6,"DIGIT?"
      000DEC 0D D9                    1         .word LINK 
                           000DEE     2         LINK=.
      000DEE 06                       3         .byte 6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DEF 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000DF5                          5         DIGTQ:
      000DF5 CD 05 51         [ 4] 2490         CALL     TOR
      000DF8 CD 04 6F         [ 4] 2491         CALL     DOLIT
      000DFB 00 30                 2492         .word     48	; "0"
      000DFD CD 08 26         [ 4] 2493         CALL     SUBB
      000E00 CD 04 6F         [ 4] 2494         CALL     DOLIT
      000E03 00 09                 2495         .word      9
      000E05 CD 05 B0         [ 4] 2496         CALL     OVER
      000E08 CD 08 8B         [ 4] 2497         CALL     LESS
      000E0B CD 04 98         [ 4] 2498         CALL     QBRAN
      000E0E 0E 26                 2499         .word      DGTQ1
      000E10 CD 04 6F         [ 4] 2500         CALL     DOLIT
      000E13 00 07                 2501         .word      7
      000E15 CD 08 26         [ 4] 2502         CALL     SUBB
      000E18 CD 05 88         [ 4] 2503         CALL     DUPP
      000E1B CD 04 6F         [ 4] 2504         CALL     DOLIT
      000E1E 00 0A                 2505         .word      10
      000E20 CD 08 8B         [ 4] 2506         CALL     LESS
      000E23 CD 05 F9         [ 4] 2507         CALL     ORR
      000E26 CD 05 88         [ 4] 2508 DGTQ1:  CALL     DUPP
      000E29 CD 05 34         [ 4] 2509         CALL     RFROM
      000E2C CC 08 6D         [ 2] 2510         JP     ULESS
                                   2511 
                           000001  2512 .if  WANT_DOUBLE
                           000000  2513 .else 
                                   2514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2515 ;       NUMBER? ( a -- n T | a F )
                                   2516 ;       Convert a number string to
                                   2517 ;       integer. Push a flag on tos.
                                   2518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2519         _HEADER NUMBQ,7,"NUMBER?"
                                   2520         CALL     BASE
                                   2521         CALL     AT
                                   2522         CALL     TOR
                                   2523         CALL     ZERO
                                   2524         CALL     OVER
                                   2525         CALL     COUNT
                                   2526         CALL     OVER
                                   2527         CALL     CAT
                                   2528         CALL     DOLIT
                                   2529         .word     36	; "0x"
                                   2530         CALL     EQUAL
                                   2531         CALL     QBRAN
                                   2532         .word      NUMQ1
                                   2533         CALL     HEX
                                   2534         CALL     SWAPP
                                   2535         CALL     ONEP
                                   2536         CALL     SWAPP
                                   2537         CALL     ONEM
                                   2538 NUMQ1:  CALL     OVER
                                   2539         CALL     CAT
                                   2540         CALL     DOLIT
                                   2541         .word     45	; "-"
                                   2542         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   2543         CALL     TOR
                                   2544         CALL     SWAPP
                                   2545         CALL     RAT
                                   2546         CALL     SUBB
                                   2547         CALL     SWAPP
                                   2548         CALL     RAT
                                   2549         CALL     PLUS
                                   2550         CALL     QDUP
                                   2551         CALL     QBRAN
                                   2552         .word      NUMQ6
                                   2553         CALL     ONEM
                                   2554         CALL     TOR
                                   2555 NUMQ2:  CALL     DUPP
                                   2556         CALL     TOR
                                   2557         CALL     CAT
                                   2558         CALL     BASE
                                   2559         CALL     AT
                                   2560         CALL     DIGTQ
                                   2561         CALL     QBRAN
                                   2562         .word      NUMQ4
                                   2563         CALL     SWAPP
                                   2564         CALL     BASE
                                   2565         CALL     AT
                                   2566         CALL     STAR
                                   2567         CALL     PLUS
                                   2568         CALL     RFROM
                                   2569         CALL     ONEP
                                   2570         CALL     DONXT
                                   2571         .word      NUMQ2
                                   2572         CALL     RAT
                                   2573         CALL     SWAPP
                                   2574         CALL     DROP
                                   2575         CALL     QBRAN
                                   2576         .word      NUMQ3
                                   2577         CALL     NEGAT
                                   2578 NUMQ3:  CALL     SWAPP
                                   2579         JRA     NUMQ5
                                   2580 NUMQ4:  CALL     RFROM
                                   2581         CALL     RFROM
                                   2582         CALL     DDROP
                                   2583         CALL     DDROP
                                   2584         CALL     ZERO
                                   2585 NUMQ5:  CALL     DUPP
                                   2586 NUMQ6:  CALL     RFROM
                                   2587         CALL     DDROP
                                   2588         CALL     RFROM
                                   2589         CALL     BASE
                                   2590         JP     STORE
                                   2591 .endif ; WANT_DOUBLE  
                                   2592 
                                   2593 ;; Basic I/O
                                   2594 
                                   2595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2596 ;       KEY     ( -- c )
                                   2597 ;       Wait for and return an
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2598 ;       input character.
                                   2599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E2F                       2600         _HEADER KEY,3,"KEY"
      000E2F 0D EE                    1         .word LINK 
                           000E31     2         LINK=.
      000E31 03                       3         .byte 3  
      000E32 4B 45 59                 4         .ascii "KEY"
      000E35                          5         KEY:
      000E35 72 0B 52 30 FB   [ 2] 2601         btjf UART_SR,#UART_SR_RXNE,. 
      000E3A C6 52 31         [ 1] 2602         ld a,UART_DR 
      000E3D 1D 00 02         [ 2] 2603         subw x,#CELLL 
      000E40 E7 01            [ 1] 2604         ld (1,x),a 
      000E42 7F               [ 1] 2605         clr (x)
      000E43 81               [ 4] 2606         ret 
                                   2607 
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2609 ;       NUF?    ( -- t )
                                   2610 ;       Return false if no input,
                                   2611 ;       else pause and if CR return true.
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E44                       2613         _HEADER NUFQ,4,"NUF?"
      000E44 0E 31                    1         .word LINK 
                           000E46     2         LINK=.
      000E46 04                       3         .byte 4  
      000E47 4E 55 46 3F              4         .ascii "NUF?"
      000E4B                          5         NUFQ:
      000E4B CD 04 18         [ 4] 2614         CALL     QKEY
      000E4E CD 05 88         [ 4] 2615         CALL     DUPP
      000E51 CD 04 98         [ 4] 2616         CALL     QBRAN
      000E54 0E 64                 2617         .word    NUFQ1
      000E56 CD 07 8D         [ 4] 2618         CALL     DDROP
      000E59 CD 0E 35         [ 4] 2619         CALL     KEY
      000E5C CD 04 6F         [ 4] 2620         CALL     DOLIT
      000E5F 00 0D                 2621         .word      CRR
      000E61 CC 08 4E         [ 2] 2622         JP     EQUAL
      000E64 81               [ 4] 2623 NUFQ1:  RET
                                   2624 
                                   2625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2626 ;       SPACE   ( -- )
                                   2627 ;       Send  blank character to
                                   2628 ;       output device.
                                   2629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E65                       2630         _HEADER SPACE,5,"SPACE"
      000E65 0E 46                    1         .word LINK 
                           000E67     2         LINK=.
      000E67 05                       3         .byte 5  
      000E68 53 50 41 43 45           4         .ascii "SPACE"
      000E6D                          5         SPACE:
      000E6D CD 0B 2A         [ 4] 2631         CALL     BLANK
      000E70 CC 04 36         [ 2] 2632         JP     EMIT
                                   2633 
                                   2634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2635 ;       SPACES  ( +n -- )
                                   2636 ;       Send n spaces to output device.
                                   2637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E73                       2638         _HEADER SPACS,6,"SPACES"
      000E73 0E 67                    1         .word LINK 
                           000E75     2         LINK=.
      000E75 06                       3         .byte 6  
      000E76 53 50 41 43 45 53        4         .ascii "SPACES"
      000E7C                          5         SPACS:
      000E7C CD 0B 37         [ 4] 2639         CALL     ZERO
      000E7F CD 08 E9         [ 4] 2640         CALL     MAX
      000E82 CD 05 51         [ 4] 2641         CALL     TOR
      000E85 20 03            [ 2] 2642         JRA      CHAR2
      000E87 CD 0E 6D         [ 4] 2643 CHAR1:  CALL     SPACE
      000E8A CD 04 83         [ 4] 2644 CHAR2:  CALL     DONXT
      000E8D 0E 87                 2645         .word    CHAR1
      000E8F 81               [ 4] 2646         RET
                                   2647 
                                   2648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2649 ;       TYPE    ( b u -- )
                                   2650 ;       Output u characters from b.
                                   2651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E90                       2652         _HEADER TYPES,4,"TYPE"
      000E90 0E 75                    1         .word LINK 
                           000E92     2         LINK=.
      000E92 04                       3         .byte 4  
      000E93 54 59 50 45              4         .ascii "TYPE"
      000E97                          5         TYPES:
      000E97 CD 05 51         [ 4] 2653         CALL     TOR
      000E9A 20 06            [ 2] 2654         JRA     TYPE2
      000E9C CD 0B FD         [ 4] 2655 TYPE1:  CALL     COUNT 
      000E9F CD 04 36         [ 4] 2656         CALL     EMIT
      000EA2                       2657 TYPE2:  _DONXT  TYPE1
      000EA2 CD 04 83         [ 4]    1     CALL DONXT 
      000EA5 0E 9C                    2     .word TYPE1 
      000EA7 CC 05 7E         [ 2] 2658         JP     DROP
                                   2659 
                                   2660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2661 ;       CR      ( -- )
                                   2662 ;       Output a carriage return
                                   2663 ;       and a line feed.
                                   2664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAA                       2665         _HEADER CR,2,"CR"
      000EAA 0E 92                    1         .word LINK 
                           000EAC     2         LINK=.
      000EAC 02                       3         .byte 2  
      000EAD 43 52                    4         .ascii "CR"
      000EAF                          5         CR:
      000EAF                       2666         _DOLIT  CRR 
      000EAF CD 04 6F         [ 4]    1     CALL DOLIT 
      000EB2 00 0D                    2     .word CRR 
      000EB4 CD 04 36         [ 4] 2667         CALL    EMIT
      000EB7                       2668         _DOLIT  LF
      000EB7 CD 04 6F         [ 4]    1     CALL DOLIT 
      000EBA 00 0A                    2     .word LF 
      000EBC CC 04 36         [ 2] 2669         JP      EMIT
                                   2670 
                                   2671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   2672 ;       do$     ( -- a )
                                   2673 ;       Return  address of a compiled
                                   2674 ;       string.
                                   2675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2676 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000EBF                       2677 DOSTR:
      000EBF CD 05 34         [ 4] 2678         CALL     RFROM
      000EC2 CD 05 45         [ 4] 2679         CALL     RAT
      000EC5 CD 05 34         [ 4] 2680         CALL     RFROM
      000EC8 CD 0B FD         [ 4] 2681         CALL     COUNT
      000ECB CD 07 AD         [ 4] 2682         CALL     PLUS
      000ECE CD 05 51         [ 4] 2683         CALL     TOR
      000ED1 CD 05 98         [ 4] 2684         CALL     SWAPP
      000ED4 CD 05 51         [ 4] 2685         CALL     TOR
      000ED7 81               [ 4] 2686         RET
                                   2687 
                                   2688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2689 ;       $"|     ( -- a )
                                   2690 ;       Run time routine compiled by $".
                                   2691 ;       Return address of a compiled string.
                                   2692 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2693 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000ED8                       2694 STRQP:
      000ED8 CD 0E BF         [ 4] 2695         CALL     DOSTR
      000EDB 81               [ 4] 2696         RET
                                   2697 
                                   2698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2699 ;       ."|     ( -- )
                                   2700 ;       Run time routine of ." .
                                   2701 ;       Output a compiled string.
                                   2702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2703 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000EDC                       2704 DOTQP:
      000EDC CD 0E BF         [ 4] 2705         CALL     DOSTR
      000EDF CD 0B FD         [ 4] 2706         CALL     COUNT
      000EE2 CC 0E 97         [ 2] 2707         JP     TYPES
                                   2708 
                                   2709 ;       .R      ( n +n -- )
                                   2710 ;       Display an integer in a field
                                   2711 ;       of n columns, right justified.
      000EE5 0E AC                 2712         .word      LINK
                           000EE7  2713 LINK = . 
      000EE7 02                    2714         .byte      2
      000EE8 2E 52                 2715         .ascii     ".R"
      000EEA                       2716 DOTR:
      000EEA CD 05 51         [ 4] 2717         CALL     TOR
      000EED CD 0D AE         [ 4] 2718         CALL     STR
      000EF0 CD 05 34         [ 4] 2719         CALL     RFROM
      000EF3 CD 05 B0         [ 4] 2720         CALL     OVER
      000EF6 CD 08 26         [ 4] 2721         CALL     SUBB
      000EF9 CD 0E 7C         [ 4] 2722         CALL     SPACS
      000EFC CC 0E 97         [ 2] 2723         JP     TYPES
                                   2724 
                                   2725 ;       U.R     ( u +n -- )
                                   2726 ;       Display an unsigned integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2727 ;       in n column, right justified.
      000EFF 0E E7                 2728         .word      LINK
                           000F01  2729 LINK = . 
      000F01 03                    2730         .byte      3
      000F02 55 2E 52              2731         .ascii     "U.R"
      000F05                       2732 UDOTR:
      000F05 CD 05 51         [ 4] 2733         CALL     TOR
      000F08 CD 0D 31         [ 4] 2734         CALL     BDIGS
      000F0B CD 0D 6B         [ 4] 2735         CALL     DIGS
      000F0E CD 0D 96         [ 4] 2736         CALL     EDIGS
      000F11 CD 05 34         [ 4] 2737         CALL     RFROM
      000F14 CD 05 B0         [ 4] 2738         CALL     OVER
      000F17 CD 08 26         [ 4] 2739         CALL     SUBB
      000F1A CD 0E 7C         [ 4] 2740         CALL     SPACS
      000F1D CC 0E 97         [ 2] 2741         JP     TYPES
                                   2742 
                                   2743 ;       U.      ( u -- )
                                   2744 ;       Display an unsigned integer
                                   2745 ;       in free format.
      000F20 0F 01                 2746         .word      LINK
                           000F22  2747 LINK = . 
      000F22 02                    2748         .byte      2
      000F23 55 2E                 2749         .ascii     "U."
      000F25                       2750 UDOT:
      000F25 CD 0D 31         [ 4] 2751         CALL     BDIGS
      000F28 CD 0D 6B         [ 4] 2752         CALL     DIGS
      000F2B CD 0D 96         [ 4] 2753         CALL     EDIGS
      000F2E CD 0E 6D         [ 4] 2754         CALL     SPACE
      000F31 CC 0E 97         [ 2] 2755         JP     TYPES
                                   2756 
                                   2757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2758 ;   H. ( n -- )
                                   2759 ;   display n in hexadecimal 
                                   2760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F34                       2761         _HEADER HDOT,2,"H."
      000F34 0F 22                    1         .word LINK 
                           000F36     2         LINK=.
      000F36 02                       3         .byte 2  
      000F37 48 2E                    4         .ascii "H."
      000F39                          5         HDOT:
      000F39 CD 06 4E         [ 4] 2762         CALL BASE 
      000F3C CD 04 E3         [ 4] 2763         CALL AT 
      000F3F CD 05 51         [ 4] 2764         CALL TOR 
      000F42 CD 0D CC         [ 4] 2765         CALL HEX 
      000F45 CD 0F 25         [ 4] 2766         CALL UDOT 
      000F48 CD 05 34         [ 4] 2767         CALL RFROM 
      000F4B CD 06 4E         [ 4] 2768         CALL BASE 
      000F4E CD 04 D1         [ 4] 2769         CALL STORE 
      000F51 81               [ 4] 2770         RET 
                                   2771 
                                   2772 
                                   2773 ;       .       ( w -- )
                                   2774 ;       Display an integer in free
                                   2775 ;       format, preceeded by a space.
      000F52 0F 36                 2776         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000F54  2777 LINK = . 
      000F54 01                    2778         .byte      1
      000F55 2E                    2779         .ascii     "."
      000F56                       2780 DOT:
      000F56 CD 06 4E         [ 4] 2781         CALL     BASE
      000F59 CD 04 E3         [ 4] 2782         CALL     AT
      000F5C CD 04 6F         [ 4] 2783         CALL     DOLIT
      000F5F 00 0A                 2784         .word      10
      000F61 CD 06 0E         [ 4] 2785         CALL     XORR    ;?decimal
      000F64 CD 04 98         [ 4] 2786         CALL     QBRAN
      000F67 0F 6C                 2787         .word      DOT1
      000F69 CC 0F 25         [ 2] 2788         JP     UDOT
      000F6C CD 0D AE         [ 4] 2789 DOT1:   CALL     STR
      000F6F CD 0E 6D         [ 4] 2790         CALL     SPACE
      000F72 CC 0E 97         [ 2] 2791         JP     TYPES
                                   2792 
                                   2793 ;       ?       ( a -- )
                                   2794 ;       Display contents in memory cell.
      000F75 0F 54                 2795         .word      LINK
                                   2796         
                           000F77  2797 LINK = . 
      000F77 01                    2798         .byte      1
      000F78 3F                    2799         .ascii     "?"
      000F79                       2800 QUEST:
      000F79 CD 04 E3         [ 4] 2801         CALL     AT
      000F7C CC 0F 56         [ 2] 2802         JP     DOT
                                   2803 
                                   2804 ;; Parsing
                                   2805 
                                   2806 ;       parse   ( b u c -- b u delta ; <string> )
                                   2807 ;       Scan string delimited by c.
                                   2808 ;       Return found string and its offset.
      000F7F 0F 77                 2809         .word      LINK
                           000F81  2810 LINK = . 
      000F81 05                    2811         .byte      5
      000F82 70 61 72 73 65        2812         .ascii     "parse"
      000F87                       2813 PARS:
      000F87 CD 06 5D         [ 4] 2814         CALL     TEMP
      000F8A CD 04 D1         [ 4] 2815         CALL     STORE
      000F8D CD 05 B0         [ 4] 2816         CALL     OVER
      000F90 CD 05 51         [ 4] 2817         CALL     TOR
      000F93 CD 05 88         [ 4] 2818         CALL     DUPP
      000F96 CD 04 98         [ 4] 2819         CALL     QBRAN
      000F99 10 3F                 2820         .word    PARS8
      000F9B CD 0A D8         [ 4] 2821         CALL     ONEM
      000F9E CD 06 5D         [ 4] 2822         CALL     TEMP
      000FA1 CD 04 E3         [ 4] 2823         CALL     AT
      000FA4 CD 0B 2A         [ 4] 2824         CALL     BLANK
      000FA7 CD 08 4E         [ 4] 2825         CALL     EQUAL
      000FAA CD 04 98         [ 4] 2826         CALL     QBRAN
      000FAD 0F E0                 2827         .word      PARS3
      000FAF CD 05 51         [ 4] 2828         CALL     TOR
      000FB2 CD 0B 2A         [ 4] 2829 PARS1:  CALL     BLANK
      000FB5 CD 05 B0         [ 4] 2830         CALL     OVER
      000FB8 CD 05 01         [ 4] 2831         CALL     CAT     ;skip leading blanks ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000FBB CD 08 26         [ 4] 2832         CALL     SUBB
      000FBE CD 05 BF         [ 4] 2833         CALL     ZLESS
      000FC1 CD 07 C7         [ 4] 2834         CALL     INVER
      000FC4 CD 04 98         [ 4] 2835         CALL     QBRAN
      000FC7 0F DD                 2836         .word      PARS2
      000FC9 CD 0A CB         [ 4] 2837         CALL     ONEP
      000FCC CD 04 83         [ 4] 2838         CALL     DONXT
      000FCF 0F B2                 2839         .word      PARS1
      000FD1 CD 05 34         [ 4] 2840         CALL     RFROM
      000FD4 CD 05 7E         [ 4] 2841         CALL     DROP
      000FD7 CD 0B 37         [ 4] 2842         CALL     ZERO
      000FDA CC 05 88         [ 2] 2843         JP     DUPP
      000FDD CD 05 34         [ 4] 2844 PARS2:  CALL     RFROM
      000FE0 CD 05 B0         [ 4] 2845 PARS3:  CALL     OVER
      000FE3 CD 05 98         [ 4] 2846         CALL     SWAPP
      000FE6 CD 05 51         [ 4] 2847         CALL     TOR
      000FE9 CD 06 5D         [ 4] 2848 PARS4:  CALL     TEMP
      000FEC CD 04 E3         [ 4] 2849         CALL     AT
      000FEF CD 05 B0         [ 4] 2850         CALL     OVER
      000FF2 CD 05 01         [ 4] 2851         CALL     CAT
      000FF5 CD 08 26         [ 4] 2852         CALL     SUBB    ;scan for delimiter
      000FF8 CD 06 5D         [ 4] 2853         CALL     TEMP
      000FFB CD 04 E3         [ 4] 2854         CALL     AT
      000FFE CD 0B 2A         [ 4] 2855         CALL     BLANK
      001001 CD 08 4E         [ 4] 2856         CALL     EQUAL
      001004 CD 04 98         [ 4] 2857         CALL     QBRAN
      001007 10 0C                 2858         .word      PARS5
      001009 CD 05 BF         [ 4] 2859         CALL     ZLESS
      00100C CD 04 98         [ 4] 2860 PARS5:  CALL     QBRAN
      00100F 10 21                 2861         .word      PARS6
      001011 CD 0A CB         [ 4] 2862         CALL     ONEP
      001014 CD 04 83         [ 4] 2863         CALL     DONXT
      001017 0F E9                 2864         .word      PARS4
      001019 CD 05 88         [ 4] 2865         CALL     DUPP
      00101C CD 05 51         [ 4] 2866         CALL     TOR
      00101F 20 0F            [ 2] 2867         JRA     PARS7
      001021 CD 05 34         [ 4] 2868 PARS6:  CALL     RFROM
      001024 CD 05 7E         [ 4] 2869         CALL     DROP
      001027 CD 05 88         [ 4] 2870         CALL     DUPP
      00102A CD 0A CB         [ 4] 2871         CALL     ONEP
      00102D CD 05 51         [ 4] 2872         CALL     TOR
      001030 CD 05 B0         [ 4] 2873 PARS7:  CALL     OVER
      001033 CD 08 26         [ 4] 2874         CALL     SUBB
      001036 CD 05 34         [ 4] 2875         CALL     RFROM
      001039 CD 05 34         [ 4] 2876         CALL     RFROM
      00103C CC 08 26         [ 2] 2877         JP     SUBB
      00103F CD 05 B0         [ 4] 2878 PARS8:  CALL     OVER
      001042 CD 05 34         [ 4] 2879         CALL     RFROM
      001045 CC 08 26         [ 2] 2880         JP     SUBB
                                   2881 
                                   2882 ;       PARSE   ( c -- b u ; <string> )
                                   2883 ;       Scan input stream and return
                                   2884 ;       counted string delimited by c.
      001048 0F 81                 2885         .word      LINK
                           00104A  2886 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00104A 05                    2887         .byte      5
      00104B 50 41 52 53 45        2888         .ascii     "PARSE"
      001050                       2889 PARSE:
      001050 CD 05 51         [ 4] 2890         CALL     TOR
      001053 CD 0C 36         [ 4] 2891         CALL     TIB
      001056 CD 06 6C         [ 4] 2892         CALL     INN
      001059 CD 04 E3         [ 4] 2893         CALL     AT
      00105C CD 07 AD         [ 4] 2894         CALL     PLUS    ;current input buffer pointer
      00105F CD 06 7C         [ 4] 2895         CALL     NTIB
      001062 CD 04 E3         [ 4] 2896         CALL     AT
      001065 CD 06 6C         [ 4] 2897         CALL     INN
      001068 CD 04 E3         [ 4] 2898         CALL     AT
      00106B CD 08 26         [ 4] 2899         CALL     SUBB    ;remaining count
      00106E CD 05 34         [ 4] 2900         CALL     RFROM
      001071 CD 0F 87         [ 4] 2901         CALL     PARS
      001074 CD 06 6C         [ 4] 2902         CALL     INN
      001077 CC 0B A7         [ 2] 2903         JP     PSTOR
                                   2904 
                                   2905 ;       .(      ( -- )
                                   2906 ;       Output following string up to next ) .
      00107A 10 4A                 2907         .word      LINK
                           00107C  2908 LINK = . 
      00107C 82                    2909 	.byte      IMEDD+2
      00107D 2E 28                 2910         .ascii     ".("
      00107F                       2911 DOTPR:
      00107F CD 04 6F         [ 4] 2912         CALL     DOLIT
      001082 00 29                 2913         .word     41	; ")"
      001084 CD 10 50         [ 4] 2914         CALL     PARSE
      001087 CC 0E 97         [ 2] 2915         JP     TYPES
                                   2916 
                                   2917 ;       (       ( -- )
                                   2918 ;       Ignore following string up to next ).
                                   2919 ;       A comment.
      00108A 10 7C                 2920         .word      LINK
                           00108C  2921 LINK = . 
      00108C 81                    2922 	.byte      IMEDD+1
      00108D 28                    2923         .ascii     "("
      00108E                       2924 PAREN:
      00108E CD 04 6F         [ 4] 2925         CALL     DOLIT
      001091 00 29                 2926         .word     41	; ")"
      001093 CD 10 50         [ 4] 2927         CALL     PARSE
      001096 CC 07 8D         [ 2] 2928         JP     DDROP
                                   2929 
                                   2930 ;       \       ( -- )
                                   2931 ;       Ignore following text till
                                   2932 ;       end of line.
      001099 10 8C                 2933         .word      LINK
                           00109B  2934 LINK = . 
      00109B 81                    2935 	.byte      IMEDD+1
      00109C 5C                    2936         .ascii     "\"
      00109D                       2937 BKSLA:
      00109D 90 AE 00 0E      [ 2] 2938         ldw y,#UCTIB ; #TIB  
      0010A1 90 FE            [ 2] 2939         ldw y,(y)
      0010A3 90 89            [ 2] 2940         pushw y ; count in TIB 
      0010A5 90 AE 00 0C      [ 2] 2941         ldw y,#UINN ; >IN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0010A9 90 BF 26         [ 2] 2942         ldw YTEMP,y
      0010AC 90 85            [ 2] 2943         popw y 
      0010AE 91 CF 26         [ 5] 2944         ldw [YTEMP],y
      0010B1 81               [ 4] 2945         ret 
                                   2946 
                                   2947 ;       WORD    ( c -- a ; <string> )
                                   2948 ;       Parse a word from input stream
                                   2949 ;       and copy it to code dictionary.
      0010B2 10 9B                 2950         .word      LINK
                           0010B4  2951 LINK = . 
      0010B4 04                    2952         .byte      4
      0010B5 57 4F 52 44           2953         .ascii     "WORD"
      0010B9                       2954 WORDD:
      0010B9 CD 10 50         [ 4] 2955         CALL     PARSE
      0010BC CD 0C 14         [ 4] 2956         CALL     HERE
      0010BF CD 0A A0         [ 4] 2957         CALL     CELLP
                           000000  2958 .IF CASE_SENSE 
                                   2959         JP      PACKS 
                           000001  2960 .ELSE                 
      0010C2 CD 0C D4         [ 4] 2961         CALL     PACKS
                                   2962 ; uppercase TOKEN 
      0010C5 CD 05 88         [ 4] 2963         CALL    DUPP 
      0010C8 CD 0B FD         [ 4] 2964         CALL    COUNT 
      0010CB CD 05 51         [ 4] 2965         CALL    TOR 
      0010CE CD 04 B4         [ 4] 2966         CALL    BRAN 
      0010D1 10 FF                 2967         .word   UPPER2  
      0010D3                       2968 UPPER:
      0010D3 CD 05 88         [ 4] 2969         CALL    DUPP 
      0010D6 CD 05 01         [ 4] 2970         CALL    CAT
      0010D9 CD 05 88         [ 4] 2971         CALL    DUPP 
      0010DC CD 04 6F         [ 4] 2972         CALL   DOLIT
      0010DF 00 61                 2973         .word   'a' 
      0010E1 CD 04 6F         [ 4] 2974         CALL    DOLIT
      0010E4 00 7B                 2975         .word   'z'+1 
      0010E6 CD 09 26         [ 4] 2976         CALL   WITHI 
      0010E9 CD 04 98         [ 4] 2977         CALL   QBRAN
      0010EC 10 F6                 2978         .word  UPPER1  
      0010EE CD 04 6F         [ 4] 2979         CALL    DOLIT 
      0010F1 00 DF                 2980         .word   0xDF 
      0010F3 CD 05 E5         [ 4] 2981         CALL    ANDD 
      0010F6                       2982 UPPER1:
      0010F6 CD 05 B0         [ 4] 2983         CALL    OVER 
      0010F9 CD 04 F0         [ 4] 2984         CALL    CSTOR          
      0010FC CD 0A CB         [ 4] 2985         CALL    ONEP 
      0010FF                       2986 UPPER2: 
      0010FF CD 04 83         [ 4] 2987         CALL    DONXT
      001102 10 D3                 2988         .word   UPPER  
      001104 CD 05 7E         [ 4] 2989         CALL    DROP  
      001107 81               [ 4] 2990         RET 
                                   2991 .ENDIF 
                                   2992 
                                   2993 ;       TOKEN   ( -- a ; <string> )
                                   2994 ;       Parse a word from input stream
                                   2995 ;       and copy it to name dictionary.
      001108 10 B4                 2996         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           00110A  2997 LINK = . 
      00110A 05                    2998         .byte      5
      00110B 54 4F 4B 45 4E        2999         .ascii     "TOKEN"
      001110                       3000 TOKEN:
      001110 CD 0B 2A         [ 4] 3001         CALL     BLANK
      001113 CC 10 B9         [ 2] 3002         JP     WORDD
                                   3003 
                                   3004 ;; Dictionary search
                                   3005 
                                   3006 ;       NAME>   ( na -- ca )
                                   3007 ;       Return a code address given
                                   3008 ;       a name address.
      001116 11 0A                 3009         .word      LINK
                           001118  3010 LINK = . 
      001118 05                    3011         .byte      5
      001119 4E 41 4D 45 3E        3012         .ascii     "NAME>"
      00111E                       3013 NAMET:
      00111E CD 0B FD         [ 4] 3014         CALL     COUNT
      001121 CD 04 6F         [ 4] 3015         CALL     DOLIT
      001124 00 1F                 3016         .word      31
      001126 CD 05 E5         [ 4] 3017         CALL     ANDD
      001129 CC 07 AD         [ 2] 3018         JP     PLUS
                                   3019 
                                   3020 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3021 ;       Compare u cells in two
                                   3022 ;       strings. Return 0 if identical.
      00112C 11 18                 3023         .word      LINK
                           00112E  3024 LINK = . 
      00112E 05                    3025         .byte       5
      00112F 53 41 4D 45 3F        3026         .ascii     "SAME?"
      001134                       3027 SAMEQ:
      001134 CD 0A D8         [ 4] 3028         CALL     ONEM
      001137 CD 05 51         [ 4] 3029         CALL     TOR
      00113A 20 29            [ 2] 3030         JRA     SAME2
      00113C CD 05 B0         [ 4] 3031 SAME1:  CALL     OVER
      00113F CD 05 45         [ 4] 3032         CALL     RAT
      001142 CD 07 AD         [ 4] 3033         CALL     PLUS
      001145 CD 05 01         [ 4] 3034         CALL     CAT
      001148 CD 05 B0         [ 4] 3035         CALL     OVER
      00114B CD 05 45         [ 4] 3036         CALL     RAT
      00114E CD 07 AD         [ 4] 3037         CALL     PLUS
      001151 CD 05 01         [ 4] 3038         CALL     CAT
      001154 CD 08 26         [ 4] 3039         CALL     SUBB
      001157 CD 07 3B         [ 4] 3040         CALL     QDUP
      00115A CD 04 98         [ 4] 3041         CALL     QBRAN
      00115D 11 65                 3042         .word      SAME2
      00115F CD 05 34         [ 4] 3043         CALL     RFROM
      001162 CC 05 7E         [ 2] 3044         JP     DROP
      001165 CD 04 83         [ 4] 3045 SAME2:  CALL     DONXT
      001168 11 3C                 3046         .word      SAME1
      00116A CC 0B 37         [ 2] 3047         JP     ZERO
                                   3048 
                                   3049 ;       find    ( a va -- ca na | a F )
                                   3050 ;       Search vocabulary for string.
                                   3051 ;       Return ca and na if succeeded.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00116D 11 2E                 3052         .word      LINK
                           00116F  3053 LINK = . 
      00116F 04                    3054         .byte      4
      001170 46 49 4E 44           3055         .ascii     "FIND"
      001174                       3056 FIND:
      001174 CD 05 98         [ 4] 3057         CALL     SWAPP
      001177 CD 05 88         [ 4] 3058         CALL     DUPP
      00117A CD 05 01         [ 4] 3059         CALL     CAT
      00117D CD 06 5D         [ 4] 3060         CALL     TEMP
      001180 CD 04 D1         [ 4] 3061         CALL     STORE
      001183 CD 05 88         [ 4] 3062         CALL     DUPP
      001186 CD 04 E3         [ 4] 3063         CALL     AT
      001189 CD 05 51         [ 4] 3064         CALL     TOR
      00118C CD 0A A0         [ 4] 3065         CALL     CELLP
      00118F CD 05 98         [ 4] 3066         CALL     SWAPP
      001192 CD 04 E3         [ 4] 3067 FIND1:  CALL     AT
      001195 CD 05 88         [ 4] 3068         CALL     DUPP
      001198 CD 04 98         [ 4] 3069         CALL     QBRAN
      00119B 11 D1                 3070         .word      FIND6
      00119D CD 05 88         [ 4] 3071         CALL     DUPP
      0011A0 CD 04 E3         [ 4] 3072         CALL     AT
      0011A3 CD 04 6F         [ 4] 3073         CALL     DOLIT
      0011A6 1F 7F                 3074         .word      MASKK
      0011A8 CD 05 E5         [ 4] 3075         CALL     ANDD
      0011AB CD 05 45         [ 4] 3076         CALL     RAT
      0011AE CD 06 0E         [ 4] 3077         CALL     XORR
      0011B1 CD 04 98         [ 4] 3078         CALL     QBRAN
      0011B4 11 C0                 3079         .word      FIND2
      0011B6 CD 0A A0         [ 4] 3080         CALL     CELLP
      0011B9 CD 04 6F         [ 4] 3081         CALL     DOLIT
      0011BC FF FF                 3082         .word     0xFFFF
      0011BE 20 0C            [ 2] 3083         JRA     FIND3
      0011C0 CD 0A A0         [ 4] 3084 FIND2:  CALL     CELLP
      0011C3 CD 06 5D         [ 4] 3085         CALL     TEMP
      0011C6 CD 04 E3         [ 4] 3086         CALL     AT
      0011C9 CD 11 34         [ 4] 3087         CALL     SAMEQ
      0011CC CD 04 B4         [ 4] 3088 FIND3:  CALL     BRAN
      0011CF 11 E0                 3089         .word      FIND4
      0011D1 CD 05 34         [ 4] 3090 FIND6:  CALL     RFROM
      0011D4 CD 05 7E         [ 4] 3091         CALL     DROP
      0011D7 CD 05 98         [ 4] 3092         CALL     SWAPP
      0011DA CD 0A AF         [ 4] 3093         CALL     CELLM
      0011DD CC 05 98         [ 2] 3094         JP     SWAPP
      0011E0 CD 04 98         [ 4] 3095 FIND4:  CALL     QBRAN
      0011E3 11 ED                 3096         .word      FIND5
      0011E5 CD 0A AF         [ 4] 3097         CALL     CELLM
      0011E8 CD 0A AF         [ 4] 3098         CALL     CELLM
      0011EB 20 A5            [ 2] 3099         JRA     FIND1
      0011ED CD 05 34         [ 4] 3100 FIND5:  CALL     RFROM
      0011F0 CD 05 7E         [ 4] 3101         CALL     DROP
      0011F3 CD 05 98         [ 4] 3102         CALL     SWAPP
      0011F6 CD 05 7E         [ 4] 3103         CALL     DROP
      0011F9 CD 0A AF         [ 4] 3104         CALL     CELLM
      0011FC CD 05 88         [ 4] 3105         CALL     DUPP
      0011FF CD 11 1E         [ 4] 3106         CALL     NAMET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001202 CC 05 98         [ 2] 3107         JP     SWAPP
                                   3108 
                                   3109 ;       NAME?   ( a -- ca na | a F )
                                   3110 ;       Search vocabularies for a string.
      001205 11 6F                 3111         .word      LINK
                           001207  3112 LINK = . 
      001207 05                    3113         .byte      5
      001208 4E 41 4D 45 3F        3114         .ascii     "NAME?"
      00120D                       3115 NAMEQ:
      00120D CD 06 D1         [ 4] 3116         CALL   CNTXT
      001210 CC 11 74         [ 2] 3117         JP     FIND
                                   3118 
                                   3119 ;; Terminal response
                                   3120 
                                   3121 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3122 ;       Backup cursor by one character.
      001213 12 07                 3123         .word      LINK
                           001215  3124 LINK = . 
      001215 02                    3125         .byte      2
      001216 5E 48                 3126         .ascii     "^H"
      001218                       3127 BKSP:
      001218 CD 05 51         [ 4] 3128         CALL     TOR
      00121B CD 05 B0         [ 4] 3129         CALL     OVER
      00121E CD 05 34         [ 4] 3130         CALL     RFROM
      001221 CD 05 98         [ 4] 3131         CALL     SWAPP
      001224 CD 05 B0         [ 4] 3132         CALL     OVER
      001227 CD 06 0E         [ 4] 3133         CALL     XORR
      00122A CD 04 98         [ 4] 3134         CALL     QBRAN
      00122D 12 48                 3135         .word      BACK1
      00122F CD 04 6F         [ 4] 3136         CALL     DOLIT
      001232 00 08                 3137         .word      BKSPP
      001234 CD 04 36         [ 4] 3138         CALL     EMIT
      001237 CD 0A D8         [ 4] 3139         CALL     ONEM
      00123A CD 0B 2A         [ 4] 3140         CALL     BLANK
      00123D CD 04 36         [ 4] 3141         CALL     EMIT
      001240 CD 04 6F         [ 4] 3142         CALL     DOLIT
      001243 00 08                 3143         .word      BKSPP
      001245 CC 04 36         [ 2] 3144         JP     EMIT
      001248 81               [ 4] 3145 BACK1:  RET
                                   3146 
                                   3147 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3148 ;       Accept and echo key stroke
                                   3149 ;       and bump cursor.
      001249 12 15                 3150         .word      LINK
                           00124B  3151 LINK = . 
      00124B 03                    3152         .byte      3
      00124C 54 41 50              3153         .ascii     "TAP"
      00124F                       3154 TAP:
      00124F CD 05 88         [ 4] 3155         CALL     DUPP
      001252 CD 04 36         [ 4] 3156         CALL     EMIT
      001255 CD 05 B0         [ 4] 3157         CALL     OVER
      001258 CD 04 F0         [ 4] 3158         CALL     CSTOR
      00125B CC 0A CB         [ 2] 3159         JP     ONEP
                                   3160 
                                   3161 ;       kTAP    ( bot eot cur c -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3162 ;       Process a key stroke,
                                   3163 ;       CR,LF or backspace.
      00125E 12 4B                 3164         .word      LINK
                           001260  3165 LINK = . 
      001260 04                    3166         .byte      4
      001261 4B 54 41 50           3167         .ascii     "KTAP"
      001265                       3168 KTAP:
      001265 CD 05 88         [ 4] 3169         CALL     DUPP
      001268 CD 04 6F         [ 4] 3170         CALL     DOLIT
                           000001  3171 .if EOL_CR
      00126B 00 0D                 3172         .word   CRR
                           000000  3173 .else ; EOL_LF 
                                   3174         .word   LF
                                   3175 .endif 
      00126D CD 06 0E         [ 4] 3176         CALL     XORR
      001270 CD 04 98         [ 4] 3177         CALL     QBRAN
      001273 12 8B                 3178         .word      KTAP2
      001275 CD 04 6F         [ 4] 3179         CALL     DOLIT
      001278 00 08                 3180         .word      BKSPP
      00127A CD 06 0E         [ 4] 3181         CALL     XORR
      00127D CD 04 98         [ 4] 3182         CALL     QBRAN
      001280 12 88                 3183         .word      KTAP1
      001282 CD 0B 2A         [ 4] 3184         CALL     BLANK
      001285 CC 12 4F         [ 2] 3185         JP     TAP
      001288 CC 12 18         [ 2] 3186 KTAP1:  JP     BKSP
      00128B CD 05 7E         [ 4] 3187 KTAP2:  CALL     DROP
      00128E CD 05 98         [ 4] 3188         CALL     SWAPP
      001291 CD 05 7E         [ 4] 3189         CALL     DROP
      001294 CC 05 88         [ 2] 3190         JP     DUPP
                                   3191 
                                   3192 ;       accept  ( b u -- b u )
                                   3193 ;       Accept characters to input
                                   3194 ;       buffer. Return with actual count.
      001297 12 60                 3195         .word      LINK
                           001299  3196 LINK = . 
      001299 06                    3197         .byte      6
      00129A 41 43 43 45 50 54     3198         .ascii     "ACCEPT"
      0012A0                       3199 ACCEP:
      0012A0 CD 05 B0         [ 4] 3200         CALL     OVER
      0012A3 CD 07 AD         [ 4] 3201         CALL     PLUS
      0012A6 CD 05 B0         [ 4] 3202         CALL     OVER
      0012A9 CD 07 98         [ 4] 3203 ACCP1:  CALL     DDUP
      0012AC CD 06 0E         [ 4] 3204         CALL     XORR
      0012AF CD 04 98         [ 4] 3205         CALL     QBRAN
      0012B2 12 D4                 3206         .word      ACCP4
      0012B4 CD 0E 35         [ 4] 3207         CALL     KEY
      0012B7 CD 05 88         [ 4] 3208         CALL     DUPP
      0012BA CD 0B 2A         [ 4] 3209         CALL     BLANK
      0012BD CD 04 6F         [ 4] 3210         CALL     DOLIT
      0012C0 00 7F                 3211         .word      127
      0012C2 CD 09 26         [ 4] 3212         CALL     WITHI
      0012C5 CD 04 98         [ 4] 3213         CALL     QBRAN
      0012C8 12 CF                 3214         .word      ACCP2
      0012CA CD 12 4F         [ 4] 3215         CALL     TAP
      0012CD 20 03            [ 2] 3216         JRA     ACCP3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0012CF CD 12 65         [ 4] 3217 ACCP2:  CALL     KTAP
      0012D2 20 D5            [ 2] 3218 ACCP3:  JRA     ACCP1
      0012D4 CD 05 7E         [ 4] 3219 ACCP4:  CALL     DROP
      0012D7 CD 05 B0         [ 4] 3220         CALL     OVER
      0012DA CC 08 26         [ 2] 3221         JP     SUBB
                                   3222 
                                   3223 ;       QUERY   ( -- )
                                   3224 ;       Accept input stream to
                                   3225 ;       terminal input buffer.
      0012DD 12 99                 3226         .word      LINK
                                   3227         
                           0012DF  3228 LINK = . 
      0012DF 05                    3229         .byte      5
      0012E0 51 55 45 52 59        3230         .ascii     "QUERY"
      0012E5                       3231 QUERY:
      0012E5 CD 0C 36         [ 4] 3232         CALL     TIB
      0012E8 CD 04 6F         [ 4] 3233         CALL     DOLIT
      0012EB 00 50                 3234         .word      80
      0012ED CD 12 A0         [ 4] 3235         CALL     ACCEP
      0012F0 CD 06 7C         [ 4] 3236         CALL     NTIB
      0012F3 CD 04 D1         [ 4] 3237         CALL     STORE
      0012F6 CD 05 7E         [ 4] 3238         CALL     DROP
      0012F9 CD 0B 37         [ 4] 3239         CALL     ZERO
      0012FC CD 06 6C         [ 4] 3240         CALL     INN
      0012FF CC 04 D1         [ 2] 3241         JP     STORE
                                   3242 
                                   3243 ;       ABORT   ( -- )
                                   3244 ;       Reset data stack and
                                   3245 ;       jump to QUIT.
      001302 12 DF                 3246         .word      LINK
                           001304  3247 LINK = . 
      001304 05                    3248         .byte      5
      001305 41 42 4F 52 54        3249         .ascii     "ABORT"
      00130A                       3250 ABORT:
      00130A CD 14 01         [ 4] 3251         CALL     PRESE
      00130D CC 14 1E         [ 2] 3252         JP     QUIT
                                   3253 
                                   3254 ;       abort"  ( f -- )
                                   3255 ;       Run time routine of ABORT".
                                   3256 ;       Abort with a message.
      001310 13 04                 3257         .word      LINK
                           001312  3258 LINK = . 
      001312 46                    3259 	.byte      COMPO+6
      001313 41 42 4F 52 54        3260         .ascii     "ABORT"
      001318 22                    3261         .byte      '"'
      001319                       3262 ABORQ:
      001319 CD 04 98         [ 4] 3263         CALL     QBRAN
      00131C 13 38                 3264         .word      ABOR2   ;text flag
      00131E CD 0E BF         [ 4] 3265         CALL     DOSTR
      001321 CD 0E 6D         [ 4] 3266 ABOR1:  CALL     SPACE
      001324 CD 0B FD         [ 4] 3267         CALL     COUNT
      001327 CD 0E 97         [ 4] 3268         CALL     TYPES
      00132A CD 04 6F         [ 4] 3269         CALL     DOLIT
      00132D 00 3F                 3270         .word     63 ; "?"
      00132F CD 04 36         [ 4] 3271         CALL     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001332 CD 0E AF         [ 4] 3272         CALL     CR
      001335 CC 13 0A         [ 2] 3273         JP     ABORT   ;pass error string
      001338 CD 0E BF         [ 4] 3274 ABOR2:  CALL     DOSTR
      00133B CC 05 7E         [ 2] 3275         JP     DROP
                                   3276 
                                   3277 ;; The text interpreter
                                   3278 
                                   3279 ;       $INTERPRET      ( a -- )
                                   3280 ;       Interpret a word. If failed,
                                   3281 ;       try to convert it to an integer.
      00133E 13 12                 3282         .word      LINK
                           001340  3283 LINK = . 
      001340 0A                    3284         .byte      10
      001341 24 49 4E 54 45 52 50  3285         .ascii     "$INTERPRET"
             52 45 54
      00134B                       3286 INTER:
      00134B CD 12 0D         [ 4] 3287         CALL     NAMEQ
      00134E CD 07 3B         [ 4] 3288         CALL     QDUP    ;?defined
      001351 CD 04 98         [ 4] 3289         CALL     QBRAN
      001354 13 75                 3290         .word      INTE1
      001356 CD 04 E3         [ 4] 3291         CALL     AT
      001359 CD 04 6F         [ 4] 3292         CALL     DOLIT
      00135C 40 00                 3293 	.word       0x4000	; COMPO*256
      00135E CD 05 E5         [ 4] 3294         CALL     ANDD    ;?compile only lexicon bits
      001361 CD 13 19         [ 4] 3295         CALL     ABORQ
      001364 0D                    3296         .byte      13
      001365 20 63 6F 6D 70 69 6C  3297         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001372 CC 04 C4         [ 2] 3298         JP     EXECU
      001375 CD 24 15         [ 4] 3299 INTE1:  CALL     NUMBQ   ;convert a number
      001378 CD 04 98         [ 4] 3300         CALL     QBRAN
      00137B 13 21                 3301         .word    ABOR1
      00137D 81               [ 4] 3302         RET
                                   3303 
                                   3304 ;       [       ( -- )
                                   3305 ;       Start  text interpreter.
      00137E 13 40                 3306         .word      LINK
                           001380  3307 LINK = . 
      001380 81                    3308 	.byte      IMEDD+1
      001381 5B                    3309         .ascii     "["
      001382                       3310 LBRAC:
      001382 CD 04 6F         [ 4] 3311         CALL   DOLIT
      001385 13 4B                 3312         .word  INTER
      001387 CD 06 AF         [ 4] 3313         CALL   TEVAL
      00138A CC 04 D1         [ 2] 3314         JP     STORE
                                   3315 
                                   3316 ;       .OK     ( -- )
                                   3317 ;       Display 'ok' while interpreting.
      00138D 13 80                 3318         .word      LINK
                           00138F  3319 LINK = . 
      00138F 03                    3320         .byte      3
      001390 2E 4F 4B              3321         .ascii     ".OK"
      001393                       3322 DOTOK:
      001393 CD 04 6F         [ 4] 3323         CALL     DOLIT
      001396 13 4B                 3324         .word      INTER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001398 CD 06 AF         [ 4] 3325         CALL     TEVAL
      00139B CD 04 E3         [ 4] 3326         CALL     AT
      00139E CD 08 4E         [ 4] 3327         CALL     EQUAL
      0013A1 CD 04 98         [ 4] 3328         CALL     QBRAN
      0013A4 13 AD                 3329         .word      DOTO1
      0013A6 CD 0E DC         [ 4] 3330         CALL     DOTQP
      0013A9 03                    3331         .byte      3
      0013AA 20 6F 6B              3332         .ascii     " ok"
      0013AD CC 0E AF         [ 2] 3333 DOTO1:  JP     CR
                                   3334 
                                   3335 ;       ?STACK  ( -- )
                                   3336 ;       Abort if stack underflows.
      0013B0 13 8F                 3337         .word      LINK
                           0013B2  3338 LINK = . 
      0013B2 06                    3339         .byte      6
      0013B3 3F 53 54 41 43 4B     3340         .ascii     "?STACK"
      0013B9                       3341 QSTAC: 
      0013B9 CD 0B 79         [ 4] 3342         CALL     DEPTH
      0013BC CD 05 BF         [ 4] 3343         CALL     ZLESS   ;check only for underflow
      0013BF CD 13 19         [ 4] 3344         CALL     ABORQ
      0013C2 0B                    3345         .byte      11
      0013C3 20 75 6E 64 65 72 66  3346         .ascii     " underflow "
             6C 6F 77 20
      0013CE 81               [ 4] 3347         RET
                                   3348 
                                   3349 ;       EVAL    ( -- )
                                   3350 ;       Interpret  input stream.
      0013CF 13 B2                 3351         .word      LINK
                           0013D1  3352 LINK = . 
      0013D1 04                    3353         .byte      4
      0013D2 45 56 41 4C           3354         .ascii     "EVAL"
      0013D6                       3355 EVAL:
      0013D6 CD 11 10         [ 4] 3356 EVAL1:  CALL     TOKEN
      0013D9 CD 05 88         [ 4] 3357         CALL     DUPP
      0013DC CD 05 01         [ 4] 3358         CALL     CAT     ;?input stream empty
      0013DF CD 04 98         [ 4] 3359         CALL     QBRAN
      0013E2 13 F2                 3360         .word    EVAL2
      0013E4 CD 06 AF         [ 4] 3361         CALL     TEVAL
      0013E7 CD 0C 4A         [ 4] 3362         CALL     ATEXE
      0013EA CD 13 B9         [ 4] 3363         CALL     QSTAC   ;evaluate input, check stack
      0013ED CD 04 B4         [ 4] 3364         CALL     BRAN
      0013F0 13 D6                 3365         .word    EVAL1
      0013F2 CD 05 7E         [ 4] 3366 EVAL2:  CALL     DROP
      0013F5 CC 13 93         [ 2] 3367         JP       DOTOK
                                   3368 
                                   3369 ;       PRESET  ( -- )
                                   3370 ;       Reset data stack pointer and
                                   3371 ;       terminal input buffer.
      0013F8 13 D1                 3372         .word      LINK
                           0013FA  3373 LINK = . 
      0013FA 06                    3374         .byte      6
      0013FB 50 52 45 53 45 54     3375         .ascii     "PRESET"
      001401                       3376 PRESE:
      001401 CD 04 6F         [ 4] 3377         CALL     DOLIT
      001404 16 80                 3378         .word      SPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001406 CD 05 75         [ 4] 3379         CALL     SPSTO
      001409 CD 04 6F         [ 4] 3380         CALL     DOLIT
      00140C 17 00                 3381         .word      TIBB
      00140E CD 06 7C         [ 4] 3382         CALL     NTIB
      001411 CD 0A A0         [ 4] 3383         CALL     CELLP
      001414 CC 04 D1         [ 2] 3384         JP     STORE
                                   3385 
                                   3386 ;       QUIT    ( -- )
                                   3387 ;       Reset return stack pointer
                                   3388 ;       and start text interpreter.
      001417 13 FA                 3389         .word      LINK
                           001419  3390 LINK = . 
      001419 04                    3391         .byte      4
      00141A 51 55 49 54           3392         .ascii     "QUIT"
      00141E                       3393 QUIT:
      00141E CD 04 6F         [ 4] 3394         CALL     DOLIT
      001421 17 FF                 3395         .word      RPP
      001423 CD 05 1E         [ 4] 3396         CALL     RPSTO   ;reset return stack pointer
      001426 CD 13 82         [ 4] 3397 QUIT1:  CALL     LBRAC   ;start interpretation
      001429 CD 12 E5         [ 4] 3398 QUIT2:  CALL     QUERY   ;get input
      00142C CD 13 D6         [ 4] 3399         CALL     EVAL
      00142F 20 F8            [ 2] 3400         JRA     QUIT2   ;continue till error
                                   3401 
                                   3402 ;; The compiler
                                   3403 
                                   3404 ;       '       ( -- ca )
                                   3405 ;       Search vocabularies for
                                   3406 ;       next word in input stream.
      001431 14 19                 3407         .word      LINK
                           001433  3408 LINK = . 
      001433 01                    3409         .byte      1
      001434 27                    3410         .ascii     "'"
      001435                       3411 TICK:
      001435 CD 11 10         [ 4] 3412         CALL     TOKEN
      001438 CD 12 0D         [ 4] 3413         CALL     NAMEQ   ;?defined
      00143B CD 04 98         [ 4] 3414         CALL     QBRAN
      00143E 13 21                 3415         .word      ABOR1
      001440 81               [ 4] 3416         RET     ;yes, push code address
                                   3417 
                                   3418 ;       ALLOT   ( n -- )
                                   3419 ;       Allocate n bytes to RAM 
      001441 14 33                 3420         .word      LINK
                           001443  3421         LINK = . 
      001443 05                    3422         .byte      5
      001444 41 4C 4C 4F 54        3423         .ascii     "ALLOT"
      001449                       3424 ALLOT:
      001449 CD 06 DF         [ 4] 3425         CALL     VPP
                                   3426 ; must update APP_VP each time VP is modidied
      00144C CD 0B A7         [ 4] 3427         call PSTOR 
      00144F CC 1B 92         [ 2] 3428         jp UPDATVP 
                                   3429 
                                   3430 ;       ,       ( w -- )
                                   3431 ;         Compile an integer into
                                   3432 ;         variable space.
      001452 14 43                 3433         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                           001454  3434 LINK = . 
      001454 01                    3435         .byte      1
      001455 2C                    3436         .ascii     ","
      001456                       3437 COMMA:
      001456 CD 0C 14         [ 4] 3438         CALL     HERE
      001459 CD 05 88         [ 4] 3439         CALL     DUPP
      00145C CD 0A A0         [ 4] 3440         CALL     CELLP   ;cell boundary
      00145F CD 06 DF         [ 4] 3441         CALL     VPP
      001462 CD 04 D1         [ 4] 3442         CALL     STORE
      001465 CC 04 D1         [ 2] 3443         JP     STORE
                                   3444 
                                   3445 ;       C,      ( c -- )
                                   3446 ;       Compile a byte into
                                   3447 ;       variables space.
      001468 14 54                 3448        .word      LINK
                           00146A  3449 LINK = . 
      00146A 02                    3450         .byte      2
      00146B 43 2C                 3451         .ascii     "C,"
      00146D                       3452 CCOMMA:
      00146D CD 0C 14         [ 4] 3453         CALL     HERE
      001470 CD 05 88         [ 4] 3454         CALL     DUPP
      001473 CD 0A CB         [ 4] 3455         CALL     ONEP
      001476 CD 06 DF         [ 4] 3456         CALL     VPP
      001479 CD 04 D1         [ 4] 3457         CALL     STORE
      00147C CC 04 F0         [ 2] 3458         JP     CSTOR
                                   3459 
                                   3460 ;       [COMPILE]       ( -- ; <string> )
                                   3461 ;       Compile next immediate
                                   3462 ;       word into code dictionary.
      00147F 14 6A                 3463         .word      LINK
                           001481  3464 LINK = . 
      001481 89                    3465 	.byte      IMEDD+9
      001482 5B 43 4F 4D 50 49 4C  3466         .ascii     "[COMPILE]"
             45 5D
      00148B                       3467 BCOMP:
      00148B CD 14 35         [ 4] 3468         CALL     TICK
      00148E CC 17 61         [ 2] 3469         JP     JSRC
                                   3470 
                                   3471 ;       COMPILE ( -- )
                                   3472 ;       Compile next jsr in
                                   3473 ;       colon list to code dictionary.
      001491 14 81                 3474         .word      LINK
                           001493  3475 LINK = . 
      001493 47                    3476 	.byte      COMPO+7
      001494 43 4F 4D 50 49 4C 45  3477         .ascii     "COMPILE"
      00149B                       3478 COMPI:
      00149B CD 05 34         [ 4] 3479         CALL     RFROM
      00149E CD 05 88         [ 4] 3480         CALL     DUPP
      0014A1 CD 04 E3         [ 4] 3481         CALL     AT
      0014A4 CD 17 61         [ 4] 3482         CALL     JSRC    ;compile subroutine
      0014A7 CD 0A A0         [ 4] 3483         CALL     CELLP
      0014AA 90 93            [ 1] 3484         ldw y,x 
      0014AC 90 FE            [ 2] 3485         ldw y,(y)
      0014AE 1C 00 02         [ 2] 3486         addw x,#CELLL 
      0014B1 90 FC            [ 2] 3487         jp (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3488 
                                   3489 ;       LITERAL ( w -- )
                                   3490 ;       Compile tos to dictionary
                                   3491 ;       as an integer literal.
      0014B3 14 93                 3492         .word      LINK
                           0014B5  3493 LINK = . 
      0014B5 87                    3494 	.byte      IMEDD+7
      0014B6 4C 49 54 45 52 41 4C  3495         .ascii     "LITERAL"
      0014BD                       3496 LITER:
      0014BD CD 14 9B         [ 4] 3497         CALL     COMPI
      0014C0 04 6F                 3498         .word DOLIT 
      0014C2 CC 14 56         [ 2] 3499         JP     COMMA
                                   3500 
                                   3501 ;       $,"     ( -- )
                                   3502 ;       Compile a literal string
                                   3503 ;       up to next " .
      0014C5 14 B5                 3504         .word      LINK
                           0014C7  3505 LINK = . 
      0014C7 03                    3506         .byte      3
      0014C8 24 2C 22              3507         .byte     '$',',','"'
      0014CB                       3508 STRCQ:
      0014CB CD 04 6F         [ 4] 3509         CALL     DOLIT
      0014CE 00 22                 3510         .word     34	; "
      0014D0 CD 10 50         [ 4] 3511         CALL     PARSE
      0014D3 CD 0C 14         [ 4] 3512         CALL     HERE
      0014D6 CD 0C D4         [ 4] 3513         CALL     PACKS   ;string to code dictionary
      0014D9 CD 0B FD         [ 4] 3514         CALL     COUNT
      0014DC CD 07 AD         [ 4] 3515         CALL     PLUS    ;calculate aligned end of string
      0014DF CD 06 DF         [ 4] 3516         CALL     VPP
      0014E2 CC 04 D1         [ 2] 3517         JP     STORE
                                   3518 
                                   3519 ;; Structures
                                   3520 
                                   3521 ;       FOR     ( -- a )
                                   3522 ;       Start a FOR-NEXT loop
                                   3523 ;       structure in a colon definition.
      0014E5 14 C7                 3524         .word      LINK
                           0014E7  3525 LINK = . 
      0014E7 83                    3526 	.byte      IMEDD+3
      0014E8 46 4F 52              3527         .ascii     "FOR"
      0014EB                       3528 FOR:
      0014EB CD 14 9B         [ 4] 3529         CALL     COMPI
      0014EE 05 51                 3530         .word TOR 
      0014F0 CC 0C 14         [ 2] 3531         JP     HERE
                                   3532 
                                   3533 ;       NEXT    ( a -- )
                                   3534 ;       Terminate a FOR-NEXT loop.
      0014F3 14 E7                 3535         .word      LINK
                           0014F5  3536 LINK = . 
      0014F5 84                    3537 	.byte      IMEDD+4
      0014F6 4E 45 58 54           3538         .ascii     "NEXT"
      0014FA                       3539 NEXT:
      0014FA CD 14 9B         [ 4] 3540         CALL     COMPI
      0014FD 04 83                 3541         .word DONXT 
      0014FF CD 07 2B         [ 4] 3542         call ADRADJ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001502 CC 14 56         [ 2] 3543         JP     COMMA
                                   3544 
                                   3545 ;       I ( -- n )
                                   3546 ;       stack FOR-NEXT COUNTER 
      001505 14 F5                 3547         .word LINK 
                           001507  3548         LINK=.
      001507 01                    3549         .byte 1 
      001508 49                    3550         .ascii "I"
      001509                       3551 IFETCH: 
      001509 1D 00 02         [ 2] 3552         subw x,#CELLL 
      00150C 16 03            [ 2] 3553         ldw y,(3,sp)
      00150E FF               [ 2] 3554         ldw (x),y 
      00150F 81               [ 4] 3555         ret 
                                   3556 
                                   3557 ;       BEGIN   ( -- a )
                                   3558 ;       Start an infinite or
                                   3559 ;       indefinite loop structure.
      001510 15 07                 3560         .word      LINK
                           001512  3561 LINK = . 
      001512 85                    3562 	.byte      IMEDD+5
      001513 42 45 47 49 4E        3563         .ascii     "BEGIN"
      001518                       3564 BEGIN:
      001518 CC 0C 14         [ 2] 3565         JP     HERE
                                   3566 
                                   3567 ;       UNTIL   ( a -- )
                                   3568 ;       Terminate a BEGIN-UNTIL
                                   3569 ;       indefinite loop structure.
      00151B 15 12                 3570         .word      LINK
                           00151D  3571 LINK = . 
      00151D 85                    3572 	.byte      IMEDD+5
      00151E 55 4E 54 49 4C        3573         .ascii     "UNTIL"
      001523                       3574 UNTIL:
      001523 CD 14 9B         [ 4] 3575         CALL     COMPI
      001526 04 98                 3576         .word    QBRAN 
      001528 CD 07 2B         [ 4] 3577         call ADRADJ
      00152B CC 14 56         [ 2] 3578         JP     COMMA
                                   3579 
                                   3580 ;       AGAIN   ( a -- )
                                   3581 ;       Terminate a BEGIN-AGAIN
                                   3582 ;       infinite loop structure.
      00152E 15 1D                 3583         .word      LINK
                           001530  3584 LINK = . 
      001530 85                    3585 	.byte      IMEDD+5
      001531 41 47 41 49 4E        3586         .ascii     "AGAIN"
      001536                       3587 AGAIN:
      001536 CD 14 9B         [ 4] 3588         CALL     COMPI
      001539 04 B4                 3589         .word BRAN
      00153B CD 07 2B         [ 4] 3590         call ADRADJ 
      00153E CC 14 56         [ 2] 3591         JP     COMMA
                                   3592 
                                   3593 ;       IF      ( -- A )
                                   3594 ;       Begin a conditional branch.
      001541 15 30                 3595         .word      LINK
                           001543  3596 LINK = . 
      001543 82                    3597 	.byte      IMEDD+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001544 49 46                 3598         .ascii     "IF"
      001546                       3599 IFF:
      001546 CD 14 9B         [ 4] 3600         CALL     COMPI
      001549 04 98                 3601         .word QBRAN
      00154B CD 0C 14         [ 4] 3602         CALL     HERE
      00154E CD 0B 37         [ 4] 3603         CALL     ZERO
      001551 CC 14 56         [ 2] 3604         JP     COMMA
                                   3605 
                                   3606 ;       THEN        ( A -- )
                                   3607 ;       Terminate a conditional branch structure.
      001554 15 43                 3608         .word      LINK
                           001556  3609 LINK = . 
      001556 84                    3610 	.byte      IMEDD+4
      001557 54 48 45 4E           3611         .ascii     "THEN"
      00155B                       3612 THENN:
      00155B CD 0C 14         [ 4] 3613         CALL     HERE
      00155E CD 07 2B         [ 4] 3614         call ADRADJ 
      001561 CD 05 98         [ 4] 3615         CALL     SWAPP
      001564 CC 04 D1         [ 2] 3616         JP     STORE
                                   3617 
                                   3618 ;       ELSE        ( A -- A )
                                   3619 ;       Start the false clause in an IF-ELSE-THEN structure.
      001567 15 56                 3620         .word      LINK
                           001569  3621 LINK = . 
      001569 84                    3622 	.byte      IMEDD+4
      00156A 45 4C 53 45           3623         .ascii     "ELSE"
      00156E                       3624 ELSEE:
      00156E CD 14 9B         [ 4] 3625         CALL     COMPI
      001571 04 B4                 3626         .word BRAN
      001573 CD 0C 14         [ 4] 3627         CALL     HERE
      001576 CD 0B 37         [ 4] 3628         CALL     ZERO
      001579 CD 14 56         [ 4] 3629         CALL     COMMA
      00157C CD 05 98         [ 4] 3630         CALL     SWAPP
      00157F CD 0C 14         [ 4] 3631         CALL     HERE
      001582 CD 07 2B         [ 4] 3632         call ADRADJ 
      001585 CD 05 98         [ 4] 3633         CALL     SWAPP
      001588 CC 04 D1         [ 2] 3634         JP     STORE
                                   3635 
                                   3636 ;       AHEAD       ( -- A )
                                   3637 ;       Compile a forward branch instruction.
      00158B 15 69                 3638         .word      LINK
                           00158D  3639 LINK = . 
      00158D 85                    3640 	.byte      IMEDD+5
      00158E 41 48 45 41 44        3641         .ascii     "AHEAD"
      001593                       3642 AHEAD:
      001593 CD 14 9B         [ 4] 3643         CALL     COMPI
      001596 04 B4                 3644         .word BRAN
      001598 CD 0C 14         [ 4] 3645         CALL     HERE
      00159B CD 0B 37         [ 4] 3646         CALL     ZERO
      00159E CC 14 56         [ 2] 3647         JP     COMMA
                                   3648 
                                   3649 ;       WHILE       ( a -- A a )
                                   3650 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015A1 15 8D                 3651         .word      LINK
                           0015A3  3652 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0015A3 85                    3653 	.byte      IMEDD+5
      0015A4 57 48 49 4C 45        3654         .ascii     "WHILE"
      0015A9                       3655 WHILE:
      0015A9 CD 14 9B         [ 4] 3656         CALL     COMPI
      0015AC 04 98                 3657         .word QBRAN
      0015AE CD 0C 14         [ 4] 3658         CALL     HERE
      0015B1 CD 0B 37         [ 4] 3659         CALL     ZERO
      0015B4 CD 14 56         [ 4] 3660         CALL     COMMA
      0015B7 CC 05 98         [ 2] 3661         JP     SWAPP
                                   3662 
                                   3663 ;       REPEAT      ( A a -- )
                                   3664 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015BA 15 A3                 3665         .word      LINK
                           0015BC  3666 LINK = . 
      0015BC 86                    3667         .byte      IMEDD+6
      0015BD 52 45 50 45 41 54     3668         .ascii     "REPEAT"
      0015C3                       3669 REPEA:
      0015C3 CD 14 9B         [ 4] 3670         CALL     COMPI
      0015C6 04 B4                 3671         .word BRAN
      0015C8 CD 07 2B         [ 4] 3672         call ADRADJ 
      0015CB CD 14 56         [ 4] 3673         CALL     COMMA
      0015CE CD 0C 14         [ 4] 3674         CALL     HERE
      0015D1 CD 07 2B         [ 4] 3675         call ADRADJ 
      0015D4 CD 05 98         [ 4] 3676         CALL     SWAPP
      0015D7 CC 04 D1         [ 2] 3677         JP     STORE
                                   3678 
                                   3679 ;       AFT         ( a -- a A )
                                   3680 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0015DA 15 BC                 3681         .word      LINK
                           0015DC  3682 LINK = . 
      0015DC 83                    3683 	.byte      IMEDD+3
      0015DD 41 46 54              3684         .ascii     "AFT"
      0015E0                       3685 AFT:
      0015E0 CD 05 7E         [ 4] 3686         CALL     DROP
      0015E3 CD 15 93         [ 4] 3687         CALL     AHEAD
      0015E6 CD 0C 14         [ 4] 3688         CALL     HERE
      0015E9 CC 05 98         [ 2] 3689         JP     SWAPP
                                   3690 
                                   3691 ;       ABORT"      ( -- ; <string> )
                                   3692 ;       Conditional abort with an error message.
      0015EC 15 DC                 3693         .word      LINK
                           0015EE  3694 LINK = . 
      0015EE 86                    3695 	.byte      IMEDD+6
      0015EF 41 42 4F 52 54        3696         .ascii     "ABORT"
      0015F4 22                    3697         .byte      '"'
      0015F5                       3698 ABRTQ:
      0015F5 CD 14 9B         [ 4] 3699         CALL     COMPI
      0015F8 13 19                 3700         .word ABORQ
      0015FA CC 14 CB         [ 2] 3701         JP     STRCQ
                                   3702 
                                   3703 ;       $"     ( -- ; <string> )
                                   3704 ;       Compile an inline string literal.
      0015FD 15 EE                 3705         .word      LINK
                           0015FF  3706 LINK = . 
      0015FF 82                    3707 	.byte      IMEDD+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001600 24 22                 3708         .byte     '$','"'
      001602                       3709 STRQ:
      001602 CD 14 9B         [ 4] 3710         CALL     COMPI
      001605 0E D8                 3711         .word STRQP 
      001607 CC 14 CB         [ 2] 3712         JP     STRCQ
                                   3713 
                                   3714 ;       ."          ( -- ; <string> )
                                   3715 ;       Compile an inline string literal to be typed out at run time.
      00160A 15 FF                 3716         .word      LINK
                           00160C  3717 LINK = . 
      00160C 82                    3718 	.byte      IMEDD+2
      00160D 2E 22                 3719         .byte     '.','"'
      00160F                       3720 DOTQ:
      00160F CD 14 9B         [ 4] 3721         CALL     COMPI
      001612 0E DC                 3722         .word DOTQP 
      001614 CC 14 CB         [ 2] 3723         JP     STRCQ
                                   3724 
                                   3725 ;; Name compiler
                                   3726 
                                   3727 ;       ?UNIQUE ( a -- a )
                                   3728 ;       Display a warning message
                                   3729 ;       if word already exists.
      001617 16 0C                 3730         .word      LINK
                           001619  3731 LINK = . 
      001619 07                    3732         .byte      7
      00161A 3F 55 4E 49 51 55 45  3733         .ascii     "?UNIQUE"
      001621                       3734 UNIQU:
      001621 CD 05 88         [ 4] 3735         CALL     DUPP
      001624 CD 12 0D         [ 4] 3736         CALL     NAMEQ   ;?name exists
      001627 CD 04 98         [ 4] 3737         CALL     QBRAN
      00162A 16 40                 3738         .word      UNIQ1
      00162C CD 0E DC         [ 4] 3739         CALL     DOTQP   ;redef are OK
      00162F 07                    3740         .byte       7
      001630 20 72 65 44 65 66 20  3741         .ascii     " reDef "       
      001637 CD 05 B0         [ 4] 3742         CALL     OVER
      00163A CD 0B FD         [ 4] 3743         CALL     COUNT
      00163D CD 0E 97         [ 4] 3744         CALL     TYPES   ;just in case
      001640 CC 05 7E         [ 2] 3745 UNIQ1:  JP     DROP
                                   3746 
                                   3747 ;       $,n     ( na -- )
                                   3748 ;       Build a new dictionary name
                                   3749 ;       using string at na.
                                   3750 ; compile dans l'espace des variables 
      001643 16 19                 3751         .word      LINK
                           001645  3752 LINK = . 
      001645 03                    3753         .byte      3
      001646 24 2C 6E              3754         .ascii     "$,n"
      001649                       3755 SNAME:
      001649 CD 05 88         [ 4] 3756         CALL     DUPP
      00164C CD 05 01         [ 4] 3757         CALL     CAT     ;?null input
      00164F CD 04 98         [ 4] 3758         CALL     QBRAN
      001652 16 7F                 3759         .word      PNAM1
      001654 CD 16 21         [ 4] 3760         CALL     UNIQU   ;?redefinition
      001657 CD 05 88         [ 4] 3761         CALL     DUPP
      00165A CD 0B FD         [ 4] 3762         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00165D CD 07 AD         [ 4] 3763         CALL     PLUS
      001660 CD 06 DF         [ 4] 3764         CALL     VPP
      001663 CD 04 D1         [ 4] 3765         CALL     STORE
      001666 CD 05 88         [ 4] 3766         CALL     DUPP
      001669 CD 06 FD         [ 4] 3767         CALL     LAST
      00166C CD 04 D1         [ 4] 3768         CALL     STORE   ;save na for vocabulary link
      00166F CD 0A AF         [ 4] 3769         CALL     CELLM   ;link address
      001672 CD 06 D1         [ 4] 3770         CALL     CNTXT
      001675 CD 04 E3         [ 4] 3771         CALL     AT
      001678 CD 05 98         [ 4] 3772         CALL     SWAPP
      00167B CD 04 D1         [ 4] 3773         CALL     STORE
      00167E 81               [ 4] 3774         RET     ;save code pointer
      00167F CD 0E D8         [ 4] 3775 PNAM1:  CALL     STRQP
      001682 05                    3776         .byte      5
      001683 20 6E 61 6D 65        3777         .ascii     " name" ;null input
      001688 CC 13 21         [ 2] 3778         JP     ABOR1
                                   3779 
                                   3780 ;; FORTH compiler
                                   3781 
                                   3782 ;       $COMPILE        ( a -- )
                                   3783 ;       Compile next word to
                                   3784 ;       dictionary as a token or literal.
      00168B 16 45                 3785         .word      LINK
                           00168D  3786 LINK = . 
      00168D 08                    3787         .byte      8
      00168E 24 43 4F 4D 50 49 4C  3788         .ascii     "$COMPILE"
             45
      001696                       3789 SCOMP:
      001696 CD 12 0D         [ 4] 3790         CALL     NAMEQ
      001699 CD 07 3B         [ 4] 3791         CALL     QDUP    ;?defined
      00169C CD 04 98         [ 4] 3792         CALL     QBRAN
      00169F 16 B7                 3793         .word      SCOM2
      0016A1 CD 04 E3         [ 4] 3794         CALL     AT
      0016A4 CD 04 6F         [ 4] 3795         CALL     DOLIT
      0016A7 80 00                 3796         .word     0x8000	;  IMEDD*256
      0016A9 CD 05 E5         [ 4] 3797         CALL     ANDD    ;?immediate
      0016AC CD 04 98         [ 4] 3798         CALL     QBRAN
      0016AF 16 B4                 3799         .word      SCOM1
      0016B1 CC 04 C4         [ 2] 3800         JP     EXECU
      0016B4 CC 17 61         [ 2] 3801 SCOM1:  JP     JSRC
      0016B7 CD 24 15         [ 4] 3802 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016BA CD 07 3B         [ 4] 3803         CALL    QDUP  
      0016BD CD 04 98         [ 4] 3804         CALL     QBRAN
      0016C0 13 21                 3805         .word      ABOR1
      0016C2                       3806         _DOLIT  -1
      0016C2 CD 04 6F         [ 4]    1     CALL DOLIT 
      0016C5 FF FF                    2     .word -1 
      0016C7 CD 08 4E         [ 4] 3807         CALL    EQUAL
      0016CA                       3808         _QBRAN DLITER  
      0016CA CD 04 98         [ 4]    1     CALL QBRAN
      0016CD 28 62                    2     .word DLITER
      0016CF CC 14 BD         [ 2] 3809         JP     LITER
                                   3810 
                                   3811 ;       OVERT   ( -- )
                                   3812 ;       Link a new word into vocabulary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0016D2 16 8D                 3813         .word      LINK
                           0016D4  3814 LINK = . 
      0016D4 05                    3815         .byte      5
      0016D5 4F 56 45 52 54        3816         .ascii     "OVERT"
      0016DA                       3817 OVERT:
      0016DA CD 06 FD         [ 4] 3818         CALL     LAST
      0016DD CD 04 E3         [ 4] 3819         CALL     AT
      0016E0 CD 06 D1         [ 4] 3820         CALL     CNTXT
      0016E3 CC 04 D1         [ 2] 3821         JP     STORE
                                   3822 
                                   3823 ;       ;       ( -- )
                                   3824 ;       Terminate a colon definition.
      0016E6 16 D4                 3825         .word      LINK
                           0016E8  3826 LINK = . 
      0016E8 C1                    3827 	.byte      IMEDD+COMPO+1
      0016E9 3B                    3828         .ascii     ";"
      0016EA                       3829 SEMIS:
                           000001  3830 .if OPTIMIZE ; more compact and faster
      0016EA CD 04 6F         [ 4] 3831         call DOLIT 
      0016ED 00 81                 3832         .word 0x81   ; opcode for RET 
      0016EF CD 14 6D         [ 4] 3833         call CCOMMA 
                           000000  3834 .else
                                   3835         CALL     COMPI
                                   3836         .word EXIT 
                                   3837 .endif 
      0016F2 CD 13 82         [ 4] 3838         CALL     LBRAC
      0016F5 CD 16 DA         [ 4] 3839         call OVERT 
      0016F8 CD 20 EA         [ 4] 3840         CALL FMOVE
      0016FB CD 07 3B         [ 4] 3841         call QDUP 
      0016FE CD 04 98         [ 4] 3842         call QBRAN 
      001701 18 31                 3843         .word SET_RAMLAST 
      001703 CD 21 7E         [ 4] 3844         CALL UPDATPTR
      001706 81               [ 4] 3845         RET 
                                   3846 
                                   3847 
                                   3848 ;       Terminate an ISR definition 
                                   3849 ;       retourn ca of ISR as double
                                   3850 ;       I; ( -- ud )
      001707 16 E8                 3851         .word LINK 
                           001709  3852         LINK=.
      001709 C2                    3853         .byte 2+IMEDD+COMPO 
      00170A 49 3B                 3854         .ascii "I;" 
      00170C                       3855 ISEMI:
      00170C 1D 00 02         [ 2] 3856         subw x,#CELLL  
      00170F 90 AE 00 80      [ 2] 3857         ldw y,#IRET_CODE 
      001713 FF               [ 2] 3858         ldw (x),y 
      001714 CD 14 6D         [ 4] 3859         call CCOMMA
      001717 CD 13 82         [ 4] 3860         call LBRAC 
      00171A CD 21 C3         [ 4] 3861         call IFMOVE
      00171D CD 07 3B         [ 4] 3862         call QDUP 
      001720 CD 04 98         [ 4] 3863         CALL QBRAN 
      001723 18 31                 3864         .word SET_RAMLAST
      001725 CD 06 ED         [ 4] 3865         CALL CPP
      001728 CD 04 E3         [ 4] 3866         call AT 
      00172B CD 05 98         [ 4] 3867         call SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00172E CD 06 ED         [ 4] 3868         CALL CPP 
      001731 CD 04 D1         [ 4] 3869         call STORE 
      001734 CD 1B 7B         [ 4] 3870         call UPDATCP 
      001737 CD 1B 38         [ 4] 3871         call EEPVP 
      00173A CD 05 7E         [ 4] 3872         call DROP 
      00173D CD 04 E3         [ 4] 3873         call AT 
      001740 CD 06 DF         [ 4] 3874         call VPP 
      001743 CD 04 D1         [ 4] 3875         call STORE 
      001746 CC 0B 37         [ 2] 3876         jp ZERO
      001749 81               [ 4] 3877         ret           
                                   3878         
                                   3879 
                                   3880 ;       ]       ( -- )
                                   3881 ;       Start compiling words in
                                   3882 ;       input stream.
      00174A 17 09                 3883         .word      LINK
                           00174C  3884 LINK = . 
      00174C 01                    3885         .byte      1
      00174D 5D                    3886         .ascii     "]"
      00174E                       3887 RBRAC:
      00174E CD 04 6F         [ 4] 3888         CALL   DOLIT
      001751 16 96                 3889         .word  SCOMP
      001753 CD 06 AF         [ 4] 3890         CALL   TEVAL
      001756 CC 04 D1         [ 2] 3891         JP     STORE
                                   3892 
                                   3893 ;       CALL,    ( ca -- )
                                   3894 ;       Compile a subroutine call.
      001759 17 4C                 3895         .word      LINK
                           00175B  3896 LINK = . 
      00175B 05                    3897         .byte      5
      00175C 43 41 4C 4C 2C        3898         .ascii     "CALL,"
      001761                       3899 JSRC:
      001761 CD 04 6F         [ 4] 3900         CALL     DOLIT
      001764 00 CD                 3901         .word     CALLL     ;CALL
      001766 CD 14 6D         [ 4] 3902         CALL     CCOMMA
      001769 CC 14 56         [ 2] 3903         JP     COMMA
                                   3904 
                                   3905 ;       INIT-OFS ( -- )
                                   3906 ;       compute offset to adjust jump address 
                                   3907 ;       set variable OFFSET 
      00176C 17 5B                 3908         .word LINK 
                           00176E  3909         LINK=.
      00176E 08                    3910         .byte 8 
      00176F 49 4E 49 54 2D 4F 46  3911         .ascii "INIT-OFS" 
             53
      001777                       3912 INITOFS:
      001777 CD 06 9E         [ 4] 3913         call TFLASH 
      00177A CD 04 E3         [ 4] 3914         CALL AT 
      00177D CD 05 88         [ 4] 3915         CALL DUPP 
      001780 CD 04 98         [ 4] 3916         call QBRAN
      001783 17 94                 3917         .word 1$
      001785 CD 05 7E         [ 4] 3918         call DROP  
      001788 CD 06 ED         [ 4] 3919         call CPP 
      00178B CD 04 E3         [ 4] 3920         call AT 
      00178E CD 0C 14         [ 4] 3921         call HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001791 CD 08 26         [ 4] 3922         call SUBB 
      001794 CD 07 22         [ 4] 3923 1$:     call OFFSET 
      001797 CC 04 D1         [ 2] 3924         jp STORE  
                                   3925 
                                   3926 ;       :       ( -- ; <string> )
                                   3927 ;       Start a new colon definition
                                   3928 ;       using next word as its name.
      00179A 17 6E                 3929         .word      LINK
                           00179C  3930 LINK = . 
      00179C 01                    3931         .byte      1
      00179D 3A                    3932         .ascii     ":"
      00179E                       3933 COLON:
      00179E CD 17 77         [ 4] 3934         call INITOFS       
      0017A1 CD 11 10         [ 4] 3935         CALL   TOKEN
      0017A4 CD 16 49         [ 4] 3936         CALL   SNAME
      0017A7 CC 17 4E         [ 2] 3937         JP     RBRAC
                                   3938 
                                   3939 ;       I:  ( -- )
                                   3940 ;       Start interrupt service routine definition
                                   3941 ;       those definition have no name.
      0017AA 17 9C                 3942         .word LINK
                           0017AC  3943         LINK=.
      0017AC 02                    3944         .byte 2 
      0017AD 49 3A                 3945         .ascii "I:" 
      0017AF                       3946 ICOLON:
      0017AF CD 17 77         [ 4] 3947         call INITOFS 
      0017B2 CC 17 4E         [ 2] 3948         jp RBRAC  
                                   3949 
                                   3950 ;       IMMEDIATE       ( -- )
                                   3951 ;       Make last compiled word
                                   3952 ;       an immediate word.
      0017B5 17 AC                 3953         .word      LINK
                           0017B7  3954 LINK = . 
      0017B7 09                    3955         .byte      9
      0017B8 49 4D 4D 45 44 49 41  3956         .ascii     "IMMEDIATE"
             54 45
      0017C1                       3957 IMMED:
      0017C1 CD 04 6F         [ 4] 3958         CALL     DOLIT
      0017C4 80 00                 3959         .word     0x8000	;  IMEDD*256
      0017C6 CD 06 FD         [ 4] 3960         CALL     LAST
      0017C9 CD 04 E3         [ 4] 3961         CALL     AT
      0017CC CD 04 E3         [ 4] 3962         CALL     AT
      0017CF CD 05 F9         [ 4] 3963         CALL     ORR
      0017D2 CD 06 FD         [ 4] 3964         CALL     LAST
      0017D5 CD 04 E3         [ 4] 3965         CALL     AT
      0017D8 CC 04 D1         [ 2] 3966         JP     STORE
                                   3967 
                                   3968 ;; Defining words
                                   3969 
                                   3970 ;       CREATE  ( -- ; <string> )
                                   3971 ;       Compile a new array
                                   3972 ;       without allocating space.
      0017DB 17 B7                 3973         .word      LINK
                           0017DD  3974 LINK = . 
      0017DD 06                    3975         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0017DE 43 52 45 41 54 45     3976         .ascii     "CREATE"
      0017E4                       3977 CREAT:
      0017E4 CD 11 10         [ 4] 3978         CALL     TOKEN
      0017E7 CD 16 49         [ 4] 3979         CALL     SNAME
      0017EA CD 16 DA         [ 4] 3980         CALL     OVERT        
      0017ED CD 14 9B         [ 4] 3981         CALL     COMPI 
      0017F0 06 3E                 3982         .word DOVAR 
      0017F2 81               [ 4] 3983         RET
                                   3984 
                                   3985 ;       VARIABLE        ( -- ; <string> )
                                   3986 ;       Compile a new variable
                                   3987 ;       initialized to 0.
      0017F3 17 DD                 3988         .word      LINK
                           0017F5  3989 LINK = . 
      0017F5 08                    3990         .byte      8
      0017F6 56 41 52 49 41 42 4C  3991         .ascii     "VARIABLE"
             45
      0017FE                       3992 VARIA:
                                   3993 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0017FE CD 0C 14         [ 4] 3994         CALL HERE
      001801 CD 05 88         [ 4] 3995         CALL DUPP 
      001804 CD 0A A0         [ 4] 3996         CALL CELLP
      001807 CD 06 DF         [ 4] 3997         CALL VPP 
      00180A CD 04 D1         [ 4] 3998         CALL STORE
      00180D CD 17 E4         [ 4] 3999         CALL CREAT
      001810 CD 05 88         [ 4] 4000         CALL DUPP
      001813 CD 14 56         [ 4] 4001         CALL COMMA
      001816 CD 0B 37         [ 4] 4002         CALL ZERO
      001819 CD 05 98         [ 4] 4003         call SWAPP 
      00181C CD 04 D1         [ 4] 4004         CALL STORE
      00181F CD 20 EA         [ 4] 4005         CALL FMOVE ; move definition to FLASH
      001822 CD 07 3B         [ 4] 4006         CALL QDUP 
      001825 CD 04 98         [ 4] 4007         CALL QBRAN 
      001828 18 31                 4008         .word SET_RAMLAST   
      00182A CD 1B 92         [ 4] 4009         call UPDATVP  ; don't update if variable kept in RAM.
      00182D CD 21 7E         [ 4] 4010         CALL UPDATPTR
      001830 81               [ 4] 4011         RET         
      001831                       4012 SET_RAMLAST: 
      001831 CD 06 FD         [ 4] 4013         CALL LAST 
      001834 CD 04 E3         [ 4] 4014         CALL AT 
      001837 CD 07 10         [ 4] 4015         CALL RAMLAST 
      00183A CC 04 D1         [ 2] 4016         jp STORE  
                                   4017 
                                   4018 
                                   4019 ;       CONSTANT  ( n -- ; <string> )
                                   4020 ;       Compile a new constant 
                                   4021 ;       n CONSTANT name 
      00183D 17 F5                 4022         .word LINK 
                           00183F  4023         LINK=. 
      00183F 08                    4024         .byte 8 
      001840 43 4F 4E 53 54 41 4E  4025         .ascii "CONSTANT" 
             54
      001848                       4026 CONSTANT:          
      001848 CD 11 10         [ 4] 4027         CALL TOKEN
      00184B CD 16 49         [ 4] 4028         CALL SNAME 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00184E CD 16 DA         [ 4] 4029         CALL OVERT 
      001851 CD 14 9B         [ 4] 4030         CALL COMPI 
      001854 18 68                 4031         .word DOCONST
      001856 CD 14 56         [ 4] 4032         CALL COMMA 
      001859 CD 20 EA         [ 4] 4033         CALL FMOVE
      00185C CD 07 3B         [ 4] 4034         CALL QDUP 
      00185F CD 04 98         [ 4] 4035         CALL QBRAN 
      001862 18 31                 4036         .word SET_RAMLAST  
      001864 CD 21 7E         [ 4] 4037         CALL UPDATPTR  
      001867 81               [ 4] 4038 1$:     RET          
                                   4039 
                                   4040 ; CONSTANT runtime semantic 
                                   4041 ; doCONST  ( -- n )
                                   4042 ;        .word LINK 
                                   4043 ;        LINK=.
                                   4044 ;        .byte 7
                                   4045 ;        .ascii "DOCONST"
      001868                       4046 DOCONST:
      001868 1D 00 02         [ 2] 4047         subw x,#CELLL
      00186B 90 85            [ 2] 4048         popw y 
      00186D 90 FE            [ 2] 4049         ldw y,(y) 
      00186F FF               [ 2] 4050         ldw (x),y 
      001870 81               [ 4] 4051         ret 
                                   4052 
                                   4053 ;----------------------------------
                                   4054 ; create double constant 
                                   4055 ; 2CONSTANT ( d -- ; <string> )
                                   4056 ;----------------------------------
      001871 18 3F                 4057     .word LINK 
                           001873  4058     LINK=.
      001873 09                    4059     .byte 9 
      001874 32 43 4F 4E 53 54 41  4060     .ascii "2CONSTANT"
             4E 54
      00187D                       4061 DCONST:
      00187D CD 11 10         [ 4] 4062         CALL TOKEN
      001880 CD 16 49         [ 4] 4063         CALL SNAME 
      001883 CD 16 DA         [ 4] 4064         CALL OVERT 
      001886 CD 14 9B         [ 4] 4065         CALL COMPI 
      001889 18 A0                 4066         .word DO_DCONST
      00188B CD 14 56         [ 4] 4067         CALL COMMA
      00188E CD 14 56         [ 4] 4068         CALL COMMA  
      001891 CD 20 EA         [ 4] 4069         CALL FMOVE
      001894 CD 07 3B         [ 4] 4070         CALL QDUP 
      001897 CD 04 98         [ 4] 4071         CALL QBRAN 
      00189A 18 31                 4072         .word SET_RAMLAST  
      00189C CD 21 7E         [ 4] 4073         CALL UPDATPTR  
      00189F 81               [ 4] 4074 1$:     RET          
                                   4075     
                                   4076 ;----------------------------------
                                   4077 ; runtime for DCONST 
                                   4078 ; stack double constant 
                                   4079 ; DO-DCONST ( -- d )
                                   4080 ;-----------------------------------
                                   4081 ;        .word LINK 
                                   4082 ;        LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4083 ;        .byte 9 
                                   4084 ;        .ascii "DO-DCONST"
      0018A0                       4085 DO_DCONST:
      0018A0 90 85            [ 2] 4086     popw y 
      0018A2 90 BF 26         [ 2] 4087     ldw YTEMP,y 
      0018A5 1D 00 04         [ 2] 4088     subw x,#2*CELLL 
      0018A8 90 FE            [ 2] 4089     ldw y,(y)
      0018AA FF               [ 2] 4090     ldw (x),y 
      0018AB 90 BE 26         [ 2] 4091     ldw y,YTEMP 
      0018AE 90 EE 02         [ 2] 4092     ldw y,(2,y)
      0018B1 EF 02            [ 2] 4093     ldw (2,x),y 
      0018B3 81               [ 4] 4094     ret 
                                   4095 
                                   4096 ;; Tools
                                   4097 
                                   4098 ;       _TYPE   ( b u -- )
                                   4099 ;       Display a string. Filter
                                   4100 ;       non-printing characters.
      0018B4 18 73                 4101         .word      LINK
                           0018B6  4102 LINK = . 
      0018B6 05                    4103         .byte      5
      0018B7 5F 54 59 50 45        4104         .ascii     "_TYPE"
      0018BC                       4105 UTYPE:
      0018BC CD 05 51         [ 4] 4106         CALL     TOR     ;start count down loop
      0018BF 20 0F            [ 2] 4107         JRA     UTYP2   ;skip first pass
      0018C1 CD 05 88         [ 4] 4108 UTYP1:  CALL     DUPP
      0018C4 CD 05 01         [ 4] 4109         CALL     CAT
      0018C7 CD 0B 61         [ 4] 4110         CALL     TCHAR
      0018CA CD 04 36         [ 4] 4111         CALL     EMIT    ;display only printable
      0018CD CD 0A CB         [ 4] 4112         CALL     ONEP    ;increment address
      0018D0 CD 04 83         [ 4] 4113 UTYP2:  CALL     DONXT
      0018D3 18 C1                 4114         .word      UTYP1   ;loop till done
      0018D5 CC 05 7E         [ 2] 4115         JP     DROP
                                   4116 
                                   4117 ;       dm+     ( a u -- a )
                                   4118 ;       Dump u bytes from ,
                                   4119 ;       leaving a+u on  stack.
      0018D8 18 B6                 4120         .word      LINK
                           0018DA  4121 LINK = . 
      0018DA 03                    4122         .byte      3
      0018DB 64 6D 2B              4123         .ascii     "dm+"
      0018DE                       4124 DUMPP:
      0018DE CD 05 B0         [ 4] 4125         CALL     OVER
      0018E1 CD 04 6F         [ 4] 4126         CALL     DOLIT
      0018E4 00 04                 4127         .word      4
      0018E6 CD 0F 05         [ 4] 4128         CALL     UDOTR   ;display address
      0018E9 CD 0E 6D         [ 4] 4129         CALL     SPACE
      0018EC CD 05 51         [ 4] 4130         CALL     TOR     ;start count down loop
      0018EF 20 11            [ 2] 4131         JRA     PDUM2   ;skip first pass
      0018F1 CD 05 88         [ 4] 4132 PDUM1:  CALL     DUPP
      0018F4 CD 05 01         [ 4] 4133         CALL     CAT
      0018F7 CD 04 6F         [ 4] 4134         CALL     DOLIT
      0018FA 00 03                 4135         .word      3
      0018FC CD 0F 05         [ 4] 4136         CALL     UDOTR   ;display numeric data
      0018FF CD 0A CB         [ 4] 4137         CALL     ONEP    ;increment address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001902 CD 04 83         [ 4] 4138 PDUM2:  CALL     DONXT
      001905 18 F1                 4139         .word      PDUM1   ;loop till done
      001907 81               [ 4] 4140         RET
                                   4141 
                                   4142 ;       DUMP    ( a u -- )
                                   4143 ;       Dump u bytes from a,
                                   4144 ;       in a formatted manner.
      001908 18 DA                 4145         .word      LINK
                           00190A  4146 LINK = . 
      00190A 04                    4147         .byte      4
      00190B 44 55 4D 50           4148         .ascii     "DUMP"
      00190F                       4149 DUMP:
      00190F CD 06 4E         [ 4] 4150         CALL     BASE
      001912 CD 04 E3         [ 4] 4151         CALL     AT
      001915 CD 05 51         [ 4] 4152         CALL     TOR
      001918 CD 0D CC         [ 4] 4153         CALL     HEX     ;save radix, set hex
      00191B CD 04 6F         [ 4] 4154         CALL     DOLIT
      00191E 00 10                 4155         .word      16
      001920 CD 09 F1         [ 4] 4156         CALL     SLASH   ;change count to lines
      001923 CD 05 51         [ 4] 4157         CALL     TOR     ;start count down loop
      001926 CD 0E AF         [ 4] 4158 DUMP1:  CALL     CR
      001929 CD 04 6F         [ 4] 4159         CALL     DOLIT
      00192C 00 10                 4160         .word      16
      00192E CD 07 98         [ 4] 4161         CALL     DDUP
      001931 CD 18 DE         [ 4] 4162         CALL     DUMPP   ;display numeric
      001934 CD 07 4C         [ 4] 4163         CALL     ROT
      001937 CD 07 4C         [ 4] 4164         CALL     ROT
      00193A CD 0E 6D         [ 4] 4165         CALL     SPACE
      00193D CD 0E 6D         [ 4] 4166         CALL     SPACE
      001940 CD 18 BC         [ 4] 4167         CALL     UTYPE   ;display printable characters
      001943 CD 04 83         [ 4] 4168         CALL     DONXT
      001946 19 26                 4169         .word      DUMP1   ;loop till done
      001948 CD 05 7E         [ 4] 4170 DUMP3:  CALL     DROP
      00194B CD 05 34         [ 4] 4171         CALL     RFROM
      00194E CD 06 4E         [ 4] 4172         CALL     BASE
      001951 CC 04 D1         [ 2] 4173         JP     STORE   ;restore radix
                                   4174 
                                   4175 ;       .S      ( ... -- ... )
                                   4176 ;        Display  contents of stack.
      001954 19 0A                 4177         .word      LINK
                           001956  4178 LINK = . 
      001956 02                    4179         .byte      2
      001957 2E 53                 4180         .ascii     ".S"
      001959                       4181 DOTS:
      001959 CD 0E AF         [ 4] 4182         CALL     CR
      00195C CD 0B 79         [ 4] 4183         CALL     DEPTH   ;stack depth
      00195F CD 05 51         [ 4] 4184         CALL     TOR     ;start count down loop
      001962 20 09            [ 2] 4185         JRA     DOTS2   ;skip first pass
      001964 CD 05 45         [ 4] 4186 DOTS1:  CALL     RAT
      001967 CD 0B 90         [ 4] 4187 	CALL     PICK
      00196A CD 0F 56         [ 4] 4188         CALL     DOT     ;index stack, display contents
      00196D CD 04 83         [ 4] 4189 DOTS2:  CALL     DONXT
      001970 19 64                 4190         .word      DOTS1   ;loop till done
      001972 CD 0E DC         [ 4] 4191         CALL     DOTQP
      001975 05                    4192         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001976 20 3C 73 70 20        4193         .ascii     " <sp "
      00197B 81               [ 4] 4194         RET
                                   4195 
                                   4196 ;       >NAME   ( ca -- na | F )
                                   4197 ;       Convert code address
                                   4198 ;       to a name address.
      00197C 19 56                 4199         .word      LINK
                           00197E  4200 LINK = . 
      00197E 05                    4201         .byte      5
      00197F 3E 4E 41 4D 45        4202         .ascii     ">NAME"
      001984                       4203 TNAME:
      001984 CD 06 D1         [ 4] 4204         CALL     CNTXT   ;vocabulary link
      001987 CD 04 E3         [ 4] 4205 TNAM2:  CALL     AT
      00198A CD 05 88         [ 4] 4206         CALL     DUPP    ;?last word in a vocabulary
      00198D CD 04 98         [ 4] 4207         CALL     QBRAN
      001990 19 AB                 4208         .word      TNAM4
      001992 CD 07 98         [ 4] 4209         CALL     DDUP
      001995 CD 11 1E         [ 4] 4210         CALL     NAMET
      001998 CD 06 0E         [ 4] 4211         CALL     XORR    ;compare
      00199B CD 04 98         [ 4] 4212         CALL     QBRAN
      00199E 19 A5                 4213         .word      TNAM3
      0019A0 CD 0A AF         [ 4] 4214         CALL     CELLM   ;continue with next word
      0019A3 20 E2            [ 2] 4215         JRA     TNAM2
      0019A5 CD 05 98         [ 4] 4216 TNAM3:  CALL     SWAPP
      0019A8 CC 05 7E         [ 2] 4217         JP     DROP
      0019AB CD 07 8D         [ 4] 4218 TNAM4:  CALL     DDROP
      0019AE CC 0B 37         [ 2] 4219         JP     ZERO
                                   4220 
                                   4221 ;       .ID     ( na -- )
                                   4222 ;        Display  name at address.
      0019B1 19 7E                 4223         .word      LINK
                           0019B3  4224 LINK = . 
      0019B3 03                    4225         .byte      3
      0019B4 2E 49 44              4226         .ascii     ".ID"
      0019B7                       4227 DOTID:
      0019B7 CD 07 3B         [ 4] 4228         CALL     QDUP    ;if zero no name
      0019BA CD 04 98         [ 4] 4229         CALL     QBRAN
      0019BD 19 CD                 4230         .word      DOTI1
      0019BF CD 0B FD         [ 4] 4231         CALL     COUNT
      0019C2 CD 04 6F         [ 4] 4232         CALL     DOLIT
      0019C5 00 1F                 4233         .word      0x1F
      0019C7 CD 05 E5         [ 4] 4234         CALL     ANDD    ;mask lexicon bits
      0019CA CC 18 BC         [ 2] 4235         JP     UTYPE
      0019CD CD 0E DC         [ 4] 4236 DOTI1:  CALL     DOTQP
      0019D0 09                    4237         .byte      9
      0019D1 20 6E 6F 4E 61 6D 65  4238         .ascii     " noName"
      0019D8 81               [ 4] 4239         RET
                                   4240 
                           000000  4241 WANT_SEE=0
                           000000  4242 .if WANT_SEE 
                                   4243 ;       SEE     ( -- ; <string> )
                                   4244 ;       A simple decompiler.
                                   4245 ;       Updated for byte machines.
                                   4246         .word      LINK
                                   4247 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4248         .byte      3
                                   4249         .ascii     "SEE"
                                   4250 SEE:
                                   4251         CALL     TICK    ;starting address
                                   4252         CALL     CR
                                   4253         CALL     ONEM
                                   4254 SEE1:   CALL     ONEP
                                   4255         CALL     DUPP
                                   4256         CALL     AT
                                   4257         CALL     DUPP
                                   4258         CALL     QBRAN
                                   4259         .word    SEE2
                                   4260         CALL     TNAME   ;?is it a name
                                   4261 SEE2:   CALL     QDUP    ;name address or zero
                                   4262         CALL     QBRAN
                                   4263         .word    SEE3
                                   4264         CALL     SPACE
                                   4265         CALL     DOTID   ;display name
                                   4266         CALL     ONEP
                                   4267         JRA      SEE4
                                   4268 SEE3:   CALL     DUPP
                                   4269         CALL     CAT
                                   4270         CALL     UDOT    ;display number
                                   4271 SEE4:   CALL     NUFQ    ;user control
                                   4272         CALL     QBRAN
                                   4273         .word    SEE1
                                   4274         JP     DROP
                                   4275 .endif ; WANT_SEE 
                                   4276 
                                   4277 ;       WORDS   ( -- )
                                   4278 ;       Display names in vocabulary.
      0019D9 19 B3                 4279         .word      LINK
                           0019DB  4280 LINK = . 
      0019DB 05                    4281         .byte      5
      0019DC 57 4F 52 44 53        4282         .ascii     "WORDS"
      0019E1                       4283 WORDS:
      0019E1 CD 0E AF         [ 4] 4284         CALL     CR
      0019E4 CD 06 D1         [ 4] 4285         CALL     CNTXT   ;only in context
      0019E7 CD 04 E3         [ 4] 4286 WORS1:  CALL     AT
      0019EA CD 07 3B         [ 4] 4287         CALL     QDUP    ;?at end of list
      0019ED CD 04 98         [ 4] 4288         CALL     QBRAN
      0019F0 1A 03                 4289         .word      WORS2
      0019F2 CD 05 88         [ 4] 4290         CALL     DUPP
      0019F5 CD 0E 6D         [ 4] 4291         CALL     SPACE
      0019F8 CD 19 B7         [ 4] 4292         CALL     DOTID   ;display a name
      0019FB CD 0A AF         [ 4] 4293         CALL     CELLM
      0019FE CD 04 B4         [ 4] 4294         CALL     BRAN
      001A01 19 E7                 4295         .word      WORS1
      001A03 81               [ 4] 4296 WORS2:  RET
                                   4297 
                                   4298         
                                   4299 ;; Hardware reset
                                   4300 
                                   4301 ;       hi      ( -- )
                                   4302 ;       Display sign-on message.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001A04 19 DB                 4303         .word      LINK
                           001A06  4304 LINK = . 
      001A06 02                    4305         .byte      2
      001A07 68 69                 4306         .ascii     "hi"
      001A09                       4307 HI:
      001A09 CD 0E AF         [ 4] 4308         CALL     CR
      001A0C CD 0E DC         [ 4] 4309         CALL     DOTQP   ;initialize I/O
      001A0F 0F                    4310         .byte      15
      001A10 73 74 6D 38 65 46 6F  4311         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A1C 34                    4312 	.byte      VER+'0'
      001A1D 2E                    4313         .byte      '.' 
      001A1E 30                    4314 	.byte      EXT+'0' ;version
      001A1F CD 0E DC         [ 4] 4315         CALL    DOTQP
                           000001  4316 .if NUCLEO          
      001A22 12                    4317         .byte 18
      001A23 20 6F 6E 20 4E 55 43  4318         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4319 .endif
                           000000  4320 .if DISCOVERY
                                   4321         .byte 19
                                   4322         .ascii  " on STM8S-DISCOVERY"
                                   4323 .endif
                           000000  4324 .if DOORBELL
                                   4325         .byte 16
                                   4326         .ascii " on stm8s105k6b6"
                                   4327 .endif
      001A35 CC 0E AF         [ 2] 4328         JP     CR
                                   4329 
                           000000  4330 WANT_DEBUG=0
                           000000  4331 .if WANT_DEBUG 
                                   4332 ;       DEBUG      ( -- )
                                   4333 ;       Display sign-on message.
                                   4334 ;        .word      LINK
                                   4335 LINK = . 
                                   4336         .byte      5
                                   4337         .ascii     "DEBUG"
                                   4338 DEBUG:
                                   4339 	CALL DOLIT
                                   4340 	.word 0x65
                                   4341 	CALL EMIT
                                   4342 	CALL DOLIT
                                   4343 	.word 0
                                   4344  	CALL ZLESS 
                                   4345 	CALL DOLIT
                                   4346 	.word 0xFFFE
                                   4347 	CALL ZLESS 
                                   4348 	CALL UPLUS 
                                   4349  	CALL DROP 
                                   4350 	CALL DOLIT
                                   4351 	.word 3
                                   4352 	CALL UPLUS 
                                   4353 	CALL UPLUS 
                                   4354  	CALL DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4355 	CALL DOLIT
                                   4356 	.word 0x43
                                   4357 	CALL UPLUS 
                                   4358  	CALL DROP
                                   4359 	CALL EMIT
                                   4360 	CALL DOLIT
                                   4361 	.word 0x4F
                                   4362 	CALL DOLIT
                                   4363 	.word 0x6F
                                   4364  	CALL XORR
                                   4365 	CALL DOLIT
                                   4366 	.word 0xF0
                                   4367  	CALL ANDD
                                   4368 	CALL DOLIT
                                   4369 	.word 0x4F
                                   4370  	CALL ORR
                                   4371 	CALL EMIT
                                   4372 	CALL DOLIT
                                   4373 	.word 8
                                   4374 	CALL DOLIT
                                   4375 	.word 6
                                   4376  	CALL SWAPP
                                   4377 	CALL OVER
                                   4378 	CALL XORR
                                   4379 	CALL DOLIT
                                   4380 	.word 3
                                   4381 	CALL ANDD 
                                   4382 	CALL ANDD
                                   4383 	CALL DOLIT
                                   4384 	.word 0x70
                                   4385 	CALL UPLUS 
                                   4386 	CALL DROP
                                   4387 	CALL EMIT
                                   4388 	CALL DOLIT
                                   4389 	.word 0
                                   4390 	CALL QBRAN
                                   4391 	.word DEBUG1
                                   4392 	CALL DOLIT
                                   4393 	.word 0x3F
                                   4394 DEBUG1:
                                   4395 	CALL DOLIT
                                   4396 	.word 0xFFFF
                                   4397 	CALL QBRAN
                                   4398 	.word DEBUG2
                                   4399 	CALL DOLIT
                                   4400 	.word 0x74
                                   4401 	CALL BRAN
                                   4402 	.word DEBUG3
                                   4403 DEBUG2:
                                   4404 	CALL DOLIT
                                   4405 	.word 0x21
                                   4406 DEBUG3:
                                   4407 	CALL EMIT
                                   4408 	CALL DOLIT
                                   4409 	.word 0x68
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4410 	CALL DOLIT
                                   4411 	.word 0x80
                                   4412 	CALL STORE
                                   4413 	CALL DOLIT
                                   4414 	.word 0x80
                                   4415 	CALL AT
                                   4416 	CALL EMIT
                                   4417 	CALL DOLIT
                                   4418 	.word 0x4D
                                   4419 	CALL TOR
                                   4420 	CALL RAT
                                   4421 	CALL RFROM
                                   4422 	CALL ANDD
                                   4423 	CALL EMIT
                                   4424 	CALL DOLIT
                                   4425 	.word 0x61
                                   4426 	CALL DOLIT
                                   4427 	.word 0xA
                                   4428 	CALL TOR
                                   4429 DEBUG4:
                                   4430 	CALL DOLIT
                                   4431 	.word 1
                                   4432 	CALL UPLUS 
                                   4433 	CALL DROP
                                   4434 	CALL DONXT
                                   4435 	.word DEBUG4
                                   4436 	CALL EMIT
                                   4437 	CALL DOLIT
                                   4438 	.word 0x656D
                                   4439 	CALL DOLIT
                                   4440 	.word 0x100
                                   4441 	CALL UMSTA
                                   4442 	CALL SWAPP
                                   4443 	CALL DOLIT
                                   4444 	.word 0x100
                                   4445 	CALL UMSTA
                                   4446 	CALL SWAPP 
                                   4447 	CALL DROP
                                   4448 	CALL EMIT
                                   4449 	CALL EMIT
                                   4450 	CALL DOLIT
                                   4451 	.word 0x2043
                                   4452 	CALL DOLIT
                                   4453 	.word 0
                                   4454 	CALL DOLIT
                                   4455 	.word 0x100
                                   4456 	CALL UMMOD
                                   4457 	CALL EMIT
                                   4458 	CALL EMIT
                                   4459 	;JP ORIG
                                   4460 	RET
                                   4461 .endif ; WANT_DEBUG 
                                   4462 
                                   4463 
                                   4464 ;       'BOOT   ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4465 ;       The application startup vector.
      001A38 1A 06                 4466         .word      LINK
                           001A3A  4467 LINK = . 
      001A3A 05                    4468         .byte      5
      001A3B 27 42 4F 4F 54        4469         .ascii     "'BOOT"
      001A40                       4470 TBOOT:
      001A40 CD 06 3E         [ 4] 4471         CALL     DOVAR
      001A43 40 02                 4472         .word    APP_RUN      ;application to boot
                                   4473 
                                   4474 ;       COLD    ( -- )
                                   4475 ;       The hilevel cold start s=ence.
      001A45 1A 3A                 4476         .word      LINK
                           001A47  4477         LINK = . 
      001A47 04                    4478         .byte      4
      001A48 43 4F 4C 44           4479         .ascii     "COLD"
      001A4C                       4480 COLD:
                           000000  4481 .if WANT_DEBUG
                                   4482         CALL DEBUG
                                   4483 .endif ; WANT_DEBUG
      001A4C CD 04 6F         [ 4] 4484 COLD1:  CALL     DOLIT
      001A4F 00 2B                 4485         .word      UZERO
      001A51 CD 04 6F         [ 4] 4486 	CALL     DOLIT
      001A54 00 06                 4487         .word      UPP
      001A56 CD 04 6F         [ 4] 4488         CALL     DOLIT
      001A59 00 1C                 4489 	.word      UEND-UZERO
      001A5B CD 0C 61         [ 4] 4490         CALL     CMOVE   ;initialize user area
                           000001  4491 .if WANT_FLOAT 
      001A5E CD 2B 15         [ 4] 4492         CALL    FINIT 
                                   4493 .endif 
                                   4494 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A61 90 CE 40 02      [ 2] 4495         ldw y,APP_RUN 
      001A65 26 0B            [ 1] 4496         jrne 0$
      001A67 1D 00 02         [ 2] 4497         subw x,#CELLL 
      001A6A 90 AE 1A 09      [ 2] 4498         ldw y,#HI  
      001A6E FF               [ 2] 4499         ldw (x),y
      001A6F CD 1B 6A         [ 4] 4500         call UPDATRUN 
      001A72                       4501 0$:        
                                   4502 ; update LAST with APP_LAST 
                                   4503 ; if APP_LAST > LAST else do the opposite
      001A72 90 CE 40 00      [ 2] 4504         ldw y,APP_LAST 
      001A76 90 B3 1C         [ 2] 4505         cpw y,ULAST 
      001A79 22 05            [ 1] 4506         jrugt 1$ 
                                   4507 ; save LAST at APP_LAST  
      001A7B CD 1B 52         [ 4] 4508         call UPDATLAST 
      001A7E 20 06            [ 2] 4509         jra 2$
      001A80                       4510 1$: ; update LAST with APP_LAST 
      001A80 90 BF 1C         [ 2] 4511         ldw ULAST,y
      001A83 90 BF 16         [ 2] 4512         ldw UCNTXT,y
      001A86                       4513 2$:  
                                   4514 ; update APP_CP if < app_space 
      001A86 90 CE 40 04      [ 2] 4515         ldw y,APP_CP  
      001A8A 90 B3 1A         [ 2] 4516         cpw y,UCP   
      001A8D 24 06            [ 1] 4517         jruge 3$ 
      001A8F CD 1B 7B         [ 4] 4518         call UPDATCP
      001A92 90 BE 1A         [ 2] 4519         ldw y,UCP   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001A95                       4520 3$:
      001A95 90 BF 1A         [ 2] 4521         ldw UCP,y                 
                                   4522 ; update UVP with APP_VP  
                                   4523 ; if APP_VP>UVP else do the opposite 
      001A98 90 CE 40 06      [ 2] 4524         ldw y,APP_VP 
      001A9C 90 B3 18         [ 2] 4525         cpw y,UVP 
      001A9F 22 05            [ 1] 4526         jrugt 4$
      001AA1 CD 1B 92         [ 4] 4527         call UPDATVP 
      001AA4 20 03            [ 2] 4528         jra 6$
      001AA6                       4529 4$: ; update UVP with APP_VP 
      001AA6 90 BF 18         [ 2] 4530         ldw UVP,y 
      001AA9                       4531 6$:      
      001AA9 CD 14 01         [ 4] 4532         CALL     PRESE   ;initialize data stack and TIB
      001AAC CD 1A 40         [ 4] 4533         CALL     TBOOT
      001AAF CD 0C 4A         [ 4] 4534         CALL     ATEXE   ;application boot
      001AB2 CD 16 DA         [ 4] 4535         CALL     OVERT
      001AB5 CC 14 1E         [ 2] 4536         JP     QUIT    ;start interpretation
                                   4537 
                                   4538 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   4539         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001AB8 1A 47                   31     .word LINK 
                           001ABA    32     LINK=.
      001ABA 03                      33     .byte 3 
      001ABB 46 50 21                34     .ascii "FP!"
      001ABE                         35 FPSTOR:
      001ABE 90 93            [ 1]   36     ldw y,x
      001AC0 90 FE            [ 2]   37     ldw y,(y)
      001AC2 90 9F            [ 1]   38     ld a,yl 
      001AC4 B7 34            [ 1]   39     ld FPTR,a 
      001AC6 1C 00 02         [ 2]   40     addw x,#CELLL 
      001AC9 90 93            [ 1]   41     ldw y,x 
      001ACB 90 FE            [ 2]   42     ldw y,(y)
      001ACD 90 BF 35         [ 2]   43     ldw PTR16,y
      001AD0 1C 00 02         [ 2]   44     addw x,#CELLL 
      001AD3 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001AD4 1A BA                   52     .word LINK 
                           001AD6    53 LINK=.
      001AD6 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001AD7 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001ADD                         56 EEPROM: 
      001ADD 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001AE1 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001AE4 EF 02            [ 2]   59     ldw (2,x),y 
      001AE6 90 5F            [ 1]   60     clrw y 
      001AE8 FF               [ 2]   61     ldw (x),y 
      001AE9 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001AEA 1A D6                   68 	.word LINK 
                           001AEC    69 	LINK=.
      001AEC 08                      70 	.byte 8 
      001AED 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001AF5                         72 EEPLAST:
      001AF5 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001AF8 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001AFC EF 02            [ 2]   75 	ldw (2,x),y 
      001AFE 90 5F            [ 1]   76 	clrw y 
      001B00 FF               [ 2]   77 	ldw (x),y 
      001B01 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001B02 1A EC                   84 	.word LINK 
                           001B04    85 	LINK=.
      001B04 07                      86 	.byte 7
      001B05 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001B0C                         88 EEPRUN:
      001B0C 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001B0F 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001B13 EF 02            [ 2]   91 	ldw (2,x),y 
      001B15 90 5F            [ 1]   92 	clrw y 
      001B17 FF               [ 2]   93 	ldw (x),y 
      001B18 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001B19 1B 04                  100 	.word LINK
                           001B1B   101 	LINK=.
      001B1B 06                     102 	.byte 6 
      001B1C 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001B22                        104 EEPCP:
      001B22 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001B25 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001B29 EF 02            [ 2]  107 	ldw (2,x),y 
      001B2B 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001B2D FF               [ 2]  109 	ldw (x),y 
      001B2E 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001B2F 1B 1B                  116 	.word LINK
                           001B31   117 	LINK=.
      001B31 06                     118 	.byte 6
      001B32 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001B38                        120 EEPVP:
      001B38 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001B3B 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001B3F EF 02            [ 2]  123 	ldw (2,x),y 
      001B41 90 5F            [ 1]  124 	clrw y 
      001B43 FF               [ 2]  125 	ldw (x),y 
      001B44 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001B45 1B 31                  132 	.word LINK 
                           001B47   133 	LINK=.
      001B47 0A                     134 	.byte 10
      001B48 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001B52                        136 UPDATLAST:
      001B52 CD 06 FD         [ 4]  137 	call LAST
      001B55 CD 04 E3         [ 4]  138 	call AT  
      001B58 CD 1A F5         [ 4]  139 	call EEPLAST
      001B5B CC 1D 48         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001B5E 1B 47                  146 	.word LINK
                           001B60   147 	LINK=.
      001B60 09                     148 	.byte 9
      001B61 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001B6A                        150 UPDATRUN:
      001B6A CD 1B 0C         [ 4]  151 	call EEPRUN
      001B6D CC 1D 48         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001B70 1B 60                  158 	.word LINK 
                           001B72   159 	LINK=.
      001B72 08                     160 	.byte 8 
      001B73 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



             50
      001B7B                        162 UPDATCP:
      001B7B CD 06 ED         [ 4]  163 	call CPP 
      001B7E CD 04 E3         [ 4]  164 	call AT 
      001B81 CD 1B 22         [ 4]  165 	call EEPCP 
      001B84 CC 1D 48         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001B87 1B 72                  172 	.word LINK
                           001B89   173 	LINK=.
      001B89 08                     174 	.byte 8 
      001B8A 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001B92                        176 UPDATVP:
      001B92 CD 06 DF         [ 4]  177 	call VPP 
      001B95 CD 04 E3         [ 4]  178 	call AT
      001B98 CD 1B 38         [ 4]  179 	call EEPVP 
      001B9B CC 1D 48         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001B9E 1B 89                  187     .word LINK 
                           001BA0   188 LINK=.
      001BA0 02                     189     .byte 2
      001BA1 46 40                  190     .ascii "F@"
      001BA3                        191 FARAT:
      001BA3 CD 1A BE         [ 4]  192     call FPSTOR
      001BA6 CC 1C 6B         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001BA9 1B A0                  200     .word LINK
                           001BAB   201     LINK=.
      001BAB 03                     202     .byte 3 
      001BAC 46 43 40               203     .ascii "FC@" 
      001BAF                        204 FARCAT:
      001BAF CD 1A BE         [ 4]  205     call FPSTOR
      001BB2 CC 1C 8D         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001BB5 1B AB                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           001BB7   215 LINK=.
      001BB7 06                     216     .byte 6 
      001BB8 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001BBE                        218 UNLKEE:
      001BBE 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001BC2 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001BC6 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BCA 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BCE 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BD3 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001BD4 1B B7                  231     .word LINK 
                           001BD6   232 LINK=. 
      001BD6 06                     233     .byte 6 
      001BD7 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001BDD                        235 UNLKFL:
      001BDD 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001BE1 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001BE5 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BE9 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BED 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BF2 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001BF3 1B D6                  248 	.word LINK 
                           001BF5   249 	LINK=.
      001BF5 06                     250 	.byte 6
      001BF6 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001BFC                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001BFC 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001BFF 3D 34            [ 1]  256 	tnz FPTR 
      001C01 26 16            [ 1]  257 	jrne 4$
      001C03 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001C07 24 10            [ 1]  259     jruge 4$
      001C09 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001C0D 25 0D            [ 1]  261     jrult 9$
      001C0F 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001C13 22 07            [ 1]  263 	jrugt 9$
      001C15 CD 1B BE         [ 4]  264 	call UNLKEE
      001C18 81               [ 4]  265 	ret 
      001C19 CD 1B DD         [ 4]  266 4$: call UNLKFL
      001C1C 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001C1D 1B F5                  274 	.word LINK 
                           001C1F   275 	LINK=.
      001C1F 04                     276 	.byte 4 
      001C20 4C 4F 43 4B            277 	.ascii "LOCK" 
      001C24                        278 LOCK: 
      001C24 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C28 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C2C 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001C2D 1C 1F                  287 	.word LINK 
                           001C2F   288 	LINK=. 
      001C2F 08                     289 	.byte 8 
      001C30 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001C38                        291 INC_FPTR:
      001C38 3C 36            [ 1]  292 	inc PTR8 
      001C3A 26 0C            [ 1]  293 	jrne 1$
      001C3C 90 89            [ 2]  294 	pushw y 
      001C3E 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001C41 90 5C            [ 1]  296 	incw y 
      001C43 90 BF 34         [ 2]  297 	ldw FPTR,y
      001C46 90 85            [ 2]  298 	popw y  
      001C48 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001C49 1C 2F                  305 	.word LINK 
                           001C4B   306 	LINK=.
      001C4B 04                     307 	.byte 4 
      001C4C 50 54 52 2B            308 	.ascii "PTR+"
      001C50                        309 PTRPLUS:
      001C50 90 93            [ 1]  310 	ldw y,x 
      001C52 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001C55 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001C59 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001C5C 24 02            [ 1]  314 	jrnc 1$
      001C5E 3C 34            [ 1]  315 	inc FPTR 
      001C60 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001C61 1C 4B                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                           001C63   324 	LINK=.
      001C63 07                     325 	.byte 7 
      001C64 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001C6B                        327 EE_READ:
      001C6B 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001C6E 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001C72 90 95            [ 1]  330 	ld yh,a 
      001C74 CD 1C 38         [ 4]  331 	call INC_FPTR 
      001C77 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001C7B CD 1C 38         [ 4]  333 	call INC_FPTR 
      001C7E 90 97            [ 1]  334 	ld yl,a 
      001C80 FF               [ 2]  335 	ldw (x),y 
      001C81 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001C82 1C 63                  342 	.word LINK 
                           001C84   343 	LINK=.
      001C84 08                     344 	.byte 8
      001C85 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001C8D                        346 EE_CREAD:
      001C8D 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001C90 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001C94 CD 1C 38         [ 4]  349 	call INC_FPTR
      001C97 90 5F            [ 1]  350 	clrw y 
      001C99 90 97            [ 1]  351 	ld yl,a 
      001C9B FF               [ 2]  352 	ldw (x),y 
      001C9C 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001C9D 1C 84                  362 	.word LINK 
                           001C9F   363 	LINK=. 
      001C9F 07                     364 	.byte 7 
      001CA0 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001CA7                        367 WR_BYTE:
      001CA7 CD 04 63         [ 4]  368 	call FC_XOFF
      001CAA 90 93            [ 1]  369 	ldw y,x 
      001CAC 90 FE            [ 2]  370 	ldw y,(y)
      001CAE 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001CB1 90 9F            [ 1]  372 	ld a,yl
      001CB3 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001CB7 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CBC CD 04 4D         [ 4]  375 	call FC_XON
      001CBF CC 1C 38         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001CC2 1C 9F                  385 	.word LINK 
                           001CC4   386 	LINK=.
      001CC4 07                     387 	.byte 7 
      001CC5 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001CCC                        389 WR_WORD:
      001CCC CD 04 63         [ 4]  390 	call FC_XOFF
      001CCF 90 93            [ 1]  391 	ldw y,x
      001CD1 90 FE            [ 2]  392 	ldw y,(y)
      001CD3 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001CD6 90 9E            [ 1]  394 	ld a,yh 
      001CD8 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001CDC 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CE1 CD 1C 38         [ 4]  397 	call INC_FPTR 
      001CE4 90 9F            [ 1]  398 	ld a,yl 
      001CE6 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001CEA 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CEF CD 04 4D         [ 4]  401 	call FC_XON
      001CF2 CC 1C 38         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001CF5 1C C4                  409     .word LINK 
                           001CF7   410 	LINK=.
      001CF7 04                     411     .byte 4 
      001CF8 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001CFC                        417 EECSTORE:
      001CFC 52 02            [ 2]  418 	sub sp,#VSIZE
      001CFE CD 1A BE         [ 4]  419     call FPSTOR
      001D01 E6 01            [ 1]  420 	ld a,(1,x)
      001D03 43               [ 1]  421 	cpl a 
      001D04 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001D06 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001D08 CD 1B FC         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001D0B 3D 34            [ 1]  426 	tnz FPTR 
      001D0D 26 19            [ 1]  427 	jrne 2$
      001D0F 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001D12 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001D16 2B 10            [ 1]  430 	jrmi 2$
      001D18 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001D1C 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001D1E 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001D20 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001D24 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D28                        437 2$: 
      001D28 CD 1C A7         [ 4]  438 	call WR_BYTE 	
      001D2B 0D 02            [ 1]  439 	tnz (OPT,sp)
      001D2D 27 0D            [ 1]  440 	jreq 3$ 
      001D2F 7B 01            [ 1]  441     ld a,(BTW,sp)
      001D31 90 5F            [ 1]  442     clrw y
      001D33 90 97            [ 1]  443 	ld yl,a 
      001D35 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001D38 FF               [ 2]  445 	ldw (x),y 
      001D39 CD 1C A7         [ 4]  446 	call WR_BYTE
      001D3C                        447 3$: 
      001D3C CD 1C 24         [ 4]  448 	call LOCK 
      001D3F 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001D41 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001D42 1C F7                  456 	.word LINK 
                           001D44   457 	LINK=.
      001D44 03                     458 	.byte 3 
      001D45 45 45 21               459 	.ascii "EE!"
      001D48                        460 EESTORE:
      001D48 CD 1A BE         [ 4]  461 	call FPSTOR 
      001D4B CD 1B FC         [ 4]  462 	call UNLOCK 
      001D4E 90 93            [ 1]  463 	ldw y,x 
      001D50 90 FE            [ 2]  464 	ldw y,(y)
      001D52 90 89            [ 2]  465 	pushw y 
      001D54 90 5E            [ 1]  466 	swapw y 
      001D56 FF               [ 2]  467 	ldw (x),y 
      001D57 CD 1C A7         [ 4]  468 	call WR_BYTE 
      001D5A 90 85            [ 2]  469 	popw y 
      001D5C 1D 00 02         [ 2]  470 	subw x,#CELLL
      001D5F FF               [ 2]  471 	ldw (x),y 
      001D60 CD 1C A7         [ 4]  472 	call WR_BYTE
      001D63 CC 1C 24         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001D66 1D 44                  481 	.word LINK 
                           001D68   482 	LINK=. 
      001D68 09                     483 	.byte 9 
      001D69 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001D72                        485 row_erase:
      001D72 CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001D75 CD 1A BE         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001D78 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001D7B 90 AE 1D CB      [ 2]  491 	ldw y,#row_erase_proc
      001D7F FF               [ 2]  492 	ldw (x),y 
      001D80 CD 0C 25         [ 4]  493 	call PAD 
      001D83 90 AE 1D F2      [ 2]  494 	ldw y,#row_erase_proc_end 
      001D87 72 A2 1D CB      [ 2]  495 	subw y,#row_erase_proc
      001D8B 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001D8E FF               [ 2]  497 	ldw (x),y 
      001D8F CD 0C 61         [ 4]  498 	call CMOVE 
      001D92                        499 block_erase:
      001D92 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001D95 90 A3 32 80      [ 2]  501 	cpw y,#app_space 
      001D99 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001D9B 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001D9F 24 04            [ 1]  505 	jruge 1$
      001DA1 CD 04 4D         [ 4]  506 	call FC_XON
      001DA4 81               [ 4]  507 	ret ; bad address 
      001DA5 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001DA9 23 04            [ 2]  509 	jrule 2$ 
      001DAB CD 04 4D         [ 4]  510 	call FC_XON
      001DAE 81               [ 4]  511 	ret ; bad address 
      001DAF                        512 2$:	
      001DAF CD 1B BE         [ 4]  513 	call UNLKEE 
      001DB2 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001DB4                        516 erase_flash:
      001DB4 CD 1B DD         [ 4]  517 	call UNLKFL 
      001DB7                        518 proceed_erase:
      001DB7 CD 0C 25         [ 4]  519 	call PAD 
      001DBA 90 93            [ 1]  520 	ldw y,x
      001DBC 90 FE            [ 2]  521 	ldw y,(y)
      001DBE 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001DC1 90 FD            [ 4]  523 	call (y) 
      001DC3 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DC7 CD 04 4D         [ 4]  525 	call FC_XON
      001DCA 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001DCB                        529 row_erase_proc:
      001DCB 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DCF 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DD3 4F               [ 1]  532 	clr a 
      001DD4 90 5F            [ 1]  533 	clrw y 
      001DD6 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001DDA 90 5C            [ 1]  535     incw y
      001DDC 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001DE0 90 5C            [ 1]  537     incw y
      001DE2 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001DE6 90 5C            [ 1]  539     incw y
      001DE8 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001DEC 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001DF1 81               [ 4]  542 	ret
      001DF2                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001DF2                        556 copy_buffer:
      001DF2 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001DF4 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001DF8 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001DFC 90 5F            [ 1]  561 	clrw y
      001DFE F6               [ 1]  562 1$:	ld a,(x)
      001DFF 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001E03 5C               [ 1]  564 	incw x 
      001E04 90 5C            [ 1]  565 	incw y 
      001E06 0A 01            [ 1]  566 	dec (BCNT,sp)
      001E08 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001E0A 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E0F 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001E10 81               [ 4]  571 	ret 
      001E11                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001E11                        578 copy_prog_to_ram:
      001E11 1D 00 06         [ 2]  579 	subw x,#6
      001E14 90 AE 1D F2      [ 2]  580 	ldw y,#copy_buffer 
      001E18 EF 04            [ 2]  581 	ldw (4,x),y 
      001E1A 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001E1E EF 02            [ 2]  583 	ldw (2,x),y 
      001E20 90 AE 1E 11      [ 2]  584 	ldw y,#copy_buffer_end 
      001E24 72 A2 1D F2      [ 2]  585 	subw y,#copy_buffer  
      001E28 FF               [ 2]  586 	ldw (x),y 
      001E29 CD 0C 61         [ 4]  587 	call CMOVE 
      001E2C 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001E2D 1D 68                  597 	.word LINK 
                           001E2F   598 	LINK=.
      001E2F 06                     599 	.byte 6 
      001E30 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001E36                        601 write_row:
      001E36 CD 04 63         [ 4]  602 	call FC_XOFF
      001E39 CD 1A BE         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001E3C A6 80            [ 1]  605 	ld a,#0x80 
      001E3E B4 36            [ 1]  606 	and a,PTR8 
      001E40 B7 36            [ 1]  607 	ld PTR8,a  
      001E42 CD 1E 11         [ 4]  608 	call copy_prog_to_ram
      001E45 CD 1B FC         [ 4]  609 	call UNLOCK
      001E48 90 93            [ 1]  610 	ldw y,x 
      001E4A 90 FE            [ 2]  611 	ldw y,(y)
      001E4C 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001E4F 89               [ 2]  613 	pushw x 
      001E50 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001E51 CD 17 00         [ 4]  615 	call TIBBASE
      001E54 CD 1C 24         [ 4]  616 	call LOCK
      001E57 85               [ 2]  617 	popw x 
      001E58 CD 04 4D         [ 4]  618 	call FC_XON 
      001E5B 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001E5C 1E 2F                  627 		.word LINK 
                           001E5E   628 		LINK=.
      001E5E 07                     629 		.byte 7 
      001E5F 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001E66                        631 set_option: 
      001E66 90 93            [ 1]  632 		ldw y,x 
      001E68 90 FE            [ 2]  633 		ldw y,(y)
      001E6A 27 06            [ 1]  634 		jreq 1$
      001E6C 90 A3 00 07      [ 2]  635 		cpw y,#7 
      001E70 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      001E72 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      001E75 81               [ 4]  639 		ret
      001E76 90 58            [ 2]  640 2$:		sllw y 
      001E78 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      001E7C FF               [ 2]  642 		ldw (x),y 
      001E7D 1D 00 02         [ 2]  643 		subw x,#CELLL 
      001E80 90 5F            [ 1]  644 		clrw y 
      001E82 FF               [ 2]  645 		ldw (x),y 
      001E83 CD 1C FC         [ 4]  646 		call EECSTORE
      001E86 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      001E87 1E 5E                  656 	.word LINK  
                           001E89   657 	LINK=.
      001E89 08                     658 	.byte 8 
      001E8A 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      001E92                        660 pristine:
                                    661 ;;; erase EEPROM
      001E92 CD 1A DD         [ 4]  662 	call EEPROM 
      001E95 CD 07 98         [ 4]  663 1$:	call DDUP 
      001E98 CD 1D 72         [ 4]  664 	call row_erase
      001E9B 90 93            [ 1]  665 	ldw y,x 
      001E9D 90 EE 02         [ 2]  666 	ldw y,(2,y)
      001EA0 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      001EA4 EF 02            [ 2]  668 	ldw (2,x),y
      001EA6 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      001EAA 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      001EAC 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      001EB0 FF               [ 2]  673 2$:	ldw (x),y   
      001EB1 90 5F            [ 1]  674 	clrw y 
      001EB3 EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EB5 CD 07 98         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      001EB8 CD 1E 66         [ 4]  677 	call set_option
      001EBB 90 93            [ 1]  678 	ldw y,x 
      001EBD 90 FE            [ 2]  679 	ldw y,(y)
      001EBF 90 5C            [ 1]  680 	incw y  ; next OPTION 
      001EC1 90 A3 00 08      [ 2]  681 	cpw y,#8 
      001EC5 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      001EC7 90 AE 32 80      [ 2]  684 	ldw y,#app_space
      001ECB EF 02            [ 2]  685 	ldw (2,x),y  
      001ECD 90 5F            [ 1]  686 	clrw y 
      001ECF FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      001ED0 CD 1D 72         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      001ED3 1D 00 02         [ 2]  690 	subw x,#CELLL 
      001ED6 90 5F            [ 1]  691 	clrw y  
      001ED8 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      001ED9 CD 05 88         [ 4]  693 	call DUPP  
      001EDC CD 1E F9         [ 4]  694 	call reset_vector
      001EDF 90 93            [ 1]  695 	ldw y,x 
      001EE1 90 FE            [ 2]  696 	ldw y,(y)
      001EE3 90 5C            [ 1]  697 	incw y   ; next vector 
      001EE5 90 A3 00 19      [ 2]  698 	cpw y,#25 
      001EE9 25 ED            [ 1]  699 	jrult 4$
      001EEB CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      001EEE 1E 89                  708 	.word LINK 
                           001EF0   709 	LINK=. 
      001EF0 08                     710 	.byte 8 
      001EF1 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      001EF9                        712 reset_vector:
      001EF9 90 93            [ 1]  713 	ldw y,x
      001EFB 1C 00 02         [ 2]  714 	addw x,#CELLL 
      001EFE 90 FE            [ 2]  715 	ldw y,(y)
      001F00 90 A3 00 17      [ 2]  716 	cpw y,#23 
      001F04 27 3A            [ 1]  717 	jreq 9$
      001F06 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      001F0A 22 34            [ 1]  719 	jrugt 9$  
      001F0C 90 58            [ 2]  720 	sllw y 
      001F0E 90 58            [ 2]  721 	sllw y 
      001F10 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      001F14 90 BF 26         [ 2]  723 	ldw YTEMP,y
      001F17 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      001F1A EF 02            [ 2]  725 	ldw (2,x),y 
      001F1C 90 5F            [ 1]  726 	clrw y
      001F1E FF               [ 2]  727 	ldw (x),y 
      001F1F A6 82            [ 1]  728 	ld a,#0x82 
      001F21 90 95            [ 1]  729 	ld yh,a
      001F23 EF 04            [ 2]  730 	ldw (4,x),y
      001F25 CD 1D 48         [ 4]  731 	call EESTORE
      001F28 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      001F2B 90 5F            [ 1]  733 	clrw y 
      001F2D FF               [ 2]  734 	ldw (x),y 
      001F2E 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      001F32 EF 04            [ 2]  736 	ldw (4,x),y 
      001F34 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      001F37 72 A9 00 02      [ 2]  738 	addw y,#2
      001F3B EF 02            [ 2]  739 	ldw (2,x),y 
      001F3D CD 1D 48         [ 4]  740 	call EESTORE
      001F40 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      001F41 1E F0                  750 	.word LINK 
                           001F43   751 	LINK=.
      001F43 07                     752 	.byte 7
      001F44 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      001F4B                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001F4B 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      001F4D 90 93            [ 1]  761 	ldw y,x 
      001F4F 90 FE            [ 2]  762 	ldw y,(y)
      001F51 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      001F53 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      001F55 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      001F58 BF 35            [ 2]  766 	ldw PTR16,X
      001F5A AE FF FC         [ 2]  767 	ldw x,#-4 
      001F5D 1C 00 04         [ 2]  768 1$:	addw x,#4
      001F60 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      001F63 27 22            [ 1]  770 	jreq 9$
      001F65 90 93            [ 1]  771 	ldw y,x  
      001F67 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      001F6A 11 03            [ 1]  773 	cp a,(CADR,sp)
      001F6C 25 EF            [ 1]  774 	jrult 1$
      001F6E 90 5C            [ 1]  775 	incw y 
      001F70 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      001F73 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      001F75 25 E6            [ 1]  778 	jrult 1$ 
      001F77 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      001F79 54               [ 2]  780 	srlw x
      001F7A 54               [ 2]  781 	srlw x 
      001F7B 90 93            [ 1]  782 	ldw y,x 
      001F7D 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      001F7F FF               [ 2]  784 	ldw (x),y
      001F80 CD 1E F9         [ 4]  785 	call reset_vector
      001F83 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      001F85 20 D6            [ 2]  787 	jra 1$
      001F87 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      001F89 1C 00 02         [ 2]  789 	addw x,#CELLL 
      001F8C 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      001F8E 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      001F8F 1F 43                  799 	.word LINK
                           001F91   800 	LINK=.
      001F91 08                     801 	.byte 8 
      001F92 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      001F9A                        803 set_vector:
      001F9A 90 93            [ 1]  804     ldw y,x 
      001F9C 1C 00 02         [ 2]  805 	addw x,#CELLL 
      001F9F 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      001FA1 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      001FA5 23 04            [ 2]  808 	jrule 2$
      001FA7 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      001FAA 81               [ 4]  810 	ret
      001FAB 90 58            [ 2]  811 2$:	sllw y 
      001FAD 90 58            [ 2]  812 	sllw y 
      001FAF 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001FB3 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      001FB6 A6 82            [ 1]  815 	ld a,#0x82 
      001FB8 90 95            [ 1]  816 	ld yh,a 
      001FBA E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      001FBC 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      001FBE 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      001FC1 EF 04            [ 2]  821 	ldw (4,x),y 
      001FC3 90 BE 26         [ 2]  822 	ldw y,YTEMP
      001FC6 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      001FC8 90 5F            [ 1]  824 	clrw y 
      001FCA FF               [ 2]  825 	ldw (x),y   ; as a double 
      001FCB CD 1D 48         [ 4]  826 	call EESTORE 
      001FCE 90 93            [ 1]  827 	ldw y,x 
      001FD0 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      001FD3 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      001FD6 EF 04            [ 2]  830 	ldw (4,x),y 
      001FD8 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      001FDB 72 A9 00 02      [ 2]  832 	addw y,#2 
      001FDF EF 02            [ 2]  833 	ldw (2,x),y 
      001FE1 90 5F            [ 1]  834 	clrw y 
      001FE3 FF               [ 2]  835 	ldw (x),y 
      001FE4 CD 1D 48         [ 4]  836 	call EESTORE
      001FE7 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      001FEA 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      001FEB 1F 91                  845 	.word LINK
                           001FED   846 	LINK=.
      001FED 03                     847 	.byte 3
      001FEE 45 45 2C               848 	.ascii "EE,"
      001FF1                        849 EE_COMMA:
      001FF1 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      001FF4 90 BE 1A         [ 2]  851 	ldw y,UCP
      001FF7 90 89            [ 2]  852 	pushw y 
      001FF9 EF 02            [ 2]  853 	ldw (2,x),y 
      001FFB 90 5F            [ 1]  854 	clrw y 
      001FFD FF               [ 2]  855 	ldw (x),y
      001FFE CD 1D 48         [ 4]  856 	call EESTORE
      002001 90 85            [ 2]  857 	popw y 
      002003 72 A9 00 02      [ 2]  858 	addw y,#2
      002007 90 BF 1A         [ 2]  859 	ldw UCP,y
      00200A 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      00200B 1F ED                  867 	.word LINK 
                           00200D   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00200D 04                     869 	.byte 4 
      00200E 45 45 43 2C            870 	.ascii "EEC,"
      002012                        871 EE_CCOMMA:
      002012 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      002015 90 BE 1A         [ 2]  873 	ldw y,UCP
      002018 90 89            [ 2]  874 	pushw y 
      00201A EF 02            [ 2]  875 	ldw (2,x),y 
      00201C 90 5F            [ 1]  876 	clrw y 
      00201E FF               [ 2]  877 	ldw (x),y
      00201F CD 1C FC         [ 4]  878 	call EECSTORE
      002022 90 85            [ 2]  879 	popw y 
      002024 90 5C            [ 1]  880 	incw y 
      002026 90 BF 1A         [ 2]  881 	ldw UCP,y
      002029 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      00202A 20 0D                  889 	.word LINK 
                           00202C   890 	LINK=.
      00202C 07                     891 	.byte 7 
      00202D 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      002034                        893 ROW2BUF: 
      002034 CD 1A BE         [ 4]  894 	call FPSTOR 
      002037 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      002039 88               [ 1]  896 	push a 
      00203A B4 36            [ 1]  897 	and a,PTR8 ; block align 
      00203C B7 36            [ 1]  898 	ld PTR8,a
      00203E 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      002042 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      002046 90 F7            [ 1]  901 	ld (y),a
      002048 CD 1C 38         [ 4]  902 	call INC_FPTR
      00204B 90 5C            [ 1]  903 	incw y 
      00204D 0A 01            [ 1]  904 	dec (1,sp)
      00204F 26 F1            [ 1]  905 	jrne 1$ 
      002051 84               [ 1]  906 	pop a 
      002052 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      002053 20 2C                  915 	.word LINK 
                           002055   916 	LINK=.
      002055 07                     917 	.byte 7 
      002056 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      00205D                        919 BUF2ROW:
      00205D CD 06 8C         [ 4]  920 	call TBUF ; ( ud rb -- )
      002060 CD 07 4C         [ 4]  921 	call ROT 
      002063 CD 07 4C         [ 4]  922 	call ROT  ; ( rb ud -- )
      002066 CD 1E 36         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002069 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      00206A 20 55                  931 	.word LINK 
                           00206C   932 	LINK=.
      00206C 05                     933 	.byte 5 
      00206D 52 46 52 45 45         934 	.ascii "RFREE"
      002072                        935 RFREE:
      002072 E6 01            [ 1]  936 	ld a,(1,x)
      002074 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002076 B7 26            [ 1]  938 	ld YTEMP,a 
      002078 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      00207A B0 26            [ 1]  940 	sub a,YTEMP 
      00207C 90 5F            [ 1]  941 	clrw y 
      00207E 90 97            [ 1]  942 	ld yl,a
      002080 FF               [ 2]  943 	ldw (x),y 
      002081 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002082 20 6C                  955 	.word LINK 
                           002084   956 	LINK=. 
      002084 06                     957 	.byte 6
      002085 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      00208B                        960 RAM2EE:
                                    961 ; copy ud on top 
      00208B 90 93            [ 1]  962 	ldw y,x 
      00208D 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002090 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      002093 90 93            [ 1]  965 	ldw y,x 
      002095 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002098 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      00209B FF               [ 2]  968 	ldw (x),y 
      00209C 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      00209F EF 02            [ 2]  970 	ldw (2,x),y 
      0020A1 CD 20 34         [ 4]  971 	call ROW2BUF 
      0020A4 90 93            [ 1]  972 	ldw y,x 
      0020A6 90 EE 06         [ 2]  973 	ldw y,(6,y)
      0020A9 90 89            [ 2]  974 	pushw y ; udl 
      0020AB 90 9F            [ 1]  975 	ld a,yl
      0020AD A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      0020AF 90 5F            [ 1]  977 	clrw y 
      0020B1 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0020B3 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      0020B7 1D 00 02         [ 2]  980 	subw x,#CELLL 
      0020BA FF               [ 2]  981 	ldw (x),y  
      0020BB CD 05 98         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      0020BE CD 05 34         [ 4]  983 	call RFROM  
      0020C1 CD 20 72         [ 4]  984 	call RFREE 
      0020C4 CD 09 06         [ 4]  985 	call MIN
      0020C7 CD 05 88         [ 4]  986 	call DUPP 
      0020CA CD 05 51         [ 4]  987 	call TOR  
      0020CD CD 0C 61         [ 4]  988 	call CMOVE
      0020D0 CD 20 5D         [ 4]  989 	call BUF2ROW 
      0020D3 CD 05 34         [ 4]  990 	call RFROM 
      0020D6 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      0020D7 20 84                  999 	.word LINK 
                           0020D9  1000 	LINK=. 
      0020D9 05                    1001 	.byte 5 
      0020DA 46 41 44 44 52        1002 	.ascii "FADDR"
      0020DF                       1003 FADDR:
      0020DF CC 0B 37         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      0020E2 20 D9                 1020 	.word LINK 
                           0020E4  1021 	LINK=.
      0020E4 05                    1022 	.byte 5 
      0020E5 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      0020EA                       1024 FMOVE:
      0020EA CD 06 9E         [ 4] 1025 	call TFLASH 
      0020ED CD 04 E3         [ 4] 1026 	CALL AT 
      0020F0 CD 04 98         [ 4] 1027 	CALL QBRAN 
      0020F3 21 6E                 1028 	.word no_move  
      0020F5 CD 06 ED         [ 4] 1029 	call CPP
      0020F8 CD 04 E3         [ 4] 1030 	call AT  
      0020FB CD 05 88         [ 4] 1031 	call DUPP ; ( udl udl -- )
      0020FE CD 06 D1         [ 4] 1032 	call CNTXT 
      002101 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002104 CD 04 6F         [ 4] 1034 	call DOLIT 
      002107 00 02                 1035 	.word 2 
      002109 CD 08 26         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      00210C CD 05 98         [ 4] 1037 	call SWAPP 
      00210F CD 20 DF         [ 4] 1038 	call FADDR 
      002112 CD 07 4C         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      002115 CD 05 88         [ 4] 1040 	call DUPP 
      002118 CD 05 51         [ 4] 1041 	call TOR    ; R: a 
      00211B                       1042 FMOVE2: 
      00211B CD 0C 14         [ 4] 1043 	call HERE 
      00211E CD 05 45         [ 4] 1044 	call RAT 
      002121 CD 08 26         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      002124                       1046 next_row:
      002124 CD 05 88         [ 4] 1047 	call DUPP 
      002127 CD 05 51         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00212A CD 20 8B         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00212D CD 05 88         [ 4] 1050 	call DUPP 
      002130 CD 05 51         [ 4] 1051 	call TOR
      002133 CD 07 AD         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      002136 CD 05 88         [ 4] 1053 	call DUPP 
      002139 CD 0B 37         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      00213C CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00213F CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002142 CD 05 B0         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002145 CD 08 26         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002148 CD 05 88         [ 4] 1059 	call DUPP 
      00214B CD 04 98         [ 4] 1060 	call QBRAN
      00214E 21 67                 1061 	.word fmove_done 
      002150 CD 05 98         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002153 CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002156 CD 07 AD         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      002159 CD 05 88         [ 4] 1065 	call DUPP 
      00215C CD 05 51         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      00215F CD 05 98         [ 4] 1067 	call SWAPP 
      002162 CD 04 B4         [ 4] 1068 	call BRAN
      002165 21 24                 1069 	.word next_row  
      002167                       1070 fmove_done:	
      002167 CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00216A 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00216D 81               [ 4] 1073  	ret  
      00216E                       1074 no_move:
      00216E CD 0B 37         [ 4] 1075 	call ZERO
      002171 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002172 20 E4                 1083 	.word LINK 
                           002174  1084 	LINK=.
      002174 09                    1085 	.byte 9
      002175 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      00217E                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      00217E CD 1B 38         [ 4] 1089 	call EEPVP 
      002181 CD 05 7E         [ 4] 1090 	call DROP 
      002184 CD 04 E3         [ 4] 1091 	call AT
      002187 CD 06 DF         [ 4] 1092 	call VPP 
      00218A CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      00218D CD 1B 22         [ 4] 1095 	call EEPCP 
      002190 CD 05 7E         [ 4] 1096 	call DROP
      002193 CD 04 E3         [ 4] 1097 	call AT
      002196 CD 04 6F         [ 4] 1098 	call DOLIT 
      002199 00 02                 1099 	.word 2 
      00219B CD 07 AD         [ 4] 1100 	call PLUS 
      00219E CD 05 88         [ 4] 1101 	call DUPP 
      0021A1 CD 06 D1         [ 4] 1102 	call CNTXT 
      0021A4 CD 04 D1         [ 4] 1103 	call STORE
      0021A7 CD 06 FD         [ 4] 1104 	call LAST
      0021AA CD 04 D1         [ 4] 1105 	call STORE 
      0021AD CD 1B 52         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      0021B0 CD 06 ED         [ 4] 1108 	call CPP 
      0021B3 CD 04 D1         [ 4] 1109 	call STORE
      0021B6 CD 1B 7B         [ 4] 1110 	call UPDATCP 
      0021B9 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      0021BA 21 74                 1117 	.word LINK 
                           0021BC  1118 	LINK=. 
      0021BC 06                    1119 	.byte 6
      0021BD 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      0021C3                       1121 IFMOVE:
      0021C3 CD 06 9E         [ 4] 1122 	call TFLASH 
      0021C6 CD 04 E3         [ 4] 1123 	CALL AT 
      0021C9 CD 04 98         [ 4] 1124 	CALL QBRAN 
      0021CC 21 6E                 1125 	.word no_move 
      0021CE CD 06 ED         [ 4] 1126 	call CPP 
      0021D1 CD 04 E3         [ 4] 1127 	call AT 
      0021D4 CD 05 88         [ 4] 1128 	call DUPP ; ( udl udl -- )
      0021D7 CD 1B 38         [ 4] 1129 	call EEPVP 
      0021DA CD 05 7E         [ 4] 1130 	call DROP
      0021DD CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      0021E0 CD 05 51         [ 4] 1132 	call TOR 
      0021E3 CD 20 DF         [ 4] 1133 	call FADDR
      0021E6 CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      0021E9 CC 21 1B         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                           000001  4540 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   4541         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      0021EC 21 BC                   34         .word LINK 
                           0021EE    35         LINK=.
      0021EE 02                      36         .byte 2
      0021EF 50 49                   37         .ascii "PI" 
      0021F1                         38 PII:
      0021F1 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      0021F4 90 AE 01 63      [ 2]   40         ldw y,#355 
      0021F8 EF 02            [ 2]   41         ldw (2,x),y 
      0021FA 90 AE 00 71      [ 2]   42         ldw y,#113 
      0021FE FF               [ 2]   43         ldw (x),y 
      0021FF 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002200 21 EE                   51         .word LINK 
                           002202    52         LINK=.
      002202 05                      53         .byte 5 
      002203 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002208                         55 SQRT2:
      002208 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      00220B 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      00220F EF 02            [ 2]   58         ldw (2,x),y 
      002211 90 AE 36 24      [ 2]   59         ldw y,#13860 
      002215 FF               [ 2]   60         ldw (x),y 
      002216 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      002217 22 02                   66         .word LINK 
                           002219    67         LINK=.
      002219 05                      68         .byte 5
      00221A 53 51 52 54 33          69         .ascii "SQRT3" 
      00221F                         70 SQRT3: 
      00221F 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      002222 90 AE 49 81      [ 2]   72     ldw y,#18817 
      002226 EF 02            [ 2]   73     ldw (2,x),y 
      002228 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      00222C FF               [ 2]   75     ldw (x),y 
      00222D 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      00222E 22 19                   81         .word LINK 
                           002230    82         LINK=.
      002230 01                      83         .byte 1
      002231 45                      84         .ascii "E" 
      002232                         85 ENEPER:
      002232 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      002235 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      002239 EF 02            [ 2]   88     ldw (2,x),y 
      00223B 90 AE 29 32      [ 2]   89     ldw y,#10546 
      00223F FF               [ 2]   90     ldw (x),y 
      002240 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      002241 22 30                   95         .word LINK 
                           002243    96         LINK=.
      002243 06                      97         .byte 6 
      002244 53 51 52 54 31 30       98         .ascii "SQRT10" 
      00224A                         99 SQRT10:
      00224A 1D 00 04         [ 2]  100     subw x,#2*CELLL
      00224D 90 AE 59 98      [ 2]  101     ldw y,#22936 
      002251 EF 02            [ 2]  102     ldw (2,x),y 
      002253 90 AE 1C 55      [ 2]  103     ldw y,#7253
      002257 FF               [ 2]  104     ldw (x),y 
      002258 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002259 22 43                  110         .word LINK 
                           00225B   111         LINK=. 
      00225B 05                     112         .byte 5 
      00225C 31 32 52 54 32         113         .ascii "12RT2"
      002261                        114 RT12_2:
      002261 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      002264 90 AE 68 AD      [ 2]  116     ldw y,#26797
      002268 EF 02            [ 2]  117     ldw (2,x),y 
      00226A 90 AE 62 CD      [ 2]  118     ldw y,#25293
      00226E FF               [ 2]  119     ldw (x),y 
      00226F 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002270 22 5B                  125         .word LINK 
                           002272   126         LINK=.
      002272 05                     127         .byte 5 
      002273 4C 4F 47 32 53         128         .ascii "LOG2S" 
      002278                        129 LOG2S:
      002278 1D 00 04         [ 2]  130     subw x,#2*CELLL
      00227B 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      00227F EF 02            [ 2]  132     ldw (2,x),y 
      002281 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      002285 FF               [ 2]  134     ldw (x),y 
      002286 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      002287 22 72                  140         .word LINK 
                           002289   141         LINK=.
      002289 04                     142         .byte 4 
      00228A 4C 4E 32 53            143         .ascii "LN2S" 
      00228E                        144 LN2S: 
      00228E 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002291 90 AE 01 E5      [ 2]  146     ldw y,#485
      002295 EF 02            [ 2]  147     ldw (2,x),y 
      002297 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      00229B FF               [ 2]  149     ldw (x),y 
      00229C 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                   4542 .endif
                           000001  4543 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   4544         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      00229D 22 89                   34     .word LINK 
                           00229F    35     LINK=.
      00229F 06                      36     .byte 6
      0022A0 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0022A6                         38 CALLOT:
      0022A6 CD 06 ED         [ 4]   39     CALL CPP
      0022A9 CD 05 88         [ 4]   40     CALL DUPP 
      0022AC CD 04 E3         [ 4]   41     CALL AT 
      0022AF CD 05 51         [ 4]   42     CALL TOR 
      0022B2 CD 0B A7         [ 4]   43     CALL PSTOR 
      0022B5 CD 1B 7B         [ 4]   44     CALL UPDATCP 
      0022B8 CD 05 34         [ 4]   45     CALL RFROM
      0022BB CC 0B 37         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0022BE 22 9F                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                           0022C0    55     LINK=.
      0022C0 06                      56     .byte 6
      0022C1 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0022C7                         58 CTABLE:
      0022C7 CD 22 A6         [ 4]   59     CALL CALLOT     
      0022CA CC 18 7D         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      0022CD 22 C0                   69     .word LINK 
                           0022CF    70     LINK=.
      0022CF 06                      71     .byte 6
      0022D0 57 54 41 42 4C 45       72     .ascii "WTABLE"
      0022D6                         73 WTABLE:
      0022D6 CD 0A BE         [ 4]   74     CALL CELLS  
      0022D9 CD 22 A6         [ 4]   75     CALL CALLOT 
      0022DC CC 18 7D         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0022DF 22 CF                   84     .word LINK 
                           0022E1    85     LINK=.
      0022E1 06                      86     .byte 6
      0022E2 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      0022E8                         88 CTAT:
      0022E8 CD 1A BE         [ 4]   89     call FPSTOR 
      0022EB CD 1C 50         [ 4]   90     call PTRPLUS 
      0022EE CC 1C 8D         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      0022F1 22 E1                   99     .word LINK 
                           0022F3   100     LINK=.
      0022F3 06                     101     .byte 6
      0022F4 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      0022FA                        103 WTAT:
      0022FA CD 1A BE         [ 4]  104     call FPSTOR 
      0022FD CD 0A BE         [ 4]  105     call CELLS 
      002300 CD 1C 50         [ 4]  106     call PTRPLUS 
      002303 CD 1C 6B         [ 4]  107     call EE_READ 
      002306 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002307 22 F3                  115     .word LINK 
                           002309   116     LINK=.
      002309 06                     117     .byte 6 
      00230A 43 54 49 4E 49 54      118     .ascii "CTINIT"
      002310                        119 CTINIT:
      002310 CD 1A BE         [ 4]  120     CALL FPSTOR
      002313 CD 1B FC         [ 4]  121     CALL UNLOCK
      002316 CD 0B 37         [ 4]  122     CALL ZERO 
      002319 CD 0A CB         [ 4]  123 1$: CALL ONEP 
      00231C CD 05 88         [ 4]  124     CALL DUPP 
      00231F CD 23 6C         [ 4]  125     CALL INTQ 
      002322 CD 04 98         [ 4]  126     CALL QBRAN 
      002325 23 2F                  127     .word 2$
      002327 CD 1C A7         [ 4]  128     call WR_BYTE 
      00232A CD 04 B4         [ 4]  129     CALL BRAN 
      00232D 23 19                  130     .word 1$ 
      00232F CD 07 8D         [ 4]  131 2$: CALL DDROP 
      002332 CD 1C 24         [ 4]  132     CALL LOCK 
      002335 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      002336 23 09                  140     .word LINK 
                           002338   141     LINK=.
      002338 06                     142     .byte 6 
      002339 57 54 49 4E 49 54      143     .ascii "WTINIT"
      00233F                        144 WTINIT:
      00233F CD 1A BE         [ 4]  145     CALL FPSTOR
      002342 CD 1B FC         [ 4]  146     CALL UNLOCK
      002345 CD 0B 37         [ 4]  147     CALL ZERO 
      002348 CD 0A CB         [ 4]  148 1$: CALL ONEP 
      00234B CD 05 88         [ 4]  149     CALL DUPP
      00234E CD 23 6C         [ 4]  150     CALL INTQ
      002351 CD 04 98         [ 4]  151     CALL QBRAN 
      002354 23 5E                  152     .word 2$
      002356 CD 1C CC         [ 4]  153     call WR_WORD 
      002359 CD 04 B4         [ 4]  154     CALL BRAN 
      00235C 23 48                  155     .word 1$ 
      00235E CD 07 8D         [ 4]  156 2$: CALL DDROP 
      002361 CD 1C 24         [ 4]  157     CALL LOCK 
      002364 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    165 ;------------------------
      002365 23 38                  166     .word LINK 
                           002367   167     LINK=.
      002367 04                     168     .byte 4
      002368 5B 4E 5D 3F            169     .ascii "[N]?" 
      00236C                        170 INTQ:
      00236C CD 0E AF         [ 4]  171     CALL CR 
      00236F CD 04 6F         [ 4]  172     call DOLIT 
      002372 00 5B                  173     .word '[
      002374 CD 04 36         [ 4]  174     CALL EMIT 
      002377 CD 0F 56         [ 4]  175     CALL DOT 
      00237A CD 0E DC         [ 4]  176     CALL  DOTQP
      00237D 03                     177     .byte 3
      00237E 5D 3F 20               178     .ascii "]? " 
      002381 CD 12 E5         [ 4]  179     CALL QUERY 
      002384 CD 11 10         [ 4]  180     call TOKEN 
      002387 CC 24 15         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   4545 .endif
                           000001  4546 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                   4547         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                                     28 ; check for negative sign 
                                     29 ; ajust pointer and cntr 
      00238A                         30 nsign: ; a cntr -- a cntr f 
      00238A CD 0B 37         [ 4]   31     CALL ZERO 
      00238D CD 05 51         [ 4]   32     CALL TOR  ; R: sign 
      002390 CD 05 51         [ 4]   33     CALL TOR  ; R: sign cntr 
      002393 CD 05 88         [ 4]   34     CALL DUPP 
      002396 CD 05 01         [ 4]   35     CALL CAT 
      002399                         36     _DOLIT '-'
      002399 CD 04 6F         [ 4]    1     CALL DOLIT 
      00239C 00 2D                    2     .word '-' 
      00239E CD 08 4E         [ 4]   37     CALL EQUAL 
      0023A1                         38     _QBRAN nsign1 
      0023A1 CD 04 98         [ 4]    1     CALL QBRAN
      0023A4 23 BB                    2     .word nsign1
      0023A6 CD 0A CB         [ 4]   39     CALL ONEP ; a+ 
      0023A9 CD 05 34         [ 4]   40     CALL RFROM 
      0023AC CD 0A D8         [ 4]   41     CALL ONEM ; cntr-
      0023AF CD 05 34         [ 4]   42     CALL RFROM ; sign 
      0023B2 CD 07 C7         [ 4]   43     CALL INVER ; -1
      0023B5 CD 05 51         [ 4]   44     CALL TOR   ; R: sign 
      0023B8 CD 05 51         [ 4]   45     CALL TOR   ; R: cntr 
      0023BB                         46 nsign1:
      0023BB CD 05 34         [ 4]   47     CALL RFROM 
      0023BE CD 05 34         [ 4]   48     CALL RFROM 
      0023C1 81               [ 4]   49     RET 
                                     50 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                     51 
                                     52 ; get all digits in row 
                                     53 ; stop at first non-digit or end of string 
                                     54 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      0023C2                         55 parse_digits:
      0023C2                         56 1$:
      0023C2 CD 05 88         [ 4]   57     CALL DUPP 
      0023C5                         58     _QBRAN 5$ 
      0023C5 CD 04 98         [ 4]    1     CALL QBRAN
      0023C8 24 0A                    2     .word 5$
      0023CA CD 05 51         [ 4]   59     CALL TOR   ; dlo dhi a R: cntr 
      0023CD CD 0B FD         [ 4]   60     CALL COUNT ; dlo dhi a+ char 
      0023D0 CD 06 4E         [ 4]   61     CALL BASE 
      0023D3 CD 04 E3         [ 4]   62     CALL AT 
      0023D6 CD 0D F5         [ 4]   63     CALL DIGTQ 
      0023D9                         64     _QBRAN 4$ ; not a digit
      0023D9 CD 04 98         [ 4]    1     CALL QBRAN
      0023DC 24 01                    2     .word 4$
      0023DE CD 27 C2         [ 4]   65     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0023E1 CD 06 4E         [ 4]   66     CALL BASE 
      0023E4 CD 04 E3         [ 4]   67     CALL AT 
      0023E7 CD 25 FC         [ 4]   68     CALL DSSTAR
      0023EA CD 05 34         [ 4]   69     CALL RFROM 
      0023ED CD 0B 37         [ 4]   70     CALL ZERO 
      0023F0 CD 2A 89         [ 4]   71     CALL DPLUS 
      0023F3 CD 05 34         [ 4]   72     CALL RFROM  ; dlo dhi a+ 
      0023F6 CD 05 34         [ 4]   73     CALL RFROM ; dlo dhi a+ cntr 
      0023F9 CD 0A D8         [ 4]   74     CALL ONEM 
      0023FC                         75     _BRAN 1$ ; dlo dhi a+ R: 
      0023FC CD 04 B4         [ 4]    1     CALL BRAN 
      0023FF 23 C2                    2     .word 1$ 
      002401 CD 05 7E         [ 4]   76 4$: CALL DROP  ; dlo dhi a+ 
      002404 CD 0A D8         [ 4]   77     CALL ONEM  ; unget char 
      002407 CD 05 34         [ 4]   78     CALL RFROM ; dlo dhi a+ cntr-
      00240A                         79 5$:
      00240A 81               [ 4]   80     RET 
                                     81 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                     85 ;   convert string to integer 
                                     86 ;   double begin with '#' 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00240B                         88     _HEADER NUMBQ,7,"NUMBER?"
      00240B 23 67                    1         .word LINK 
                           00240D     2         LINK=.
      00240D 07                       3         .byte 7  
      00240E 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      002415                          5         NUMBQ:
                                     89 ; save current base value 
      002415 CD 06 4E         [ 4]   90     CALL BASE 
      002418 CD 04 E3         [ 4]   91     CALL AT 
      00241B CD 05 51         [ 4]   92     CALL TOR 
                                     93 ; initialize integer to 0     
      00241E 1D 00 04         [ 2]   94     SUBW X,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002421 90 5F            [ 1]   95     CLRW Y 
      002423 FF               [ 2]   96     LDW (X),Y 
      002424 EF 02            [ 2]   97     LDW (2,X),Y ; a 0 0 R: base  
      002426                         98     _DOLIT 2 
      002426 CD 04 6F         [ 4]    1     CALL DOLIT 
      002429 00 02                    2     .word 2 
      00242B CD 0B 90         [ 4]   99     CALL PICK  ; a 0 0 a R: base    
      00242E CD 0B FD         [ 4]  100     CALL COUNT ; a 0 0 a+ n 
                                    101 ; check for '#' double integer 
      002431 CD 05 B0         [ 4]  102     CALL OVER  ; a 0 0 a+ n a+
      002434 CD 05 01         [ 4]  103     CALL CAT   ; a 0 0 a+ n c 
      002437                        104     _DOLIT '#' ; a 0 0 a+ n c '#' 
      002437 CD 04 6F         [ 4]    1     CALL DOLIT 
      00243A 00 23                    2     .word '#' 
      00243C CD 08 4E         [ 4]  105     CALL EQUAL 
      00243F CD 05 51         [ 4]  106     CALL TOR   ; a 0 0 a+ n R: base d? 
      002442 CD 05 45         [ 4]  107     CALL RAT   ; a 0 0 a+ n d? R: base d?
      002445                        108     _QBRAN NUMQ0
      002445 CD 04 98         [ 4]    1     CALL QBRAN
      002448 24 56                    2     .word NUMQ0
                                    109 ; update a and count
      00244A CD 05 98         [ 4]  110     CALL SWAPP 
      00244D CD 0A CB         [ 4]  111     CALL ONEP 
      002450 CD 05 98         [ 4]  112     CALL SWAPP 
      002453 CD 0A D8         [ 4]  113     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    114 ; check for '$' hexadecimal  
      002456                        115 NUMQ0: 
      002456 CD 05 B0         [ 4]  116     CALL OVER   
      002459 CD 05 01         [ 4]  117     CALL CAT   
      00245C                        118     _DOLIT '$'
      00245C CD 04 6F         [ 4]    1     CALL DOLIT 
      00245F 00 24                    2     .word '$' 
      002461 CD 08 4E         [ 4]  119     CALL EQUAL ; a 0 0 a+ n- f  
      002464                        120     _QBRAN NUMQ1 
      002464 CD 04 98         [ 4]    1     CALL QBRAN
      002467 24 78                    2     .word NUMQ1
      002469 CD 0D CC         [ 4]  121     CALL HEX   ; switch to hexadecimal base 
                                    122 ; update a and count 
      00246C CD 05 98         [ 4]  123     CALL SWAPP 
      00246F CD 0A CB         [ 4]  124     CALL ONEP 
      002472 CD 05 98         [ 4]  125     CALL SWAPP
      002475 CD 0A D8         [ 4]  126     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    127 ; check for minus sign 
      002478                        128 NUMQ1: 
      002478 CD 23 8A         [ 4]  129     CALL nsign 
      00247B CD 05 51         [ 4]  130     CALL TOR ; R: base d? sign  
                                    131 ; check for end of string     
      00247E CD 07 3B         [ 4]  132     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      002481                        133     _QBRAN NUMQ4 ; yes , not a number 
      002481 CD 04 98         [ 4]    1     CALL QBRAN
      002484 24 C3                    2     .word NUMQ4
      002486 CD 23 C2         [ 4]  134     CALL parse_digits
      002489 CD 07 3B         [ 4]  135     CALL QDUP 
      00248C CD 05 D1         [ 4]  136     CALL ZEQUAL  
      00248F                        137     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00248F CD 04 98         [ 4]    1     CALL QBRAN
      002492 24 C3                    2     .word NUMQ4
      002494 CD 05 7E         [ 4]  138     CALL DROP  ; a dlo dhi 
      002497 CD 05 34         [ 4]  139     CALL RFROM  ; a dlo dhi sign 
      00249A                        140     _QBRAN NUMQ3
      00249A CD 04 98         [ 4]    1     CALL QBRAN
      00249D 24 A2                    2     .word NUMQ3
      00249F CD 07 EA         [ 4]  141     CALL DNEGA
      0024A2                        142 NUMQ3: 
      0024A2 CD 07 4C         [ 4]  143     CALL ROT ; dlo dhi a  R: base d?
      0024A5 CD 05 7E         [ 4]  144     CALL DROP
      0024A8                        145     _DOLIT -2  ; double return -2 flag 
      0024A8 CD 04 6F         [ 4]    1     CALL DOLIT 
      0024AB FF FE                    2     .word -2 
      0024AD CD 05 34         [ 4]  146     CALL RFROM ; dlo dhi d? R: base 
      0024B0                        147     _TBRAN NUMQ8 
      0024B0 CD 04 A6         [ 4]    1     CALL TBRAN 
      0024B3 24 CC                    2     .word NUMQ8 
      0024B5 CD 05 98         [ 4]  148     CALL SWAPP 
      0024B8 CD 05 7E         [ 4]  149     CALL DROP
      0024BB CD 0A CB         [ 4]  150     CALL ONEP   ; single return -1 flag   
      0024BE                        151     _BRAN NUMQ8
      0024BE CD 04 B4         [ 4]    1     CALL BRAN 
      0024C1 24 CC                    2     .word NUMQ8 
      0024C3                        152 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   153 .if WANT_FLOAT
      0024C3 CD 05 34         [ 4]  154     CALL RFROM ; sign 
      0024C6 CD 05 34         [ 4]  155     CALL RFROM ; d? 
      0024C9 CD 2E 6A         [ 4]  156     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   157 .else 
                                    158     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    159     ADDW SP,#4 ; drop d? sign  R: base 
                                    160     CLRW Y 
                                    161     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    162 .endif 
                                    163 ; restore original base value     
      0024CC                        164 NUMQ8: 
      0024CC CD 05 34         [ 4]  165     CALL RFROM 
      0024CF CD 06 4E         [ 4]  166     CALL BASE 
      0024D2 CD 04 D1         [ 4]  167     CALL STORE 
      0024D5 81               [ 4]  168     RET 
                                    169 
                                    170 
                                    171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    172 ;    D0= ( d -- 0|-1 )
                                    173 ;    check if double is 0 
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024D6                        175     _HEADER DZEQUAL,3,"D0="
      0024D6 24 0D                    1         .word LINK 
                           0024D8     2         LINK=.
      0024D8 03                       3         .byte 3  
      0024D9 44 30 3D                 4         .ascii "D0="
      0024DC                          5         DZEQUAL:
      0024DC CD 05 F9         [ 4]  176     CALL ORR 
      0024DF A6 FF            [ 1]  177     LD A,#0xFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0024E1 90 93            [ 1]  178     LDW Y,X
      0024E3 90 FE            [ 2]  179     LDW Y,(Y)
      0024E5 90 A3 00 00      [ 2]  180     CPW Y,#0 
      0024E9 27 01            [ 1]  181     JREQ  ZEQ1
      0024EB 4F               [ 1]  182     CLR A   ;false
      0024EC                        183 ZEQ1:
      0024EC F7               [ 1]  184     LD     (X),A
      0024ED E7 01            [ 1]  185     LD (1,X),A
      0024EF 81               [ 4]  186 	RET     
                                    187     
                                    188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    189 ;  2NEGATE ( d -- d )
                                    190 ;  negate double (2's complement)
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024F0                        192     _HEADER DNEGAT,7,"2NEGATE"
      0024F0 24 D8                    1         .word LINK 
                           0024F2     2         LINK=.
      0024F2 07                       3         .byte 7  
      0024F3 32 4E 45 47 41 54 45     4         .ascii "2NEGATE"
      0024FA                          5         DNEGAT:
      0024FA CD 07 C7         [ 4]  193     CALL INVER
      0024FD CD 05 98         [ 4]  194     CALL SWAPP 
      002500 CD 07 C7         [ 4]  195     CALL INVER 
      002503 90 93            [ 1]  196     LDW  Y,X 
      002505 90 FE            [ 2]  197     LDW Y,(Y)
      002507 72 A9 00 01      [ 2]  198     ADDW Y,#1 
      00250B FF               [ 2]  199     LDW (X),Y 
      00250C 24 0B            [ 1]  200     JRNC DNEG1 
      00250E 90 93            [ 1]  201     LDW Y,X 
      002510 90 EE 02         [ 2]  202     LDW Y,(2,Y)
      002513 72 A9 00 01      [ 2]  203     ADDW Y,#1
      002517 EF 02            [ 2]  204     LDW (2,X),Y 
      002519                        205 DNEG1:
      002519 CD 05 98         [ 4]  206     CALL SWAPP 
      00251C 81               [ 4]  207     RET      
                                    208 
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;   DABS ( d -- d )
                                    211 ;   absolute value of double
                                    212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00251D                        213     _HEADER DABS,4,"DABS"
      00251D 24 F2                    1         .word LINK 
                           00251F     2         LINK=.
      00251F 04                       3         .byte 4  
      002520 44 41 42 53              4         .ascii "DABS"
      002524                          5         DABS:
      002524 CD 05 88         [ 4]  214     CALL DUPP 
      002527 CD 05 BF         [ 4]  215     CALL ZLESS 
      00252A                        216     _QBRAN DABS1 
      00252A CD 04 98         [ 4]    1     CALL QBRAN
      00252D 25 32                    2     .word DABS1
      00252F CD 07 EA         [ 4]  217     CALL DNEGA 
      002532                        218 DABS1:
      002532 81               [ 4]  219     RET 
                                    220 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;  DSIGN ( d -- d f )
                                    223 ;  sign of double 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002533                        225     _HEADER DSIGN,5,"DSIGN"
      002533 25 1F                    1         .word LINK 
                           002535     2         LINK=.
      002535 05                       3         .byte 5  
      002536 44 53 49 47 4E           4         .ascii "DSIGN"
      00253B                          5         DSIGN:
      00253B A6 00            [ 1]  226     LD A,#0 
      00253D 90 93            [ 1]  227     LDW Y,X 
      00253F 90 FE            [ 2]  228     LDW Y,(Y)
      002541 2A 02            [ 1]  229     JRPL DSIGN1
      002543 A6 FF            [ 1]  230     LD A,#0XFF 
      002545                        231 DSIGN1:
      002545 1D 00 02         [ 2]  232     SUBW X,#2 
      002548 F7               [ 1]  233     LD (X),A 
      002549 E7 01            [ 1]  234     LD (1,X),A 
      00254B 81               [ 4]  235     RET 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;   D/MOD ( d s - r qd )
                                    239 ;   unsigned divide double by single 
                                    240 ;   return double quotient 
                                    241 ;   and single remainder 
                                    242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00254C                        243     _HEADER DSLMOD,5,"D/MOD"
      00254C 25 35                    1         .word LINK 
                           00254E     2         LINK=.
      00254E 05                       3         .byte 5  
      00254F 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002554                          5         DSLMOD:
      002554 90 93            [ 1]  244         LDW     Y,X             ; stack pointer to Y
      002556 FE               [ 2]  245         LDW     X,(X)           ; un
      002557 BF 26            [ 2]  246         LDW     YTEMP,X         ; save un
      002559 93               [ 1]  247         LDW     X,Y
      00255A 89               [ 2]  248         PUSHW   X               ; save stack pointer
      00255B 90 89            [ 2]  249         PUSHW   Y 
      00255D EE 02            [ 2]  250         LDW     X,(2,X)           ; X=udh
      00255F 90 BE 26         [ 2]  251         LDW     Y,YTEMP         ; divisor 
      002562 65               [ 2]  252         DIVW    X,Y 
      002563 BF 24            [ 2]  253         LDW     XTEMP,X         ; QUOTIENT hi 
      002565 93               [ 1]  254         LDW     X,Y             ; remainder in X 
      002566 90 85            [ 2]  255         POPW    Y 
      002568 90 EE 04         [ 2]  256         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      00256B A6 10            [ 1]  257         LD      A,#16           ; loop count
      00256D 90 58            [ 2]  258         SLLW    Y               ; udl shift udl into udh
      00256F                        259 DSLMOD3:
      00256F 59               [ 2]  260         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      002570 25 04            [ 1]  261         JRC     DSLMODa         ; if carry out of rotate
      002572 B3 26            [ 2]  262         CPW     X,YTEMP         ; compare udh to un
      002574 25 05            [ 1]  263         JRULT   DSLMOD4         ; can't subtract
      002576                        264 DSLMODa:
      002576 72 B0 00 26      [ 2]  265         SUBW    X,YTEMP         ; can subtract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00257A 98               [ 1]  266         RCF
      00257B                        267 DSLMOD4:
      00257B 8C               [ 1]  268         CCF                     ; quotient bit
      00257C 90 59            [ 2]  269         RLCW    Y               ; rotate into quotient, rotate out udl
      00257E 4A               [ 1]  270         DEC     A               ; repeat
      00257F 26 EE            [ 1]  271         JRNE    DSLMOD3           ; if A == 0
      002581                        272 DSLMODb:
      002581 BF 26            [ 2]  273         LDW     YTEMP,X         ; done, save remainder
      002583 85               [ 2]  274         POPW    X               ; restore stack pointer
      002584 EF 02            [ 2]  275         LDW     (2,X),Y           ; save quotient low 
      002586 90 BE 24         [ 2]  276         LDW     Y,XTEMP         ; quotient hi 
      002589 FF               [ 2]  277         LDW     (X),Y           ; save quotient hi 
      00258A 90 BE 26         [ 2]  278         LDW     Y,YTEMP         ; remainder onto stack
      00258D EF 04            [ 2]  279         LDW     (4,X),Y
      00258F 81               [ 4]  280         RET 
                                    281 
                                    282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    283 ;   D# ( d -- d )
                                    284 ;   extract least digit 
                                    285 ;   from double integer 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002590                        287     _HEADER DDIG,2,"D#"
      002590 25 4E                    1         .word LINK 
                           002592     2         LINK=.
      002592 02                       3         .byte 2  
      002593 44 23                    4         .ascii "D#"
      002595                          5         DDIG:
      002595 CD 06 4E         [ 4]  288     CALL BASE 
      002598 CD 04 E3         [ 4]  289     CALL AT 
      00259B CD 25 54         [ 4]  290     CALL DSLMOD
      00259E CD 07 4C         [ 4]  291     CALL ROT   
      0025A1 CD 0C F5         [ 4]  292     CALL DIGIT 
      0025A4 CD 0D 41         [ 4]  293     CALL HOLD 
      0025A7 81               [ 4]  294     RET 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;    D#S ( d -- s )
                                    298 ;   extract digit from double 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025A8                        300     _HEADER DDIGS,3,"D#S"
      0025A8 25 92                    1         .word LINK 
                           0025AA     2         LINK=.
      0025AA 03                       3         .byte 3  
      0025AB 44 23 53                 4         .ascii "D#S"
      0025AE                          5         DDIGS:
      0025AE CD 25 95         [ 4]  301     CALL    DDIG 
      0025B1 CD 07 98         [ 4]  302     CALL    DDUP 
      0025B4 CD 24 DC         [ 4]  303     CALL    DZEQUAL
      0025B7                        304     _QBRAN  DDIGS 
      0025B7 CD 04 98         [ 4]    1     CALL QBRAN
      0025BA 25 AE                    2     .word DDIGS
      0025BC CD 05 7E         [ 4]  305     CALL    DROP 
      0025BF 81               [ 4]  306     RET 
                                    307 
                                    308 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;   D. ( d -- )
                                    311 ;   display double integer 
                                    312 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025C0                        313     _HEADER DDOT,2,"D."
      0025C0 25 AA                    1         .word LINK 
                           0025C2     2         LINK=.
      0025C2 02                       3         .byte 2  
      0025C3 44 2E                    4         .ascii "D."
      0025C5                          5         DDOT:
      0025C5 CD 0E 6D         [ 4]  314     CALL SPACE 
      0025C8 CD 25 3B         [ 4]  315     CALL DSIGN 
      0025CB CD 05 51         [ 4]  316     CALL TOR
      0025CE CD 05 45         [ 4]  317     CALL RAT 
      0025D1                        318     _QBRAN DDOT0
      0025D1 CD 04 98         [ 4]    1     CALL QBRAN
      0025D4 25 D9                    2     .word DDOT0
      0025D6 CD 07 EA         [ 4]  319     CALL DNEGA 
      0025D9                        320 DDOT0:     
      0025D9 CD 0D 31         [ 4]  321     CALL BDIGS 
      0025DC CD 25 AE         [ 4]  322     CALL DDIGS 
      0025DF CD 05 34         [ 4]  323     CALL RFROM 
      0025E2                        324     _QBRAN DDOT1 
      0025E2 CD 04 98         [ 4]    1     CALL QBRAN
      0025E5 25 EF                    2     .word DDOT1
      0025E7                        325     _DOLIT '-' 
      0025E7 CD 04 6F         [ 4]    1     CALL DOLIT 
      0025EA 00 2D                    2     .word '-' 
      0025EC CD 0D 41         [ 4]  326     CALL HOLD 
      0025EF                        327 DDOT1: 
      0025EF CD 0D 96         [ 4]  328     CALL EDIGS 
      0025F2 CD 0E 97         [ 4]  329     CALL TYPES     
      0025F5 81               [ 4]  330     RET 
                                    331 
                                    332 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    334 ; multiply double by single 
                                    335 ; return double 
                                    336 ;  ( d s -- d )
                                    337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025F6                        338     _HEADER DSSTAR,3,"DS*"
      0025F6 25 C2                    1         .word LINK 
                           0025F8     2         LINK=.
      0025F8 03                       3         .byte 3  
      0025F9 44 53 2A                 4         .ascii "DS*"
      0025FC                          5         DSSTAR:
                                    339 ;DSSTAR:
      0025FC CD 05 51         [ 4]  340     CALL TOR
      0025FF CD 05 88         [ 4]  341     CALL DUPP 
      002602 CD 05 BF         [ 4]  342     CALL ZLESS
      002605 CD 05 88         [ 4]  343     CALL DUPP 
      002608 CD 05 51         [ 4]  344     CALL TOR 
      00260B                        345     _QBRAN DSSTAR1 
      00260B CD 04 98         [ 4]    1     CALL QBRAN
      00260E 26 13                    2     .word DSSTAR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002610 CD 07 EA         [ 4]  346     CALL DNEGA 
      002613                        347 DSSTAR1:
      002613 CD 05 34         [ 4]  348     CALL RFROM 
      002616 CD 07 6B         [ 4]  349     CALL NROT       
      002619 CD 05 98         [ 4]  350     CALL SWAPP 
      00261C CD 05 45         [ 4]  351     CALL RAT 
      00261F CD 0A 00         [ 4]  352     CALL UMSTA
      002622 CD 07 4C         [ 4]  353     CALL ROT 
      002625 CD 05 34         [ 4]  354     CALL RFROM 
      002628 CD 0A 00         [ 4]  355     CALL UMSTA 
      00262B CD 05 7E         [ 4]  356     CALL DROP ; DROP OVERFLOW 
      00262E CD 07 AD         [ 4]  357     CALL PLUS 
      002631 CD 07 4C         [ 4]  358     CALL ROT 
      002634                        359     _QBRAN DSSTAR3 
      002634 CD 04 98         [ 4]    1     CALL QBRAN
      002637 26 3C                    2     .word DSSTAR3
      002639 CD 07 EA         [ 4]  360     CALL DNEGA 
      00263C                        361 DSSTAR3:
      00263C 81               [ 4]  362     RET 
                                    363 
                                    364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    365 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    366 ;  swap double 
                                    367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00263D                        368     _HEADER DSWAP,5,"2SWAP"
      00263D 25 F8                    1         .word LINK 
                           00263F     2         LINK=.
      00263F 05                       3         .byte 5  
      002640 32 53 57 41 50           4         .ascii "2SWAP"
      002645                          5         DSWAP:
      002645 90 93            [ 1]  369     LDW Y,X 
      002647 90 FE            [ 2]  370     LDW Y,(Y)
      002649 90 BF 26         [ 2]  371     LDW YTEMP,Y ; d2 hi 
      00264C 90 93            [ 1]  372     LDW Y,X 
      00264E 90 EE 02         [ 2]  373     LDW Y,(2,Y)
      002651 90 BF 24         [ 2]  374     LDW XTEMP,Y  ; d2 lo 
      002654 90 93            [ 1]  375     LDW Y,X 
      002656 90 EE 04         [ 2]  376     LDW Y,(4,Y)  ; d1 hi 
      002659 FF               [ 2]  377     LDW (X),Y 
      00265A 90 93            [ 1]  378     LDW Y,X
      00265C 90 EE 06         [ 2]  379     LDW Y,(6,Y)  ; d1 lo 
      00265F EF 02            [ 2]  380     LDW (2,X),Y
      002661 90 BE 26         [ 2]  381     LDW Y,YTEMP  
      002664 EF 04            [ 2]  382     LDW (4,X),Y 
      002666 90 BE 24         [ 2]  383     LDW Y,XTEMP 
      002669 EF 06            [ 2]  384     LDW (6,X),Y 
      00266B 81               [ 4]  385     RET 
                                    386 
                                    387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    388 ;    DCLZ ( d -- u )
                                    389 ;    double count leading zeros
                                    390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00266C                        391     _HEADER DCLZ,4,"DCLZ"
      00266C 26 3F                    1         .word LINK 
                           00266E     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00266E 04                       3         .byte 4  
      00266F 44 43 4C 5A              4         .ascii "DCLZ"
      002673                          5         DCLZ:
      002673 4F               [ 1]  392     CLR A 
      002674 90 93            [ 1]  393     LDW Y,X 
      002676 90 FE            [ 2]  394     LDW Y,(Y)
      002678 2B 18            [ 1]  395     JRMI DCLZ8 ; no leading zero 
      00267A 27 09            [ 1]  396     JREQ DCLZ4 ; >=16 
      00267C                        397 DCLZ1: ; <16
      00267C 90 58            [ 2]  398     SLLW Y
      00267E 4C               [ 1]  399     INC A 
      00267F 90 5D            [ 2]  400     TNZW Y 
      002681 2B 0F            [ 1]  401     JRMI DCLZ8
      002683 20 F7            [ 2]  402     JRA DCLZ1 
      002685                        403 DCLZ4:
      002685 A6 10            [ 1]  404     LD A,#16 
      002687 90 93            [ 1]  405     LDW Y,X 
      002689 90 EE 02         [ 2]  406     LDW Y,(2,Y)
      00268C 2B 04            [ 1]  407     JRMI DCLZ8 
      00268E 26 EC            [ 1]  408     JRNE DCLZ1 
      002690 AB 10            [ 1]  409     ADD A,#16
      002692                        410 DCLZ8: 
      002692 1C 00 02         [ 2]  411     ADDW X,#2 
      002695 90 5F            [ 1]  412     CLRW Y 
      002697 90 97            [ 1]  413     LD YL,A 
      002699 FF               [ 2]  414     LDW (X),Y 
      00269A 81               [ 4]  415     RET 
                                    416 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    418 ;   2<ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    419 ;   rotate left doubles 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00269B                        421     _HEADER NDROT,5,"2<ROT"
      00269B 26 6E                    1         .word LINK 
                           00269D     2         LINK=.
      00269D 05                       3         .byte 5  
      00269E 32 3C 52 4F 54           4         .ascii "2<ROT"
      0026A3                          5         NDROT:
                                    422 ; save d3 in temp 
      0026A3 90 93            [ 1]  423     LDW Y,X 
      0026A5 90 FE            [ 2]  424     LDW Y,(Y)
      0026A7 90 BF 26         [ 2]  425     LDW YTEMP,Y  ; d3 hi 
      0026AA 90 93            [ 1]  426     LDW Y,X 
      0026AC 90 EE 02         [ 2]  427     LDW Y,(2,Y)
      0026AF 90 BF 24         [ 2]  428     LDW XTEMP,Y  ; d3 lo 
                                    429 ; put d2 in d1 slot 
      0026B2 90 93            [ 1]  430     LDW Y,X 
      0026B4 90 EE 04         [ 2]  431     LDW Y,(4,Y) 
      0026B7 FF               [ 2]  432     LDW (X),Y   ; d2 hi 
      0026B8 90 93            [ 1]  433     LDW Y,X 
      0026BA 90 EE 06         [ 2]  434     LDW Y,(6,Y)
      0026BD EF 02            [ 2]  435     LDW (2,X),Y ; d2 lo
                                    436 ; put d1 in d2 slot 
      0026BF 90 93            [ 1]  437     LDW Y,X 
      0026C1 90 EE 08         [ 2]  438     LDW Y,(8,Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0026C4 EF 04            [ 2]  439     LDW (4,X),Y ; d1 hi 
      0026C6 90 93            [ 1]  440     LDW Y,X 
      0026C8 90 EE 0A         [ 2]  441     LDW Y,(10,Y)
      0026CB EF 06            [ 2]  442     LDW (6,X),Y  ; d1 lo 
                                    443 ; put d3 in d1 slot 
      0026CD 90 BE 26         [ 2]  444     LDW Y,YTEMP 
      0026D0 EF 08            [ 2]  445     LDW (8,X),Y  ; d3 hi 
      0026D2 90 BE 24         [ 2]  446     LDW Y,XTEMP 
      0026D5 EF 0A            [ 2]  447     LDW (10,X),Y  ; d3 lo 
      0026D7 81               [ 4]  448     RET 
                                    449 
                                    450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    451 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    452 ;   rotate right doubles 
                                    453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D8                        454     _HEADER DROT,4,"2ROT"
      0026D8 26 9D                    1         .word LINK 
                           0026DA     2         LINK=.
      0026DA 04                       3         .byte 4  
      0026DB 32 52 4F 54              4         .ascii "2ROT"
      0026DF                          5         DROT:
                                    455 ; save d3 in temp 
      0026DF 90 93            [ 1]  456     LDW Y,X 
      0026E1 90 FE            [ 2]  457     LDW Y,(Y)
      0026E3 90 BF 26         [ 2]  458     LDW YTEMP,Y ; d3 hi 
      0026E6 90 93            [ 1]  459     LDW Y,X 
      0026E8 90 EE 02         [ 2]  460     LDW Y,(2,Y)
      0026EB 90 BF 24         [ 2]  461     LDW XTEMP,Y ; d3 lo 
                                    462 ; put d1 in d3 slot 
      0026EE 90 93            [ 1]  463     LDW Y,X 
      0026F0 90 EE 08         [ 2]  464     LDW Y,(8,Y)
      0026F3 FF               [ 2]  465     LDW (X),Y  ; d1 hi 
      0026F4 90 93            [ 1]  466     LDW Y,X 
      0026F6 90 EE 0A         [ 2]  467     LDW Y,(10,Y) 
      0026F9 EF 02            [ 2]  468     LDW (2,X),Y ; d1 lo 
                                    469 ; put d2 in d1 slot 
      0026FB 90 93            [ 1]  470     LDW Y,X 
      0026FD 90 EE 04         [ 2]  471     LDW Y,(4,Y) ; d2 hi 
      002700 EF 08            [ 2]  472     LDW (8,X),Y 
      002702 90 93            [ 1]  473     LDW Y,X 
      002704 90 EE 06         [ 2]  474     LDW Y,(6,Y) ; d2 lo 
      002707 EF 0A            [ 2]  475     LDW (10,X),Y 
                                    476 ; put d3 in d2 slot 
      002709 90 BE 26         [ 2]  477     LDW Y,YTEMP 
      00270C EF 04            [ 2]  478     LDW (4,X),Y 
      00270E 90 BE 24         [ 2]  479     LDW Y,XTEMP 
      002711 EF 06            [ 2]  480     LDW (6,X),Y 
      002713 81               [ 4]  481     RET 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;   D= ( d1 d2 -- f )
                                    485 ;   d1==d2?
                                    486 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002714                        487     _HEADER DEQUAL,2,"D="
      002714 26 DA                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                           002716     2         LINK=.
      002716 02                       3         .byte 2  
      002717 44 3D                    4         .ascii "D="
      002719                          5         DEQUAL:
      002719 A6 00            [ 1]  488     LD A,#0 
      00271B 90 93            [ 1]  489     LDW Y,X 
      00271D 90 FE            [ 2]  490     LDW Y,(Y)
      00271F E3 04            [ 2]  491     CPW Y,(4,X)
      002721 26 0B            [ 1]  492     JRNE DEQU4 
      002723 90 93            [ 1]  493     LDW Y,X 
      002725 90 EE 02         [ 2]  494     LDW Y,(2,Y)
      002728 E3 06            [ 2]  495     CPW Y,(6,X)
      00272A 26 02            [ 1]  496     JRNE DEQU4 
      00272C A6 FF            [ 1]  497     LD A,#0XFF
      00272E                        498 DEQU4:
      00272E 1C 00 06         [ 2]  499     ADDW X,#6
      002731 F7               [ 1]  500     LD (X),A 
      002732 E7 01            [ 1]  501     LD (1,X),A 
      002734 81               [ 4]  502     RET 
                                    503 
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;   D> ( d1 d2 -- f )
                                    506 ;   d1>d2?
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002735                        508     _HEADER DGREAT,2,"D>"
      002735 27 16                    1         .word LINK 
                           002737     2         LINK=.
      002737 02                       3         .byte 2  
      002738 44 3E                    4         .ascii "D>"
      00273A                          5         DGREAT:
      00273A A6 FF            [ 1]  509     LD A,#0XFF 
      00273C 90 93            [ 1]  510     LDW Y,X 
      00273E 90 EE 04         [ 2]  511     LDW Y,(4,Y)  ; d1 hi 
      002741 F3               [ 2]  512     CPW Y,(X)    ; d2 hi 
      002742 2C 0B            [ 1]  513     JRSGT DGREAT4 
      002744 90 93            [ 1]  514     LDW Y,X 
      002746 90 EE 06         [ 2]  515     LDW Y,(6,Y)
      002749 E3 02            [ 2]  516     CPW Y,(2,X)
      00274B 22 02            [ 1]  517     JRUGT DGREAT4 
      00274D A6 00            [ 1]  518     LD A,#0
      00274F                        519 DGREAT4:
      00274F 1C 00 06         [ 2]  520     ADDW X,#6
      002752 F7               [ 1]  521     LD (X),A 
      002753 E7 01            [ 1]  522     LD (1,X),A 
      002755 81               [ 4]  523     RET
                                    524 
                                    525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    526 ;   D< ( d1 d2 -- f )
                                    527 ;   d1<d2? 
                                    528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002756                        529     _HEADER DLESS,2,"D<"
      002756 27 37                    1         .word LINK 
                           002758     2         LINK=.
      002758 02                       3         .byte 2  
      002759 44 3C                    4         .ascii "D<"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00275B                          5         DLESS:
      00275B CD 2A BB         [ 4]  530     CALL DSUB
      00275E                        531     _DOLIT 0 
      00275E CD 04 6F         [ 4]    1     CALL DOLIT 
      002761 00 00                    2     .word 0 
      002763 CD 07 6B         [ 4]  532     CALL NROT  
      002766 CD 27 78         [ 4]  533     CALL DZLESS 
      002769                        534     _QBRAN DLESS4
      002769 CD 04 98         [ 4]    1     CALL QBRAN
      00276C 27 71                    2     .word DLESS4
      00276E CD 07 C7         [ 4]  535     CALL INVER  
      002771                        536 DLESS4:
      002771 81               [ 4]  537     RET
                                    538 
                                    539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    540 ;  D0< ( d -- f )
                                    541 ;  d<0? 
                                    542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002772                        543     _HEADER DZLESS,3,"D0<"
      002772 27 58                    1         .word LINK 
                           002774     2         LINK=.
      002774 03                       3         .byte 3  
      002775 44 30 3C                 4         .ascii "D0<"
      002778                          5         DZLESS:
      002778 A6 00            [ 1]  544     LD A,#0 
      00277A 90 93            [ 1]  545     LDW Y,X 
      00277C 90 FE            [ 2]  546     LDW Y,(Y)
      00277E 2A 02            [ 1]  547     JRPL DZLESS1 
      002780 A6 FF            [ 1]  548     LD A,#0XFF 
      002782                        549 DZLESS1:
      002782 1C 00 02         [ 2]  550     ADDW X,#2 
      002785 F7               [ 1]  551     LD (X),A 
      002786 E7 01            [ 1]  552     LD (1,X),A    
      002788 81               [ 4]  553     RET 
                                    554 
                                    555 
                                    556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    557 ;  DCMP ( d1 d2 -- d1 d2 -1|0|1 )
                                    558 ; compare 2 doubles 
                                    559 ; keep the doubles 
                                    560 ; return flag: 
                                    561 ;    -1 if d1<d2 
                                    562 ;     0 if d1==d2
                                    563 ;     1 if d1>d2 
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002789                        565     _HEADER DCMP,4,"DCMP"
      002789 27 74                    1         .word LINK 
                           00278B     2         LINK=.
      00278B 04                       3         .byte 4  
      00278C 44 43 4D 50              4         .ascii "DCMP"
      002790                          5         DCMP:
      002790 90 93            [ 1]  566     LDW Y,X 
      002792 90 EE 04         [ 2]  567     LDW Y,(4,Y)
      002795 F3               [ 2]  568     CPW Y,(X) 
      002796 27 04            [ 1]  569     JREQ DCMP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002798 2F 13            [ 1]  570     JRSLT DCMP_SMALL 
      00279A 20 17            [ 2]  571     JRA  DCMP_GREAT 
      00279C                        572 DCMP2:    
      00279C 90 93            [ 1]  573     LDW Y,X 
      00279E 90 EE 06         [ 2]  574     LDW Y,(6,Y)
      0027A1 E3 02            [ 2]  575     CPW Y,(2,X)
      0027A3 27 04            [ 1]  576     JREQ DCMP_EQUAL  
      0027A5 25 06            [ 1]  577     JRULT DCMP_SMALL 
      0027A7 20 0A            [ 2]  578     JRA DCMP_GREAT
      0027A9                        579 DCMP_EQUAL:
      0027A9 90 5F            [ 1]  580     CLRW Y 
      0027AB 20 0A            [ 2]  581     JRA DCMP4 
      0027AD                        582 DCMP_SMALL:
      0027AD 90 AE FF FF      [ 2]  583     LDW Y,#-1 
      0027B1 20 04            [ 2]  584     JRA DCMP4 
      0027B3                        585 DCMP_GREAT:
      0027B3 90 AE 00 01      [ 2]  586     LDW Y,#1
      0027B7                        587 DCMP4:
      0027B7 1D 00 02         [ 2]  588     SUBW X,#2 
      0027BA FF               [ 2]  589     LDW (X),Y 
      0027BB 81               [ 4]  590     RET
                                    591 
                                    592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    593 ;   2>R ( d -- R: d )
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027BC                        595     _HEADER DTOR,3,"2>R"
      0027BC 27 8B                    1         .word LINK 
                           0027BE     2         LINK=.
      0027BE 03                       3         .byte 3  
      0027BF 32 3E 52                 4         .ascii "2>R"
      0027C2                          5         DTOR:
      0027C2 90 85            [ 2]  596     POPW Y 
      0027C4 90 BF 26         [ 2]  597     LDW YTEMP,Y 
      0027C7 90 93            [ 1]  598     LDW Y,X 
      0027C9 90 EE 02         [ 2]  599     LDW Y,(2,Y)
      0027CC 90 89            [ 2]  600     PUSHW Y   ; d low 
      0027CE 90 93            [ 1]  601     LDW Y,X 
      0027D0 90 FE            [ 2]  602     LDW Y,(Y)
      0027D2 90 89            [ 2]  603     PUSHW Y   ; d hi 
      0027D4 1C 00 04         [ 2]  604     ADDW X,#4  
      0027D7 92 CC 26         [ 5]  605     JP [YTEMP]
                                    606 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    608 ;  2R> ( -- d ) R: d --      
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027DA                        610     _HEADER DRFROM,3,"2R>"
      0027DA 27 BE                    1         .word LINK 
                           0027DC     2         LINK=.
      0027DC 03                       3         .byte 3  
      0027DD 32 52 3E                 4         .ascii "2R>"
      0027E0                          5         DRFROM:
      0027E0 90 85            [ 2]  611     POPW Y      ; d hi 
      0027E2 90 BF 26         [ 2]  612     LDW YTEMP,Y 
      0027E5 1D 00 04         [ 2]  613     SUBW X,#4
      0027E8 90 85            [ 2]  614     POPW Y       ; d hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0027EA FF               [ 2]  615     LDW (X),Y 
      0027EB 90 85            [ 2]  616     POPW Y       ; d low  
      0027ED EF 02            [ 2]  617     LDW (2,X),Y 
      0027EF 92 CC 26         [ 5]  618     JP [YTEMP]
                                    619     
                                    620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    621 ;   2R@ ( -- d )
                                    622 ;   fecth a double from RSTACK
                                    623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F2                        624     _HEADER DRAT,3,"2R@"
      0027F2 27 DC                    1         .word LINK 
                           0027F4     2         LINK=.
      0027F4 03                       3         .byte 3  
      0027F5 32 52 40                 4         .ascii "2R@"
      0027F8                          5         DRAT:
      0027F8 90 85            [ 2]  625     POPW Y 
      0027FA 90 BF 26         [ 2]  626     LDW YTEMP,Y 
      0027FD 1D 00 04         [ 2]  627     SUBW X,#4 
      002800 16 01            [ 2]  628     LDW Y,(1,SP)
      002802 FF               [ 2]  629     LDW (X),Y 
      002803 16 03            [ 2]  630     LDW Y,(3,SP)
      002805 EF 02            [ 2]  631     LDW (2,X),Y 
      002807 92 CC 26         [ 5]  632     JP [YTEMP]
                                    633 
                                    634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    635 ;  2VARIABLE <name> 
                                    636 ;  create a double variable 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00280A                        638     _HEADER DVARIA,9,"2VARIABLE"
      00280A 27 F4                    1         .word LINK 
                           00280C     2         LINK=.
      00280C 09                       3         .byte 9  
      00280D 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002816                          5         DVARIA:
      002816 CD 0C 14         [ 4]  639         CALL HERE
      002819 CD 05 88         [ 4]  640         CALL DUPP
      00281C                        641         _DOLIT 4  
      00281C CD 04 6F         [ 4]    1     CALL DOLIT 
      00281F 00 04                    2     .word 4 
      002821 CD 07 AD         [ 4]  642         CALL PLUS 
      002824 CD 06 DF         [ 4]  643         CALL VPP 
      002827 CD 04 D1         [ 4]  644         CALL STORE
      00282A CD 17 E4         [ 4]  645         CALL CREAT
      00282D CD 05 88         [ 4]  646         CALL DUPP
      002830 CD 14 56         [ 4]  647         CALL COMMA
      002833 CD 0B 37         [ 4]  648         CALL ZERO
      002836 CD 05 B0         [ 4]  649         CALL OVER 
      002839 CD 04 D1         [ 4]  650         CALL STORE 
      00283C CD 0B 37         [ 4]  651         CALL ZERO 
      00283F CD 05 98         [ 4]  652         CALL SWAPP 
      002842 CD 04 D1         [ 4]  653         CALL STORE
      002845 CD 20 EA         [ 4]  654         CALL FMOVE ; move definition to FLASH
      002848 CD 07 3B         [ 4]  655         CALL QDUP 
      00284B CD 04 98         [ 4]  656         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      00284E 18 31                  657         .word SET_RAMLAST   
      002850 CD 1B 92         [ 4]  658         call UPDATVP  ; don't update if variable kept in RAM.
      002853 CD 21 7E         [ 4]  659         CALL UPDATPTR
      002856 81               [ 4]  660         RET         
                                    661 
                                    662 
                                    663 
                                    664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    665 ;  2LITERAL ( d -- )
                                    666 ;  compile double literal 
                                    667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002857                        668     _HEADER DLITER,IMEDD+8,"2LITERAL"
      002857 28 0C                    1         .word LINK 
                           002859     2         LINK=.
      002859 88                       3         .byte IMEDD+8  
      00285A 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      002862                          5         DLITER:
      002862 CD 14 9B         [ 4]  669     CALL COMPI 
      002865 28 6D                  670     .word do2lit 
      002867 CD 14 56         [ 4]  671     CALL COMMA 
      00286A CC 14 56         [ 2]  672     JP   COMMA 
                                    673 
                                    674 
                                    675 ; runtime for 2LITERAL 
      00286D                        676 do2lit:
      00286D 1D 00 04         [ 2]  677     SUBW X,#4 
      002870 16 01            [ 2]  678     LDW Y,(1,SP)
      002872 90 FE            [ 2]  679     LDW Y,(Y)
      002874 FF               [ 2]  680     LDW (X),Y 
      002875 16 01            [ 2]  681     LDW Y,(1,SP)
      002877 90 EE 02         [ 2]  682     LDW Y,(2,Y)
      00287A EF 02            [ 2]  683     LDW (2,X),Y 
      00287C 90 85            [ 2]  684     POPW Y 
      00287E 90 EC 04         [ 2]  685     JP (4,Y)
                                    686 
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002881                        691     _HEADER DOVER,5,"2OVER"
      002881 28 59                    1         .word LINK 
                           002883     2         LINK=.
      002883 05                       3         .byte 5  
      002884 32 4F 56 45 52           4         .ascii "2OVER"
      002889                          5         DOVER:
      002889 90 93            [ 1]  692     LDW Y,X 
      00288B 1D 00 04         [ 2]  693     SUBW X,#4 
      00288E 90 89            [ 2]  694     PUSHW Y 
      002890 90 EE 04         [ 2]  695     LDW Y,(4,Y)  ; d1 hi 
      002893 FF               [ 2]  696     LDW (X),Y 
      002894 90 85            [ 2]  697     POPW Y 
      002896 90 EE 06         [ 2]  698     LDW Y,(6,Y)  ;d1 lo 
      002899 EF 02            [ 2]  699     LDW (2,X),Y 
      00289B 81               [ 4]  700     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                    701 
                                    702 
                                    703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    704 ;   D2/ ( d -- d/2 )
                                    705 ;   divide double by 2 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00289C                        707     _HEADER D2SLASH,3,"D2/"
      00289C 28 83                    1         .word LINK 
                           00289E     2         LINK=.
      00289E 03                       3         .byte 3  
      00289F 44 32 2F                 4         .ascii "D2/"
      0028A2                          5         D2SLASH:
      0028A2 90 93            [ 1]  708     LDW Y,X 
      0028A4 90 FE            [ 2]  709     LDW Y,(Y)
      0028A6 90 57            [ 2]  710     SRAW Y 
      0028A8 FF               [ 2]  711     LDW (X),Y 
      0028A9 90 93            [ 1]  712     LDW Y,X 
      0028AB 90 EE 02         [ 2]  713     LDW Y,(2,Y)
      0028AE 90 56            [ 2]  714     RRCW Y 
      0028B0 EF 02            [ 2]  715     LDW (2,X),Y 
      0028B2 81               [ 4]  716     RET
                                    717 
                                    718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    719 ;  D2* ( d -- d*2 )
                                    720 ;  multiply double by 2 
                                    721 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028B3                        722     _HEADER D2STAR,3,"D2*"
      0028B3 28 9E                    1         .word LINK 
                           0028B5     2         LINK=.
      0028B5 03                       3         .byte 3  
      0028B6 44 32 2A                 4         .ascii "D2*"
      0028B9                          5         D2STAR:
      0028B9 90 93            [ 1]  723     LDW Y,X 
      0028BB 90 EE 02         [ 2]  724     LDW Y,(2,Y)
      0028BE 98               [ 1]  725     RCF 
      0028BF 90 59            [ 2]  726     RLCW Y 
      0028C1 EF 02            [ 2]  727     LDW (2,X),Y 
      0028C3 90 93            [ 1]  728     LDW Y,X 
      0028C5 90 FE            [ 2]  729     LDW Y,(Y)
      0028C7 90 59            [ 2]  730     RLCW Y 
      0028C9 FF               [ 2]  731     LDW (X),Y 
      0028CA 81               [ 4]  732     RET 
                                    733 
                                    734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    735 ;   DLSHIFT ( d n -- d )
                                    736 ;   left shift double 
                                    737 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028CB                        738     _HEADER DLSHIFT,7,"DLSHIFT"
      0028CB 28 B5                    1         .word LINK 
                           0028CD     2         LINK=.
      0028CD 07                       3         .byte 7  
      0028CE 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0028D5                          5         DLSHIFT:
      0028D5 E6 01            [ 1]  739     LD A,(1,X) ; shift count 
      0028D7 1C 00 02         [ 2]  740     ADDW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      0028DA 90 93            [ 1]  741     LDW Y,X 
      0028DC 90 FE            [ 2]  742     LDW Y,(Y)
      0028DE 90 BF 26         [ 2]  743     LDW YTEMP,Y  ; d hi 
      0028E1 90 93            [ 1]  744     LDW Y,X 
      0028E3 90 EE 02         [ 2]  745     LDW Y,(2,Y)  ; d low 
      0028E6                        746 DLSHIFT1:
      0028E6 4D               [ 1]  747     TNZ A 
      0028E7 27 12            [ 1]  748     JREQ DLSHIFT2 
      0028E9 98               [ 1]  749     RCF 
      0028EA 90 59            [ 2]  750     RLCW Y 
      0028EC 90 89            [ 2]  751     PUSHW Y 
      0028EE 90 BE 26         [ 2]  752     LDW Y,YTEMP 
      0028F1 90 59            [ 2]  753     RLCW Y 
      0028F3 90 BF 26         [ 2]  754     LDW YTEMP,Y 
      0028F6 90 85            [ 2]  755     POPW Y 
      0028F8 4A               [ 1]  756     DEC A 
      0028F9 20 EB            [ 2]  757     JRA DLSHIFT1 
      0028FB                        758 DLSHIFT2:
      0028FB EF 02            [ 2]  759     LDW (2,X),Y 
      0028FD 90 BE 26         [ 2]  760     LDW Y,YTEMP 
      002900 FF               [ 2]  761     LDW (X),Y 
      002901 81               [ 4]  762     RET 
                                    763 
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    765 ;  DRSHIFT ( d n -- d )
                                    766 ;  shift right n bits 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002902                        768     _HEADER DRSHIFT,7,"DRSHIFT"
      002902 28 CD                    1         .word LINK 
                           002904     2         LINK=.
      002904 07                       3         .byte 7  
      002905 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      00290C                          5         DRSHIFT:
      00290C E6 01            [ 1]  769     LD A,(1,X)
      00290E A4 1F            [ 1]  770     AND A,#0X1F 
      002910 1C 00 02         [ 2]  771     ADDW X,#2 
      002913                        772 DRSHIFT1:
      002913 4D               [ 1]  773     TNZ A 
      002914 27 13            [ 1]  774     JREQ DRSHIFT2 
      002916 90 93            [ 1]  775     LDW Y,X 
      002918 90 FE            [ 2]  776     LDW Y,(Y)
      00291A 90 57            [ 2]  777     SRAW Y 
      00291C FF               [ 2]  778     LDW (X),Y 
      00291D 90 93            [ 1]  779     LDW Y,X 
      00291F 90 EE 02         [ 2]  780     LDW Y,(2,Y)
      002922 90 56            [ 2]  781     RRCW Y 
      002924 EF 02            [ 2]  782     LDW (2,X),Y 
      002926 4A               [ 1]  783     DEC A
      002927 20 EA            [ 2]  784     JRA DRSHIFT1  
      002929                        785 DRSHIFT2:
      002929 81               [ 4]  786     RET 
                                    787 
                                    788 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    790 ;   D* ( d1 d2 -- d3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                    791 ;   double product 
                                    792 ;   
                                    793 ;   d3 = d1 * d2
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00292A                        795     _HEADER DSTAR,2,"D*"
      00292A 29 04                    1         .word LINK 
                           00292C     2         LINK=.
      00292C 02                       3         .byte 2  
      00292D 44 2A                    4         .ascii "D*"
      00292F                          5         DSTAR:
      00292F CD 05 88         [ 4]  796     CALL DUPP 
      002932 CD 05 BF         [ 4]  797     CALL ZLESS  
      002935 CD 05 51         [ 4]  798     CALL TOR    ; R: d2sign 
      002938 CD 25 24         [ 4]  799     CALL DABS   
      00293B CD 05 34         [ 4]  800     CALL RFROM 
      00293E CD 07 6B         [ 4]  801     CALL NROT  ; d1 d2s ud2
      002941 CD 27 C2         [ 4]  802     CALL DTOR  ; d1 d2s R: ud2  
      002944 CD 05 51         [ 4]  803     CALL TOR   ; d1 R: ud2 d2s   
      002947 CD 05 88         [ 4]  804     CALL DUPP 
      00294A CD 05 BF         [ 4]  805     CALL ZLESS 
      00294D CD 05 34         [ 4]  806     CALL RFROM 
      002950 CD 06 0E         [ 4]  807     CALL XORR   
      002953 CD 05 51         [ 4]  808     CALL TOR   ; d1 R: ud2 prod_sign  
      002956 CD 25 24         [ 4]  809     CALL DABS ; ud1 R: ud2 ps  
      002959 CD 05 34         [ 4]  810     CALL RFROM  
      00295C CD 07 6B         [ 4]  811     CALL NROT   ; ps ud1 
      00295F CD 07 98         [ 4]  812     CALL DDUP   ; ps ud1 ud1  
      002962 CD 05 34         [ 4]  813     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002965 CD 25 FC         [ 4]  814     CALL DSSTAR ; ps ud1 dprodhi 
                                    815 ; shift partial product 16 bits left 
      002968 CD 05 7E         [ 4]  816     CALL DROP   ; drop overflow 
      00296B CD 0B 37         [ 4]  817     CALL ZERO   ; ps ud1 prodhi 
      00296E CD 05 98         [ 4]  818     CALL SWAPP  
      002971 CD 26 45         [ 4]  819     CALL DSWAP  ; ps dprodhi ud1 
      002974 CD 05 34         [ 4]  820     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002977 CD 25 FC         [ 4]  821     CALL DSSTAR ; ps  dprodhi dprodlo 
      00297A CD 2A 89         [ 4]  822     CALL DPLUS
      00297D CD 07 4C         [ 4]  823     CALL ROT    ; dprod ps 
      002980                        824     _QBRAN DDSTAR3 
      002980 CD 04 98         [ 4]    1     CALL QBRAN
      002983 29 88                    2     .word DDSTAR3
      002985 CD 07 EA         [ 4]  825     CALL DNEGA 
      002988                        826 DDSTAR3:  
      002988 81               [ 4]  827     RET 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;   DD/MOD  ( d1 d2 -- dr dq )
                                    831 ;   double division dq=d1/d2
                                    832 ;   dr remainder double 
                                    833 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002989                        834     _HEADER DDSLMOD,6,"DD/MOD"  
      002989 29 2C                    1         .word LINK 
                           00298B     2         LINK=.
      00298B 06                       3         .byte 6  
      00298C 44 44 2F 4D 4F 44        4         .ascii "DD/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      002992                          5         DDSLMOD:
      002992                        835     _DOLIT 0 
      002992 CD 04 6F         [ 4]    1     CALL DOLIT 
      002995 00 00                    2     .word 0 
      002997 CD 05 51         [ 4]  836     CALL TOR   ; R: sign 
      00299A 90 93            [ 1]  837     LDW Y,X     
      00299C 90 FE            [ 2]  838     LDW Y,(Y)
      00299E 2A 0C            [ 1]  839     JRPL DSLA1
      0029A0 CD 07 EA         [ 4]  840     CALL DNEGA  ; ud2 
      0029A3 CD 05 34         [ 4]  841     CALL RFROM 
      0029A6 CD 07 C7         [ 4]  842     CALL INVER 
      0029A9 CD 05 51         [ 4]  843     CALL TOR  ; sign inverted 
      0029AC                        844 DSLA1:
      0029AC                        845     _DOLIT 2 
      0029AC CD 04 6F         [ 4]    1     CALL DOLIT 
      0029AF 00 02                    2     .word 2 
      0029B1 CD 0B 90         [ 4]  846     CALL PICK 
      0029B4 CD 05 BF         [ 4]  847     CALL ZLESS 
      0029B7                        848     _QBRAN DSLA2
      0029B7 CD 04 98         [ 4]    1     CALL QBRAN
      0029BA 29 CE                    2     .word DSLA2
      0029BC CD 26 45         [ 4]  849     CALL DSWAP 
      0029BF CD 07 EA         [ 4]  850     CALL DNEGA  ; ud1 
      0029C2 CD 26 45         [ 4]  851     CALL DSWAP  ; ud1 ud2 ( divident divisor )     
      0029C5 CD 05 34         [ 4]  852     CALL RFROM 
      0029C8 CD 07 C7         [ 4]  853     CALL INVER 
      0029CB CD 05 51         [ 4]  854     CALL TOR   ;  sign inverted again 
      0029CE                        855 DSLA2:
                                    856 ; unsigned double division 
      0029CE CD 0B 37         [ 4]  857     CALL ZERO 
      0029D1 CD 0B 37         [ 4]  858     CALL ZERO
      0029D4 CD 27 C2         [ 4]  859     CALL DTOR ; quotient  R: sign qlo qhi 
      0029D7 CD 28 89         [ 4]  860     CALL DOVER 
      0029DA CD 26 73         [ 4]  861     CALL DCLZ ; n2, dividend leading zeros  
      0029DD CD 05 51         [ 4]  862     CALL TOR 
      0029E0 CD 07 98         [ 4]  863     CALL DDUP    
      0029E3 CD 26 73         [ 4]  864     CALL DCLZ  ; n1, divisor leading zeros
      0029E6 CD 05 34         [ 4]  865     CALL RFROM ; n1 n2 
      0029E9 CD 08 26         [ 4]  866     CALL SUBB
      0029EC CD 05 88         [ 4]  867     CALL DUPP   
      0029EF CD 05 BF         [ 4]  868     CALL ZLESS 
      0029F2                        869     _TBRAN DSLA7 ; quotient is null 
      0029F2 CD 04 A6         [ 4]    1     CALL TBRAN 
      0029F5 2A 65                    2     .word DSLA7 
      0029F7 CD 05 88         [ 4]  870     CALL DUPP 
      0029FA CD 05 51         [ 4]  871     CALL TOR    ; loop counter 
      0029FD CD 05 88         [ 4]  872     CALL DUPP 
      002A00 CD 05 51         [ 4]  873     CALL TOR    ; need to copies 
      002A03 CD 07 3B         [ 4]  874     CALL QDUP 
      002A06                        875     _QBRAN DSLA3
      002A06 CD 04 98         [ 4]    1     CALL QBRAN
      002A09 2A 0E                    2     .word DSLA3
      002A0B CD 28 D5         [ 4]  876     CALL DLSHIFT ; align divisor with dividend 
      002A0E                        877 DSLA3: ; division loop -- dividend divisor  
      002A0E 90 5F            [ 1]  878     CLRW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      002A10 90 89            [ 2]  879     PUSHW Y  
      002A12 CD 28 89         [ 4]  880     CALL DOVER 
      002A15 CD 28 89         [ 4]  881     CALL DOVER 
      002A18 CD 27 5B         [ 4]  882     CALL DLESS 
      002A1B                        883     _TBRAN DSLA4 
      002A1B CD 04 A6         [ 4]    1     CALL TBRAN 
      002A1E 2A 34                    2     .word DSLA4 
      002A20 90 85            [ 2]  884     POPW Y 
      002A22 72 A9 00 01      [ 2]  885     ADDW Y,#1 
      002A26 90 89            [ 2]  886     PUSHW Y    ; quotiend least bit 
      002A28 CD 07 98         [ 4]  887     CALL DDUP  ; dividend divisor divisor 
      002A2B CD 27 C2         [ 4]  888     CALL DTOR  
      002A2E CD 2A BB         [ 4]  889     CALL DSUB  ; dividend-divisor 
      002A31 CD 27 E0         [ 4]  890     CALL DRFROM  ; dividend- divisor  
      002A34                        891 DSLA4: ; shift quotient and add 1 bit 
      002A34 90 85            [ 2]  892     POPW Y 
      002A36 90 BF 26         [ 2]  893     LDW YTEMP,Y 
      002A39 16 07            [ 2]  894     LDW Y,(7,SP) ; quotient low 
      002A3B 98               [ 1]  895     RCF 
      002A3C 90 59            [ 2]  896     RLCW Y
      002A3E 17 07            [ 2]  897     LDW (7,SP),Y 
      002A40 16 05            [ 2]  898     LDW Y,(5,SP) ; quotient hi 
      002A42 90 59            [ 2]  899     RLCW Y 
      002A44 17 05            [ 2]  900     LDW (5,SP),Y 
      002A46 16 07            [ 2]  901     LDW Y,(7,SP) 
      002A48 72 B9 00 26      [ 2]  902     ADDW Y,YTEMP
      002A4C 17 07            [ 2]  903     LDW (7,SP),Y 
      002A4E 16 01            [ 2]  904     LDW Y,(1,SP) ; loop counter 
      002A50 90 5D            [ 2]  905     TNZW Y 
      002A52 27 14            [ 1]  906     JREQ DSLA8
      002A54 72 A2 00 01      [ 2]  907     SUBW Y,#1  
      002A58 17 01            [ 2]  908     LDW (1,SP),Y  
                                    909 ; shift dividend left 1 bit      
      002A5A CD 26 45         [ 4]  910     CALL DSWAP 
      002A5D CD 28 B9         [ 4]  911     CALL D2STAR 
      002A60 CD 26 45         [ 4]  912     CALL DSWAP 
      002A63 20 A9            [ 2]  913     JRA DSLA3 
      002A65                        914 DSLA7:
      002A65 1C 00 02         [ 2]  915     ADDW X,#2 ; drop shift count  
      002A68                        916 DSLA8:
      002A68 1C 00 04         [ 2]  917     ADDW X,#4 ; drop divisor
      002A6B CD 05 34         [ 4]  918     CALL RFROM
      002A6E CD 05 7E         [ 4]  919     CALL DROP   ; loop counter 
      002A71 CD 05 34         [ 4]  920     CALL RFROM   ; shift count
      002A74 CD 29 0C         [ 4]  921     CALL DRSHIFT 
                                    922     ; quotient replace dividend 
      002A77 CD 27 E0         [ 4]  923     CALL DRFROM  ; quotient 
      002A7A 90 85            [ 2]  924     POPW Y ; sign 
      002A7C 90 5D            [ 2]  925     TNZW Y 
      002A7E 27 03            [ 1]  926     JREQ DSLA9 
      002A80 CD 07 EA         [ 4]  927     CALL DNEGA ; remainder quotient 
      002A83                        928 DSLA9: 
      002A83 81               [ 4]  929     RET 
                                    930 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                    932 ;   D+ ( d1 d2 -- d3 )
                                    933 ;   add 2 doubles 
                                    934 ;   d3=d1+d2 
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A84                        936     _HEADER DPLUS,2,"D+"
      002A84 29 8B                    1         .word LINK 
                           002A86     2         LINK=.
      002A86 02                       3         .byte 2  
      002A87 44 2B                    4         .ascii "D+"
      002A89                          5         DPLUS:
      002A89 90 93            [ 1]  937     LDW Y,X 
      002A8B 90 FE            [ 2]  938     LDW Y,(Y)
      002A8D 90 BF 26         [ 2]  939     LDW YTEMP,Y ; d2 hi 
      002A90 90 93            [ 1]  940     LDW Y,X 
      002A92 90 EE 02         [ 2]  941     LDW Y,(2,Y)
      002A95 90 BF 24         [ 2]  942     LDW XTEMP,Y ; d2 lo 
      002A98 1C 00 04         [ 2]  943     ADDW X,#4 
      002A9B 90 93            [ 1]  944     LDW Y,X 
      002A9D 90 EE 02         [ 2]  945     LDW Y,(2,Y) ; d1 lo
      002AA0 72 B9 00 24      [ 2]  946     ADDW Y,XTEMP
      002AA4 EF 02            [ 2]  947     LDW (2,X),Y 
      002AA6 90 93            [ 1]  948     LDW Y,X 
      002AA8 90 FE            [ 2]  949     LDW Y,(Y) ; d1 hi 
      002AAA 24 04            [ 1]  950     JRNC DPLUS1 
      002AAC 72 A9 00 01      [ 2]  951     ADDW Y,#1 
      002AB0                        952 DPLUS1: 
      002AB0 72 B9 00 26      [ 2]  953     ADDW Y,YTEMP 
      002AB4 FF               [ 2]  954     LDW (X),Y 
      002AB5 81               [ 4]  955     RET 
                                    956 
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    958 ;   D- ( d1 d2 -- d3 )
                                    959 ;   d3=d1-d2 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AB6                        961     _HEADER DSUB,2,"D-"
      002AB6 2A 86                    1         .word LINK 
                           002AB8     2         LINK=.
      002AB8 02                       3         .byte 2  
      002AB9 44 2D                    4         .ascii "D-"
      002ABB                          5         DSUB:
      002ABB 90 93            [ 1]  962     LDW Y,X 
      002ABD 90 FE            [ 2]  963     LDW Y,(Y)
      002ABF 90 BF 26         [ 2]  964     LDW YTEMP,Y ; d2 hi 
      002AC2 90 93            [ 1]  965     LDW Y,X 
      002AC4 90 EE 02         [ 2]  966     LDW Y,(2,Y)
      002AC7 90 BF 24         [ 2]  967     LDW XTEMP,Y ; d2 lo 
      002ACA 1C 00 04         [ 2]  968     ADDW X,#4 
      002ACD 90 93            [ 1]  969     LDW Y,X 
      002ACF 90 EE 02         [ 2]  970     LDW Y,(2,Y) ; d1 lo
      002AD2 72 B2 00 24      [ 2]  971     SUBW Y,XTEMP
      002AD6 EF 02            [ 2]  972     LDW (2,X),Y 
      002AD8 90 93            [ 1]  973     LDW Y,X 
      002ADA 90 FE            [ 2]  974     LDW Y,(Y) ; d1 hi 
      002ADC 24 04            [ 1]  975     JRNC DSUB1 
      002ADE 72 A2 00 01      [ 2]  976     SUBW Y,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      002AE2                        977 DSUB1: 
      002AE2 72 B2 00 26      [ 2]  978     SUBW Y,YTEMP 
      002AE6 FF               [ 2]  979     LDW (X),Y 
      002AE7 81               [ 4]  980     RET 
                                    981 
                                    982 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                                   4548 .endif 
                           000001  4549 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   4550         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ; NOTE: I used a different format 
                                     29 ;       for float number. This 
                                     30 ;       enable comparison of floats 
                                     31 ;       as they were integer hence 
                                     32 ;       there no need for F>,F<,etc 
                                     33 ;
                                     34 ;  This file is part of stm8_eforth 
                                     35 ;  project and same licence apply.
                                     36 ;************************************
                                     37 
                                     38 ;*************************************************
                                     39 ;  FLOAT format double for storage 
                                     40 ;  bits 22:0  mantissa absolute value 
                                     41 ;  bits  30:23  exponent with 127 offset added  
                                     42 ;  bit 31  mantissa sign 
                                     43 ;  float value: if bit 31 is 1 negate mantissa
                                     44 ;                else keep mantissas as bits 22:0
                                     45 ;                as is
                                     46 ;                eponent: 10^^(exp-127) 
                                     47 ;***********************************************  
                                     48 
                                     49     .module FLOAT 
                                     50 
                           000001    51 .if WANT_DOUBLE 
                                     52 ; already included 
                           000000    53 .else
                                     54 ;  must be included  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                     55     .include "double.asm"
                                     56 .endif  
                                     57 
                           7FFFFF    58     MAX_MANTISSA = 0x7FFFFF 
                                     59 
                                     60 ;-------------------------
                                     61 ;    FPSW ( -- a )
                                     62 ;    floating state variable
                                     63 ;    bit 0 zero flag 
                                     64 ;    bit 1 negative flag 
                                     65 ;    bit 2 overflow/error flag 
                                     66 ;---------------------------
      002AE8                         67     _HEADER FPSW,4,"FPSW"
      002AE8 2A B8                    1         .word LINK 
                           002AEA     2         LINK=.
      002AEA 04                       3         .byte 4  
      002AEB 46 50 53 57              4         .ascii "FPSW"
      002AEF                          5         FPSW:
      002AEF 90 AE 00 08      [ 2]   68 	LDW Y,#UFPSW  
      002AF3 1D 00 02         [ 2]   69 	SUBW X,#2
      002AF6 FF               [ 2]   70     LDW (X),Y
      002AF7 81               [ 4]   71     RET
                                     72 
                                     73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     74 ;   FRESET ( -- )
                                     75 ;   reset FPSW variable 
                                     76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002AF8                         77     _HEADER FRESET,6,"FRESET"
      002AF8 2A EA                    1         .word LINK 
                           002AFA     2         LINK=.
      002AFA 06                       3         .byte 6  
      002AFB 46 52 45 53 45 54        4         .ascii "FRESET"
      002B01                          5         FRESET:
      002B01                         78     _DOLIT 0 
      002B01 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B04 00 00                    2     .word 0 
      002B06 CD 2A EF         [ 4]   79     CALL FPSW 
      002B09 CD 04 D1         [ 4]   80     CALL STORE 
      002B0C 81               [ 4]   81     RET 
                                     82 
                                     83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     84 ;   FINIT ( -- )
                                     85 ;   initialize floating point 
                                     86 ;   library 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B0D                         88     _HEADER FINIT,5,"FINIT"
      002B0D 2A FA                    1         .word LINK 
                           002B0F     2         LINK=.
      002B0F 05                       3         .byte 5  
      002B10 46 49 4E 49 54           4         .ascii "FINIT"
      002B15                          5         FINIT:
      002B15 CD 2B 01         [ 4]   89     CALL FRESET 
      002B18 81               [ 4]   90     RET 
                                     91 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                     93 ;    FER ( -- u )
                                     94 ;    return FPSW value 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B19                         96     _HEADER FER,3,"FER"
      002B19 2B 0F                    1         .word LINK 
                           002B1B     2         LINK=.
      002B1B 03                       3         .byte 3  
      002B1C 46 45 52                 4         .ascii "FER"
      002B1F                          5         FER:
      002B1F CD 2A EF         [ 4]   97     CALL FPSW 
      002B22 CD 04 E3         [ 4]   98     CALL AT 
      002B25 81               [ 4]   99     RET 
                                    100 
                                    101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    102 ;    FZE  ( -- z )
                                    103 ;    return FPSW zero flag 
                                    104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B26                        105     _HEADER FZE,3,"FZE"
      002B26 2B 1B                    1         .word LINK 
                           002B28     2         LINK=.
      002B28 03                       3         .byte 3  
      002B29 46 5A 45                 4         .ascii "FZE"
      002B2C                          5         FZE:
      002B2C CD 2A EF         [ 4]  106     CALL FPSW
      002B2F CD 04 E3         [ 4]  107     CALL AT  
      002B32                        108     _DOLIT 1
      002B32 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B35 00 01                    2     .word 1 
      002B37 CD 05 E5         [ 4]  109     CALL ANDD 
      002B3A 81               [ 4]  110     RET 
                                    111 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    113 ;    FNE ( -- n )
                                    114 ;    return FPSW negative flag 
                                    115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B3B                        116     _HEADER FNE,3,"FNE"
      002B3B 2B 28                    1         .word LINK 
                           002B3D     2         LINK=.
      002B3D 03                       3         .byte 3  
      002B3E 46 4E 45                 4         .ascii "FNE"
      002B41                          5         FNE:
      002B41 CD 2A EF         [ 4]  117     CALL FPSW 
      002B44 CD 04 E3         [ 4]  118     CALL AT 
      002B47                        119     _DOLIT 2 
      002B47 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B4A 00 02                    2     .word 2 
      002B4C CD 05 E5         [ 4]  120     CALL ANDD 
      002B4F 81               [ 4]  121     RET 
                                    122 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    124 ;   FOV (A -- v )
                                    125 ;   return FPSW overflow flag 
                                    126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B50                        127     _HEADER FOV,3,"FOV"
      002B50 2B 3D                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                           002B52     2         LINK=.
      002B52 03                       3         .byte 3  
      002B53 46 4F 56                 4         .ascii "FOV"
      002B56                          5         FOV:
      002B56 CD 2A EF         [ 4]  128     CALL FPSW
      002B59 CD 04 E3         [ 4]  129     CALL AT  
      002B5C                        130     _DOLIT 4 
      002B5C CD 04 6F         [ 4]    1     CALL DOLIT 
      002B5F 00 04                    2     .word 4 
      002B61 CD 05 E5         [ 4]  131     CALL ANDD 
      002B64 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;    SFZ ( f# -- f# )
                                    136 ;    set FPSW zero flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B65                        138     _HEADER SFZ,3,"SFZ"
      002B65 2B 52                    1         .word LINK 
                           002B67     2         LINK=.
      002B67 03                       3         .byte 3  
      002B68 53 46 5A                 4         .ascii "SFZ"
      002B6B                          5         SFZ:
      002B6B CD 07 98         [ 4]  139     CALL DDUP 
      002B6E CD 2B 1F         [ 4]  140     CALL FER 
      002B71                        141     _DOLIT 0xfffe 
      002B71 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B74 FF FE                    2     .word 0xfffe 
      002B76 CD 05 E5         [ 4]  142     CALL ANDD 
      002B79 CD 05 51         [ 4]  143     CALL TOR    
      002B7C                        144     _DOLIT 0x807F 
      002B7C CD 04 6F         [ 4]    1     CALL DOLIT 
      002B7F 80 7F                    2     .word 0x807F 
      002B81 CD 05 E5         [ 4]  145     CALL ANDD 
      002B84 CD 24 DC         [ 4]  146     CALL DZEQUAL 
      002B87                        147     _DOLIT 1 
      002B87 CD 04 6F         [ 4]    1     CALL DOLIT 
      002B8A 00 01                    2     .word 1 
      002B8C CD 05 E5         [ 4]  148     CALL ANDD 
      002B8F CD 05 34         [ 4]  149     CALL RFROM 
      002B92 CD 05 F9         [ 4]  150     CALL ORR 
      002B95 CD 2A EF         [ 4]  151     CALL FPSW 
      002B98 CD 04 D1         [ 4]  152     CALL STORE 
      002B9B 81               [ 4]  153     RET 
                                    154 
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ;   SFN ( f# -- f# )
                                    158 ;   set FPSW negative flag 
                                    159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B9C                        160     _HEADER SFN,3,"SFN"
      002B9C 2B 67                    1         .word LINK 
                           002B9E     2         LINK=.
      002B9E 03                       3         .byte 3  
      002B9F 53 46 4E                 4         .ascii "SFN"
      002BA2                          5         SFN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002BA2 CD 05 88         [ 4]  161     CALL DUPP  
      002BA5 CD 2B 1F         [ 4]  162     CALL FER 
      002BA8                        163     _DOLIT 0xFFFD 
      002BA8 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BAB FF FD                    2     .word 0xFFFD 
      002BAD CD 05 E5         [ 4]  164     CALL ANDD  
      002BB0 CD 05 51         [ 4]  165     CALL TOR 
      002BB3                        166     _DOLIT 0x8000
      002BB3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BB6 80 00                    2     .word 0x8000 
      002BB8 CD 05 E5         [ 4]  167     CALL ANDD
      002BBB 90 93            [ 1]  168     LDW Y,X 
      002BBD 90 FE            [ 2]  169     LDW Y,(Y)
      002BBF 98               [ 1]  170     RCF 
      002BC0 90 59            [ 2]  171     RLCW Y 
      002BC2 90 59            [ 2]  172     RLCW Y 
      002BC4 90 59            [ 2]  173     RLCW Y 
      002BC6 FF               [ 2]  174     LDW (X),Y 
      002BC7 CD 05 34         [ 4]  175     CALL RFROM 
      002BCA CD 05 F9         [ 4]  176     CALL ORR 
      002BCD CD 2A EF         [ 4]  177     CALL FPSW
      002BD0 CD 04 D1         [ 4]  178     CALL STORE 
      002BD3 81               [ 4]  179     RET 
                                    180 
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 ;   SFV ( -- )
                                    183 ;   set overflow flag 
                                    184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD4                        185     _HEADER SFV,3,"SFV"
      002BD4 2B 9E                    1         .word LINK 
                           002BD6     2         LINK=.
      002BD6 03                       3         .byte 3  
      002BD7 53 46 56                 4         .ascii "SFV"
      002BDA                          5         SFV:
      002BDA CD 2A EF         [ 4]  186     CALL FPSW 
      002BDD CD 04 E3         [ 4]  187     CALL AT 
      002BE0                        188     _DOLIT 4 
      002BE0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002BE3 00 04                    2     .word 4 
      002BE5 CD 05 F9         [ 4]  189     CALL ORR 
      002BE8 CD 2A EF         [ 4]  190     CALL FPSW 
      002BEB CD 04 D1         [ 4]  191     CALL STORE 
      002BEE 81               [ 4]  192     RET 
                                    193 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    195 ;  F>ME ( f# -- m e )
                                    196 ;  split float in mantissa/exponent 
                                    197 ;  m mantissa as a double 
                                    198 ;  e exponent as a single 
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BEF                        200     _HEADER ATEXP,4,"F>ME"             
      002BEF 2B D6                    1         .word LINK 
                           002BF1     2         LINK=.
      002BF1 04                       3         .byte 4  
      002BF2 46 3E 4D 45              4         .ascii "F>ME"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002BF6                          5         ATEXP:
      002BF6 CD 2B 01         [ 4]  201     CALL FRESET
      002BF9 CD 2B A2         [ 4]  202     CALL SFN
      002BFC CD 2B 6B         [ 4]  203     CALL SFZ 
      002BFF CD 05 88         [ 4]  204     CALL DUPP
      002C02                        205     _DOLIT 0X7F80 
      002C02 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C05 7F 80                    2     .word 0X7F80 
      002C07 CD 05 E5         [ 4]  206     CALL ANDD 
      002C0A                        207     _DOLIT 7 
      002C0A CD 04 6F         [ 4]    1     CALL DOLIT 
      002C0D 00 07                    2     .word 7 
      002C0F CD 0B 05         [ 4]  208     CALL RSHIFT
      002C12                        209     _DOLIT 127 
      002C12 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C15 00 7F                    2     .word 127 
      002C17 CD 08 26         [ 4]  210     CALL SUBB
      002C1A CD 05 51         [ 4]  211     CALL TOR 
      002C1D                        212     _DOLIT 0x7F
      002C1D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C20 00 7F                    2     .word 0x7F 
      002C22 CD 05 E5         [ 4]  213     CALL ANDD  ; mantissa as double  
      002C25 CD 2B 41         [ 4]  214     CALL FNE 
      002C28                        215     _QBRAN POSMANT 
      002C28 CD 04 98         [ 4]    1     CALL QBRAN
      002C2B 2C 30                    2     .word POSMANT
      002C2D CD 24 FA         [ 4]  216     CALL DNEGAT 
      002C30                        217 POSMANT:
      002C30 CD 05 34         [ 4]  218     CALL RFROM 
      002C33 81               [ 4]  219     RET 
                                    220 
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;    ME>F ( m e -- f# )
                                    223 ;    built float from mantissa/exponent 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C34                        225     _HEADER STEXP,4,"ME>F"
      002C34 2B F1                    1         .word LINK 
                           002C36     2         LINK=.
      002C36 04                       3         .byte 4  
      002C37 4D 45 3E 46              4         .ascii "ME>F"
      002C3B                          5         STEXP:
      002C3B CD 05 88         [ 4]  226     CALL DUPP 
      002C3E CD 08 40         [ 4]  227     CALL ABSS 
      002C41                        228     _DOLIT 127 
      002C41 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C44 00 7F                    2     .word 127 
      002C46 CD 08 AA         [ 4]  229     CALL UGREAT
      002C49                        230     _QBRAN STEXP1
      002C49 CD 04 98         [ 4]    1     CALL QBRAN
      002C4C 2C 51                    2     .word STEXP1
      002C4E CD 2B DA         [ 4]  231     CALL SFV  
      002C51                        232 STEXP1:
      002C51                        233     _DOLIT 127 
      002C51 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C54 00 7F                    2     .word 127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002C56 CD 07 AD         [ 4]  234     CALL PLUS 
      002C59                        235     _DOLIT 0XFF 
      002C59 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C5C 00 FF                    2     .word 0XFF 
      002C5E CD 05 E5         [ 4]  236     CALL ANDD 
      002C61                        237     _DOLIT 7 
      002C61 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C64 00 07                    2     .word 7 
      002C66 CD 0A E9         [ 4]  238     CALL LSHIFT 
      002C69 CD 05 51         [ 4]  239     CALL TOR   ; R: e 
      002C6C CD 05 88         [ 4]  240     CALL DUPP 
      002C6F                        241     _DOLIT 0X8000 
      002C6F CD 04 6F         [ 4]    1     CALL DOLIT 
      002C72 80 00                    2     .word 0X8000 
      002C74 CD 05 E5         [ 4]  242     CALL ANDD 
      002C77                        243     _QBRAN STEXP2 
      002C77 CD 04 98         [ 4]    1     CALL QBRAN
      002C7A 2C 8D                    2     .word STEXP2
      002C7C                        244     _DOLIT 0X8000 
      002C7C CD 04 6F         [ 4]    1     CALL DOLIT 
      002C7F 80 00                    2     .word 0X8000 
      002C81 CD 05 34         [ 4]  245     CALL RFROM 
      002C84 CD 05 F9         [ 4]  246     CALL ORR
      002C87 CD 05 51         [ 4]  247     CALL TOR
      002C8A CD 24 FA         [ 4]  248     CALL DNEGAT  
      002C8D                        249 STEXP2:
      002C8D CD 05 88         [ 4]  250     CALL DUPP 
      002C90                        251     _DOLIT 0X7F
      002C90 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C93 00 7F                    2     .word 0X7F 
      002C95 CD 08 AA         [ 4]  252     CALL UGREAT 
      002C98                        253     _QBRAN STEXP3 
      002C98 CD 04 98         [ 4]    1     CALL QBRAN
      002C9B 2C A0                    2     .word STEXP3
      002C9D CD 2B DA         [ 4]  254     CALL SFV 
      002CA0                        255 STEXP3:
      002CA0                        256     _DOLIT 0X7F 
      002CA0 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CA3 00 7F                    2     .word 0X7F 
      002CA5 CD 05 E5         [ 4]  257     CALL ANDD 
      002CA8 CD 05 34         [ 4]  258     CALL RFROM 
      002CAB CD 05 F9         [ 4]  259     CALL ORR 
      002CAE CD 2B 6B         [ 4]  260     CALL SFZ 
      002CB1 CD 2B A2         [ 4]  261     CALL SFN 
      002CB4 81               [ 4]  262     RET 
                                    263 
                                    264 
                                    265 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    266 ;   E. ( f# -- )
                                    267 ;   print float in scientific 
                                    268 ;   format 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB5                        270     _HEADER EDOT,2,"E."
      002CB5 2C 36                    1         .word LINK 
                           002CB7     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002CB7 02                       3         .byte 2  
      002CB8 45 2E                    4         .ascii "E."
      002CBA                          5         EDOT:
      002CBA CD 06 4E         [ 4]  271     CALL BASE 
      002CBD CD 04 E3         [ 4]  272     CALL AT 
      002CC0 CD 05 51         [ 4]  273     CALL TOR 
      002CC3                        274     _DOLIT 10 
      002CC3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CC6 00 0A                    2     .word 10 
      002CC8 CD 06 4E         [ 4]  275     CALL BASE 
      002CCB CD 04 D1         [ 4]  276     CALL STORE 
      002CCE CD 2B F6         [ 4]  277     CALL ATEXP ; m e 
      002CD1                        278 EDOT0:
      002CD1 CD 05 51         [ 4]  279     CALL TOR   
      002CD4 CD 2B 41         [ 4]  280     CALL FNE 
      002CD7                        281     _QBRAN EDOT1
      002CD7 CD 04 98         [ 4]    1     CALL QBRAN
      002CDA 2C DF                    2     .word EDOT1
      002CDC CD 24 FA         [ 4]  282     CALL DNEGAT
      002CDF                        283 EDOT1:
      002CDF CD 0E 6D         [ 4]  284     CALL SPACE 
      002CE2 CD 0D 31         [ 4]  285     CALL BDIGS     
      002CE5                        286 EDOT2: 
      002CE5 CD 25 95         [ 4]  287     CALL DDIG
      002CE8 CD 05 34         [ 4]  288     CALL RFROM 
      002CEB CD 0A CB         [ 4]  289     CALL ONEP 
      002CEE CD 05 51         [ 4]  290     CALL TOR 
      002CF1 CD 05 88         [ 4]  291     CALL DUPP
      002CF4                        292     _QBRAN EDOT3 
      002CF4 CD 04 98         [ 4]    1     CALL QBRAN
      002CF7 2C FE                    2     .word EDOT3
      002CF9                        293     _BRAN EDOT2  
      002CF9 CD 04 B4         [ 4]    1     CALL BRAN 
      002CFC 2C E5                    2     .word EDOT2 
      002CFE                        294 EDOT3:
      002CFE CD 05 B0         [ 4]  295     CALL OVER 
      002D01 CD 06 4E         [ 4]  296     CALL BASE 
      002D04 CD 04 E3         [ 4]  297     CALL AT 
      002D07 CD 08 6D         [ 4]  298     CALL ULESS 
      002D0A                        299     _QBRAN EDOT2 
      002D0A CD 04 98         [ 4]    1     CALL QBRAN
      002D0D 2C E5                    2     .word EDOT2
      002D0F                        300     _DOLIT '.'
      002D0F CD 04 6F         [ 4]    1     CALL DOLIT 
      002D12 00 2E                    2     .word '.' 
      002D14 CD 0D 41         [ 4]  301     CALL HOLD  
      002D17 CD 25 95         [ 4]  302     CALL DDIG
      002D1A CD 2B 41         [ 4]  303     CALL FNE 
      002D1D                        304     _QBRAN EDOT4 
      002D1D CD 04 98         [ 4]    1     CALL QBRAN
      002D20 2D 2D                    2     .word EDOT4
      002D22                        305     _DOLIT '-'
      002D22 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D25 00 2D                    2     .word '-' 
      002D27 CD 0D 41         [ 4]  306     CALL HOLD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002D2A CD 05 7E         [ 4]  307     CALL DROP 
      002D2D                        308 EDOT4:       
      002D2D CD 0D 96         [ 4]  309     CALL EDIGS 
      002D30 CD 0E 97         [ 4]  310     CALL TYPES
      002D33 CD 05 34         [ 4]  311     CALL RFROM 
      002D36 CD 07 3B         [ 4]  312     CALL QDUP 
      002D39                        313     _QBRAN EDOT5     
      002D39 CD 04 98         [ 4]    1     CALL QBRAN
      002D3C 2D 49                    2     .word EDOT5
      002D3E                        314     _DOLIT 'E'
      002D3E CD 04 6F         [ 4]    1     CALL DOLIT 
      002D41 00 45                    2     .word 'E' 
      002D43 CD 04 36         [ 4]  315     CALL EMIT 
      002D46 CD 0F 56         [ 4]  316     CALL DOT
      002D49                        317 EDOT5: 
      002D49 CD 05 34         [ 4]  318     CALL RFROM 
      002D4C CD 06 4E         [ 4]  319     CALL BASE 
      002D4F CD 04 D1         [ 4]  320     CALL STORE  
      002D52 81               [ 4]  321     RET 
                                    322 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;   F. (f# -- )
                                    325 ;   print float in fixed
                                    326 ;   point format. 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002D53                        328     _HEADER FDOT,2,"F."
      002D53 2C B7                    1         .word LINK 
                           002D55     2         LINK=.
      002D55 02                       3         .byte 2  
      002D56 46 2E                    4         .ascii "F."
      002D58                          5         FDOT:
      002D58 CD 06 4E         [ 4]  329     CALL BASE 
      002D5B CD 04 E3         [ 4]  330     CALL AT 
      002D5E CD 05 51         [ 4]  331     CALL TOR 
      002D61                        332     _DOLIT 10 
      002D61 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D64 00 0A                    2     .word 10 
      002D66 CD 06 4E         [ 4]  333     CALL BASE 
      002D69 CD 04 D1         [ 4]  334     CALL STORE 
      002D6C CD 2B F6         [ 4]  335     CALL    ATEXP
      002D6F CD 05 88         [ 4]  336     CALL    DUPP  
      002D72 CD 08 40         [ 4]  337     CALL    ABSS 
      002D75                        338     _DOLIT  8
      002D75 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D78 00 08                    2     .word 8 
      002D7A CD 08 C9         [ 4]  339     CALL    GREAT 
      002D7D                        340     _QBRAN  FDOT1 
      002D7D CD 04 98         [ 4]    1     CALL QBRAN
      002D80 2D 85                    2     .word FDOT1
      002D82 CC 2C D1         [ 2]  341     JP      EDOT0 
      002D85                        342 FDOT1:
      002D85 CD 0E 6D         [ 4]  343     CALL    SPACE 
      002D88 CD 05 51         [ 4]  344     CALL    TOR 
      002D8B CD 2B 41         [ 4]  345     CALL    FNE 
      002D8E                        346     _QBRAN  FDOT0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002D8E CD 04 98         [ 4]    1     CALL QBRAN
      002D91 2D 96                    2     .word FDOT0
      002D93 CD 24 FA         [ 4]  347     CALL    DNEGAT 
      002D96                        348 FDOT0: 
      002D96 CD 0D 31         [ 4]  349     CALL    BDIGS
      002D99 CD 05 45         [ 4]  350     CALL    RAT  
      002D9C CD 05 BF         [ 4]  351     CALL    ZLESS 
      002D9F                        352     _QBRAN  FDOT6 
      002D9F CD 04 98         [ 4]    1     CALL QBRAN
      002DA2 2D CD                    2     .word FDOT6
      002DA4                        353 FDOT2: ; e<0 
      002DA4 CD 25 95         [ 4]  354     CALL    DDIG 
      002DA7 CD 05 34         [ 4]  355     CALL    RFROM
      002DAA CD 0A CB         [ 4]  356     CALL    ONEP 
      002DAD CD 07 3B         [ 4]  357     CALL    QDUP 
      002DB0                        358     _QBRAN  FDOT3 
      002DB0 CD 04 98         [ 4]    1     CALL QBRAN
      002DB3 2D BD                    2     .word FDOT3
      002DB5 CD 05 51         [ 4]  359     CALL    TOR 
      002DB8                        360     _BRAN   FDOT2 
      002DB8 CD 04 B4         [ 4]    1     CALL BRAN 
      002DBB 2D A4                    2     .word FDOT2 
      002DBD                        361 FDOT3:
      002DBD                        362     _DOLIT  '.' 
      002DBD CD 04 6F         [ 4]    1     CALL DOLIT 
      002DC0 00 2E                    2     .word '.' 
      002DC2 CD 0D 41         [ 4]  363     CALL    HOLD 
      002DC5 CD 25 AE         [ 4]  364     CALL    DDIGS
      002DC8                        365     _BRAN   FDOT9  
      002DC8 CD 04 B4         [ 4]    1     CALL BRAN 
      002DCB 2D E2                    2     .word FDOT9 
      002DCD                        366 FDOT6: ; e>=0 
      002DCD                        367     _BRAN   FDOT8
      002DCD CD 04 B4         [ 4]    1     CALL BRAN 
      002DD0 2D DA                    2     .word FDOT8 
      002DD2                        368 FDOT7:     
      002DD2                        369     _DOLIT  '0'
      002DD2 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DD5 00 30                    2     .word '0' 
      002DD7 CD 0D 41         [ 4]  370     CALL    HOLD 
      002DDA                        371 FDOT8:
      002DDA CD 04 83         [ 4]  372     CALL    DONXT 
      002DDD 2D D2                  373     .word   FDOT7
      002DDF CD 25 AE         [ 4]  374     CALL    DDIGS 
      002DE2                        375 FDOT9:
      002DE2 CD 2B 41         [ 4]  376     CALL    FNE 
      002DE5                        377     _QBRAN  FDOT10 
      002DE5 CD 04 98         [ 4]    1     CALL QBRAN
      002DE8 2D F2                    2     .word FDOT10
      002DEA                        378     _DOLIT '-' 
      002DEA CD 04 6F         [ 4]    1     CALL DOLIT 
      002DED 00 2D                    2     .word '-' 
      002DEF CD 0D 41         [ 4]  379     CALL   HOLD 
      002DF2                        380 FDOT10:
      002DF2 CD 0D 96         [ 4]  381     CALL    EDIGS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002DF5 CD 0E 97         [ 4]  382     CALL    TYPES 
      002DF8 CD 05 34         [ 4]  383     CALL    RFROM 
      002DFB CD 06 4E         [ 4]  384     CALL    BASE 
      002DFE CD 04 D1         [ 4]  385     CALL    STORE 
      002E01 81               [ 4]  386     RET 
                                    387 
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    389 ; return parsed exponent or 
                                    390 ; 0 if failed
                                    391 ; at entry exprect *a=='E'    
                                    392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E02                        393 parse_exponent: ; a cntr -- e -1 | 0 
      002E02 CD 05 51         [ 4]  394     CALL TOR   ; R: cntr 
      002E05 CD 05 88         [ 4]  395     CALL DUPP 
      002E08 CD 05 01         [ 4]  396     CALL CAT 
      002E0B                        397     _DOLIT 'E' 
      002E0B CD 04 6F         [ 4]    1     CALL DOLIT 
      002E0E 00 45                    2     .word 'E' 
      002E10 CD 08 4E         [ 4]  398     CALL EQUAL 
      002E13                        399     _QBRAN 1$
      002E13 CD 04 98         [ 4]    1     CALL QBRAN
      002E16 2E 43                    2     .word 1$
      002E18 CD 0A CB         [ 4]  400     CALL ONEP 
      002E1B CD 05 34         [ 4]  401     CALL RFROM  ; a cntr 
      002E1E CD 0A D8         [ 4]  402     CALL ONEM
      002E21 CD 05 88         [ 4]  403     CALL DUPP 
      002E24                        404     _QBRAN 2$ ; a cntr 
      002E24 CD 04 98         [ 4]    1     CALL QBRAN
      002E27 2E 46                    2     .word 2$
      002E29 CD 0B 37         [ 4]  405     CALL ZERO
      002E2C CD 05 88         [ 4]  406     CALL DUPP 
      002E2F CD 26 45         [ 4]  407     CALL DSWAP ; 0 0 a cntr  
      002E32 CD 23 8A         [ 4]  408     CALL nsign 
      002E35 CD 05 51         [ 4]  409     CALL TOR   ; R: esign  
      002E38 CD 23 C2         [ 4]  410     CALL parse_digits
      002E3B                        411     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002E3B CD 04 98         [ 4]    1     CALL QBRAN
      002E3E 2E 4D                    2     .word PARSEXP_SUCCESS
                                    412 ; failed invalid character
      002E40 CD 07 8D         [ 4]  413     CALL DDROP ; 0 a 
      002E43                        414 1$: 
      002E43 CD 05 34         [ 4]  415     CALL RFROM ; sign||cntr  
      002E46                        416 2$:
      002E46 CD 07 8D         [ 4]  417     CALL DDROP  ; a cntr || a sign || 0 cntr   
      002E49 CD 0B 37         [ 4]  418     CALL ZERO   ; return only 0 
      002E4C 81               [ 4]  419     RET 
      002E4D                        420 PARSEXP_SUCCESS: 
      002E4D CD 07 8D         [ 4]  421     CALL DDROP ; drop dhi a 
      002E50 CD 05 34         [ 4]  422     CALL RFROM ; es 
      002E53                        423     _QBRAN 1$
      002E53 CD 04 98         [ 4]    1     CALL QBRAN
      002E56 2E 5B                    2     .word 1$
      002E58 CD 07 D8         [ 4]  424     CALL NEGAT
      002E5B                        425 1$:
      002E5B                        426     _DOLIT -1 ; -- e -1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002E5B CD 04 6F         [ 4]    1     CALL DOLIT 
      002E5E FF FF                    2     .word -1 
      002E60 81               [ 4]  427     RET 
                                    428 
                                    429 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    431 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    432 ;   called by NUMBER? 
                                    433 ;   convert string to float 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E61                        435     _HEADER FLOATQ,5,"FLOAT?"
      002E61 2D 55                    1         .word LINK 
                           002E63     2         LINK=.
      002E63 05                       3         .byte 5  
      002E64 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002E6A                          5         FLOATQ:
      002E6A                        436     _QBRAN FLOATQ0 
      002E6A CD 04 98         [ 4]    1     CALL QBRAN
      002E6D 2E 74                    2     .word FLOATQ0
      002E6F                        437     _BRAN FLOAT_ERROR  ; not a float, string start with '#'
      002E6F CD 04 B4         [ 4]    1     CALL BRAN 
      002E72 2F 13                    2     .word FLOAT_ERROR 
      002E74                        438 FLOATQ0:
                                    439 ; BASE must be 10 
      002E74 CD 06 4E         [ 4]  440     CALL BASE 
      002E77 CD 04 E3         [ 4]  441     CALL AT 
      002E7A                        442     _DOLIT 10 
      002E7A CD 04 6F         [ 4]    1     CALL DOLIT 
      002E7D 00 0A                    2     .word 10 
      002E7F CD 08 4E         [ 4]  443     CALL EQUAL 
      002E82                        444     _QBRAN FLOAT_ERROR 
      002E82 CD 04 98         [ 4]    1     CALL QBRAN
      002E85 2F 13                    2     .word FLOAT_ERROR
                                    445 ; if float next char is '.' or 'E' 
      002E87 CD 05 51         [ 4]  446     CALL TOR ; R: sign  
      002E8A CD 05 51         [ 4]  447     CALL TOR ; R: sign cntr 
      002E8D CD 05 88         [ 4]  448     CALL DUPP
      002E90 CD 05 01         [ 4]  449     CALL CAT 
      002E93                        450     _DOLIT '.' 
      002E93 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E96 00 2E                    2     .word '.' 
      002E98 CD 08 4E         [ 4]  451     CALL EQUAL 
      002E9B                        452     _QBRAN FLOATQ1 ; not a dot 
      002E9B CD 04 98         [ 4]    1     CALL QBRAN
      002E9E 2E D9                    2     .word FLOATQ1
      002EA0 CD 0A CB         [ 4]  453     CALL ONEP 
      002EA3 CD 05 34         [ 4]  454     CALL RFROM  ; dlo dhi a cntr R: sign  
      002EA6 CD 0A D8         [ 4]  455     CALL ONEM 
      002EA9 CD 05 88         [ 4]  456     CALL DUPP 
      002EAC CD 05 51         [ 4]  457     CALL TOR  ; R: sign cntr 
                                    458 ; parse fractional part
      002EAF CD 23 C2         [ 4]  459     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002EB2 CD 05 88         [ 4]  460     CALL DUPP 
      002EB5 CD 05 34         [ 4]  461     CALL RFROM 
      002EB8 CD 05 98         [ 4]  462     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002EBB CD 08 26         [ 4]  463     CALL SUBB ; fd -> fraction digits count 
      002EBE CD 05 51         [ 4]  464     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002EC1 CD 05 88         [ 4]  465     CALL DUPP ; cntr cntr  
      002EC4                        466     _QBRAN 1$ ; end of string, no exponent
      002EC4 CD 04 98         [ 4]    1     CALL QBRAN
      002EC7 2E CE                    2     .word 1$
      002EC9                        467     _BRAN FLOATQ2
      002EC9 CD 04 B4         [ 4]    1     CALL BRAN 
      002ECC 2E E2                    2     .word FLOATQ2 
      002ECE CD 05 98         [ 4]  468 1$: CALL SWAPP 
      002ED1 CD 05 7E         [ 4]  469     CALL DROP ; a
      002ED4                        470     _BRAN FLOATQ3        
      002ED4 CD 04 B4         [ 4]    1     CALL BRAN 
      002ED7 2E EA                    2     .word FLOATQ3 
      002ED9                        471 FLOATQ1: ; must push fd==0 on RSTACK 
      002ED9 CD 05 34         [ 4]  472     CALL RFROM ; cntr 
      002EDC CD 0B 37         [ 4]  473     CALL ZERO  ; fd 
      002EDF CD 05 51         [ 4]  474     CALL TOR   ; dm a cntr R: sign fd 
      002EE2                        475 FLOATQ2: 
      002EE2 CD 2E 02         [ 4]  476     CALL parse_exponent 
      002EE5                        477     _QBRAN FLOAT_ERROR0 ; exponent expected 
      002EE5 CD 04 98         [ 4]    1     CALL QBRAN
      002EE8 2F 10                    2     .word FLOAT_ERROR0
      002EEA                        478 FLOATQ3: ; dm 0 || dm e  
      002EEA CD 05 34         [ 4]  479     CALL RFROM ;  fd  
      002EED CD 08 26         [ 4]  480     CALL SUBB  ; exp=e-fd 
      002EF0 CD 07 6B         [ 4]  481     CALL NROT 
      002EF3 CD 05 34         [ 4]  482     CALL RFROM  ; sign 
      002EF6                        483     _QBRAN FLOATQ4 
      002EF6 CD 04 98         [ 4]    1     CALL QBRAN
      002EF9 2E FE                    2     .word FLOATQ4
      002EFB CD 07 EA         [ 4]  484     CALL DNEGA 
      002EFE                        485 FLOATQ4:
      002EFE CD 07 4C         [ 4]  486     CALL ROT 
      002F01 CD 2C 3B         [ 4]  487     CALL STEXP 
      002F04 CD 07 4C         [ 4]  488     CALL ROT 
      002F07 CD 05 7E         [ 4]  489     CALL DROP 
      002F0A                        490     _DOLIT -3 
      002F0A CD 04 6F         [ 4]    1     CALL DOLIT 
      002F0D FF FD                    2     .word -3 
      002F0F 81               [ 4]  491     RET       
      002F10                        492 FLOAT_ERROR0: 
      002F10 CD 27 E0         [ 4]  493     CALL DRFROM ; sign df      
      002F13                        494 FLOAT_ERROR: 
      002F13 CD 0B 79         [ 4]  495     CALL DEPTH 
      002F16 CD 0A BE         [ 4]  496     CALL CELLS 
      002F19 CD 05 68         [ 4]  497     CALL SPAT 
      002F1C CD 05 98         [ 4]  498     CALL SWAPP 
      002F1F CD 07 AD         [ 4]  499     CALL PLUS  
      002F22 CD 05 75         [ 4]  500     CALL SPSTO 
      002F25                        501     _DOLIT 0 
      002F25 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F28 00 00                    2     .word 0 
      002F2A 81               [ 4]  502     RET 
                                    503 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    505 ;  LSCALE ( f# -- f# )
                                    506 ;  m *=fbase , e -= 1
                                    507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F2B                        508     _HEADER LSCALE,6,"LSCALE"
      002F2B 2E 63                    1         .word LINK 
                           002F2D     2         LINK=.
      002F2D 06                       3         .byte 6  
      002F2E 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      002F34                          5         LSCALE:
      002F34 CD 2B F6         [ 4]  509     CALL ATEXP 
      002F37                        510     _DOLIT 1 
      002F37 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F3A 00 01                    2     .word 1 
      002F3C CD 08 26         [ 4]  511     CALL SUBB 
      002F3F CD 05 51         [ 4]  512     CALL TOR
      002F42                        513     _DOLIT 10 
      002F42 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F45 00 0A                    2     .word 10 
      002F47 CD 25 FC         [ 4]  514     CALL DSSTAR
      002F4A CD 05 34         [ 4]  515     CALL RFROM 
      002F4D CD 2C 3B         [ 4]  516     CALL STEXP 
      002F50 81               [ 4]  517     RET  
                                    518 
                                    519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    520 ;  RSCALE ( f# -- f# )
                                    521 ;  m /=fbase , e+=1 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F51                        523     _HEADER RSCALE,6,"RSCALE"
      002F51 2F 2D                    1         .word LINK 
                           002F53     2         LINK=.
      002F53 06                       3         .byte 6  
      002F54 52 53 43 41 4C 45        4         .ascii "RSCALE"
      002F5A                          5         RSCALE:
      002F5A CD 2B F6         [ 4]  524     CALL ATEXP 
      002F5D                        525     _DOLIT 1 
      002F5D CD 04 6F         [ 4]    1     CALL DOLIT 
      002F60 00 01                    2     .word 1 
      002F62 CD 07 AD         [ 4]  526     CALL PLUS 
      002F65 CD 05 51         [ 4]  527     CALL TOR 
      002F68                        528     _DOLIT 10 
      002F68 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F6B 00 0A                    2     .word 10 
      002F6D CD 25 54         [ 4]  529     CALL DSLMOD 
      002F70 CD 07 4C         [ 4]  530     CALL ROT 
      002F73 CD 05 7E         [ 4]  531     CALL DROP 
      002F76 CD 05 34         [ 4]  532     CALL RFROM 
      002F79 CD 2C 3B         [ 4]  533     CALL STEXP 
      002F7C 81               [ 4]  534     RET 
                                    535 
                                    536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    537 ;   SCALE>M ( ud1 -- e ud2 )
                                    538 ;   scale down a double  
                                    539 ;   by repeated d/10
                                    540 ;   until ud<=MAX_MANTISSA   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                                    541 ;   e is log10 exponent of scaled down
                                    542 ;   ud2 is scaled down ud1 
                                    543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F7D                        544     _HEADER SCALETOM,7,"SCALE>M"
      002F7D 2F 53                    1         .word LINK 
                           002F7F     2         LINK=.
      002F7F 07                       3         .byte 7  
      002F80 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      002F87                          5         SCALETOM:
      002F87 CD 0B 37         [ 4]  545     CALL ZERO 
      002F8A CD 07 6B         [ 4]  546     CALL NROT 
      002F8D                        547 SCAL1:
      002F8D CD 05 88         [ 4]  548     CALL DUPP 
      002F90                        549     _DOLIT 0X7F 
      002F90 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F93 00 7F                    2     .word 0X7F 
      002F95 CD 08 AA         [ 4]  550     CALL UGREAT 
      002F98                        551     _QBRAN SCAL2  
      002F98 CD 04 98         [ 4]    1     CALL QBRAN
      002F9B 2F B9                    2     .word SCAL2
      002F9D                        552     _DOLIT 10 
      002F9D CD 04 6F         [ 4]    1     CALL DOLIT 
      002FA0 00 0A                    2     .word 10 
      002FA2 CD 25 54         [ 4]  553     CALL DSLMOD 
      002FA5 CD 07 4C         [ 4]  554     CALL ROT  
      002FA8 CD 05 7E         [ 4]  555     CALL DROP
      002FAB CD 07 4C         [ 4]  556     CALL ROT 
      002FAE CD 0A CB         [ 4]  557     CALL ONEP 
      002FB1 CD 07 6B         [ 4]  558     CALL NROT  
      002FB4                        559     _BRAN SCAL1 
      002FB4 CD 04 B4         [ 4]    1     CALL BRAN 
      002FB7 2F 8D                    2     .word SCAL1 
      002FB9                        560 SCAL2: 
      002FB9 81               [ 4]  561     RET 
                                    562 
                                    563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    564 ;  UDIV10 ( ut -- ut )
                                    565 ;  divide a 48 bits uint by 10 
                                    566 ;  used to scale down MM* 
                                    567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FBA                        568 UDIV10:
      002FBA 90 93            [ 1]  569     LDW Y,X 
      002FBC 90 FE            [ 2]  570     LDW Y,(Y)
      002FBE A6 0A            [ 1]  571     LD A,#10 
      002FC0 90 62            [ 2]  572     DIV Y,A 
      002FC2 FF               [ 2]  573     LDW (X),Y 
      002FC3 90 95            [ 1]  574     LD YH,A 
      002FC5 E6 02            [ 1]  575     LD A,(2,X)
      002FC7 90 97            [ 1]  576     LD YL,A 
      002FC9 A6 0A            [ 1]  577     LD A,#10 
      002FCB 90 62            [ 2]  578     DIV Y,A 
      002FCD 90 95            [ 1]  579     LD YH,A 
      002FCF 90 9F            [ 1]  580     LD A,YL 
      002FD1 E7 02            [ 1]  581     LD (2,X),A 
      002FD3 E6 03            [ 1]  582     LD A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002FD5 90 97            [ 1]  583     LD YL,A 
      002FD7 A6 0A            [ 1]  584     LD A,#10 
      002FD9 90 62            [ 2]  585     DIV Y,A 
      002FDB 90 95            [ 1]  586     LD YH,A 
      002FDD 90 9F            [ 1]  587     LD A,YL 
      002FDF E7 03            [ 1]  588     LD (3,X),A 
      002FE1 E6 04            [ 1]  589     LD A,(4,X)
      002FE3 90 97            [ 1]  590     LD YL,A 
      002FE5 A6 0A            [ 1]  591     LD A,#10 
      002FE7 90 62            [ 2]  592     DIV Y,A 
      002FE9 90 95            [ 1]  593     LD YH,A 
      002FEB 90 9F            [ 1]  594     LD A,YL 
      002FED E7 04            [ 1]  595     LD (4,X),A 
      002FEF E6 05            [ 1]  596     LD A,(5,X)
      002FF1 90 97            [ 1]  597     LD YL,A 
      002FF3 A6 0A            [ 1]  598     LD A,#10 
      002FF5 90 62            [ 2]  599     DIV Y,A 
      002FF7 90 9F            [ 1]  600     LD A,YL 
      002FF9 E7 05            [ 1]  601     LD (5,X),A 
      002FFB 81               [ 4]  602     RET 
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;   MM* ( m1 m2 -- m3 e )
                                    606 ;   mantissa product 
                                    607 ;  scale down to 23 bits 
                                    608 ;   e  is log10 scaling factor.
                                    609 ;   The maximum product size 
                                    610 ;   before scaling is 46 bits .
                                    611 ;   UDIV10 is used to scale down.  
                                    612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FFC                        613     _HEADER MMSTAR,3,"MM*"
      002FFC 2F 7F                    1         .word LINK 
                           002FFE     2         LINK=.
      002FFE 03                       3         .byte 3  
      002FFF 4D 4D 2A                 4         .ascii "MM*"
      003002                          5         MMSTAR:
      003002 CD 07 98         [ 4]  614     CALL DDUP
      003005 CD 24 DC         [ 4]  615     CALL DZEQUAL
      003008                        616     _TBRAN MMSTA2
      003008 CD 04 A6         [ 4]    1     CALL TBRAN 
      00300B 30 18                    2     .word MMSTA2 
      00300D                        617 MMSTA1:
      00300D CD 28 89         [ 4]  618     CALL DOVER 
      003010 CD 24 DC         [ 4]  619     CALL DZEQUAL 
      003013                        620     _QBRAN MMSTA3 
      003013 CD 04 98         [ 4]    1     CALL QBRAN
      003016 30 23                    2     .word MMSTA3
      003018                        621 MMSTA2: ; ( -- 0 0 0 )
      003018 1C 00 02         [ 2]  622     ADDW X,#2 
      00301B 90 5F            [ 1]  623     CLRW Y 
      00301D FF               [ 2]  624     LDW (X),Y 
      00301E EF 02            [ 2]  625     LDW (2,X),Y
      003020 EF 04            [ 2]  626     LDW (4,X),Y 
      003022 81               [ 4]  627     RET 
      003023                        628 MMSTA3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      003023 CD 25 3B         [ 4]  629     CALL DSIGN 
      003026 CD 05 51         [ 4]  630     CALL TOR    ; R: m2sign 
      003029 CD 25 24         [ 4]  631     CALL DABS   ; m1 um2 
      00302C CD 26 45         [ 4]  632     CALL DSWAP  ; um2 m1 
      00302F CD 25 3B         [ 4]  633     CALL DSIGN  ; um2 m1 m1sign 
      003032 CD 05 34         [ 4]  634     CALL RFROM 
      003035 CD 06 0E         [ 4]  635     CALL XORR 
      003038 CD 05 51         [ 4]  636     CALL TOR   ; R: product_sign 
      00303B CD 25 24         [ 4]  637     CALL DABS  ; um2 um1  
      00303E CD 27 C2         [ 4]  638     CALL DTOR  ; um2 
      003041 CD 05 88         [ 4]  639     CALL DUPP  ; um2 um2hi 
      003044 CD 05 45         [ 4]  640     CALL RAT   ; um2 um2hi um1hi
                                    641 ; first partial product  
                                    642 ; pd1=um2hi*um1hi 
      003047 CD 0A 4A         [ 4]  643     CALL STAR 
      00304A CD 0B 37         [ 4]  644     CALL ZERO 
      00304D CD 05 98         [ 4]  645     CALL SWAPP ; pd1<<16  
      003050 CD 26 45         [ 4]  646     CALL DSWAP ; pd1 um2 
      003053 CD 05 B0         [ 4]  647     CALL OVER  ; pd1 um2 um2lo 
      003056 CD 05 34         [ 4]  648     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    649 ; pd2=um2lo*um1hi 
      003059 CD 0A 00         [ 4]  650     CALL UMSTA ; pd1 um2 pd2 
      00305C CD 26 45         [ 4]  651     CALL DSWAP ; pd1 pd2 um2 
      00305F CD 05 45         [ 4]  652     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    653 ; pd3= um2hi*um1lo 
      003062 CD 0A 00         [ 4]  654     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003065 CD 07 4C         [ 4]  655     CALL ROT ; pd1 pd2 pd3 um2lo 
      003068 CD 05 51         [ 4]  656     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    657 ; pd1+pd2+pd3  pd1
      00306B CD 2A 89         [ 4]  658     CALL DPLUS 
      00306E CD 2A 89         [ 4]  659     CALL DPLUS  
      003071 CD 27 E0         [ 4]  660     CALL DRFROM ; triple um2lo um1lo 
                                    661 ; last partial product um2lo*um1lo 
      003074 CD 0A 00         [ 4]  662     CALL UMSTA ; prod pd4 
                                    663 ; mm*=prod<<16+pd4  
      003077 CD 27 C2         [ 4]  664     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    665  ; add pd4hi to prodlo and propagate carry 
      00307A 90 93            [ 1]  666     LDW Y,X 
      00307C 90 EE 02         [ 2]  667     LDW Y,(2,Y)  ; prodlo 
      00307F 72 F9 01         [ 2]  668     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      003082 17 01            [ 2]  669     LDW (1,SP),Y    ; plo phi  
      003084 90 93            [ 1]  670     LDW Y,X
      003086 90 FE            [ 2]  671     LDW Y,(Y) ; prodhi  
      003088 24 04            [ 1]  672     JRNC MMSTA4
      00308A 72 A9 00 01      [ 2]  673     ADDW Y,#1 ; add carry 
      00308E                        674 MMSTA4:     
      00308E 1D 00 02         [ 2]  675     SUBW X,#2 
      003091 FF               [ 2]  676     LDW (X),Y 
      003092 90 85            [ 2]  677     POPW Y 
      003094 EF 02            [ 2]  678     LDW (2,X),Y 
      003096 90 85            [ 2]  679     POPW Y 
      003098 EF 04            [ 2]  680     LDW (4,X),Y
      00309A CD 0B 37         [ 4]  681     CALL ZERO 
      00309D CD 05 51         [ 4]  682     CALL TOR 
      0030A0                        683 MMSTA5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      0030A0 CD 07 3B         [ 4]  684     CALL QDUP 
      0030A3                        685     _QBRAN MMSTA6 
      0030A3 CD 04 98         [ 4]    1     CALL QBRAN
      0030A6 30 B9                    2     .word MMSTA6
      0030A8 CD 2F BA         [ 4]  686     CALL UDIV10 
      0030AB CD 05 34         [ 4]  687     CALL RFROM 
      0030AE CD 0A CB         [ 4]  688     CALL ONEP 
      0030B1 CD 05 51         [ 4]  689     CALL TOR 
      0030B4                        690     _BRAN MMSTA5 
      0030B4 CD 04 B4         [ 4]    1     CALL BRAN 
      0030B7 30 A0                    2     .word MMSTA5 
                                    691 ; now scale to double 
                                    692 ; scale further <= MAX_MANTISSA 
      0030B9                        693 MMSTA6: 
      0030B9 CD 05 34         [ 4]  694     CALL RFROM 
      0030BC CD 07 6B         [ 4]  695     CALL NROT 
      0030BF CD 2F 87         [ 4]  696     CALL SCALETOM
      0030C2 CD 27 C2         [ 4]  697     CALL DTOR 
      0030C5 CD 07 AD         [ 4]  698     CALL PLUS 
      0030C8 CD 27 E0         [ 4]  699     CALL DRFROM 
      0030CB CD 05 34         [ 4]  700     CALL RFROM
      0030CE                        701     _QBRAN MMSTA7
      0030CE CD 04 98         [ 4]    1     CALL QBRAN
      0030D1 30 D6                    2     .word MMSTA7
      0030D3 CD 07 EA         [ 4]  702     CALL DNEGA
      0030D6                        703 MMSTA7:
      0030D6 CD 07 4C         [ 4]  704     CALL ROT ; m e 
      0030D9 81               [ 4]  705     RET 
                                    706 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    708 ;    F* ( f#1 f#2 -- f#3 )
                                    709 ;    float product 
                                    710 ;    f#3=f#1 * f#2 
                                    711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030DA                        712     _HEADER FSTAR,2,"F*"
      0030DA 2F FE                    1         .word LINK 
                           0030DC     2         LINK=.
      0030DC 02                       3         .byte 2  
      0030DD 46 2A                    4         .ascii "F*"
      0030DF                          5         FSTAR:
      0030DF CD 2B F6         [ 4]  713     CALL ATEXP ; f#1 m2 e2 
      0030E2 CD 05 51         [ 4]  714     CALL TOR   
      0030E5 CD 26 45         [ 4]  715     CALL DSWAP ; m2 f#1
      0030E8 CD 2B F6         [ 4]  716     CALL ATEXP ; m2 m1 e1 
      0030EB CD 05 34         [ 4]  717     CALL RFROM ; m2 m1 e1 e2 
      0030EE CD 07 AD         [ 4]  718     CALL PLUS  ; m2 m1 e 
      0030F1 CD 05 51         [ 4]  719     CALL TOR   ; m2 m1 R: e 
      0030F4 CD 30 02         [ 4]  720     CALL MMSTAR ; m2*m1 e   
      0030F7 CD 05 34         [ 4]  721     CALL RFROM 
      0030FA CD 07 AD         [ 4]  722     CALL PLUS 
      0030FD CD 2C 3B         [ 4]  723     CALL STEXP ; f#3 
      003100 81               [ 4]  724     RET 
                                    725 
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    727 ;  F/ ( f#1 f#2 -- f#3 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                    728 ;  float division
                                    729 ;  f#3 = f#1/f#2
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003101                        731     _HEADER FSLASH,2,"F/"
      003101 30 DC                    1         .word LINK 
                           003103     2         LINK=.
      003103 02                       3         .byte 2  
      003104 46 2F                    4         .ascii "F/"
      003106                          5         FSLASH:
      003106 CD 2B F6         [ 4]  732     CALL ATEXP  ; f#1 m2 e2  
      003109 CD 05 51         [ 4]  733     CALL TOR    ; f#1 m2   R: e2 
      00310C CD 26 45         [ 4]  734     CALL DSWAP  ; m2 f#1 
      00310F CD 2B F6         [ 4]  735     CALL ATEXP  ; m2 m1 e1 
      003112 CD 05 34         [ 4]  736     CALL RFROM  ; m2 m1 e1 e2
      003115 CD 07 AD         [ 4]  737     CALL PLUS   ; m2 m1 e 
      003118 CD 05 51         [ 4]  738     CALL TOR    ; m2 m1 R: e 
      00311B CD 26 45         [ 4]  739     CALL DSWAP  ; m1 m2 R: e
      00311E CD 07 98         [ 4]  740     CALL DDUP  ; m1 m2 m2 R: e
      003121 CD 27 C2         [ 4]  741     CALL DTOR  ; m1 m2 R: e m2 ( keep divisor need later ) 
      003124 CD 29 92         [ 4]  742     CALL DDSLMOD ; remainder m1/m2 R: e m2 
      003127 CD 28 89         [ 4]  743     CALL DOVER ; if remainder null done 
      00312A CD 24 DC         [ 4]  744     CALL DZEQUAL 
      00312D                        745     _TBRAN FSLASH8 
      00312D CD 04 A6         [ 4]    1     CALL TBRAN 
      003130 31 89                    2     .word FSLASH8 
                                    746 ; get fractional digits from remainder until mantissa saturate
      003132                        747 FSLASH1: ; remainder mantissa R: e divisor 
                                    748 ; check for mantissa saturation 
      003132 CD 07 98         [ 4]  749     CALL DDUP 
      003135                        750     _DOLIT 0XCCCC 
      003135 CD 04 6F         [ 4]    1     CALL DOLIT 
      003138 CC CC                    2     .word 0XCCCC 
      00313A                        751     _DOLIT 0xC
      00313A CD 04 6F         [ 4]    1     CALL DOLIT 
      00313D 00 0C                    2     .word 0xC 
      00313F CD 27 3A         [ 4]  752     CALL DGREAT 
      003142                        753     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      003142 CD 04 A6         [ 4]    1     CALL TBRAN 
      003145 31 89                    2     .word FSLASH8 
                                    754 ; multiply mantissa by 10 
      003147                        755     _DOLIT 10 
      003147 CD 04 6F         [ 4]    1     CALL DOLIT 
      00314A 00 0A                    2     .word 10 
      00314C CD 0B 37         [ 4]  756     CALL ZERO 
      00314F CD 29 2F         [ 4]  757     CALL DSTAR 
                                    758 ; mutliply remainder by 10     
      003152 CD 26 45         [ 4]  759     CALL DSWAP 
      003155                        760     _DOLIT 10 
      003155 CD 04 6F         [ 4]    1     CALL DOLIT 
      003158 00 0A                    2     .word 10 
      00315A CD 0B 37         [ 4]  761     CALL ZERO 
      00315D CD 29 2F         [ 4]  762     CALL DSTAR 
                                    763 ; divide remainder by m2     
      003160 CD 27 F8         [ 4]  764     CALL DRAT 
      003163 CD 29 92         [ 4]  765     CALL DDSLMOD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      003166 CD 26 45         [ 4]  766     CALL DSWAP ; mantissa frac_digit remainder R: e divisor  
      003169 CD 27 C2         [ 4]  767     CALL DTOR  ; mantissa frac_digit R: e divisor remainder 
      00316C CD 2A 89         [ 4]  768     CALL DPLUS ; mantissa+frac_digit 
      00316F CD 27 E0         [ 4]  769     CALL DRFROM ; mantissa remainder 
      003172 CD 27 E0         [ 4]  770     CALL DRFROM ; mantissa remainder divisor 
      003175 CD 05 34         [ 4]  771     CALL RFROM  ; mantissa remainder divisor e 
      003178 CD 0A D8         [ 4]  772     CALL ONEM   ; decrement exponent 
      00317B CD 05 51         [ 4]  773     CALL TOR    ; mantissa remainder divisor R: e 
      00317E CD 27 C2         [ 4]  774     CALL DTOR   ; mantissa remainder R: e divisor 
      003181 CD 26 45         [ 4]  775     CALL DSWAP  ; remainder mantissa  
      003184                        776     _BRAN FSLASH1
      003184 CD 04 B4         [ 4]    1     CALL BRAN 
      003187 31 32                    2     .word FSLASH1 
      003189                        777 FSLASH8: ; remainder mantissa R: e divisor 
      003189 CD 26 45         [ 4]  778     CALL DSWAP  
      00318C CD 07 8D         [ 4]  779     CALL DDROP  ; drop remainder     
      00318F CD 27 E0         [ 4]  780     CALL DRFROM
      003192 CD 07 8D         [ 4]  781     CALL DDROP  ; drop divisor 
      003195 CD 05 34         [ 4]  782     CALL RFROM  ; exponent 
      003198 CD 2C 3B         [ 4]  783     CALL STEXP 
      00319B 81               [ 4]  784     RET 
                                    785 
                                    786 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    787 ;   D>F  ( # -- f# )
                                    788 ;   convert double to float 
                                    789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00319C                        790     _HEADER DTOF,3,"D>F"
      00319C 31 03                    1         .word LINK 
                           00319E     2         LINK=.
      00319E 03                       3         .byte 3  
      00319F 44 3E 46                 4         .ascii "D>F"
      0031A2                          5         DTOF:
      0031A2 CD 25 3B         [ 4]  791     CALL DSIGN 
      0031A5 CD 05 51         [ 4]  792     CALL TOR
      0031A8 CD 25 24         [ 4]  793     CALL DABS  
      0031AB                        794 DTOF1:      
      0031AB CD 2F 87         [ 4]  795     CALL SCALETOM 
      0031AE CD 05 34         [ 4]  796     CALL RFROM
      0031B1                        797     _QBRAN DTOF2 
      0031B1 CD 04 98         [ 4]    1     CALL QBRAN
      0031B4 31 B9                    2     .word DTOF2
      0031B6 CD 24 FA         [ 4]  798     CALL DNEGAT 
      0031B9                        799 DTOF2: 
      0031B9 CD 07 4C         [ 4]  800     CALL ROT 
      0031BC CD 2C 3B         [ 4]  801     CALL STEXP 
      0031BF 81               [ 4]  802     RET 
                                    803 
                                    804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    805 ;   F>D  ( f# -- # )
                                    806 ;  convert float to double 
                                    807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031C0                        808     _HEADER FTOD,3,"F>D"
      0031C0 31 9E                    1         .word LINK 
                           0031C2     2         LINK=.
      0031C2 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0031C3 46 3E 44                 4         .ascii "F>D"
      0031C6                          5         FTOD:
      0031C6 CD 2B F6         [ 4]  809     CALL ATEXP ; m e 
      0031C9 CD 07 3B         [ 4]  810     CALL QDUP
      0031CC                        811     _QBRAN FTOD9
      0031CC CD 04 98         [ 4]    1     CALL QBRAN
      0031CF 32 5C                    2     .word FTOD9
      0031D1 CD 05 51         [ 4]  812     CALL TOR 
      0031D4 CD 25 3B         [ 4]  813     CALL DSIGN 
      0031D7 CD 07 6B         [ 4]  814     CALL NROT 
      0031DA CD 25 24         [ 4]  815     CALL DABS
      0031DD CD 05 34         [ 4]  816     CALL RFROM  
      0031E0 CD 05 88         [ 4]  817     CALL DUPP   
      0031E3 CD 05 BF         [ 4]  818     CALL ZLESS 
      0031E6                        819     _QBRAN FTOD4 
      0031E6 CD 04 98         [ 4]    1     CALL QBRAN
      0031E9 32 24                    2     .word FTOD4
                                    820 ; negative exponent 
      0031EB CD 08 40         [ 4]  821     CALL ABSS 
      0031EE CD 05 51         [ 4]  822     CALL TOR
      0031F1                        823     _BRAN FTOD2  
      0031F1 CD 04 B4         [ 4]    1     CALL BRAN 
      0031F4 32 0F                    2     .word FTOD2 
      0031F6                        824 FTOD1:
      0031F6 CD 07 98         [ 4]  825     CALL DDUP 
      0031F9 CD 24 DC         [ 4]  826     CALL DZEQUAL 
      0031FC                        827     _TBRAN FTOD3 
      0031FC CD 04 A6         [ 4]    1     CALL TBRAN 
      0031FF 32 19                    2     .word FTOD3 
      003201                        828     _DOLIT 10 
      003201 CD 04 6F         [ 4]    1     CALL DOLIT 
      003204 00 0A                    2     .word 10 
      003206 CD 25 54         [ 4]  829     CALL DSLMOD 
      003209 CD 07 4C         [ 4]  830     CALL ROT 
      00320C CD 05 7E         [ 4]  831     CALL DROP
      00320F                        832 FTOD2:      
      00320F                        833     _DONXT FTOD1
      00320F CD 04 83         [ 4]    1     CALL DONXT 
      003212 31 F6                    2     .word FTOD1 
      003214                        834     _BRAN FTOD8   
      003214 CD 04 B4         [ 4]    1     CALL BRAN 
      003217 32 51                    2     .word FTOD8 
      003219                        835 FTOD3: 
      003219 CD 05 34         [ 4]  836     CALL RFROM 
      00321C CD 05 7E         [ 4]  837     CALL DROP 
      00321F                        838     _BRAN FTOD8  
      00321F CD 04 B4         [ 4]    1     CALL BRAN 
      003222 32 51                    2     .word FTOD8 
                                    839 ; positive exponent 
      003224                        840 FTOD4:
      003224 CD 05 51         [ 4]  841     CALL TOR 
      003227                        842     _BRAN FTOD6
      003227 CD 04 B4         [ 4]    1     CALL BRAN 
      00322A 32 4C                    2     .word FTOD6 
      00322C                        843 FTOD5:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00322C CD 07 98         [ 4]  844     CALL DDUP 
      00322F                        845     _DOLIT 0XCCCC
      00322F CD 04 6F         [ 4]    1     CALL DOLIT 
      003232 CC CC                    2     .word 0XCCCC 
      003234                        846     _DOLIT 0XCCC  
      003234 CD 04 6F         [ 4]    1     CALL DOLIT 
      003237 0C CC                    2     .word 0XCCC 
      003239 CD 27 3A         [ 4]  847     CALL DGREAT 
      00323C                        848     _TBRAN FTOD3 
      00323C CD 04 A6         [ 4]    1     CALL TBRAN 
      00323F 32 19                    2     .word FTOD3 
      003241                        849     _DOLIT 10 
      003241 CD 04 6F         [ 4]    1     CALL DOLIT 
      003244 00 0A                    2     .word 10 
      003246 CD 0B 37         [ 4]  850     CALL ZERO 
      003249 CD 29 2F         [ 4]  851     CALL DSTAR 
      00324C                        852 FTOD6: 
      00324C                        853     _DONXT FTOD5 
      00324C CD 04 83         [ 4]    1     CALL DONXT 
      00324F 32 2C                    2     .word FTOD5 
      003251                        854 FTOD8:
      003251 CD 07 4C         [ 4]  855     CALL ROT 
      003254                        856     _QBRAN FTOD9 
      003254 CD 04 98         [ 4]    1     CALL QBRAN
      003257 32 5C                    2     .word FTOD9
      003259 CD 07 EA         [ 4]  857     CALL DNEGA
      00325C                        858 FTOD9:          
      00325C 81               [ 4]  859     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   4551 .endif 
                                   4552 
                                   4553 ;===============================================================
                                   4554 
                           0031C2  4555 LASTN =	LINK   ;last name defined
                                   4556 
                                   4557 ; application code begin here
      003280                       4558 	.bndry 128 ; align on flash block  
      003280                       4559 app_space: 
                                   4560 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000849 R   |   6 ABOR1      001321 R
  6 ABOR2      001338 R   |   6 ABORQ      001319 R   |   6 ABORT      00130A R
  6 ABRTQ      0015F5 R   |   6 ABSS       000840 R   |   6 ACCEP      0012A0 R
  6 ACCP1      0012A9 R   |   6 ACCP2      0012CF R   |   6 ACCP3      0012D2 R
  6 ACCP4      0012D4 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00072B R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0015E0 R   |   6 AGAIN      001536 R   |   6 AHEAD      001593 R
  6 ALLOT      001449 R   |   6 ANDD       0005E5 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004E3 R   |   6 ATEXE      000C4A R   |   6 ATEXP      002BF6 R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001248 R   |   6 BASE       00064E R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      00148B R   |   6 BDIGS      000D31 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001518 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      00109D R   |   6 BKSP       001218 R   |     BKSPP   =  000008 
  6 BLANK      000B2A R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B4 R   |     BTW     =  000001 
  6 BUF2ROW    00205D R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022A6 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000501 R   |   6 CCOMMA     00146D R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000AAF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000AA0 R   |   6 CELLS      000ABE R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000E87 R
  6 CHAR2      000E8A R   |   6 CHKIVEC    001F4B R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000C69 R
  6 CMOV2      000C81 R   |   6 CMOVE      000C61 R   |     CNTDWN  =  000032 
  6 CNTXT      0006D1 R   |   6 COLD       001A4C R   |   6 COLD1      001A4C R
  6 COLON      00179E R   |   6 COMMA      001456 R   |   6 COMPI      00149B R
    COMPO   =  000040     |   6 CONSTANT   001848 R   |   6 COUNT      000BFD R
  6 CPP        0006ED R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EAF R   |   6 CREAT      0017E4 R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     0022C7 R   |   6 CTAT       0022E8 R
  6 CTINIT     002310 R   |   6 D2SLASH    0028A2 R   |   6 D2STAR     0028B9 R
  6 DABS       002524 R   |   6 DABS1      002532 R   |   6 DAT        000BE1 R
    DATSTK  =  001680     |   6 DCLZ       002673 R   |   6 DCLZ1      00267C R
  6 DCLZ4      002685 R   |   6 DCLZ8      002692 R   |   6 DCMP       002790 R
  6 DCMP2      00279C R   |   6 DCMP4      0027B7 R   |   6 DCMP_EQU   0027A9 R
  6 DCMP_GRE   0027B3 R   |   6 DCMP_SMA   0027AD R   |   6 DCONST     00187D R
  6 DDIG       002595 R   |   6 DDIGS      0025AE R   |   6 DDOT       0025C5 R
  6 DDOT0      0025D9 R   |   6 DDOT1      0025EF R   |   6 DDROP      00078D R
  6 DDSLMOD    002992 R   |   6 DDSTAR3    002988 R   |   6 DDUP       000798 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000DE1 R
  6 DEPTH      000B79 R   |   6 DEQU4      00272E R   |   6 DEQUAL     002719 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     00273A R
  6 DGREAT4    00274F R   |   6 DGTQ1      000E26 R   |   6 DI         0000C4 R
  6 DIG        000D5A R   |   6 DIGIT      000CF5 R   |   6 DIGS       000D6B R
  6 DIGS1      000D6B R   |   6 DIGS2      000D78 R   |   6 DIGTQ      000DF5 R
    DISCOVER=  000000     |   6 DLESS      00275B R   |   6 DLESS4     002771 R
  6 DLITER     002862 R   |   6 DLSHIFT    0028D5 R   |   6 DLSHIFT1   0028E6 R
  6 DLSHIFT2   0028FB R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        000807 R   |   6 DNEG1      002519 R   |   6 DNEGA      0007EA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGAT     0024FA R   |   6 DOCONST    001868 R   |   6 DOLIT      00046F R
  6 DONXT      000483 R   |     DOORBELL=  000000     |   6 DOSTR      000EBF R
  6 DOT        000F56 R   |   6 DOT1       000F6C R   |   6 DOTI1      0019CD R
  6 DOTID      0019B7 R   |   6 DOTO1      0013AD R   |   6 DOTOK      001393 R
  6 DOTPR      00107F R   |   6 DOTQ       00160F R   |   6 DOTQP      000EDC R
  6 DOTR       000EEA R   |   6 DOTS       001959 R   |   6 DOTS1      001964 R
  6 DOTS2      00196D R   |   6 DOVAR      00063E R   |   6 DOVER      002889 R
  6 DO_DCONS   0018A0 R   |   6 DPLUS      002A89 R   |   6 DPLUS1     002AB0 R
  6 DRAT       0027F8 R   |   6 DRFROM     0027E0 R   |   6 DROP       00057E R
  6 DROT       0026DF R   |   6 DRSHIFT    00290C R   |   6 DRSHIFT1   002913 R
  6 DRSHIFT2   002929 R   |   6 DSIGN      00253B R   |   6 DSIGN1     002545 R
  6 DSLA1      0029AC R   |   6 DSLA2      0029CE R   |   6 DSLA3      002A0E R
  6 DSLA4      002A34 R   |   6 DSLA7      002A65 R   |   6 DSLA8      002A68 R
  6 DSLA9      002A83 R   |   6 DSLMOD     002554 R   |   6 DSLMOD3    00256F R
  6 DSLMOD4    00257B R   |   6 DSLMODa    002576 R   |   6 DSLMODb    002581 R
  6 DSSTAR     0025FC R   |   6 DSSTAR1    002613 R   |   6 DSSTAR3    00263C R
  6 DSTAR      00292F R   |   6 DSTOR      000BC8 R   |   6 DSUB       002ABB R
  6 DSUB1      002AE2 R   |   6 DSWAP      002645 R   |   6 DTOF       0031A2 R
  6 DTOF1      0031AB R   |   6 DTOF2      0031B9 R   |   6 DTOR       0027C2 R
  6 DUMP       00190F R   |   6 DUMP1      001926 R   |   6 DUMP3      001948 R
  6 DUMPP      0018DE R   |   6 DUPP       000588 R   |   6 DVARIA     002816 R
  6 DZEQUAL    0024DC R   |   6 DZLESS     002778 R   |   6 DZLESS1    002782 R
  6 EDIGS      000D96 R   |   6 EDOT       002CBA R   |   6 EDOT0      002CD1 R
  6 EDOT1      002CDF R   |   6 EDOT2      002CE5 R   |   6 EDOT3      002CFE R
  6 EDOT4      002D2D R   |   6 EDOT5      002D49 R   |   6 EECSTORE   001CFC R
  6 EEPCP      001B22 R   |   6 EEPLAST    001AF5 R   |   6 EEPROM     001ADD R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001B0C R   |   6 EEPVP      001B38 R
  6 EESTORE    001D48 R   |   6 EE_CCOMM   002012 R   |   6 EE_COMMA   001FF1 R
  6 EE_CREAD   001C8D R   |   6 EE_READ    001C6B R   |   6 EI         0000BD R
  6 ELSEE      00156E R   |   6 EMIT       000436 R   |   6 ENEPER     002232 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000864 R
  6 EQUAL      00084E R   |   6 ERASE      000CC3 R   |     ERR     =  00001B 
  6 EVAL       0013D6 R   |   6 EVAL1      0013D6 R   |   6 EVAL2      0013F2 R
  6 EXE1       000C58 R   |   6 EXECU      0004C4 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000D1D R
  6 FADDR      0020DF R   |   6 FARAT      001BA3 R   |   6 FARCAT     001BAF R
  6 FC_XOFF    000463 R   |   6 FC_XON     00044D R   |   6 FDOT       002D58 R
  6 FDOT0      002D96 R   |   6 FDOT1      002D85 R   |   6 FDOT10     002DF2 R
  6 FDOT2      002DA4 R   |   6 FDOT3      002DBD R   |   6 FDOT6      002DCD R
  6 FDOT7      002DD2 R   |   6 FDOT8      002DDA R   |   6 FDOT9      002DE2 R
  6 FER        002B1F R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000C90 R   |   6 FILL1      000CAD R   |   6 FILL2      000CB6 R
  6 FIND       001174 R   |   6 FIND1      001192 R   |   6 FIND2      0011C0 R
  6 FIND3      0011CC R   |   6 FIND4      0011E0 R   |   6 FIND5      0011ED R
  6 FIND6      0011D1 R   |   6 FINIT      002B15 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLOATQ     002E6A R
  6 FLOATQ0    002E74 R   |   6 FLOATQ1    002ED9 R   |   6 FLOATQ2    002EE2 R
  6 FLOATQ3    002EEA R   |   6 FLOATQ4    002EFE R   |   6 FLOAT_ER   002F13 R
  6 FLOAT_ER   002F10 R   |     FLSI    =  01F400     |   6 FMOVE      0020EA R
  6 FMOVE2     00211B R   |   6 FNE        002B41 R   |   6 FOR        0014EB R
  6 FORGET     00015A R   |   6 FORGET1    000189 R   |   6 FORGET2    00020F R
  6 FORGET4    000218 R   |   6 FORGET6    0001D1 R   |   6 FOV        002B56 R
  6 FPSTOR     001ABE R   |   6 FPSW       002AEF R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002B01 R
  6 FSLASH     003106 R   |   6 FSLASH1    003132 R   |   6 FSLASH8    003189 R
  6 FSTAR      0030DF R   |   6 FTOD       0031C6 R   |   6 FTOD1      0031F6 R
  6 FTOD2      00320F R   |   6 FTOD3      003219 R   |   6 FTOD4      003224 R
  6 FTOD5      00322C R   |   6 FTOD6      00324C R   |   6 FTOD8      003251 R
  6 FTOD9      00325C R   |   6 FZE        002B2C R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      0008C9 R   |   6 GREAT1     0008DF R   |   6 HDOT       000F39 R
  6 HERE       000C14 R   |   6 HEX        000DCC R   |   6 HI         001A09 R
  6 HLD        0006BE R   |   6 HOLD       000D41 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0017AF R   |   6 IFETCH     001509 R   |   6 IFF        001546 R
  6 IFMOVE     0021C3 R   |     IMEDD   =  000080     |   6 IMMED      0017C1 R
  6 INCH       00042A R   |   6 INC_FPTR   001C38 R   |   6 INITOFS    001777 R
  6 INN        00066C R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001375 R
  6 INTER      00134B R   |   6 INTQ       00236C R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0007C7 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      00170C R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       001761 R   |   6 KEY        000E35 R
  6 KTAP       001265 R   |   6 KTAP1      001288 R   |   6 KTAP2      00128B R
  6 LAST       0006FD R   |   6 LASTN   =  0031C2 R   |   6 LBRAC      001382 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       00088B R   |     LF      =  00000A     |   6 LINK    =  0031C2 R
  6 LITER      0014BD R   |   6 LN2S       00228E R   |   6 LOCK       001C24 R
  6 LOG2S      002278 R   |   6 LSCALE     002F34 R   |   6 LSHIFT     000AE9 R
  6 LSHIFT1    000AF2 R   |   6 LSHIFT4    000AFA R   |   6 LT1        0008A1 R
    MASKK   =  001F7F     |   6 MAX        0008E9 R   |   6 MAX1       0008FC R
    MAX_MANT=  7FFFFF     |   6 MIN        000906 R   |   6 MIN1       000919 R
  6 MMOD1      0009A2 R   |   6 MMOD2      0009B6 R   |   6 MMOD3      0009CD R
  6 MMSM1      00095D R   |   6 MMSM3      000961 R   |   6 MMSM4      00096D R
  6 MMSMa      000968 R   |   6 MMSMb      000973 R   |   6 MMSTA1     00300D R
  6 MMSTA2     003018 R   |   6 MMSTA3     003023 R   |   6 MMSTA4     00308E R
  6 MMSTA5     0030A0 R   |   6 MMSTA6     0030B9 R   |   6 MMSTA7     0030D6 R
  6 MMSTAR     003002 R   |   6 MODD       0009E7 R   |   6 MONE       000B50 R
    MS      =  000030     |   6 MSEC       0002D0 R   |   6 MSMOD      000985 R
  6 MSTA1      000A78 R   |   6 MSTAR      000A55 R   |     NAFR    =  004804 
  6 NAMEQ      00120D R   |   6 NAMET      00111E R   |     NCLKOPT =  004808 
  6 NDROT      0026A3 R   |   6 NEGAT      0007D8 R   |   6 NEX1       000490 R
  6 NEXT       0014FA R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NROT       00076B R
  6 NTIB       00067C R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000E4B R   |   6 NUFQ1      000E64 R   |   6 NUMBQ      002415 R
  6 NUMQ0      002456 R   |   6 NUMQ1      002478 R   |   6 NUMQ3      0024A2 R
  6 NUMQ4      0024C3 R   |   6 NUMQ8      0024CC R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     000722 R
    OFS     =  000005     |   6 ONE        000B42 R   |   6 ONEM       000AD8 R
  6 ONEP       000ACB R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        0005F9 R   |   6 OUTPUT     00043B R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       0005B0 R   |   6 OVERT      0016DA R
    PA      =  000000     |   6 PACKS      000CD4 R   |   6 PAD        000C25 R
  6 PAREN      00108E R   |   6 PARS       000F87 R   |   6 PARS1      000FB2 R
  6 PARS2      000FDD R   |   6 PARS3      000FE0 R   |   6 PARS4      000FE9 R
  6 PARS5      00100C R   |   6 PARS6      001021 R   |   6 PARS7      001030 R
  6 PARS8      00103F R   |   6 PARSE      001050 R   |   6 PARSEXP_   002E4D R
  6 PAUSE      0002E0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      0018F1 R   |   6 PDUM2      001902 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000B90 R
  6 PII        0021F1 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0007AD R   |   6 PNAM1      00167F R
  6 POSMANT    002C30 R   |   6 PRESE      001401 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PSTOR      000BA7 R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001C50 R   |   6 QBRAN      000498 R   |   6 QDUP       00073B R
  6 QDUP1      000745 R   |   6 QKEY       000418 R   |   6 QSTAC      0013B9 R
  6 QUERY      0012E5 R   |   6 QUEST      000F79 R   |   6 QUIT       00141E R
  6 QUIT1      001426 R   |   6 QUIT2      001429 R   |   6 RAM2EE     00208B R
    RAMBASE =  000000     |   6 RAMLAST    000710 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        000545 R   |   6 RBRAC      00174E R   |   6 REPEA      0015C3 R
  6 RFREE      002072 R   |   6 RFROM      000534 R   |     ROP     =  004800 
  6 ROT        00074C R   |   6 ROW2BUF    002034 R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000511 R   |     RPP     =  0017FF 
  6 RPSTO      00051E R   |   6 RSCALE     002F5A R   |   6 RSHIFT     000B05 R
  6 RSHIFT1    000B0E R   |   6 RSHIFT4    000B16 R   |     RST_SR  =  0050B3 
  6 RT12_2     002261 R   |   6 SAME1      00113C R   |   6 SAME2      001165 R
  6 SAMEQ      001134 R   |   6 SCAL1      002F8D R   |   6 SCAL2      002FB9 R
  6 SCALETOM   002F87 R   |   6 SCOM1      0016B4 R   |   6 SCOM2      0016B7 R
  6 SCOMP      001696 R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      0016EA R   |   6 SETISP     0000D0 R
  6 SET_RAML   001831 R   |   6 SFN        002BA2 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002BDA R   |   6 SFZ        002B6B R
  6 SIGN       000D80 R   |   6 SIGN1      000D90 R   |   6 SLASH      0009F1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]

Symbol Table

  6 SLMOD      0009D5 R   |   6 SNAME      001649 R   |     SP0     =  00002C 
  6 SPACE      000E6D R   |   6 SPACS      000E7C R   |   6 SPAT       000568 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000575 R   |   6 SQRT10     00224A R
  6 SQRT2      002208 R   |   6 SQRT3      00221F R   |   6 SSMOD      000A81 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000A4A R
  6 STASL      000A92 R   |   6 STEXP      002C3B R   |   6 STEXP1     002C51 R
  6 STEXP2     002C8D R   |   6 STEXP3     002CA0 R   |   6 STOD       00080F R
  6 STORE      0004D1 R   |   6 STR        000DAE R   |   6 STRCQ      0014CB R
  6 STRQ       001602 R   |   6 STRQP      000ED8 R   |   6 SUBB       000826 R
  6 SWAPP      000598 R   |     SWIM_CSR=  007F80     |   6 TAP        00124F R
  6 TBOOT      001A40 R   |   6 TBRAN      0004A6 R   |   6 TBUF       00068C R
    TBUFFBAS=  001680     |   6 TCHAR      000B61 R   |   6 TEMP       00065D R
  6 TEVAL      0006AF R   |   6 TFLASH     00069E R   |   6 THENN      00155B R
  6 TIB        000C36 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001435 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R
  6 TIMER      0002FA R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001987 R   |   6 TNAM3      0019A5 R   |   6 TNAM4      0019AB R
  6 TNAME      001984 R   |   6 TOFLASH    000335 R   |   6 TOKEN      001110 R
  6 TOR        000551 R   |   6 TORAM      000375 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000B1D R   |   6 TYPE1      000E9C R   |   6 TYPE2      000EA2 R
  6 TYPES      000E97 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]

Symbol Table

    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDIV10     002FBA R   |   6 UDOT       000F25 R   |   6 UDOTR      000F05 R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     0008AA R
  6 UGREAT1    0008C1 R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      000883 R
  6 ULESS      00086D R   |   6 UMMOD      000941 R   |   6 UMSTA      000A00 R
  6 UNIQ1      001640 R   |   6 UNIQU      001621 R   |   6 UNLKEE     001BBE R
  6 UNLKFL     001BDD R   |   6 UNLOCK     001BFC R   |   6 UNTIL      001523 R
    UOFFSET =  00001E     |   6 UPDATCP    001B7B R   |   6 UPDATLAS   001B52 R
  6 UPDATPTR   00217E R   |   6 UPDATRUN   001B6A R   |   6 UPDATVP    001B92 R
  6 UPL1       00063A R   |   6 UPLUS      000623 R   |     UPP     =  000006 
  6 UPPER      0010D3 R   |   6 UPPER1     0010F6 R   |   6 UPPER2     0010FF R
    URLAST  =  000022     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      0018C1 R   |   6 UTYP2      0018D0 R
  6 UTYPE      0018BC R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      0017FE R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        0006DF R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      0015A9 R
  6 WITHI      000926 R   |   6 WORDD      0010B9 R   |   6 WORDS      0019E1 R
  6 WORS1      0019E7 R   |   6 WORS2      001A03 R   |   6 WR_BYTE    001CA7 R
  6 WR_WORD    001CCC R   |   6 WTABLE     0022D6 R   |   6 WTAT       0022FA R
  6 WTINIT     00233F R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       00060E R   |     XTEMP   =  000024     |     YTEMP   =  000026 
  6 ZEQ1       0024EC R   |   6 ZEQU1      0005DB R   |   6 ZEQUAL     0005D1 R
  6 ZERO       000B37 R   |   6 ZL1        0005C8 R   |   6 ZLESS      0005BF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]

Symbol Table

  6 app_spac   003280 R   |   6 baudrate   00037B R   |   6 block_er   001D92 R
  6 clear_ra   000019 R   |   6 clock_in   000064 R   |   6 copy_buf   001DF2 R
  6 copy_buf   001E11 R   |   6 copy_pro   001E11 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 do2lit     00286D R   |   6 erase_fl   001DB4 R   |   6 fmove_do   002167 R
  6 main       000016 R   |   6 next_row   002124 R   |   6 no_move    00216E R
  6 nsign      00238A R   |   6 nsign1     0023BB R   |   6 parse_di   0023C2 R
  6 parse_ex   002E02 R   |   6 pristine   001E92 R   |   6 proceed_   001DB7 R
  6 reboot     000327 R   |   6 reset_ve   001EF9 R   |   6 row_eras   001D72 R
  6 row_eras   001DCB R   |   6 row_eras   001DF2 R   |   6 set_opti   001E66 R
  6 set_vect   001F9A R   |   6 uart_ini   000076 R   |   6 write_ro   001E36 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3280   flags    0

