ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        	.include "inc/stm8s208.inc"
                                        
                                        XMEM_SIZE=96304 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART1_SR
                                        UART_DR=UART1_DR
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 µC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                 
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                 
                                 
                                 
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000000    89 .if NUCLEO 
                                     90 STACK   =	0x17FF 	;system (return) stack empty 
                                     91 DATSTK  =	0x1680	;data stack  empty
                                     92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                                     93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000001    94 .else ; DISCOVERY
                           0007FF    95 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    96 DATSTK  =	0x680	;data stack  empty
                           000680    97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           00001B   169 ERR     =     27      ;error escape
                           000027   170 TIC     =     39      ;tick
                           0000CD   171 CALLL   =     0xCD     ;CALL opcodes
                           000080   172 IRET_CODE =   0x80    ; IRET opcode 
                                    173 
                                    174         .macro _ledon
                                    175         .if NUCLEO
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .else ;DISCOVERY 
                                    178         .if DISCOVERY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         bres PD_ODR,#LD1_BIT 
                                    180         .endif
                                    181         .endif
                                    182         .endm
                                    183 
                                    184         .macro _ledoff
                                    185         .if NUCLEO 
                                    186         bres PC_ODR,#LED2_BIT
                                    187         .else ;DISCOVERY 
                                    188         .if DISCOVERY
                                    189         bset PD_ODR,#LD1_BIT 
                                    190         .endif 
                                    191         .endif
                                    192         .endm
                                    193 
                                    194 ;**********************************************************
                                    195         .area DATA (ABS)
      000000                        196         .org RAMBASE 
                                    197 ;**********************************************************
                                    198 
                                    199 ;**********************************************************
                                    200         .area SSEG (ABS) ; STACK
      001700                        201         .org 0x1700
      001700                        202         .ds 256 
                                    203 ; space for DATSTK,TIB and STACK         
                                    204 ;**********************************************************
                                    205 
                                    206 ;**********************************************************
                                    207         .area HOME ; vectors table
                                    208 ;**********************************************************
      000000 82 00 00 16            209 	int main	        ; reset
      000004 82 00 00 00            210 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            211 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            212 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            213 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            214 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            215 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            216 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            217 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            218 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            219 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            220 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            221 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            222 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            223 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            224 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            225 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            226 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            227 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            228 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            229 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            230 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            231 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            232 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            233 	int NonHandledInterrupt	; irq22
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000064 82 00 00 05            234 	int Timer4Handler	; irq23
      000068 82 00 00 00            235 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            236 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            237 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            238 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            239 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            240 	int NonHandledInterrupt	; irq29
                                    241 
                                    242 ;**********************************************************
                                    243         .area CODE
                                    244 ;**********************************************************
                                    245 
                                    246 ; non handled interrupt reset MCU
      000000                        247 NonHandledInterrupt:
      000000 A6 80            [ 1]  248         ld a, #0x80
      000002 C7 50 D1         [ 1]  249         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    250 	;iret
                                    251 
                                    252 ; used for milliseconds counter 
                                    253 ; MS is 16 bits counter 
      000005                        254 Timer4Handler:
      000005 72 5F 53 42      [ 1]  255 	clr TIM4_SR 
      000009 BE 2E            [ 2]  256         ldw x,MS 
      00000B 5C               [ 1]  257         incw x 
      00000C BF 2E            [ 2]  258         ldw MS,x
      00000E BE 30            [ 2]  259         ldw x,CNTDWN 
      000010 27 03            [ 1]  260         jreq 1$
      000012 5A               [ 2]  261         decw x 
      000013 BF 30            [ 2]  262         ldw CNTDWN,x 
      000015                        263 1$:         
      000015 80               [11]  264         iret 
                                    265 
                                    266 
                                    267 ;; Main entry points and COLD start data
      000016                        268 main:
                                    269 ; clear all RAM
      000016 AE 00 00         [ 2]  270 	ldw X,#RAMBASE
      000019                        271 clear_ram0:
      000019 7F               [ 1]  272 	clr (X)
      00001A 5C               [ 1]  273 	incw X
      00001B A3 07 FF         [ 2]  274 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  275 	jrule clear_ram0
      000020 AE 07 FF         [ 2]  276         ldw x,#RPP
      000023 94               [ 1]  277         ldw sp,x
                                    278 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  279         inc SEEDX+1 
      000026 3C 39            [ 1]  280         inc SEEDY+1          
      000028 CC 00 47         [ 2]  281 	jp ORIG
                                    282 
                                    283 ; COLD initialize these variables.
      00002B                        284 UZERO:
      00002B 00 0A                  285         .word      BASEE   ;BASE
      00002D 00 00                  286         .word      0       ;tmp
      00002F 00 00                  287         .word      0       ;>IN
      000031 00 00                  288         .word      0       ;#TIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000033 07 00                  289         .word      TIBB    ;TIB
      000035 13 73                  290         .word      INTER   ;'EVAL
      000037 00 00                  291         .word      0       ;HLD
      000039 23 58                  292         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  293         .word      VAR_BASE   ;variables free space pointer 
      00003D 23 80                  294         .word      app_space ; FLASH free space pointer 
      00003F 23 58                  295         .word      LASTN   ;LAST
      000041 00 00                  296         .word      0        ; OFFSET 
      000043 00 00                  297         .word      0       ; TFLASH
                                    298 ;       .word      0       ; URLAST   
      000045 00 00                  299 UEND:   .word      0
                                    300 
      000047                        301 ORIG:   
                                    302 ; initialize SP
      000047 AE 07 FF         [ 2]  303         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  304         LDW     SP,X
      00004B BF 2C            [ 2]  305         LDW     RP0,X
      00004D AE 06 80         [ 2]  306         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  307         LDW     SP0,X
                           000000   308 .if NUCLEO        
                                    309 ; initialize PC_5 as output to control LED2
                                    310 ; added by Picatout 
                                    311         bset PC_CR1,#LED2_BIT
                                    312         bset PC_CR2,#LED2_BIT
                                    313         bset PC_DDR,#LED2_BIT
                                    314 .endif 
                           000000   315 .if DISCOVERY
                                    316         bset PD_CR1,#LD1_BIT
                                    317         bset PD_CR2,#LD1_BIT
                                    318         bset PD_DDR,#LD1_BIT 
                                    319 .endif
      000052                        320         _ledoff
                           000000     1         .if NUCLEO 
                                      2         bres PC_ODR,#LED2_BIT
                           000001     3         .else ;DISCOVERY 
                           000000     4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    321 ; initialize clock to HSI
                                    322 ; no divisor 16Mhz 
                                    323 ; Added by Picatout 
      000052                        324 clock_init:
      000052 72 5F 50 C6      [ 1]  325         clr CLK_CKDIVR
      000056 72 12 50 C5      [ 1]  326 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   327 .if NUCLEO|DOORBELL
      00005A A6 E1            [ 1]  328 	ld a,#CLK_SWR_HSI
                           000000   329 .else ; DISCOVERY as 16Mhz crystal
                                    330 	ld a,#CLK_SWR_HSE
                                    331 .endif 
      00005C C7 50 C4         [ 1]  332 	ld CLK_SWR,a
      00005F C1 50 C3         [ 1]  333 1$:	cp a,CLK_CMSR
      000062 26 FB            [ 1]  334 	jrne 1$
                                    335         
                                    336 ; initialize UART, 115200 8N1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000064                        337 uart_init:
                           000000   338 .if NUCLEO 
                                    339 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    340 	; configure tx pin
                                    341 	bset PA_DDR,#UART1_TX_PIN ; tx pin
                                    342 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
                                    343 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    344 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    345 	mov UART1_BRR2,#0x0b ; must be loaded first
                                    346 	mov UART1_BRR1,#0x8
                                    347 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000001   348 .else ; DISCOVERY use UART2 
      000064 72 16 50 C7      [ 1]  349 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    350 	; configure tx pin
      000068 72 1A 50 11      [ 1]  351 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      00006C 72 1A 50 12      [ 1]  352 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000070 72 1A 50 13      [ 1]  353 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    354 	; baud rate 115200 Fmaster=8Mhz  
      000074 35 0B 52 43      [ 1]  355 	mov UART2_BRR2,#0x0b ; must be loaded first
      000078 35 08 52 42      [ 1]  356 	mov UART2_BRR1,#0x8
      00007C 35 0C 52 45      [ 1]  357 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    358 .endif
                                    359 ; initialize timer4, used for millisecond interrupt  
      000080 35 07 53 45      [ 1]  360 	mov TIM4_PSCR,#7 ; prescale 128  
      000084 35 7D 53 46      [ 1]  361 	mov TIM4_ARR,#125 ; set for 1msec.
      000088 35 05 53 40      [ 1]  362 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00008C 72 10 53 41      [ 1]  363 	bset TIM4_IER,#TIM4_IER_UIE 
                                    364 ; set TIM4 interrupt priority to highest
      000090 A6 3F            [ 1]  365         ld a,#~(IPR_MASK<<6)
      000092 C4 7F 75         [ 1]  366         and a,ITC_SPR6
      000095 AA C0            [ 1]  367         or a,#(IPR3<<6)
      000097 C7 7F 75         [ 1]  368         ld ITC_SPR6,a 
      00009A 9A               [ 1]  369         rim
      00009B CC 1A 75         [ 2]  370         jp  COLD   ;default=MN1
                                    371 
                                    372 
                                    373 ;; place MCU in sleep mode with
                                    374 ;; halt opcode 
                                    375 ;; BYE ( -- )
      00009E 00 00                  376         .word 0
                           0000A0   377         LINK=.
      0000A0 03                     378         .byte 3 
      0000A1 42 59 45               379         .ascii "BYE"
      0000A4                        380 BYE: 
      0000A4 8E               [10]  381         halt 
      0000A5 81               [ 4]  382         ret 
                                    383 
                                    384 ; Enable interrupts 
                                    385 ; EI ( -- )
      0000A6 00 A0                  386         .word LINK 
                           0000A8   387         LINK=.
      0000A8 02                     388         .byte 2
      0000A9 45 49                  389         .ascii "EI"
      0000AB                        390 EI:
      0000AB 9A               [ 1]  391         rim 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000AC 81               [ 4]  392         ret 
                                    393 
                                    394 ; Disable interrupts
                                    395 ; DI ( -- )
      0000AD 00 A8                  396         .word LINK 
                           0000AF   397         LINK=.
      0000AF 02                     398         .byte 2 
      0000B0 44 49                  399         .ascii "DI"
      0000B2                        400 DI:
      0000B2 9B               [ 1]  401         sim 
      0000B3 81               [ 4]  402         ret 
                                    403 
                                    404 ; set interrupt priority level 
                                    405 ; SET-ISP ( n1 n2 -- )
                                    406 ; n1 level {1..3}
                                    407 ; n2 vector {0..29}
      0000B4 00 AF                  408         .word LINK 
                           0000B6   409         LINK=.
      0000B6 07                     410         .byte 7 
      0000B7 53 45 54 2D 49 53 50   411         .ascii "SET-ISP"
      0000BE                        412 SETISP:
      0000BE 90 93            [ 1]  413         ldw y,x 
      0000C0 90 FE            [ 2]  414         ldw y,(y)
      0000C2 A6 04            [ 1]  415         ld a,#4 ; 4 slot per register 
                                    416 ;  quotient select register, remainder select slot in register.        
      0000C4 90 62            [ 2]  417         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000C6 A4 03            [ 1]  418         and a,#3 
      0000C8 48               [ 1]  419         sll a ; 2*SLOT  lshift 
      0000C9 72 A9 7F 70      [ 2]  420         addw y,#ITC_SPR1 
      0000CD FF               [ 2]  421         ldw (x),y  ; ( level reg -- )
      0000CE 90 5F            [ 1]  422         clrw y 
      0000D0 90 97            [ 1]  423         ld yl,a 
      0000D2 1D 00 02         [ 2]  424         subw x,#CELLL 
      0000D5 FF               [ 2]  425         ldw (x),y  ; ( level reg lshift -- )
      0000D6 90 93            [ 1]  426         ldw y,x 
      0000D8 90 EE 02         [ 2]  427         ldw y,(2,y) 
      0000DB 90 F6            [ 1]  428         ld a,(y)   ; reg_value
      0000DD 1D 00 02         [ 2]  429         subw x,#CELLL 
      0000E0 FF               [ 2]  430         ldw (x),y ; ( level reg lshift rval -- )
      0000E1 CD 05 89         [ 4]  431         call OVER ; ( level reg lshift rval lshift -- )
      0000E4 CD 04 3A         [ 4]  432         call DOLIT 
      0000E7 00 03                  433         .word 3
      0000E9 CD 05 6F         [ 4]  434         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000EC CD 0A 72         [ 4]  435         call LSHIFT ; creat slot mask 
      0000EF CD 07 74         [ 4]  436         call INVER  ; ( level reg lshift rval mask )
      0000F2 CD 05 AB         [ 4]  437         call ANDD ; ( level reg lshift slot_masked )
      0000F5 CD 05 28         [ 4]  438         call TOR  ; ( level reg lshift -- R: slot_masked )
      0000F8 CD 07 1A         [ 4]  439         call ROT  ; ( reg lshift level )
      0000FB CD 05 6F         [ 4]  440         call SWAPP ; ( reg level lshift )
      0000FE CD 0A 72         [ 4]  441         call LSHIFT  ; ( reg slot_level -- )
      000101 CD 05 09         [ 4]  442         call RFROM ; ( reg slot_level masked_val )
      000104 CD 05 BF         [ 4]  443         call ORR   ; ( reg updated_rval )
      000107 CD 05 6F         [ 4]  444         call SWAPP 
      00010A CD 04 C5         [ 4]  445         call CSTOR
                                    446 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    447 ; sélectionne l'application 
                                    448 ; qui démarre automatique lors 
                                    449 ; d'un COLD start 
      00010D 00 B6                  450         .word LINK 
                           00010F   451         LINK=.
      00010F 07                     452         .byte 7
      000110 41 55 54 4F 52 55 4E   453         .ascii "AUTORUN"
      000117                        454 AUTORUN:
      000117 CD 11 38         [ 4]  455         call TOKEN 
      00011A CD 05 5F         [ 4]  456         call DUPP 
      00011D CD 04 6D         [ 4]  457         call QBRAN 
      000120 01 FD                  458         .word FORGET2
      000122 CD 12 35         [ 4]  459         call NAMEQ
      000125 CD 07 09         [ 4]  460         call QDUP 
      000128 CD 04 6D         [ 4]  461         call QBRAN 
      00012B 01 FD                  462         .word FORGET2
      00012D CD 05 55         [ 4]  463         call DROP 
      000130 1D 00 04         [ 2]  464         subw x,#2*CELLL 
      000133 90 5F            [ 1]  465         clrw y 
      000135 FF               [ 2]  466         ldw (x),y 
      000136 90 AE 40 02      [ 2]  467         ldw y,#APP_RUN 
      00013A EF 02            [ 2]  468         ldw (2,x),y 
      00013C CC 1D 4B         [ 2]  469         jp EESTORE 
                                    470 
                                    471 ;; Reset dictionary pointer before 
                                    472 ;; forgotten word. RAM space and 
                                    473 ;; interrupt vector defined after 
                                    474 ;; must be resetted also.
      00013F 01 0F                  475         .word LINK 
                           000141   476         LINK=.
      000141 06                     477         .byte 6
      000142 46 4F 52 47 45 54      478         .ascii "FORGET" 
      000148                        479 FORGET: 
      000148 CD 11 38         [ 4]  480         call TOKEN
      00014B CD 05 5F         [ 4]  481         call DUPP 
      00014E CD 04 6D         [ 4]  482         call QBRAN 
      000151 01 FD                  483         .word FORGET2
      000153 CD 12 35         [ 4]  484         call NAMEQ ; ( a -- ca na | a F )
      000156 CD 07 09         [ 4]  485         call QDUP 
      000159 CD 04 6D         [ 4]  486         call QBRAN 
      00015C 01 FD                  487         .word FORGET2
                                    488 ; only forget users words 
      00015E CD 05 5F         [ 4]  489         call DUPP ; ( ca na na )
      000161 CD 04 3A         [ 4]  490         call DOLIT 
      000164 23 80                  491         .word app_space 
      000166 CD 05 6F         [ 4]  492         call SWAPP 
      000169 CD 08 1A         [ 4]  493         call  ULESS 
      00016C CD 04 6D         [ 4]  494         call QBRAN 
      00016F 01 BF                  495         .word FORGET6 
                                    496 ; ( ca na -- )        
                                    497 ;reset ivec with address >= ca
      000171 CD 05 6F         [ 4]  498         call SWAPP ; ( na ca -- ) 
      000174 CD 1F 3C         [ 4]  499         call CHKIVEC ; ( na -- ) 
                                    500 ; start at LAST and link back to na 
                                    501 ; if variable found reset VP at that point.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000177                        502 FORGET1:
      000177 CD 06 CB         [ 4]  503         call LAST 
      00017A CD 04 B8         [ 4]  504         call AT 
      00017D CD 05 5F         [ 4]  505         call DUPP  ; ( -- na last last )
      000180 CD 02 13         [ 4]  506         call FREEVAR ; ( -- na last )
      000183 CD 05 5F         [ 4]  507         call DUPP 
      000186 CD 04 3A         [ 4]  508         call DOLIT 
      000189 00 02                  509         .word 2 
      00018B CD 07 D3         [ 4]  510         call SUBB ; ( na last -- na last lfa ) link address 
      00018E CD 04 B8         [ 4]  511         call AT 
      000191 CD 05 5F         [ 4]  512         call DUPP ; ( -- na last a a )
      000194 CD 06 9F         [ 4]  513         call CNTXT 
      000197 CD 04 A1         [ 4]  514         call STORE
      00019A CD 06 CB         [ 4]  515         call LAST  
      00019D CD 04 A1         [ 4]  516         call STORE ; ( --  na last )
      0001A0 CD 05 89         [ 4]  517         call OVER 
      0001A3 CD 07 FB         [ 4]  518         call EQUAL ; ( na last na -- na T|F ) 
      0001A6 CD 04 6D         [ 4]  519         call QBRAN 
      0001A9 01 77                  520         .word FORGET1 
                                    521 ; ( na -- )
      0001AB CD 04 3A         [ 4]  522         call DOLIT 
      0001AE 00 02                  523         .word 2 
      0001B0 CD 07 D3         [ 4]  524         call SUBB 
      0001B3 CD 06 BB         [ 4]  525         call CPP 
      0001B6 CD 04 A1         [ 4]  526         call STORE  
      0001B9 CD 1B A1         [ 4]  527         call UPDATCP 
      0001BC CC 1B 78         [ 2]  528         jp UPDATLAST 
      0001BF                        529 FORGET6: ; tried to forget a RAM or system word 
                                    530 ; ( ca na -- )
      0001BF 1D 00 02         [ 2]  531         subw x,#CELLL 
      0001C2 90 BE 2A         [ 2]  532         ldw y,SP0 
      0001C5 FF               [ 2]  533         ldw (x),y  
      0001C6 CD 08 1A         [ 4]  534         call ULESS
      0001C9 CD 04 6D         [ 4]  535         call QBRAN 
      0001CC 01 EF                  536         .word PROTECTED 
      0001CE CD 13 41         [ 4]  537         call ABORQ 
      0001D1 1D                     538         .byte 29
      0001D2 20 46 6F 72 20 52 41   539         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001EF                        540 PROTECTED:
      0001EF CD 13 41         [ 4]  541         call ABORQ
      0001F2 0A                     542         .byte 10
      0001F3 20 50 72 6F 74 65 63   543         .ascii " Protected"
             74 65 64
      0001FD                        544 FORGET2: ; no name or not found in dictionary 
      0001FD CD 13 41         [ 4]  545         call ABORQ
      000200 05                     546         .byte 5
      000201 20 77 68 61 74         547         .ascii " what"
      000206                        548 FORGET4:
      000206 CC 05 55         [ 2]  549         jp DROP 
                                    550 
                                    551 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    552 ;---------------------------------
                                    553 ; if na is variable 
                                    554 ; free variable data  
                                    555 ; FREEVAR ( na -- )
                                    556 ;---------------------------------
      000209 01 41                  557         .word LINK 
                           00020B   558         LINK=.
      00020B 07                     559         .byte 7 
      00020C 46 52 45 45 56 41 52   560         .ascii "FREEVAR"
      000213                        561 FREEVAR:
      000213 CD 05 5F         [ 4]  562         call DUPP ; ( na na -- )
      000216 CD 04 D6         [ 4]  563         CALL CAT  ; ( na c -- )
      000219 CD 0A 54         [ 4]  564         call ONEP ;
      00021C CD 07 5A         [ 4]  565         CALL PLUS ; ( na c+1 -- ca ) 
      00021F CD 0A 54         [ 4]  566         call ONEP ; ( ca+ -- ) to get routne address 
      000222 CD 05 5F         [ 4]  567         call DUPP ; ( ca+ ca+ -- )
      000225 CD 04 B8         [ 4]  568         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000228 CD 04 3A         [ 4]  569         call DOLIT 
      00022B 06 0C                  570         .word DOVAR ; if routine address is DOVAR then variable 
      00022D CD 07 FB         [ 4]  571         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000230 CD 04 6D         [ 4]  572         call QBRAN 
      000233 02 49                  573         .word FREEVAR4 
      000235 CD 04 3A         [ 4]  574         call DOLIT 
      000238 00 02                  575         .word 2 
      00023A CD 07 5A         [ 4]  576         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00023D CD 04 B8         [ 4]  577         call AT 
      000240 CD 06 AD         [ 4]  578         call VPP   
      000243 CD 04 A1         [ 4]  579         call STORE 
      000246 CC 1B B8         [ 2]  580         jp UPDATVP 
      000249                        581 FREEVAR4: ; not variable
      000249 CC 05 55         [ 2]  582         jp  DROP 
                                    583 
                                    584 ;    SEED ( n -- )
                                    585 ; Initialize PRNG seed with n 
      00024C 02 0B                  586         .word LINK 
                           00024E   587         LINK=. 
      00024E 04                     588         .byte 4 
      00024F 53 45 45 44            589         .ascii "SEED" 
      000253                        590 SEED:
      000253 90 93            [ 1]  591         ldw y,x 
      000255 1C 00 02         [ 2]  592         addw x,#CELLL
      000258 90 FE            [ 2]  593         ldw y,(y)
      00025A 90 9E            [ 1]  594         ld a,yh 
      00025C B7 36            [ 1]  595         ld SEEDX,a 
      00025E 90 9F            [ 1]  596         ld a,yl 
      000260 B7 38            [ 1]  597         ld SEEDY,a 
      000262 81               [ 4]  598         ret 
                                    599 
                                    600 ;    RANDOM ( u1 -- u2 )
                                    601 ; Pseudo random number betwen 0 and u1-1
      000263 02 4E                  602         .word LINK 
                           000265   603         LINK=.
      000265 06                     604         .byte 6
      000266 52 41 4E 44 4F 4D      605         .ascii "RANDOM" 
      00026C                        606 RANDOM:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    607 ;local variable 
                           000001   608         SPSAVE=1
                           000002   609         VSIZE=2 
      00026C 52 02            [ 2]  610         sub sp,#VSIZE
      00026E 1F 01            [ 2]  611         ldw (SPSAVE,sp),x  
                                    612 ; XTEMP=(SEEDX<<5)^SEEDX 
      000270 90 93            [ 1]  613         ldw y,x 
      000272 90 FE            [ 2]  614         ldw y,(y)
      000274 90 BF 24         [ 2]  615         ldw YTEMP,y 
      000277 BE 36            [ 2]  616 	ldw x,SEEDX 
      000279 58               [ 2]  617 	sllw x 
      00027A 58               [ 2]  618 	sllw x 
      00027B 58               [ 2]  619 	sllw x 
      00027C 58               [ 2]  620 	sllw x 
      00027D 58               [ 2]  621 	sllw x 
      00027E 9E               [ 1]  622 	ld a,xh 
      00027F B8 36            [ 1]  623 	xor a,SEEDX 
      000281 B7 22            [ 1]  624 	ld XTEMP,a 
      000283 9F               [ 1]  625 	ld a,xl 
      000284 B8 37            [ 1]  626 	xor a,SEEDX+1 
      000286 B7 23            [ 1]  627 	ld XTEMP+1,a 
                                    628 ; SEEDX=SEEDY 
      000288 BE 38            [ 2]  629 	ldw x,SEEDY 
      00028A BF 36            [ 2]  630 	ldw SEEDX,x  
                                    631 ; SEEDY=SEEDY^(SEEDY>>1)
      00028C 54               [ 2]  632 	srlw x 
      00028D 9E               [ 1]  633 	ld a,xh 
      00028E B8 38            [ 1]  634 	xor a,SEEDY 
      000290 B7 38            [ 1]  635 	ld SEEDY,a  
      000292 9F               [ 1]  636 	ld a,xl 
      000293 B8 39            [ 1]  637 	xor a,SEEDY+1 
      000295 B7 39            [ 1]  638 	ld SEEDY+1,a 
                                    639 ; XTEMP>>3 
      000297 BE 22            [ 2]  640 	ldw x,XTEMP 
      000299 54               [ 2]  641 	srlw x 
      00029A 54               [ 2]  642 	srlw x 
      00029B 54               [ 2]  643 	srlw x 
                                    644 ; x=XTEMP^x 
      00029C 9E               [ 1]  645 	ld a,xh 
      00029D B8 22            [ 1]  646 	xor a,XTEMP 
      00029F 95               [ 1]  647 	ld xh,a 
      0002A0 9F               [ 1]  648 	ld a,xl 
      0002A1 B8 23            [ 1]  649 	xor a,XTEMP+1  
      0002A3 97               [ 1]  650 	ld xl,a 
                                    651 ; SEEDY=x^SEEDY 
      0002A4 B8 39            [ 1]  652 	xor a,SEEDY+1
      0002A6 97               [ 1]  653 	ld xl,a 
      0002A7 9E               [ 1]  654 	ld a,xh 
      0002A8 B8 38            [ 1]  655 	xor a,SEEDY
      0002AA 95               [ 1]  656 	ld xh,a 
      0002AB BF 38            [ 2]  657 	ldw SEEDY,x 
                                    658 ; return SEEDY modulo YTEMP  
      0002AD 90 BE 24         [ 2]  659 	ldw y,YTEMP  
      0002B0 65               [ 2]  660 	divw x,y 
      0002B1 1E 01            [ 2]  661 	ldw x,(SPSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002B3 FF               [ 2]  662         ldw (x),y 
      0002B4 5B 02            [ 2]  663         addw sp,#VSIZE 
      0002B6 81               [ 4]  664 	ret 
                                    665 
                                    666 
                                    667 ;;
                                    668 ;; get millisecond counter 
                                    669 ;; msec ( -- u )
                                    670 ;; Added by Picatout 2020-04-26
      0002B7 02 65                  671         .word LINK  
                           0002B9   672         LINK = . 
      0002B9 04                     673         .byte 4
      0002BA 4D 53 45 43            674         .ascii "MSEC"
      0002BE                        675 MSEC: 
      0002BE 1D 00 02         [ 2]  676         subw x,#CELLL 
      0002C1 90 BE 2E         [ 2]  677         ldw y,MS 
      0002C4 FF               [ 2]  678         ldw (x),y 
      0002C5 81               [ 4]  679         ret 
                                    680 
                                    681 ; suspend execution for u msec 
                                    682 ;  pause ( u -- )
      0002C6 02 B9                  683         .word LINK 
                           0002C8   684         LINK=.
      0002C8 05                     685         .byte 5 
      0002C9 50 41 55 53 45         686         .ascii "PAUSE"
      0002CE                        687 PAUSE:
      0002CE 90 93            [ 1]  688         ldw y,x
      0002D0 90 FE            [ 2]  689         ldw y,(y)
      0002D2 72 B9 00 2E      [ 2]  690         addw y,MS 
      0002D6 8F               [10]  691 1$:     wfi  
      0002D7 90 B3 2E         [ 2]  692         cpw y,MS  
      0002DA 26 FA            [ 1]  693         jrne 1$        
      0002DC 1C 00 02         [ 2]  694         addw x,#CELLL 
      0002DF 81               [ 4]  695         ret 
                                    696 
                                    697 ; initialize count down timer 
                                    698 ;  TIMER ( u -- )  milliseconds 
      0002E0 02 C8                  699         .word LINK 
                           0002E2   700         LINK=.
      0002E2 05                     701         .byte 5 
      0002E3 54 49 4D 45 52         702         .ascii "TIMER" 
      0002E8                        703 TIMER:
      0002E8 90 93            [ 1]  704         ldw y,x
      0002EA 90 FE            [ 2]  705         ldw y,(y) 
      0002EC 90 BF 30         [ 2]  706         ldw CNTDWN,y
      0002EF 1C 00 02         [ 2]  707         addw x,#CELLL 
      0002F2 81               [ 4]  708         ret 
                                    709 
                                    710 ; check for TIMER exiparition 
                                    711 ;  TIMEOUT? ( -- 0|-1 )
      0002F3 02 E2                  712         .word LINK 
                           0002F5   713         LINK=. 
      0002F5 08                     714         .byte 8 
      0002F6 54 49 4D 45 4F 55 54   715         .ascii "TIMEOUT?"
             3F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002FE                        716 TIMEOUTQ: 
      0002FE 4F               [ 1]  717         clr a
      0002FF 1D 00 02         [ 2]  718         subw x,#CELLL 
      000302 90 BE 30         [ 2]  719         ldw y,CNTDWN 
      000305 26 01            [ 1]  720         jrne 1$ 
      000307 43               [ 1]  721         cpl a 
      000308 E7 01            [ 1]  722 1$:     ld (1,x),a 
      00030A F7               [ 1]  723         ld (x),a 
      00030B 81               [ 4]  724         ret         
                                    725 
                                    726 ; reboot MCU 
                                    727 ; REBOOT ( -- )
      00030C 02 F5                  728         .word LINK 
                           00030E   729         LINK=. 
      00030E 06                     730         .byte 6 
      00030F 52 45 42 4F 4F 54      731         .ascii "REBOOT"
      000315                        732 reboot:
      000315 CC 00 00         [ 2]  733         jp NonHandledInterrupt
                                    734 
                                    735 ; compile to flash memory 
                                    736 ; TO-FLASH ( -- )
      000318 03 0E                  737         .word LINK 
                           00031A   738         LINK=.
      00031A 08                     739         .byte 8
      00031B 54 4F 2D 46 4C 41 53   740         .ascii "TO-FLASH"
             48
      000323                        741 TOFLASH:
      000323 CD 06 DE         [ 4]  742         call RAMLAST 
      000326 CD 04 B8         [ 4]  743         call AT 
      000329 CD 07 09         [ 4]  744         call QDUP 
      00032C CD 04 6D         [ 4]  745         call QBRAN
      00032F 03 52                  746         .word 1$
      000331 CD 13 41         [ 4]  747         call ABORQ 
      000334 1D                     748         .byte 29
      000335 20 4E 6F 74 20 77 68   749         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000352 90 AE FF FF      [ 2]  750 1$:     ldw y,#-1 
      000356 90 BF 1E         [ 2]  751         ldw UTFLASH,y
      000359 81               [ 4]  752         ret 
                                    753 
                                    754 ; compile to RAM 
                                    755 ; TO-RAM ( -- )
      00035A 03 1A                  756         .word LINK 
                           00035C   757         LINK=.
      00035C 06                     758         .byte 6 
      00035D 54 4F 2D 52 41 4D      759         .ascii "TO-RAM"
      000363                        760 TORAM:
      000363 90 5F            [ 1]  761         clrw y 
      000365 90 BF 1E         [ 2]  762         ldw UTFLASH,y 
      000368 81               [ 4]  763         ret 
                                    764 
                                    765 ;; BAUD RATE constants table
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    766 ; values to put in BRR1 & BRR2 
      000369                        767 baudrate: 
      000369 A0 1B                  768 	.byte 0xa0,0x1b ; 2400
      00036B D0 05                  769 	.byte 0xd0,0x5  ; 4800 
      00036D 68 03                  770 	.byte 0x68,0x3  ; 9600
      00036F 34 01                  771 	.byte 0x34,0x1  ; 19200
      000371 11 06                  772 	.byte 0x11,0x6  ; 57600
      000373 08 0B                  773 	.byte 0x8,0xb   ; 115200
                                    774 
                                    775 ; BAUD RATE CONSTANTS names 
                                    776 ; 2400 baud
      000375 03 5C                  777 	.word LINK
                           000377   778 LINK	= .
      000377 04                     779 	.byte 4
      000378 42 32 4B 34            780 	.ascii "B2K4" 
      00037C                        781 B2K4:
      00037C 1D 00 02         [ 2]  782 	subw x,#CELLL 
      00037F 90 5F            [ 1]  783         clrw y
      000381 FF               [ 2]  784         ldw (x),y
      000382 81               [ 4]  785 	ret
                                    786 ; 4800 baud	
      000383 03 77                  787 	.word LINK
                           000385   788 LINK	= .
      000385 04                     789 	.byte 4
      000386 42 34 4B 38            790 	.ascii "B4K8" 
      00038A                        791 B4K8:
      00038A 1D 00 02         [ 2]  792         subw x,#CELLL 
      00038D 90 AE 00 02      [ 2]  793         ldw y,#2 
      000391 FF               [ 2]  794         ldw (x),y
      000392 81               [ 4]  795         ret 
                                    796 ; 9600 baud
      000393 03 85                  797 	.word LINK
                           000395   798 LINK	= .
      000395 04                     799 	.byte 4
      000396 42 39 4B 36            800 	.ascii "B9K6" 
      00039A                        801 B9K6:
      00039A 1D 00 02         [ 2]  802         subw x,#CELLL 
      00039D 90 AE 00 04      [ 2]  803         ldw y,#4 
      0003A1 FF               [ 2]  804         ldw (x),y 
      0003A2 81               [ 4]  805         ret 
                                    806 ; 19200 baud
      0003A3 03 95                  807 	.word LINK
                           0003A5   808 LINK	= .
      0003A5 05                     809 	.byte 5
      0003A6 42 31 39 4B 32         810 	.ascii "B19K2" 
      0003AB                        811 B19K2:
      0003AB 1D 00 02         [ 2]  812         subw x,#CELLL
      0003AE 90 AE 00 06      [ 2]  813         ldw y,#6 
      0003B2 FF               [ 2]  814         ldw (x),y 
      0003B3 81               [ 4]  815         ret 
                                    816 ; 57600 baud        
      0003B4 03 A5                  817 	.word LINK
                           0003B6   818 LINK	= .
      0003B6 05                     819 	.byte 5
      0003B7 42 35 37 4B 36         820 	.ascii "B57K6" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003BC                        821 B57K6:
      0003BC 1D 00 02         [ 2]  822         subw x,#CELLL 
      0003BF 90 AE 00 08      [ 2]  823         ldw y,#8 
      0003C3 FF               [ 2]  824         ldw (x),y 
      0003C4 81               [ 4]  825         ret 
                                    826 ; 115200 baud 
      0003C5 03 B6                  827 	.word LINK
                           0003C7   828 LINK	= .
      0003C7 06                     829 	.byte 6
      0003C8 42 31 31 35 4B 32      830 	.ascii "B115K2" 
      0003CE                        831 B115K2:
      0003CE 1D 00 02         [ 2]  832 	subw x,#CELLL 
      0003D1 90 AE 00 0A      [ 2]  833         ldw y,#10 
      0003D5 FF               [ 2]  834         ldw (x),y 
      0003D6 81               [ 4]  835         ret 
                                    836 	
                                    837        
                                    838 ;; set UART2 BAUD rate
                                    839 ;	BAUD ( u -- )
      0003D7 03 C7                  840 	.word LINK 
                           0003D9   841 LINK	= .
      0003D9 04                     842 	.byte 4
      0003DA 42 41 55 44            843 	.ascii "BAUD" 
      0003DE                        844 BAUD:
      0003DE 1D 00 02         [ 2]  845 	subw x,#CELLL
      0003E1 90 AE 03 69      [ 2]  846         ldw y,#baudrate 
      0003E5 FF               [ 2]  847         ldw (x),y 
      0003E6 CD 07 5A         [ 4]  848         call PLUS
      0003E9 90 93            [ 1]  849         ldw y,x  
      0003EB 90 FE            [ 2]  850         ldw y,(y)
      0003ED 90 F6            [ 1]  851         ld a,(y)
      0003EF 88               [ 1]  852         push a 
      0003F0 90 5C            [ 1]  853         incw y 
      0003F2 90 F6            [ 1]  854         ld a,(y)
      0003F4 C7 52 43         [ 1]  855         ld UART2_BRR2,a 
      0003F7 84               [ 1]  856         pop a
      0003F8 C7 52 42         [ 1]  857         ld UART2_BRR1,a 
      0003FB 1C 00 02         [ 2]  858         addw x,#CELLL 
      0003FE 81               [ 4]  859         ret 
                                    860 
                                    861 ;; Device dependent I/O
                                    862 ;       ?RX     ( -- c T | F )
                                    863 ;         Return input byte and true, or false.
      0003FF 03 D9                  864         .word      LINK 
                           000401   865 LINK	= .
      000401 04                     866         .byte      4
      000402 3F 4B 45 59            867         .ascii     "?KEY"
      000406                        868 QKEY:
      000406 90 5F            [ 1]  869         CLRW Y 
      000408 72 0B 52 40 0B   [ 2]  870         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00040D C6 52 41         [ 1]  871         LD    A,UART_DR   ;get char in A
      000410 1D 00 02         [ 2]  872 	SUBW	X,#2
      000413 E7 01            [ 1]  873         LD     (1,X),A
      000415 7F               [ 1]  874 	CLR	(X)
      000416 90 53            [ 2]  875         CPLW     Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000418                        876 INCH:
      000418 1D 00 02         [ 2]  877 		SUBW	X,#2
      00041B FF               [ 2]  878         LDW     (X),Y
      00041C 81               [ 4]  879         RET
                                    880 
                                    881 ;       TX!     ( c -- )
                                    882 ;       Send character c to  output device.
      00041D 04 01                  883         .word      LINK
                           00041F   884 LINK	= .
      00041F 04                     885         .byte      4
      000420 45 4D 49 54            886         .ascii     "EMIT"
      000424                        887 EMIT:
      000424 E6 01            [ 1]  888         LD     A,(1,X)
      000426 1C 00 02         [ 2]  889 		ADDW	X,#2
      000429 72 0F 52 40 FB   [ 2]  890 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      00042E C7 52 41         [ 1]  891         LD    UART_DR,A   ;send A
      000431 81               [ 4]  892         RET
                                    893 
                                    894 ;; The kernel
                                    895 
                                    896 ;       doLIT   ( -- w )
                                    897 ;       Push an inline literal.
      000432 04 1F                  898         .word      LINK
                           000434   899 LINK	= 	.
      000434 45                     900 	.byte      COMPO+5
      000435 44 4F 4C 49 54         901         .ascii     "DOLIT"
      00043A                        902 DOLIT:
      00043A 1D 00 02         [ 2]  903 	SUBW X,#2
      00043D 16 01            [ 2]  904         ldw y,(1,sp)
      00043F 90 FE            [ 2]  905         ldw y,(y)
      000441 FF               [ 2]  906         ldw (x),y
      000442 90 85            [ 2]  907         popw y 
      000444 90 EC 02         [ 2]  908         jp (2,y)
                                    909 
                                    910 ;       next    ( -- )
                                    911 ;       Code for  single index loop.
      000447 04 34                  912         .word      LINK
                           000449   913 LINK	= 	.
      000449 44                     914 	.byte      COMPO+4
      00044A 6E 65 78 74            915         .ascii     "next"
      00044E                        916 DONXT:
      00044E 16 03            [ 2]  917 	LDW Y,(3,SP)
      000450 90 5A            [ 2]  918 	DECW Y
      000452 2A 07            [ 1]  919 	JRPL NEX1 ; jump if N=0
      000454 90 85            [ 2]  920 	POPW Y
      000456 5B 02            [ 2]  921         addw sp,#2
      000458 90 EC 02         [ 2]  922         JP (2,Y)
      00045B                        923 NEX1:
      00045B 17 03            [ 2]  924         LDW (3,SP),Y
      00045D 90 85            [ 2]  925         POPW Y
      00045F 90 FE            [ 2]  926 	LDW Y,(Y)
      000461 90 FC            [ 2]  927 	JP (Y)
                                    928 
                                    929 ;       ?branch ( f -- )
                                    930 ;       Branch if flag is zero.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000463 04 49                  931         .word      LINK
                           000465   932 LINK	= 	.
      000465 47                     933 	.byte      COMPO+7
      000466 3F 42 52 41 4E 43 48   934         .ascii     "?BRANCH"
      00046D                        935 QBRAN:	
      00046D 90 93            [ 1]  936         LDW Y,X
      00046F 1C 00 02         [ 2]  937 	ADDW X,#2
      000472 90 FE            [ 2]  938 	LDW Y,(Y)
      000474 27 0E            [ 1]  939         JREQ     BRAN
      000476 90 85            [ 2]  940 	POPW Y
      000478 90 EC 02         [ 2]  941 	JP (2,Y)
                                    942         
                                    943 ;       branch  ( -- )
                                    944 ;       Branch to an inline address.
      00047B 04 65                  945         .word      LINK
                           00047D   946 LINK	= 	.
      00047D 46                     947 	.byte      COMPO+6
      00047E 42 52 41 4E 43 48      948         .ascii     "BRANCH"
      000484                        949 BRAN:
      000484 90 85            [ 2]  950         POPW Y
      000486 90 FE            [ 2]  951 	LDW Y,(Y)
      000488 90 FC            [ 2]  952         JP     (Y)
                                    953 
                                    954 ;       EXECUTE ( ca -- )
                                    955 ;       Execute  word at ca.
      00048A 04 7D                  956         .word      LINK
                           00048C   957 LINK	= 	.
      00048C 07                     958         .byte       7
      00048D 45 58 45 43 55 54 45   959         .ascii     "EXECUTE"
      000494                        960 EXECU:
      000494 90 93            [ 1]  961         LDW Y,X
      000496 1C 00 02         [ 2]  962 	ADDW X,#2
      000499 90 FE            [ 2]  963 	LDW  Y,(Y)
      00049B 90 FC            [ 2]  964         JP   (Y)
                                    965 
                           000001   966 OPTIMIZE = 1
                           000001   967 .if OPTIMIZE 
                                    968 ; remplacement de CALL EXIT par 
                                    969 ; le opcode de RET.
                                    970 ; Voir modification au code de ";"
                           000000   971 .else 
                                    972 ;       EXIT    ( -- )
                                    973 ;       Terminate a colon definition.
                                    974         .word      LINK
                                    975 LINK = .
                                    976         .byte      4
                                    977         .ascii     "EXIT"
                                    978 EXIT:
                                    979         POPW Y
                                    980         RET
                                    981 .endif 
                                    982 
                                    983 ;       !       ( w a -- )
                                    984 ;       Pop  data stack to memory.
      00049D 04 8C                  985         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           00049F   986 LINK = .
      00049F 01                     987         .byte      1
      0004A0 21                     988         .ascii     "!"
      0004A1                        989 STORE:
      0004A1 90 93            [ 1]  990         LDW Y,X
      0004A3 90 FE            [ 2]  991         LDW Y,(Y)    ;Y=a
      0004A5 90 BF 24         [ 2]  992         LDW YTEMP,Y
      0004A8 90 93            [ 1]  993         LDW Y,X
      0004AA 90 EE 02         [ 2]  994         LDW Y,(2,Y)
      0004AD 91 CF 24         [ 5]  995         LDW [YTEMP],Y ;store w at a
      0004B0 1C 00 04         [ 2]  996         ADDW X,#4 ; DDROP 
      0004B3 81               [ 4]  997         RET     
                                    998 
                                    999 ;       @       ( a -- w )
                                   1000 ;       Push memory location to stack.
      0004B4 04 9F                 1001         .word      LINK
                           0004B6  1002 LINK	= 	.
      0004B6 01                    1003         .byte    1
      0004B7 40                    1004         .ascii	"@"
      0004B8                       1005 AT:
      0004B8 90 93            [ 1] 1006         LDW Y,X     ;Y = a
      0004BA 90 FE            [ 2] 1007         LDW Y,(Y)   ; address 
      0004BC 90 FE            [ 2] 1008         LDW Y,(Y)   ; value 
      0004BE FF               [ 2] 1009         LDW (X),Y ;w = @Y
      0004BF 81               [ 4] 1010         RET     
                                   1011 
                                   1012 ;       C!      ( c b -- )
                                   1013 ;       Pop  data stack to byte memory.
      0004C0 04 B6                 1014         .word      LINK
                           0004C2  1015 LINK	= .
      0004C2 02                    1016         .byte      2
      0004C3 43 21                 1017         .ascii     "C!"
      0004C5                       1018 CSTOR:
      0004C5 90 93            [ 1] 1019         LDW Y,X
      0004C7 90 FE            [ 2] 1020 	LDW Y,(Y)    ;Y=b
      0004C9 E6 03            [ 1] 1021         LD A,(3,X)    ;D = c
      0004CB 90 F7            [ 1] 1022         LD  (Y),A     ;store c at b
      0004CD 1C 00 04         [ 2] 1023 	ADDW X,#4 ; DDROP 
      0004D0 81               [ 4] 1024         RET     
                                   1025 
                                   1026 ;       C@      ( b -- c )
                                   1027 ;       Push byte in memory to  stack.
      0004D1 04 C2                 1028         .word      LINK
                           0004D3  1029 LINK	= 	.
      0004D3 02                    1030         .byte      2
      0004D4 43 40                 1031         .ascii     "C@"
      0004D6                       1032 CAT:
      0004D6 90 93            [ 1] 1033         LDW Y,X     ;Y=b
      0004D8 90 FE            [ 2] 1034         LDW Y,(Y)
      0004DA 90 F6            [ 1] 1035         LD A,(Y)
      0004DC E7 01            [ 1] 1036         LD (1,X),A
      0004DE 7F               [ 1] 1037         CLR (X)
      0004DF 81               [ 4] 1038         RET     
                                   1039 
                                   1040 ;       RP@     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1041 ;       Push current RP to data stack.
      0004E0 04 D3                 1042         .word      LINK
                           0004E2  1043 LINK	= .
      0004E2 03                    1044         .byte      3
      0004E3 52 50 40              1045         .ascii     "RP@"
      0004E6                       1046 RPAT:
      0004E6 90 96            [ 1] 1047         LDW Y,SP    ;save return addr
      0004E8 1D 00 02         [ 2] 1048         SUBW X,#2
      0004EB FF               [ 2] 1049         LDW (X),Y
      0004EC 81               [ 4] 1050         RET     
                                   1051 
                                   1052 ;       RP!     ( a -- )
                                   1053 ;       Set  return stack pointer.
      0004ED 04 E2                 1054         .word      LINK
                           0004EF  1055 LINK	= 	. 
      0004EF 43                    1056 	.byte      COMPO+3
      0004F0 52 50 21              1057         .ascii     "RP!"
      0004F3                       1058 RPSTO:
      0004F3 90 85            [ 2] 1059         POPW Y
      0004F5 90 BF 24         [ 2] 1060         LDW YTEMP,Y
      0004F8 90 93            [ 1] 1061         LDW Y,X
      0004FA 90 FE            [ 2] 1062         LDW Y,(Y)
      0004FC 90 94            [ 1] 1063         LDW SP,Y
      0004FE 1C 00 02         [ 2] 1064         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000501 92 CC 24         [ 5] 1065         JP [YTEMP]
                                   1066 
                                   1067 ;       R>      ( -- w )
                                   1068 ;       Pop return stack to data stack.
      000504 04 EF                 1069         .word      LINK
                           000506  1070 LINK	= 	. 
      000506 42                    1071 	.byte      COMPO+2
      000507 52 3E                 1072         .ascii     "R>"
      000509                       1073 RFROM:
      000509 90 85            [ 2] 1074         POPW Y    ;save return addr
      00050B 90 BF 24         [ 2] 1075         LDW YTEMP,Y
      00050E 90 85            [ 2] 1076         POPW Y
      000510 1D 00 02         [ 2] 1077         SUBW X,#2
      000513 FF               [ 2] 1078         LDW (X),Y
      000514 92 CC 24         [ 5] 1079         JP [YTEMP]
                                   1080 
                                   1081 ;       R@      ( -- w )
                                   1082 ;       Copy top of return stack to stack.
      000517 05 06                 1083         .word      LINK
                           000519  1084 LINK	= 	. 
      000519 02                    1085         .byte      2
      00051A 52 40                 1086         .ascii     "R@"
      00051C                       1087 RAT:
      00051C 16 03            [ 2] 1088         ldw y,(3,sp)
      00051E 1D 00 02         [ 2] 1089         subw x,#CELLL 
      000521 FF               [ 2] 1090         ldw (x),y 
      000522 81               [ 4] 1091         ret 
                                   1092 
                                   1093 ;       >R      ( w -- )
                                   1094 ;       Push data stack to return stack.
      000523 05 19                 1095         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000525  1096 LINK	= 	. 
      000525 42                    1097 	.byte      COMPO+2
      000526 3E 52                 1098         .ascii     ">R"
      000528                       1099 TOR:
      000528 90 85            [ 2] 1100         POPW Y    ;save return addr
      00052A 90 BF 24         [ 2] 1101         LDW YTEMP,Y
      00052D 90 93            [ 1] 1102         LDW Y,X
      00052F 90 FE            [ 2] 1103         LDW Y,(Y)
      000531 90 89            [ 2] 1104         PUSHW Y    ;restore return addr
      000533 1C 00 02         [ 2] 1105         ADDW X,#2
      000536 92 CC 24         [ 5] 1106         JP [YTEMP]
                                   1107 
                                   1108 ;       SP@     ( -- a )
                                   1109 ;       Push current stack pointer.
      000539 05 25                 1110         .word      LINK
                           00053B  1111 LINK	= 	. 
      00053B 03                    1112         .byte      3
      00053C 53 50 40              1113         .ascii     "SP@"
      00053F                       1114 SPAT:
      00053F 90 93            [ 1] 1115 	LDW Y,X
      000541 1D 00 02         [ 2] 1116         SUBW X,#2
      000544 FF               [ 2] 1117 	LDW (X),Y
      000545 81               [ 4] 1118         RET     
                                   1119 
                                   1120 ;       SP!     ( a -- )
                                   1121 ;       Set  data stack pointer.
      000546 05 3B                 1122         .word      LINK
                           000548  1123 LINK	= 	. 
      000548 03                    1124         .byte      3
      000549 53 50 21              1125         .ascii     "SP!"
      00054C                       1126 SPSTO:
      00054C FE               [ 2] 1127         LDW     X,(X)     ;X = a
      00054D 81               [ 4] 1128         RET     
                                   1129 
                                   1130 ;       DROP    ( w -- )
                                   1131 ;       Discard top stack item.
      00054E 05 48                 1132         .word      LINK
                           000550  1133 LINK	= 	. 
      000550 04                    1134         .byte      4
      000551 44 52 4F 50           1135         .ascii     "DROP"
      000555                       1136 DROP:
      000555 1C 00 02         [ 2] 1137         ADDW X,#2     
      000558 81               [ 4] 1138         RET     
                                   1139 
                                   1140 ;       DUP     ( w -- w w )
                                   1141 ;       Duplicate  top stack item.
      000559 05 50                 1142         .word      LINK
                           00055B  1143 LINK	= 	. 
      00055B 03                    1144         .byte      3
      00055C 44 55 50              1145         .ascii     "DUP"
      00055F                       1146 DUPP:
      00055F 90 93            [ 1] 1147 	LDW Y,X
      000561 1D 00 02         [ 2] 1148         SUBW X,#2
      000564 90 FE            [ 2] 1149 	LDW Y,(Y)
      000566 FF               [ 2] 1150 	LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000567 81               [ 4] 1151         RET     
                                   1152 
                                   1153 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1154 ;       Exchange top two stack items.
      000568 05 5B                 1155         .word      LINK
                           00056A  1156 LINK	= 	. 
      00056A 04                    1157         .byte      4
      00056B 53 57 41 50           1158         .ascii     "SWAP"
      00056F                       1159 SWAPP:
      00056F 90 93            [ 1] 1160         LDW Y,X
      000571 90 FE            [ 2] 1161         LDW Y,(Y)
      000573 90 BF 24         [ 2] 1162         LDW YTEMP,Y
      000576 90 93            [ 1] 1163         LDW Y,X
      000578 90 EE 02         [ 2] 1164         LDW Y,(2,Y)
      00057B FF               [ 2] 1165         LDW (X),Y
      00057C 90 BE 24         [ 2] 1166         LDW Y,YTEMP
      00057F EF 02            [ 2] 1167         LDW (2,X),Y
      000581 81               [ 4] 1168         RET     
                                   1169 
                                   1170 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1171 ;       Copy second stack item to top.
      000582 05 6A                 1172         .word      LINK
                           000584  1173 LINK	= . 
      000584 04                    1174         .byte      4
      000585 4F 56 45 52           1175         .ascii     "OVER"
      000589                       1176 OVER:
      000589 1D 00 02         [ 2] 1177         SUBW X,#2
      00058C 90 93            [ 1] 1178         LDW Y,X
      00058E 90 EE 04         [ 2] 1179         LDW Y,(4,Y)
      000591 FF               [ 2] 1180         LDW (X),Y
      000592 81               [ 4] 1181         RET     
                                   1182 
                                   1183 ;       0<      ( n -- t )
                                   1184 ;       Return true if n is negative.
      000593 05 84                 1185         .word      LINK
                           000595  1186 LINK	= . 
      000595 02                    1187         .byte      2
      000596 30 3C                 1188         .ascii     "0<"
      000598                       1189 ZLESS:
      000598 A6 FF            [ 1] 1190         LD A,#0xFF
      00059A 90 93            [ 1] 1191         LDW Y,X
      00059C 90 FE            [ 2] 1192         LDW Y,(Y)
      00059E 2B 01            [ 1] 1193         JRMI     ZL1
      0005A0 4F               [ 1] 1194         CLR A   ;false
      0005A1 F7               [ 1] 1195 ZL1:    LD     (X),A
      0005A2 E7 01            [ 1] 1196         LD (1,X),A
      0005A4 81               [ 4] 1197 	RET     
                                   1198 
                                   1199 ;       AND     ( w w -- w )
                                   1200 ;       Bitwise AND.
      0005A5 05 95                 1201         .word      LINK
                           0005A7  1202 LINK	= . 
      0005A7 03                    1203         .byte      3
      0005A8 41 4E 44              1204         .ascii     "AND"
      0005AB                       1205 ANDD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005AB F6               [ 1] 1206         LD  A,(X)    ;D=w
      0005AC E4 02            [ 1] 1207         AND A,(2,X)
      0005AE E7 02            [ 1] 1208         LD (2,X),A
      0005B0 E6 01            [ 1] 1209         LD A,(1,X)
      0005B2 E4 03            [ 1] 1210         AND A,(3,X)
      0005B4 E7 03            [ 1] 1211         LD (3,X),A
      0005B6 1C 00 02         [ 2] 1212         ADDW X,#2
      0005B9 81               [ 4] 1213         RET
                                   1214 
                                   1215 ;       OR      ( w w -- w )
                                   1216 ;       Bitwise inclusive OR.
      0005BA 05 A7                 1217         .word      LINK
                           0005BC  1218 LINK = . 
      0005BC 02                    1219         .byte      2
      0005BD 4F 52                 1220         .ascii     "OR"
      0005BF                       1221 ORR:
      0005BF F6               [ 1] 1222         LD A,(X)    ;D=w
      0005C0 EA 02            [ 1] 1223         OR A,(2,X)
      0005C2 E7 02            [ 1] 1224         LD (2,X),A
      0005C4 E6 01            [ 1] 1225         LD A,(1,X)
      0005C6 EA 03            [ 1] 1226         OR A,(3,X)
      0005C8 E7 03            [ 1] 1227         LD (3,X),A
      0005CA 1C 00 02         [ 2] 1228         ADDW X,#2
      0005CD 81               [ 4] 1229         RET
                                   1230 
                                   1231 ;       XOR     ( w w -- w )
                                   1232 ;       Bitwise exclusive OR.
      0005CE 05 BC                 1233         .word      LINK
                           0005D0  1234 LINK	= . 
      0005D0 03                    1235         .byte      3
      0005D1 58 4F 52              1236         .ascii     "XOR"
      0005D4                       1237 XORR:
      0005D4 F6               [ 1] 1238         LD A,(X)    ;D=w
      0005D5 E8 02            [ 1] 1239         XOR A,(2,X)
      0005D7 E7 02            [ 1] 1240         LD (2,X),A
      0005D9 E6 01            [ 1] 1241         LD A,(1,X)
      0005DB E8 03            [ 1] 1242         XOR A,(3,X)
      0005DD E7 03            [ 1] 1243         LD (3,X),A
      0005DF 1C 00 02         [ 2] 1244         ADDW X,#2
      0005E2 81               [ 4] 1245         RET
                                   1246 
                                   1247 ;       UM+     ( u u -- udsum )
                                   1248 ;       Add two unsigned single
                                   1249 ;       and return a double sum.
      0005E3 05 D0                 1250         .word      LINK
                           0005E5  1251 LINK	= . 
      0005E5 03                    1252         .byte      3
      0005E6 55 4D 2B              1253         .ascii     "UM+"
      0005E9                       1254 UPLUS:
      0005E9 A6 01            [ 1] 1255         LD A,#1
      0005EB 90 93            [ 1] 1256         LDW Y,X
      0005ED 90 EE 02         [ 2] 1257         LDW Y,(2,Y)
      0005F0 90 BF 24         [ 2] 1258         LDW YTEMP,Y
      0005F3 90 93            [ 1] 1259         LDW Y,X
      0005F5 90 FE            [ 2] 1260         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005F7 72 B9 00 24      [ 2] 1261         ADDW Y,YTEMP
      0005FB EF 02            [ 2] 1262         LDW (2,X),Y
      0005FD 25 01            [ 1] 1263         JRC     UPL1
      0005FF 4F               [ 1] 1264         CLR A
      000600 E7 01            [ 1] 1265 UPL1:   LD     (1,X),A
      000602 7F               [ 1] 1266         CLR (X)
      000603 81               [ 4] 1267         RET
                                   1268 
                                   1269 ;; System and user variables
                                   1270 
                                   1271 ;       doVAR   ( -- a )
                                   1272 ;       Code for VARIABLE and CREATE.
      000604 05 E5                 1273         .word      LINK
                           000606  1274 LINK	= . 
      000606 45                    1275 	.byte      COMPO+5
      000607 44 4F 56 41 52        1276         .ascii     "DOVAR"
      00060C                       1277 DOVAR:
      00060C 1D 00 02         [ 2] 1278 	SUBW X,#2
      00060F 90 85            [ 2] 1279         POPW Y    ;get return addr (pfa)
      000611 90 FE            [ 2] 1280         LDW Y,(Y) ; indirect address 
      000613 FF               [ 2] 1281         LDW (X),Y    ;push on stack
      000614 81               [ 4] 1282         RET     ;go to RET of EXEC
                                   1283 
                                   1284 ;       BASE    ( -- a )
                                   1285 ;       Radix base for numeric I/O.
      000615 06 06                 1286         .word      LINK        
                           000617  1287 LINK = . 
      000617 04                    1288         .byte      4
      000618 42 41 53 45           1289         .ascii     "BASE"
      00061C                       1290 BASE:
      00061C 90 AE 00 06      [ 2] 1291 	LDW Y,#UBASE 
      000620 1D 00 02         [ 2] 1292 	SUBW X,#2
      000623 FF               [ 2] 1293         LDW (X),Y
      000624 81               [ 4] 1294         RET
                                   1295 
                                   1296 ;       tmp     ( -- a )
                                   1297 ;       A temporary storage.
      000625 06 17                 1298         .word      LINK
                                   1299         
                           000627  1300 LINK = . 
      000627 03                    1301 	.byte      3
      000628 54 4D 50              1302         .ascii     "TMP"
      00062B                       1303 TEMP:
      00062B 90 AE 00 08      [ 2] 1304 	LDW Y,#UTMP
      00062F 1D 00 02         [ 2] 1305 	SUBW X,#2
      000632 FF               [ 2] 1306         LDW (X),Y
      000633 81               [ 4] 1307         RET
                                   1308 
                                   1309 ;       >IN     ( -- a )
                                   1310 ;        Hold parsing pointer.
      000634 06 27                 1311         .word      LINK
                           000636  1312 LINK = . 
      000636 03                    1313         .byte      3
      000637 3E 49 4E              1314         .ascii    ">IN"
      00063A                       1315 INN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00063A 90 AE 00 0A      [ 2] 1316 	LDW Y,#UINN 
      00063E 1D 00 02         [ 2] 1317 	SUBW X,#2
      000641 FF               [ 2] 1318         LDW (X),Y
      000642 81               [ 4] 1319         RET
                                   1320 
                                   1321 ;       #TIB    ( -- a )
                                   1322 ;       Count in terminal input buffer.
      000643 06 36                 1323         .word      LINK
                           000645  1324 LINK = . 
      000645 04                    1325         .byte      4
      000646 23 54 49 42           1326         .ascii     "#TIB"
      00064A                       1327 NTIB:
      00064A 90 AE 00 0C      [ 2] 1328 	LDW Y,#UCTIB 
      00064E 1D 00 02         [ 2] 1329 	SUBW X,#2
      000651 FF               [ 2] 1330         LDW (X),Y
      000652 81               [ 4] 1331         RET
                                   1332 
                                   1333 ;       TBUF ( -- a )
                                   1334 ;       address of 128 bytes transaction buffer 
      000653 06 45                 1335         .word LINK 
                           000655  1336         LINK=.
      000655 04                    1337         .byte 4 
      000656 54 42 55 46           1338         .ascii "TBUF"
      00065A                       1339 TBUF:
      00065A 90 AE 06 80      [ 2] 1340         ldw y,#ROWBUFF
      00065E 1D 00 02         [ 2] 1341         subw x,#CELLL
      000661 FF               [ 2] 1342         ldw (x),y 
      000662 81               [ 4] 1343         ret 
                                   1344 
                                   1345 ; systeme variable 
                                   1346 ; compilation destination 
                                   1347 ; TFLASH ( -- A )
      000663 06 55                 1348         .word LINK 
                           000665  1349         LINK=.
      000665 06                    1350         .byte 6 
      000666 54 46 4C 41 53 48     1351         .ascii "TFLASH"         
      00066C                       1352 TFLASH:
      00066C 1D 00 02         [ 2] 1353         subw x,#CELLL 
      00066F 90 AE 00 1E      [ 2] 1354         ldw y,#UTFLASH
      000673 FF               [ 2] 1355         ldw (x),y 
      000674 81               [ 4] 1356         ret 
                                   1357 
                                   1358 ;       "EVAL   ( -- a )
                                   1359 ;       Execution vector of EVAL.
      000675 06 65                 1360         .word      LINK
                           000677  1361 LINK = . 
      000677 05                    1362         .byte      5
      000678 27 45 56 41 4C        1363         .ascii     "'EVAL"
      00067D                       1364 TEVAL:
      00067D 90 AE 00 10      [ 2] 1365 	LDW Y,#UINTER 
      000681 1D 00 02         [ 2] 1366 	SUBW X,#2
      000684 FF               [ 2] 1367         LDW (X),Y
      000685 81               [ 4] 1368         RET
                                   1369 
                                   1370 ;       HLD     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1371 ;       Hold a pointer of output string.
      000686 06 77                 1372         .word      LINK
                           000688  1373 LINK = . 
      000688 03                    1374         .byte      3
      000689 48 4C 44              1375         .ascii     "HLD"
      00068C                       1376 HLD:
      00068C 90 AE 00 12      [ 2] 1377 	LDW Y,#UHLD 
      000690 1D 00 02         [ 2] 1378 	SUBW X,#2
      000693 FF               [ 2] 1379         LDW (X),Y
      000694 81               [ 4] 1380         RET
                                   1381 
                                   1382 ;       CONTEXT ( -- a )
                                   1383 ;       Start vocabulary search.
      000695 06 88                 1384         .word      LINK
                           000697  1385 LINK = . 
      000697 07                    1386         .byte      7
      000698 43 4F 4E 54 45 58 54  1387         .ascii     "CONTEXT"
      00069F                       1388 CNTXT:
      00069F 90 AE 00 14      [ 2] 1389 	LDW Y,#UCNTXT
      0006A3 1D 00 02         [ 2] 1390 	SUBW X,#2
      0006A6 FF               [ 2] 1391         LDW (X),Y
      0006A7 81               [ 4] 1392         RET
                                   1393 
                                   1394 ;       VP      ( -- a )
                                   1395 ;       Point to top of variables
      0006A8 06 97                 1396         .word      LINK
                           0006AA  1397 LINK = . 
      0006AA 02                    1398         .byte      2
      0006AB 56 50                 1399         .ascii     "VP"
      0006AD                       1400 VPP:
      0006AD 90 AE 00 16      [ 2] 1401 	LDW Y,#UVP 
      0006B1 1D 00 02         [ 2] 1402 	SUBW X,#2
      0006B4 FF               [ 2] 1403         LDW (X),Y
      0006B5 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;       CP    ( -- a )
                                   1407 ;       Pointer to top of FLASH 
      0006B6 06 AA                 1408         .word LINK 
                           0006B8  1409         LINK=.
      0006B8 02                    1410         .byte 2 
      0006B9 43 50                 1411         .ascii "CP"
      0006BB                       1412 CPP: 
      0006BB 90 AE 00 18      [ 2] 1413         ldw y,#UCP 
      0006BF 1D 00 02         [ 2] 1414         subw x,#CELLL 
      0006C2 FF               [ 2] 1415         ldw (x),y 
      0006C3 81               [ 4] 1416         ret                
                                   1417 
                                   1418 ;       LAST    ( -- a )
                                   1419 ;       Point to last name in dictionary.
      0006C4 06 B8                 1420         .word      LINK
                           0006C6  1421 LINK = . 
      0006C6 04                    1422         .byte      4
      0006C7 4C 41 53 54           1423         .ascii     "LAST"
      0006CB                       1424 LAST:
      0006CB 90 AE 00 1A      [ 2] 1425 	LDW Y,#ULAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006CF 1D 00 02         [ 2] 1426 	SUBW X,#2
      0006D2 FF               [ 2] 1427         LDW (X),Y
      0006D3 81               [ 4] 1428         RET
                                   1429 
                                   1430 ; address of system variable URLAST 
                                   1431 ;       RAMLAST ( -- a )
                                   1432 ; RAM dictionary context 
      0006D4 06 C6                 1433         .word LINK 
                           0006D6  1434         LINK=. 
      0006D6 07                    1435         .byte 7  
      0006D7 52 41 4D 4C 41 53 54  1436         .ascii "RAMLAST" 
      0006DE                       1437 RAMLAST: 
      0006DE 90 AE 00 20      [ 2] 1438         ldw y,#URLAST 
      0006E2 1D 00 02         [ 2] 1439         subw x,#CELLL 
      0006E5 FF               [ 2] 1440         ldw (x),y 
      0006E6 81               [ 4] 1441         ret 
                                   1442 
                                   1443 ; OFFSET ( -- a )
                                   1444 ; address of system variable OFFSET 
      0006E7 06 D6                 1445         .word LINK 
                           0006E9  1446         LINK=.
      0006E9 06                    1447         .byte 6
      0006EA 4F 46 46 53 45 54     1448         .ascii "OFFSET" 
      0006F0                       1449 OFFSET: 
      0006F0 1D 00 02         [ 2] 1450         subw x,#CELLL
      0006F3 90 AE 00 1C      [ 2] 1451         ldw y,#UOFFSET 
      0006F7 FF               [ 2] 1452         ldw (x),y 
      0006F8 81               [ 4] 1453         ret 
                                   1454 
                                   1455 ; adjust jump address adding OFFSET
                                   1456 ; ADR-ADJ ( a -- a+offset )
      0006F9                       1457 ADRADJ: 
      0006F9 CD 06 F0         [ 4] 1458         call OFFSET 
      0006FC CD 04 B8         [ 4] 1459         call AT 
      0006FF CC 07 5A         [ 2] 1460         jp PLUS 
                                   1461 
                                   1462 
                                   1463 ;; Common functions
                                   1464 
                                   1465 ;       ?DUP    ( w -- w w | 0 )
                                   1466 ;       Dup tos if its is not zero.
      000702 06 E9                 1467         .word      LINK
                           000704  1468 LINK = . 
      000704 04                    1469         .byte      4
      000705 3F 44 55 50           1470         .ascii     "?DUP"
      000709                       1471 QDUP:
      000709 90 93            [ 1] 1472         LDW Y,X
      00070B 90 FE            [ 2] 1473 	LDW Y,(Y)
      00070D 27 04            [ 1] 1474         JREQ     QDUP1
      00070F 1D 00 02         [ 2] 1475 	SUBW X,#2
      000712 FF               [ 2] 1476         LDW (X),Y
      000713 81               [ 4] 1477 QDUP1:  RET
                                   1478 
                                   1479 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1480 ;       Rot 3rd item to top.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000714 07 04                 1481         .word      LINK
                           000716  1482 LINK = . 
      000716 03                    1483         .byte      3
      000717 52 4F 54              1484         .ascii     "ROT"
      00071A                       1485 ROT:
      00071A 90 93            [ 1] 1486         ldw y,x 
      00071C 90 FE            [ 2] 1487         ldw y,(y)
      00071E 90 89            [ 2] 1488         pushw y 
      000720 90 93            [ 1] 1489         ldw y,x 
      000722 90 EE 04         [ 2] 1490         ldw y,(4,y)
      000725 FF               [ 2] 1491         ldw (x),y 
      000726 90 93            [ 1] 1492         ldw y,x 
      000728 90 EE 02         [ 2] 1493         ldw y,(2,y)
      00072B EF 04            [ 2] 1494         ldw (4,x),y 
      00072D 90 85            [ 2] 1495         popw y 
      00072F EF 02            [ 2] 1496         ldw (2,x),y
      000731 81               [ 4] 1497         ret 
                                   1498 
                                   1499 ;       2DROP   ( w w -- )
                                   1500 ;       Discard two items on stack.
      000732 07 16                 1501         .word      LINK
                           000734  1502 LINK = . 
      000734 05                    1503         .byte      5
      000735 32 44 52 4F 50        1504         .ascii     "2DROP"
      00073A                       1505 DDROP:
      00073A 1C 00 04         [ 2] 1506         ADDW X,#4
      00073D 81               [ 4] 1507         RET
                                   1508 
                                   1509 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1510 ;       Duplicate top two items.
      00073E 07 34                 1511         .word      LINK
                           000740  1512 LINK = . 
      000740 04                    1513         .byte      4
      000741 32 44 55 50           1514         .ascii     "2DUP"
      000745                       1515 DDUP:
      000745 1D 00 04         [ 2] 1516         SUBW X,#4
      000748 90 93            [ 1] 1517         LDW Y,X
      00074A 90 EE 06         [ 2] 1518         LDW Y,(6,Y)
      00074D EF 02            [ 2] 1519         LDW (2,X),Y
      00074F 90 93            [ 1] 1520         LDW Y,X
      000751 90 EE 04         [ 2] 1521         LDW Y,(4,Y)
      000754 FF               [ 2] 1522         LDW (X),Y
      000755 81               [ 4] 1523         RET
                                   1524 
                                   1525 ;       +       ( w w -- sum )
                                   1526 ;       Add top two items.
      000756 07 40                 1527         .word      LINK
                           000758  1528 LINK = . 
      000758 01                    1529         .byte      1
      000759 2B                    1530         .ascii     "+"
      00075A                       1531 PLUS:
      00075A 90 93            [ 1] 1532         LDW Y,X
      00075C 90 FE            [ 2] 1533         LDW Y,(Y)
      00075E 90 BF 24         [ 2] 1534         LDW YTEMP,Y
      000761 1C 00 02         [ 2] 1535         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000764 90 93            [ 1] 1536         LDW Y,X
      000766 90 FE            [ 2] 1537         LDW Y,(Y)
      000768 72 B9 00 24      [ 2] 1538         ADDW Y,YTEMP
      00076C FF               [ 2] 1539         LDW (X),Y
      00076D 81               [ 4] 1540         RET
                                   1541 
                                   1542 ;       NOT     ( w -- w )
                                   1543 ;       One's complement of tos.
      00076E 07 58                 1544         .word      LINK
                           000770  1545 LINK = . 
      000770 03                    1546         .byte      3
      000771 4E 4F 54              1547         .ascii     "NOT"
      000774                       1548 INVER:
      000774 90 93            [ 1] 1549         LDW Y,X
      000776 90 FE            [ 2] 1550         LDW Y,(Y)
      000778 90 53            [ 2] 1551         CPLW Y
      00077A FF               [ 2] 1552         LDW (X),Y
      00077B 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;       NEGATE  ( n -- -n )
                                   1556 ;       Two's complement of tos.
      00077C 07 70                 1557         .word      LINK
                           00077E  1558 LINK = . 
      00077E 06                    1559         .byte      6
      00077F 4E 45 47 41 54 45     1560         .ascii     "NEGATE"
      000785                       1561 NEGAT:
      000785 90 93            [ 1] 1562         LDW Y,X
      000787 90 FE            [ 2] 1563         LDW Y,(Y)
      000789 90 50            [ 2] 1564         NEGW Y
      00078B FF               [ 2] 1565         LDW (X),Y
      00078C 81               [ 4] 1566         RET
                                   1567 
                                   1568 ;       DNEGATE ( d -- -d )
                                   1569 ;       Two's complement of top double.
      00078D 07 7E                 1570         .word      LINK
                           00078F  1571 LINK = . 
      00078F 07                    1572         .byte      7
      000790 44 4E 45 47 41 54 45  1573         .ascii     "DNEGATE"
      000797                       1574 DNEGA:
      000797 90 93            [ 1] 1575         LDW Y,X
      000799 90 FE            [ 2] 1576 	LDW Y,(Y)
      00079B 90 53            [ 2] 1577         CPLW Y     
      00079D 90 BF 24         [ 2] 1578 	LDW YTEMP,Y
      0007A0 90 93            [ 1] 1579         LDW Y,X
      0007A2 90 EE 02         [ 2] 1580         LDW Y,(2,Y)
      0007A5 90 53            [ 2] 1581         CPLW Y
      0007A7 72 A9 00 01      [ 2] 1582         addw y,#1
      0007AB EF 02            [ 2] 1583         LDW (2,X),Y
      0007AD 90 BE 24         [ 2] 1584         LDW Y,YTEMP
      0007B0 24 02            [ 1] 1585         JRNC DN1 
      0007B2 90 5C            [ 1] 1586         INCW Y
      0007B4 FF               [ 2] 1587 DN1:    LDW (X),Y
      0007B5 81               [ 4] 1588         RET
                                   1589 
                                   1590 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1591 ;       S>D ( n -- d )
                                   1592 ; convert single integer to double 
      0007B6 07 8F                 1593         .word LINK 
                           0007B8  1594         LINK=. 
      0007B8 03                    1595         .byte 3 
      0007B9 53 3E 44              1596         .ascii "S>D"
      0007BC                       1597 STOD: 
      0007BC 1D 00 02         [ 2] 1598         subw x,#CELLL 
      0007BF 90 5F            [ 1] 1599         clrw y 
      0007C1 FF               [ 2] 1600         ldw (x),y 
      0007C2 90 93            [ 1] 1601         ldw y,x 
      0007C4 90 EE 02         [ 2] 1602         ldw y,(2,y)
      0007C7 2A 05            [ 1] 1603         jrpl 1$ 
      0007C9 90 AE FF FF      [ 2] 1604         ldw y,#-1
      0007CD FF               [ 2] 1605         ldw (x),y 
      0007CE 81               [ 4] 1606 1$:     ret 
                                   1607 
                                   1608 
                                   1609 
                                   1610 
                                   1611 ;       -       ( n1 n2 -- n1-n2 )
                                   1612 ;       Subtraction.
      0007CF 07 B8                 1613         .word      LINK
                           0007D1  1614 LINK = . 
      0007D1 01                    1615         .byte      1
      0007D2 2D                    1616         .ascii     "-"
      0007D3                       1617 SUBB:
      0007D3 90 93            [ 1] 1618         LDW Y,X
      0007D5 90 FE            [ 2] 1619         LDW Y,(Y)
      0007D7 90 BF 24         [ 2] 1620         LDW YTEMP,Y
      0007DA 1C 00 02         [ 2] 1621         ADDW X,#2
      0007DD 90 93            [ 1] 1622         LDW Y,X
      0007DF 90 FE            [ 2] 1623         LDW Y,(Y)
      0007E1 72 B2 00 24      [ 2] 1624         SUBW Y,YTEMP
      0007E5 FF               [ 2] 1625         LDW (X),Y
      0007E6 81               [ 4] 1626         RET
                                   1627 
                                   1628 ;       ABS     ( n -- n )
                                   1629 ;       Return  absolute value of n.
      0007E7 07 D1                 1630         .word      LINK
                           0007E9  1631 LINK = . 
      0007E9 03                    1632         .byte      3
      0007EA 41 42 53              1633         .ascii     "ABS"
      0007ED                       1634 ABSS:
      0007ED 90 93            [ 1] 1635         LDW Y,X
      0007EF 90 FE            [ 2] 1636 	LDW Y,(Y)
      0007F1 2A 03            [ 1] 1637         JRPL     AB1     ;negate:
      0007F3 90 50            [ 2] 1638         NEGW     Y     ;else negate hi byte
      0007F5 FF               [ 2] 1639         LDW (X),Y
      0007F6 81               [ 4] 1640 AB1:    RET
                                   1641 
                                   1642 ;       =       ( w w -- t )
                                   1643 ;       Return true if top two are =al.
      0007F7 07 E9                 1644         .word      LINK
                           0007F9  1645 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0007F9 01                    1646         .byte      1
      0007FA 3D                    1647         .ascii     "="
      0007FB                       1648 EQUAL:
      0007FB A6 FF            [ 1] 1649         LD A,#0xFF  ;true
      0007FD 90 93            [ 1] 1650         LDW Y,X    ;D = n2
      0007FF 90 FE            [ 2] 1651         LDW Y,(Y)
      000801 90 BF 24         [ 2] 1652         LDW YTEMP,Y
      000804 1C 00 02         [ 2] 1653         ADDW X,#2
      000807 90 93            [ 1] 1654         LDW Y,X
      000809 90 FE            [ 2] 1655         LDW Y,(Y)
      00080B 90 B3 24         [ 2] 1656         CPW Y,YTEMP     ;if n2 <> n1
      00080E 27 01            [ 1] 1657         JREQ     EQ1
      000810 4F               [ 1] 1658         CLR A
      000811 F7               [ 1] 1659 EQ1:    LD (X),A
      000812 E7 01            [ 1] 1660         LD (1,X),A
      000814 81               [ 4] 1661 	RET     
                                   1662 
                                   1663 ;       U<      ( u u -- t )
                                   1664 ;       Unsigned compare of top two items.
      000815 07 F9                 1665         .word      LINK
                           000817  1666 LINK = . 
      000817 02                    1667         .byte      2
      000818 55 3C                 1668         .ascii     "U<"
      00081A                       1669 ULESS:
      00081A A6 FF            [ 1] 1670         LD A,#0xFF  ;true
      00081C 90 93            [ 1] 1671         LDW Y,X    ;D = n2
      00081E 90 FE            [ 2] 1672         LDW Y,(Y)
      000820 90 BF 24         [ 2] 1673         LDW YTEMP,Y
      000823 1C 00 02         [ 2] 1674         ADDW X,#2
      000826 90 93            [ 1] 1675         LDW Y,X
      000828 90 FE            [ 2] 1676         LDW Y,(Y)
      00082A 90 B3 24         [ 2] 1677         CPW Y,YTEMP     ;if n2 <> n1
      00082D 25 01            [ 1] 1678         JRULT     ULES1
      00082F 4F               [ 1] 1679         CLR A
      000830 F7               [ 1] 1680 ULES1:  LD (X),A
      000831 E7 01            [ 1] 1681         LD (1,X),A
      000833 81               [ 4] 1682 	RET     
                                   1683 
                                   1684 ;       <       ( n1 n2 -- t )
                                   1685 ;       Signed compare of top two items.
      000834 08 17                 1686         .word      LINK
                           000836  1687 LINK = . 
      000836 01                    1688         .byte      1
      000837 3C                    1689         .ascii     "<"
      000838                       1690 LESS:
      000838 A6 FF            [ 1] 1691         LD A,#0xFF  ;true
      00083A 90 93            [ 1] 1692         LDW Y,X    ;D = n2
      00083C 90 FE            [ 2] 1693         LDW Y,(Y)
      00083E 90 BF 24         [ 2] 1694         LDW YTEMP,Y
      000841 1C 00 02         [ 2] 1695         ADDW X,#2
      000844 90 93            [ 1] 1696         LDW Y,X
      000846 90 FE            [ 2] 1697         LDW Y,(Y)
      000848 90 B3 24         [ 2] 1698         CPW Y,YTEMP     ;if n2 <> n1
      00084B 2F 01            [ 1] 1699         JRSLT     LT1
      00084D 4F               [ 1] 1700         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00084E F7               [ 1] 1701 LT1:    LD (X),A
      00084F E7 01            [ 1] 1702         LD (1,X),A
      000851 81               [ 4] 1703 	RET     
                                   1704 
                                   1705 ;       MAX     ( n n -- n )
                                   1706 ;       Return greater of two top items.
      000852 08 36                 1707         .word      LINK
                           000854  1708 LINK = . 
      000854 03                    1709         .byte      3
      000855 4D 41 58              1710         .ascii     "MAX"
      000858                       1711 MAX:
      000858 90 93            [ 1] 1712         LDW Y,X    ;D = n2
      00085A 90 EE 02         [ 2] 1713         LDW Y,(2,Y)
      00085D 90 BF 24         [ 2] 1714         LDW YTEMP,Y
      000860 90 93            [ 1] 1715         LDW Y,X
      000862 90 FE            [ 2] 1716         LDW Y,(Y)
      000864 90 B3 24         [ 2] 1717         CPW Y,YTEMP     ;if n2 <> n1
      000867 2F 02            [ 1] 1718         JRSLT     MAX1
      000869 EF 02            [ 2] 1719         LDW (2,X),Y
      00086B 1C 00 02         [ 2] 1720 MAX1:   ADDW X,#2
      00086E 81               [ 4] 1721 	RET     
                                   1722 
                                   1723 ;       MIN     ( n n -- n )
                                   1724 ;       Return smaller of top two items.
      00086F 08 54                 1725         .word      LINK
                           000871  1726 LINK = . 
      000871 03                    1727         .byte      3
      000872 4D 49 4E              1728         .ascii     "MIN"
      000875                       1729 MIN:
      000875 90 93            [ 1] 1730         LDW Y,X    ;D = n2
      000877 90 EE 02         [ 2] 1731         LDW Y,(2,Y)
      00087A 90 BF 24         [ 2] 1732         LDW YTEMP,Y
      00087D 90 93            [ 1] 1733         LDW Y,X
      00087F 90 FE            [ 2] 1734         LDW Y,(Y)
      000881 90 B3 24         [ 2] 1735         CPW Y,YTEMP     ;if n2 <> n1
      000884 2C 02            [ 1] 1736         JRSGT     MIN1
      000886 EF 02            [ 2] 1737         LDW (2,X),Y
      000888 1C 00 02         [ 2] 1738 MIN1:	ADDW X,#2
      00088B 81               [ 4] 1739 	RET     
                                   1740 
                                   1741 ;       WITHIN  ( u ul uh -- t )
                                   1742 ;       Return true if u is within
                                   1743 ;       range of ul and uh. ( ul <= u < uh )
      00088C 08 71                 1744         .word      LINK
                           00088E  1745 LINK = . 
      00088E 06                    1746         .byte      6
      00088F 57 49 54 48 49 4E     1747         .ascii     "WITHIN"
      000895                       1748 WITHI:
      000895 CD 05 89         [ 4] 1749         CALL     OVER
      000898 CD 07 D3         [ 4] 1750         CALL     SUBB
      00089B CD 05 28         [ 4] 1751         CALL     TOR
      00089E CD 07 D3         [ 4] 1752         CALL     SUBB
      0008A1 CD 05 09         [ 4] 1753         CALL     RFROM
      0008A4 CC 08 1A         [ 2] 1754         JP     ULESS
                                   1755 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1756 ;; Divide
                                   1757 
                                   1758 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1759 ;       Unsigned divide of a double by a
                                   1760 ;       single. Return mod and quotient.
      0008A7 08 8E                 1761         .word      LINK
                           0008A9  1762 LINK = . 
      0008A9 06                    1763         .byte      6
      0008AA 55 4D 2F 4D 4F 44     1764         .ascii     "UM/MOD"
      0008B0                       1765 UMMOD:
      0008B0 BF 22            [ 2] 1766 	LDW XTEMP,X	; save stack pointer
      0008B2 FE               [ 2] 1767 	LDW X,(X)	; un
      0008B3 BF 24            [ 2] 1768 	LDW YTEMP,X     ; save un
      0008B5 90 BE 22         [ 2] 1769 	LDW Y,XTEMP	; stack pointer
      0008B8 90 EE 04         [ 2] 1770 	LDW Y,(4,Y)     ; Y=udl
      0008BB BE 22            [ 2] 1771 	LDW X,XTEMP
      0008BD EE 02            [ 2] 1772 	LDW X,(2,X)	; X=udh
      0008BF B3 24            [ 2] 1773 	CPW X,YTEMP
      0008C1 23 0F            [ 2] 1774 	JRULE MMSM1
      0008C3 BE 22            [ 2] 1775 	LDW X,XTEMP
      0008C5 1C 00 02         [ 2] 1776 	ADDW X,#2	; pop off 1 level
      0008C8 90 AE FF FF      [ 2] 1777 	LDW Y,#0xFFFF
      0008CC FF               [ 2] 1778 	LDW (X),Y
      0008CD 90 5F            [ 1] 1779 	CLRW Y
      0008CF EF 02            [ 2] 1780 	LDW (2,X),Y
      0008D1 81               [ 4] 1781 	RET
      0008D2                       1782 MMSM1:
                                   1783 ; take advantage of divw x,y when udh==0
      0008D2 5D               [ 2] 1784         tnzw x  ; is udh==0?
      0008D3 26 11            [ 1] 1785         jrne MMSM2 
      0008D5 93               [ 1] 1786         ldw x,y    ;udl 
      0008D6 90 BE 24         [ 2] 1787         ldw y,YTEMP ; divisor 
      0008D9 65               [ 2] 1788         divw x,y 
      0008DA 89               [ 2] 1789         pushw x     ; quotient 
      0008DB BE 22            [ 2] 1790         ldw x,XTEMP 
      0008DD 1C 00 02         [ 2] 1791         addw x,#CELLL 
      0008E0 EF 02            [ 2] 1792         ldw (2,x),y  ; ur
      0008E2 90 85            [ 2] 1793         popw y 
      0008E4 FF               [ 2] 1794         ldw (x),y ; uq 
      0008E5 81               [ 4] 1795         ret 
      0008E6                       1796 MMSM2:        
      0008E6 A6 11            [ 1] 1797 	LD A,#17	; loop count
      0008E8                       1798 MMSM3:
      0008E8 B3 24            [ 2] 1799 	CPW X,YTEMP	; compare udh to un
      0008EA 25 04            [ 1] 1800 	JRULT MMSM4	; can't subtract
      0008EC 72 B0 00 24      [ 2] 1801 	SUBW X,YTEMP	; can subtract
      0008F0                       1802 MMSM4:
      0008F0 8C               [ 1] 1803 	CCF	; quotient bit
      0008F1 90 59            [ 2] 1804 	RLCW Y	; rotate into quotient
      0008F3 59               [ 2] 1805 	RLCW X	; rotate into remainder
      0008F4 4A               [ 1] 1806 	DEC A	; repeat
      0008F5 22 F1            [ 1] 1807 	JRUGT MMSM3
      0008F7 56               [ 2] 1808         RRCW X 
      0008F8 BF 24            [ 2] 1809 	LDW YTEMP,X	; done, save remainder
      0008FA BE 22            [ 2] 1810 	LDW X,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0008FC 1C 00 02         [ 2] 1811 	ADDW X,#2	; drop
      0008FF FF               [ 2] 1812 	LDW (X),Y
      000900 90 BE 24         [ 2] 1813 	LDW Y,YTEMP	; save quotient
      000903 EF 02            [ 2] 1814 	LDW (2,X),Y
      000905 81               [ 4] 1815 	RET
                                   1816 	
                                   1817 ;       M/MOD   ( d n -- r q )
                                   1818 ;       Signed floored divide of double by
                                   1819 ;       single. Return mod and quotient.
      000906 08 A9                 1820         .word      LINK
                           000908  1821 LINK = . 
      000908 05                    1822         .byte      5
      000909 4D 2F 4D 4F 44        1823         .ascii     "M/MOD"
      00090E                       1824 MSMOD:  
      00090E CD 05 5F         [ 4] 1825         CALL	DUPP
      000911 CD 05 98         [ 4] 1826         CALL	ZLESS
      000914 CD 05 5F         [ 4] 1827         CALL	DUPP
      000917 CD 05 28         [ 4] 1828         CALL	TOR
      00091A CD 04 6D         [ 4] 1829         CALL	QBRAN
      00091D 09 2B                 1830         .word	MMOD1
      00091F CD 07 85         [ 4] 1831         CALL	NEGAT
      000922 CD 05 28         [ 4] 1832         CALL	TOR
      000925 CD 07 97         [ 4] 1833         CALL	DNEGA
      000928 CD 05 09         [ 4] 1834         CALL	RFROM
      00092B CD 05 28         [ 4] 1835 MMOD1:	CALL	TOR
      00092E CD 05 5F         [ 4] 1836         CALL	DUPP
      000931 CD 05 98         [ 4] 1837         CALL	ZLESS
      000934 CD 04 6D         [ 4] 1838         CALL	QBRAN
      000937 09 3F                 1839         .word	MMOD2
      000939 CD 05 1C         [ 4] 1840         CALL	RAT
      00093C CD 07 5A         [ 4] 1841         CALL	PLUS
      00093F CD 05 09         [ 4] 1842 MMOD2:	CALL	RFROM
      000942 CD 08 B0         [ 4] 1843         CALL	UMMOD
      000945 CD 05 09         [ 4] 1844         CALL	RFROM
      000948 CD 04 6D         [ 4] 1845         CALL	QBRAN
      00094B 09 56                 1846         .word	MMOD3
      00094D CD 05 6F         [ 4] 1847         CALL	SWAPP
      000950 CD 07 85         [ 4] 1848         CALL	NEGAT
      000953 CD 05 6F         [ 4] 1849         CALL	SWAPP
      000956 81               [ 4] 1850 MMOD3:	RET
                                   1851 
                                   1852 ;       /MOD    ( n n -- r q )
                                   1853 ;       Signed divide. Return mod and quotient.
      000957 09 08                 1854         .word      LINK
                           000959  1855 LINK = . 
      000959 04                    1856         .byte      4
      00095A 2F 4D 4F 44           1857         .ascii     "/MOD"
      00095E                       1858 SLMOD:
      00095E CD 05 89         [ 4] 1859         CALL	OVER
      000961 CD 05 98         [ 4] 1860         CALL	ZLESS
      000964 CD 05 6F         [ 4] 1861         CALL	SWAPP
      000967 CC 09 0E         [ 2] 1862         JP	MSMOD
                                   1863 
                                   1864 ;       MOD     ( n n -- r )
                                   1865 ;       Signed divide. Return mod only.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00096A 09 59                 1866         .word      LINK
                           00096C  1867 LINK = . 
      00096C 03                    1868         .byte      3
      00096D 4D 4F 44              1869         .ascii     "MOD"
      000970                       1870 MODD:
      000970 CD 09 5E         [ 4] 1871 	CALL	SLMOD
      000973 CC 05 55         [ 2] 1872 	JP	DROP
                                   1873 
                                   1874 ;       /       ( n n -- q )
                                   1875 ;       Signed divide. Return quotient only.
      000976 09 6C                 1876         .word      LINK
                           000978  1877 LINK = . 
      000978 01                    1878         .byte      1
      000979 2F                    1879         .ascii     "/"
      00097A                       1880 SLASH:
      00097A CD 09 5E         [ 4] 1881         CALL	SLMOD
      00097D CD 05 6F         [ 4] 1882         CALL	SWAPP
      000980 CC 05 55         [ 2] 1883         JP	DROP
                                   1884 
                                   1885 ;; Multiply
                                   1886 
                                   1887 ;       UM*     ( u u -- ud )
                                   1888 ;       Unsigned multiply. Return double product.
      000983 09 78                 1889         .word      LINK
                           000985  1890 LINK = . 
      000985 03                    1891         .byte      3
      000986 55 4D 2A              1892         .ascii     "UM*"
      000989                       1893 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1894 ; take advantage of SP addressing modes
                                   1895 ; these PRODx in RAM are not required
                                   1896 ; the product is kept on stack as local variable 
                                   1897         ;; bytes offset on data stack 
                           000002  1898         da=2 
                           000003  1899         db=3 
                           000000  1900         dc=0 
                           000001  1901         dd=1 
                                   1902         ;; product bytes offset on return stack 
                           000001  1903         UD1=1  ; ud bits 31..24
                           000002  1904         UD2=2  ; ud bits 23..16
                           000003  1905         UD3=3  ; ud bits 15..8 
                           000004  1906         UD4=4  ; ud bits 7..0 
                                   1907         ;; local variable for product set to zero   
      000989 90 5F            [ 1] 1908         clrw y 
      00098B 90 89            [ 2] 1909         pushw y  ; bits 15..0
      00098D 90 89            [ 2] 1910         pushw y  ; bits 31..16 
      00098F E6 03            [ 1] 1911         ld a,(db,x) ; b 
      000991 90 97            [ 1] 1912         ld yl,a 
      000993 E6 01            [ 1] 1913         ld a,(dd,x)   ; d
      000995 90 42            [ 4] 1914         mul y,a    ; b*d  
      000997 17 03            [ 2] 1915         ldw (UD3,sp),y ; lowest weight product 
      000999 E6 03            [ 1] 1916         ld a,(db,x)
      00099B 90 97            [ 1] 1917         ld yl,a 
      00099D E6 00            [ 1] 1918         ld a,(dc,x)
      00099F 90 42            [ 4] 1919         mul y,a  ; b*c 
                                   1920         ;;; do the partial sum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009A1 72 F9 02         [ 2] 1921         addw y,(UD2,sp)
      0009A4 4F               [ 1] 1922         clr a 
      0009A5 49               [ 1] 1923         rlc a
      0009A6 6B 01            [ 1] 1924         ld (UD1,sp),a 
      0009A8 17 02            [ 2] 1925         ldw (UD2,sp),y 
      0009AA E6 02            [ 1] 1926         ld a,(da,x)
      0009AC 90 97            [ 1] 1927         ld yl,a 
      0009AE E6 01            [ 1] 1928         ld a,(dd,x)
      0009B0 90 42            [ 4] 1929         mul y,a   ; a*d 
                                   1930         ;; do partial sum 
      0009B2 72 F9 02         [ 2] 1931         addw y,(UD2,sp)
      0009B5 4F               [ 1] 1932         clr a 
      0009B6 19 01            [ 1] 1933         adc a,(UD1,sp)
      0009B8 6B 01            [ 1] 1934         ld (UD1,sp),a  
      0009BA 17 02            [ 2] 1935         ldw (UD2,sp),y 
      0009BC E6 02            [ 1] 1936         ld a,(da,x)
      0009BE 90 97            [ 1] 1937         ld yl,a 
      0009C0 E6 00            [ 1] 1938         ld a,(dc,x)
      0009C2 90 42            [ 4] 1939         mul y,a  ;  a*c highest weight product 
                                   1940         ;;; do partial sum 
      0009C4 72 F9 01         [ 2] 1941         addw y,(UD1,sp)
      0009C7 FF               [ 2] 1942         ldw (x),y  ; udh 
      0009C8 16 03            [ 2] 1943         ldw y,(UD3,sp)
      0009CA EF 02            [ 2] 1944         ldw (2,x),y  ; udl  
      0009CC 5B 04            [ 2] 1945         addw sp,#4 ; drop local variable 
      0009CE 81               [ 4] 1946         ret  
                                   1947 
                                   1948 
                                   1949 ;       *       ( n n -- n )
                                   1950 ;       Signed multiply. Return single product.
      0009CF 09 85                 1951         .word      LINK
                           0009D1  1952 LINK = . 
      0009D1 01                    1953         .byte      1
      0009D2 2A                    1954         .ascii     "*"
      0009D3                       1955 STAR:
      0009D3 CD 09 89         [ 4] 1956 	CALL	UMSTA
      0009D6 CC 05 55         [ 2] 1957 	JP	DROP
                                   1958 
                                   1959 ;       M*      ( n n -- d )
                                   1960 ;       Signed multiply. Return double product.
      0009D9 09 D1                 1961         .word      LINK
                           0009DB  1962 LINK = . 
      0009DB 02                    1963         .byte      2
      0009DC 4D 2A                 1964         .ascii     "M*"
      0009DE                       1965 MSTAR:      
      0009DE CD 07 45         [ 4] 1966         CALL	DDUP
      0009E1 CD 05 D4         [ 4] 1967         CALL	XORR
      0009E4 CD 05 98         [ 4] 1968         CALL	ZLESS
      0009E7 CD 05 28         [ 4] 1969         CALL	TOR
      0009EA CD 07 ED         [ 4] 1970         CALL	ABSS
      0009ED CD 05 6F         [ 4] 1971         CALL	SWAPP
      0009F0 CD 07 ED         [ 4] 1972         CALL	ABSS
      0009F3 CD 09 89         [ 4] 1973         CALL	UMSTA
      0009F6 CD 05 09         [ 4] 1974         CALL	RFROM
      0009F9 CD 04 6D         [ 4] 1975         CALL	QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009FC 0A 01                 1976         .word	MSTA1
      0009FE CD 07 97         [ 4] 1977         CALL	DNEGA
      000A01 81               [ 4] 1978 MSTA1:	RET
                                   1979 
                                   1980 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1981 ;       Multiply n1 and n2, then divide
                                   1982 ;       by n3. Return mod and quotient.
      000A02 09 DB                 1983         .word      LINK
                           000A04  1984 LINK = . 
      000A04 05                    1985         .byte      5
      000A05 2A 2F 4D 4F 44        1986         .ascii     "*/MOD"
      000A0A                       1987 SSMOD:
      000A0A CD 05 28         [ 4] 1988         CALL     TOR
      000A0D CD 09 DE         [ 4] 1989         CALL     MSTAR
      000A10 CD 05 09         [ 4] 1990         CALL     RFROM
      000A13 CC 09 0E         [ 2] 1991         JP     MSMOD
                                   1992 
                                   1993 ;       */      ( n1 n2 n3 -- q )
                                   1994 ;       Multiply n1 by n2, then divide
                                   1995 ;       by n3. Return quotient only.
      000A16 0A 04                 1996         .word      LINK
                           000A18  1997 LINK = . 
      000A18 02                    1998         .byte      2
      000A19 2A 2F                 1999         .ascii     "*/"
      000A1B                       2000 STASL:
      000A1B CD 0A 0A         [ 4] 2001         CALL	SSMOD
      000A1E CD 05 6F         [ 4] 2002         CALL	SWAPP
      000A21 CC 05 55         [ 2] 2003         JP	DROP
                                   2004 
                                   2005 ;; Miscellaneous
                                   2006 
                                   2007 ;       CELL+   ( a -- a )
                                   2008 ;       Add cell size in byte to address.
      000A24 0A 18                 2009         .word      LINK
                           000A26  2010 LINK = . 
      000A26 02                    2011         .byte       2
      000A27 32 2B                 2012         .ascii     "2+"
      000A29                       2013 CELLP:
      000A29 90 93            [ 1] 2014         LDW Y,X
      000A2B 90 FE            [ 2] 2015 	LDW Y,(Y)
      000A2D 72 A9 00 02      [ 2] 2016         ADDW Y,#CELLL 
      000A31 FF               [ 2] 2017         LDW (X),Y
      000A32 81               [ 4] 2018         RET
                                   2019 
                                   2020 ;       CELL-   ( a -- a )
                                   2021 ;       Subtract 2 from address.
      000A33 0A 26                 2022         .word      LINK
                           000A35  2023 LINK = . 
      000A35 02                    2024         .byte       2
      000A36 32 2D                 2025         .ascii     "2-"
      000A38                       2026 CELLM:
      000A38 90 93            [ 1] 2027         LDW Y,X
      000A3A 90 FE            [ 2] 2028 	LDW Y,(Y)
      000A3C 72 A2 00 02      [ 2] 2029         SUBW Y,#CELLL
      000A40 FF               [ 2] 2030         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A41 81               [ 4] 2031         RET
                                   2032 
                                   2033 ;       CELLS   ( n -- n )
                                   2034 ;       Multiply tos by 2.
      000A42 0A 35                 2035         .word      LINK
                           000A44  2036 LINK = . 
      000A44 02                    2037         .byte       2
      000A45 32 2A                 2038         .ascii     "2*"
      000A47                       2039 CELLS:
      000A47 90 93            [ 1] 2040         LDW Y,X
      000A49 90 FE            [ 2] 2041 	LDW Y,(Y)
      000A4B 90 58            [ 2] 2042         SLAW Y
      000A4D FF               [ 2] 2043         LDW (X),Y
      000A4E 81               [ 4] 2044         RET
                                   2045 
                                   2046 ;       1+      ( a -- a )
                                   2047 ;       Add cell size in byte to address.
      000A4F 0A 44                 2048         .word      LINK
                           000A51  2049 LINK = . 
      000A51 02                    2050         .byte      2
      000A52 31 2B                 2051         .ascii     "1+"
      000A54                       2052 ONEP:
      000A54 90 93            [ 1] 2053         LDW Y,X
      000A56 90 FE            [ 2] 2054 	LDW Y,(Y)
      000A58 90 5C            [ 1] 2055         INCW Y
      000A5A FF               [ 2] 2056         LDW (X),Y
      000A5B 81               [ 4] 2057         RET
                                   2058 
                                   2059 ;       1-      ( a -- a )
                                   2060 ;       Subtract 2 from address.
      000A5C 0A 51                 2061         .word      LINK
                           000A5E  2062 LINK = . 
      000A5E 02                    2063         .byte      2
      000A5F 31 2D                 2064         .ascii     "1-"
      000A61                       2065 ONEM:
      000A61 90 93            [ 1] 2066         LDW Y,X
      000A63 90 FE            [ 2] 2067 	LDW Y,(Y)
      000A65 90 5A            [ 2] 2068         DECW Y
      000A67 FF               [ 2] 2069         LDW (X),Y
      000A68 81               [ 4] 2070         RET
                                   2071 
                                   2072 ;  shift left n times 
                                   2073 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000A69 0A 5E                 2074         .word LINK 
                           000A6B  2075         LINK=.
      000A6B 06                    2076         .byte 6 
      000A6C 4C 53 48 49 46 54     2077         .ascii "LSHIFT"
      000A72                       2078 LSHIFT:
      000A72 E6 01            [ 1] 2079         ld a,(1,x)
      000A74 1C 00 02         [ 2] 2080         addw x,#CELLL 
      000A77 90 93            [ 1] 2081         ldw y,x 
      000A79 90 FE            [ 2] 2082         ldw y,(y)
      000A7B                       2083 LSHIFT1:
      000A7B 4D               [ 1] 2084         tnz a 
      000A7C 27 05            [ 1] 2085         jreq LSHIFT4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A7E 90 58            [ 2] 2086         sllw y 
      000A80 4A               [ 1] 2087         dec a 
      000A81 20 F8            [ 2] 2088         jra LSHIFT1 
      000A83                       2089 LSHIFT4:
      000A83 FF               [ 2] 2090         ldw (x),y 
      000A84 81               [ 4] 2091         ret 
                                   2092 
                                   2093 ; shift right n times                 
                                   2094 ; RSHIFT (n1 n2 -- n1>>n2 )
      000A85 0A 6B                 2095         .word LINK 
                           000A87  2096         LINK=.
      000A87 06                    2097         .byte 6
      000A88 52 53 48 49 46 54     2098         .ascii "RSHIFT"
      000A8E                       2099 RSHIFT:
      000A8E E6 01            [ 1] 2100         ld a,(1,x)
      000A90 1C 00 02         [ 2] 2101         addw x,#CELLL 
      000A93 90 93            [ 1] 2102         ldw y,x 
      000A95 90 FE            [ 2] 2103         ldw y,(y)
      000A97                       2104 RSHIFT1:
      000A97 4D               [ 1] 2105         tnz a 
      000A98 27 05            [ 1] 2106         jreq RSHIFT4 
      000A9A 90 54            [ 2] 2107         srlw y 
      000A9C 4A               [ 1] 2108         dec a 
      000A9D 20 F8            [ 2] 2109         jra RSHIFT1 
      000A9F                       2110 RSHIFT4:
      000A9F FF               [ 2] 2111         ldw (x),y 
      000AA0 81               [ 4] 2112         ret 
                                   2113 
                                   2114 
                                   2115 ;       2/      ( n -- n )
                                   2116 ;       divide  tos by 2.
      000AA1 0A 87                 2117         .word      LINK
                           000AA3  2118 LINK = . 
      000AA3 02                    2119         .byte      2
      000AA4 32 2F                 2120         .ascii     "2/"
      000AA6                       2121 TWOSL:
      000AA6 90 93            [ 1] 2122         LDW Y,X
      000AA8 90 FE            [ 2] 2123 	LDW Y,(Y)
      000AAA 90 57            [ 2] 2124         SRAW Y
      000AAC FF               [ 2] 2125         LDW (X),Y
      000AAD 81               [ 4] 2126         RET
                                   2127 
                                   2128 ;       BL      ( -- 32 )
                                   2129 ;       Return 32,  blank character.
      000AAE 0A A3                 2130         .word      LINK
                           000AB0  2131 LINK = . 
      000AB0 02                    2132         .byte      2
      000AB1 42 4C                 2133         .ascii     "BL"
      000AB3                       2134 BLANK:
      000AB3 1D 00 02         [ 2] 2135         SUBW X,#2
      000AB6 90 AE 00 20      [ 2] 2136 	LDW Y,#32
      000ABA FF               [ 2] 2137         LDW (X),Y
      000ABB 81               [ 4] 2138         RET
                                   2139 
                                   2140 ;         0     ( -- 0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2141 ;         Return 0.
      000ABC 0A B0                 2142         .word      LINK
                           000ABE  2143 LINK = . 
      000ABE 01                    2144         .byte       1
      000ABF 30                    2145         .ascii     "0"
      000AC0                       2146 ZERO:
      000AC0 1D 00 02         [ 2] 2147         SUBW X,#2
      000AC3 90 5F            [ 1] 2148 	CLRW Y
      000AC5 FF               [ 2] 2149         LDW (X),Y
      000AC6 81               [ 4] 2150         RET
                                   2151 
                                   2152 ;         1     ( -- 1)
                                   2153 ;         Return 1.
      000AC7 0A BE                 2154         .word      LINK
                           000AC9  2155 LINK = . 
      000AC9 01                    2156         .byte       1
      000ACA 31                    2157         .ascii     "1"
      000ACB                       2158 ONE:
      000ACB 1D 00 02         [ 2] 2159         SUBW X,#2
      000ACE 90 AE 00 01      [ 2] 2160 	LDW Y,#1
      000AD2 FF               [ 2] 2161         LDW (X),Y
      000AD3 81               [ 4] 2162         RET
                                   2163 
                                   2164 ;         -1    ( -- -1)
                                   2165 ;         Return 32,  blank character.
      000AD4 0A C9                 2166         .word      LINK
                           000AD6  2167 LINK = . 
      000AD6 02                    2168         .byte       2
      000AD7 2D 31                 2169         .ascii     "-1"
      000AD9                       2170 MONE:
      000AD9 1D 00 02         [ 2] 2171         SUBW X,#2
      000ADC 90 AE FF FF      [ 2] 2172 	LDW Y,#0xFFFF
      000AE0 FF               [ 2] 2173         LDW (X),Y
      000AE1 81               [ 4] 2174         RET
                                   2175 
                                   2176 ;       >CHAR   ( c -- c )
                                   2177 ;       Filter non-printing characters.
      000AE2 0A D6                 2178         .word      LINK
                           000AE4  2179 LINK = . 
      000AE4 05                    2180         .byte      5
      000AE5 3E 43 48 41 52        2181         .ascii     ">CHAR"
      000AEA                       2182 TCHAR:
      000AEA E6 01            [ 1] 2183         ld a,(1,x)
      000AEC A1 20            [ 1] 2184         cp a,#32  
      000AEE 2B 05            [ 1] 2185         jrmi 1$ 
      000AF0 A1 7F            [ 1] 2186         cp a,#127 
      000AF2 2A 01            [ 1] 2187         jrpl 1$ 
      000AF4 81               [ 4] 2188         ret 
      000AF5 A6 5F            [ 1] 2189 1$:     ld a,#'_ 
      000AF7 E7 01            [ 1] 2190         ld (1,x),a 
      000AF9 81               [ 4] 2191         ret 
                                   2192 
                                   2193 ;       DEPTH   ( -- n )
                                   2194 ;       Return  depth of  data stack.
      000AFA 0A E4                 2195         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000AFC  2196 LINK = . 
      000AFC 05                    2197         .byte      5
      000AFD 44 45 50 54 48        2198         .ascii     "DEPTH"
      000B02                       2199 DEPTH: 
      000B02 90 BE 2A         [ 2] 2200         LDW Y,SP0    ;save data stack ptr
      000B05 BF 22            [ 2] 2201 	LDW XTEMP,X
      000B07 72 B2 00 22      [ 2] 2202         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B0B 90 57            [ 2] 2203         SRAW Y    ;Y = #stack items
      000B0D 1D 00 02         [ 2] 2204 	SUBW X,#2
      000B10 FF               [ 2] 2205         LDW (X),Y     ; if neg, underflow
      000B11 81               [ 4] 2206         RET
                                   2207 
                                   2208 ;       PICK    ( ... +n -- ... w )
                                   2209 ;       Copy  nth stack item to tos.
      000B12 0A FC                 2210         .word      LINK
                           000B14  2211 LINK = . 
      000B14 04                    2212         .byte      4
      000B15 50 49 43 4B           2213         .ascii     "PICK"
      000B19                       2214 PICK:
      000B19 90 93            [ 1] 2215         LDW Y,X   ;D = n1
      000B1B 90 FE            [ 2] 2216         LDW Y,(Y)
                                   2217 ; modified for standard compliance          
                                   2218 ; 0 PICK must be equivalent to DUP 
      000B1D 90 5C            [ 1] 2219         INCW Y 
      000B1F 90 58            [ 2] 2220         SLAW Y
      000B21 BF 22            [ 2] 2221         LDW XTEMP,X
      000B23 72 B9 00 22      [ 2] 2222         ADDW Y,XTEMP
      000B27 90 FE            [ 2] 2223         LDW Y,(Y)
      000B29 FF               [ 2] 2224         LDW (X),Y
      000B2A 81               [ 4] 2225         RET
                                   2226 
                                   2227 ;; Memory access
                                   2228 
                                   2229 ;       +!      ( n a -- )
                                   2230 ;       Add n to  contents at address a.
      000B2B 0B 14                 2231         .word      LINK
                           000B2D  2232 LINK = . 
      000B2D 02                    2233         .byte      2
      000B2E 2B 21                 2234         .ascii     "+!"
      000B30                       2235 PSTOR:
      000B30 90 93            [ 1] 2236         ldw y,x 
      000B32 90 FE            [ 2] 2237         ldw y,(y)
      000B34 90 BF 24         [ 2] 2238         ldw YTEMP,y  ; address
      000B37 90 FE            [ 2] 2239         ldw y,(y)  
      000B39 90 89            [ 2] 2240         pushw y  ; value at address 
      000B3B 90 93            [ 1] 2241         ldw y,x 
      000B3D 90 EE 02         [ 2] 2242         ldw y,(2,y) ; n 
      000B40 72 F9 01         [ 2] 2243         addw y,(1,sp) ; n+value
      000B43 91 CF 24         [ 5] 2244         ldw [YTEMP],y ;  a!
      000B46 90 85            [ 2] 2245         popw y    ;drop local var
      000B48 1C 00 04         [ 2] 2246         addw x,#4 ; DDROP 
      000B4B 81               [ 4] 2247         ret 
                                   2248 
                                   2249 ;       2!      ( d a -- )
                                   2250 ;       Store  double integer to address a.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B4C 0B 2D                 2251         .word      LINK
                           000B4E  2252 LINK = . 
      000B4E 02                    2253         .byte      2
      000B4F 32 21                 2254         .ascii     "2!"
      000B51                       2255 DSTOR:
      000B51 90 93            [ 1] 2256         ldw y,x 
      000B53 90 FE            [ 2] 2257         ldw y,(y)
      000B55 90 BF 24         [ 2] 2258         ldw YTEMP,y ; address 
      000B58 1C 00 02         [ 2] 2259         addw x,#CELLL ; drop a 
      000B5B 90 93            [ 1] 2260         ldw y,x 
      000B5D 90 FE            [ 2] 2261         ldw y,(y) ; hi word 
      000B5F 89               [ 2] 2262         pushw x 
      000B60 EE 02            [ 2] 2263         ldw x,(2,x) ; lo word 
      000B62 91 CF 24         [ 5] 2264         ldw [YTEMP],y
      000B65 90 93            [ 1] 2265         ldw y,x 
      000B67 AE 00 02         [ 2] 2266         ldw x,#2 
      000B6A 92 DF 24         [ 5] 2267         ldw ([YTEMP],x),y 
      000B6D 85               [ 2] 2268         popw x 
      000B6E 1C 00 04         [ 2] 2269         addw x,#4 ; DDROP 
      000B71 81               [ 4] 2270         ret 
                                   2271 
                                   2272 ;       2@      ( a -- d )
                                   2273 ;       Fetch double integer from address a.
      000B72 0B 4E                 2274         .word      LINK
                           000B74  2275 LINK = . 
      000B74 02                    2276         .byte      2
      000B75 32 40                 2277         .ascii     "2@"
      000B77                       2278 DAT:
      000B77 90 93            [ 1] 2279         ldw y,x 
      000B79 90 FE            [ 2] 2280         ldw y,(y) ;address 
      000B7B 90 BF 24         [ 2] 2281         ldw YTEMP,y 
      000B7E 1D 00 02         [ 2] 2282         subw x,#CELLL ; space for udh 
      000B81 91 CE 24         [ 5] 2283         ldw y,[YTEMP] ; udh 
      000B84 FF               [ 2] 2284         ldw (x),y 
      000B85 90 AE 00 02      [ 2] 2285         ldw y,#2
      000B89 91 DE 24         [ 5] 2286         ldw y,([YTEMP],y) ; udl 
      000B8C EF 02            [ 2] 2287         ldw (2,x),y
      000B8E 81               [ 4] 2288         ret 
                                   2289 
                                   2290 ;       COUNT   ( b -- b +n )
                                   2291 ;       Return count byte of a string
                                   2292 ;       and add 1 to byte address.
      000B8F 0B 74                 2293         .word      LINK
                           000B91  2294 LINK = . 
      000B91 05                    2295         .byte      5
      000B92 43 4F 55 4E 54        2296         .ascii     "COUNT"
      000B97                       2297 COUNT:
      000B97 90 93            [ 1] 2298         ldw y,x 
      000B99 90 FE            [ 2] 2299         ldw y,(y) ; address 
      000B9B 90 F6            [ 1] 2300         ld a,(y)  ; count 
      000B9D 90 5C            [ 1] 2301         incw y 
      000B9F FF               [ 2] 2302         ldw (x),y 
      000BA0 1D 00 02         [ 2] 2303         subw x,#CELLL 
      000BA3 E7 01            [ 1] 2304         ld (1,x),a 
      000BA5 7F               [ 1] 2305         clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BA6 81               [ 4] 2306         ret 
                                   2307 
                                   2308 ;       HERE    ( -- a )
                                   2309 ;       Return  top of  variables
      000BA7 0B 91                 2310         .word      LINK
                           000BA9  2311 LINK = . 
      000BA9 04                    2312         .byte      4
      000BAA 48 45 52 45           2313         .ascii     "HERE"
      000BAE                       2314 HERE:
      000BAE 90 AE 00 16      [ 2] 2315       	ldw y,#UVP 
      000BB2 90 FE            [ 2] 2316         ldw y,(y)
      000BB4 1D 00 02         [ 2] 2317         subw x,#CELLL 
      000BB7 FF               [ 2] 2318         ldw (x),y 
      000BB8 81               [ 4] 2319         ret 
                                   2320 
                                   2321 ;       PAD     ( -- a )
                                   2322 ;       Return address of text buffer
                                   2323 ;       above  code dictionary.
      000BB9 0B A9                 2324         .word      LINK
                           000BBB  2325 LINK = . 
      000BBB 03                    2326         .byte      3
      000BBC 50 41 44              2327         .ascii     "PAD"
      000BBF                       2328 PAD:
      000BBF CD 0B AE         [ 4] 2329         CALL     HERE
      000BC2 CD 04 3A         [ 4] 2330         CALL     DOLIT
      000BC5 00 50                 2331         .word      80
      000BC7 CC 07 5A         [ 2] 2332         JP     PLUS
                                   2333 
                                   2334 ;       TIB     ( -- a )
                                   2335 ;       Return address of terminal input buffer.
      000BCA 0B BB                 2336         .word      LINK
                           000BCC  2337 LINK = . 
      000BCC 03                    2338         .byte      3
      000BCD 54 49 42              2339         .ascii     "TIB"
      000BD0                       2340 TIB:
      000BD0 CD 06 4A         [ 4] 2341         CALL     NTIB
      000BD3 CD 0A 29         [ 4] 2342         CALL     CELLP
      000BD6 CC 04 B8         [ 2] 2343         JP     AT
                                   2344 
                                   2345 ;       @EXECUTE        ( a -- )
                                   2346 ;       Execute vector stored in address a.
      000BD9 0B CC                 2347         .word      LINK
                           000BDB  2348 LINK = . 
      000BDB 08                    2349         .byte      8
      000BDC 40 45 58 45 43 55 54  2350         .ascii     "@EXECUTE"
             45
      000BE4                       2351 ATEXE:
      000BE4 CD 04 B8         [ 4] 2352         CALL     AT
      000BE7 CD 07 09         [ 4] 2353         CALL     QDUP    ;?address or zero
      000BEA CD 04 6D         [ 4] 2354         CALL     QBRAN
      000BED 0B F2                 2355         .word      EXE1
      000BEF CD 04 94         [ 4] 2356         CALL     EXECU   ;execute if non-zero
      000BF2 81               [ 4] 2357 EXE1:   RET     ;do nothing if zero
                                   2358 
                                   2359 ;       CMOVE   ( b1 b2 u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2360 ;       Copy u bytes from b1 to b2.
      000BF3 0B DB                 2361         .word      LINK
                           000BF5  2362 LINK = . 
      000BF5 05                    2363         .byte      5
      000BF6 43 4D 4F 56 45        2364         .ascii     "CMOVE"
      000BFB                       2365 CMOVE:
      000BFB CD 05 28         [ 4] 2366         CALL	TOR
      000BFE CD 04 84         [ 4] 2367         CALL	BRAN
      000C01 0C 1B                 2368         .word	CMOV2
      000C03 CD 05 28         [ 4] 2369 CMOV1:	CALL	TOR
      000C06 CD 05 5F         [ 4] 2370         CALL	DUPP
      000C09 CD 04 D6         [ 4] 2371         CALL	CAT
      000C0C CD 05 1C         [ 4] 2372         CALL	RAT
      000C0F CD 04 C5         [ 4] 2373         CALL	CSTOR
      000C12 CD 0A 54         [ 4] 2374         CALL	ONEP
      000C15 CD 05 09         [ 4] 2375         CALL	RFROM
      000C18 CD 0A 54         [ 4] 2376         CALL	ONEP
      000C1B CD 04 4E         [ 4] 2377 CMOV2:	CALL	DONXT
      000C1E 0C 03                 2378         .word	CMOV1
      000C20 CC 07 3A         [ 2] 2379         JP	DDROP
                                   2380 
                                   2381 ;       FILL    ( b u c -- )
                                   2382 ;       Fill u bytes of character c
                                   2383 ;       to area beginning at b.
      000C23 0B F5                 2384         .word       LINK
                           000C25  2385 LINK = . 
      000C25 04                    2386         .byte       4
      000C26 46 49 4C 4C           2387         .ascii     "FILL"
      000C2A                       2388 FILL:
      000C2A 90 93            [ 1] 2389         ldw y,x 
      000C2C 90 E6 01         [ 1] 2390         ld a,(1,y) ; c 
      000C2F 1C 00 02         [ 2] 2391         addw x,#CELLL ; drop c 
      000C32 90 93            [ 1] 2392         ldw y,x 
      000C34 90 FE            [ 2] 2393         ldw y,(y) ; count
      000C36 90 89            [ 2] 2394         pushw y 
      000C38 1C 00 02         [ 2] 2395         addw x,#CELLL ; drop u 
      000C3B 90 93            [ 1] 2396         ldw y,x 
      000C3D 1C 00 02         [ 2] 2397         addw x,#CELLL ; drop b 
      000C40 90 FE            [ 2] 2398         ldw y,(y) ; address
      000C42 90 BF 24         [ 2] 2399         ldw YTEMP,y
      000C45 90 85            [ 2] 2400         popw y ; count 
      000C47                       2401 FILL1:  
      000C47 92 C7 24         [ 4] 2402         ld [YTEMP],a 
      000C4A 3C 25            [ 1] 2403         inc YTEMP+1
      000C4C 24 02            [ 1] 2404         jrnc FILL2 
      000C4E 3C 24            [ 1] 2405         inc YTEMP
      000C50                       2406 FILL2: 
      000C50 90 5A            [ 2] 2407         decw y ; count 
      000C52 26 F3            [ 1] 2408         jrne FILL1  
      000C54 81               [ 4] 2409         ret 
                                   2410 
                                   2411 ;       ERASE   ( b u -- )
                                   2412 ;       Erase u bytes beginning at b.
      000C55 0C 25                 2413         .word      LINK
                           000C57  2414 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C57 05                    2415         .byte      5
      000C58 45 52 41 53 45        2416         .ascii     "ERASE"
      000C5D                       2417 ERASE:
      000C5D 90 5F            [ 1] 2418         clrw y 
      000C5F 1D 00 02         [ 2] 2419         subw x,#CELLL 
      000C62 FF               [ 2] 2420         ldw (x),y 
      000C63 CC 0C 2A         [ 2] 2421         jp FILL 
                                   2422 
                                   2423 
                                   2424 ;       PACK0   ( b u a -- a )
                                   2425 ;       Build a counted string with
                                   2426 ;       u characters from b. Null fill.
      000C66 0C 57                 2427         .word      LINK
                           000C68  2428 LINK = . 
      000C68 05                    2429         .byte      5
      000C69 50 41 43 4B 30        2430         .ascii     "PACK0"
      000C6E                       2431 PACKS:
      000C6E CD 05 5F         [ 4] 2432         CALL     DUPP
      000C71 CD 05 28         [ 4] 2433         CALL     TOR     ;strings only on cell boundary
      000C74 CD 07 45         [ 4] 2434         CALL     DDUP
      000C77 CD 04 C5         [ 4] 2435         CALL     CSTOR
      000C7A CD 0A 54         [ 4] 2436         CALL     ONEP ;save count
      000C7D CD 05 6F         [ 4] 2437         CALL     SWAPP
      000C80 CD 0B FB         [ 4] 2438         CALL     CMOVE
      000C83 CD 05 09         [ 4] 2439         CALL     RFROM
      000C86 81               [ 4] 2440         RET
                                   2441 
                                   2442 ;; Numeric output, single precision
                                   2443 
                                   2444 ;       DIGIT   ( u -- c )
                                   2445 ;       Convert digit u to a character.
      000C87 0C 68                 2446         .word      LINK
                           000C89  2447 LINK = . 
      000C89 05                    2448         .byte      5
      000C8A 44 49 47 49 54        2449         .ascii     "DIGIT"
      000C8F                       2450 DIGIT:
      000C8F CD 04 3A         [ 4] 2451         CALL	DOLIT
      000C92 00 09                 2452         .word	9
      000C94 CD 05 89         [ 4] 2453         CALL	OVER
      000C97 CD 08 38         [ 4] 2454         CALL	LESS
      000C9A CD 04 3A         [ 4] 2455         CALL	DOLIT
      000C9D 00 07                 2456         .word	7
      000C9F CD 05 AB         [ 4] 2457         CALL	ANDD
      000CA2 CD 07 5A         [ 4] 2458         CALL	PLUS
      000CA5 CD 04 3A         [ 4] 2459         CALL	DOLIT
      000CA8 00 30                 2460         .word	48	;'0'
      000CAA CC 07 5A         [ 2] 2461         JP	PLUS
                                   2462 
                                   2463 ;       EXTRACT ( n base -- n c )
                                   2464 ;       Extract least significant digit from n.
      000CAD 0C 89                 2465         .word      LINK
                           000CAF  2466 LINK = . 
      000CAF 07                    2467         .byte      7
      000CB0 45 58 54 52 41 43 54  2468         .ascii     "EXTRACT"
      000CB7                       2469 EXTRC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CB7 CD 0A C0         [ 4] 2470         CALL     ZERO
      000CBA CD 05 6F         [ 4] 2471         CALL     SWAPP
      000CBD CD 08 B0         [ 4] 2472         CALL     UMMOD
      000CC0 CD 05 6F         [ 4] 2473         CALL     SWAPP
      000CC3 CC 0C 8F         [ 2] 2474         JP     DIGIT
                                   2475 
                                   2476 ;       <#      ( -- )
                                   2477 ;       Initiate  numeric output process.
      000CC6 0C AF                 2478         .word      LINK
                           000CC8  2479 LINK = . 
      000CC8 02                    2480         .byte      2
      000CC9 3C 23                 2481         .ascii     "<#"
      000CCB                       2482 BDIGS:
      000CCB CD 0B BF         [ 4] 2483         CALL     PAD
      000CCE CD 06 8C         [ 4] 2484         CALL     HLD
      000CD1 CC 04 A1         [ 2] 2485         JP     STORE
                                   2486 
                                   2487 ;       HOLD    ( c -- )
                                   2488 ;       Insert a character into output string.
      000CD4 0C C8                 2489         .word      LINK
                           000CD6  2490 LINK = . 
      000CD6 04                    2491         .byte      4
      000CD7 48 4F 4C 44           2492         .ascii     "HOLD"
      000CDB                       2493 HOLD:
      000CDB CD 06 8C         [ 4] 2494         CALL     HLD
      000CDE CD 04 B8         [ 4] 2495         CALL     AT
      000CE1 CD 0A 61         [ 4] 2496         CALL     ONEM
      000CE4 CD 05 5F         [ 4] 2497         CALL     DUPP
      000CE7 CD 06 8C         [ 4] 2498         CALL     HLD
      000CEA CD 04 A1         [ 4] 2499         CALL     STORE
      000CED CC 04 C5         [ 2] 2500         JP     CSTOR
                                   2501 
                                   2502 ;       #       ( u -- u )
                                   2503 ;       Extract one digit from u and
                                   2504 ;       append digit to output string.
      000CF0 0C D6                 2505         .word      LINK
                           000CF2  2506 LINK = . 
      000CF2 01                    2507         .byte      1
      000CF3 23                    2508         .ascii     "#"
      000CF4                       2509 DIG:
      000CF4 CD 06 1C         [ 4] 2510         CALL     BASE
      000CF7 CD 04 B8         [ 4] 2511         CALL     AT
      000CFA CD 0C B7         [ 4] 2512         CALL     EXTRC
      000CFD CC 0C DB         [ 2] 2513         JP     HOLD
                                   2514 
                                   2515 ;       #S      ( u -- 0 )
                                   2516 ;       Convert u until all digits
                                   2517 ;       are added to output string.
      000D00 0C F2                 2518         .word      LINK
                           000D02  2519 LINK = . 
      000D02 02                    2520         .byte      2
      000D03 23 53                 2521         .ascii     "#S"
      000D05                       2522 DIGS:
      000D05 CD 0C F4         [ 4] 2523 DIGS1:  CALL     DIG
      000D08 CD 05 5F         [ 4] 2524         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D0B CD 04 6D         [ 4] 2525         CALL     QBRAN
      000D0E 0D 12                 2526         .word      DIGS2
      000D10 20 F3            [ 2] 2527         JRA     DIGS1
      000D12 81               [ 4] 2528 DIGS2:  RET
                                   2529 
                                   2530 ;       SIGN    ( n -- )
                                   2531 ;       Add a minus sign to
                                   2532 ;       numeric output string.
      000D13 0D 02                 2533         .word      LINK
                           000D15  2534 LINK = . 
      000D15 04                    2535         .byte      4
      000D16 53 49 47 4E           2536         .ascii     "SIGN"
      000D1A                       2537 SIGN:
      000D1A CD 05 98         [ 4] 2538         CALL     ZLESS
      000D1D CD 04 6D         [ 4] 2539         CALL     QBRAN
      000D20 0D 2A                 2540         .word      SIGN1
      000D22 CD 04 3A         [ 4] 2541         CALL     DOLIT
      000D25 00 2D                 2542         .word      45	;"-"
      000D27 CC 0C DB         [ 2] 2543         JP     HOLD
      000D2A 81               [ 4] 2544 SIGN1:  RET
                                   2545 
                                   2546 ;       #>      ( w -- b u )
                                   2547 ;       Prepare output string.
      000D2B 0D 15                 2548         .word      LINK
                           000D2D  2549 LINK = . 
      000D2D 02                    2550         .byte      2
      000D2E 23 3E                 2551         .ascii     "#>"
      000D30                       2552 EDIGS:
      000D30 CD 05 55         [ 4] 2553         CALL     DROP
      000D33 CD 06 8C         [ 4] 2554         CALL     HLD
      000D36 CD 04 B8         [ 4] 2555         CALL     AT
      000D39 CD 0B BF         [ 4] 2556         CALL     PAD
      000D3C CD 05 89         [ 4] 2557         CALL     OVER
      000D3F CC 07 D3         [ 2] 2558         JP     SUBB
                                   2559 
                                   2560 ;       str     ( w -- b u )
                                   2561 ;       Convert a signed integer
                                   2562 ;       to a numeric string.
      000D42 0D 2D                 2563         .word      LINK
                           000D44  2564 LINK = . 
      000D44 03                    2565         .byte      3
      000D45 53 54 52              2566         .ascii     "STR"
      000D48                       2567 STR:
      000D48 CD 05 5F         [ 4] 2568         CALL     DUPP
      000D4B CD 05 28         [ 4] 2569         CALL     TOR
      000D4E CD 07 ED         [ 4] 2570         CALL     ABSS
      000D51 CD 0C CB         [ 4] 2571         CALL     BDIGS
      000D54 CD 0D 05         [ 4] 2572         CALL     DIGS
      000D57 CD 05 09         [ 4] 2573         CALL     RFROM
      000D5A CD 0D 1A         [ 4] 2574         CALL     SIGN
      000D5D CC 0D 30         [ 2] 2575         JP     EDIGS
                                   2576 
                                   2577 ;       HEX     ( -- )
                                   2578 ;       Use radix 16 as base for
                                   2579 ;       numeric conversions.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D60 0D 44                 2580         .word      LINK
                           000D62  2581 LINK = . 
      000D62 03                    2582         .byte      3
      000D63 48 45 58              2583         .ascii     "HEX"
      000D66                       2584 HEX:
      000D66 CD 04 3A         [ 4] 2585         CALL     DOLIT
      000D69 00 10                 2586         .word      16
      000D6B CD 06 1C         [ 4] 2587         CALL     BASE
      000D6E CC 04 A1         [ 2] 2588         JP     STORE
                                   2589 
                                   2590 ;       DECIMAL ( -- )
                                   2591 ;       Use radix 10 as base
                                   2592 ;       for numeric conversions.
      000D71 0D 62                 2593         .word      LINK
                           000D73  2594 LINK = . 
      000D73 07                    2595         .byte      7
      000D74 44 45 43 49 4D 41 4C  2596         .ascii     "DECIMAL"
      000D7B                       2597 DECIM:
      000D7B CD 04 3A         [ 4] 2598         CALL     DOLIT
      000D7E 00 0A                 2599         .word      10
      000D80 CD 06 1C         [ 4] 2600         CALL     BASE
      000D83 CC 04 A1         [ 2] 2601         JP     STORE
                                   2602 
                                   2603 ;; Numeric input, single precision
                                   2604 
                                   2605 ;       DIGIT?  ( c base -- u t )
                                   2606 ;       Convert a character to its numeric
                                   2607 ;       value. A flag indicates success.
      000D86 0D 73                 2608         .word      LINK
                           000D88  2609 LINK = . 
      000D88 06                    2610         .byte       6
      000D89 44 49 47 49 54 3F     2611         .ascii     "DIGIT?"
      000D8F                       2612 DIGTQ:
      000D8F CD 05 28         [ 4] 2613         CALL     TOR
      000D92 CD 04 3A         [ 4] 2614         CALL     DOLIT
      000D95 00 30                 2615         .word     48	; "0"
      000D97 CD 07 D3         [ 4] 2616         CALL     SUBB
      000D9A CD 04 3A         [ 4] 2617         CALL     DOLIT
      000D9D 00 09                 2618         .word      9
      000D9F CD 05 89         [ 4] 2619         CALL     OVER
      000DA2 CD 08 38         [ 4] 2620         CALL     LESS
      000DA5 CD 04 6D         [ 4] 2621         CALL     QBRAN
      000DA8 0D C0                 2622         .word      DGTQ1
      000DAA CD 04 3A         [ 4] 2623         CALL     DOLIT
      000DAD 00 07                 2624         .word      7
      000DAF CD 07 D3         [ 4] 2625         CALL     SUBB
      000DB2 CD 05 5F         [ 4] 2626         CALL     DUPP
      000DB5 CD 04 3A         [ 4] 2627         CALL     DOLIT
      000DB8 00 0A                 2628         .word      10
      000DBA CD 08 38         [ 4] 2629         CALL     LESS
      000DBD CD 05 BF         [ 4] 2630         CALL     ORR
      000DC0 CD 05 5F         [ 4] 2631 DGTQ1:  CALL     DUPP
      000DC3 CD 05 09         [ 4] 2632         CALL     RFROM
      000DC6 CC 08 1A         [ 2] 2633         JP     ULESS
                                   2634 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2635 ;       NUMBER? ( a -- n T | a F )
                                   2636 ;       Convert a number string to
                                   2637 ;       integer. Push a flag on tos.
      000DC9 0D 88                 2638         .word      LINK
                           000DCB  2639 LINK = . 
      000DCB 07                    2640         .byte      7
      000DCC 4E 55 4D 42 45 52 3F  2641         .ascii     "NUMBER?"
      000DD3                       2642 NUMBQ:
      000DD3 CD 06 1C         [ 4] 2643         CALL     BASE
      000DD6 CD 04 B8         [ 4] 2644         CALL     AT
      000DD9 CD 05 28         [ 4] 2645         CALL     TOR
      000DDC CD 0A C0         [ 4] 2646         CALL     ZERO
      000DDF CD 05 89         [ 4] 2647         CALL     OVER
      000DE2 CD 0B 97         [ 4] 2648         CALL     COUNT
      000DE5 CD 05 89         [ 4] 2649         CALL     OVER
      000DE8 CD 04 D6         [ 4] 2650         CALL     CAT
      000DEB CD 04 3A         [ 4] 2651         CALL     DOLIT
      000DEE 00 24                 2652         .word     36	; "0x"
      000DF0 CD 07 FB         [ 4] 2653         CALL     EQUAL
      000DF3 CD 04 6D         [ 4] 2654         CALL     QBRAN
      000DF6 0E 07                 2655         .word      NUMQ1
      000DF8 CD 0D 66         [ 4] 2656         CALL     HEX
      000DFB CD 05 6F         [ 4] 2657         CALL     SWAPP
      000DFE CD 0A 54         [ 4] 2658         CALL     ONEP
      000E01 CD 05 6F         [ 4] 2659         CALL     SWAPP
      000E04 CD 0A 61         [ 4] 2660         CALL     ONEM
      000E07 CD 05 89         [ 4] 2661 NUMQ1:  CALL     OVER
      000E0A CD 04 D6         [ 4] 2662         CALL     CAT
      000E0D CD 04 3A         [ 4] 2663         CALL     DOLIT
      000E10 00 2D                 2664         .word     45	; "-"
      000E12 CD 07 FB         [ 4] 2665         CALL     EQUAL
      000E15 CD 05 28         [ 4] 2666         CALL     TOR
      000E18 CD 05 6F         [ 4] 2667         CALL     SWAPP
      000E1B CD 05 1C         [ 4] 2668         CALL     RAT
      000E1E CD 07 D3         [ 4] 2669         CALL     SUBB
      000E21 CD 05 6F         [ 4] 2670         CALL     SWAPP
      000E24 CD 05 1C         [ 4] 2671         CALL     RAT
      000E27 CD 07 5A         [ 4] 2672         CALL     PLUS
      000E2A CD 07 09         [ 4] 2673         CALL     QDUP
      000E2D CD 04 6D         [ 4] 2674         CALL     QBRAN
      000E30 0E 91                 2675         .word      NUMQ6
      000E32 CD 0A 61         [ 4] 2676         CALL     ONEM
      000E35 CD 05 28         [ 4] 2677         CALL     TOR
      000E38 CD 05 5F         [ 4] 2678 NUMQ2:  CALL     DUPP
      000E3B CD 05 28         [ 4] 2679         CALL     TOR
      000E3E CD 04 D6         [ 4] 2680         CALL     CAT
      000E41 CD 06 1C         [ 4] 2681         CALL     BASE
      000E44 CD 04 B8         [ 4] 2682         CALL     AT
      000E47 CD 0D 8F         [ 4] 2683         CALL     DIGTQ
      000E4A CD 04 6D         [ 4] 2684         CALL     QBRAN
      000E4D 0E 7F                 2685         .word      NUMQ4
      000E4F CD 05 6F         [ 4] 2686         CALL     SWAPP
      000E52 CD 06 1C         [ 4] 2687         CALL     BASE
      000E55 CD 04 B8         [ 4] 2688         CALL     AT
      000E58 CD 09 D3         [ 4] 2689         CALL     STAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E5B CD 07 5A         [ 4] 2690         CALL     PLUS
      000E5E CD 05 09         [ 4] 2691         CALL     RFROM
      000E61 CD 0A 54         [ 4] 2692         CALL     ONEP
      000E64 CD 04 4E         [ 4] 2693         CALL     DONXT
      000E67 0E 38                 2694         .word      NUMQ2
      000E69 CD 05 1C         [ 4] 2695         CALL     RAT
      000E6C CD 05 6F         [ 4] 2696         CALL     SWAPP
      000E6F CD 05 55         [ 4] 2697         CALL     DROP
      000E72 CD 04 6D         [ 4] 2698         CALL     QBRAN
      000E75 0E 7A                 2699         .word      NUMQ3
      000E77 CD 07 85         [ 4] 2700         CALL     NEGAT
      000E7A CD 05 6F         [ 4] 2701 NUMQ3:  CALL     SWAPP
      000E7D 20 0F            [ 2] 2702         JRA     NUMQ5
      000E7F CD 05 09         [ 4] 2703 NUMQ4:  CALL     RFROM
      000E82 CD 05 09         [ 4] 2704         CALL     RFROM
      000E85 CD 07 3A         [ 4] 2705         CALL     DDROP
      000E88 CD 07 3A         [ 4] 2706         CALL     DDROP
      000E8B CD 0A C0         [ 4] 2707         CALL     ZERO
      000E8E CD 05 5F         [ 4] 2708 NUMQ5:  CALL     DUPP
      000E91 CD 05 09         [ 4] 2709 NUMQ6:  CALL     RFROM
      000E94 CD 07 3A         [ 4] 2710         CALL     DDROP
      000E97 CD 05 09         [ 4] 2711         CALL     RFROM
      000E9A CD 06 1C         [ 4] 2712         CALL     BASE
      000E9D CC 04 A1         [ 2] 2713         JP     STORE
                                   2714 
                                   2715 ;; Basic I/O
                                   2716 
                                   2717 ;       KEY     ( -- c )
                                   2718 ;       Wait for and return an
                                   2719 ;       input character.
      000EA0 0D CB                 2720         .word      LINK
                           000EA2  2721 LINK = . 
      000EA2 03                    2722         .byte      3
      000EA3 4B 45 59              2723         .ascii     "KEY"
      000EA6                       2724 KEY:
      000EA6 72 0B 52 40 FB   [ 2] 2725         btjf UART_SR,#UART_SR_RXNE,. 
      000EAB C6 52 41         [ 1] 2726         ld a,UART_DR 
      000EAE 1D 00 02         [ 2] 2727         subw x,#CELLL 
      000EB1 E7 01            [ 1] 2728         ld (1,x),a 
      000EB3 7F               [ 1] 2729         clr (x)
      000EB4 81               [ 4] 2730         ret 
                                   2731 
                                   2732 ;       NUF?    ( -- t )
                                   2733 ;       Return false if no input,
                                   2734 ;       else pause and if CR return true.
      000EB5 0E A2                 2735         .word      LINK
                           000EB7  2736 LINK = . 
      000EB7 04                    2737         .byte      4
      000EB8 4E 55 46 3F           2738         .ascii     "NUF?"
      000EBC                       2739 NUFQ:
      000EBC CD 04 06         [ 4] 2740         CALL     QKEY
      000EBF CD 05 5F         [ 4] 2741         CALL     DUPP
      000EC2 CD 04 6D         [ 4] 2742         CALL     QBRAN
      000EC5 0E D5                 2743         .word    NUFQ1
      000EC7 CD 07 3A         [ 4] 2744         CALL     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000ECA CD 0E A6         [ 4] 2745         CALL     KEY
      000ECD CD 04 3A         [ 4] 2746         CALL     DOLIT
      000ED0 00 0D                 2747         .word      CRR
      000ED2 CC 07 FB         [ 2] 2748         JP     EQUAL
      000ED5 81               [ 4] 2749 NUFQ1:  RET
                                   2750 
                                   2751 ;       SPACE   ( -- )
                                   2752 ;       Send  blank character to
                                   2753 ;       output device.
      000ED6 0E B7                 2754         .word      LINK
                           000ED8  2755 LINK = . 
      000ED8 05                    2756         .byte      5
      000ED9 53 50 41 43 45        2757         .ascii     "SPACE"
      000EDE                       2758 SPACE:
      000EDE CD 0A B3         [ 4] 2759         CALL     BLANK
      000EE1 CC 04 24         [ 2] 2760         JP     EMIT
                                   2761 
                                   2762 ;       SPACES  ( +n -- )
                                   2763 ;       Send n spaces to output device.
      000EE4 0E D8                 2764         .word      LINK
                           000EE6  2765 LINK = . 
      000EE6 06                    2766         .byte      6
      000EE7 53 50 41 43 45 53     2767         .ascii     "SPACES"
      000EED                       2768 SPACS:
      000EED CD 0A C0         [ 4] 2769         CALL     ZERO
      000EF0 CD 08 58         [ 4] 2770         CALL     MAX
      000EF3 CD 05 28         [ 4] 2771         CALL     TOR
      000EF6 20 03            [ 2] 2772         JRA      CHAR2
      000EF8 CD 0E DE         [ 4] 2773 CHAR1:  CALL     SPACE
      000EFB CD 04 4E         [ 4] 2774 CHAR2:  CALL     DONXT
      000EFE 0E F8                 2775         .word    CHAR1
      000F00 81               [ 4] 2776         RET
                                   2777 
                                   2778 ;       TYPE    ( b u -- )
                                   2779 ;       Output u characters from b.
      000F01 0E E6                 2780         .word      LINK
                           000F03  2781 LINK = . 
      000F03 04                    2782         .byte      4
      000F04 54 59 50 45           2783         .ascii     "TYPE"
      000F08                       2784 TYPES:
      000F08 CD 05 28         [ 4] 2785         CALL     TOR
      000F0B 20 0C            [ 2] 2786         JRA     TYPE2
      000F0D CD 05 5F         [ 4] 2787 TYPE1:  CALL     DUPP
      000F10 CD 04 D6         [ 4] 2788         CALL     CAT
      000F13 CD 04 24         [ 4] 2789         CALL     EMIT
      000F16 CD 0A 54         [ 4] 2790         CALL     ONEP
      000F19 CD 04 4E         [ 4] 2791 TYPE2:  CALL     DONXT
      000F1C 0F 0D                 2792         .word      TYPE1
      000F1E CC 05 55         [ 2] 2793         JP     DROP
                                   2794 
                                   2795 ;       CR      ( -- )
                                   2796 ;       Output a carriage return
                                   2797 ;       and a line feed.
      000F21 0F 03                 2798         .word      LINK
                           000F23  2799 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F23 02                    2800         .byte      2
      000F24 43 52                 2801         .ascii     "CR"
      000F26                       2802 CR:
      000F26 CD 04 3A         [ 4] 2803         CALL     DOLIT
      000F29 00 0D                 2804         .word      CRR
      000F2B CD 04 24         [ 4] 2805         CALL     EMIT
      000F2E CD 04 3A         [ 4] 2806         CALL     DOLIT
      000F31 00 0A                 2807         .word      LF
      000F33 CC 04 24         [ 2] 2808         JP     EMIT
                                   2809 
                                   2810 ;       do$     ( -- a )
                                   2811 ;       Return  address of a compiled
                                   2812 ;       string.
      000F36 0F 23                 2813         .word      LINK
                           000F38  2814 LINK = . 
      000F38 43                    2815 	.byte      COMPO+3
      000F39 44 4F 24              2816         .ascii     "DO$"
      000F3C                       2817 DOSTR:
      000F3C CD 05 09         [ 4] 2818         CALL     RFROM
      000F3F CD 05 1C         [ 4] 2819         CALL     RAT
      000F42 CD 05 09         [ 4] 2820         CALL     RFROM
      000F45 CD 0B 97         [ 4] 2821         CALL     COUNT
      000F48 CD 07 5A         [ 4] 2822         CALL     PLUS
      000F4B CD 05 28         [ 4] 2823         CALL     TOR
      000F4E CD 05 6F         [ 4] 2824         CALL     SWAPP
      000F51 CD 05 28         [ 4] 2825         CALL     TOR
      000F54 81               [ 4] 2826         RET
                                   2827 
                                   2828 ;       $"|     ( -- a )
                                   2829 ;       Run time routine compiled by $".
                                   2830 ;       Return address of a compiled string.
      000F55 0F 38                 2831         .word      LINK
                           000F57  2832 LINK = . 
      000F57 43                    2833 	.byte      COMPO+3
      000F58 24 22 7C              2834         .byte     '$','"','|'
      000F5B                       2835 STRQP:
      000F5B CD 0F 3C         [ 4] 2836         CALL     DOSTR
      000F5E 81               [ 4] 2837         RET
                                   2838 
                                   2839 ;       ."|     ( -- )
                                   2840 ;       Run time routine of ." .
                                   2841 ;       Output a compiled string.
      000F5F 0F 57                 2842         .word      LINK
                           000F61  2843 LINK = . 
      000F61 43                    2844 	.byte      COMPO+3
      000F62 2E 22 7C              2845         .byte     '.','"','|'
      000F65                       2846 DOTQP:
      000F65 CD 0F 3C         [ 4] 2847         CALL     DOSTR
      000F68 CD 0B 97         [ 4] 2848         CALL     COUNT
      000F6B CC 0F 08         [ 2] 2849         JP     TYPES
                                   2850 
                                   2851 ;       .R      ( n +n -- )
                                   2852 ;       Display an integer in a field
                                   2853 ;       of n columns, right justified.
      000F6E 0F 61                 2854         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                           000F70  2855 LINK = . 
      000F70 02                    2856         .byte      2
      000F71 2E 52                 2857         .ascii     ".R"
      000F73                       2858 DOTR:
      000F73 CD 05 28         [ 4] 2859         CALL     TOR
      000F76 CD 0D 48         [ 4] 2860         CALL     STR
      000F79 CD 05 09         [ 4] 2861         CALL     RFROM
      000F7C CD 05 89         [ 4] 2862         CALL     OVER
      000F7F CD 07 D3         [ 4] 2863         CALL     SUBB
      000F82 CD 0E ED         [ 4] 2864         CALL     SPACS
      000F85 CC 0F 08         [ 2] 2865         JP     TYPES
                                   2866 
                                   2867 ;       U.R     ( u +n -- )
                                   2868 ;       Display an unsigned integer
                                   2869 ;       in n column, right justified.
      000F88 0F 70                 2870         .word      LINK
                           000F8A  2871 LINK = . 
      000F8A 03                    2872         .byte      3
      000F8B 55 2E 52              2873         .ascii     "U.R"
      000F8E                       2874 UDOTR:
      000F8E CD 05 28         [ 4] 2875         CALL     TOR
      000F91 CD 0C CB         [ 4] 2876         CALL     BDIGS
      000F94 CD 0D 05         [ 4] 2877         CALL     DIGS
      000F97 CD 0D 30         [ 4] 2878         CALL     EDIGS
      000F9A CD 05 09         [ 4] 2879         CALL     RFROM
      000F9D CD 05 89         [ 4] 2880         CALL     OVER
      000FA0 CD 07 D3         [ 4] 2881         CALL     SUBB
      000FA3 CD 0E ED         [ 4] 2882         CALL     SPACS
      000FA6 CC 0F 08         [ 2] 2883         JP     TYPES
                                   2884 
                                   2885 ;       U.      ( u -- )
                                   2886 ;       Display an unsigned integer
                                   2887 ;       in free format.
      000FA9 0F 8A                 2888         .word      LINK
                           000FAB  2889 LINK = . 
      000FAB 02                    2890         .byte      2
      000FAC 55 2E                 2891         .ascii     "U."
      000FAE                       2892 UDOT:
      000FAE CD 0C CB         [ 4] 2893         CALL     BDIGS
      000FB1 CD 0D 05         [ 4] 2894         CALL     DIGS
      000FB4 CD 0D 30         [ 4] 2895         CALL     EDIGS
      000FB7 CD 0E DE         [ 4] 2896         CALL     SPACE
      000FBA CC 0F 08         [ 2] 2897         JP     TYPES
                                   2898 
                                   2899 ;       .       ( w -- )
                                   2900 ;       Display an integer in free
                                   2901 ;       format, preceeded by a space.
      000FBD 0F AB                 2902         .word      LINK
                           000FBF  2903 LINK = . 
      000FBF 01                    2904         .byte      1
      000FC0 2E                    2905         .ascii     "."
      000FC1                       2906 DOT:
      000FC1 CD 06 1C         [ 4] 2907         CALL     BASE
      000FC4 CD 04 B8         [ 4] 2908         CALL     AT
      000FC7 CD 04 3A         [ 4] 2909         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FCA 00 0A                 2910         .word      10
      000FCC CD 05 D4         [ 4] 2911         CALL     XORR    ;?decimal
      000FCF CD 04 6D         [ 4] 2912         CALL     QBRAN
      000FD2 0F D7                 2913         .word      DOT1
      000FD4 CC 0F AE         [ 2] 2914         JP     UDOT
      000FD7 CD 0D 48         [ 4] 2915 DOT1:   CALL     STR
      000FDA CD 0E DE         [ 4] 2916         CALL     SPACE
      000FDD CC 0F 08         [ 2] 2917         JP     TYPES
                                   2918 
                                   2919 ;       ?       ( a -- )
                                   2920 ;       Display contents in memory cell.
      000FE0 0F BF                 2921         .word      LINK
                                   2922         
                           000FE2  2923 LINK = . 
      000FE2 01                    2924         .byte      1
      000FE3 3F                    2925         .ascii     "?"
      000FE4                       2926 QUEST:
      000FE4 CD 04 B8         [ 4] 2927         CALL     AT
      000FE7 CC 0F C1         [ 2] 2928         JP     DOT
                                   2929 
                                   2930 ;; Parsing
                                   2931 
                                   2932 ;       parse   ( b u c -- b u delta ; <string> )
                                   2933 ;       Scan string delimited by c.
                                   2934 ;       Return found string and its offset.
      000FEA 0F E2                 2935         .word      LINK
                           000FEC  2936 LINK = . 
      000FEC 05                    2937         .byte      5
      000FED 70 61 72 73 65        2938         .ascii     "parse"
      000FF2                       2939 PARS:
      000FF2 CD 06 2B         [ 4] 2940         CALL     TEMP
      000FF5 CD 04 A1         [ 4] 2941         CALL     STORE
      000FF8 CD 05 89         [ 4] 2942         CALL     OVER
      000FFB CD 05 28         [ 4] 2943         CALL     TOR
      000FFE CD 05 5F         [ 4] 2944         CALL     DUPP
      001001 CD 04 6D         [ 4] 2945         CALL     QBRAN
      001004 10 AA                 2946         .word    PARS8
      001006 CD 0A 61         [ 4] 2947         CALL     ONEM
      001009 CD 06 2B         [ 4] 2948         CALL     TEMP
      00100C CD 04 B8         [ 4] 2949         CALL     AT
      00100F CD 0A B3         [ 4] 2950         CALL     BLANK
      001012 CD 07 FB         [ 4] 2951         CALL     EQUAL
      001015 CD 04 6D         [ 4] 2952         CALL     QBRAN
      001018 10 4B                 2953         .word      PARS3
      00101A CD 05 28         [ 4] 2954         CALL     TOR
      00101D CD 0A B3         [ 4] 2955 PARS1:  CALL     BLANK
      001020 CD 05 89         [ 4] 2956         CALL     OVER
      001023 CD 04 D6         [ 4] 2957         CALL     CAT     ;skip leading blanks ONLY
      001026 CD 07 D3         [ 4] 2958         CALL     SUBB
      001029 CD 05 98         [ 4] 2959         CALL     ZLESS
      00102C CD 07 74         [ 4] 2960         CALL     INVER
      00102F CD 04 6D         [ 4] 2961         CALL     QBRAN
      001032 10 48                 2962         .word      PARS2
      001034 CD 0A 54         [ 4] 2963         CALL     ONEP
      001037 CD 04 4E         [ 4] 2964         CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00103A 10 1D                 2965         .word      PARS1
      00103C CD 05 09         [ 4] 2966         CALL     RFROM
      00103F CD 05 55         [ 4] 2967         CALL     DROP
      001042 CD 0A C0         [ 4] 2968         CALL     ZERO
      001045 CC 05 5F         [ 2] 2969         JP     DUPP
      001048 CD 05 09         [ 4] 2970 PARS2:  CALL     RFROM
      00104B CD 05 89         [ 4] 2971 PARS3:  CALL     OVER
      00104E CD 05 6F         [ 4] 2972         CALL     SWAPP
      001051 CD 05 28         [ 4] 2973         CALL     TOR
      001054 CD 06 2B         [ 4] 2974 PARS4:  CALL     TEMP
      001057 CD 04 B8         [ 4] 2975         CALL     AT
      00105A CD 05 89         [ 4] 2976         CALL     OVER
      00105D CD 04 D6         [ 4] 2977         CALL     CAT
      001060 CD 07 D3         [ 4] 2978         CALL     SUBB    ;scan for delimiter
      001063 CD 06 2B         [ 4] 2979         CALL     TEMP
      001066 CD 04 B8         [ 4] 2980         CALL     AT
      001069 CD 0A B3         [ 4] 2981         CALL     BLANK
      00106C CD 07 FB         [ 4] 2982         CALL     EQUAL
      00106F CD 04 6D         [ 4] 2983         CALL     QBRAN
      001072 10 77                 2984         .word      PARS5
      001074 CD 05 98         [ 4] 2985         CALL     ZLESS
      001077 CD 04 6D         [ 4] 2986 PARS5:  CALL     QBRAN
      00107A 10 8C                 2987         .word      PARS6
      00107C CD 0A 54         [ 4] 2988         CALL     ONEP
      00107F CD 04 4E         [ 4] 2989         CALL     DONXT
      001082 10 54                 2990         .word      PARS4
      001084 CD 05 5F         [ 4] 2991         CALL     DUPP
      001087 CD 05 28         [ 4] 2992         CALL     TOR
      00108A 20 0F            [ 2] 2993         JRA     PARS7
      00108C CD 05 09         [ 4] 2994 PARS6:  CALL     RFROM
      00108F CD 05 55         [ 4] 2995         CALL     DROP
      001092 CD 05 5F         [ 4] 2996         CALL     DUPP
      001095 CD 0A 54         [ 4] 2997         CALL     ONEP
      001098 CD 05 28         [ 4] 2998         CALL     TOR
      00109B CD 05 89         [ 4] 2999 PARS7:  CALL     OVER
      00109E CD 07 D3         [ 4] 3000         CALL     SUBB
      0010A1 CD 05 09         [ 4] 3001         CALL     RFROM
      0010A4 CD 05 09         [ 4] 3002         CALL     RFROM
      0010A7 CC 07 D3         [ 2] 3003         JP     SUBB
      0010AA CD 05 89         [ 4] 3004 PARS8:  CALL     OVER
      0010AD CD 05 09         [ 4] 3005         CALL     RFROM
      0010B0 CC 07 D3         [ 2] 3006         JP     SUBB
                                   3007 
                                   3008 ;       PARSE   ( c -- b u ; <string> )
                                   3009 ;       Scan input stream and return
                                   3010 ;       counted string delimited by c.
      0010B3 0F EC                 3011         .word      LINK
                           0010B5  3012 LINK = . 
      0010B5 05                    3013         .byte      5
      0010B6 50 41 52 53 45        3014         .ascii     "PARSE"
      0010BB                       3015 PARSE:
      0010BB CD 05 28         [ 4] 3016         CALL     TOR
      0010BE CD 0B D0         [ 4] 3017         CALL     TIB
      0010C1 CD 06 3A         [ 4] 3018         CALL     INN
      0010C4 CD 04 B8         [ 4] 3019         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010C7 CD 07 5A         [ 4] 3020         CALL     PLUS    ;current input buffer pointer
      0010CA CD 06 4A         [ 4] 3021         CALL     NTIB
      0010CD CD 04 B8         [ 4] 3022         CALL     AT
      0010D0 CD 06 3A         [ 4] 3023         CALL     INN
      0010D3 CD 04 B8         [ 4] 3024         CALL     AT
      0010D6 CD 07 D3         [ 4] 3025         CALL     SUBB    ;remaining count
      0010D9 CD 05 09         [ 4] 3026         CALL     RFROM
      0010DC CD 0F F2         [ 4] 3027         CALL     PARS
      0010DF CD 06 3A         [ 4] 3028         CALL     INN
      0010E2 CC 0B 30         [ 2] 3029         JP     PSTOR
                                   3030 
                                   3031 ;       .(      ( -- )
                                   3032 ;       Output following string up to next ) .
      0010E5 10 B5                 3033         .word      LINK
                           0010E7  3034 LINK = . 
      0010E7 82                    3035 	.byte      IMEDD+2
      0010E8 2E 28                 3036         .ascii     ".("
      0010EA                       3037 DOTPR:
      0010EA CD 04 3A         [ 4] 3038         CALL     DOLIT
      0010ED 00 29                 3039         .word     41	; ")"
      0010EF CD 10 BB         [ 4] 3040         CALL     PARSE
      0010F2 CC 0F 08         [ 2] 3041         JP     TYPES
                                   3042 
                                   3043 ;       (       ( -- )
                                   3044 ;       Ignore following string up to next ).
                                   3045 ;       A comment.
      0010F5 10 E7                 3046         .word      LINK
                           0010F7  3047 LINK = . 
      0010F7 81                    3048 	.byte      IMEDD+1
      0010F8 28                    3049         .ascii     "("
      0010F9                       3050 PAREN:
      0010F9 CD 04 3A         [ 4] 3051         CALL     DOLIT
      0010FC 00 29                 3052         .word     41	; ")"
      0010FE CD 10 BB         [ 4] 3053         CALL     PARSE
      001101 CC 07 3A         [ 2] 3054         JP     DDROP
                                   3055 
                                   3056 ;       \       ( -- )
                                   3057 ;       Ignore following text till
                                   3058 ;       end of line.
      001104 10 F7                 3059         .word      LINK
                           001106  3060 LINK = . 
      001106 81                    3061 	.byte      IMEDD+1
      001107 5C                    3062         .ascii     "\"
      001108                       3063 BKSLA:
      001108 90 AE 00 0C      [ 2] 3064         ldw y,#UCTIB ; #TIB  
      00110C 90 FE            [ 2] 3065         ldw y,(y)
      00110E 90 89            [ 2] 3066         pushw y ; count in TIB 
      001110 90 AE 00 0A      [ 2] 3067         ldw y,#UINN ; >IN 
      001114 90 BF 24         [ 2] 3068         ldw YTEMP,y
      001117 90 85            [ 2] 3069         popw y 
      001119 91 CF 24         [ 5] 3070         ldw [YTEMP],y
      00111C 81               [ 4] 3071         ret 
                                   3072 
                                   3073 ;       WORD    ( c -- a ; <string> )
                                   3074 ;       Parse a word from input stream
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3075 ;       and copy it to code dictionary.
      00111D 11 06                 3076         .word      LINK
                           00111F  3077 LINK = . 
      00111F 04                    3078         .byte      4
      001120 57 4F 52 44           3079         .ascii     "WORD"
      001124                       3080 WORDD:
      001124 CD 10 BB         [ 4] 3081         CALL     PARSE
      001127 CD 0B AE         [ 4] 3082         CALL     HERE
      00112A CD 0A 29         [ 4] 3083         CALL     CELLP
      00112D CC 0C 6E         [ 2] 3084         JP     PACKS
                                   3085 
                                   3086 ;       TOKEN   ( -- a ; <string> )
                                   3087 ;       Parse a word from input stream
                                   3088 ;       and copy it to name dictionary.
      001130 11 1F                 3089         .word      LINK
                           001132  3090 LINK = . 
      001132 05                    3091         .byte      5
      001133 54 4F 4B 45 4E        3092         .ascii     "TOKEN"
      001138                       3093 TOKEN:
      001138 CD 0A B3         [ 4] 3094         CALL     BLANK
      00113B CC 11 24         [ 2] 3095         JP     WORDD
                                   3096 
                                   3097 ;; Dictionary search
                                   3098 
                                   3099 ;       NAME>   ( na -- ca )
                                   3100 ;       Return a code address given
                                   3101 ;       a name address.
      00113E 11 32                 3102         .word      LINK
                           001140  3103 LINK = . 
      001140 05                    3104         .byte      5
      001141 4E 41 4D 45 3E        3105         .ascii     "NAME>"
      001146                       3106 NAMET:
      001146 CD 0B 97         [ 4] 3107         CALL     COUNT
      001149 CD 04 3A         [ 4] 3108         CALL     DOLIT
      00114C 00 1F                 3109         .word      31
      00114E CD 05 AB         [ 4] 3110         CALL     ANDD
      001151 CC 07 5A         [ 2] 3111         JP     PLUS
                                   3112 
                                   3113 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3114 ;       Compare u cells in two
                                   3115 ;       strings. Return 0 if identical.
      001154 11 40                 3116         .word      LINK
                           001156  3117 LINK = . 
      001156 05                    3118         .byte       5
      001157 53 41 4D 45 3F        3119         .ascii     "SAME?"
      00115C                       3120 SAMEQ:
      00115C CD 0A 61         [ 4] 3121         CALL     ONEM
      00115F CD 05 28         [ 4] 3122         CALL     TOR
      001162 20 29            [ 2] 3123         JRA     SAME2
      001164 CD 05 89         [ 4] 3124 SAME1:  CALL     OVER
      001167 CD 05 1C         [ 4] 3125         CALL     RAT
      00116A CD 07 5A         [ 4] 3126         CALL     PLUS
      00116D CD 04 D6         [ 4] 3127         CALL     CAT
      001170 CD 05 89         [ 4] 3128         CALL     OVER
      001173 CD 05 1C         [ 4] 3129         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001176 CD 07 5A         [ 4] 3130         CALL     PLUS
      001179 CD 04 D6         [ 4] 3131         CALL     CAT
      00117C CD 07 D3         [ 4] 3132         CALL     SUBB
      00117F CD 07 09         [ 4] 3133         CALL     QDUP
      001182 CD 04 6D         [ 4] 3134         CALL     QBRAN
      001185 11 8D                 3135         .word      SAME2
      001187 CD 05 09         [ 4] 3136         CALL     RFROM
      00118A CC 05 55         [ 2] 3137         JP     DROP
      00118D CD 04 4E         [ 4] 3138 SAME2:  CALL     DONXT
      001190 11 64                 3139         .word      SAME1
      001192 CC 0A C0         [ 2] 3140         JP     ZERO
                                   3141 
                                   3142 ;       find    ( a va -- ca na | a F )
                                   3143 ;       Search vocabulary for string.
                                   3144 ;       Return ca and na if succeeded.
      001195 11 56                 3145         .word      LINK
                           001197  3146 LINK = . 
      001197 04                    3147         .byte      4
      001198 46 49 4E 44           3148         .ascii     "FIND"
      00119C                       3149 FIND:
      00119C CD 05 6F         [ 4] 3150         CALL     SWAPP
      00119F CD 05 5F         [ 4] 3151         CALL     DUPP
      0011A2 CD 04 D6         [ 4] 3152         CALL     CAT
      0011A5 CD 06 2B         [ 4] 3153         CALL     TEMP
      0011A8 CD 04 A1         [ 4] 3154         CALL     STORE
      0011AB CD 05 5F         [ 4] 3155         CALL     DUPP
      0011AE CD 04 B8         [ 4] 3156         CALL     AT
      0011B1 CD 05 28         [ 4] 3157         CALL     TOR
      0011B4 CD 0A 29         [ 4] 3158         CALL     CELLP
      0011B7 CD 05 6F         [ 4] 3159         CALL     SWAPP
      0011BA CD 04 B8         [ 4] 3160 FIND1:  CALL     AT
      0011BD CD 05 5F         [ 4] 3161         CALL     DUPP
      0011C0 CD 04 6D         [ 4] 3162         CALL     QBRAN
      0011C3 11 F9                 3163         .word      FIND6
      0011C5 CD 05 5F         [ 4] 3164         CALL     DUPP
      0011C8 CD 04 B8         [ 4] 3165         CALL     AT
      0011CB CD 04 3A         [ 4] 3166         CALL     DOLIT
      0011CE 1F 7F                 3167         .word      MASKK
      0011D0 CD 05 AB         [ 4] 3168         CALL     ANDD
      0011D3 CD 05 1C         [ 4] 3169         CALL     RAT
      0011D6 CD 05 D4         [ 4] 3170         CALL     XORR
      0011D9 CD 04 6D         [ 4] 3171         CALL     QBRAN
      0011DC 11 E8                 3172         .word      FIND2
      0011DE CD 0A 29         [ 4] 3173         CALL     CELLP
      0011E1 CD 04 3A         [ 4] 3174         CALL     DOLIT
      0011E4 FF FF                 3175         .word     0xFFFF
      0011E6 20 0C            [ 2] 3176         JRA     FIND3
      0011E8 CD 0A 29         [ 4] 3177 FIND2:  CALL     CELLP
      0011EB CD 06 2B         [ 4] 3178         CALL     TEMP
      0011EE CD 04 B8         [ 4] 3179         CALL     AT
      0011F1 CD 11 5C         [ 4] 3180         CALL     SAMEQ
      0011F4 CD 04 84         [ 4] 3181 FIND3:  CALL     BRAN
      0011F7 12 08                 3182         .word      FIND4
      0011F9 CD 05 09         [ 4] 3183 FIND6:  CALL     RFROM
      0011FC CD 05 55         [ 4] 3184         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011FF CD 05 6F         [ 4] 3185         CALL     SWAPP
      001202 CD 0A 38         [ 4] 3186         CALL     CELLM
      001205 CC 05 6F         [ 2] 3187         JP     SWAPP
      001208 CD 04 6D         [ 4] 3188 FIND4:  CALL     QBRAN
      00120B 12 15                 3189         .word      FIND5
      00120D CD 0A 38         [ 4] 3190         CALL     CELLM
      001210 CD 0A 38         [ 4] 3191         CALL     CELLM
      001213 20 A5            [ 2] 3192         JRA     FIND1
      001215 CD 05 09         [ 4] 3193 FIND5:  CALL     RFROM
      001218 CD 05 55         [ 4] 3194         CALL     DROP
      00121B CD 05 6F         [ 4] 3195         CALL     SWAPP
      00121E CD 05 55         [ 4] 3196         CALL     DROP
      001221 CD 0A 38         [ 4] 3197         CALL     CELLM
      001224 CD 05 5F         [ 4] 3198         CALL     DUPP
      001227 CD 11 46         [ 4] 3199         CALL     NAMET
      00122A CC 05 6F         [ 2] 3200         JP     SWAPP
                                   3201 
                                   3202 ;       NAME?   ( a -- ca na | a F )
                                   3203 ;       Search vocabularies for a string.
      00122D 11 97                 3204         .word      LINK
                           00122F  3205 LINK = . 
      00122F 05                    3206         .byte      5
      001230 4E 41 4D 45 3F        3207         .ascii     "NAME?"
      001235                       3208 NAMEQ:
      001235 CD 06 9F         [ 4] 3209         CALL   CNTXT
      001238 CC 11 9C         [ 2] 3210         JP     FIND
                                   3211 
                                   3212 ;; Terminal response
                                   3213 
                                   3214 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3215 ;       Backup cursor by one character.
      00123B 12 2F                 3216         .word      LINK
                           00123D  3217 LINK = . 
      00123D 02                    3218         .byte      2
      00123E 5E 48                 3219         .ascii     "^H"
      001240                       3220 BKSP:
      001240 CD 05 28         [ 4] 3221         CALL     TOR
      001243 CD 05 89         [ 4] 3222         CALL     OVER
      001246 CD 05 09         [ 4] 3223         CALL     RFROM
      001249 CD 05 6F         [ 4] 3224         CALL     SWAPP
      00124C CD 05 89         [ 4] 3225         CALL     OVER
      00124F CD 05 D4         [ 4] 3226         CALL     XORR
      001252 CD 04 6D         [ 4] 3227         CALL     QBRAN
      001255 12 70                 3228         .word      BACK1
      001257 CD 04 3A         [ 4] 3229         CALL     DOLIT
      00125A 00 08                 3230         .word      BKSPP
      00125C CD 04 24         [ 4] 3231         CALL     EMIT
      00125F CD 0A 61         [ 4] 3232         CALL     ONEM
      001262 CD 0A B3         [ 4] 3233         CALL     BLANK
      001265 CD 04 24         [ 4] 3234         CALL     EMIT
      001268 CD 04 3A         [ 4] 3235         CALL     DOLIT
      00126B 00 08                 3236         .word      BKSPP
      00126D CC 04 24         [ 2] 3237         JP     EMIT
      001270 81               [ 4] 3238 BACK1:  RET
                                   3239 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3240 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3241 ;       Accept and echo key stroke
                                   3242 ;       and bump cursor.
      001271 12 3D                 3243         .word      LINK
                           001273  3244 LINK = . 
      001273 03                    3245         .byte      3
      001274 54 41 50              3246         .ascii     "TAP"
      001277                       3247 TAP:
      001277 CD 05 5F         [ 4] 3248         CALL     DUPP
      00127A CD 04 24         [ 4] 3249         CALL     EMIT
      00127D CD 05 89         [ 4] 3250         CALL     OVER
      001280 CD 04 C5         [ 4] 3251         CALL     CSTOR
      001283 CC 0A 54         [ 2] 3252         JP     ONEP
                                   3253 
                                   3254 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3255 ;       Process a key stroke,
                                   3256 ;       CR or backspace.
      001286 12 73                 3257         .word      LINK
                           001288  3258 LINK = . 
      001288 04                    3259         .byte      4
      001289 4B 54 41 50           3260         .ascii     "KTAP"
      00128D                       3261 KTAP:
      00128D CD 05 5F         [ 4] 3262         CALL     DUPP
      001290 CD 04 3A         [ 4] 3263         CALL     DOLIT
      001293 00 0D                 3264         .word      CRR
      001295 CD 05 D4         [ 4] 3265         CALL     XORR
      001298 CD 04 6D         [ 4] 3266         CALL     QBRAN
      00129B 12 B3                 3267         .word      KTAP2
      00129D CD 04 3A         [ 4] 3268         CALL     DOLIT
      0012A0 00 08                 3269         .word      BKSPP
      0012A2 CD 05 D4         [ 4] 3270         CALL     XORR
      0012A5 CD 04 6D         [ 4] 3271         CALL     QBRAN
      0012A8 12 B0                 3272         .word      KTAP1
      0012AA CD 0A B3         [ 4] 3273         CALL     BLANK
      0012AD CC 12 77         [ 2] 3274         JP     TAP
      0012B0 CC 12 40         [ 2] 3275 KTAP1:  JP     BKSP
      0012B3 CD 05 55         [ 4] 3276 KTAP2:  CALL     DROP
      0012B6 CD 05 6F         [ 4] 3277         CALL     SWAPP
      0012B9 CD 05 55         [ 4] 3278         CALL     DROP
      0012BC CC 05 5F         [ 2] 3279         JP     DUPP
                                   3280 
                                   3281 ;       accept  ( b u -- b u )
                                   3282 ;       Accept characters to input
                                   3283 ;       buffer. Return with actual count.
      0012BF 12 88                 3284         .word      LINK
                           0012C1  3285 LINK = . 
      0012C1 06                    3286         .byte      6
      0012C2 41 43 43 45 50 54     3287         .ascii     "ACCEPT"
      0012C8                       3288 ACCEP:
      0012C8 CD 05 89         [ 4] 3289         CALL     OVER
      0012CB CD 07 5A         [ 4] 3290         CALL     PLUS
      0012CE CD 05 89         [ 4] 3291         CALL     OVER
      0012D1 CD 07 45         [ 4] 3292 ACCP1:  CALL     DDUP
      0012D4 CD 05 D4         [ 4] 3293         CALL     XORR
      0012D7 CD 04 6D         [ 4] 3294         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012DA 12 FC                 3295         .word      ACCP4
      0012DC CD 0E A6         [ 4] 3296         CALL     KEY
      0012DF CD 05 5F         [ 4] 3297         CALL     DUPP
      0012E2 CD 0A B3         [ 4] 3298         CALL     BLANK
      0012E5 CD 04 3A         [ 4] 3299         CALL     DOLIT
      0012E8 00 7F                 3300         .word      127
      0012EA CD 08 95         [ 4] 3301         CALL     WITHI
      0012ED CD 04 6D         [ 4] 3302         CALL     QBRAN
      0012F0 12 F7                 3303         .word      ACCP2
      0012F2 CD 12 77         [ 4] 3304         CALL     TAP
      0012F5 20 03            [ 2] 3305         JRA     ACCP3
      0012F7 CD 12 8D         [ 4] 3306 ACCP2:  CALL     KTAP
      0012FA 20 D5            [ 2] 3307 ACCP3:  JRA     ACCP1
      0012FC CD 05 55         [ 4] 3308 ACCP4:  CALL     DROP
      0012FF CD 05 89         [ 4] 3309         CALL     OVER
      001302 CC 07 D3         [ 2] 3310         JP     SUBB
                                   3311 
                                   3312 ;       QUERY   ( -- )
                                   3313 ;       Accept input stream to
                                   3314 ;       terminal input buffer.
      001305 12 C1                 3315         .word      LINK
                                   3316         
                           001307  3317 LINK = . 
      001307 05                    3318         .byte      5
      001308 51 55 45 52 59        3319         .ascii     "QUERY"
      00130D                       3320 QUERY:
      00130D CD 0B D0         [ 4] 3321         CALL     TIB
      001310 CD 04 3A         [ 4] 3322         CALL     DOLIT
      001313 00 50                 3323         .word      80
      001315 CD 12 C8         [ 4] 3324         CALL     ACCEP
      001318 CD 06 4A         [ 4] 3325         CALL     NTIB
      00131B CD 04 A1         [ 4] 3326         CALL     STORE
      00131E CD 05 55         [ 4] 3327         CALL     DROP
      001321 CD 0A C0         [ 4] 3328         CALL     ZERO
      001324 CD 06 3A         [ 4] 3329         CALL     INN
      001327 CC 04 A1         [ 2] 3330         JP     STORE
                                   3331 
                                   3332 ;       ABORT   ( -- )
                                   3333 ;       Reset data stack and
                                   3334 ;       jump to QUIT.
      00132A 13 07                 3335         .word      LINK
                           00132C  3336 LINK = . 
      00132C 05                    3337         .byte      5
      00132D 41 42 4F 52 54        3338         .ascii     "ABORT"
      001332                       3339 ABORT:
      001332 CD 14 29         [ 4] 3340         CALL     PRESE
      001335 CC 14 46         [ 2] 3341         JP     QUIT
                                   3342 
                                   3343 ;       abort"  ( f -- )
                                   3344 ;       Run time routine of ABORT".
                                   3345 ;       Abort with a message.
      001338 13 2C                 3346         .word      LINK
                           00133A  3347 LINK = . 
      00133A 46                    3348 	.byte      COMPO+6
      00133B 41 42 4F 52 54        3349         .ascii     "ABORT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001340 22                    3350         .byte      '"'
      001341                       3351 ABORQ:
      001341 CD 04 6D         [ 4] 3352         CALL     QBRAN
      001344 13 60                 3353         .word      ABOR2   ;text flag
      001346 CD 0F 3C         [ 4] 3354         CALL     DOSTR
      001349 CD 0E DE         [ 4] 3355 ABOR1:  CALL     SPACE
      00134C CD 0B 97         [ 4] 3356         CALL     COUNT
      00134F CD 0F 08         [ 4] 3357         CALL     TYPES
      001352 CD 04 3A         [ 4] 3358         CALL     DOLIT
      001355 00 3F                 3359         .word     63 ; "?"
      001357 CD 04 24         [ 4] 3360         CALL     EMIT
      00135A CD 0F 26         [ 4] 3361         CALL     CR
      00135D CC 13 32         [ 2] 3362         JP     ABORT   ;pass error string
      001360 CD 0F 3C         [ 4] 3363 ABOR2:  CALL     DOSTR
      001363 CC 05 55         [ 2] 3364         JP     DROP
                                   3365 
                                   3366 ;; The text interpreter
                                   3367 
                                   3368 ;       $INTERPRET      ( a -- )
                                   3369 ;       Interpret a word. If failed,
                                   3370 ;       try to convert it to an integer.
      001366 13 3A                 3371         .word      LINK
                           001368  3372 LINK = . 
      001368 0A                    3373         .byte      10
      001369 24 49 4E 54 45 52 50  3374         .ascii     "$INTERPRET"
             52 45 54
      001373                       3375 INTER:
      001373 CD 12 35         [ 4] 3376         CALL     NAMEQ
      001376 CD 07 09         [ 4] 3377         CALL     QDUP    ;?defined
      001379 CD 04 6D         [ 4] 3378         CALL     QBRAN
      00137C 13 9D                 3379         .word      INTE1
      00137E CD 04 B8         [ 4] 3380         CALL     AT
      001381 CD 04 3A         [ 4] 3381         CALL     DOLIT
      001384 40 00                 3382 	.word       0x4000	; COMPO*256
      001386 CD 05 AB         [ 4] 3383         CALL     ANDD    ;?compile only lexicon bits
      001389 CD 13 41         [ 4] 3384         CALL     ABORQ
      00138C 0D                    3385         .byte      13
      00138D 20 63 6F 6D 70 69 6C  3386         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00139A CC 04 94         [ 2] 3387         JP     EXECU
      00139D CD 0D D3         [ 4] 3388 INTE1:  CALL     NUMBQ   ;convert a number
      0013A0 CD 04 6D         [ 4] 3389         CALL     QBRAN
      0013A3 13 49                 3390         .word    ABOR1
      0013A5 81               [ 4] 3391         RET
                                   3392 
                                   3393 ;       [       ( -- )
                                   3394 ;       Start  text interpreter.
      0013A6 13 68                 3395         .word      LINK
                           0013A8  3396 LINK = . 
      0013A8 81                    3397 	.byte      IMEDD+1
      0013A9 5B                    3398         .ascii     "["
      0013AA                       3399 LBRAC:
      0013AA CD 04 3A         [ 4] 3400         CALL   DOLIT
      0013AD 13 73                 3401         .word  INTER
      0013AF CD 06 7D         [ 4] 3402         CALL   TEVAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0013B2 CC 04 A1         [ 2] 3403         JP     STORE
                                   3404 
                                   3405 ;       .OK     ( -- )
                                   3406 ;       Display 'ok' while interpreting.
      0013B5 13 A8                 3407         .word      LINK
                           0013B7  3408 LINK = . 
      0013B7 03                    3409         .byte      3
      0013B8 2E 4F 4B              3410         .ascii     ".OK"
      0013BB                       3411 DOTOK:
      0013BB CD 04 3A         [ 4] 3412         CALL     DOLIT
      0013BE 13 73                 3413         .word      INTER
      0013C0 CD 06 7D         [ 4] 3414         CALL     TEVAL
      0013C3 CD 04 B8         [ 4] 3415         CALL     AT
      0013C6 CD 07 FB         [ 4] 3416         CALL     EQUAL
      0013C9 CD 04 6D         [ 4] 3417         CALL     QBRAN
      0013CC 13 D5                 3418         .word      DOTO1
      0013CE CD 0F 65         [ 4] 3419         CALL     DOTQP
      0013D1 03                    3420         .byte      3
      0013D2 20 6F 6B              3421         .ascii     " ok"
      0013D5 CC 0F 26         [ 2] 3422 DOTO1:  JP     CR
                                   3423 
                                   3424 ;       ?STACK  ( -- )
                                   3425 ;       Abort if stack underflows.
      0013D8 13 B7                 3426         .word      LINK
                           0013DA  3427 LINK = . 
      0013DA 06                    3428         .byte      6
      0013DB 3F 53 54 41 43 4B     3429         .ascii     "?STACK"
      0013E1                       3430 QSTAC: 
      0013E1 CD 0B 02         [ 4] 3431         CALL     DEPTH
      0013E4 CD 05 98         [ 4] 3432         CALL     ZLESS   ;check only for underflow
      0013E7 CD 13 41         [ 4] 3433         CALL     ABORQ
      0013EA 0B                    3434         .byte      11
      0013EB 20 75 6E 64 65 72 66  3435         .ascii     " underflow "
             6C 6F 77 20
      0013F6 81               [ 4] 3436         RET
                                   3437 
                                   3438 ;       EVAL    ( -- )
                                   3439 ;       Interpret  input stream.
      0013F7 13 DA                 3440         .word      LINK
                           0013F9  3441 LINK = . 
      0013F9 04                    3442         .byte      4
      0013FA 45 56 41 4C           3443         .ascii     "EVAL"
      0013FE                       3444 EVAL:
      0013FE CD 11 38         [ 4] 3445 EVAL1:  CALL     TOKEN
      001401 CD 05 5F         [ 4] 3446         CALL     DUPP
      001404 CD 04 D6         [ 4] 3447         CALL     CAT     ;?input stream empty
      001407 CD 04 6D         [ 4] 3448         CALL     QBRAN
      00140A 14 1A                 3449         .word    EVAL2
      00140C CD 06 7D         [ 4] 3450         CALL     TEVAL
      00140F CD 0B E4         [ 4] 3451         CALL     ATEXE
      001412 CD 13 E1         [ 4] 3452         CALL     QSTAC   ;evaluate input, check stack
      001415 CD 04 84         [ 4] 3453         CALL     BRAN
      001418 13 FE                 3454         .word    EVAL1
      00141A CD 05 55         [ 4] 3455 EVAL2:  CALL     DROP
      00141D CC 13 BB         [ 2] 3456         JP       DOTOK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3457 
                                   3458 ;       PRESET  ( -- )
                                   3459 ;       Reset data stack pointer and
                                   3460 ;       terminal input buffer.
      001420 13 F9                 3461         .word      LINK
                           001422  3462 LINK = . 
      001422 06                    3463         .byte      6
      001423 50 52 45 53 45 54     3464         .ascii     "PRESET"
      001429                       3465 PRESE:
      001429 CD 04 3A         [ 4] 3466         CALL     DOLIT
      00142C 06 80                 3467         .word      SPP
      00142E CD 05 4C         [ 4] 3468         CALL     SPSTO
      001431 CD 04 3A         [ 4] 3469         CALL     DOLIT
      001434 07 00                 3470         .word      TIBB
      001436 CD 06 4A         [ 4] 3471         CALL     NTIB
      001439 CD 0A 29         [ 4] 3472         CALL     CELLP
      00143C CC 04 A1         [ 2] 3473         JP     STORE
                                   3474 
                                   3475 ;       QUIT    ( -- )
                                   3476 ;       Reset return stack pointer
                                   3477 ;       and start text interpreter.
      00143F 14 22                 3478         .word      LINK
                           001441  3479 LINK = . 
      001441 04                    3480         .byte      4
      001442 51 55 49 54           3481         .ascii     "QUIT"
      001446                       3482 QUIT:
      001446 CD 04 3A         [ 4] 3483         CALL     DOLIT
      001449 07 FF                 3484         .word      RPP
      00144B CD 04 F3         [ 4] 3485         CALL     RPSTO   ;reset return stack pointer
      00144E CD 13 AA         [ 4] 3486 QUIT1:  CALL     LBRAC   ;start interpretation
      001451 CD 13 0D         [ 4] 3487 QUIT2:  CALL     QUERY   ;get input
      001454 CD 13 FE         [ 4] 3488         CALL     EVAL
      001457 20 F8            [ 2] 3489         JRA     QUIT2   ;continue till error
                                   3490 
                                   3491 ;; The compiler
                                   3492 
                                   3493 ;       '       ( -- ca )
                                   3494 ;       Search vocabularies for
                                   3495 ;       next word in input stream.
      001459 14 41                 3496         .word      LINK
                           00145B  3497 LINK = . 
      00145B 01                    3498         .byte      1
      00145C 27                    3499         .ascii     "'"
      00145D                       3500 TICK:
      00145D CD 11 38         [ 4] 3501         CALL     TOKEN
      001460 CD 12 35         [ 4] 3502         CALL     NAMEQ   ;?defined
      001463 CD 04 6D         [ 4] 3503         CALL     QBRAN
      001466 13 49                 3504         .word      ABOR1
      001468 81               [ 4] 3505         RET     ;yes, push code address
                                   3506 
                                   3507 ;       ALLOT   ( n -- )
                                   3508 ;       Allocate n bytes to RAM 
      001469 14 5B                 3509         .word      LINK
                           00146B  3510         LINK = . 
      00146B 05                    3511         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00146C 41 4C 4C 4F 54        3512         .ascii     "ALLOT"
      001471                       3513 ALLOT:
      001471 CD 06 AD         [ 4] 3514         CALL     VPP
                                   3515 ; must update APP_VP each time VP is modidied
      001474 CD 0B 30         [ 4] 3516         call PSTOR 
      001477 CC 1B B8         [ 2] 3517         jp UPDATVP 
                                   3518 
                                   3519 ;       ,       ( w -- )
                                   3520 ;         Compile an integer into
                                   3521 ;         variable space.
      00147A 14 6B                 3522         .word      LINK
                           00147C  3523 LINK = . 
      00147C 01                    3524         .byte      1
      00147D 2C                    3525         .ascii     ","
      00147E                       3526 COMMA:
      00147E CD 0B AE         [ 4] 3527         CALL     HERE
      001481 CD 05 5F         [ 4] 3528         CALL     DUPP
      001484 CD 0A 29         [ 4] 3529         CALL     CELLP   ;cell boundary
      001487 CD 06 AD         [ 4] 3530         CALL     VPP
      00148A CD 04 A1         [ 4] 3531         CALL     STORE
      00148D CC 04 A1         [ 2] 3532         JP     STORE
                                   3533 
                                   3534 ;       C,      ( c -- )
                                   3535 ;       Compile a byte into
                                   3536 ;       variables space.
      001490 14 7C                 3537        .word      LINK
                           001492  3538 LINK = . 
      001492 02                    3539         .byte      2
      001493 43 2C                 3540         .ascii     "C,"
      001495                       3541 CCOMMA:
      001495 CD 0B AE         [ 4] 3542         CALL     HERE
      001498 CD 05 5F         [ 4] 3543         CALL     DUPP
      00149B CD 0A 54         [ 4] 3544         CALL     ONEP
      00149E CD 06 AD         [ 4] 3545         CALL     VPP
      0014A1 CD 04 A1         [ 4] 3546         CALL     STORE
      0014A4 CC 04 C5         [ 2] 3547         JP     CSTOR
                                   3548 
                                   3549 ;       [COMPILE]       ( -- ; <string> )
                                   3550 ;       Compile next immediate
                                   3551 ;       word into code dictionary.
      0014A7 14 92                 3552         .word      LINK
                           0014A9  3553 LINK = . 
      0014A9 89                    3554 	.byte      IMEDD+9
      0014AA 5B 43 4F 4D 50 49 4C  3555         .ascii     "[COMPILE]"
             45 5D
      0014B3                       3556 BCOMP:
      0014B3 CD 14 5D         [ 4] 3557         CALL     TICK
      0014B6 CC 17 79         [ 2] 3558         JP     JSRC
                                   3559 
                                   3560 ;       COMPILE ( -- )
                                   3561 ;       Compile next jsr in
                                   3562 ;       colon list to code dictionary.
      0014B9 14 A9                 3563         .word      LINK
                           0014BB  3564 LINK = . 
      0014BB 47                    3565 	.byte      COMPO+7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014BC 43 4F 4D 50 49 4C 45  3566         .ascii     "COMPILE"
      0014C3                       3567 COMPI:
      0014C3 CD 05 09         [ 4] 3568         CALL     RFROM
      0014C6 CD 05 5F         [ 4] 3569         CALL     DUPP
      0014C9 CD 04 B8         [ 4] 3570         CALL     AT
      0014CC CD 17 79         [ 4] 3571         CALL     JSRC    ;compile subroutine
      0014CF CD 0A 29         [ 4] 3572         CALL     CELLP
      0014D2 90 93            [ 1] 3573         ldw y,x 
      0014D4 90 FE            [ 2] 3574         ldw y,(y)
      0014D6 1C 00 02         [ 2] 3575         addw x,#CELLL 
      0014D9 90 FC            [ 2] 3576         jp (y)
                                   3577 
                                   3578 ;       LITERAL ( w -- )
                                   3579 ;       Compile tos to dictionary
                                   3580 ;       as an integer literal.
      0014DB 14 BB                 3581         .word      LINK
                           0014DD  3582 LINK = . 
      0014DD 87                    3583 	.byte      IMEDD+7
      0014DE 4C 49 54 45 52 41 4C  3584         .ascii     "LITERAL"
      0014E5                       3585 LITER:
      0014E5 CD 14 C3         [ 4] 3586         CALL     COMPI
      0014E8 04 3A                 3587         .word DOLIT 
      0014EA CC 14 7E         [ 2] 3588         JP     COMMA
                                   3589 
                                   3590 ;       $,"     ( -- )
                                   3591 ;       Compile a literal string
                                   3592 ;       up to next " .
      0014ED 14 DD                 3593         .word      LINK
                           0014EF  3594 LINK = . 
      0014EF 03                    3595         .byte      3
      0014F0 24 2C 22              3596         .byte     '$',',','"'
      0014F3                       3597 STRCQ:
      0014F3 CD 04 3A         [ 4] 3598         CALL     DOLIT
      0014F6 00 22                 3599         .word     34	; "
      0014F8 CD 10 BB         [ 4] 3600         CALL     PARSE
      0014FB CD 0B AE         [ 4] 3601         CALL     HERE
      0014FE CD 0C 6E         [ 4] 3602         CALL     PACKS   ;string to code dictionary
      001501 CD 0B 97         [ 4] 3603         CALL     COUNT
      001504 CD 07 5A         [ 4] 3604         CALL     PLUS    ;calculate aligned end of string
      001507 CD 06 AD         [ 4] 3605         CALL     VPP
      00150A CC 04 A1         [ 2] 3606         JP     STORE
                                   3607 
                                   3608 ;; Structures
                                   3609 
                                   3610 ;       FOR     ( -- a )
                                   3611 ;       Start a FOR-NEXT loop
                                   3612 ;       structure in a colon definition.
      00150D 14 EF                 3613         .word      LINK
                           00150F  3614 LINK = . 
      00150F 83                    3615 	.byte      IMEDD+3
      001510 46 4F 52              3616         .ascii     "FOR"
      001513                       3617 FOR:
      001513 CD 14 C3         [ 4] 3618         CALL     COMPI
      001516 05 28                 3619         .word TOR 
      001518 CC 0B AE         [ 2] 3620         JP     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3621 
                                   3622 ;       NEXT    ( a -- )
                                   3623 ;       Terminate a FOR-NEXT loop.
      00151B 15 0F                 3624         .word      LINK
                           00151D  3625 LINK = . 
      00151D 84                    3626 	.byte      IMEDD+4
      00151E 4E 45 58 54           3627         .ascii     "NEXT"
      001522                       3628 NEXT:
      001522 CD 14 C3         [ 4] 3629         CALL     COMPI
      001525 04 4E                 3630         .word DONXT 
      001527 CD 06 F9         [ 4] 3631         call ADRADJ
      00152A CC 14 7E         [ 2] 3632         JP     COMMA
                                   3633 
                                   3634 ;       I ( -- n )
                                   3635 ;       stack FOR-NEXT COUNTER 
      00152D 15 1D                 3636         .word LINK 
                           00152F  3637         LINK=.
      00152F 01                    3638         .byte 1 
      001530 49                    3639         .ascii "I"
      001531                       3640 IFETCH: 
      001531 1D 00 02         [ 2] 3641         subw x,#CELLL 
      001534 16 03            [ 2] 3642         ldw y,(3,sp)
      001536 FF               [ 2] 3643         ldw (x),y 
      001537 81               [ 4] 3644         ret 
                                   3645 
                                   3646 ;       BEGIN   ( -- a )
                                   3647 ;       Start an infinite or
                                   3648 ;       indefinite loop structure.
      001538 15 2F                 3649         .word      LINK
                           00153A  3650 LINK = . 
      00153A 85                    3651 	.byte      IMEDD+5
      00153B 42 45 47 49 4E        3652         .ascii     "BEGIN"
      001540                       3653 BEGIN:
      001540 CC 0B AE         [ 2] 3654         JP     HERE
                                   3655 
                                   3656 ;       UNTIL   ( a -- )
                                   3657 ;       Terminate a BEGIN-UNTIL
                                   3658 ;       indefinite loop structure.
      001543 15 3A                 3659         .word      LINK
                           001545  3660 LINK = . 
      001545 85                    3661 	.byte      IMEDD+5
      001546 55 4E 54 49 4C        3662         .ascii     "UNTIL"
      00154B                       3663 UNTIL:
      00154B CD 14 C3         [ 4] 3664         CALL     COMPI
      00154E 04 6D                 3665         .word    QBRAN 
      001550 CD 06 F9         [ 4] 3666         call ADRADJ
      001553 CC 14 7E         [ 2] 3667         JP     COMMA
                                   3668 
                                   3669 ;       AGAIN   ( a -- )
                                   3670 ;       Terminate a BEGIN-AGAIN
                                   3671 ;       infinite loop structure.
      001556 15 45                 3672         .word      LINK
                           001558  3673 LINK = . 
      001558 85                    3674 	.byte      IMEDD+5
      001559 41 47 41 49 4E        3675         .ascii     "AGAIN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00155E                       3676 AGAIN:
      00155E CD 14 C3         [ 4] 3677         CALL     COMPI
      001561 04 84                 3678         .word BRAN
      001563 CD 06 F9         [ 4] 3679         call ADRADJ 
      001566 CC 14 7E         [ 2] 3680         JP     COMMA
                                   3681 
                                   3682 ;       IF      ( -- A )
                                   3683 ;       Begin a conditional branch.
      001569 15 58                 3684         .word      LINK
                           00156B  3685 LINK = . 
      00156B 82                    3686 	.byte      IMEDD+2
      00156C 49 46                 3687         .ascii     "IF"
      00156E                       3688 IFF:
      00156E CD 14 C3         [ 4] 3689         CALL     COMPI
      001571 04 6D                 3690         .word QBRAN
      001573 CD 0B AE         [ 4] 3691         CALL     HERE
      001576 CD 0A C0         [ 4] 3692         CALL     ZERO
      001579 CC 14 7E         [ 2] 3693         JP     COMMA
                                   3694 
                                   3695 ;       THEN        ( A -- )
                                   3696 ;       Terminate a conditional branch structure.
      00157C 15 6B                 3697         .word      LINK
                           00157E  3698 LINK = . 
      00157E 84                    3699 	.byte      IMEDD+4
      00157F 54 48 45 4E           3700         .ascii     "THEN"
      001583                       3701 THENN:
      001583 CD 0B AE         [ 4] 3702         CALL     HERE
      001586 CD 06 F9         [ 4] 3703         call ADRADJ 
      001589 CD 05 6F         [ 4] 3704         CALL     SWAPP
      00158C CC 04 A1         [ 2] 3705         JP     STORE
                                   3706 
                                   3707 ;       ELSE        ( A -- A )
                                   3708 ;       Start the false clause in an IF-ELSE-THEN structure.
      00158F 15 7E                 3709         .word      LINK
                           001591  3710 LINK = . 
      001591 84                    3711 	.byte      IMEDD+4
      001592 45 4C 53 45           3712         .ascii     "ELSE"
      001596                       3713 ELSEE:
      001596 CD 14 C3         [ 4] 3714         CALL     COMPI
      001599 04 84                 3715         .word BRAN
      00159B CD 0B AE         [ 4] 3716         CALL     HERE
      00159E CD 0A C0         [ 4] 3717         CALL     ZERO
      0015A1 CD 14 7E         [ 4] 3718         CALL     COMMA
      0015A4 CD 05 6F         [ 4] 3719         CALL     SWAPP
      0015A7 CD 0B AE         [ 4] 3720         CALL     HERE
      0015AA CD 06 F9         [ 4] 3721         call ADRADJ 
      0015AD CD 05 6F         [ 4] 3722         CALL     SWAPP
      0015B0 CC 04 A1         [ 2] 3723         JP     STORE
                                   3724 
                                   3725 ;       AHEAD       ( -- A )
                                   3726 ;       Compile a forward branch instruction.
      0015B3 15 91                 3727         .word      LINK
                           0015B5  3728 LINK = . 
      0015B5 85                    3729 	.byte      IMEDD+5
      0015B6 41 48 45 41 44        3730         .ascii     "AHEAD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015BB                       3731 AHEAD:
      0015BB CD 14 C3         [ 4] 3732         CALL     COMPI
      0015BE 04 84                 3733         .word BRAN
      0015C0 CD 0B AE         [ 4] 3734         CALL     HERE
      0015C3 CD 0A C0         [ 4] 3735         CALL     ZERO
      0015C6 CC 14 7E         [ 2] 3736         JP     COMMA
                                   3737 
                                   3738 ;       WHILE       ( a -- A a )
                                   3739 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015C9 15 B5                 3740         .word      LINK
                           0015CB  3741 LINK = . 
      0015CB 85                    3742 	.byte      IMEDD+5
      0015CC 57 48 49 4C 45        3743         .ascii     "WHILE"
      0015D1                       3744 WHILE:
      0015D1 CD 14 C3         [ 4] 3745         CALL     COMPI
      0015D4 04 6D                 3746         .word QBRAN
      0015D6 CD 0B AE         [ 4] 3747         CALL     HERE
      0015D9 CD 0A C0         [ 4] 3748         CALL     ZERO
      0015DC CD 14 7E         [ 4] 3749         CALL     COMMA
      0015DF CC 05 6F         [ 2] 3750         JP     SWAPP
                                   3751 
                                   3752 ;       REPEAT      ( A a -- )
                                   3753 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0015E2 15 CB                 3754         .word      LINK
                           0015E4  3755 LINK = . 
      0015E4 86                    3756         .byte      IMEDD+6
      0015E5 52 45 50 45 41 54     3757         .ascii     "REPEAT"
      0015EB                       3758 REPEA:
      0015EB CD 14 C3         [ 4] 3759         CALL     COMPI
      0015EE 04 84                 3760         .word BRAN
      0015F0 CD 06 F9         [ 4] 3761         call ADRADJ 
      0015F3 CD 14 7E         [ 4] 3762         CALL     COMMA
      0015F6 CD 0B AE         [ 4] 3763         CALL     HERE
      0015F9 CD 06 F9         [ 4] 3764         call ADRADJ 
      0015FC CD 05 6F         [ 4] 3765         CALL     SWAPP
      0015FF CC 04 A1         [ 2] 3766         JP     STORE
                                   3767 
                                   3768 ;       AFT         ( a -- a A )
                                   3769 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001602 15 E4                 3770         .word      LINK
                           001604  3771 LINK = . 
      001604 83                    3772 	.byte      IMEDD+3
      001605 41 46 54              3773         .ascii     "AFT"
      001608                       3774 AFT:
      001608 CD 05 55         [ 4] 3775         CALL     DROP
      00160B CD 15 BB         [ 4] 3776         CALL     AHEAD
      00160E CD 0B AE         [ 4] 3777         CALL     HERE
      001611 CC 05 6F         [ 2] 3778         JP     SWAPP
                                   3779 
                                   3780 ;       ABORT"      ( -- ; <string> )
                                   3781 ;       Conditional abort with an error message.
      001614 16 04                 3782         .word      LINK
                           001616  3783 LINK = . 
      001616 86                    3784 	.byte      IMEDD+6
      001617 41 42 4F 52 54        3785         .ascii     "ABORT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00161C 22                    3786         .byte      '"'
      00161D                       3787 ABRTQ:
      00161D CD 14 C3         [ 4] 3788         CALL     COMPI
      001620 13 41                 3789         .word ABORQ
      001622 CC 14 F3         [ 2] 3790         JP     STRCQ
                                   3791 
                                   3792 ;       $"     ( -- ; <string> )
                                   3793 ;       Compile an inline string literal.
      001625 16 16                 3794         .word      LINK
                           001627  3795 LINK = . 
      001627 82                    3796 	.byte      IMEDD+2
      001628 24 22                 3797         .byte     '$','"'
      00162A                       3798 STRQ:
      00162A CD 14 C3         [ 4] 3799         CALL     COMPI
      00162D 0F 5B                 3800         .word STRQP 
      00162F CC 14 F3         [ 2] 3801         JP     STRCQ
                                   3802 
                                   3803 ;       ."          ( -- ; <string> )
                                   3804 ;       Compile an inline string literal to be typed out at run time.
      001632 16 27                 3805         .word      LINK
                           001634  3806 LINK = . 
      001634 82                    3807 	.byte      IMEDD+2
      001635 2E 22                 3808         .byte     '.','"'
      001637                       3809 DOTQ:
      001637 CD 14 C3         [ 4] 3810         CALL     COMPI
      00163A 0F 65                 3811         .word DOTQP 
      00163C CC 14 F3         [ 2] 3812         JP     STRCQ
                                   3813 
                                   3814 ;; Name compiler
                                   3815 
                                   3816 ;       ?UNIQUE ( a -- a )
                                   3817 ;       Display a warning message
                                   3818 ;       if word already exists.
      00163F 16 34                 3819         .word      LINK
                           001641  3820 LINK = . 
      001641 07                    3821         .byte      7
      001642 3F 55 4E 49 51 55 45  3822         .ascii     "?UNIQUE"
      001649                       3823 UNIQU:
      001649 CD 05 5F         [ 4] 3824         CALL     DUPP
      00164C CD 12 35         [ 4] 3825         CALL     NAMEQ   ;?name exists
      00164F CD 04 6D         [ 4] 3826         CALL     QBRAN
      001652 16 68                 3827         .word      UNIQ1
      001654 CD 0F 65         [ 4] 3828         CALL     DOTQP   ;redef are OK
      001657 07                    3829         .byte       7
      001658 20 72 65 44 65 66 20  3830         .ascii     " reDef "       
      00165F CD 05 89         [ 4] 3831         CALL     OVER
      001662 CD 0B 97         [ 4] 3832         CALL     COUNT
      001665 CD 0F 08         [ 4] 3833         CALL     TYPES   ;just in case
      001668 CC 05 55         [ 2] 3834 UNIQ1:  JP     DROP
                                   3835 
                                   3836 ;       $,n     ( na -- )
                                   3837 ;       Build a new dictionary name
                                   3838 ;       using string at na.
                                   3839 ; compile dans l'espace des variables 
      00166B 16 41                 3840         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                           00166D  3841 LINK = . 
      00166D 03                    3842         .byte      3
      00166E 24 2C 6E              3843         .ascii     "$,n"
      001671                       3844 SNAME:
      001671 CD 05 5F         [ 4] 3845         CALL     DUPP
      001674 CD 04 D6         [ 4] 3846         CALL     CAT     ;?null input
      001677 CD 04 6D         [ 4] 3847         CALL     QBRAN
      00167A 16 A7                 3848         .word      PNAM1
      00167C CD 16 49         [ 4] 3849         CALL     UNIQU   ;?redefinition
      00167F CD 05 5F         [ 4] 3850         CALL     DUPP
      001682 CD 0B 97         [ 4] 3851         CALL     COUNT
      001685 CD 07 5A         [ 4] 3852         CALL     PLUS
      001688 CD 06 AD         [ 4] 3853         CALL     VPP
      00168B CD 04 A1         [ 4] 3854         CALL     STORE
      00168E CD 05 5F         [ 4] 3855         CALL     DUPP
      001691 CD 06 CB         [ 4] 3856         CALL     LAST
      001694 CD 04 A1         [ 4] 3857         CALL     STORE   ;save na for vocabulary link
      001697 CD 0A 38         [ 4] 3858         CALL     CELLM   ;link address
      00169A CD 06 9F         [ 4] 3859         CALL     CNTXT
      00169D CD 04 B8         [ 4] 3860         CALL     AT
      0016A0 CD 05 6F         [ 4] 3861         CALL     SWAPP
      0016A3 CD 04 A1         [ 4] 3862         CALL     STORE
      0016A6 81               [ 4] 3863         RET     ;save code pointer
      0016A7 CD 0F 5B         [ 4] 3864 PNAM1:  CALL     STRQP
      0016AA 05                    3865         .byte      5
      0016AB 20 6E 61 6D 65        3866         .ascii     " name" ;null input
      0016B0 CC 13 49         [ 2] 3867         JP     ABOR1
                                   3868 
                                   3869 ;; FORTH compiler
                                   3870 
                                   3871 ;       $COMPILE        ( a -- )
                                   3872 ;       Compile next word to
                                   3873 ;       dictionary as a token or literal.
      0016B3 16 6D                 3874         .word      LINK
                           0016B5  3875 LINK = . 
      0016B5 08                    3876         .byte      8
      0016B6 24 43 4F 4D 50 49 4C  3877         .ascii     "$COMPILE"
             45
      0016BE                       3878 SCOMP:
      0016BE CD 12 35         [ 4] 3879         CALL     NAMEQ
      0016C1 CD 07 09         [ 4] 3880         CALL     QDUP    ;?defined
      0016C4 CD 04 6D         [ 4] 3881         CALL     QBRAN
      0016C7 16 DF                 3882         .word      SCOM2
      0016C9 CD 04 B8         [ 4] 3883         CALL     AT
      0016CC CD 04 3A         [ 4] 3884         CALL     DOLIT
      0016CF 80 00                 3885         .word     0x8000	;  IMEDD*256
      0016D1 CD 05 AB         [ 4] 3886         CALL     ANDD    ;?immediate
      0016D4 CD 04 6D         [ 4] 3887         CALL     QBRAN
      0016D7 16 DC                 3888         .word      SCOM1
      0016D9 CC 04 94         [ 2] 3889         JP     EXECU
      0016DC CC 17 79         [ 2] 3890 SCOM1:  JP     JSRC
      0016DF CD 0D D3         [ 4] 3891 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0016E2 CD 04 6D         [ 4] 3892         CALL     QBRAN
      0016E5 13 49                 3893         .word      ABOR1
      0016E7 CC 14 E5         [ 2] 3894         JP     LITER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3895 
                                   3896 ;       OVERT   ( -- )
                                   3897 ;       Link a new word into vocabulary.
      0016EA 16 B5                 3898         .word      LINK
                           0016EC  3899 LINK = . 
      0016EC 05                    3900         .byte      5
      0016ED 4F 56 45 52 54        3901         .ascii     "OVERT"
      0016F2                       3902 OVERT:
      0016F2 CD 06 CB         [ 4] 3903         CALL     LAST
      0016F5 CD 04 B8         [ 4] 3904         CALL     AT
      0016F8 CD 06 9F         [ 4] 3905         CALL     CNTXT
      0016FB CC 04 A1         [ 2] 3906         JP     STORE
                                   3907 
                                   3908 ;       ;       ( -- )
                                   3909 ;       Terminate a colon definition.
      0016FE 16 EC                 3910         .word      LINK
                           001700  3911 LINK = . 
      001700 C1                    3912 	.byte      IMEDD+COMPO+1
      001701 3B                    3913         .ascii     ";"
      001702                       3914 SEMIS:
                           000001  3915 .if OPTIMIZE ; more compact and faster
      001702 CD 04 3A         [ 4] 3916         call DOLIT 
      001705 00 81                 3917         .word 0x81   ; opcode for RET 
      001707 CD 14 95         [ 4] 3918         call CCOMMA 
                           000000  3919 .else
                                   3920         CALL     COMPI
                                   3921         .word EXIT 
                                   3922 .endif 
      00170A CD 13 AA         [ 4] 3923         CALL     LBRAC
      00170D CD 16 F2         [ 4] 3924         call OVERT 
      001710 CD 20 DB         [ 4] 3925         CALL FMOVE
      001713 CD 07 09         [ 4] 3926         call QDUP 
      001716 CD 04 6D         [ 4] 3927         call QBRAN 
      001719 18 49                 3928         .word SET_RAMLAST 
      00171B CD 21 6F         [ 4] 3929         CALL UPDATPTR
      00171E 81               [ 4] 3930         RET 
                                   3931 
                                   3932 
                                   3933 ;       Terminate an ISR definition 
                                   3934 ;       retourn ca of ISR as double
                                   3935 ;       I; ( -- ud )
      00171F 17 00                 3936         .word LINK 
                           001721  3937         LINK=.
      001721 C2                    3938         .byte 2+IMEDD+COMPO 
      001722 49 3B                 3939         .ascii "I;" 
      001724                       3940 ISEMI:
      001724 1D 00 02         [ 2] 3941         subw x,#CELLL  
      001727 90 AE 00 80      [ 2] 3942         ldw y,#IRET_CODE 
      00172B FF               [ 2] 3943         ldw (x),y 
      00172C CD 14 95         [ 4] 3944         call CCOMMA
      00172F CD 13 AA         [ 4] 3945         call LBRAC 
      001732 CD 21 B4         [ 4] 3946         call IFMOVE
      001735 CD 07 09         [ 4] 3947         call QDUP 
      001738 CD 04 6D         [ 4] 3948         CALL QBRAN 
      00173B 18 49                 3949         .word SET_RAMLAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00173D CD 06 BB         [ 4] 3950         CALL CPP
      001740 CD 04 B8         [ 4] 3951         call AT 
      001743 CD 05 6F         [ 4] 3952         call SWAPP 
      001746 CD 06 BB         [ 4] 3953         CALL CPP 
      001749 CD 04 A1         [ 4] 3954         call STORE 
      00174C CD 1B A1         [ 4] 3955         call UPDATCP 
      00174F CD 1B 5E         [ 4] 3956         call EEPVP 
      001752 CD 05 55         [ 4] 3957         call DROP 
      001755 CD 04 B8         [ 4] 3958         call AT 
      001758 CD 06 AD         [ 4] 3959         call VPP 
      00175B CD 04 A1         [ 4] 3960         call STORE 
      00175E CC 0A C0         [ 2] 3961         jp ZERO
      001761 81               [ 4] 3962         ret           
                                   3963         
                                   3964 
                                   3965 ;       ]       ( -- )
                                   3966 ;       Start compiling words in
                                   3967 ;       input stream.
      001762 17 21                 3968         .word      LINK
                           001764  3969 LINK = . 
      001764 01                    3970         .byte      1
      001765 5D                    3971         .ascii     "]"
      001766                       3972 RBRAC:
      001766 CD 04 3A         [ 4] 3973         CALL   DOLIT
      001769 16 BE                 3974         .word  SCOMP
      00176B CD 06 7D         [ 4] 3975         CALL   TEVAL
      00176E CC 04 A1         [ 2] 3976         JP     STORE
                                   3977 
                                   3978 ;       CALL,    ( ca -- )
                                   3979 ;       Compile a subroutine call.
      001771 17 64                 3980         .word      LINK
                           001773  3981 LINK = . 
      001773 05                    3982         .byte      5
      001774 43 41 4C 4C 2C        3983         .ascii     "CALL,"
      001779                       3984 JSRC:
      001779 CD 04 3A         [ 4] 3985         CALL     DOLIT
      00177C 00 CD                 3986         .word     CALLL     ;CALL
      00177E CD 14 95         [ 4] 3987         CALL     CCOMMA
      001781 CC 14 7E         [ 2] 3988         JP     COMMA
                                   3989 
                                   3990 ;       INIT-OFS ( -- )
                                   3991 ;       compute offset to adjust jump address 
                                   3992 ;       set variable OFFSET 
      001784 17 73                 3993         .word LINK 
                           001786  3994         LINK=.
      001786 08                    3995         .byte 8 
      001787 49 4E 49 54 2D 4F 46  3996         .ascii "INIT-OFS" 
             53
      00178F                       3997 INITOFS:
      00178F CD 06 6C         [ 4] 3998         call TFLASH 
      001792 CD 04 B8         [ 4] 3999         CALL AT 
      001795 CD 05 5F         [ 4] 4000         CALL DUPP 
      001798 CD 04 6D         [ 4] 4001         call QBRAN
      00179B 17 AC                 4002         .word 1$
      00179D CD 05 55         [ 4] 4003         call DROP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0017A0 CD 06 BB         [ 4] 4004         call CPP 
      0017A3 CD 04 B8         [ 4] 4005         call AT 
      0017A6 CD 0B AE         [ 4] 4006         call HERE
      0017A9 CD 07 D3         [ 4] 4007         call SUBB 
      0017AC CD 06 F0         [ 4] 4008 1$:     call OFFSET 
      0017AF CC 04 A1         [ 2] 4009         jp STORE  
                                   4010 
                                   4011 ;       :       ( -- ; <string> )
                                   4012 ;       Start a new colon definition
                                   4013 ;       using next word as its name.
      0017B2 17 86                 4014         .word      LINK
                           0017B4  4015 LINK = . 
      0017B4 01                    4016         .byte      1
      0017B5 3A                    4017         .ascii     ":"
      0017B6                       4018 COLON:
      0017B6 CD 17 8F         [ 4] 4019         call INITOFS       
      0017B9 CD 11 38         [ 4] 4020         CALL   TOKEN
      0017BC CD 16 71         [ 4] 4021         CALL   SNAME
      0017BF CC 17 66         [ 2] 4022         JP     RBRAC
                                   4023 
                                   4024 ;       I:  ( -- )
                                   4025 ;       Start interrupt service routine definition
                                   4026 ;       those definition have no name.
      0017C2 17 B4                 4027         .word LINK
                           0017C4  4028         LINK=.
      0017C4 02                    4029         .byte 2 
      0017C5 49 3A                 4030         .ascii "I:" 
      0017C7                       4031 ICOLON:
      0017C7 CD 17 8F         [ 4] 4032         call INITOFS 
      0017CA CC 17 66         [ 2] 4033         jp RBRAC  
                                   4034 
                                   4035 ;       IMMEDIATE       ( -- )
                                   4036 ;       Make last compiled word
                                   4037 ;       an immediate word.
      0017CD 17 C4                 4038         .word      LINK
                           0017CF  4039 LINK = . 
      0017CF 09                    4040         .byte      9
      0017D0 49 4D 4D 45 44 49 41  4041         .ascii     "IMMEDIATE"
             54 45
      0017D9                       4042 IMMED:
      0017D9 CD 04 3A         [ 4] 4043         CALL     DOLIT
      0017DC 80 00                 4044         .word     0x8000	;  IMEDD*256
      0017DE CD 06 CB         [ 4] 4045         CALL     LAST
      0017E1 CD 04 B8         [ 4] 4046         CALL     AT
      0017E4 CD 04 B8         [ 4] 4047         CALL     AT
      0017E7 CD 05 BF         [ 4] 4048         CALL     ORR
      0017EA CD 06 CB         [ 4] 4049         CALL     LAST
      0017ED CD 04 B8         [ 4] 4050         CALL     AT
      0017F0 CC 04 A1         [ 2] 4051         JP     STORE
                                   4052 
                                   4053 ;; Defining words
                                   4054 
                                   4055 ;       CREATE  ( -- ; <string> )
                                   4056 ;       Compile a new array
                                   4057 ;       without allocating space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0017F3 17 CF                 4058         .word      LINK
                           0017F5  4059 LINK = . 
      0017F5 06                    4060         .byte      6
      0017F6 43 52 45 41 54 45     4061         .ascii     "CREATE"
      0017FC                       4062 CREAT:
      0017FC CD 11 38         [ 4] 4063         CALL     TOKEN
      0017FF CD 16 71         [ 4] 4064         CALL     SNAME
      001802 CD 16 F2         [ 4] 4065         CALL     OVERT        
      001805 CD 14 C3         [ 4] 4066         CALL     COMPI 
      001808 06 0C                 4067         .word DOVAR 
      00180A 81               [ 4] 4068         RET
                                   4069 
                                   4070 ;       VARIABLE        ( -- ; <string> )
                                   4071 ;       Compile a new variable
                                   4072 ;       initialized to 0.
      00180B 17 F5                 4073         .word      LINK
                           00180D  4074 LINK = . 
      00180D 08                    4075         .byte      8
      00180E 56 41 52 49 41 42 4C  4076         .ascii     "VARIABLE"
             45
      001816                       4077 VARIA:
                                   4078 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001816 CD 0B AE         [ 4] 4079         CALL HERE
      001819 CD 05 5F         [ 4] 4080         CALL DUPP 
      00181C CD 0A 29         [ 4] 4081         CALL CELLP
      00181F CD 06 AD         [ 4] 4082         CALL VPP 
      001822 CD 04 A1         [ 4] 4083         CALL STORE
      001825 CD 17 FC         [ 4] 4084         CALL CREAT
      001828 CD 05 5F         [ 4] 4085         CALL DUPP
      00182B CD 14 7E         [ 4] 4086         CALL COMMA
      00182E CD 0A C0         [ 4] 4087         CALL ZERO
      001831 CD 05 6F         [ 4] 4088         call SWAPP 
      001834 CD 04 A1         [ 4] 4089         CALL STORE
      001837 CD 20 DB         [ 4] 4090         CALL FMOVE ; move definition to FLASH
      00183A CD 07 09         [ 4] 4091         CALL QDUP 
      00183D CD 04 6D         [ 4] 4092         CALL QBRAN 
      001840 18 49                 4093         .word SET_RAMLAST   
      001842 CD 1B B8         [ 4] 4094         call UPDATVP  ; don't update if variable kept in RAM.
      001845 CD 21 6F         [ 4] 4095         CALL UPDATPTR
      001848 81               [ 4] 4096         RET         
      001849                       4097 SET_RAMLAST: 
      001849 CD 06 CB         [ 4] 4098         CALL LAST 
      00184C CD 04 B8         [ 4] 4099         CALL AT 
      00184F CD 06 DE         [ 4] 4100         CALL RAMLAST 
      001852 CC 04 A1         [ 2] 4101         jp STORE  
                                   4102 
                                   4103 
                                   4104 ;       CONSTANT  ( n -- ; <string> )
                                   4105 ;       Compile a new constant 
                                   4106 ;       n CONSTANT name 
      001855 18 0D                 4107         .word LINK 
                           001857  4108         LINK=. 
      001857 08                    4109         .byte 8 
      001858 43 4F 4E 53 54 41 4E  4110         .ascii "CONSTANT" 
             54
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001860                       4111 CONSTANT:          
      001860 CD 11 38         [ 4] 4112         CALL TOKEN
      001863 CD 16 71         [ 4] 4113         CALL SNAME 
      001866 CD 16 F2         [ 4] 4114         CALL OVERT 
      001869 CD 14 C3         [ 4] 4115         CALL COMPI 
      00186C 18 8A                 4116         .word DOCONST
      00186E CD 14 7E         [ 4] 4117         CALL COMMA 
      001871 CD 20 DB         [ 4] 4118         CALL FMOVE
      001874 CD 07 09         [ 4] 4119         CALL QDUP 
      001877 CD 04 6D         [ 4] 4120         CALL QBRAN 
      00187A 18 49                 4121         .word SET_RAMLAST  
      00187C CD 21 6F         [ 4] 4122         CALL UPDATPTR  
      00187F 81               [ 4] 4123 1$:     RET          
                                   4124 
                                   4125 ; CONSTANT runtime semantic 
                                   4126 ; doCONST  ( -- n )
      001880 18 57                 4127         .word LINK 
                           001882  4128         LINK=.
      001882 07                    4129         .byte 7
      001883 44 4F 43 4F 4E 53 54  4130         .ascii "DOCONST"
      00188A                       4131 DOCONST:
      00188A 1D 00 02         [ 2] 4132         subw x,#CELLL
      00188D 90 85            [ 2] 4133         popw y 
      00188F 90 FE            [ 2] 4134         ldw y,(y) 
      001891 FF               [ 2] 4135         ldw (x),y 
      001892 81               [ 4] 4136         ret 
                                   4137 
                                   4138 ;----------------------------------
                                   4139 ; create double constant 
                                   4140 ; DCONST ( d -- ; <string> )
                                   4141 ;----------------------------------
      001893 18 82                 4142     .word LINK 
                           001895  4143     LINK=.
      001895 06                    4144     .byte 6 
      001896 44 43 4F 4E 53 54     4145     .ascii "DCONST"
      00189C                       4146 DCONST:
      00189C CD 11 38         [ 4] 4147         CALL TOKEN
      00189F CD 16 71         [ 4] 4148         CALL SNAME 
      0018A2 CD 16 F2         [ 4] 4149         CALL OVERT 
      0018A5 CD 14 C3         [ 4] 4150         CALL COMPI 
      0018A8 18 CB                 4151         .word DO_DCONST
      0018AA CD 14 7E         [ 4] 4152         CALL COMMA
      0018AD CD 14 7E         [ 4] 4153         CALL COMMA  
      0018B0 CD 20 DB         [ 4] 4154         CALL FMOVE
      0018B3 CD 07 09         [ 4] 4155         CALL QDUP 
      0018B6 CD 04 6D         [ 4] 4156         CALL QBRAN 
      0018B9 18 49                 4157         .word SET_RAMLAST  
      0018BB CD 21 6F         [ 4] 4158         CALL UPDATPTR  
      0018BE 81               [ 4] 4159 1$:     RET          
                                   4160     
                                   4161 ;----------------------------------
                                   4162 ; runtime for DCONST 
                                   4163 ; stack double constant 
                                   4164 ; DO-DCONST ( -- d )
                                   4165 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0018BF 18 95                 4166         .word LINK 
                           0018C1  4167         LINK=.
      0018C1 09                    4168         .byte 9 
      0018C2 44 4F 2D 44 43 4F 4E  4169         .ascii "DO-DCONST"
             53 54
      0018CB                       4170 DO_DCONST:
      0018CB 90 85            [ 2] 4171     popw y 
      0018CD 90 BF 24         [ 2] 4172     ldw YTEMP,y 
      0018D0 1D 00 04         [ 2] 4173     subw x,#2*CELLL 
      0018D3 90 FE            [ 2] 4174     ldw y,(y)
      0018D5 FF               [ 2] 4175     ldw (x),y 
      0018D6 90 BE 24         [ 2] 4176     ldw y,YTEMP 
      0018D9 90 EE 02         [ 2] 4177     ldw y,(2,y)
      0018DC EF 02            [ 2] 4178     ldw (2,x),y 
      0018DE 81               [ 4] 4179     ret 
                                   4180 
                                   4181 ;; Tools
                                   4182 
                                   4183 ;       _TYPE   ( b u -- )
                                   4184 ;       Display a string. Filter
                                   4185 ;       non-printing characters.
      0018DF 18 C1                 4186         .word      LINK
                           0018E1  4187 LINK = . 
      0018E1 05                    4188         .byte      5
      0018E2 5F 54 59 50 45        4189         .ascii     "_TYPE"
      0018E7                       4190 UTYPE:
      0018E7 CD 05 28         [ 4] 4191         CALL     TOR     ;start count down loop
      0018EA 20 0F            [ 2] 4192         JRA     UTYP2   ;skip first pass
      0018EC CD 05 5F         [ 4] 4193 UTYP1:  CALL     DUPP
      0018EF CD 04 D6         [ 4] 4194         CALL     CAT
      0018F2 CD 0A EA         [ 4] 4195         CALL     TCHAR
      0018F5 CD 04 24         [ 4] 4196         CALL     EMIT    ;display only printable
      0018F8 CD 0A 54         [ 4] 4197         CALL     ONEP    ;increment address
      0018FB CD 04 4E         [ 4] 4198 UTYP2:  CALL     DONXT
      0018FE 18 EC                 4199         .word      UTYP1   ;loop till done
      001900 CC 05 55         [ 2] 4200         JP     DROP
                                   4201 
                                   4202 ;       dm+     ( a u -- a )
                                   4203 ;       Dump u bytes from ,
                                   4204 ;       leaving a+u on  stack.
      001903 18 E1                 4205         .word      LINK
                           001905  4206 LINK = . 
      001905 03                    4207         .byte      3
      001906 64 6D 2B              4208         .ascii     "dm+"
      001909                       4209 DUMPP:
      001909 CD 05 89         [ 4] 4210         CALL     OVER
      00190C CD 04 3A         [ 4] 4211         CALL     DOLIT
      00190F 00 04                 4212         .word      4
      001911 CD 0F 8E         [ 4] 4213         CALL     UDOTR   ;display address
      001914 CD 0E DE         [ 4] 4214         CALL     SPACE
      001917 CD 05 28         [ 4] 4215         CALL     TOR     ;start count down loop
      00191A 20 11            [ 2] 4216         JRA     PDUM2   ;skip first pass
      00191C CD 05 5F         [ 4] 4217 PDUM1:  CALL     DUPP
      00191F CD 04 D6         [ 4] 4218         CALL     CAT
      001922 CD 04 3A         [ 4] 4219         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001925 00 03                 4220         .word      3
      001927 CD 0F 8E         [ 4] 4221         CALL     UDOTR   ;display numeric data
      00192A CD 0A 54         [ 4] 4222         CALL     ONEP    ;increment address
      00192D CD 04 4E         [ 4] 4223 PDUM2:  CALL     DONXT
      001930 19 1C                 4224         .word      PDUM1   ;loop till done
      001932 81               [ 4] 4225         RET
                                   4226 
                                   4227 ;       DUMP    ( a u -- )
                                   4228 ;       Dump u bytes from a,
                                   4229 ;       in a formatted manner.
      001933 19 05                 4230         .word      LINK
                           001935  4231 LINK = . 
      001935 04                    4232         .byte      4
      001936 44 55 4D 50           4233         .ascii     "DUMP"
      00193A                       4234 DUMP:
      00193A CD 06 1C         [ 4] 4235         CALL     BASE
      00193D CD 04 B8         [ 4] 4236         CALL     AT
      001940 CD 05 28         [ 4] 4237         CALL     TOR
      001943 CD 0D 66         [ 4] 4238         CALL     HEX     ;save radix, set hex
      001946 CD 04 3A         [ 4] 4239         CALL     DOLIT
      001949 00 10                 4240         .word      16
      00194B CD 09 7A         [ 4] 4241         CALL     SLASH   ;change count to lines
      00194E CD 05 28         [ 4] 4242         CALL     TOR     ;start count down loop
      001951 CD 0F 26         [ 4] 4243 DUMP1:  CALL     CR
      001954 CD 04 3A         [ 4] 4244         CALL     DOLIT
      001957 00 10                 4245         .word      16
      001959 CD 07 45         [ 4] 4246         CALL     DDUP
      00195C CD 19 09         [ 4] 4247         CALL     DUMPP   ;display numeric
      00195F CD 07 1A         [ 4] 4248         CALL     ROT
      001962 CD 07 1A         [ 4] 4249         CALL     ROT
      001965 CD 0E DE         [ 4] 4250         CALL     SPACE
      001968 CD 0E DE         [ 4] 4251         CALL     SPACE
      00196B CD 18 E7         [ 4] 4252         CALL     UTYPE   ;display printable characters
      00196E CD 04 4E         [ 4] 4253         CALL     DONXT
      001971 19 51                 4254         .word      DUMP1   ;loop till done
      001973 CD 05 55         [ 4] 4255 DUMP3:  CALL     DROP
      001976 CD 05 09         [ 4] 4256         CALL     RFROM
      001979 CD 06 1C         [ 4] 4257         CALL     BASE
      00197C CC 04 A1         [ 2] 4258         JP     STORE   ;restore radix
                                   4259 
                                   4260 ;       .S      ( ... -- ... )
                                   4261 ;        Display  contents of stack.
      00197F 19 35                 4262         .word      LINK
                           001981  4263 LINK = . 
      001981 02                    4264         .byte      2
      001982 2E 53                 4265         .ascii     ".S"
      001984                       4266 DOTS:
      001984 CD 0F 26         [ 4] 4267         CALL     CR
      001987 CD 0B 02         [ 4] 4268         CALL     DEPTH   ;stack depth
      00198A CD 05 28         [ 4] 4269         CALL     TOR     ;start count down loop
      00198D 20 09            [ 2] 4270         JRA     DOTS2   ;skip first pass
      00198F CD 05 1C         [ 4] 4271 DOTS1:  CALL     RAT
      001992 CD 0B 19         [ 4] 4272 	CALL     PICK
      001995 CD 0F C1         [ 4] 4273         CALL     DOT     ;index stack, display contents
      001998 CD 04 4E         [ 4] 4274 DOTS2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00199B 19 8F                 4275         .word      DOTS1   ;loop till done
      00199D CD 0F 65         [ 4] 4276         CALL     DOTQP
      0019A0 05                    4277         .byte      5
      0019A1 20 3C 73 70 20        4278         .ascii     " <sp "
      0019A6 81               [ 4] 4279         RET
                                   4280 
                                   4281 ;       >NAME   ( ca -- na | F )
                                   4282 ;       Convert code address
                                   4283 ;       to a name address.
      0019A7 19 81                 4284         .word      LINK
                           0019A9  4285 LINK = . 
      0019A9 05                    4286         .byte      5
      0019AA 3E 4E 41 4D 45        4287         .ascii     ">NAME"
      0019AF                       4288 TNAME:
      0019AF CD 06 9F         [ 4] 4289         CALL     CNTXT   ;vocabulary link
      0019B2 CD 04 B8         [ 4] 4290 TNAM2:  CALL     AT
      0019B5 CD 05 5F         [ 4] 4291         CALL     DUPP    ;?last word in a vocabulary
      0019B8 CD 04 6D         [ 4] 4292         CALL     QBRAN
      0019BB 19 D6                 4293         .word      TNAM4
      0019BD CD 07 45         [ 4] 4294         CALL     DDUP
      0019C0 CD 11 46         [ 4] 4295         CALL     NAMET
      0019C3 CD 05 D4         [ 4] 4296         CALL     XORR    ;compare
      0019C6 CD 04 6D         [ 4] 4297         CALL     QBRAN
      0019C9 19 D0                 4298         .word      TNAM3
      0019CB CD 0A 38         [ 4] 4299         CALL     CELLM   ;continue with next word
      0019CE 20 E2            [ 2] 4300         JRA     TNAM2
      0019D0 CD 05 6F         [ 4] 4301 TNAM3:  CALL     SWAPP
      0019D3 CC 05 55         [ 2] 4302         JP     DROP
      0019D6 CD 07 3A         [ 4] 4303 TNAM4:  CALL     DDROP
      0019D9 CC 0A C0         [ 2] 4304         JP     ZERO
                                   4305 
                                   4306 ;       .ID     ( na -- )
                                   4307 ;        Display  name at address.
      0019DC 19 A9                 4308         .word      LINK
                           0019DE  4309 LINK = . 
      0019DE 03                    4310         .byte      3
      0019DF 2E 49 44              4311         .ascii     ".ID"
      0019E2                       4312 DOTID:
      0019E2 CD 07 09         [ 4] 4313         CALL     QDUP    ;if zero no name
      0019E5 CD 04 6D         [ 4] 4314         CALL     QBRAN
      0019E8 19 F8                 4315         .word      DOTI1
      0019EA CD 0B 97         [ 4] 4316         CALL     COUNT
      0019ED CD 04 3A         [ 4] 4317         CALL     DOLIT
      0019F0 00 1F                 4318         .word      0x1F
      0019F2 CD 05 AB         [ 4] 4319         CALL     ANDD    ;mask lexicon bits
      0019F5 CC 18 E7         [ 2] 4320         JP     UTYPE
      0019F8 CD 0F 65         [ 4] 4321 DOTI1:  CALL     DOTQP
      0019FB 09                    4322         .byte      9
      0019FC 20 6E 6F 4E 61 6D 65  4323         .ascii     " noName"
      001A03 81               [ 4] 4324         RET
                                   4325 
                           000000  4326 WANT_SEE=0
                           000000  4327 .if WANT_SEE 
                                   4328 ;       SEE     ( -- ; <string> )
                                   4329 ;       A simple decompiler.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4330 ;       Updated for byte machines.
                                   4331         .word      LINK
                                   4332 LINK = . 
                                   4333         .byte      3
                                   4334         .ascii     "SEE"
                                   4335 SEE:
                                   4336         CALL     TICK    ;starting address
                                   4337         CALL     CR
                                   4338         CALL     ONEM
                                   4339 SEE1:   CALL     ONEP
                                   4340         CALL     DUPP
                                   4341         CALL     AT
                                   4342         CALL     DUPP
                                   4343         CALL     QBRAN
                                   4344         .word    SEE2
                                   4345         CALL     TNAME   ;?is it a name
                                   4346 SEE2:   CALL     QDUP    ;name address or zero
                                   4347         CALL     QBRAN
                                   4348         .word    SEE3
                                   4349         CALL     SPACE
                                   4350         CALL     DOTID   ;display name
                                   4351         CALL     ONEP
                                   4352         JRA      SEE4
                                   4353 SEE3:   CALL     DUPP
                                   4354         CALL     CAT
                                   4355         CALL     UDOT    ;display number
                                   4356 SEE4:   CALL     NUFQ    ;user control
                                   4357         CALL     QBRAN
                                   4358         .word    SEE1
                                   4359         JP     DROP
                                   4360 .endif ; WANT_SEE 
                                   4361 
                                   4362 ;       WORDS   ( -- )
                                   4363 ;       Display names in vocabulary.
      001A04 19 DE                 4364         .word      LINK
                           001A06  4365 LINK = . 
      001A06 05                    4366         .byte      5
      001A07 57 4F 52 44 53        4367         .ascii     "WORDS"
      001A0C                       4368 WORDS:
      001A0C CD 0F 26         [ 4] 4369         CALL     CR
      001A0F CD 06 9F         [ 4] 4370         CALL     CNTXT   ;only in context
      001A12 CD 04 B8         [ 4] 4371 WORS1:  CALL     AT
      001A15 CD 07 09         [ 4] 4372         CALL     QDUP    ;?at end of list
      001A18 CD 04 6D         [ 4] 4373         CALL     QBRAN
      001A1B 1A 2E                 4374         .word      WORS2
      001A1D CD 05 5F         [ 4] 4375         CALL     DUPP
      001A20 CD 0E DE         [ 4] 4376         CALL     SPACE
      001A23 CD 19 E2         [ 4] 4377         CALL     DOTID   ;display a name
      001A26 CD 0A 38         [ 4] 4378         CALL     CELLM
      001A29 CD 04 84         [ 4] 4379         CALL     BRAN
      001A2C 1A 12                 4380         .word      WORS1
      001A2E 81               [ 4] 4381 WORS2:  RET
                                   4382 
                                   4383         
                                   4384 ;; Hardware reset
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4385 
                                   4386 ;       hi      ( -- )
                                   4387 ;       Display sign-on message.
      001A2F 1A 06                 4388         .word      LINK
                           001A31  4389 LINK = . 
      001A31 02                    4390         .byte      2
      001A32 68 69                 4391         .ascii     "hi"
      001A34                       4392 HI:
      001A34 CD 0F 26         [ 4] 4393         CALL     CR
      001A37 CD 0F 65         [ 4] 4394         CALL     DOTQP   ;initialize I/O
      001A3A 0F                    4395         .byte      15
      001A3B 73 74 6D 38 65 46 6F  4396         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A47 33                    4397 	.byte      VER+'0'
      001A48 2E                    4398         .byte      '.' 
      001A49 30                    4399 	.byte      EXT+'0' ;version
      001A4A CD 0F 65         [ 4] 4400         CALL    DOTQP
                           000000  4401 .if NUCLEO          
                                   4402         .byte 18
                                   4403         .ascii  " on NUCLEO-8S208RB"
                                   4404 .endif
                           000000  4405 .if DISCOVERY
                                   4406         .byte 19
                                   4407         .ascii  " on STM8S-DISCOVERY"
                                   4408 .endif
                           000001  4409 .if DOORBELL
      001A4D 10                    4410         .byte 16
      001A4E 20 6F 6E 20 73 74 6D  4411         .ascii " on stm8s105k6b6"
             38 73 31 30 35 6B 36
             62 36
                                   4412 .endif
      001A5E CC 0F 26         [ 2] 4413         JP     CR
                                   4414 
                           000000  4415 WANT_DEBUG=0
                           000000  4416 .if WANT_DEBUG 
                                   4417 ;       DEBUG      ( -- )
                                   4418 ;       Display sign-on message.
                                   4419 ;        .word      LINK
                                   4420 LINK = . 
                                   4421         .byte      5
                                   4422         .ascii     "DEBUG"
                                   4423 DEBUG:
                                   4424 	CALL DOLIT
                                   4425 	.word 0x65
                                   4426 	CALL EMIT
                                   4427 	CALL DOLIT
                                   4428 	.word 0
                                   4429  	CALL ZLESS 
                                   4430 	CALL DOLIT
                                   4431 	.word 0xFFFE
                                   4432 	CALL ZLESS 
                                   4433 	CALL UPLUS 
                                   4434  	CALL DROP 
                                   4435 	CALL DOLIT
                                   4436 	.word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437 	CALL UPLUS 
                                   4438 	CALL UPLUS 
                                   4439  	CALL DROP
                                   4440 	CALL DOLIT
                                   4441 	.word 0x43
                                   4442 	CALL UPLUS 
                                   4443  	CALL DROP
                                   4444 	CALL EMIT
                                   4445 	CALL DOLIT
                                   4446 	.word 0x4F
                                   4447 	CALL DOLIT
                                   4448 	.word 0x6F
                                   4449  	CALL XORR
                                   4450 	CALL DOLIT
                                   4451 	.word 0xF0
                                   4452  	CALL ANDD
                                   4453 	CALL DOLIT
                                   4454 	.word 0x4F
                                   4455  	CALL ORR
                                   4456 	CALL EMIT
                                   4457 	CALL DOLIT
                                   4458 	.word 8
                                   4459 	CALL DOLIT
                                   4460 	.word 6
                                   4461  	CALL SWAPP
                                   4462 	CALL OVER
                                   4463 	CALL XORR
                                   4464 	CALL DOLIT
                                   4465 	.word 3
                                   4466 	CALL ANDD 
                                   4467 	CALL ANDD
                                   4468 	CALL DOLIT
                                   4469 	.word 0x70
                                   4470 	CALL UPLUS 
                                   4471 	CALL DROP
                                   4472 	CALL EMIT
                                   4473 	CALL DOLIT
                                   4474 	.word 0
                                   4475 	CALL QBRAN
                                   4476 	.word DEBUG1
                                   4477 	CALL DOLIT
                                   4478 	.word 0x3F
                                   4479 DEBUG1:
                                   4480 	CALL DOLIT
                                   4481 	.word 0xFFFF
                                   4482 	CALL QBRAN
                                   4483 	.word DEBUG2
                                   4484 	CALL DOLIT
                                   4485 	.word 0x74
                                   4486 	CALL BRAN
                                   4487 	.word DEBUG3
                                   4488 DEBUG2:
                                   4489 	CALL DOLIT
                                   4490 	.word 0x21
                                   4491 DEBUG3:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4492 	CALL EMIT
                                   4493 	CALL DOLIT
                                   4494 	.word 0x68
                                   4495 	CALL DOLIT
                                   4496 	.word 0x80
                                   4497 	CALL STORE
                                   4498 	CALL DOLIT
                                   4499 	.word 0x80
                                   4500 	CALL AT
                                   4501 	CALL EMIT
                                   4502 	CALL DOLIT
                                   4503 	.word 0x4D
                                   4504 	CALL TOR
                                   4505 	CALL RAT
                                   4506 	CALL RFROM
                                   4507 	CALL ANDD
                                   4508 	CALL EMIT
                                   4509 	CALL DOLIT
                                   4510 	.word 0x61
                                   4511 	CALL DOLIT
                                   4512 	.word 0xA
                                   4513 	CALL TOR
                                   4514 DEBUG4:
                                   4515 	CALL DOLIT
                                   4516 	.word 1
                                   4517 	CALL UPLUS 
                                   4518 	CALL DROP
                                   4519 	CALL DONXT
                                   4520 	.word DEBUG4
                                   4521 	CALL EMIT
                                   4522 	CALL DOLIT
                                   4523 	.word 0x656D
                                   4524 	CALL DOLIT
                                   4525 	.word 0x100
                                   4526 	CALL UMSTA
                                   4527 	CALL SWAPP
                                   4528 	CALL DOLIT
                                   4529 	.word 0x100
                                   4530 	CALL UMSTA
                                   4531 	CALL SWAPP 
                                   4532 	CALL DROP
                                   4533 	CALL EMIT
                                   4534 	CALL EMIT
                                   4535 	CALL DOLIT
                                   4536 	.word 0x2043
                                   4537 	CALL DOLIT
                                   4538 	.word 0
                                   4539 	CALL DOLIT
                                   4540 	.word 0x100
                                   4541 	CALL UMMOD
                                   4542 	CALL EMIT
                                   4543 	CALL EMIT
                                   4544 	;JP ORIG
                                   4545 	RET
                                   4546 .endif ; WANT_DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 
                                   4548 
                                   4549 ;       'BOOT   ( -- a )
                                   4550 ;       The application startup vector.
      001A61 1A 31                 4551         .word      LINK
                           001A63  4552 LINK = . 
      001A63 05                    4553         .byte      5
      001A64 27 42 4F 4F 54        4554         .ascii     "'BOOT"
      001A69                       4555 TBOOT:
      001A69 CD 06 0C         [ 4] 4556         CALL     DOVAR
      001A6C 40 02                 4557         .word    APP_RUN      ;application to boot
                                   4558 
                                   4559 ;       COLD    ( -- )
                                   4560 ;       The hilevel cold start s=ence.
      001A6E 1A 63                 4561         .word      LINK
                           001A70  4562         LINK = . 
      001A70 04                    4563         .byte      4
      001A71 43 4F 4C 44           4564         .ascii     "COLD"
      001A75                       4565 COLD:
                           000000  4566 .if WANT_DEBUG
                                   4567         CALL DEBUG
                                   4568 .endif ; WANT_DEBUG
      001A75 CD 04 3A         [ 4] 4569 COLD1:  CALL     DOLIT
      001A78 00 2B                 4570         .word      UZERO
      001A7A CD 04 3A         [ 4] 4571 	CALL     DOLIT
      001A7D 00 06                 4572         .word      UPP
      001A7F CD 04 3A         [ 4] 4573         CALL     DOLIT
      001A82 00 1A                 4574 	.word      UEND-UZERO
      001A84 CD 0B FB         [ 4] 4575         CALL     CMOVE   ;initialize user area
                                   4576 
                                   4577 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A87 90 CE 40 02      [ 2] 4578         ldw y,APP_RUN 
      001A8B 26 0B            [ 1] 4579         jrne 0$
      001A8D 1D 00 02         [ 2] 4580         subw x,#CELLL 
      001A90 90 AE 1A 34      [ 2] 4581         ldw y,#HI  
      001A94 FF               [ 2] 4582         ldw (x),y
      001A95 CD 1B 90         [ 4] 4583         call UPDATRUN 
      001A98                       4584 0$:        
                                   4585 ; update LAST with APP_LAST 
                                   4586 ; if APP_LAST > LAST else do the opposite
      001A98 90 CE 40 00      [ 2] 4587         ldw y,APP_LAST 
      001A9C 90 B3 1A         [ 2] 4588         cpw y,ULAST 
      001A9F 22 05            [ 1] 4589         jrugt 1$ 
                                   4590 ; save LAST at APP_LAST  
      001AA1 CD 1B 78         [ 4] 4591         call UPDATLAST 
      001AA4 20 06            [ 2] 4592         jra 2$
      001AA6                       4593 1$: ; update LAST with APP_LAST 
      001AA6 90 BF 1A         [ 2] 4594         ldw ULAST,y
      001AA9 90 BF 14         [ 2] 4595         ldw UCNTXT,y
      001AAC                       4596 2$:  
                                   4597 ; update APP_CP if < app_space 
      001AAC 90 CE 40 04      [ 2] 4598         ldw y,APP_CP  
      001AB0 90 B3 18         [ 2] 4599         cpw y,UCP   
      001AB3 24 06            [ 1] 4600         jruge 3$ 
      001AB5 CD 1B A1         [ 4] 4601         call UPDATCP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001AB8 90 BE 18         [ 2] 4602         ldw y,UCP   
      001ABB                       4603 3$:
      001ABB 90 BF 18         [ 2] 4604         ldw UCP,y                 
                                   4605 ; update UVP with APP_VP  
                                   4606 ; if APP_VP>UVP else do the opposite 
      001ABE 90 CE 40 06      [ 2] 4607         ldw y,APP_VP 
      001AC2 90 B3 16         [ 2] 4608         cpw y,UVP 
      001AC5 22 05            [ 1] 4609         jrugt 4$
      001AC7 CD 1B B8         [ 4] 4610         call UPDATVP 
      001ACA 20 03            [ 2] 4611         jra 6$
      001ACC                       4612 4$: ; update UVP with APP_VP 
      001ACC 90 BF 16         [ 2] 4613         ldw UVP,y 
      001ACF                       4614 6$:      
      001ACF CD 14 29         [ 4] 4615         CALL     PRESE   ;initialize data stack and TIB
      001AD2 CD 1A 69         [ 4] 4616         CALL     TBOOT
      001AD5 CD 0B E4         [ 4] 4617         CALL     ATEXE   ;application boot
      001AD8 CD 16 F2         [ 4] 4618         CALL     OVERT
      001ADB CC 14 46         [ 2] 4619         JP     QUIT    ;start interpretation
                                   4620 
                                   4621 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4622         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001ADE 1A 70                   30     .word LINK 
                           001AE0    31     LINK=.
      001AE0 03                      32     .byte 3 
      001AE1 46 50 21                33     .ascii "FP!"
      001AE4                         34 FPSTOR:
      001AE4 90 93            [ 1]   35     ldw y,x
      001AE6 90 FE            [ 2]   36     ldw y,(y)
      001AE8 90 9F            [ 1]   37     ld a,yl 
      001AEA B7 32            [ 1]   38     ld FPTR,a 
      001AEC 1C 00 02         [ 2]   39     addw x,#CELLL 
      001AEF 90 93            [ 1]   40     ldw y,x 
      001AF1 90 FE            [ 2]   41     ldw y,(y)
      001AF3 90 BF 33         [ 2]   42     ldw PTR16,y
      001AF6 1C 00 02         [ 2]   43     addw x,#CELLL 
      001AF9 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001AFA 1A E0                   51     .word LINK 
                           001AFC    52 LINK=.
      001AFC 06                      53     .byte 6 
      001AFD 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B03                         55 EEPROM: 
      001B03 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B07 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B0A EF 02            [ 2]   58     ldw (2,x),y 
      001B0C 90 5F            [ 1]   59     clrw y 
      001B0E FF               [ 2]   60     ldw (x),y 
      001B0F 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B10 1A FC                   67 	.word LINK 
                           001B12    68 	LINK=.
      001B12 08                      69 	.byte 8 
      001B13 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B1B                         71 EEPLAST:
      001B1B 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B1E 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B22 EF 02            [ 2]   74 	ldw (2,x),y 
      001B24 90 5F            [ 1]   75 	clrw y 
      001B26 FF               [ 2]   76 	ldw (x),y 
      001B27 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B28 1B 12                   83 	.word LINK 
                           001B2A    84 	LINK=.
      001B2A 07                      85 	.byte 7
      001B2B 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B32                         87 EEPRUN:
      001B32 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B35 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B39 EF 02            [ 2]   90 	ldw (2,x),y 
      001B3B 90 5F            [ 1]   91 	clrw y 
      001B3D FF               [ 2]   92 	ldw (x),y 
      001B3E 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B3F 1B 2A                   99 	.word LINK
                           001B41   100 	LINK=.
      001B41 06                     101 	.byte 6 
      001B42 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B48                        103 EEPCP:
      001B48 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B4B 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B4F EF 02            [ 2]  106 	ldw (2,x),y 
      001B51 90 5F            [ 1]  107 	clrw y 
      001B53 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B54 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B55 1B 41                  115 	.word LINK
                           001B57   116 	LINK=.
      001B57 06                     117 	.byte 6
      001B58 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B5E                        119 EEPVP:
      001B5E 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B61 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B65 EF 02            [ 2]  122 	ldw (2,x),y 
      001B67 90 5F            [ 1]  123 	clrw y 
      001B69 FF               [ 2]  124 	ldw (x),y 
      001B6A 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B6B 1B 57                  131 	.word LINK 
                           001B6D   132 	LINK=.
      001B6D 0A                     133 	.byte 10
      001B6E 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B78                        135 UPDATLAST:
      001B78 CD 06 CB         [ 4]  136 	call LAST
      001B7B CD 04 B8         [ 4]  137 	call AT  
      001B7E CD 1B 1B         [ 4]  138 	call EEPLAST
      001B81 CC 1D 4B         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B84 1B 6D                  145 	.word LINK
                           001B86   146 	LINK=.
      001B86 09                     147 	.byte 9
      001B87 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B90                        149 UPDATRUN:
      001B90 CD 1B 32         [ 4]  150 	call EEPRUN
      001B93 CC 1D 4B         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B96 1B 86                  157 	.word LINK 
                           001B98   158 	LINK=.
      001B98 08                     159 	.byte 8 
      001B99 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001BA1                        161 UPDATCP:
      001BA1 CD 06 BB         [ 4]  162 	call CPP 
      001BA4 CD 04 B8         [ 4]  163 	call AT 
      001BA7 CD 1B 48         [ 4]  164 	call EEPCP 
      001BAA CC 1D 4B         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BAD 1B 98                  171 	.word LINK
                           001BAF   172 	LINK=.
      001BAF 08                     173 	.byte 8 
      001BB0 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BB8                        175 UPDATVP:
      001BB8 CD 06 AD         [ 4]  176 	call VPP 
      001BBB CD 04 B8         [ 4]  177 	call AT
      001BBE CD 1B 5E         [ 4]  178 	call EEPVP 
      001BC1 CC 1D 4B         [ 2]  179 	jp EESTORE
                                    180 	
                           000000   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
                                    186     .word LINK 
                                    187 LINK=.
                                    188     .byte 2
                                    189     .ascii "F@"
                                    190 FARAT:
                                    191     call FPSTOR
                                    192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
                                    199     .word LINK
                                    200     LINK=.
                                    201     .byte 3 
                                    202     .ascii "FC@" 
                                    203 FARCAT:
                                    204     call FPSTOR
                                    205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001BC4 1B AF                  213     .word LINK 
                           001BC6   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BC6 06                     215     .byte 6 
      001BC7 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001BCD                        217 UNLKEE:
      001BCD 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001BD1 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001BD5 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BD9 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BDD 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BE2 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001BE3 1B C6                  230     .word LINK 
                           001BE5   231 LINK=. 
      001BE5 06                     232     .byte 6 
      001BE6 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001BEC                        234 UNLKFL:
      001BEC 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001BF0 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001BF4 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BF8 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BFC 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C01 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C02 1B E5                  247 	.word LINK 
                           001C04   248 	LINK=.
      001C04 06                     249 	.byte 6
      001C05 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C0B                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C0B 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C0E 3D 32            [ 1]  255 	tnz FPTR 
      001C10 26 16            [ 1]  256 	jrne 4$
      001C12 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C16 24 10            [ 1]  258     jruge 4$
      001C18 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C1C 25 0D            [ 1]  260     jrult 9$
      001C1E 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C22 22 07            [ 1]  262 	jrugt 9$
      001C24 CD 1B CD         [ 4]  263 	call UNLKEE
      001C27 81               [ 4]  264 	ret 
      001C28 CD 1B EC         [ 4]  265 4$: call UNLKFL
      001C2B 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C2C 1C 04                  273 	.word LINK 
                           001C2E   274 	LINK=.
      001C2E 04                     275 	.byte 4 
      001C2F 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C33                        277 LOCK: 
      001C33 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C37 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C3B 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C3C 1C 2E                  286 	.word LINK 
                           001C3E   287 	LINK=. 
      001C3E 08                     288 	.byte 8 
      001C3F 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C47                        290 INC_FPTR:
      001C47 3C 34            [ 1]  291 	inc PTR8 
      001C49 26 0C            [ 1]  292 	jrne 1$
      001C4B 90 89            [ 2]  293 	pushw y 
      001C4D 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001C50 90 5C            [ 1]  295 	incw y 
      001C52 90 BF 32         [ 2]  296 	ldw FPTR,y
      001C55 90 85            [ 2]  297 	popw y  
      001C57 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C58 1C 3E                  304 	.word LINK 
                           001C5A   305 	LINK=.
      001C5A 04                     306 	.byte 4 
      001C5B 50 54 52 2B            307 	.ascii "PTR+"
      001C5F                        308 PTRPLUS:
      001C5F 90 93            [ 1]  309 	ldw y,x 
      001C61 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001C64 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001C68 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001C6B 24 02            [ 1]  313 	jrnc 1$
      001C6D 3C 32            [ 1]  314 	inc FPTR 
      001C6F 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C70 1C 5A                  322 	.word LINK 
                           001C72   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C72 07                     324 	.byte 7 
      001C73 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001C7A                        326 EE_READ:
      001C7A 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001C7D 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001C81 90 95            [ 1]  329 	ld yh,a 
      001C83 CD 1C 47         [ 4]  330 	call INC_FPTR 
      001C86 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001C8A CD 1C 47         [ 4]  332 	call INC_FPTR 
      001C8D 90 97            [ 1]  333 	ld yl,a 
      001C8F FF               [ 2]  334 	ldw (x),y 
      001C90 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001C91 1C 72                  341 	.word LINK 
                           001C93   342 	LINK=.
      001C93 08                     343 	.byte 8
      001C94 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001C9C                        345 EE_CREAD:
      001C9C 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001C9F 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001CA3 CD 1C 47         [ 4]  348 	call INC_FPTR
      001CA6 90 5F            [ 1]  349 	clrw y 
      001CA8 90 97            [ 1]  350 	ld yl,a 
      001CAA FF               [ 2]  351 	ldw (x),y 
      001CAB 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CAC 1C 93                  361 	.word LINK 
                           001CAE   362 	LINK=. 
      001CAE 07                     363 	.byte 7 
      001CAF 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CB6                        366 WR_BYTE:
      001CB6 90 93            [ 1]  367 	ldw y,x 
      001CB8 90 FE            [ 2]  368 	ldw y,(y)
      001CBA 1C 00 02         [ 2]  369 	addw x,#CELLL 
      001CBD 90 9F            [ 1]  370 	ld a,yl
      001CBF 92 BD 00 32      [ 4]  371 	ldf [FPTR],a
      001CC3 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CC8 CC 1C 47         [ 2]  373 	jp INC_FPTR 
                                    374 
                                    375 ;---------------------------------------
                                    376 ; write a word at address pointed 
                                    377 ; by FPTR and increment FPTR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    378 ; Expect pointer already initialzed 
                                    379 ; and memory unlocked 
                                    380 ; WR-WORD ( w -- )
                                    381 ;---------------------------------------
      001CCB 1C AE                  382 	.word LINK 
                           001CCD   383 	LINK=.
      001CCD 07                     384 	.byte 7 
      001CCE 57 52 2D 57 4F 52 44   385 	.ascii "WR-WORD" 
      001CD5                        386 WR_WORD:
      001CD5 90 93            [ 1]  387 	ldw y,x
      001CD7 90 FE            [ 2]  388 	ldw y,(y)
      001CD9 1C 00 02         [ 2]  389 	addw x,#CELLL 
      001CDC 90 9E            [ 1]  390 	ld a,yh 
      001CDE 92 BD 00 32      [ 4]  391 	ldf [FPTR],a
      001CE2 72 05 50 5F FB   [ 2]  392 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CE7 CD 1C 47         [ 4]  393 	call INC_FPTR 
      001CEA 90 9F            [ 1]  394 	ld a,yl 
      001CEC 92 BD 00 32      [ 4]  395 	ldf [FPTR],a
      001CF0 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF5 CC 1C 47         [ 2]  397 	jp INC_FPTR 
                                    398 
                                    399 
                                    400 ;---------------------------------------
                                    401 ; write a byte to FLASH or EEPROM/OPTION  
                                    402 ; EEC!  (c ud -- )
                                    403 ;---------------------------------------
      001CF8 1C CD                  404     .word LINK 
                           001CFA   405 	LINK=.
      001CFA 04                     406     .byte 4 
      001CFB 45 45 43 21            407     .ascii "EEC!"
                                    408 	; local variables 
                           000001   409 	BTW = 1   ; byte to write offset on stack
                           000002   410     OPT = 2 
                           000002   411 	VSIZE = 2
      001CFF                        412 EECSTORE:
      001CFF 52 02            [ 2]  413 	sub sp,#VSIZE
      001D01 CD 1A E4         [ 4]  414     call FPSTOR
      001D04 E6 01            [ 1]  415 	ld a,(1,x)
      001D06 43               [ 1]  416 	cpl a 
      001D07 6B 01            [ 1]  417 	ld (BTW,sp),a ; byte to write 
      001D09 0F 02            [ 1]  418 	clr (OPT,sp)  ; OPTION flag
      001D0B CD 1C 0B         [ 4]  419 	call UNLOCK 
                                    420 	; check if option
      001D0E 3D 32            [ 1]  421 	tnz FPTR 
      001D10 26 19            [ 1]  422 	jrne 2$
      001D12 90 BE 33         [ 2]  423 	ldw y,PTR16 
      001D15 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      001D19 2B 10            [ 1]  425 	jrmi 2$
      001D1B 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      001D1F 2A 0A            [ 1]  427 	jrpl 2$
      001D21 03 02            [ 1]  428 	cpl (OPT,sp)
                                    429 	; OPTION WRITE require this UNLOCK 
      001D23 72 1E 50 5B      [ 1]  430     bset FLASH_CR2,#FLASH_CR2_OPT
      001D27 72 1F 50 5C      [ 1]  431     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D2B                        432 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D2B CD 1C B6         [ 4]  433 	call WR_BYTE 	
      001D2E 0D 02            [ 1]  434 	tnz (OPT,sp)
      001D30 27 0D            [ 1]  435 	jreq 3$ 
      001D32 7B 01            [ 1]  436     ld a,(BTW,sp)
      001D34 90 5F            [ 1]  437     clrw y
      001D36 90 97            [ 1]  438 	ld yl,a 
      001D38 1D 00 02         [ 2]  439 	subw x,#CELLL 
      001D3B FF               [ 2]  440 	ldw (x),y 
      001D3C CD 1C B6         [ 4]  441 	call WR_BYTE
      001D3F                        442 3$: 
      001D3F CD 1C 33         [ 4]  443 	call LOCK 
      001D42 5B 02            [ 2]  444 	addw sp,#VSIZE 
      001D44 81               [ 4]  445     ret
                                    446 
                                    447 ;------------------------------
                                    448 ; write integer in FLASH|EEPROM
                                    449 ; EE! ( n ud -- )
                                    450 ;------------------------------
      001D45 1C FA                  451 	.word LINK 
                           001D47   452 	LINK=.
      001D47 03                     453 	.byte 3 
      001D48 45 45 21               454 	.ascii "EE!"
      001D4B                        455 EESTORE:
      001D4B CD 1A E4         [ 4]  456 	call FPSTOR 
      001D4E CD 1C 0B         [ 4]  457 	call UNLOCK 
      001D51 90 93            [ 1]  458 	ldw y,x 
      001D53 90 FE            [ 2]  459 	ldw y,(y)
      001D55 90 89            [ 2]  460 	pushw y 
      001D57 90 5E            [ 1]  461 	swapw y 
      001D59 FF               [ 2]  462 	ldw (x),y 
      001D5A CD 1C B6         [ 4]  463 	call WR_BYTE 
      001D5D 90 85            [ 2]  464 	popw y 
      001D5F 1D 00 02         [ 2]  465 	subw x,#CELLL
      001D62 FF               [ 2]  466 	ldw (x),y 
      001D63 CD 1C B6         [ 4]  467 	call WR_BYTE
      001D66 CC 1C 33         [ 2]  468 	jp LOCK 
                                    469 
                                    470 
                                    471 ;----------------------------
                                    472 ; Erase flash memory row 
                                    473 ; stm8s208 as 128 bytes rows
                                    474 ; ROW-ERASE ( ud -- )
                                    475 ;----------------------------
      001D69 1D 47                  476 	.word LINK 
                           001D6B   477 	LINK=. 
      001D6B 09                     478 	.byte 9 
      001D6C 52 4F 57 2D 45 52 41   479 	.ascii "ROW-ERASE" 
             53 45
      001D75                        480 row_erase:
      001D75 CD 1A E4         [ 4]  481 	call FPSTOR
                                    482 ;code must be execute from RAM 
                                    483 ;copy routine to PAD 
      001D78 1D 00 02         [ 2]  484 	subw x,#CELLL 
      001D7B 90 AE 1D C2      [ 2]  485 	ldw y,#row_erase_proc
      001D7F FF               [ 2]  486 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D80 CD 0B BF         [ 4]  487 	call PAD 
      001D83 90 AE 1D E9      [ 2]  488 	ldw y,#row_erase_proc_end 
      001D87 72 A2 1D C2      [ 2]  489 	subw y,#row_erase_proc
      001D8B 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001D8E FF               [ 2]  491 	ldw (x),y 
      001D8F CD 0B FB         [ 4]  492 	call CMOVE 
      001D92                        493 block_erase:
      001D92 90 BE 33         [ 2]  494 	ldw y,FPTR+1
      001D95 90 A3 23 80      [ 2]  495 	cpw y,#app_space 
      001D99 2A 13            [ 1]  496 	jrpl erase_flash 
                                    497 ; erase EEPROM block
      001D9B 90 A3 40 00      [ 2]  498 	cpw y,#EEPROM_BASE 
      001D9F 24 01            [ 1]  499 	jruge 1$
      001DA1 81               [ 4]  500 	ret ; bad address 
      001DA2 90 A3 43 FF      [ 2]  501 1$: cpw y,#EEPROM_END 
      001DA6 23 01            [ 2]  502 	jrule 2$ 
      001DA8 81               [ 4]  503 	ret ; bad address 
      001DA9                        504 2$:	
      001DA9 CD 1B CD         [ 4]  505 	call UNLKEE 
      001DAC 20 03            [ 2]  506 	jra proceed_erase
                                    507 ; erase flash block:
      001DAE                        508 erase_flash:
      001DAE CD 1B EC         [ 4]  509 	call UNLKFL 
      001DB1                        510 proceed_erase:
      001DB1 CD 0B BF         [ 4]  511 	call PAD 
      001DB4 90 93            [ 1]  512 	ldw y,x
      001DB6 90 FE            [ 2]  513 	ldw y,(y)
      001DB8 1C 00 02         [ 2]  514 	addw x,#CELLL  
      001DBB 90 FD            [ 4]  515 	call (y) 
      001DBD 72 17 50 5F      [ 1]  516 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DC1 81               [ 4]  517 	ret 
                                    518 
                                    519 ; this routine is to be copied to PAD 
      001DC2                        520 row_erase_proc:
      001DC2 35 20 50 5B      [ 1]  521 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001DC6 35 DF 50 5C      [ 1]  522 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001DCA 4F               [ 1]  523 	clr a 
      001DCB 90 5F            [ 1]  524 	clrw y 
      001DCD 91 A7 00 32      [ 1]  525 	ldf ([FPTR],y),a
      001DD1 90 5C            [ 1]  526     incw y
      001DD3 91 A7 00 32      [ 1]  527 	ldf ([FPTR],y),a
      001DD7 90 5C            [ 1]  528     incw y
      001DD9 91 A7 00 32      [ 1]  529 	ldf ([FPTR],y),a
      001DDD 90 5C            [ 1]  530     incw y
      001DDF 91 A7 00 32      [ 1]  531 	ldf ([FPTR],y),a
      001DE3 72 05 50 5F FB   [ 2]  532 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001DE8 81               [ 4]  533 	ret
      001DE9                        534 row_erase_proc_end:
                                    535 
                                    536 
                                    537 ;-----------------------------------
                                    538 ; block programming must be 
                                    539 ; executed from RAM 
                                    540 ; initial contidions: 
                                    541 ; 		memory unlocked
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    542 ;       FPTR initialized 
                                    543 ; input: 
                                    544 ;    x   buffer address 
                                    545 ;-----------------------------------
                           000001   546 	BCNT=1 
      001DE9                        547 copy_buffer:
      001DE9 4B 80            [ 1]  548 	push #BLOCK_SIZE  
                                    549 ;enable block programming 
      001DEB 72 10 50 5B      [ 1]  550 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001DEF 72 11 50 5C      [ 1]  551 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001DF3 90 5F            [ 1]  552 	clrw y
      001DF5 F6               [ 1]  553 1$:	ld a,(x)
      001DF6 91 A7 00 32      [ 1]  554 	ldf ([FPTR],y),a
      001DFA 5C               [ 1]  555 	incw x 
      001DFB 90 5C            [ 1]  556 	incw y 
      001DFD 0A 01            [ 1]  557 	dec (BCNT,sp)
      001DFF 26 F4            [ 1]  558 	jrne 1$
                                    559 ; wait EOP bit 
      001E01 72 05 50 5F FB   [ 2]  560 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E06 84               [ 1]  561 	pop a ; remove BCNT from stack 
      001E07 81               [ 4]  562 	ret 
      001E08                        563 copy_buffer_end:
                                    564 
                                    565 ;-------------------------
                                    566 ; move program_row to RAM 
                                    567 ; in TIB 
                                    568 ;------------------------
      001E08                        569 copy_prog_to_ram:
      001E08 1D 00 06         [ 2]  570 	subw x,#6
      001E0B 90 AE 1D E9      [ 2]  571 	ldw y,#copy_buffer 
      001E0F EF 04            [ 2]  572 	ldw (4,x),y 
      001E11 90 AE 07 00      [ 2]  573 	ldw y,#TIBBASE
      001E15 EF 02            [ 2]  574 	ldw (2,x),y 
      001E17 90 AE 1E 08      [ 2]  575 	ldw y,#copy_buffer_end 
      001E1B 72 A2 1D E9      [ 2]  576 	subw y,#copy_buffer  
      001E1F FF               [ 2]  577 	ldw (x),y 
      001E20 CD 0B FB         [ 4]  578 	call CMOVE 
      001E23 81               [ 4]  579 	ret 
                                    580 
                                    581 
                                    582 ;-----------------------------
                                    583 ; write a row in FLASH/EEPROM 
                                    584 ; WR-ROW ( a ud -- )
                                    585 ; a -> address 128 byte buffer to write 
                                    586 ; ud ->  row address in FLASH|EEPROM 
                                    587 ;-----------------------------
      001E24 1D 6B                  588 	.word LINK 
                           001E26   589 	LINK=.
      001E26 06                     590 	.byte 6 
      001E27 57 52 2D 52 4F 57      591 	.ascii "WR-ROW"
      001E2D                        592 write_row:
      001E2D CD 1A E4         [ 4]  593 	call FPSTOR
                                    594 ; align to FLASH block 
      001E30 A6 80            [ 1]  595 	ld a,#0x80 
      001E32 B4 34            [ 1]  596 	and a,PTR8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E34 B7 34            [ 1]  597 	ld PTR8,a  
      001E36 CD 1E 08         [ 4]  598 	call copy_prog_to_ram
      001E39 CD 1C 0B         [ 4]  599 	call UNLOCK
      001E3C 90 93            [ 1]  600 	ldw y,x 
      001E3E 90 FE            [ 2]  601 	ldw y,(y)
      001E40 1C 00 02         [ 2]  602 	addw x,#CELLL 
      001E43 89               [ 2]  603 	pushw x 
      001E44 93               [ 1]  604 	ldw x,y ; buffer address in x 
      001E45 CD 07 00         [ 4]  605 	call TIBBASE
      001E48 CD 1C 33         [ 4]  606 	call LOCK
      001E4B 85               [ 2]  607 	popw x 
      001E4C 81               [ 4]  608 	ret 
                                    609 
                                    610 ;-------------------------------------
                                    611 ; change value of OPTION register 
                                    612 ; SET-OPT (c n -- ) 
                                    613 ; c new value.
                                    614 ; n OPT  number {1..7}
                                    615 ;--------------------------------------
      001E4D 1E 26                  616 		.word LINK 
                           001E4F   617 		LINK=.
      001E4F 07                     618 		.byte 7 
      001E50 53 45 54 2D 4F 50 54   619 		.ascii "SET-OPT" 
      001E57                        620 set_option: 
      001E57 90 93            [ 1]  621 		ldw y,x 
      001E59 90 FE            [ 2]  622 		ldw y,(y)
      001E5B 27 06            [ 1]  623 		jreq 1$
      001E5D 90 A3 00 07      [ 2]  624 		cpw y,#7 
      001E61 23 04            [ 2]  625 		jrule 2$ 
                                    626 ; invalid OPTION number 		
      001E63 1C 00 04         [ 2]  627 1$:		addw x,#2*CELLL
      001E66 81               [ 4]  628 		ret
      001E67 90 58            [ 2]  629 2$:		sllw y 
      001E69 72 A9 47 FF      [ 2]  630 		addw y,#OPTION_BASE-1
      001E6D FF               [ 2]  631 		ldw (x),y 
      001E6E 1D 00 02         [ 2]  632 		subw x,#CELLL 
      001E71 90 5F            [ 1]  633 		clrw y 
      001E73 FF               [ 2]  634 		ldw (x),y 
      001E74 CD 1C FF         [ 4]  635 		call EECSTORE
      001E77 81               [ 4]  636 		ret 
                                    637 
                                    638 
                                    639 
                                    640 ;--------------------------------------
                                    641 ; reset system to its original state 
                                    642 ; before any user modification
                                    643 ; PRISTINE ( -- )
                                    644 ;-------------------------------------
      001E78 1E 4F                  645 	.word LINK  
                           001E7A   646 	LINK=.
      001E7A 08                     647 	.byte 8 
      001E7B 50 52 49 53 54 49 4E   648 	.ascii "PRISTINE"
             45
      001E83                        649 pristine:
                                    650 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E83 CD 1B 03         [ 4]  651 	call EEPROM 
      001E86 CD 07 45         [ 4]  652 1$:	call DDUP 
      001E89 CD 1D 75         [ 4]  653 	call row_erase
      001E8C 90 93            [ 1]  654 	ldw y,x 
      001E8E 90 EE 02         [ 2]  655 	ldw y,(2,y)
      001E91 72 A9 00 80      [ 2]  656 	addw y,#BLOCK_SIZE
      001E95 EF 02            [ 2]  657 	ldw (2,x),y
      001E97 90 A3 48 00      [ 2]  658 	cpw y,#OPTION_BASE 
      001E9B 25 E9            [ 1]  659 	jrult 1$
                                    660 ;;; reset OPTION to default values
      001E9D 90 AE 00 01      [ 2]  661 	ldw y,#1 ; OPT1 
      001EA1 FF               [ 2]  662 2$:	ldw (x),y   
      001EA2 90 5F            [ 1]  663 	clrw y 
      001EA4 EF 02            [ 2]  664 	ldw (2,x),y  ; ( 0 1 -- ) 
      001EA6 CD 07 45         [ 4]  665 	call DDUP    ; ( 0 1 0 1 -- )  
      001EA9 CD 1E 57         [ 4]  666 	call set_option
      001EAC 90 93            [ 1]  667 	ldw y,x 
      001EAE 90 FE            [ 2]  668 	ldw y,(y)
      001EB0 90 5C            [ 1]  669 	incw y  ; next OPTION 
      001EB2 90 A3 00 08      [ 2]  670 	cpw y,#8 
      001EB6 25 E9            [ 1]  671 	jrult 2$
                                    672 ;;; erase first row of app_space 	
      001EB8 90 AE 23 80      [ 2]  673 	ldw y,#app_space
      001EBC EF 02            [ 2]  674 	ldw (2,x),y  
      001EBE 90 5F            [ 1]  675 	clrw y 
      001EC0 FF               [ 2]  676 	ldw (x),y ; ( app_space 0 -- )
      001EC1 CD 1D 75         [ 4]  677 	call row_erase 
                                    678 ; reset interrupt vectors 
      001EC4 1D 00 02         [ 2]  679 	subw x,#CELLL 
      001EC7 90 5F            [ 1]  680 	clrw y  
      001EC9 FF               [ 2]  681 4$:	ldw (x),y  ; ( n -- ) int# 
      001ECA CD 05 5F         [ 4]  682 	call DUPP  
      001ECD CD 1E EA         [ 4]  683 	call reset_vector
      001ED0 90 93            [ 1]  684 	ldw y,x 
      001ED2 90 FE            [ 2]  685 	ldw y,(y)
      001ED4 90 5C            [ 1]  686 	incw y   ; next vector 
      001ED6 90 A3 00 19      [ 2]  687 	cpw y,#25 
      001EDA 25 ED            [ 1]  688 	jrult 4$
      001EDC CC 00 00         [ 2]  689 	jp NonHandledInterrupt ; reset MCU
                                    690 
                                    691 ;------------------------------
                                    692 ; reset an interrupt vector 
                                    693 ; to its initial value 
                                    694 ; i.e. NonHandledInterrupt
                                    695 ; RST-IVEC ( n -- )
                                    696 ;-----------------------------
      001EDF 1E 7A                  697 	.word LINK 
                           001EE1   698 	LINK=. 
      001EE1 08                     699 	.byte 8 
      001EE2 52 53 54 2D 49 56 45   700 	.ascii "RST-IVEC"
             43
      001EEA                        701 reset_vector:
      001EEA 90 93            [ 1]  702 	ldw y,x
      001EEC 1C 00 02         [ 2]  703 	addw x,#CELLL 
      001EEF 90 FE            [ 2]  704 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EF1 90 A3 00 17      [ 2]  705 	cpw y,#23 
      001EF5 27 3A            [ 1]  706 	jreq 9$
      001EF7 90 A3 00 1D      [ 2]  707 	cpw y,#29 ; last vector
      001EFB 22 34            [ 1]  708 	jrugt 9$  
      001EFD 90 58            [ 2]  709 	sllw y 
      001EFF 90 58            [ 2]  710 	sllw y 
      001F01 72 A9 80 08      [ 2]  711 	addw y,#0x8008 ; irq0 address 
      001F05 90 BF 24         [ 2]  712 	ldw YTEMP,y
      001F08 1D 00 06         [ 2]  713 	subw x,#3*CELLL 
      001F0B EF 02            [ 2]  714 	ldw (2,x),y 
      001F0D 90 5F            [ 1]  715 	clrw y
      001F0F FF               [ 2]  716 	ldw (x),y 
      001F10 A6 82            [ 1]  717 	ld a,#0x82 
      001F12 90 95            [ 1]  718 	ld yh,a
      001F14 EF 04            [ 2]  719 	ldw (4,x),y
      001F16 CD 1D 4B         [ 4]  720 	call EESTORE
      001F19 1D 00 06         [ 2]  721 	subw x,#3*CELLL
      001F1C 90 5F            [ 1]  722 	clrw y 
      001F1E FF               [ 2]  723 	ldw (x),y 
      001F1F 90 AE 00 00      [ 2]  724 	ldw y,#NonHandledInterrupt
      001F23 EF 04            [ 2]  725 	ldw (4,x),y 
      001F25 90 BE 24         [ 2]  726 	ldw y,YTEMP  
      001F28 72 A9 00 02      [ 2]  727 	addw y,#2
      001F2C EF 02            [ 2]  728 	ldw (2,x),y 
      001F2E CD 1D 4B         [ 4]  729 	call EESTORE
      001F31 81               [ 4]  730 9$:	ret 
                                    731 
                                    732 
                                    733 ;------------------------------
                                    734 ; all interrupt vector with 
                                    735 ; an address >= a are resetted 
                                    736 ; to default
                                    737 ; CHKIVEC ( a -- )
                                    738 ;------------------------------
      001F32 1E E1                  739 	.word LINK 
                           001F34   740 	LINK=.
      001F34 07                     741 	.byte 7
      001F35 43 48 4B 49 56 45 43   742 	.ascii "CHKIVEC"
                                    743 ;local variables 
                           000001   744 	SSP=1
                           000003   745 	CADR=3
                           000005   746 	OFS=5
                           000006   747 	VSIZE=6  
      001F3C                        748 CHKIVEC:
      001F3C 52 06            [ 2]  749 	sub sp,#VSIZE ;alloc local variables 
      001F3E 90 93            [ 1]  750 	ldw y,x 
      001F40 90 FE            [ 2]  751 	ldw y,(y)
      001F42 17 03            [ 2]  752 	ldw (CADR,sp),y ; ca 
      001F44 1F 01            [ 2]  753 	ldw (SSP,sp),x 
      001F46 AE 80 0A         [ 2]  754 	ldw x,#0x800a ; irq0 address 
      001F49 BF 33            [ 2]  755 	ldw PTR16,X
      001F4B AE FF FC         [ 2]  756 	ldw x,#-4 
      001F4E 1C 00 04         [ 2]  757 1$:	addw x,#4
      001F51 A3 00 78         [ 2]  758 	cpw x,#30*4 ; irq0-29 
      001F54 27 22            [ 1]  759 	jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F56 90 93            [ 1]  760 	ldw y,x  
      001F58 91 D6 33         [ 4]  761 	ld a,([PTR16],y)
      001F5B 11 03            [ 1]  762 	cp a,(CADR,sp)
      001F5D 25 EF            [ 1]  763 	jrult 1$
      001F5F 90 5C            [ 1]  764 	incw y 
      001F61 91 D6 33         [ 4]  765 	ld a,([PTR16],y)
      001F64 11 04            [ 1]  766 	cp a,(CADR+1,sp) 
      001F66 25 E6            [ 1]  767 	jrult 1$ 
      001F68 1F 05            [ 2]  768 	ldw (OFS,sp),x 
      001F6A 54               [ 2]  769 	srlw x
      001F6B 54               [ 2]  770 	srlw x 
      001F6C 90 93            [ 1]  771 	ldw y,x 
      001F6E 1E 01            [ 2]  772 	ldw x,(SSP,sp)
      001F70 FF               [ 2]  773 	ldw (x),y
      001F71 CD 1E EA         [ 4]  774 	call reset_vector
      001F74 1E 05            [ 2]  775 	ldw x,(OFS,sp) 
      001F76 20 D6            [ 2]  776 	jra 1$
      001F78 1E 01            [ 2]  777 9$:	ldw x,(SSP,sp) 
      001F7A 1C 00 02         [ 2]  778 	addw x,#CELLL 
      001F7D 5B 06            [ 2]  779 	addw sp,#VSIZE ; drop local variables  
      001F7F 81               [ 4]  780 	ret 
                                    781 
                                    782 ;------------------------------
                                    783 ; set interrupt vector 
                                    784 ; SET-IVEC ( ud n -- )
                                    785 ;  ud Handler address
                                    786 ;  n  vector # 0 .. 29 
                                    787 ;-----------------------------
      001F80 1F 34                  788 	.word LINK
                           001F82   789 	LINK=.
      001F82 08                     790 	.byte 8 
      001F83 53 45 54 2D 49 56 45   791 	.ascii "SET-IVEC" 
             43
      001F8B                        792 set_vector:
      001F8B 90 93            [ 1]  793     ldw y,x 
      001F8D 1C 00 02         [ 2]  794 	addw x,#CELLL 
      001F90 90 FE            [ 2]  795 	ldw y,(y) ; vector #
      001F92 90 A3 00 1D      [ 2]  796 	cpw y,#29 ; last vector
      001F96 23 04            [ 2]  797 	jrule 2$
      001F98 1C 00 04         [ 2]  798 	addw x,#2*CELLL 
      001F9B 81               [ 4]  799 	ret
      001F9C 90 58            [ 2]  800 2$:	sllw y 
      001F9E 90 58            [ 2]  801 	sllw y 
      001FA0 72 A9 80 08      [ 2]  802 	addw y,#0X8008 ; IRQ0 vector address 
      001FA4 90 BF 24         [ 2]  803 	ldw YTEMP,y ; vector address 
      001FA7 A6 82            [ 1]  804 	ld a,#0x82 
      001FA9 90 95            [ 1]  805 	ld yh,a 
      001FAB E6 01            [ 1]  806 	ld a,(1,x) ; isr address bits 23..16 
      001FAD 90 97            [ 1]  807 	ld yl,a 
                                    808 ;  write 0x82 + most significant byte of int address	
      001FAF 1D 00 06         [ 2]  809 	subw x,#3*CELLL 
      001FB2 EF 04            [ 2]  810 	ldw (4,x),y 
      001FB4 90 BE 24         [ 2]  811 	ldw y,YTEMP
      001FB7 EF 02            [ 2]  812 	ldw (2,x),y ; vector address 
      001FB9 90 5F            [ 1]  813 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FBB FF               [ 2]  814 	ldw (x),y   ; as a double 
      001FBC CD 1D 4B         [ 4]  815 	call EESTORE 
      001FBF 90 93            [ 1]  816 	ldw y,x 
      001FC1 90 EE 02         [ 2]  817 	ldw y,(2,y) ; bits 15..0 int vector 
      001FC4 1D 00 06         [ 2]  818 	subw x,#3*CELLL 
      001FC7 EF 04            [ 2]  819 	ldw (4,x),y 
      001FC9 90 BE 24         [ 2]  820 	ldw y,YTEMP 
      001FCC 72 A9 00 02      [ 2]  821 	addw y,#2 
      001FD0 EF 02            [ 2]  822 	ldw (2,x),y 
      001FD2 90 5F            [ 1]  823 	clrw y 
      001FD4 FF               [ 2]  824 	ldw (x),y 
      001FD5 CD 1D 4B         [ 4]  825 	call EESTORE
      001FD8 1C 00 04         [ 2]  826 	addw x,#2*CELLL  
      001FDB 81               [ 4]  827 9$: ret 
                                    828 
                                    829 
                                    830 ;------------------------
                                    831 ; Compile word to flash
                                    832 ; EE, (w -- )
                                    833 ;-----------------------
      001FDC 1F 82                  834 	.word LINK
                           001FDE   835 	LINK=.
      001FDE 03                     836 	.byte 3
      001FDF 45 45 2C               837 	.ascii "EE,"
      001FE2                        838 EE_COMMA:
      001FE2 1D 00 04         [ 2]  839 	subw x,#2*CELLL 
      001FE5 90 BE 18         [ 2]  840 	ldw y,UCP
      001FE8 90 89            [ 2]  841 	pushw y 
      001FEA EF 02            [ 2]  842 	ldw (2,x),y 
      001FEC 90 5F            [ 1]  843 	clrw y 
      001FEE FF               [ 2]  844 	ldw (x),y
      001FEF CD 1D 4B         [ 4]  845 	call EESTORE
      001FF2 90 85            [ 2]  846 	popw y 
      001FF4 72 A9 00 02      [ 2]  847 	addw y,#2
      001FF8 90 BF 18         [ 2]  848 	ldw UCP,y
      001FFB 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;-------------------------
                                    853 ; Compile byte to flash 
                                    854 ; EEC, ( c -- )	
                                    855 ;-------------------------
      001FFC 1F DE                  856 	.word LINK 
                           001FFE   857 	LINK=.
      001FFE 04                     858 	.byte 4 
      001FFF 45 45 43 2C            859 	.ascii "EEC,"
      002003                        860 EE_CCOMMA:
      002003 1D 00 04         [ 2]  861 	subw x,#2*CELLL 
      002006 90 BE 18         [ 2]  862 	ldw y,UCP
      002009 90 89            [ 2]  863 	pushw y 
      00200B EF 02            [ 2]  864 	ldw (2,x),y 
      00200D 90 5F            [ 1]  865 	clrw y 
      00200F FF               [ 2]  866 	ldw (x),y
      002010 CD 1C FF         [ 4]  867 	call EECSTORE
      002013 90 85            [ 2]  868 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002015 90 5C            [ 1]  869 	incw y 
      002017 90 BF 18         [ 2]  870 	ldw UCP,y
      00201A 81               [ 4]  871 	ret 
                                    872 
                                    873 
                                    874 ;--------------------------
                                    875 ; copy FLASH block to ROWBUF
                                    876 ; ROW>BUF ( ud -- )
                                    877 ;--------------------------
      00201B 1F FE                  878 	.word LINK 
                           00201D   879 	LINK=.
      00201D 07                     880 	.byte 7 
      00201E 52 4F 57 3E 42 55 46   881 	.ascii "ROW>BUF"
      002025                        882 ROW2BUF: 
      002025 CD 1A E4         [ 4]  883 	call FPSTOR 
      002028 A6 80            [ 1]  884 	ld a,#BLOCK_SIZE
      00202A 88               [ 1]  885 	push a 
      00202B B4 34            [ 1]  886 	and a,PTR8 ; block align 
      00202D B7 34            [ 1]  887 	ld PTR8,a
      00202F 90 AE 06 80      [ 2]  888 	ldw y,#ROWBUFF 
      002033 92 BC 00 32      [ 5]  889 1$: ldf a,[FPTR]
      002037 90 F7            [ 1]  890 	ld (y),a
      002039 CD 1C 47         [ 4]  891 	call INC_FPTR
      00203C 90 5C            [ 1]  892 	incw y 
      00203E 0A 01            [ 1]  893 	dec (1,sp)
      002040 26 F1            [ 1]  894 	jrne 1$ 
      002042 84               [ 1]  895 	pop a 
      002043 81               [ 4]  896 	ret 
                                    897 
                                    898 
                                    899 ;---------------------------
                                    900 ; copy ROWBUFF to flash 
                                    901 ; BUF>ROW ( ud -- )
                                    902 ; ud is row address as double 
                                    903 ;---------------------------
      002044 20 1D                  904 	.word LINK 
                           002046   905 	LINK=.
      002046 07                     906 	.byte 7 
      002047 42 55 46 3E 52 4F 57   907 	.ascii "BUF>ROW" 
      00204E                        908 BUF2ROW:
      00204E CD 06 5A         [ 4]  909 	call TBUF ; ( ud rb -- )
      002051 CD 07 1A         [ 4]  910 	call ROT 
      002054 CD 07 1A         [ 4]  911 	call ROT  ; ( rb ud -- )
      002057 CD 1E 2D         [ 4]  912 	call write_row 
      00205A 81               [ 4]  913 	ret 
                                    914 
                                    915 ;---------------------------------
                                    916 ; how many byte free in that row 
                                    917 ; RFREE ( a -- n )
                                    918 ; a is least byte of target address
                                    919 ;----------------------------------
      00205B 20 46                  920 	.word LINK 
                           00205D   921 	LINK=.
      00205D 05                     922 	.byte 5 
      00205E 52 46 52 45 45         923 	.ascii "RFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      002063                        924 RFREE:
      002063 E6 01            [ 1]  925 	ld a,(1,x)
      002065 A4 7F            [ 1]  926 	and a,#BLOCK_SIZE-1 
      002067 B7 24            [ 1]  927 	ld YTEMP,a 
      002069 A6 80            [ 1]  928 	ld a,#BLOCK_SIZE 
      00206B B0 24            [ 1]  929 	sub a,YTEMP 
      00206D 90 5F            [ 1]  930 	clrw y 
      00206F 90 97            [ 1]  931 	ld yl,a
      002071 FF               [ 2]  932 	ldw (x),y 
      002072 81               [ 4]  933 	ret 
                                    934 
                                    935 ;---------------------------------
                                    936 ; write u bytes to flash/EEPROM 
                                    937 ; constraint to row limit 
                                    938 ; RAM>EE ( ud a u -- u2 )
                                    939 ; ud flash address 
                                    940 ; a ram address 
                                    941 ; u bytes count
                                    942 ; return u2 bytes written  
                                    943 ;-------------------------------
      002073 20 5D                  944 	.word LINK 
                           002075   945 	LINK=. 
      002075 06                     946 	.byte 6
      002076 52 41 4D 3E 45 45      947 	.ascii "RAM>EE"
                                    948 	
      00207C                        949 RAM2EE:
                                    950 ; copy ud on top 
      00207C 90 93            [ 1]  951 	ldw y,x 
      00207E 90 EE 06         [ 2]  952 	ldw y,(6,y) ; LSW of ud  
      002081 90 BF 24         [ 2]  953 	ldw YTEMP,y 
      002084 90 93            [ 1]  954 	ldw y,x 
      002086 90 EE 04         [ 2]  955 	ldw y,(4,y)  ; MSW of ud 
      002089 1D 00 04         [ 2]  956 	subw x,#2*CELLL 
      00208C FF               [ 2]  957 	ldw (x),y 
      00208D 90 BE 24         [ 2]  958 	ldw y,YTEMP 
      002090 EF 02            [ 2]  959 	ldw (2,x),y 
      002092 CD 20 25         [ 4]  960 	call ROW2BUF 
      002095 90 93            [ 1]  961 	ldw y,x 
      002097 90 EE 06         [ 2]  962 	ldw y,(6,y)
      00209A 90 89            [ 2]  963 	pushw y ; udl 
      00209C 90 9F            [ 1]  964 	ld a,yl
      00209E A4 7F            [ 1]  965 	and a,#BLOCK_SIZE-1 
      0020A0 90 5F            [ 1]  966 	clrw y 
      0020A2 90 97            [ 1]  967 	ld yl,a 
      0020A4 72 A9 06 80      [ 2]  968 	addw y,#ROWBUFF 
      0020A8 1D 00 02         [ 2]  969 	subw x,#CELLL 
      0020AB FF               [ 2]  970 	ldw (x),y  
      0020AC CD 05 6F         [ 4]  971 	call SWAPP ;  ( ud a ra u -- )
      0020AF CD 05 09         [ 4]  972 	call RFROM  
      0020B2 CD 20 63         [ 4]  973 	call RFREE 
      0020B5 CD 08 75         [ 4]  974 	call MIN
      0020B8 CD 05 5F         [ 4]  975 	call DUPP 
      0020BB CD 05 28         [ 4]  976 	call TOR  
      0020BE CD 0B FB         [ 4]  977 	call CMOVE
      0020C1 CD 20 4E         [ 4]  978 	call BUF2ROW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020C4 CD 05 09         [ 4]  979 	call RFROM 
      0020C7 81               [ 4]  980 	ret 
                                    981 
                                    982 
                                    983 ;--------------------------
                                    984 ; expand 16 bit address 
                                    985 ; to 32 bit address 
                                    986 ; FADDR ( a -- ud )
                                    987 ;--------------------------
      0020C8 20 75                  988 	.word LINK 
                           0020CA   989 	LINK=. 
      0020CA 05                     990 	.byte 5 
      0020CB 46 41 44 44 52         991 	.ascii "FADDR"
      0020D0                        992 FADDR:
      0020D0 CC 0A C0         [ 2]  993 	jp ZERO 
                                    994 
                                    995 
                                    996 ;--------------------------
                                    997 ; move new colon definition to FLASH 
                                    998 ; using WR-ROW for efficiency 
                                    999 ; preserving bytes already used 
                                   1000 ; in the current block. 
                                   1001 ; At this point the compiler as completed
                                   1002 ; in RAM and pointers CP and CNTXT updated.
                                   1003 ; CNTXT point to nfa of new word and  
                                   1004 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1005 ; 
                                   1006 ; FMOVE ( -- cp+ )
                                   1007 ; 
                                   1008 ;--------------------------
      0020D3 20 CA                 1009 	.word LINK 
                           0020D5  1010 	LINK=.
      0020D5 05                    1011 	.byte 5 
      0020D6 46 4D 4F 56 45        1012 	.ascii "FMOVE" 
      0020DB                       1013 FMOVE:
      0020DB CD 06 6C         [ 4] 1014 	call TFLASH 
      0020DE CD 04 B8         [ 4] 1015 	CALL AT 
      0020E1 CD 04 6D         [ 4] 1016 	CALL QBRAN 
      0020E4 21 5F                 1017 	.word no_move  
      0020E6 CD 06 BB         [ 4] 1018 	call CPP
      0020E9 CD 04 B8         [ 4] 1019 	call AT  
      0020EC CD 05 5F         [ 4] 1020 	call DUPP ; ( udl udl -- )
      0020EF CD 06 9F         [ 4] 1021 	call CNTXT 
      0020F2 CD 04 B8         [ 4] 1022 	call AT 
      0020F5 CD 04 3A         [ 4] 1023 	call DOLIT 
      0020F8 00 02                 1024 	.word 2 
      0020FA CD 07 D3         [ 4] 1025 	call SUBB ; ( udl udl a -- )
      0020FD CD 05 6F         [ 4] 1026 	call SWAPP 
      002100 CD 20 D0         [ 4] 1027 	call FADDR 
      002103 CD 07 1A         [ 4] 1028 	call ROT  ; ( udl ud a -- )
      002106 CD 05 5F         [ 4] 1029 	call DUPP 
      002109 CD 05 28         [ 4] 1030 	call TOR    ; R: a 
      00210C                       1031 FMOVE2: 
      00210C CD 0B AE         [ 4] 1032 	call HERE 
      00210F CD 05 1C         [ 4] 1033 	call RAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002112 CD 07 D3         [ 4] 1034 	call SUBB ; (udl ud a wl -- )
      002115                       1035 next_row:
      002115 CD 05 5F         [ 4] 1036 	call DUPP 
      002118 CD 05 28         [ 4] 1037 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00211B CD 20 7C         [ 4] 1038 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00211E CD 05 5F         [ 4] 1039 	call DUPP 
      002121 CD 05 28         [ 4] 1040 	call TOR
      002124 CD 07 5A         [ 4] 1041 	call PLUS  ; ( udl+ ) 
      002127 CD 05 5F         [ 4] 1042 	call DUPP 
      00212A CD 0A C0         [ 4] 1043 	call ZERO   ; ( udl+ ud -- )
      00212D CD 05 09         [ 4] 1044 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002130 CD 05 09         [ 4] 1045 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002133 CD 05 89         [ 4] 1046 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002136 CD 07 D3         [ 4] 1047 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002139 CD 05 5F         [ 4] 1048 	call DUPP 
      00213C CD 04 6D         [ 4] 1049 	call QBRAN
      00213F 21 58                 1050 	.word fmove_done 
      002141 CD 05 6F         [ 4] 1051 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002144 CD 05 09         [ 4] 1052 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002147 CD 07 5A         [ 4] 1053 	call PLUS  ; ( udl+2 ud wl- a+ )
      00214A CD 05 5F         [ 4] 1054 	call DUPP 
      00214D CD 05 28         [ 4] 1055 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002150 CD 05 6F         [ 4] 1056 	call SWAPP 
      002153 CD 04 84         [ 4] 1057 	call BRAN
      002156 21 15                 1058 	.word next_row  
      002158                       1059 fmove_done:	
      002158 CD 05 09         [ 4] 1060 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00215B 1C 00 0A         [ 2] 1061 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00215E 81               [ 4] 1062  	ret  
      00215F                       1063 no_move:
      00215F CD 0A C0         [ 4] 1064 	call ZERO
      002162 81               [ 4] 1065 	ret 
                                   1066 
                                   1067 ;------------------------------------------
                                   1068 ; adjust pointers after **FMOVE** operetion.
                                   1069 ; UPDAT-PTR ( cp+ -- )
                                   1070 ; cp+ is new CP position after FMOVE 
                                   1071 ;-------------------------------------------
      002163 20 D5                 1072 	.word LINK 
                           002165  1073 	LINK=.
      002165 09                    1074 	.byte 9
      002166 55 50 44 41 54 2D 50  1075 	.ascii "UPDAT-PTR" 
             54 52
      00216F                       1076 UPDATPTR:
                                   1077 ;reset VP to previous position  
      00216F CD 1B 5E         [ 4] 1078 	call EEPVP 
      002172 CD 05 55         [ 4] 1079 	call DROP 
      002175 CD 04 B8         [ 4] 1080 	call AT
      002178 CD 06 AD         [ 4] 1081 	call VPP 
      00217B CD 04 A1         [ 4] 1082 	call STORE
                                   1083 ;update CONTEXT and LAST 
      00217E CD 1B 48         [ 4] 1084 	call EEPCP 
      002181 CD 05 55         [ 4] 1085 	call DROP
      002184 CD 04 B8         [ 4] 1086 	call AT
      002187 CD 04 3A         [ 4] 1087 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00218A 00 02                 1088 	.word 2 
      00218C CD 07 5A         [ 4] 1089 	call PLUS 
      00218F CD 05 5F         [ 4] 1090 	call DUPP 
      002192 CD 06 9F         [ 4] 1091 	call CNTXT 
      002195 CD 04 A1         [ 4] 1092 	call STORE
      002198 CD 06 CB         [ 4] 1093 	call LAST
      00219B CD 04 A1         [ 4] 1094 	call STORE 
      00219E CD 1B 78         [ 4] 1095 	call UPDATLAST 
                                   1096 ;update CP 
      0021A1 CD 06 BB         [ 4] 1097 	call CPP 
      0021A4 CD 04 A1         [ 4] 1098 	call STORE
      0021A7 CD 1B A1         [ 4] 1099 	call UPDATCP 
      0021AA 81               [ 4] 1100 	ret 
                                   1101 
                                   1102 ;-----------------------------
                                   1103 ; move interrupt sub-routine
                                   1104 ; in flash memory
                                   1105 ;----------------------------- 
      0021AB 21 65                 1106 	.word LINK 
                           0021AD  1107 	LINK=. 
      0021AD 06                    1108 	.byte 6
      0021AE 49 46 4D 4F 56 45     1109 	.ascii "IFMOVE" 
      0021B4                       1110 IFMOVE:
      0021B4 CD 06 6C         [ 4] 1111 	call TFLASH 
      0021B7 CD 04 B8         [ 4] 1112 	CALL AT 
      0021BA CD 04 6D         [ 4] 1113 	CALL QBRAN 
      0021BD 21 5F                 1114 	.word no_move 
      0021BF CD 06 BB         [ 4] 1115 	call CPP 
      0021C2 CD 04 B8         [ 4] 1116 	call AT 
      0021C5 CD 05 5F         [ 4] 1117 	call DUPP ; ( udl udl -- )
      0021C8 CD 1B 5E         [ 4] 1118 	call EEPVP 
      0021CB CD 05 55         [ 4] 1119 	call DROP
      0021CE CD 04 B8         [ 4] 1120 	call AT  ; ( udl udl a )
      0021D1 CD 05 28         [ 4] 1121 	call TOR 
      0021D4 CD 20 D0         [ 4] 1122 	call FADDR
      0021D7 CD 05 1C         [ 4] 1123 	call RAT ; ( udl ud a -- ) R: a 
      0021DA CC 21 0C         [ 2] 1124 	jp FMOVE2 
                                   1125 
                                   1126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           000001  4623 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4624         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      0021DD 21 AD                   31         .word LINK 
                           0021DF    32         LINK=.
      0021DF 02                      33         .byte 2
      0021E0 50 49                   34         .ascii "PI" 
      0021E2                         35 PII:
      0021E2 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      0021E5 90 AE 01 63      [ 2]   37         ldw y,#355 
      0021E9 EF 02            [ 2]   38         ldw (2,x),y 
      0021EB 90 AE 00 71      [ 2]   39         ldw y,#113 
      0021EF FF               [ 2]   40         ldw (x),y 
      0021F0 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      0021F1 21 DF                   48         .word LINK 
                           0021F3    49         LINK=.
      0021F3 05                      50         .byte 5 
      0021F4 53 51 52 54 32          51         .ascii "SQRT2" 
      0021F9                         52 SQRT2:
      0021F9 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      0021FC 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002200 EF 02            [ 2]   55         ldw (2,x),y 
      002202 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002206 FF               [ 2]   57         ldw (x),y 
      002207 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002208 21 F3                   63         .word LINK 
                           00220A    64         LINK=.
      00220A 05                      65         .byte 5
      00220B 53 51 52 54 33          66         .ascii "SQRT3" 
      002210                         67 SQRT3: 
      002210 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002213 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002217 EF 02            [ 2]   70     ldw (2,x),y 
      002219 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00221D FF               [ 2]   72     ldw (x),y 
      00221E 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00221F 22 0A                   78         .word LINK 
                           002221    79         LINK=.
      002221 01                      80         .byte 1
      002222 45                      81         .ascii "E" 
      002223                         82 ENEPER:
      002223 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      002226 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      00222A EF 02            [ 2]   85     ldw (2,x),y 
      00222C 90 AE 29 32      [ 2]   86     ldw y,#10546 
      002230 FF               [ 2]   87     ldw (x),y 
      002231 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      002232 22 21                   92         .word LINK 
                           002234    93         LINK=.
      002234 06                      94         .byte 6 
      002235 53 51 52 54 31 30       95         .ascii "SQRT10" 
      00223B                         96 SQRT10:
      00223B 1D 00 04         [ 2]   97     subw x,#2*CELLL
      00223E 90 AE 59 98      [ 2]   98     ldw y,#22936 
      002242 EF 02            [ 2]   99     ldw (2,x),y 
      002244 90 AE 1C 55      [ 2]  100     ldw y,#7253
      002248 FF               [ 2]  101     ldw (x),y 
      002249 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      00224A 22 34                  107         .word LINK 
                           00224C   108         LINK=. 
      00224C 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00224D 31 32 52 54 32         110         .ascii "12RT2"
      002252                        111 RT12_2:
      002252 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      002255 90 AE 68 AD      [ 2]  113     ldw y,#26797
      002259 EF 02            [ 2]  114     ldw (2,x),y 
      00225B 90 AE 62 CD      [ 2]  115     ldw y,#25293
      00225F FF               [ 2]  116     ldw (x),y 
      002260 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      002261 22 4C                  122         .word LINK 
                           002263   123         LINK=.
      002263 05                     124         .byte 5 
      002264 4C 4F 47 32 53         125         .ascii "LOG2S" 
      002269                        126 LOG2S:
      002269 1D 00 04         [ 2]  127     subw x,#2*CELLL
      00226C 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002270 EF 02            [ 2]  129     ldw (2,x),y 
      002272 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      002276 FF               [ 2]  131     ldw (x),y 
      002277 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      002278 22 63                  137         .word LINK 
                           00227A   138         LINK=.
      00227A 04                     139         .byte 4 
      00227B 4C 4E 32 53            140         .ascii "LN2S" 
      00227F                        141 LN2S: 
      00227F 1D 00 04         [ 2]  142     subw x,#2*CELLL
      002282 90 AE 01 E5      [ 2]  143     ldw y,#485
      002286 EF 02            [ 2]  144     ldw (2,x),y 
      002288 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00228C FF               [ 2]  146     ldw (x),y 
      00228D 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4625 .endif
                           000001  4626 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4627         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      00228E 22 7A                   32     .word LINK 
                           002290    33     LINK=.
      002290 06                      34     .byte 6
      002291 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      002297                         36 CALLOT:
      002297 CD 06 BB         [ 4]   37     CALL CPP
      00229A CD 05 5F         [ 4]   38     CALL DUPP 
      00229D CD 04 B8         [ 4]   39     CALL AT 
      0022A0 CD 05 28         [ 4]   40     CALL TOR 
      0022A3 CD 0B 30         [ 4]   41     CALL PSTOR 
      0022A6 CD 1B A1         [ 4]   42     CALL UPDATCP 
      0022A9 CD 05 09         [ 4]   43     CALL RFROM
      0022AC CC 0A C0         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      0022AF 22 90                   52     .word LINK 
                           0022B1    53     LINK=.
      0022B1 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0022B2 43 54 41 42 4C 45       55     .ascii "CTABLE"
      0022B8                         56 CTABLE:
      0022B8 CD 22 97         [ 4]   57     CALL CALLOT     
      0022BB CC 18 9C         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      0022BE 22 B1                   67     .word LINK 
                           0022C0    68     LINK=.
      0022C0 06                      69     .byte 6
      0022C1 57 54 41 42 4C 45       70     .ascii "WTABLE"
      0022C7                         71 WTABLE:
      0022C7 CD 0A 47         [ 4]   72     CALL CELLS  
      0022CA CD 22 97         [ 4]   73     CALL CALLOT 
      0022CD CC 18 9C         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      0022D0 22 C0                   82     .word LINK 
                           0022D2    83     LINK=.
      0022D2 06                      84     .byte 6
      0022D3 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      0022D9                         86 CTAT:
      0022D9 CD 1A E4         [ 4]   87     call FPSTOR 
      0022DC CD 1C 5F         [ 4]   88     call PTRPLUS 
      0022DF CC 1C 9C         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      0022E2 22 D2                   97     .word LINK 
                           0022E4    98     LINK=.
      0022E4 06                      99     .byte 6
      0022E5 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      0022EB                        101 WTAT:
      0022EB CD 1A E4         [ 4]  102     call FPSTOR 
      0022EE CD 0A 47         [ 4]  103     call CELLS 
      0022F1 CD 1C 5F         [ 4]  104     call PTRPLUS 
      0022F4 CD 1C 7A         [ 4]  105     call EE_READ 
      0022F7 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      0022F8 22 E4                  113     .word LINK 
                           0022FA   114     LINK=.
      0022FA 06                     115     .byte 6 
      0022FB 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002301                        117 CTINIT:
      002301 CD 1A E4         [ 4]  118     CALL FPSTOR
      002304 CD 1C 0B         [ 4]  119     CALL UNLOCK
      002307 CD 0A C0         [ 4]  120     CALL ZERO 
      00230A CD 0A 54         [ 4]  121 1$: CALL ONEP 
      00230D CD 05 5F         [ 4]  122     CALL DUPP 
      002310 CD 23 5D         [ 4]  123     CALL INTQ 
      002313 CD 04 6D         [ 4]  124     CALL QBRAN 
      002316 23 20                  125     .word 2$
      002318 CD 1C B6         [ 4]  126     call WR_BYTE 
      00231B CD 04 84         [ 4]  127     CALL BRAN 
      00231E 23 0A                  128     .word 1$ 
      002320 CD 07 3A         [ 4]  129 2$: CALL DDROP 
      002323 CD 1C 33         [ 4]  130     CALL LOCK 
      002326 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002327 22 FA                  138     .word LINK 
                           002329   139     LINK=.
      002329 06                     140     .byte 6 
      00232A 57 54 49 4E 49 54      141     .ascii "WTINIT"
      002330                        142 WTINIT:
      002330 CD 1A E4         [ 4]  143     CALL FPSTOR
      002333 CD 1C 0B         [ 4]  144     CALL UNLOCK
      002336 CD 0A C0         [ 4]  145     CALL ZERO 
      002339 CD 0A 54         [ 4]  146 1$: CALL ONEP 
      00233C CD 05 5F         [ 4]  147     CALL DUPP
      00233F CD 23 5D         [ 4]  148     CALL INTQ
      002342 CD 04 6D         [ 4]  149     CALL QBRAN 
      002345 23 4F                  150     .word 2$
      002347 CD 1C D5         [ 4]  151     call WR_WORD 
      00234A CD 04 84         [ 4]  152     CALL BRAN 
      00234D 23 39                  153     .word 1$ 
      00234F CD 07 3A         [ 4]  154 2$: CALL DDROP 
      002352 CD 1C 33         [ 4]  155     CALL LOCK 
      002355 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      002356 23 29                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           002358   165     LINK=.
      002358 04                     166     .byte 4
      002359 5B 4E 5D 3F            167     .ascii "[N]?" 
      00235D                        168 INTQ:
      00235D CD 0F 26         [ 4]  169     CALL CR 
      002360 CD 04 3A         [ 4]  170     call DOLIT 
      002363 00 5B                  171     .word '[
      002365 CD 04 24         [ 4]  172     CALL EMIT 
      002368 CD 0F C1         [ 4]  173     CALL DOT 
      00236B CD 0F 65         [ 4]  174     CALL  DOTQP
      00236E 03                     175     .byte 3
      00236F 5D 3F 20               176     .ascii "]? " 
      002372 CD 13 0D         [ 4]  177     CALL QUERY 
      002375 CD 11 38         [ 4]  178     call TOKEN 
      002378 CC 0D D3         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4628 .endif
                                   4629 
                                   4630 ;===============================================================
                                   4631 
                           002358  4632 LASTN =	LINK   ;last name defined
                                   4633 
                                   4634 ; application code begin here
      002380                       4635 	.bndry 128 ; align on flash block  
      002380                       4636 app_space: 
                                   4637 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0007F6 R   |   6 ABOR1      001349 R
  6 ABOR2      001360 R   |   6 ABORQ      001341 R   |   6 ABORT      001332 R
  6 ABRTQ      00161D R   |   6 ABSS       0007ED R   |   6 ACCEP      0012C8 R
  6 ACCP1      0012D1 R   |   6 ACCP2      0012F7 R   |   6 ACCP3      0012FA R
  6 ACCP4      0012FC R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     0006F9 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001608 R   |   6 AGAIN      00155E R
  6 AHEAD      0015BB R   |   6 ALLOT      001471 R   |   6 ANDD       0005AB R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004B8 R   |   6 ATEXE      000BE4 R
  6 AUTORUN    000117 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |   6 B115K2     0003CE R
    B19200  =  000003     |   6 B19K2      0003AB R   |     B230400 =  000007 
    B2400   =  000000     |   6 B2K4       00037C R   |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |   6 B4K8       00038A R
    B57600  =  000005     |   6 B57K6      0003BC R   |     B921600 =  000009 
    B9600   =  000002     |   6 B9K6       00039A R   |   6 BACK1      001270 R
  6 BASE       00061C R   |     BASEE   =  00000A     |   6 BAUD       0003DE R
    BCNT    =  000001     |   6 BCOMP      0014B3 R   |   6 BDIGS      000CCB R
    BEEP_CSR=  0050F3     |   6 BEGIN      001540 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001108 R   |   6 BKSP       001240 R
    BKSPP   =  000008     |   6 BLANK      000AB3 R   |     BLOCK_SI=  000080 
  6 BRAN       000484 R   |     BTW     =  000001     |   6 BUF2ROW    00204E R
  6 BYE        0000A4 R   |     CADR    =  000003     |     CALLL   =  0000CD 
  6 CALLOT     002297 R   |     CARRY   =  000028     |   6 CAT        0004D6 R
  6 CCOMMA     001495 R   |     CELLL   =  000002     |   6 CELLM      000A38 R
  6 CELLP      000A29 R   |   6 CELLS      000A47 R   |     CFG_GCR =  007F60 
  6 CHAR1      000EF8 R   |   6 CHAR2      000EFB R   |   6 CHKIVEC    001F3C R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000C03 R   |   6 CMOV2      000C1B R
  6 CMOVE      000BFB R   |     CNTDWN  =  000030     |   6 CNTXT      00069F R
  6 COLD       001A75 R   |   6 COLD1      001A75 R   |   6 COLON      0017B6 R
  6 COMMA      00147E R   |   6 COMPI      0014C3 R   |     COMPO   =  000040 
  6 CONSTANT   001860 R   |   6 COUNT      000B97 R   |   6 CPP        0006BB R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F26 R
  6 CREAT      0017FC R   |     CRR     =  00000D     |   6 CSTOR      0004C5 R
  6 CTABLE     0022B8 R   |   6 CTAT       0022D9 R   |   6 CTINIT     002301 R
  6 DAT        000B77 R   |     DATSTK  =  000680     |   6 DCONST     00189C R
  6 DDROP      00073A R   |   6 DDUP       000745 R   |   6 DECIM      000D7B R
  6 DEPTH      000B02 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000DC0 R   |   6 DI         0000B2 R   |   6 DIG        000CF4 R
  6 DIGIT      000C8F R   |   6 DIGS       000D05 R   |   6 DIGS1      000D05 R
  6 DIGS2      000D12 R   |   6 DIGTQ      000D8F R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0007B4 R
  6 DNEGA      000797 R   |   6 DOCONST    00188A R   |   6 DOLIT      00043A R
  6 DONXT      00044E R   |     DOORBELL=  000001     |   6 DOSTR      000F3C R
  6 DOT        000FC1 R   |   6 DOT1       000FD7 R   |   6 DOTI1      0019F8 R
  6 DOTID      0019E2 R   |   6 DOTO1      0013D5 R   |   6 DOTOK      0013BB R
  6 DOTPR      0010EA R   |   6 DOTQ       001637 R   |   6 DOTQP      000F65 R
  6 DOTR       000F73 R   |   6 DOTS       001984 R   |   6 DOTS1      00198F R
  6 DOTS2      001998 R   |   6 DOVAR      00060C R   |   6 DO_DCONS   0018CB R
  6 DROP       000555 R   |   6 DSTOR      000B51 R   |   6 DUMP       00193A R
  6 DUMP1      001951 R   |   6 DUMP3      001973 R   |   6 DUMPP      001909 R
  6 DUPP       00055F R   |   6 EDIGS      000D30 R   |   6 EECSTORE   001CFF R
  6 EEPCP      001B48 R   |   6 EEPLAST    001B1B R   |   6 EEPROM     001B03 R
    EEPROM_B=  004000     |     EEPROM_E=  0043FF     |     EEPROM_R=  000010 
    EEPROM_S=  000400     |   6 EEPRUN     001B32 R   |   6 EEPVP      001B5E R
  6 EESTORE    001D4B R   |   6 EE_CCOMM   002003 R   |   6 EE_COMMA   001FE2 R
  6 EE_CREAD   001C9C R   |   6 EE_READ    001C7A R   |   6 EI         0000AB R
  6 ELSEE      001596 R   |   6 EMIT       000424 R   |   6 ENEPER     002223 R
  6 EQ1        000811 R   |   6 EQUAL      0007FB R   |   6 ERASE      000C5D R
    ERR     =  00001B     |   6 EVAL       0013FE R   |   6 EVAL1      0013FE R
  6 EVAL2      00141A R   |   6 EXE1       000BF2 R   |   6 EXECU      000494 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000CB7 R   |   6 FADDR      0020D0 R   |   6 FILL       000C2A R
  6 FILL1      000C47 R   |   6 FILL2      000C50 R   |   6 FIND       00119C R
  6 FIND1      0011BA R   |   6 FIND2      0011E8 R   |   6 FIND3      0011F4 R
  6 FIND4      001208 R   |   6 FIND5      001215 R   |   6 FIND6      0011F9 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
  6 FMOVE      0020DB R   |   6 FMOVE2     00210C R   |   6 FOR        001513 R
  6 FORGET     000148 R   |   6 FORGET1    000177 R   |   6 FORGET2    0001FD R
  6 FORGET4    000206 R   |   6 FORGET6    0001BF R   |   6 FPSTOR     001AE4 R
    FPTR    =  000032     |   6 FREEVAR    000213 R   |   6 FREEVAR4   000249 R
    GPIO_BAS=  005000     |     GPIO_SIZ=  000005     |   6 HERE       000BAE R
  6 HEX        000D66 R   |   6 HI         001A34 R   |   6 HLD        00068C R
  6 HOLD       000CDB R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0017C7 R
  6 IFETCH     001531 R   |   6 IFF        00156E R   |   6 IFMOVE     0021B4 R
    IMEDD   =  000080     |   6 IMMED      0017D9 R   |   6 INCH       000418 R
  6 INC_FPTR   001C47 R   |   6 INITOFS    00178F R   |   6 INN        00063A R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      00139D R   |   6 INTER      001373 R
  6 INTQ       00235D R   |     INT_ADC1=  000016     |     INT_AWU =  000001 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_RES1=  000008 
    INT_RES2=  000009     |     INT_RES3=  000011     |     INT_RES4=  000012 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      000774 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      001724 R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       001779 R
  6 KEY        000EA6 R   |   6 KTAP       00128D R   |   6 KTAP1      0012B0 R
  6 KTAP2      0012B3 R   |   6 LAST       0006CB R   |   6 LASTN   =  002358 R
  6 LBRAC      0013AA R   |   6 LESS       000838 R   |     LF      =  00000A 
  6 LINK    =  002358 R   |   6 LITER      0014E5 R   |   6 LN2S       00227F R
  6 LOCK       001C33 R   |   6 LOG2S      002269 R   |   6 LSHIFT     000A72 R
  6 LSHIFT1    000A7B R   |   6 LSHIFT4    000A83 R   |   6 LT1        00084E R
    MASKK   =  001F7F     |   6 MAX        000858 R   |   6 MAX1       00086B R
  6 MIN        000875 R   |   6 MIN1       000888 R   |     MISCOPT =  004805 
    MISCOPT_=  000004     |     MISCOPT_=  000002     |     MISCOPT_=  000003 
    MISCOPT_=  000000     |     MISCOPT_=  000001     |   6 MMOD1      00092B R
  6 MMOD2      00093F R   |   6 MMOD3      000956 R   |   6 MMSM1      0008D2 R
  6 MMSM2      0008E6 R   |   6 MMSM3      0008E8 R   |   6 MMSM4      0008F0 R
  6 MODD       000970 R   |   6 MONE       000AD9 R   |     MS      =  00002E 
  6 MSEC       0002BE R   |   6 MSMOD      00090E R   |   6 MSTA1      000A01 R
  6 MSTAR      0009DE R   |     NAFR    =  004804     |   6 NAMEQ      001235 R
  6 NAMET      001146 R   |     NCLKOPT =  004808     |   6 NEGAT      000785 R
  6 NEX1       00045B R   |   6 NEXT       001522 R   |     NHSECNT =  00480A 
    NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB     |     NMISCOPT=  FFFFFFFD 
    NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF     |     NMISCOPT=  FFFFFFFE 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPTBL  =  00487F 
  6 NTIB       00064A R   |     NUBC    =  004802     |     NUCLEO  =  000000 
  6 NUFQ       000EBC R   |   6 NUFQ1      000ED5 R   |   6 NUMBQ      000DD3 R
  6 NUMQ1      000E07 R   |   6 NUMQ2      000E38 R   |   6 NUMQ3      000E7A R
  6 NUMQ4      000E7F R   |   6 NUMQ5      000E8E R   |   6 NUMQ6      000E91 R
  6 NonHandl   000000 R   |   6 OFFSET     0006F0 R   |     OFS     =  000005 
  6 ONE        000ACB R   |   6 ONEM       000A61 R   |   6 ONEP       000A54 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
  6 ORIG       000047 R   |   6 ORR        0005BF R   |   6 OUTPUT     000429 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000589 R   |   6 OVERT      0016F2 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    PA      =  000000     |   6 PACKS      000C6E R   |   6 PAD        000BBF R
  6 PAREN      0010F9 R   |   6 PARS       000FF2 R   |   6 PARS1      00101D R
  6 PARS2      001048 R   |   6 PARS3      00104B R   |   6 PARS4      001054 R
  6 PARS5      001077 R   |   6 PARS6      00108C R   |   6 PARS7      00109B R
  6 PARS8      0010AA R   |   6 PARSE      0010BB R   |   6 PAUSE      0002CE R
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      00191C R   |   6 PDUM2      00192D R   |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |   6 PICK       000B19 R   |   6 PII        0021E2 R
    PIN0    =  000000     |     PIN1    =  000001     |     PIN2    =  000002 
    PIN3    =  000003     |     PIN4    =  000004     |     PIN5    =  000005 
    PIN6    =  000006     |     PIN7    =  000007     |   6 PLUS       00075A R
  6 PNAM1      0016A7 R   |   6 PRESE      001429 R   |     PROD1   =  000022 
    PROD2   =  000024     |     PROD3   =  000026     |   6 PROTECTE   0001EF R
  6 PSTOR      000B30 R   |     PTR16   =  000033     |     PTR8    =  000034 
  6 PTRPLUS    001C5F R   |   6 QBRAN      00046D R   |   6 QDUP       000709 R
  6 QDUP1      000713 R   |   6 QKEY       000406 R   |   6 QSTAC      0013E1 R
  6 QUERY      00130D R   |   6 QUEST      000FE4 R   |   6 QUIT       001446 R
  6 QUIT1      00144E R   |   6 QUIT2      001451 R   |   6 RAM2EE     00207C R
    RAMBASE =  000000     |   6 RAMLAST    0006DE R   |     RAM_BASE=  000000 
    RAM_END =  0007FF     |     RAM_SIZE=  000800     |   6 RANDOM     00026C R
  6 RAT        00051C R   |   6 RBRAC      001766 R   |   6 REPEA      0015EB R
  6 RFREE      002063 R   |   6 RFROM      000509 R   |     ROP     =  004800 
  6 ROT        00071A R   |   6 ROW2BUF    002025 R   |     ROWBUFF =  000680 
    RP0     =  00002C     |   6 RPAT       0004E6 R   |     RPP     =  0007FF 
  6 RPSTO      0004F3 R   |   6 RSHIFT     000A8E R   |   6 RSHIFT1    000A97 R
  6 RSHIFT4    000A9F R   |     RST_SR  =  0050B3     |   6 RT12_2     002252 R
  6 SAME1      001164 R   |   6 SAME2      00118D R   |   6 SAMEQ      00115C R
  6 SCOM1      0016DC R   |   6 SCOM2      0016DF R   |   6 SCOMP      0016BE R
  6 SEED       000253 R   |     SEEDX   =  000036     |     SEEDY   =  000038 
  6 SEMIS      001702 R   |   6 SETISP     0000BE R   |   6 SET_RAML   001849 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000D1A R
  6 SIGN1      000D2A R   |   6 SLASH      00097A R   |   6 SLMOD      00095E R
  6 SNAME      001671 R   |     SP0     =  00002A     |   6 SPACE      000EDE R
  6 SPACS      000EED R   |   6 SPAT       00053F R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  000680     |     SPSAVE  =  000001 
  6 SPSTO      00054C R   |   6 SQRT10     00223B R   |   6 SQRT2      0021F9 R
  6 SQRT3      002210 R   |   6 SSMOD      000A0A R   |     SSP     =  000001 
    STACK   =  0007FF     |   6 STAR       0009D3 R   |   6 STASL      000A1B R
  6 STOD       0007BC R   |   6 STORE      0004A1 R   |   6 STR        000D48 R
  6 STRCQ      0014F3 R   |   6 STRQ       00162A R   |   6 STRQP      000F5B R
  6 SUBB       0007D3 R   |   6 SWAPP      00056F R   |     SWIM_CSR=  007F80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  6 TAP        001277 R   |   6 TBOOT      001A69 R   |   6 TBUF       00065A R
    TBUFFBAS=  000680     |   6 TCHAR      000AEA R   |   6 TEMP       00062B R
  6 TEVAL      00067D R   |   6 TFLASH     00066C R   |   6 THENN      001583 R
  6 TIB        000BD0 R   |     TIBB    =  000700     |     TIBBASE =  000700 
    TIC     =  000027     |   6 TICK       00145D R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   0002FE R   |   6 TIMER      0002E8 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      0019B2 R   |   6 TNAM3      0019D0 R
  6 TNAM4      0019D6 R   |   6 TNAME      0019AF R   |   6 TOFLASH    000323 R
  6 TOKEN      001138 R   |   6 TOR        000528 R   |   6 TORAM      000363 R
    TRUEE   =  00FFFF     |   6 TWOSL      000AA6 R   |   6 TYPE1      000F0D R
  6 TYPE2      000F19 R   |   6 TYPES      000F08 R   |   6 Timer4Ha   000005 R
    UART2_BR=  005242     |     UART2_BR=  005243     |     UART2_CR=  005244 
    UART2_CR=  005245     |     UART2_CR=  005246     |     UART2_CR=  005247 
    UART2_CR=  005248     |     UART2_CR=  004249     |     UART2_DR=  005241 
    UART2_GT=  00524A     |     UART2_PO=  00500F     |     UART2_PS=  00524B 
    UART2_RX=  000006     |     UART2_SR=  005240     |     UART2_TX=  000005 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_DR =  005241 
    UART_SR =  005240     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000FAE R   |   6 UDOTR      000F8E R   |   6 UEND       000045 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      000830 R   |   6 ULESS      00081A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

  6 UMMOD      0008B0 R   |   6 UMSTA      000989 R   |   6 UNIQ1      001668 R
  6 UNIQU      001649 R   |   6 UNLKEE     001BCD R   |   6 UNLKFL     001BEC R
  6 UNLOCK     001C0B R   |   6 UNTIL      00154B R   |     UOFFSET =  00001C 
  6 UPDATCP    001BA1 R   |   6 UPDATLAS   001B78 R   |   6 UPDATPTR   00216F R
  6 UPDATRUN   001B90 R   |   6 UPDATVP    001BB8 R   |   6 UPL1       000600 R
  6 UPLUS      0005E9 R   |     UPP     =  000006     |     URLAST  =  000020 
    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      0018EC R   |   6 UTYP2      0018FB R   |   6 UTYPE      0018E7 R
    UVP     =  000016     |   6 UZERO      00002B R   |   6 VARIA      001816 R
    VAR_BASE=  000080     |     VAR_TOP =  0007BF     |     VER     =  000003 
  6 VPP        0006AD R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
  6 WHILE      0015D1 R   |   6 WITHI      000895 R   |   6 WORDD      001124 R
  6 WORDS      001A0C R   |   6 WORS1      001A12 R   |   6 WORS2      001A2E R
  6 WR_BYTE    001CB6 R   |   6 WR_WORD    001CD5 R   |   6 WTABLE     0022C7 R
  6 WTAT       0022EB R   |   6 WTINIT     002330 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF     |     X4_FLASH=  004000 
    X6_FLASH=  00FFFF     |     X6_FLASH=  008000     |     XMEM_SIZ=  000000 
  6 XORR       0005D4 R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000AC0 R   |   6 ZL1        0005A1 R   |   6 ZLESS      000598 R
  6 app_spac   002380 R   |   6 baudrate   000369 R   |   6 block_er   001D92 R
  6 clear_ra   000019 R   |   6 clock_in   000052 R   |   6 copy_buf   001DE9 R
  6 copy_buf   001E08 R   |   6 copy_pro   001E08 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001DAE R   |   6 fmove_do   002158 R   |   6 main       000016 R
  6 next_row   002115 R   |   6 no_move    00215F R   |   6 pristine   001E83 R
  6 proceed_   001DB1 R   |   6 reboot     000315 R   |   6 reset_ve   001EEA R
  6 row_eras   001D75 R   |   6 row_eras   001DC2 R   |   6 row_eras   001DE9 R
  6 set_opti   001E57 R   |   6 set_vect   001F8B R   |   6 uart_ini   000064 R
  6 write_ro   001E2D R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2380   flags    0

