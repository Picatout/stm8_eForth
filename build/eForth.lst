ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200         .if NUCLEO
                                    201         bset PC_ODR,#LED2_BIT
                                    202         .else ;DISCOVERY 
                                    203         .if DISCOVERY
                                    204         bres PD_ODR,#LD1_BIT 
                                    205         .endif
                                    206         .endif
                                    207         .endm
                                    208 
                                    209         .macro _ledoff
                                    210         .if NUCLEO 
                                    211         bres PC_ODR,#LED2_BIT
                                    212         .else ;DISCOVERY 
                                    213         .if DISCOVERY
                                    214         bset PD_ODR,#LD1_BIT 
                                    215         .endif 
                                    216         .endif
                                    217         .endm
                                    218 
                                    219 ;**********************************************************
                                    220         .area DATA (ABS)
      000000                        221         .org RAMBASE 
                                    222 ;**********************************************************
                                    223 
                                    224 ;**********************************************************
                                    225         .area SSEG (ABS) ; STACK
      001700                        226         .org 0x1700
      001700                        227         .ds 256 
                                    228 ; space for DATSTK,TIB and STACK         
                                    229 ;**********************************************************
                                    230 
                                    231 ;**********************************************************
                                    232         .area HOME ; vectors table
                                    233 ;**********************************************************
      000000 82 00 00 16            234 	int main	        ; reset
      000004 82 00 00 00            235 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            236 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            237 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            238 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            239 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            240 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            241 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            242 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            243 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            244 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            245 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            246 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            247 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            248 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            249 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            250 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            251 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            252 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            253 	int NonHandledInterrupt	; irq17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000050 82 00 00 00            254 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            255 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            256 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            257 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            258 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            259 	int Timer4Handler	; irq23
      000068 82 00 00 00            260 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            261 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            262 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            263 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            264 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            265 	int NonHandledInterrupt	; irq29
                                    266 
                                    267 ;**********************************************************
                                    268         .area CODE
                                    269 ;**********************************************************
                                    270 
                                    271 ; non handled interrupt reset MCU
      000000                        272 NonHandledInterrupt:
      000000 A6 80            [ 1]  273         ld a, #0x80
      000002 C7 50 D1         [ 1]  274         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    275 	;iret
                                    276 
                                    277 ; used for milliseconds counter 
                                    278 ; MS is 16 bits counter 
      000005                        279 Timer4Handler:
      000005 72 5F 53 42      [ 1]  280 	clr TIM4_SR 
      000009 BE 30            [ 2]  281         ldw x,MS 
      00000B 5C               [ 1]  282         incw x 
      00000C BF 30            [ 2]  283         ldw MS,x
      00000E BE 32            [ 2]  284         ldw x,CNTDWN 
      000010 27 03            [ 1]  285         jreq 1$
      000012 5A               [ 2]  286         decw x 
      000013 BF 32            [ 2]  287         ldw CNTDWN,x 
      000015                        288 1$:         
      000015 80               [11]  289         iret 
                                    290 
                                    291 
                                    292 ;; Main entry points and COLD start data
      000016                        293 main:
                                    294 ; clear all RAM
      000016 AE 00 00         [ 2]  295 	ldw X,#RAMBASE
      000019                        296 clear_ram0:
      000019 7F               [ 1]  297 	clr (X)
      00001A 5C               [ 1]  298 	incw X
      00001B A3 17 FF         [ 2]  299 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  300 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  301         ldw x,#RPP
      000023 94               [ 1]  302         ldw sp,x
                                    303 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  304         inc SEEDX+1 
      000026 3C 3B            [ 1]  305         inc SEEDY+1          
      000028 CC 00 49         [ 2]  306 	jp ORIG
                                    307 
                                    308 ; COLD initialize these variables.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B                        309 UZERO:
      00002B 00 0A                  310         .word      BASEE   ;BASE
      00002D 00 00                  311         .word      0       ; floating point state 
      00002F 00 00                  312         .word      0       ;tmp
      000031 00 00                  313         .word      0       ;>IN
      000033 00 00                  314         .word      0       ;#TIB
      000035 17 00                  315         .word      TIBB    ;TIB
      000037 14 25                  316         .word      INTER   ;'EVAL
      000039 00 00                  317         .word      0       ;HLD
      00003B 35 86                  318         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  319         .word      VAR_BASE   ;variables free space pointer 
      00003F 36 00                  320         .word      app_space ; FLASH free space pointer 
      000041 35 86                  321         .word      LASTN   ;LAST
      000043 00 00                  322         .word      0        ; OFFSET 
      000045 00 00                  323         .word      0       ; TFLASH
                                    324 ;       .word      0       ; URLAST   
      000047 00 00                  325 UEND:   .word      0
                                    326 
      000049                        327 ORIG:   
                                    328 ; initialize SP
      000049 AE 17 FF         [ 2]  329         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  330         LDW     SP,X
      00004D BF 2E            [ 2]  331         LDW     RP0,X
      00004F AE 16 80         [ 2]  332         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  333         LDW     SP0,X
                           000001   334 .if NUCLEO        
                                    335 ; initialize PC_5 as output to control LED2
                                    336 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  337         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  338         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  339         bset PC_DDR,#LED2_BIT
                                    340 .endif 
                           000000   341 .if DISCOVERY
                                    342         bset PD_CR1,#LD1_BIT
                                    343         bset PD_CR2,#LD1_BIT
                                    344         bset PD_DDR,#LD1_BIT 
                                    345 .endif
      000060                        346         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    347 ; initialize clock to HSI
                                    348 ; no divisor 16Mhz 
                                    349 ; Added by Picatout 
      000064                        350 clock_init:
      000064 72 5F 50 C6      [ 1]  351         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  352 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   353 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  354 	ld a,#CLK_SWR_HSI
                           000000   355 .else ; DISCOVERY as 16Mhz crystal
                                    356 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    357 .endif 
      00006E C7 50 C4         [ 1]  358 	ld CLK_SWR,a
      000071 C1 50 C3         [ 1]  359 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  360 	jrne 1$
                                    361         
                                    362 ; initialize UART, 115200 8N1
      000076                        363 uart_init:
                           000001   364 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  365 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    366 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  367 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  368 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  369 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    370 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   371 .else ; DISCOVERY use UART2 
                                    372 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    373 	; configure tx pin
                                    374 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    375 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    376 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    377 .endif
                                    378 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  379 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  380 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  381 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    382 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  383 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  384 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  385 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  386 	bset TIM4_IER,#TIM4_IER_UIE 
                                    387 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  388         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  389         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  390         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  391         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  392         rim
      0000AD CC 1B E3         [ 2]  393         jp  COLD   ;default=MN1
                                    394 
                           000000   395         LINK=0 
                                    396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    397 ;; place MCU in sleep mode with
                                    398 ;; halt opcode 
                                    399 ;; BYE ( -- )
                                    400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        401         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  402         halt 
      0000B7 81               [ 4]  403         ret 
                                    404 
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    406 ; Enable interrupts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    407 ; EI ( -- )
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B8                        409         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  410         rim 
      0000BE 81               [ 4]  411         ret 
                                    412 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    413 ; Disable interrupts
                                    414 ; DI ( -- )
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        416         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  417         sim 
      0000C5 81               [ 4]  418         ret 
                                    419 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    421 ; set interrupt priority level 
                                    422 ; SET-ISP ( n1 n2 -- )
                                    423 ; n1 level {1..3}
                                    424 ; n2 vector {0..29}
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        426         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  427         ldw y,x 
      0000D2 90 FE            [ 2]  428         ldw y,(y)
      0000D4 A6 04            [ 1]  429         ld a,#4 ; 4 slot per register 
                                    430 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  431         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  432         and a,#3 
      0000DA 48               [ 1]  433         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  434         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  435         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  436         clrw y 
      0000E2 90 97            [ 1]  437         ld yl,a 
      0000E4 1D 00 02         [ 2]  438         subw x,#CELLL 
      0000E7 FF               [ 2]  439         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  440         ldw y,x 
      0000EA 90 EE 02         [ 2]  441         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  442         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  443         subw x,#CELLL 
      0000F2 FF               [ 2]  444         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 42         [ 4]  445         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 70         [ 4]  446         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000F9 00 03                  447         .word 3
      0000FB CD 06 2A         [ 4]  448         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B B6         [ 4]  449         call LSHIFT ; creat slot mask 
      000101 CD 08 76         [ 4]  450         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 77         [ 4]  451         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E3         [ 4]  452         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DE         [ 4]  453         call ROT  ; ( reg lshift level )
      00010D CD 06 2A         [ 4]  454         call SWAPP ; ( reg level lshift )
      000110 CD 0B B6         [ 4]  455         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 35         [ 4]  456         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8B         [ 4]  457         call ORR   ; ( reg updated_rval )
      000119 CD 06 2A         [ 4]  458         call SWAPP 
      00011C CC 04 F1         [ 2]  459         jp CSTOR
                                    460 
                                    461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    462 ; sélectionne l'application 
                                    463 ; qui démarre automatique lors 
                                    464 ; d'un COLD start 
                                    465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        466         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 EA         [ 4]  467         call TOKEN 
      00012C CD 06 1A         [ 4]  468         call DUPP 
      00012F CD 04 99         [ 4]  469         call QBRAN 
      000132 02 0F                  470         .word FORGET2
      000134 CD 12 E7         [ 4]  471         call NAMEQ
      000137 CD 07 CD         [ 4]  472         call QDUP 
      00013A CD 04 99         [ 4]  473         call QBRAN 
      00013D 02 0F                  474         .word FORGET2
      00013F                        475         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  476         subw x,#2*CELLL 
      000145 90 5F            [ 1]  477         clrw y 
      000147 FF               [ 2]  478         ldw (x),y 
      000148 90 AE 40 02      [ 2]  479         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  480         ldw (2,x),y 
      00014E CC 1E DF         [ 2]  481         jp EESTORE 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;; Reset dictionary pointer before 
                                    485 ;; forgotten word. RAM space and 
                                    486 ;; interrupt vector defined after 
                                    487 ;; must be resetted also.
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        489         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 EA         [ 4]  490         call TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00015D CD 06 1A         [ 4]  491         call DUPP 
      000160 CD 04 99         [ 4]  492         call QBRAN 
      000163 02 0F                  493         .word FORGET2
      000165 CD 12 E7         [ 4]  494         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CD         [ 4]  495         call QDUP 
      00016B CD 04 99         [ 4]  496         call QBRAN 
      00016E 02 0F                  497         .word FORGET2
                                    498 ; only forget users words 
      000170 CD 06 1A         [ 4]  499         call DUPP ; ( ca na na )
      000173 CD 04 70         [ 4]  500         call DOLIT 
      000176 36 00                  501         .word app_space 
      000178 CD 06 2A         [ 4]  502         call SWAPP 
      00017B CD 09 11         [ 4]  503         call  ULESS 
      00017E CD 04 99         [ 4]  504         call QBRAN 
      000181 01 D1                  505         .word FORGET6 
                                    506 ; ( ca na -- )        
                                    507 ;reset ivec with address >= ca
      000183 CD 06 2A         [ 4]  508         call SWAPP ; ( na ca -- ) 
      000186 CD 20 E2         [ 4]  509         call CHKIVEC ; ( na -- ) 
                                    510 ; start at LAST and link back to na 
                                    511 ; if variable found reset VP at that point.
      000189                        512 FORGET1:
      000189 CD 07 8F         [ 4]  513         call LAST 
      00018C CD 04 E4         [ 4]  514         call AT 
      00018F CD 06 1A         [ 4]  515         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  516         call FREEVAR ; ( -- na last )
      000195 CD 06 1A         [ 4]  517         call DUPP 
      000198 CD 04 70         [ 4]  518         call DOLIT 
      00019B 00 02                  519         .word 2 
      00019D CD 08 D3         [ 4]  520         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E4         [ 4]  521         call AT 
      0001A3 CD 06 1A         [ 4]  522         call DUPP ; ( -- na last a a )
      0001A6 CD 07 63         [ 4]  523         call CNTXT 
      0001A9 CD 04 D2         [ 4]  524         call STORE
      0001AC CD 07 8F         [ 4]  525         call LAST  
      0001AF CD 04 D2         [ 4]  526         call STORE ; ( --  na last )
      0001B2 CD 06 42         [ 4]  527         call OVER 
      0001B5 CD 08 FB         [ 4]  528         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 99         [ 4]  529         call QBRAN 
      0001BB 01 89                  530         .word FORGET1 
                                    531 ; ( na -- )
      0001BD CD 04 70         [ 4]  532         call DOLIT 
      0001C0 00 02                  533         .word 2 
      0001C2 CD 08 D3         [ 4]  534         call SUBB 
      0001C5 CD 07 7F         [ 4]  535         call CPP 
      0001C8 CD 04 D2         [ 4]  536         call STORE  
      0001CB CD 1D 12         [ 4]  537         call UPDATCP 
      0001CE CC 1C E9         [ 2]  538         jp UPDATLAST 
      0001D1                        539 FORGET6: ; tried to forget a RAM or system word 
                                    540 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  541         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  542         ldw y,SP0 
      0001D7 FF               [ 2]  543         ldw (x),y  
      0001D8 CD 09 11         [ 4]  544         call ULESS
      0001DB CD 04 99         [ 4]  545         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001DE 02 01                  546         .word PROTECTED 
      0001E0 CD 13 F3         [ 4]  547         call ABORQ 
      0001E3 1D                     548         .byte 29
      0001E4 20 46 6F 72 20 52 41   549         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        550 PROTECTED:
      000201 CD 13 F3         [ 4]  551         call ABORQ
      000204 0A                     552         .byte 10
      000205 20 50 72 6F 74 65 63   553         .ascii " Protected"
             74 65 64
      00020F                        554 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 F3         [ 4]  555         call ABORQ
      000212 05                     556         .byte 5
      000213 20 77 68 61 74         557         .ascii " what"
      000218                        558 FORGET4:
      000218 CC 06 10         [ 2]  559         jp DROP 
                                    560 
                                    561 
                                    562 ;;;;;;;;;;;;;;;;;;;;;
                                    563 ; if na is variable 
                                    564 ; free variable data  
                                    565 ; FREEVAR ( na -- )
                                    566 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        567         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 1A         [ 4]  568         call DUPP ; ( na na -- )
      000228 CD 05 02         [ 4]  569         CALL CAT  ; ( na c -- )
      00022B CD 0B 98         [ 4]  570         call ONEP ;
      00022E CD 08 3D         [ 4]  571         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 98         [ 4]  572         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 1A         [ 4]  573         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E4         [ 4]  574         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 70         [ 4]  575         call DOLIT 
      00023D 06 D0                  576         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FB         [ 4]  577         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 99         [ 4]  578         call QBRAN 
      000245 02 5B                  579         .word FREEVAR4 
      000247 CD 04 70         [ 4]  580         call DOLIT 
      00024A 00 02                  581         .word 2 
      00024C CD 08 3D         [ 4]  582         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E4         [ 4]  583         call AT 
      000252 CD 07 71         [ 4]  584         call VPP   
      000255 CD 04 D2         [ 4]  585         call STORE 
      000258 CC 1D 29         [ 2]  586         jp UPDATVP 
      00025B                        587 FREEVAR4: ; not variable
      00025B                        588         _DROP 
      00025B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00025E 81               [ 4]  589         RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    590 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    592 ;    SEED ( n -- )
                                    593 ; Initialize PRNG seed with n 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025F                        595         _HEADER SEED,4,"SEED"
      00025F 02 1D                    1         .word LINK 
                           000261     2         LINK=.
      000261 04                       3         .byte 4  
      000262 53 45 45 44              4         .ascii "SEED"
      000266                          5         SEED:
      000266 90 93            [ 1]  596         ldw y,x 
      000268 1C 00 02         [ 2]  597         addw x,#CELLL
      00026B 90 FE            [ 2]  598         ldw y,(y)
      00026D 90 9E            [ 1]  599         ld a,yh 
      00026F B7 38            [ 1]  600         ld SEEDX,a 
      000271 90 9F            [ 1]  601         ld a,yl 
      000273 B7 3A            [ 1]  602         ld SEEDY,a 
      000275 81               [ 4]  603         ret 
                                    604 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    606 ;    RANDOM ( u1 -- u2 )
                                    607 ; Pseudo random number betwen 0 and u1-1
                                    608 ;  XOR32 algorithm 
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000276                        610         _HEADER RANDOM,6,"RANDOM"
      000276 02 61                    1         .word LINK 
                           000278     2         LINK=.
      000278 06                       3         .byte 6  
      000279 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027F                          5         RANDOM:
                                    611 ;local variable 
                           000001   612         SPSAVE=1
                           000002   613         VSIZE=2 
      00027F 52 02            [ 2]  614         sub sp,#VSIZE
      000281 1F 01            [ 2]  615         ldw (SPSAVE,sp),x  
                                    616 ; XTEMP=(SEEDX<<5)^SEEDX 
      000283 90 93            [ 1]  617         ldw y,x 
      000285 90 FE            [ 2]  618         ldw y,(y)
      000287 90 BF 26         [ 2]  619         ldw YTEMP,y 
      00028A BE 38            [ 2]  620 	ldw x,SEEDX 
      00028C 58               [ 2]  621 	sllw x 
      00028D 58               [ 2]  622 	sllw x 
      00028E 58               [ 2]  623 	sllw x 
      00028F 58               [ 2]  624 	sllw x 
      000290 58               [ 2]  625 	sllw x 
      000291 9E               [ 1]  626 	ld a,xh 
      000292 B8 38            [ 1]  627 	xor a,SEEDX 
      000294 B7 24            [ 1]  628 	ld XTEMP,a 
      000296 9F               [ 1]  629 	ld a,xl 
      000297 B8 39            [ 1]  630 	xor a,SEEDX+1 
      000299 B7 25            [ 1]  631 	ld XTEMP+1,a 
                                    632 ; SEEDX=SEEDY 
      00029B BE 3A            [ 2]  633 	ldw x,SEEDY 
      00029D BF 38            [ 2]  634 	ldw SEEDX,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    635 ; SEEDY=SEEDY^(SEEDY>>1)
      00029F 54               [ 2]  636 	srlw x 
      0002A0 9E               [ 1]  637 	ld a,xh 
      0002A1 B8 3A            [ 1]  638 	xor a,SEEDY 
      0002A3 B7 3A            [ 1]  639 	ld SEEDY,a  
      0002A5 9F               [ 1]  640 	ld a,xl 
      0002A6 B8 3B            [ 1]  641 	xor a,SEEDY+1 
      0002A8 B7 3B            [ 1]  642 	ld SEEDY+1,a 
                                    643 ; XTEMP>>3 
      0002AA BE 24            [ 2]  644 	ldw x,XTEMP 
      0002AC 54               [ 2]  645 	srlw x 
      0002AD 54               [ 2]  646 	srlw x 
      0002AE 54               [ 2]  647 	srlw x 
                                    648 ; x=XTEMP^x 
      0002AF 9E               [ 1]  649 	ld a,xh 
      0002B0 B8 24            [ 1]  650 	xor a,XTEMP 
      0002B2 95               [ 1]  651 	ld xh,a 
      0002B3 9F               [ 1]  652 	ld a,xl 
      0002B4 B8 25            [ 1]  653 	xor a,XTEMP+1  
      0002B6 97               [ 1]  654 	ld xl,a 
                                    655 ; SEEDY=x^SEEDY 
      0002B7 B8 3B            [ 1]  656 	xor a,SEEDY+1
      0002B9 97               [ 1]  657 	ld xl,a 
      0002BA 9E               [ 1]  658 	ld a,xh 
      0002BB B8 3A            [ 1]  659 	xor a,SEEDY
      0002BD 95               [ 1]  660 	ld xh,a 
      0002BE BF 3A            [ 2]  661 	ldw SEEDY,x 
                                    662 ; return SEEDY modulo YTEMP  
      0002C0 90 BE 26         [ 2]  663 	ldw y,YTEMP  
      0002C3 65               [ 2]  664 	divw x,y 
      0002C4 1E 01            [ 2]  665 	ldw x,(SPSAVE,sp)
      0002C6 FF               [ 2]  666         ldw (x),y 
      0002C7 5B 02            [ 2]  667         addw sp,#VSIZE 
      0002C9 81               [ 4]  668 	ret 
                                    669 
                                    670 
                                    671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    672 ;; get millisecond counter 
                                    673 ;; msec ( -- u )
                                    674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002CA                        675         _HEADER MSEC,4,"MSEC"
      0002CA 02 78                    1         .word LINK 
                           0002CC     2         LINK=.
      0002CC 04                       3         .byte 4  
      0002CD 4D 53 45 43              4         .ascii "MSEC"
      0002D1                          5         MSEC:
      0002D1 1D 00 02         [ 2]  676         subw x,#CELLL 
      0002D4 90 BE 30         [ 2]  677         ldw y,MS 
      0002D7 FF               [ 2]  678         ldw (x),y 
      0002D8 81               [ 4]  679         ret 
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ; suspend execution for u msec 
                                    683 ;  pause ( u -- )
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002D9                        685         _HEADER PAUSE,5,"PAUSE"
      0002D9 02 CC                    1         .word LINK 
                           0002DB     2         LINK=.
      0002DB 05                       3         .byte 5  
      0002DC 50 41 55 53 45           4         .ascii "PAUSE"
      0002E1                          5         PAUSE:
      0002E1 90 93            [ 1]  686         ldw y,x
      0002E3 90 FE            [ 2]  687         ldw y,(y)
      0002E5 72 B9 00 30      [ 2]  688         addw y,MS 
      0002E9 8F               [10]  689 1$:     wfi  
      0002EA 90 B3 30         [ 2]  690         cpw y,MS  
      0002ED 26 FA            [ 1]  691         jrne 1$        
      0002EF 1C 00 02         [ 2]  692         addw x,#CELLL 
      0002F2 81               [ 4]  693         ret 
                                    694 
                                    695 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    696 ; initialize count down timer 
                                    697 ;  TIMER ( u -- )  milliseconds
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F3                        699         _HEADER TIMER,5,"TIMER"
      0002F3 02 DB                    1         .word LINK 
                           0002F5     2         LINK=.
      0002F5 05                       3         .byte 5  
      0002F6 54 49 4D 45 52           4         .ascii "TIMER"
      0002FB                          5         TIMER:
      0002FB 90 93            [ 1]  700         ldw y,x
      0002FD 90 FE            [ 2]  701         ldw y,(y) 
      0002FF 90 BF 32         [ 2]  702         ldw CNTDWN,y
      000302 1C 00 02         [ 2]  703         addw x,#CELLL 
      000305 81               [ 4]  704         ret 
                                    705 
                                    706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    707 ; check for TIMER exiparition 
                                    708 ;  TIMEOUT? ( -- 0|-1 )
                                    709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000306                        710         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000306 02 F5                    1         .word LINK 
                           000308     2         LINK=.
      000308 08                       3         .byte 8  
      000309 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000311                          5         TIMEOUTQ:
      000311 4F               [ 1]  711         clr a
      000312 1D 00 02         [ 2]  712         subw x,#CELLL 
      000315 90 BE 32         [ 2]  713         ldw y,CNTDWN 
      000318 26 01            [ 1]  714         jrne 1$ 
      00031A 43               [ 1]  715         cpl a 
      00031B E7 01            [ 1]  716 1$:     ld (1,x),a 
      00031D F7               [ 1]  717         ld (x),a 
      00031E 81               [ 4]  718         ret         
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;
                                    721 ; reboot MCU 
                                    722 ; REBOOT ( -- )
                                    723 ;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00031F                        724         _HEADER reboot,6,"REBOOT"
      00031F 03 08                    1         .word LINK 
                           000321     2         LINK=.
      000321 06                       3         .byte 6  
      000322 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000328                          5         reboot:
      000328 CC 00 00         [ 2]  725         jp NonHandledInterrupt
                                    726 
                                    727 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    728 ; compile to flash memory 
                                    729 ; TO-FLASH ( -- )
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032B                        731         _HEADER TOFLASH,8,"TO-FLASH"
      00032B 03 21                    1         .word LINK 
                           00032D     2         LINK=.
      00032D 08                       3         .byte 8  
      00032E 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000336                          5         TOFLASH:
      000336 CD 07 A2         [ 4]  732         call RAMLAST 
      000339 CD 04 E4         [ 4]  733         call AT 
      00033C CD 07 CD         [ 4]  734         call QDUP 
      00033F CD 04 99         [ 4]  735         call QBRAN
      000342 03 65                  736         .word 1$
      000344 CD 13 F3         [ 4]  737         call ABORQ 
      000347 1D                     738         .byte 29
      000348 20 4E 6F 74 20 77 68   739         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000365 90 AE FF FF      [ 2]  740 1$:     ldw y,#-1 
      000369 90 BF 20         [ 2]  741         ldw UTFLASH,y
      00036C 81               [ 4]  742         ret 
                                    743 
                                    744 ;;;;;;;;;;;;;;;;;;;;;;
                                    745 ; compile to RAM 
                                    746 ; TO-RAM ( -- )
                                    747 ;;;;;;;;;;;;;;;;;;;;;;
      00036D                        748         _HEADER TORAM,6,"TO-RAM"
      00036D 03 2D                    1         .word LINK 
                           00036F     2         LINK=.
      00036F 06                       3         .byte 6  
      000370 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000376                          5         TORAM:
      000376 90 5F            [ 1]  749         clrw y 
      000378 90 BF 20         [ 2]  750         ldw UTFLASH,y 
      00037B 81               [ 4]  751         ret 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;; BAUD RATE constants table
                                    755 ; values to put in BRR1 & BRR2 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037C                        757 baudrate: 
      00037C A0 1B                  758 	.byte 0xa0,0x1b ; 2400
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00037E D0 05                  759 	.byte 0xd0,0x5  ; 4800 
      000380 68 03                  760 	.byte 0x68,0x3  ; 9600
      000382 34 01                  761 	.byte 0x34,0x1  ; 19200
      000384 11 06                  762 	.byte 0x11,0x6  ; 57600
      000386 08 0B                  763 	.byte 0x8,0xb   ; 115200
                                    764 
                                    765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    766 ; BAUD RATE CONSTANTS names 
                                    767 ; 2400 baud  ( -- n )
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000388                        769         _HEADER B2K4,4,"B2K4"
      000388 03 6F                    1         .word LINK 
                           00038A     2         LINK=.
      00038A 04                       3         .byte 4  
      00038B 42 32 4B 34              4         .ascii "B2K4"
      00038F                          5         B2K4:
      00038F 1D 00 02         [ 2]  770 	subw x,#CELLL 
      000392 90 5F            [ 1]  771         clrw y
      000394 FF               [ 2]  772         ldw (x),y
      000395 81               [ 4]  773 	ret
                                    774 
                                    775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    776 ; 4800 baud	
                                    777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000396                        778         _HEADER B4K8,4,"B4K8"
      000396 03 8A                    1         .word LINK 
                           000398     2         LINK=.
      000398 04                       3         .byte 4  
      000399 42 34 4B 38              4         .ascii "B4K8"
      00039D                          5         B4K8:
      00039D 1D 00 02         [ 2]  779         subw x,#CELLL 
      0003A0 90 AE 00 02      [ 2]  780         ldw y,#2 
      0003A4 FF               [ 2]  781         ldw (x),y
      0003A5 81               [ 4]  782         ret 
                                    783 
                                    784 ;;;;;;;;;;;;;;;;;;;;
                                    785 ; 9600 baud
                                    786 ;;;;;;;;;;;;;;;;;;;;
      0003A6                        787         _HEADER B9K6,4,"B9K6"
      0003A6 03 98                    1         .word LINK 
                           0003A8     2         LINK=.
      0003A8 04                       3         .byte 4  
      0003A9 42 39 4B 36              4         .ascii "B9K6"
      0003AD                          5         B9K6:
      0003AD 1D 00 02         [ 2]  788         subw x,#CELLL 
      0003B0 90 AE 00 04      [ 2]  789         ldw y,#4 
      0003B4 FF               [ 2]  790         ldw (x),y 
      0003B5 81               [ 4]  791         ret 
                                    792 ;;;;;;;;;;;;;;
                                    793 ; 19200 baud
                                    794 ;;;;;;;;;;;;;;
      0003B6                        795         _HEADER B19K2,5,"B19K2"
      0003B6 03 A8                    1         .word LINK 
                           0003B8     2         LINK=.
      0003B8 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003B9 42 31 39 4B 32           4         .ascii "B19K2"
      0003BE                          5         B19K2:
      0003BE 1D 00 02         [ 2]  796         subw x,#CELLL
      0003C1 90 AE 00 06      [ 2]  797         ldw y,#6 
      0003C5 FF               [ 2]  798         ldw (x),y 
      0003C6 81               [ 4]  799         ret 
                                    800 ;;;;;;;;;;;;;;
                                    801 ; 57600 baud  
                                    802 ;;;;;;;;;;;;;;
      0003C7                        803         _HEADER B57K6,5,"B57K6"
      0003C7 03 B8                    1         .word LINK 
                           0003C9     2         LINK=.
      0003C9 05                       3         .byte 5  
      0003CA 42 35 37 4B 36           4         .ascii "B57K6"
      0003CF                          5         B57K6:
      0003CF 1D 00 02         [ 2]  804         subw x,#CELLL 
      0003D2 90 AE 00 08      [ 2]  805         ldw y,#8 
      0003D6 FF               [ 2]  806         ldw (x),y 
      0003D7 81               [ 4]  807         ret 
                                    808 ;;;;;;;;;;;;;;
                                    809 ; 115200 baud 
                                    810 ;;;;;;;;;;;;;;
      0003D8                        811         _HEADER B115K2,6,"B115K2"
      0003D8 03 C9                    1         .word LINK 
                           0003DA     2         LINK=.
      0003DA 06                       3         .byte 6  
      0003DB 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E1                          5         B115K2:
      0003E1 1D 00 02         [ 2]  812 	subw x,#CELLL 
      0003E4 90 AE 00 0A      [ 2]  813         ldw y,#10 
      0003E8 FF               [ 2]  814         ldw (x),y 
      0003E9 81               [ 4]  815         ret 
                                    816 
                                    817 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    818 ;; set UART2 BAUD rate
                                    819 ;	BAUD ( u -- )
                                    820 ;;;;;;;;;;;;;;;;;;;;;;;
      0003EA                        821         _HEADER BAUD,4,"BAUD"
      0003EA 03 DA                    1         .word LINK 
                           0003EC     2         LINK=.
      0003EC 04                       3         .byte 4  
      0003ED 42 41 55 44              4         .ascii "BAUD"
      0003F1                          5         BAUD:
      0003F1 1D 00 02         [ 2]  822 	subw x,#CELLL
      0003F4 90 AE 03 7C      [ 2]  823         ldw y,#baudrate 
      0003F8 FF               [ 2]  824         ldw (x),y 
      0003F9 CD 08 3D         [ 4]  825         call PLUS
      0003FC 90 93            [ 1]  826         ldw y,x  
      0003FE 90 FE            [ 2]  827         ldw y,(y)
      000400 90 F6            [ 1]  828         ld a,(y)
      000402 88               [ 1]  829         push a 
      000403 90 5C            [ 1]  830         incw y 
      000405 90 F6            [ 1]  831         ld a,(y)
      000407 C7 52 33         [ 1]  832         ld UART_BRR2,a 
      00040A 84               [ 1]  833         pop a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00040B C7 52 32         [ 1]  834         ld UART_BRR1,a 
      00040E 1C 00 02         [ 2]  835         addw x,#CELLL 
      000411 81               [ 4]  836         ret 
                                    837 
                                    838 ;; Device dependent I/O
                                    839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    840 ;       ?RX     ( -- c T | F )
                                    841 ;         Return input byte and true, or false.
                                    842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000412                        843         _HEADER QKEY,4,"?KEY"
      000412 03 EC                    1         .word LINK 
                           000414     2         LINK=.
      000414 04                       3         .byte 4  
      000415 3F 4B 45 59              4         .ascii "?KEY"
      000419                          5         QKEY:
      000419 90 5F            [ 1]  844         CLRW Y 
      00041B 72 0B 52 30 0B   [ 2]  845         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000420 C6 52 31         [ 1]  846         LD    A,UART_DR   ;get char in A
      000423 1D 00 02         [ 2]  847 	SUBW	X,#2
      000426 E7 01            [ 1]  848         LD     (1,X),A
      000428 7F               [ 1]  849 	CLR	(X)
      000429 90 53            [ 2]  850         CPLW     Y
      00042B                        851 INCH:
      00042B 1D 00 02         [ 2]  852 		SUBW	X,#2
      00042E FF               [ 2]  853         LDW     (X),Y
      00042F 81               [ 4]  854         RET
                                    855 
                                    856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    857 ;       TX!     ( c -- )
                                    858 ;       Send character c to  output device.
                                    859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000430                        860         _HEADER EMIT,4,"EMIT"
      000430 04 14                    1         .word LINK 
                           000432     2         LINK=.
      000432 04                       3         .byte 4  
      000433 45 4D 49 54              4         .ascii "EMIT"
      000437                          5         EMIT:
      000437 E6 01            [ 1]  861         LD     A,(1,X)
      000439 1C 00 02         [ 2]  862 	ADDW	X,#2
      00043C 72 0F 52 30 FB   [ 2]  863 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000441 C7 52 31         [ 1]  864         LD    UART_DR,A   ;send A
      000444 81               [ 4]  865         RET
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ;       FC-XON  ( -- )
                                    869 ;       send XON character 
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000445                        871         _HEADER FC_XON,6,"FC-XON"
      000445 04 32                    1         .word LINK 
                           000447     2         LINK=.
      000447 06                       3         .byte 6  
      000448 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044E                          5         FC_XON:
      00044E 1D 00 02         [ 2]  872         subw x,#CELLL 
      000451 7F               [ 1]  873         clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000452 A6 11            [ 1]  874         ld a,#XON 
      000454 E7 01            [ 1]  875         ld (1,x),a 
      000456 CD 04 37         [ 4]  876         call EMIT 
      000459 81               [ 4]  877         ret 
                                    878 
                                    879 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    880 ;       FC-XOFF ( -- )
                                    881 ;       Send XOFF character 
                                    882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00045A                        883         _HEADER FC_XOFF,7,"FC-XOFF"
      00045A 04 47                    1         .word LINK 
                           00045C     2         LINK=.
      00045C 07                       3         .byte 7  
      00045D 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000464                          5         FC_XOFF:
      000464 1D 00 02         [ 2]  884         subw x,#CELLL 
      000467 7F               [ 1]  885         clr (x)
      000468 A6 13            [ 1]  886         ld a,#XOFF 
      00046A E7 01            [ 1]  887         ld (1,x),a 
      00046C CD 04 37         [ 4]  888         call EMIT 
      00046F 81               [ 4]  889         ret
                                    890 
                                    891 ;; The kernel
                                    892 
                                    893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    894 ;       doLIT   ( -- w )
                                    895 ;       Push an inline literal.
                                    896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000470                        897 DOLIT:
      000470 1D 00 02         [ 2]  898 	SUBW X,#2
      000473 16 01            [ 2]  899         ldw y,(1,sp)
      000475 90 FE            [ 2]  900         ldw y,(y)
      000477 FF               [ 2]  901         ldw (x),y
      000478 90 85            [ 2]  902         popw y 
      00047A 90 EC 02         [ 2]  903         jp (2,y)
                                    904 
                                    905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    906 ;       NEXT    ( -- )
                                    907 ;       Code for  single index loop.
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047D                        909         _HEADER DONXT,COMPO+4,"NEXT"
      00047D 04 5C                    1         .word LINK 
                           00047F     2         LINK=.
      00047F 44                       3         .byte COMPO+4  
      000480 4E 45 58 54              4         .ascii "NEXT"
      000484                          5         DONXT:
      000484 16 03            [ 2]  910 	LDW Y,(3,SP)
      000486 90 5A            [ 2]  911 	DECW Y
      000488 2A 07            [ 1]  912 	JRPL NEX1 ; jump if N=0
      00048A 90 85            [ 2]  913 	POPW Y
      00048C 5B 02            [ 2]  914         addw sp,#2
      00048E 90 EC 02         [ 2]  915         JP (2,Y)
      000491                        916 NEX1:
      000491 17 03            [ 2]  917         LDW (3,SP),Y
      000493 90 85            [ 2]  918         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000495 90 FE            [ 2]  919 	LDW Y,(Y)
      000497 90 FC            [ 2]  920 	JP (Y)
                                    921 
                                    922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    923 ;       ?branch ( f -- )
                                    924 ;       Branch if flag is zero.
                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    926 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000499                        927 QBRAN:	
      000499 90 93            [ 1]  928         LDW Y,X
      00049B 1C 00 02         [ 2]  929 	ADDW X,#2
      00049E 90 FE            [ 2]  930 	LDW Y,(Y)
      0004A0 27 13            [ 1]  931         JREQ     BRAN
      0004A2 90 85            [ 2]  932 	POPW Y
      0004A4 90 EC 02         [ 2]  933 	JP (2,Y)
                                    934 
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    936 ;  TBRANCH ( f -- )
                                    937 ;  branch if f==TRUE 
                                    938 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    939 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A7                        940 TBRAN: 
      0004A7 90 93            [ 1]  941         LDW Y,X 
      0004A9 1C 00 02         [ 2]  942         ADDW X,#2 
      0004AC 90 FE            [ 2]  943         LDW Y,(Y)
      0004AE 26 05            [ 1]  944         JRNE BRAN 
      0004B0 90 85            [ 2]  945         POPW Y 
      0004B2 90 EC 02         [ 2]  946         JP (2,Y)
                                    947 
                                    948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    949 ;       branch  ( -- )
                                    950 ;       Branch to an inline address.
                                    951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    952 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B5                        953 BRAN:
      0004B5 90 85            [ 2]  954         POPW Y
      0004B7 90 FE            [ 2]  955 	LDW Y,(Y)
      0004B9 90 FC            [ 2]  956         JP  (Y)
                                    957 
                                    958 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    959 ;       EXECUTE ( ca -- )
                                    960 ;       Execute  word at ca.
                                    961 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BB                        962         _HEADER EXECU,7,"EXECUTE"
      0004BB 04 7F                    1         .word LINK 
                           0004BD     2         LINK=.
      0004BD 07                       3         .byte 7  
      0004BE 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C5                          5         EXECU:
      0004C5 90 93            [ 1]  963         LDW Y,X
      0004C7 1C 00 02         [ 2]  964 	ADDW X,#CELLL 
      0004CA 90 FE            [ 2]  965 	LDW  Y,(Y)
      0004CC 90 FC            [ 2]  966         JP   (Y)
                                    967 
                           000001   968 OPTIMIZE = 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000001   969 .if OPTIMIZE 
                                    970 ; remplacement de CALL EXIT par 
                                    971 ; le opcode de RET.
                                    972 ; Voir modification au code de ";"
                           000000   973 .else 
                                    974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    975 ;       EXIT    ( -- )
                                    976 ;       Terminate a colon definition.
                                    977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    978 ;       _HEADER EXIT,4,"EXIT"
                                    979 EXIT:
                                    980         POPW Y
                                    981         RET
                                    982 .endif 
                                    983 
                                    984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    985 ;       !       ( w a -- )
                                    986 ;       Pop  data stack to memory.
                                    987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CE                        988         _HEADER STORE,1,"!"
      0004CE 04 BD                    1         .word LINK 
                           0004D0     2         LINK=.
      0004D0 01                       3         .byte 1  
      0004D1 21                       4         .ascii "!"
      0004D2                          5         STORE:
      0004D2 90 93            [ 1]  989         LDW Y,X
      0004D4 90 FE            [ 2]  990         LDW Y,(Y)    ;Y=a
      0004D6 89               [ 2]  991         PUSHW X
      0004D7 EE 02            [ 2]  992         LDW X,(2,X) ; x=w 
      0004D9 90 FF            [ 2]  993         LDW (Y),X 
      0004DB 85               [ 2]  994         POPW X  
      0004DC                        995         _DDROP 
      0004DC 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0004DF 81               [ 4]  996         RET     
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;       @       ( a -- w )
                                   1000 ;       Push memory location to stack.
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004E0                       1002         _HEADER AT,1,"@"
      0004E0 04 D0                    1         .word LINK 
                           0004E2     2         LINK=.
      0004E2 01                       3         .byte 1  
      0004E3 40                       4         .ascii "@"
      0004E4                          5         AT:
      0004E4 90 93            [ 1] 1003         LDW Y,X     ;Y = a
      0004E6 90 FE            [ 2] 1004         LDW Y,(Y)   ; address 
      0004E8 90 FE            [ 2] 1005         LDW Y,(Y)   ; value 
      0004EA FF               [ 2] 1006         LDW (X),Y ;w = @Y
      0004EB 81               [ 4] 1007         RET     
                                   1008 
                                   1009 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1010 ;       C!      ( c b -- )
                                   1011 ;       Pop  data stack to byte memory.
                                   1012 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004EC                       1013         _HEADER CSTOR,2,"C!"
      0004EC 04 E2                    1         .word LINK 
                           0004EE     2         LINK=.
      0004EE 02                       3         .byte 2  
      0004EF 43 21                    4         .ascii "C!"
      0004F1                          5         CSTOR:
      0004F1 90 93            [ 1] 1014         LDW Y,X
      0004F3 90 FE            [ 2] 1015 	LDW Y,(Y)    ;Y=b
      0004F5 E6 03            [ 1] 1016         LD A,(3,X)    ;D = c
      0004F7 90 F7            [ 1] 1017         LD  (Y),A     ;store c at b
      0004F9 1C 00 04         [ 2] 1018 	ADDW X,#4 ; DDROP 
      0004FC 81               [ 4] 1019         RET     
                                   1020 
                                   1021 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1022 ;       C@      ( b -- c )
                                   1023 ;       Push byte in memory to  stack.
                                   1024 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FD                       1025         _HEADER CAT,2,"C@"
      0004FD 04 EE                    1         .word LINK 
                           0004FF     2         LINK=.
      0004FF 02                       3         .byte 2  
      000500 43 40                    4         .ascii "C@"
      000502                          5         CAT:
      000502 90 93            [ 1] 1026         LDW Y,X     ;Y=b
      000504 90 FE            [ 2] 1027         LDW Y,(Y)
      000506 90 F6            [ 1] 1028         LD A,(Y)
      000508 E7 01            [ 1] 1029         LD (1,X),A
      00050A 7F               [ 1] 1030         CLR (X)
      00050B 81               [ 4] 1031         RET     
                                   1032 
                                   1033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1034 ;       RP@     ( -- a )
                                   1035 ;       Push current RP to data stack.
                                   1036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050C                       1037         _HEADER RPAT,3,"RP@"
      00050C 04 FF                    1         .word LINK 
                           00050E     2         LINK=.
      00050E 03                       3         .byte 3  
      00050F 52 50 40                 4         .ascii "RP@"
      000512                          5         RPAT:
      000512 90 96            [ 1] 1038         LDW Y,SP    ;save return addr
      000514 1D 00 02         [ 2] 1039         SUBW X,#2
      000517 FF               [ 2] 1040         LDW (X),Y
      000518 81               [ 4] 1041         RET     
                                   1042 
                                   1043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1044 ;       RP!     ( a -- )
                                   1045 ;       Set  return stack pointer.
                                   1046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000519                       1047         _HEADER RPSTO,COMPO+3,"RP!"
      000519 05 0E                    1         .word LINK 
                           00051B     2         LINK=.
      00051B 43                       3         .byte COMPO+3  
      00051C 52 50 21                 4         .ascii "RP!"
      00051F                          5         RPSTO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00051F 90 85            [ 2] 1048         POPW Y
      000521 90 BF 26         [ 2] 1049         LDW YTEMP,Y
      000524 90 93            [ 1] 1050         LDW Y,X
      000526 90 FE            [ 2] 1051         LDW Y,(Y)
      000528 90 94            [ 1] 1052         LDW SP,Y
      00052A 1C 00 02         [ 2] 1053         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052D 92 CC 26         [ 5] 1054         JP [YTEMP]
                                   1055 
                                   1056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1057 ;       R>      ( -- w )
                                   1058 ;       Pop return stack to data stack.
                                   1059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000530                       1060         _HEADER RFROM,2,"R>"
      000530 05 1B                    1         .word LINK 
                           000532     2         LINK=.
      000532 02                       3         .byte 2  
      000533 52 3E                    4         .ascii "R>"
      000535                          5         RFROM:
      000535 1D 00 02         [ 2] 1061         SUBW X,#CELLL 
      000538 16 03            [ 2] 1062         LDW Y,(3,SP)
      00053A FF               [ 2] 1063         LDW (X),Y 
      00053B 90 85            [ 2] 1064         POPW Y 
      00053D 5B 02            [ 2] 1065         ADDW SP,#2 
      00053F 90 FC            [ 2] 1066         JP (Y)
                                   1067 
                                   1068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1069 ;       R@      ( -- w )
                                   1070 ;       Copy top of return stack to stack.
                                   1071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000541                       1072         _HEADER RAT,2,"R@"
      000541 05 32                    1         .word LINK 
                           000543     2         LINK=.
      000543 02                       3         .byte 2  
      000544 52 40                    4         .ascii "R@"
      000546                          5         RAT:
      000546 16 03            [ 2] 1073         ldw y,(3,sp)
      000548 1D 00 02         [ 2] 1074         subw x,#CELLL 
      00054B FF               [ 2] 1075         ldw (x),y 
      00054C 81               [ 4] 1076         ret 
                                   1077 
                                   1078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1079 ;       LOCAL ( n -- )
                                   1080 ;       reserve n slots on return stack
                                   1081 ;       for local variables 
                                   1082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054D                       1083         _HEADER LOCAL,5,"LOCAL"
      00054D 05 43                    1         .word LINK 
                           00054F     2         LINK=.
      00054F 05                       3         .byte 5  
      000550 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000555                          5         LOCAL:
      000555 90 85            [ 2] 1084         POPW Y  
      000557 90 BF 26         [ 2] 1085         LDW YTEMP,Y ; RETURN ADDRESS 
      00055A E6 01            [ 1] 1086         LD A,(1,X)
      00055C 90 97            [ 1] 1087         LD YL,A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00055E A6 02            [ 1] 1088         LD A,#CELLL 
      000560 90 42            [ 4] 1089         MUL Y,A 
      000562 90 BF 24         [ 2] 1090         LDw XTEMP,Y
      000565 90 96            [ 1] 1091         LDW Y,SP 
      000567 72 B2 00 24      [ 2] 1092         SUBW Y,XTEMP
      00056B 90 94            [ 1] 1093         LDW SP,Y 
      00056D 1C 00 02         [ 2] 1094         ADDW X,#CELLL 
      000570 92 CC 26         [ 5] 1095         JP [YTEMP]
                                   1096 
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1098 ;       NRDROP ( n -- )
                                   1099 ;       drop n elements from rstack
                                   1100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000573                       1101         _HEADER NRDROP,6,"NRDROP" 
      000573 05 4F                    1         .word LINK 
                           000575     2         LINK=.
      000575 06                       3         .byte 6  
      000576 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057C                          5         NRDROP:
      00057C 90 85            [ 2] 1102         POPW Y 
      00057E 90 BF 26         [ 2] 1103         LDW YTEMP,Y ; RETURN ADDRESS 
      000581 E6 01            [ 1] 1104         LD A,(1,X)
      000583 90 97            [ 1] 1105         LD YL,A  
      000585 A6 02            [ 1] 1106         LD A,#CELLL 
      000587 90 42            [ 4] 1107         MUL Y,A 
      000589 90 BF 24         [ 2] 1108         LDW XTEMP,Y 
      00058C 90 96            [ 1] 1109         LDW Y,SP 
      00058E 72 B9 00 24      [ 2] 1110         ADDW Y,XTEMP 
      000592 90 94            [ 1] 1111         LDW SP,Y  
      000594 1C 00 02         [ 2] 1112         ADDW X,#CELLL 
      000597 92 CC 26         [ 5] 1113         JP [YTEMP]
                                   1114 
                                   1115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1116 ;        ( n -- w)
                                   1117 ;      fetch nth element ofr return stack 
                                   1118 ;      n==0 is same as R@ 
                                   1119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00059A                       1120         _HEADER NRAT,3,"NR@"
      00059A 05 75                    1         .word LINK 
                           00059C     2         LINK=.
      00059C 03                       3         .byte 3  
      00059D 4E 52 40                 4         .ascii "NR@"
      0005A0                          5         NRAT:
      0005A0 E6 01            [ 1] 1121         LD A,(1,X)
      0005A2 90 97            [ 1] 1122         LD YL,A 
      0005A4 A6 02            [ 1] 1123         LD A,#CELLL 
      0005A6 90 42            [ 4] 1124         MUL Y,A 
      0005A8 90 BF 26         [ 2] 1125         LDW YTEMP,Y 
      0005AB 90 96            [ 1] 1126         LDW Y,SP 
      0005AD 72 A9 00 03      [ 2] 1127         ADDW Y,#3 
      0005B1 72 B9 00 26      [ 2] 1128         ADDW Y,YTEMP 
      0005B5 90 FE            [ 2] 1129         LDW Y,(Y)
      0005B7 FF               [ 2] 1130         LDW (X),Y 
      0005B8 81               [ 4] 1131         RET 
                                   1132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1134 ;       NR! ( w n --  )
                                   1135 ;       store w on nth position of 
                                   1136 ;       return stack 
                                   1137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B9                       1138         _HEADER NRSTO,3,"NR!"
      0005B9 05 9C                    1         .word LINK 
                           0005BB     2         LINK=.
      0005BB 03                       3         .byte 3  
      0005BC 4E 52 21                 4         .ascii "NR!"
      0005BF                          5         NRSTO:
      0005BF 90 96            [ 1] 1139         LDW Y,SP
      0005C1 72 A9 00 03      [ 2] 1140         ADDW Y,#3 
      0005C5 90 BF 26         [ 2] 1141         LDW YTEMP,Y 
      0005C8 E6 01            [ 1] 1142         LD A,(1,X)
      0005CA 90 97            [ 1] 1143         LD YL,A 
      0005CC A6 02            [ 1] 1144         LD A,#CELLL 
      0005CE 90 42            [ 4] 1145         MUL Y,A 
      0005D0 72 B9 00 26      [ 2] 1146         ADDW Y,YTEMP
      0005D4 89               [ 2] 1147         PUSHW X 
      0005D5 EE 02            [ 2] 1148         LDW X,(2,X)
      0005D7 90 FF            [ 2] 1149         LDW (Y),X
      0005D9 85               [ 2] 1150         POPW X 
      0005DA 1C 00 04         [ 2] 1151         ADDW X,#2*CELLL 
      0005DD 81               [ 4] 1152         RET 
                                   1153 
                                   1154 
                                   1155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1156 ;       >R      ( w -- )
                                   1157 ;       Push data stack to return stack.
                                   1158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DE                       1159         _HEADER TOR,COMPO+2,">R"
      0005DE 05 BB                    1         .word LINK 
                           0005E0     2         LINK=.
      0005E0 42                       3         .byte COMPO+2  
      0005E1 3E 52                    4         .ascii ">R"
      0005E3                          5         TOR:
      0005E3 90 85            [ 2] 1160         POPW Y    ;save return addr
      0005E5 90 BF 26         [ 2] 1161         LDW YTEMP,Y
      0005E8 90 93            [ 1] 1162         LDW Y,X
      0005EA 90 FE            [ 2] 1163         LDW Y,(Y)  ; W
      0005EC 90 89            [ 2] 1164         PUSHW Y    ;W >R 
      0005EE 1C 00 02         [ 2] 1165         ADDW X,#2
      0005F1 92 CC 26         [ 5] 1166         JP [YTEMP]
                                   1167 
                                   1168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1169 ;       SP@     ( -- a )
                                   1170 ;       Push current stack pointer.
                                   1171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F4                       1172         _HEADER SPAT,3,"SP@"
      0005F4 05 E0                    1         .word LINK 
                           0005F6     2         LINK=.
      0005F6 03                       3         .byte 3  
      0005F7 53 50 40                 4         .ascii "SP@"
      0005FA                          5         SPAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0005FA 90 93            [ 1] 1173 	LDW Y,X
      0005FC 1D 00 02         [ 2] 1174         SUBW X,#2
      0005FF FF               [ 2] 1175 	LDW (X),Y
      000600 81               [ 4] 1176         RET     
                                   1177 
                                   1178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1179 ;       SP!     ( a -- )
                                   1180 ;       Set  data stack pointer.
                                   1181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000601                       1182         _HEADER SPSTO,3,"SP!"
      000601 05 F6                    1         .word LINK 
                           000603     2         LINK=.
      000603 03                       3         .byte 3  
      000604 53 50 21                 4         .ascii "SP!"
      000607                          5         SPSTO:
      000607 FE               [ 2] 1183         LDW     X,(X)     ;X = a
      000608 81               [ 4] 1184         RET     
                                   1185 
                                   1186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1187 ;       DROP    ( w -- )
                                   1188 ;       Discard top stack item.
                                   1189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000609                       1190         _HEADER DROP,4,"DROP"
      000609 06 03                    1         .word LINK 
                           00060B     2         LINK=.
      00060B 04                       3         .byte 4  
      00060C 44 52 4F 50              4         .ascii "DROP"
      000610                          5         DROP:
      000610 1C 00 02         [ 2] 1191         ADDW X,#2     
      000613 81               [ 4] 1192         RET     
                                   1193 
                                   1194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1195 ;       DUP     ( w -- w w )
                                   1196 ;       Duplicate  top stack item.
                                   1197 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000614                       1198         _HEADER DUPP,3,"DUP"
      000614 06 0B                    1         .word LINK 
                           000616     2         LINK=.
      000616 03                       3         .byte 3  
      000617 44 55 50                 4         .ascii "DUP"
      00061A                          5         DUPP:
      00061A 90 93            [ 1] 1199 	LDW Y,X
      00061C 1D 00 02         [ 2] 1200         SUBW X,#2
      00061F 90 FE            [ 2] 1201 	LDW Y,(Y)
      000621 FF               [ 2] 1202 	LDW (X),Y
      000622 81               [ 4] 1203         RET     
                                   1204 
                                   1205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1206 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1207 ;       Exchange top two stack items.
                                   1208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000623                       1209         _HEADER SWAPP,4,"SWAP"
      000623 06 16                    1         .word LINK 
                           000625     2         LINK=.
      000625 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000626 53 57 41 50              4         .ascii "SWAP"
      00062A                          5         SWAPP:
      00062A 90 93            [ 1] 1210         LDW Y,X
      00062C 90 FE            [ 2] 1211         LDW Y,(Y)
      00062E 90 89            [ 2] 1212         PUSHW Y  
      000630 90 93            [ 1] 1213         LDW Y,X
      000632 90 EE 02         [ 2] 1214         LDW Y,(2,Y)
      000635 FF               [ 2] 1215         LDW (X),Y
      000636 90 85            [ 2] 1216         POPW Y 
      000638 EF 02            [ 2] 1217         LDW (2,X),Y
      00063A 81               [ 4] 1218         RET     
                                   1219 
                                   1220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1221 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1222 ;       Copy second stack item to top.
                                   1223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063B                       1224         _HEADER OVER,4,"OVER"
      00063B 06 25                    1         .word LINK 
                           00063D     2         LINK=.
      00063D 04                       3         .byte 4  
      00063E 4F 56 45 52              4         .ascii "OVER"
      000642                          5         OVER:
      000642 1D 00 02         [ 2] 1225         SUBW X,#2
      000645 90 93            [ 1] 1226         LDW Y,X
      000647 90 EE 04         [ 2] 1227         LDW Y,(4,Y)
      00064A FF               [ 2] 1228         LDW (X),Y
      00064B 81               [ 4] 1229         RET     
                                   1230 
                                   1231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1232 ;       0<      ( n -- t )
                                   1233 ;       Return true if n is negative.
                                   1234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064C                       1235         _HEADER ZLESS,2,"0<"
      00064C 06 3D                    1         .word LINK 
                           00064E     2         LINK=.
      00064E 02                       3         .byte 2  
      00064F 30 3C                    4         .ascii "0<"
      000651                          5         ZLESS:
      000651 A6 FF            [ 1] 1236         LD A,#0xFF
      000653 90 93            [ 1] 1237         LDW Y,X
      000655 90 FE            [ 2] 1238         LDW Y,(Y)
      000657 2B 01            [ 1] 1239         JRMI     ZL1
      000659 4F               [ 1] 1240         CLR A   ;false
      00065A F7               [ 1] 1241 ZL1:    LD     (X),A
      00065B E7 01            [ 1] 1242         LD (1,X),A
      00065D 81               [ 4] 1243 	RET     
                                   1244 
                                   1245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1246 ;       0= ( n -- f )
                                   1247 ;   n==0?
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065E                       1249         _HEADER ZEQUAL,2,"0="
      00065E 06 4E                    1         .word LINK 
                           000660     2         LINK=.
      000660 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000661 30 3D                    4         .ascii "0="
      000663                          5         ZEQUAL:
      000663 A6 FF            [ 1] 1250         LD A,#0XFF 
      000665 90 93            [ 1] 1251         LDW Y,X 
      000667 90 FE            [ 2] 1252         LDW Y,(Y)
      000669 27 02            [ 1] 1253         JREQ ZEQU1 
      00066B A6 00            [ 1] 1254         LD A,#0 
      00066D                       1255 ZEQU1:  
      00066D F7               [ 1] 1256         LD (X),A 
      00066E E7 01            [ 1] 1257         LD (1,X),A         
      000670 81               [ 4] 1258         RET 
                                   1259 
                                   1260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1261 ;       AND     ( w w -- w )
                                   1262 ;       Bitwise AND.
                                   1263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000671                       1264         _HEADER ANDD,3,"AND"
      000671 06 60                    1         .word LINK 
                           000673     2         LINK=.
      000673 03                       3         .byte 3  
      000674 41 4E 44                 4         .ascii "AND"
      000677                          5         ANDD:
      000677 F6               [ 1] 1265         LD  A,(X)    ;D=w
      000678 E4 02            [ 1] 1266         AND A,(2,X)
      00067A E7 02            [ 1] 1267         LD (2,X),A
      00067C E6 01            [ 1] 1268         LD A,(1,X)
      00067E E4 03            [ 1] 1269         AND A,(3,X)
      000680 E7 03            [ 1] 1270         LD (3,X),A
      000682 1C 00 02         [ 2] 1271         ADDW X,#2
      000685 81               [ 4] 1272         RET
                                   1273 
                                   1274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1275 ;       OR      ( w w -- w )
                                   1276 ;       Bitwise inclusive OR.
                                   1277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000686                       1278         _HEADER ORR,2,"OR"
      000686 06 73                    1         .word LINK 
                           000688     2         LINK=.
      000688 02                       3         .byte 2  
      000689 4F 52                    4         .ascii "OR"
      00068B                          5         ORR:
      00068B F6               [ 1] 1279         LD A,(X)    ;D=w
      00068C EA 02            [ 1] 1280         OR A,(2,X)
      00068E E7 02            [ 1] 1281         LD (2,X),A
      000690 E6 01            [ 1] 1282         LD A,(1,X)
      000692 EA 03            [ 1] 1283         OR A,(3,X)
      000694 E7 03            [ 1] 1284         LD (3,X),A
      000696 1C 00 02         [ 2] 1285         ADDW X,#2
      000699 81               [ 4] 1286         RET
                                   1287 
                                   1288 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1289 ;       XOR     ( w w -- w )
                                   1290 ;       Bitwise exclusive OR.
                                   1291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00069A                       1292         _HEADER XORR,3,"XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00069A 06 88                    1         .word LINK 
                           00069C     2         LINK=.
      00069C 03                       3         .byte 3  
      00069D 58 4F 52                 4         .ascii "XOR"
      0006A0                          5         XORR:
      0006A0 F6               [ 1] 1293         LD A,(X)    ;D=w
      0006A1 E8 02            [ 1] 1294         XOR A,(2,X)
      0006A3 E7 02            [ 1] 1295         LD (2,X),A
      0006A5 E6 01            [ 1] 1296         LD A,(1,X)
      0006A7 E8 03            [ 1] 1297         XOR A,(3,X)
      0006A9 E7 03            [ 1] 1298         LD (3,X),A
      0006AB 1C 00 02         [ 2] 1299         ADDW X,#2
      0006AE 81               [ 4] 1300         RET
                                   1301 
                                   1302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1303 ;       UM+     ( u u -- udsum )
                                   1304 ;       Add two unsigned single
                                   1305 ;       and return a double sum.
                                   1306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AF                       1307         _HEADER UPLUS,3,"UM+"
      0006AF 06 9C                    1         .word LINK 
                           0006B1     2         LINK=.
      0006B1 03                       3         .byte 3  
      0006B2 55 4D 2B                 4         .ascii "UM+"
      0006B5                          5         UPLUS:
      0006B5 A6 01            [ 1] 1308         LD A,#1
      0006B7 90 93            [ 1] 1309         LDW Y,X
      0006B9 90 EE 02         [ 2] 1310         LDW Y,(2,Y)
      0006BC 90 BF 26         [ 2] 1311         LDW YTEMP,Y
      0006BF 90 93            [ 1] 1312         LDW Y,X
      0006C1 90 FE            [ 2] 1313         LDW Y,(Y)
      0006C3 72 B9 00 26      [ 2] 1314         ADDW Y,YTEMP
      0006C7 EF 02            [ 2] 1315         LDW (2,X),Y
      0006C9 25 01            [ 1] 1316         JRC     UPL1
      0006CB 4F               [ 1] 1317         CLR A
      0006CC E7 01            [ 1] 1318 UPL1:   LD     (1,X),A
      0006CE 7F               [ 1] 1319         CLR (X)
      0006CF 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;; System and user variables
                                   1323 
                                   1324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1325 ;       doVAR   ( -- a )
                                   1326 ;       run time code 
                                   1327 ;       for VARIABLE and CREATE.
                                   1328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1329 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006D0                       1330 DOVAR:
      0006D0 1D 00 02         [ 2] 1331 	SUBW X,#2
      0006D3 90 85            [ 2] 1332         POPW Y    ;get return addr (pfa)
      0006D5 90 FE            [ 2] 1333         LDW Y,(Y) ; indirect address 
      0006D7 FF               [ 2] 1334         LDW (X),Y    ;push on stack
      0006D8 81               [ 4] 1335         RET     ;go to RET of EXEC
                                   1336 
                                   1337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1338 ;       BASE    ( -- a )
                                   1339 ;       Radix base for numeric I/O.
                                   1340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006D9                       1341         _HEADER BASE,4,"BASE"
      0006D9 06 B1                    1         .word LINK 
                           0006DB     2         LINK=.
      0006DB 04                       3         .byte 4  
      0006DC 42 41 53 45              4         .ascii "BASE"
      0006E0                          5         BASE:
      0006E0 90 AE 00 06      [ 2] 1342 	LDW Y,#UBASE 
      0006E4 1D 00 02         [ 2] 1343 	SUBW X,#2
      0006E7 FF               [ 2] 1344         LDW (X),Y
      0006E8 81               [ 4] 1345         RET
                                   1346 
                                   1347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1348 ;       tmp     ( -- a )
                                   1349 ;       A temporary storage.
                                   1350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E9                       1351         _HEADER TEMP,3,"TMP"
      0006E9 06 DB                    1         .word LINK 
                           0006EB     2         LINK=.
      0006EB 03                       3         .byte 3  
      0006EC 54 4D 50                 4         .ascii "TMP"
      0006EF                          5         TEMP:
      0006EF 90 AE 00 0A      [ 2] 1352 	LDW Y,#UTMP
      0006F3 1D 00 02         [ 2] 1353 	SUBW X,#2
      0006F6 FF               [ 2] 1354         LDW (X),Y
      0006F7 81               [ 4] 1355         RET
                                   1356 
                                   1357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1358 ;       >IN     ( -- a )
                                   1359 ;        Hold parsing pointer.
                                   1360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F8                       1361         _HEADER INN,3,">IN"
      0006F8 06 EB                    1         .word LINK 
                           0006FA     2         LINK=.
      0006FA 03                       3         .byte 3  
      0006FB 3E 49 4E                 4         .ascii ">IN"
      0006FE                          5         INN:
      0006FE 90 AE 00 0C      [ 2] 1362 	LDW Y,#UINN 
      000702 1D 00 02         [ 2] 1363 	SUBW X,#2
      000705 FF               [ 2] 1364         LDW (X),Y
      000706 81               [ 4] 1365         RET
                                   1366 
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1368 ;       #TIB    ( -- a )
                                   1369 ;       Count in terminal input 
                                   1370 ;       buffer.
                                   1371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000707                       1372         _HEADER NTIB,4,"#TIB"
      000707 06 FA                    1         .word LINK 
                           000709     2         LINK=.
      000709 04                       3         .byte 4  
      00070A 23 54 49 42              4         .ascii "#TIB"
      00070E                          5         NTIB:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00070E 90 AE 00 0E      [ 2] 1373 	LDW Y,#UCTIB 
      000712 1D 00 02         [ 2] 1374 	SUBW X,#2
      000715 FF               [ 2] 1375         LDW (X),Y
      000716 81               [ 4] 1376         RET
                                   1377 
                                   1378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1379 ;       TBUF ( -- a )
                                   1380 ;       address of 128 bytes 
                                   1381 ;       transaction buffer
                                   1382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000717                       1383         _HEADER TBUF,4,"TBUF"
      000717 07 09                    1         .word LINK 
                           000719     2         LINK=.
      000719 04                       3         .byte 4  
      00071A 54 42 55 46              4         .ascii "TBUF"
      00071E                          5         TBUF:
      00071E 90 AE 16 80      [ 2] 1384         ldw y,#ROWBUFF
      000722 1D 00 02         [ 2] 1385         subw x,#CELLL
      000725 FF               [ 2] 1386         ldw (x),y 
      000726 81               [ 4] 1387         ret 
                                   1388 
                                   1389 ; systeme variable 
                                   1390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1391 ; compilation destination 
                                   1392 ; TFLASH ( -- A )
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000727                       1394         _HEADER TFLASH,6,"TFLASH"
      000727 07 19                    1         .word LINK 
                           000729     2         LINK=.
      000729 06                       3         .byte 6  
      00072A 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000730                          5         TFLASH:
      000730 1D 00 02         [ 2] 1395         subw x,#CELLL 
      000733 90 AE 00 20      [ 2] 1396         ldw y,#UTFLASH
      000737 FF               [ 2] 1397         ldw (x),y 
      000738 81               [ 4] 1398         ret 
                                   1399 
                                   1400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1401 ;       "EVAL   ( -- a )
                                   1402 ;       Execution vector of EVAL.
                                   1403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000739                       1404         _HEADER TEVAL,5,"'EVAL"
      000739 07 29                    1         .word LINK 
                           00073B     2         LINK=.
      00073B 05                       3         .byte 5  
      00073C 27 45 56 41 4C           4         .ascii "'EVAL"
      000741                          5         TEVAL:
      000741 90 AE 00 12      [ 2] 1405 	LDW Y,#UINTER 
      000745 1D 00 02         [ 2] 1406 	SUBW X,#2
      000748 FF               [ 2] 1407         LDW (X),Y
      000749 81               [ 4] 1408         RET
                                   1409 
                                   1410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1411 ;       HLD     ( -- a )
                                   1412 ;       Hold a pointer of output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1413 ;        string.
                                   1414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00074A                       1415         _HEADER HLD,3,"HLD"
      00074A 07 3B                    1         .word LINK 
                           00074C     2         LINK=.
      00074C 03                       3         .byte 3  
      00074D 48 4C 44                 4         .ascii "HLD"
      000750                          5         HLD:
      000750 90 AE 00 14      [ 2] 1416 	LDW Y,#UHLD 
      000754 1D 00 02         [ 2] 1417 	SUBW X,#2
      000757 FF               [ 2] 1418         LDW (X),Y
      000758 81               [ 4] 1419         RET
                                   1420 
                                   1421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1422 ;       CONTEXT ( -- a )
                                   1423 ;       Start vocabulary search.
                                   1424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000759                       1425         _HEADER CNTXT,7,"CONTEXT"
      000759 07 4C                    1         .word LINK 
                           00075B     2         LINK=.
      00075B 07                       3         .byte 7  
      00075C 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000763                          5         CNTXT:
      000763 90 AE 00 16      [ 2] 1426 	LDW Y,#UCNTXT
      000767 1D 00 02         [ 2] 1427 	SUBW X,#2
      00076A FF               [ 2] 1428         LDW (X),Y
      00076B 81               [ 4] 1429         RET
                                   1430 
                                   1431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1432 ;       VP      ( -- a )
                                   1433 ;       Point to top of variables
                                   1434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076C                       1435         _HEADER VPP,2,"VP"
      00076C 07 5B                    1         .word LINK 
                           00076E     2         LINK=.
      00076E 02                       3         .byte 2  
      00076F 56 50                    4         .ascii "VP"
      000771                          5         VPP:
      000771 90 AE 00 18      [ 2] 1436 	LDW Y,#UVP 
      000775 1D 00 02         [ 2] 1437 	SUBW X,#2
      000778 FF               [ 2] 1438         LDW (X),Y
      000779 81               [ 4] 1439         RET
                                   1440 
                                   1441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1442 ;       CP    ( -- a )
                                   1443 ;       Pointer to top of FLASH 
                                   1444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077A                       1445         _HEADER CPP,2,"CP"
      00077A 07 6E                    1         .word LINK 
                           00077C     2         LINK=.
      00077C 02                       3         .byte 2  
      00077D 43 50                    4         .ascii "CP"
      00077F                          5         CPP:
      00077F 90 AE 00 1A      [ 2] 1446         ldw y,#UCP 
      000783 1D 00 02         [ 2] 1447         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000786 FF               [ 2] 1448         ldw (x),y 
      000787 81               [ 4] 1449         ret                
                                   1450 
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1452 ;       LAST    ( -- a )
                                   1453 ;       Point to last name in 
                                   1454 ;       dictionary.
                                   1455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000788                       1456         _HEADER LAST,4,"LAST"
      000788 07 7C                    1         .word LINK 
                           00078A     2         LINK=.
      00078A 04                       3         .byte 4  
      00078B 4C 41 53 54              4         .ascii "LAST"
      00078F                          5         LAST:
      00078F 90 AE 00 1C      [ 2] 1457 	LDW Y,#ULAST 
      000793 1D 00 02         [ 2] 1458 	SUBW X,#2
      000796 FF               [ 2] 1459         LDW (X),Y
      000797 81               [ 4] 1460         RET
                                   1461 
                                   1462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1463 ; address of system variable URLAST 
                                   1464 ;       RAMLAST ( -- a )
                                   1465 ; RAM dictionary context 
                                   1466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000798                       1467         _HEADER RAMLAST,7,"RAMLAST"
      000798 07 8A                    1         .word LINK 
                           00079A     2         LINK=.
      00079A 07                       3         .byte 7  
      00079B 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A2                          5         RAMLAST:
      0007A2 90 AE 00 22      [ 2] 1468         ldw y,#URLAST 
      0007A6 1D 00 02         [ 2] 1469         subw x,#CELLL 
      0007A9 FF               [ 2] 1470         ldw (x),y 
      0007AA 81               [ 4] 1471         ret 
                                   1472 
                                   1473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1474 ;       OFFSET ( -- a )
                                   1475 ;       address of system 
                                   1476 ;       variable OFFSET 
                                   1477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AB                       1478         _HEADER OFFSET,6,"OFFSET"
      0007AB 07 9A                    1         .word LINK 
                           0007AD     2         LINK=.
      0007AD 06                       3         .byte 6  
      0007AE 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B4                          5         OFFSET:
      0007B4 1D 00 02         [ 2] 1479         subw x,#CELLL
      0007B7 90 AE 00 1E      [ 2] 1480         ldw y,#UOFFSET 
      0007BB FF               [ 2] 1481         ldw (x),y 
      0007BC 81               [ 4] 1482         ret 
                                   1483 
                                   1484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1485 ; adjust jump address 
                                   1486 ;  adding OFFSET
                                   1487 ; ADR-ADJ ( a -- a+offset )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BD                       1489 ADRADJ: 
      0007BD CD 07 B4         [ 4] 1490         call OFFSET 
      0007C0 CD 04 E4         [ 4] 1491         call AT 
      0007C3 CC 08 3D         [ 2] 1492         jp PLUS 
                                   1493 
                                   1494 
                                   1495 ;; Common functions
                                   1496 
                                   1497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1498 ;       ?DUP    ( w -- w w | 0 )
                                   1499 ;       Dup tos if its is not zero.
                                   1500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C6                       1501         _HEADER QDUP,4,"?DUP"
      0007C6 07 AD                    1         .word LINK 
                           0007C8     2         LINK=.
      0007C8 04                       3         .byte 4  
      0007C9 3F 44 55 50              4         .ascii "?DUP"
      0007CD                          5         QDUP:
      0007CD 90 93            [ 1] 1502         LDW Y,X
      0007CF 90 FE            [ 2] 1503 	LDW Y,(Y)
      0007D1 27 04            [ 1] 1504         JREQ     QDUP1
      0007D3 1D 00 02         [ 2] 1505 	SUBW X,#CELLL 
      0007D6 FF               [ 2] 1506         LDW (X),Y
      0007D7 81               [ 4] 1507 QDUP1:  RET
                                   1508 
                                   1509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1510 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1511 ;       Rot 3rd item to top.
                                   1512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D8                       1513         _HEADER ROT,3,"ROT"
      0007D8 07 C8                    1         .word LINK 
                           0007DA     2         LINK=.
      0007DA 03                       3         .byte 3  
      0007DB 52 4F 54                 4         .ascii "ROT"
      0007DE                          5         ROT:
      0007DE 90 93            [ 1] 1514         ldw y,x 
      0007E0 90 FE            [ 2] 1515         ldw y,(y)
      0007E2 90 89            [ 2] 1516         pushw y 
      0007E4 90 93            [ 1] 1517         ldw y,x 
      0007E6 90 EE 04         [ 2] 1518         ldw y,(4,y)
      0007E9 FF               [ 2] 1519         ldw (x),y 
      0007EA 90 93            [ 1] 1520         ldw y,x 
      0007EC 90 EE 02         [ 2] 1521         ldw y,(2,y)
      0007EF EF 04            [ 2] 1522         ldw (4,x),y 
      0007F1 90 85            [ 2] 1523         popw y 
      0007F3 EF 02            [ 2] 1524         ldw (2,x),y
      0007F5 81               [ 4] 1525         ret 
                                   1526 
                                   1527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1528 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1529 ;    rotate left 3 top elements 
                                   1530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F6                       1531     _HEADER NROT,4,"<ROT"
      0007F6 07 DA                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           0007F8     2         LINK=.
      0007F8 04                       3         .byte 4  
      0007F9 3C 52 4F 54              4         .ascii "<ROT"
      0007FD                          5         NROT:
      0007FD 90 93            [ 1] 1532     LDW Y,X 
      0007FF 90 FE            [ 2] 1533     LDW Y,(Y)
      000801 90 89            [ 2] 1534     PUSHW Y ; n3 >R 
      000803 90 93            [ 1] 1535     LDW Y,X 
      000805 90 EE 02         [ 2] 1536     LDW Y,(2,Y) ; Y = n2 
      000808 FF               [ 2] 1537     LDW (X),Y   ; TOS = n2 
      000809 90 93            [ 1] 1538     LDW Y,X    
      00080B 90 EE 04         [ 2] 1539     LDW Y,(4,Y) ; Y = n1 
      00080E EF 02            [ 2] 1540     LDW (2,X),Y ;   = n1 
      000810 90 85            [ 2] 1541     POPW Y  ; R> Y 
      000812 EF 04            [ 2] 1542     LDW (4,X),Y ; = n3 
      000814 81               [ 4] 1543     RET 
                                   1544 
                                   1545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1546 ;       2DROP   ( w w -- )
                                   1547 ;       Discard two items on stack.
                                   1548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000815                       1549         _HEADER DDROP,5,"2DROP"
      000815 07 F8                    1         .word LINK 
                           000817     2         LINK=.
      000817 05                       3         .byte 5  
      000818 32 44 52 4F 50           4         .ascii "2DROP"
      00081D                          5         DDROP:
      00081D 1C 00 04         [ 2] 1550         ADDW X,#4
      000820 81               [ 4] 1551         RET
                                   1552 
                                   1553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1554 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1555 ;       Duplicate top two items.
                                   1556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000821                       1557         _HEADER DDUP,4,"2DUP"
      000821 08 17                    1         .word LINK 
                           000823     2         LINK=.
      000823 04                       3         .byte 4  
      000824 32 44 55 50              4         .ascii "2DUP"
      000828                          5         DDUP:
      000828 1D 00 04         [ 2] 1558         SUBW X,#4
      00082B 90 93            [ 1] 1559         LDW Y,X
      00082D 90 EE 06         [ 2] 1560         LDW Y,(6,Y)
      000830 EF 02            [ 2] 1561         LDW (2,X),Y
      000832 90 93            [ 1] 1562         LDW Y,X
      000834 90 EE 04         [ 2] 1563         LDW Y,(4,Y)
      000837 FF               [ 2] 1564         LDW (X),Y
      000838 81               [ 4] 1565         RET
                                   1566 
                                   1567 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1568 ;       +       ( w w -- sum )
                                   1569 ;       Add top two items.
                                   1570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000839                       1571         _HEADER PLUS,1,"+"
      000839 08 23                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00083B     2         LINK=.
      00083B 01                       3         .byte 1  
      00083C 2B                       4         .ascii "+"
      00083D                          5         PLUS:
      00083D 90 93            [ 1] 1572         LDW Y,X
      00083F 90 FE            [ 2] 1573         LDW Y,(Y)
      000841 90 BF 26         [ 2] 1574         LDW YTEMP,Y
      000844 1C 00 02         [ 2] 1575         ADDW X,#2
      000847 90 93            [ 1] 1576         LDW Y,X
      000849 90 FE            [ 2] 1577         LDW Y,(Y)
      00084B 72 B9 00 26      [ 2] 1578         ADDW Y,YTEMP
      00084F FF               [ 2] 1579         LDW (X),Y
      000850 81               [ 4] 1580         RET
                                   1581 
                                   1582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1583 ;       TRUE ( -- -1 )
                                   1584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000851                       1585         _HEADER TRUE,4,"TRUE"
      000851 08 3B                    1         .word LINK 
                           000853     2         LINK=.
      000853 04                       3         .byte 4  
      000854 54 52 55 45              4         .ascii "TRUE"
      000858                          5         TRUE:
      000858 A6 FF            [ 1] 1586         LD A,#255 
      00085A 1D 00 02         [ 2] 1587         SUBW X,#CELLL
      00085D F7               [ 1] 1588         LD (X),A 
      00085E E7 01            [ 1] 1589         LD (1,X),A 
      000860 81               [ 4] 1590         RET 
                                   1591 
                                   1592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1593 ;       FALSE ( -- 0 )
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000861                       1595         _HEADER FALSE,5,"FALSE"
      000861 08 53                    1         .word LINK 
                           000863     2         LINK=.
      000863 05                       3         .byte 5  
      000864 46 41 4C 53 45           4         .ascii "FALSE"
      000869                          5         FALSE:
      000869 1D 00 02         [ 2] 1596         SUBW X,#CELLL 
      00086C 7F               [ 1] 1597         CLR (X) 
      00086D 6F 01            [ 1] 1598         CLR (1,X)
      00086F 81               [ 4] 1599         RET 
                                   1600 
                                   1601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1602 ;       NOT     ( w -- w )
                                   1603 ;       One's complement of tos.
                                   1604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000870                       1605         _HEADER INVER,3,"NOT"
      000870 08 63                    1         .word LINK 
                           000872     2         LINK=.
      000872 03                       3         .byte 3  
      000873 4E 4F 54                 4         .ascii "NOT"
      000876                          5         INVER:
      000876 90 93            [ 1] 1606         LDW Y,X
      000878 90 FE            [ 2] 1607         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00087A 90 53            [ 2] 1608         CPLW Y
      00087C FF               [ 2] 1609         LDW (X),Y
      00087D 81               [ 4] 1610         RET
                                   1611 
                                   1612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1613 ;       NEGATE  ( n -- -n )
                                   1614 ;       Two's complement of tos.
                                   1615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087E                       1616         _HEADER NEGAT,6,"NEGATE"
      00087E 08 72                    1         .word LINK 
                           000880     2         LINK=.
      000880 06                       3         .byte 6  
      000881 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000887                          5         NEGAT:
      000887 90 93            [ 1] 1617         LDW Y,X
      000889 90 FE            [ 2] 1618         LDW Y,(Y)
      00088B 90 50            [ 2] 1619         NEGW Y
      00088D FF               [ 2] 1620         LDW (X),Y
      00088E 81               [ 4] 1621         RET
                                   1622 
                                   1623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1624 ;       DNEGATE ( d -- -d )
                                   1625 ;       Two's complement of double.
                                   1626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088F                       1627         _HEADER DNEGA,7,"DNEGATE"
      00088F 08 80                    1         .word LINK 
                           000891     2         LINK=.
      000891 07                       3         .byte 7  
      000892 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000899                          5         DNEGA:
      000899 90 93            [ 1] 1628         LDW Y,X
      00089B 90 FE            [ 2] 1629 	LDW Y,(Y)
      00089D 90 53            [ 2] 1630         CPLW Y
      00089F 90 89            [ 2] 1631         PUSHW Y      ; Y >R 
      0008A1 90 93            [ 1] 1632         LDW Y,X
      0008A3 90 EE 02         [ 2] 1633         LDW Y,(2,Y)
      0008A6 90 53            [ 2] 1634         CPLW Y
      0008A8 72 A9 00 01      [ 2] 1635         ADDW Y,#1
      0008AC EF 02            [ 2] 1636         LDW (2,X),Y
      0008AE 90 85            [ 2] 1637         POPW Y       ; R> Y  
      0008B0 24 02            [ 1] 1638         JRNC DN1 
      0008B2 90 5C            [ 1] 1639         INCW Y
      0008B4 FF               [ 2] 1640 DN1:    LDW (X),Y
      0008B5 81               [ 4] 1641         RET
                                   1642 
                                   1643 
                                   1644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1645 ;       S>D ( n -- d )
                                   1646 ; convert single integer to double 
                                   1647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B6                       1648         _HEADER STOD,3,"S>D"
      0008B6 08 91                    1         .word LINK 
                           0008B8     2         LINK=.
      0008B8 03                       3         .byte 3  
      0008B9 53 3E 44                 4         .ascii "S>D"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008BC                          5         STOD:
      0008BC 1D 00 02         [ 2] 1649         SUBW X,#CELLL 
      0008BF 7F               [ 1] 1650         CLR (X) 
      0008C0 6F 01            [ 1] 1651         CLR (1,X) 
      0008C2 90 93            [ 1] 1652         LDW Y,X 
      0008C4 90 EE 02         [ 2] 1653         LDW Y,(2,Y)
      0008C7 2A 05            [ 1] 1654         JRPL 1$
      0008C9 90 AE FF FF      [ 2] 1655         LDW Y,#-1 
      0008CD FF               [ 2] 1656         LDW (X),Y 
      0008CE 81               [ 4] 1657 1$:     RET 
                                   1658 
                                   1659 
                                   1660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1661 ;       -       ( n1 n2 -- n1-n2 )
                                   1662 ;       Subtraction.
                                   1663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CF                       1664         _HEADER SUBB,1,"-"
      0008CF 08 B8                    1         .word LINK 
                           0008D1     2         LINK=.
      0008D1 01                       3         .byte 1  
      0008D2 2D                       4         .ascii "-"
      0008D3                          5         SUBB:
      0008D3 90 93            [ 1] 1665         LDW Y,X
      0008D5 90 FE            [ 2] 1666         LDW Y,(Y) ; n2 
      0008D7 90 BF 26         [ 2] 1667         LDW YTEMP,Y 
      0008DA 1C 00 02         [ 2] 1668         ADDW X,#CELLL 
      0008DD 90 93            [ 1] 1669         LDW Y,X
      0008DF 90 FE            [ 2] 1670         LDW Y,(Y) ; n1 
      0008E1 72 B2 00 26      [ 2] 1671         SUBW Y,YTEMP ; n1-n2 
      0008E5 FF               [ 2] 1672         LDW (X),Y
      0008E6 81               [ 4] 1673         RET
                                   1674 
                                   1675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1676 ;       ABS     ( n -- n )
                                   1677 ;       Return  absolute value of n.
                                   1678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E7                       1679         _HEADER ABSS,3,"ABS"
      0008E7 08 D1                    1         .word LINK 
                           0008E9     2         LINK=.
      0008E9 03                       3         .byte 3  
      0008EA 41 42 53                 4         .ascii "ABS"
      0008ED                          5         ABSS:
      0008ED 90 93            [ 1] 1680         LDW Y,X
      0008EF 90 FE            [ 2] 1681 	LDW Y,(Y)
      0008F1 2A 03            [ 1] 1682         JRPL     AB1     ;negate:
      0008F3 90 50            [ 2] 1683         NEGW     Y     ;else negate hi byte
      0008F5 FF               [ 2] 1684         LDW (X),Y
      0008F6 81               [ 4] 1685 AB1:    RET
                                   1686 
                                   1687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1688 ;       =       ( w w -- t )
                                   1689 ;       Return true if top two are equal.
                                   1690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F7                       1691         _HEADER EQUAL,1,"="
      0008F7 08 E9                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           0008F9     2         LINK=.
      0008F9 01                       3         .byte 1  
      0008FA 3D                       4         .ascii "="
      0008FB                          5         EQUAL:
      0008FB A6 FF            [ 1] 1692         LD A,#0xFF  ;true
      0008FD 90 93            [ 1] 1693         LDW Y,X    
      0008FF 90 FE            [ 2] 1694         LDW Y,(Y)   ; n2 
      000901 1C 00 02         [ 2] 1695         ADDW X,#CELLL 
      000904 F3               [ 2] 1696         CPW Y,(X)   ; n1==n2
      000905 27 01            [ 1] 1697         JREQ EQ1 
      000907 4F               [ 1] 1698         CLR A 
      000908 F7               [ 1] 1699 EQ1:    LD (X),A
      000909 E7 01            [ 1] 1700         LD (1,X),A
      00090B 81               [ 4] 1701 	RET     
                                   1702 
                                   1703 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1704 ;       U<      ( u1 u2 -- f )
                                   1705 ;       Unsigned compare of top two items.
                                   1706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090C                       1707         _HEADER ULESS,2,"U<"
      00090C 08 F9                    1         .word LINK 
                           00090E     2         LINK=.
      00090E 02                       3         .byte 2  
      00090F 55 3C                    4         .ascii "U<"
      000911                          5         ULESS:
      000911 A6 FF            [ 1] 1708         LD A,#0xFF  ;true
      000913 90 93            [ 1] 1709         LDW Y,X    
      000915 90 EE 02         [ 2] 1710         LDW Y,(2,Y) ; u1 
      000918 F3               [ 2] 1711         CPW Y,(X)   ; cpw u1  u2 
      000919 25 01            [ 1] 1712         JRULT     ULES1
      00091B 4F               [ 1] 1713         CLR A
      00091C 1C 00 02         [ 2] 1714 ULES1:  ADDW X,#CELLL 
      00091F F7               [ 1] 1715         LD (X),A
      000920 E7 01            [ 1] 1716         LD (1,X),A
      000922 81               [ 4] 1717 	RET     
                                   1718 
                                   1719 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1721 ;       <       ( n1 n2 -- t )
                                   1722 ;       Signed compare of top two items.
                                   1723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000923                       1724         _HEADER LESS,1,"<"
      000923 09 0E                    1         .word LINK 
                           000925     2         LINK=.
      000925 01                       3         .byte 1  
      000926 3C                       4         .ascii "<"
      000927                          5         LESS:
      000927 A6 FF            [ 1] 1725         LD A,#0xFF  ;true
      000929 90 93            [ 1] 1726         LDW Y,X    
      00092B 90 EE 02         [ 2] 1727         LDW Y,(2,Y)  ; n1 
      00092E F3               [ 2] 1728         CPW Y,(X)  ; n1 < n2 ? 
      00092F 2F 01            [ 1] 1729         JRSLT     LT1
      000931 4F               [ 1] 1730         CLR A
      000932 1C 00 02         [ 2] 1731 LT1:    ADDW X,#CELLL 
      000935 F7               [ 1] 1732         LD (X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000936 E7 01            [ 1] 1733         LD (1,X),A
      000938 81               [ 4] 1734 	RET     
                                   1735 
                                   1736 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1737 ;   U> ( u1 u2 -- f )
                                   1738 ;   f = true if u1>u2 
                                   1739 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000939                       1740         _HEADER UGREAT,2,"U>"
      000939 09 25                    1         .word LINK 
                           00093B     2         LINK=.
      00093B 02                       3         .byte 2  
      00093C 55 3E                    4         .ascii "U>"
      00093E                          5         UGREAT:
      00093E A6 FF            [ 1] 1741         LD A,#255  
      000940 90 93            [ 1] 1742         LDW Y,X 
      000942 90 EE 02         [ 2] 1743         LDW Y,(2,Y)  ; u1 
      000945 F3               [ 2] 1744         CPW Y,(X)  ; u1 > u2 
      000946 22 01            [ 1] 1745         JRUGT UGREAT1 
      000948 4F               [ 1] 1746         CLR A   
      000949                       1747 UGREAT1:
      000949 1C 00 02         [ 2] 1748         ADDW X,#CELLL 
      00094C F7               [ 1] 1749         LD (X),A 
      00094D E7 01            [ 1] 1750         LD (1,X),A 
      00094F 81               [ 4] 1751         RET 
                                   1752 
                                   1753 
                                   1754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1755 ;       >   (n1 n2 -- f )
                                   1756 ;  signed compare n1 n2 
                                   1757 ;  true if n1 > n2 
                                   1758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000950                       1759         _HEADER GREAT,1,">"
      000950 09 3B                    1         .word LINK 
                           000952     2         LINK=.
      000952 01                       3         .byte 1  
      000953 3E                       4         .ascii ">"
      000954                          5         GREAT:
      000954 A6 FF            [ 1] 1760         LD A,#0xFF ;
      000956 90 93            [ 1] 1761         LDW Y,X 
      000958 90 EE 02         [ 2] 1762         LDW Y,(2,Y)  ; n1 
      00095B F3               [ 2] 1763         CPW Y,(X) ; n1 > n2 ?  
      00095C 2C 01            [ 1] 1764         JRSGT GREAT1 
      00095E 4F               [ 1] 1765         CLR  A
      00095F                       1766 GREAT1:
      00095F 1C 00 02         [ 2] 1767         ADDW X,#CELLL 
      000962 F7               [ 1] 1768         LD (X),A 
      000963 E7 01            [ 1] 1769         LD (1,X),A 
      000965 81               [ 4] 1770         RET 
                                   1771 
                                   1772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1773 ;       MAX     ( n n -- n )
                                   1774 ;       Return greater of two top items.
                                   1775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000966                       1776         _HEADER MAX,3,"MAX"
      000966 09 52                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000968     2         LINK=.
      000968 03                       3         .byte 3  
      000969 4D 41 58                 4         .ascii "MAX"
      00096C                          5         MAX:
      00096C 90 93            [ 1] 1777         LDW Y,X    
      00096E 90 FE            [ 2] 1778         LDW Y,(Y) ; n2 
      000970 E3 02            [ 2] 1779         CPW Y,(2,X)   
      000972 2F 02            [ 1] 1780         JRSLT  MAX1
      000974 EF 02            [ 2] 1781         LDW (2,X),Y
      000976 1C 00 02         [ 2] 1782 MAX1:   ADDW X,#2
      000979 81               [ 4] 1783 	RET     
                                   1784 
                                   1785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1786 ;       MIN     ( n n -- n )
                                   1787 ;       Return smaller of top two items.
                                   1788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097A                       1789         _HEADER MIN,3,"MIN"
      00097A 09 68                    1         .word LINK 
                           00097C     2         LINK=.
      00097C 03                       3         .byte 3  
      00097D 4D 49 4E                 4         .ascii "MIN"
      000980                          5         MIN:
      000980 90 93            [ 1] 1790         LDW Y,X    
      000982 90 FE            [ 2] 1791         LDW Y,(Y)  ; n2 
      000984 E3 02            [ 2] 1792         CPW Y,(2,X) 
      000986 2C 02            [ 1] 1793         JRSGT MIN1
      000988 EF 02            [ 2] 1794         LDW (2,X),Y
      00098A 1C 00 02         [ 2] 1795 MIN1:	ADDW X,#2
      00098D 81               [ 4] 1796 	RET     
                                   1797 
                                   1798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1799 ;       WITHIN  ( u ul uh -- t )
                                   1800 ;       Return true if u is within
                                   1801 ;       range of ul and uh. ( ul <= u < uh )
                                   1802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098E                       1803         _HEADER WITHI,6,"WITHIN"
      00098E 09 7C                    1         .word LINK 
                           000990     2         LINK=.
      000990 06                       3         .byte 6  
      000991 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000997                          5         WITHI:
      000997 CD 06 42         [ 4] 1804         CALL     OVER
      00099A CD 08 D3         [ 4] 1805         CALL     SUBB
      00099D CD 05 E3         [ 4] 1806         CALL     TOR
      0009A0 CD 08 D3         [ 4] 1807         CALL     SUBB
      0009A3 CD 05 35         [ 4] 1808         CALL     RFROM
      0009A6 CC 09 11         [ 2] 1809         JP     ULESS
                                   1810 
                                   1811 ;; Divide
                                   1812 
                                   1813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1814 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1815 ;       Unsigned divide of a double by a
                                   1816 ;       single. Return mod and quotient.
                                   1817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1818 ; 2021-02-22
                                   1819 ; changed algorithm for Jeeek one 
                                   1820 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009A9                       1821         _HEADER UMMOD,6,"UM/MOD"
      0009A9 09 90                    1         .word LINK 
                           0009AB     2         LINK=.
      0009AB 06                       3         .byte 6  
      0009AC 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B2                          5         UMMOD:
      0009B2 90 93            [ 1] 1822         LDW     Y,X             ; stack pointer to Y
      0009B4 FE               [ 2] 1823         LDW     X,(X)           ; un
      0009B5 BF 26            [ 2] 1824         LDW     YTEMP,X         ; save un
      0009B7 93               [ 1] 1825         LDW     X,Y
      0009B8 5C               [ 1] 1826         INCW    X               ; drop un
      0009B9 5C               [ 1] 1827         INCW    X
      0009BA 89               [ 2] 1828         PUSHW   X               ; save stack pointer
      0009BB FE               [ 2] 1829         LDW     X,(X)           ; X=udh
      0009BC 26 0B            [ 1] 1830         JRNE    MMSM0
      0009BE 1E 01            [ 2] 1831         LDW    X,(1,SP)
      0009C0 EE 02            [ 2] 1832         LDW    X,(2,X)          ; udl 
      0009C2 90 BE 26         [ 2] 1833         LDW     Y,YTEMP         ;divisor 
      0009C5 65               [ 2] 1834         DIVW    X,Y             ; udl/un 
      0009C6 51               [ 1] 1835         EXGW    X,Y 
      0009C7 20 26            [ 2] 1836         JRA     MMSMb 
      0009C9                       1837 MMSM0:    
      0009C9 90 EE 04         [ 2] 1838         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CC B3 26            [ 2] 1839         CPW     X,YTEMP
      0009CE 25 09            [ 1] 1840         JRULT   MMSM1           ; X is still on the R-stack
      0009D0 85               [ 2] 1841         POPW    X               ; restore stack pointer
      0009D1 90 5F            [ 1] 1842         CLRW    Y
      0009D3 EF 02            [ 2] 1843         LDW     (2,X),Y         ; remainder 0
      0009D5 90 5A            [ 2] 1844         DECW    Y
      0009D7 FF               [ 2] 1845         LDW     (X),Y           ; quotient max. 16 bit value
      0009D8 81               [ 4] 1846         RET
      0009D9                       1847 MMSM1:
      0009D9 A6 10            [ 1] 1848         LD      A,#16           ; loop count
      0009DB 90 58            [ 2] 1849         SLLW    Y               ; udl shift udl into udh
      0009DD                       1850 MMSM3:
      0009DD 59               [ 2] 1851         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DE 25 04            [ 1] 1852         JRC     MMSMa           ; if carry out of rotate
      0009E0 B3 26            [ 2] 1853         CPW     X,YTEMP         ; compare udh to un
      0009E2 25 05            [ 1] 1854         JRULT   MMSM4           ; can't subtract
      0009E4                       1855 MMSMa:
      0009E4 72 B0 00 26      [ 2] 1856         SUBW    X,YTEMP         ; can subtract
      0009E8 98               [ 1] 1857         RCF
      0009E9                       1858 MMSM4:
      0009E9 8C               [ 1] 1859         CCF                     ; quotient bit
      0009EA 90 59            [ 2] 1860         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EC 4A               [ 1] 1861         DEC     A               ; repeat
      0009ED 26 EE            [ 1] 1862         JRNE    MMSM3           ; if A == 0
      0009EF                       1863 MMSMb:
      0009EF BF 26            [ 2] 1864         LDW     YTEMP,X         ; done, save remainder
      0009F1 85               [ 2] 1865         POPW    X               ; restore stack pointer
      0009F2 FF               [ 2] 1866         LDW     (X),Y           ; save quotient
      0009F3 90 BE 26         [ 2] 1867         LDW     Y,YTEMP         ; remainder onto stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0009F6 EF 02            [ 2] 1868         LDW     (2,X),Y
      0009F8 81               [ 4] 1869         RET
                                   1870 
                                   1871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1872 ;   U/MOD ( u1 u2 -- ur uq )
                                   1873 ;   unsigned divide u1/u2 
                                   1874 ;   return remainder and quotient 
                                   1875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F9                       1876         _HEADER USLMOD,5,"U/MOD"
      0009F9 09 AB                    1         .word LINK 
                           0009FB     2         LINK=.
      0009FB 05                       3         .byte 5  
      0009FC 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A01                          5         USLMOD:
      000A01 90 93            [ 1] 1877         LDW Y,X 
      000A03 90 FE            [ 2] 1878         LDW Y,(Y)  ; dividend 
      000A05 89               [ 2] 1879         PUSHW X    ; DP >R 
      000A06 EE 02            [ 2] 1880         LDW X,(2,X) ; divisor 
      000A08 65               [ 2] 1881         DIVW X,Y 
      000A09 89               [ 2] 1882         PUSHW X     ; quotient 
      000A0A 1E 03            [ 2] 1883         LDW X,(3,SP) ; DP 
      000A0C EF 02            [ 2] 1884         LDW (2,X),Y ; remainder 
      000A0E 16 01            [ 2] 1885         LDW Y,(1,SP) ; quotient 
      000A10 FF               [ 2] 1886         LDW (X),Y 
      000A11 5B 04            [ 2] 1887         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A13 81               [ 4] 1888         RET 
                                   1889 
                                   1890 
                                   1891 
                                   1892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1893 ;       M/MOD   ( d n -- r q )
                                   1894 ;       Signed floored divide of double by
                                   1895 ;       single. Return mod and quotient.
                                   1896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A14                       1897         _HEADER MSMOD,5,"M/MOD"
      000A14 09 FB                    1         .word LINK 
                           000A16     2         LINK=.
      000A16 05                       3         .byte 5  
      000A17 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1C                          5         MSMOD:
      000A1C CD 06 1A         [ 4] 1898         CALL	DUPP
      000A1F CD 06 51         [ 4] 1899         CALL	ZLESS
      000A22 CD 06 1A         [ 4] 1900         CALL	DUPP
      000A25 CD 05 E3         [ 4] 1901         CALL	TOR
      000A28 CD 04 99         [ 4] 1902         CALL	QBRAN
      000A2B 0A 39                 1903         .word	MMOD1
      000A2D CD 08 87         [ 4] 1904         CALL	NEGAT
      000A30 CD 05 E3         [ 4] 1905         CALL	TOR
      000A33 CD 08 99         [ 4] 1906         CALL	DNEGA
      000A36 CD 05 35         [ 4] 1907         CALL	RFROM
      000A39 CD 05 E3         [ 4] 1908 MMOD1:	CALL	TOR
      000A3C CD 06 1A         [ 4] 1909         CALL	DUPP
      000A3F CD 06 51         [ 4] 1910         CALL	ZLESS
      000A42 CD 04 99         [ 4] 1911         CALL	QBRAN
      000A45 0A 4D                 1912         .word	MMOD2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A47 CD 05 46         [ 4] 1913         CALL	RAT
      000A4A CD 08 3D         [ 4] 1914         CALL	PLUS
      000A4D CD 05 35         [ 4] 1915 MMOD2:	CALL	RFROM
      000A50 CD 09 B2         [ 4] 1916         CALL	UMMOD
      000A53 CD 05 35         [ 4] 1917         CALL	RFROM
      000A56 CD 04 99         [ 4] 1918         CALL	QBRAN
      000A59 0A 64                 1919         .word	MMOD3
      000A5B CD 06 2A         [ 4] 1920         CALL	SWAPP
      000A5E CD 08 87         [ 4] 1921         CALL	NEGAT
      000A61 CC 06 2A         [ 2] 1922         JP	SWAPP
      000A64 81               [ 4] 1923 MMOD3:	RET
                                   1924 
                                   1925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1926 ;       /MOD    ( n1 n2 -- r q )
                                   1927 ;       Signed divide n1/n2. 
                                   1928 ;       Return mod and quotient.
                                   1929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A65                       1930         _HEADER SLMOD,4,"/MOD"
      000A65 0A 16                    1         .word LINK 
                           000A67     2         LINK=.
      000A67 04                       3         .byte 4  
      000A68 2F 4D 4F 44              4         .ascii "/MOD"
      000A6C                          5         SLMOD:
      000A6C F6               [ 1] 1931         LD A,(X)
      000A6D 88               [ 1] 1932         PUSH A   ; n2 sign 
      000A6E E6 02            [ 1] 1933         LD A,(2,X)
      000A70 88               [ 1] 1934         PUSH A    ; n1 sign 
      000A71 CD 08 ED         [ 4] 1935         CALL ABSS 
      000A74 CD 05 E3         [ 4] 1936         CALL TOR  ; 
      000A77 CD 08 ED         [ 4] 1937         CALL ABSS 
      000A7A CD 05 46         [ 4] 1938         CALL RAT   
      000A7D CD 0A 01         [ 4] 1939         CALL USLMOD 
      000A80 7B 03            [ 1] 1940         LD A,(3,SP)
      000A82 1A 04            [ 1] 1941         OR A,(4,SP)
      000A84 2A 25            [ 1] 1942         JRPL SLMOD8 ; both positive nothing to change 
      000A86 7B 03            [ 1] 1943         LD A,(3,SP)
      000A88 18 04            [ 1] 1944         XOR A,(4,SP)
      000A8A 2A 12            [ 1] 1945         JRPL SLMOD1
                                   1946 ; dividend and divisor are opposite sign          
      000A8C CD 0B 98         [ 4] 1947         CALL ONEP   ; add one to quotient 
      000A8F CD 08 87         [ 4] 1948         CALL NEGAT ; negative quotient
      000A92 CD 05 46         [ 4] 1949         CALL RAT 
      000A95 CD 07 DE         [ 4] 1950         CALL ROT 
      000A98 CD 08 D3         [ 4] 1951         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000A9B CD 06 2A         [ 4] 1952         CALL SWAPP
      000A9E                       1953 SLMOD1:
      000A9E 7B 04            [ 1] 1954         LD A,(4,SP) ; divisor sign 
      000AA0 2A 09            [ 1] 1955         JRPL SLMOD8 
      000AA2 CD 05 E3         [ 4] 1956         CALL TOR 
      000AA5 CD 08 87         [ 4] 1957         CALL NEGAT ; if divisor negative negate remainder 
      000AA8 CD 05 35         [ 4] 1958         CALL RFROM 
      000AAB                       1959 SLMOD8: 
      000AAB 5B 04            [ 2] 1960         ADDW SP,#4 
      000AAD 81               [ 4] 1961         RET 
                                   1962 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1963 
                                   1964 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1965 ;       MOD     ( n n -- r )
                                   1966 ;       Signed divide. Return mod only.
                                   1967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AAE                       1968         _HEADER MODD,3,"MOD"
      000AAE 0A 67                    1         .word LINK 
                           000AB0     2         LINK=.
      000AB0 03                       3         .byte 3  
      000AB1 4D 4F 44                 4         .ascii "MOD"
      000AB4                          5         MODD:
      000AB4 CD 0A 6C         [ 4] 1969 	CALL	SLMOD
      000AB7 CC 06 10         [ 2] 1970 	JP	DROP
                                   1971 
                                   1972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1973 ;       /       ( n n -- q )
                                   1974 ;       Signed divide. Return quotient only.
                                   1975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ABA                       1976         _HEADER SLASH,1,"/"
      000ABA 0A B0                    1         .word LINK 
                           000ABC     2         LINK=.
      000ABC 01                       3         .byte 1  
      000ABD 2F                       4         .ascii "/"
      000ABE                          5         SLASH:
      000ABE CD 0A 6C         [ 4] 1977         CALL	SLMOD
      000AC1 CD 06 2A         [ 4] 1978         CALL	SWAPP
      000AC4 CC 06 10         [ 2] 1979         JP	DROP
                                   1980 
                                   1981 ;; Multiply
                                   1982 
                                   1983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1984 ;       UM*     ( u1 u2 -- ud )
                                   1985 ;       Unsigned multiply. Return 
                                   1986 ;       double product.
                                   1987 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC7                       1988         _HEADER UMSTA,3,"UM*"
      000AC7 0A BC                    1         .word LINK 
                           000AC9     2         LINK=.
      000AC9 03                       3         .byte 3  
      000ACA 55 4D 2A                 4         .ascii "UM*"
      000ACD                          5         UMSTA:
                                   1989 ; stack have 4 bytes u1=a:b u2=c:d
                                   1990         ;; bytes offset on data stack 
                           000002  1991         da=2 
                           000003  1992         db=3 
                           000000  1993         dc=0 
                           000001  1994         dd=1 
                                   1995         ;;;;;; local variables ;;;;;;;;;
                                   1996         ;; product bytes offset on return stack 
                           000001  1997         UD1=1  ; ud bits 31..24
                           000002  1998         UD2=2  ; ud bits 23..16
                           000003  1999         UD3=3  ; ud bits 15..8 
                           000004  2000         UD4=4  ; ud bits 7..0 
                                   2001         ;; local variable for product set to zero   
      000ACD 90 5F            [ 1] 2002         clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000ACF 90 89            [ 2] 2003         pushw y  ; bits 15..0
      000AD1 90 89            [ 2] 2004         pushw y  ; bits 31..16 
      000AD3 E6 03            [ 1] 2005         ld a,(db,x) ; b 
      000AD5 90 97            [ 1] 2006         ld yl,a 
      000AD7 E6 01            [ 1] 2007         ld a,(dd,x)   ; d
      000AD9 90 42            [ 4] 2008         mul y,a    ; b*d  
      000ADB 17 03            [ 2] 2009         ldw (UD3,sp),y ; lowest weight product 
      000ADD E6 03            [ 1] 2010         ld a,(db,x)
      000ADF 90 97            [ 1] 2011         ld yl,a 
      000AE1 E6 00            [ 1] 2012         ld a,(dc,x)
      000AE3 90 42            [ 4] 2013         mul y,a  ; b*c 
                                   2014         ;;; do the partial sum 
      000AE5 72 F9 02         [ 2] 2015         addw y,(UD2,sp)
      000AE8 4F               [ 1] 2016         clr a 
      000AE9 49               [ 1] 2017         rlc a
      000AEA 6B 01            [ 1] 2018         ld (UD1,sp),a 
      000AEC 17 02            [ 2] 2019         ldw (UD2,sp),y 
      000AEE E6 02            [ 1] 2020         ld a,(da,x)
      000AF0 90 97            [ 1] 2021         ld yl,a 
      000AF2 E6 01            [ 1] 2022         ld a,(dd,x)
      000AF4 90 42            [ 4] 2023         mul y,a   ; a*d 
                                   2024         ;; do partial sum 
      000AF6 72 F9 02         [ 2] 2025         addw y,(UD2,sp)
      000AF9 4F               [ 1] 2026         clr a 
      000AFA 19 01            [ 1] 2027         adc a,(UD1,sp)
      000AFC 6B 01            [ 1] 2028         ld (UD1,sp),a  
      000AFE 17 02            [ 2] 2029         ldw (UD2,sp),y 
      000B00 E6 02            [ 1] 2030         ld a,(da,x)
      000B02 90 97            [ 1] 2031         ld yl,a 
      000B04 E6 00            [ 1] 2032         ld a,(dc,x)
      000B06 90 42            [ 4] 2033         mul y,a  ;  a*c highest weight product 
                                   2034         ;;; do partial sum 
      000B08 72 F9 01         [ 2] 2035         addw y,(UD1,sp)
      000B0B FF               [ 2] 2036         ldw (x),y  ; udh 
      000B0C 16 03            [ 2] 2037         ldw y,(UD3,sp)
      000B0E EF 02            [ 2] 2038         ldw (2,x),y  ; udl  
      000B10 5B 04            [ 2] 2039         addw sp,#4 ; drop local variable 
      000B12 81               [ 4] 2040         ret  
                                   2041 
                                   2042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2043 ;       *       ( n n -- n )
                                   2044 ;       Signed multiply. Return 
                                   2045 ;       single product.
                                   2046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B13                       2047         _HEADER STAR,1,"*"
      000B13 0A C9                    1         .word LINK 
                           000B15     2         LINK=.
      000B15 01                       3         .byte 1  
      000B16 2A                       4         .ascii "*"
      000B17                          5         STAR:
      000B17 CD 0A CD         [ 4] 2048 	CALL	UMSTA
      000B1A CC 06 10         [ 2] 2049 	JP	DROP
                                   2050 
                                   2051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2052 ;       M*      ( n n -- d )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2053 ;       Signed multiply. Return 
                                   2054 ;       double product.
                                   2055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B1D                       2056         _HEADER MSTAR,2,"M*"
      000B1D 0B 15                    1         .word LINK 
                           000B1F     2         LINK=.
      000B1F 02                       3         .byte 2  
      000B20 4D 2A                    4         .ascii "M*"
      000B22                          5         MSTAR:
      000B22 CD 08 28         [ 4] 2057         CALL	DDUP
      000B25 CD 06 A0         [ 4] 2058         CALL	XORR
      000B28 CD 06 51         [ 4] 2059         CALL	ZLESS
      000B2B CD 05 E3         [ 4] 2060         CALL	TOR
      000B2E CD 08 ED         [ 4] 2061         CALL	ABSS
      000B31 CD 06 2A         [ 4] 2062         CALL	SWAPP
      000B34 CD 08 ED         [ 4] 2063         CALL	ABSS
      000B37 CD 0A CD         [ 4] 2064         CALL	UMSTA
      000B3A CD 05 35         [ 4] 2065         CALL	RFROM
      000B3D CD 04 99         [ 4] 2066         CALL	QBRAN
      000B40 0B 45                 2067         .word	MSTA1
      000B42 CC 08 99         [ 2] 2068         JP	DNEGA
      000B45 81               [ 4] 2069 MSTA1:	RET
                                   2070 
                                   2071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2072 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2073 ;       Multiply n1 and n2, then divide
                                   2074 ;       by n3. Return mod and quotient.
                                   2075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B46                       2076         _HEADER SSMOD,5,"*/MOD"
      000B46 0B 1F                    1         .word LINK 
                           000B48     2         LINK=.
      000B48 05                       3         .byte 5  
      000B49 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B4E                          5         SSMOD:
      000B4E CD 05 E3         [ 4] 2077         CALL     TOR
      000B51 CD 0B 22         [ 4] 2078         CALL     MSTAR
      000B54 CD 05 35         [ 4] 2079         CALL     RFROM
      000B57 CC 0A 1C         [ 2] 2080         JP     MSMOD
                                   2081 
                                   2082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2083 ;       */      ( n1 n2 n3 -- q )
                                   2084 ;       Multiply n1 by n2, then divide
                                   2085 ;       by n3. Return quotient only.
                                   2086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B5A                       2087         _HEADER STASL,2,"*/"
      000B5A 0B 48                    1         .word LINK 
                           000B5C     2         LINK=.
      000B5C 02                       3         .byte 2  
      000B5D 2A 2F                    4         .ascii "*/"
      000B5F                          5         STASL:
      000B5F CD 0B 4E         [ 4] 2088         CALL	SSMOD
      000B62 CD 06 2A         [ 4] 2089         CALL	SWAPP
      000B65 CC 06 10         [ 2] 2090         JP	DROP
                                   2091 
                                   2092 ;; Miscellaneous
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2093 
                                   2094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2095 ;       2+   ( a -- a )
                                   2096 ;       Add cell size in byte to address.
                                   2097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B68                       2098         _HEADER CELLP,2,"2+"
      000B68 0B 5C                    1         .word LINK 
                           000B6A     2         LINK=.
      000B6A 02                       3         .byte 2  
      000B6B 32 2B                    4         .ascii "2+"
      000B6D                          5         CELLP:
      000B6D 90 93            [ 1] 2099         LDW Y,X
      000B6F 90 FE            [ 2] 2100 	LDW Y,(Y)
      000B71 72 A9 00 02      [ 2] 2101         ADDW Y,#CELLL 
      000B75 FF               [ 2] 2102         LDW (X),Y
      000B76 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2106 ;       2-   ( a -- a )
                                   2107 ;       Subtract 2 from address.
                                   2108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B77                       2109         _HEADER CELLM,2,"2-"
      000B77 0B 6A                    1         .word LINK 
                           000B79     2         LINK=.
      000B79 02                       3         .byte 2  
      000B7A 32 2D                    4         .ascii "2-"
      000B7C                          5         CELLM:
      000B7C 90 93            [ 1] 2110         LDW Y,X
      000B7E 90 FE            [ 2] 2111 	LDW Y,(Y)
      000B80 72 A2 00 02      [ 2] 2112         SUBW Y,#CELLL
      000B84 FF               [ 2] 2113         LDW (X),Y
      000B85 81               [ 4] 2114         RET
                                   2115 
                                   2116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2117 ;       2*   ( n -- n )
                                   2118 ;       Multiply tos by 2.
                                   2119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B86                       2120         _HEADER CELLS,2,"2*"
      000B86 0B 79                    1         .word LINK 
                           000B88     2         LINK=.
      000B88 02                       3         .byte 2  
      000B89 32 2A                    4         .ascii "2*"
      000B8B                          5         CELLS:
      000B8B 90 93            [ 1] 2121         LDW Y,X
      000B8D 90 FE            [ 2] 2122 	LDW Y,(Y)
      000B8F 90 58            [ 2] 2123         SLAW Y
      000B91 FF               [ 2] 2124         LDW (X),Y
      000B92 81               [ 4] 2125         RET
                                   2126 
                                   2127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2128 ;       1+      ( a -- a )
                                   2129 ;       Add cell size in byte 
                                   2130 ;       to address.
                                   2131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B93                       2132         _HEADER ONEP,2,"1+"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000B93 0B 88                    1         .word LINK 
                           000B95     2         LINK=.
      000B95 02                       3         .byte 2  
      000B96 31 2B                    4         .ascii "1+"
      000B98                          5         ONEP:
      000B98 90 93            [ 1] 2133         LDW Y,X
      000B9A 90 FE            [ 2] 2134 	LDW Y,(Y)
      000B9C 90 5C            [ 1] 2135         INCW Y
      000B9E FF               [ 2] 2136         LDW (X),Y
      000B9F 81               [ 4] 2137         RET
                                   2138 
                                   2139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2140 ;       1-      ( a -- a )
                                   2141 ;       Subtract 2 from address.
                                   2142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA0                       2143         _HEADER ONEM,2,"1-"
      000BA0 0B 95                    1         .word LINK 
                           000BA2     2         LINK=.
      000BA2 02                       3         .byte 2  
      000BA3 31 2D                    4         .ascii "1-"
      000BA5                          5         ONEM:
      000BA5 90 93            [ 1] 2144         LDW Y,X
      000BA7 90 FE            [ 2] 2145 	LDW Y,(Y)
      000BA9 90 5A            [ 2] 2146         DECW Y
      000BAB FF               [ 2] 2147         LDW (X),Y
      000BAC 81               [ 4] 2148         RET
                                   2149 
                                   2150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2151 ;  shift left n times 
                                   2152 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAD                       2154         _HEADER LSHIFT,6,"LSHIFT"
      000BAD 0B A2                    1         .word LINK 
                           000BAF     2         LINK=.
      000BAF 06                       3         .byte 6  
      000BB0 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BB6                          5         LSHIFT:
      000BB6 E6 01            [ 1] 2155         ld a,(1,x)
      000BB8 1C 00 02         [ 2] 2156         addw x,#CELLL 
      000BBB 90 93            [ 1] 2157         ldw y,x 
      000BBD 90 FE            [ 2] 2158         ldw y,(y)
      000BBF                       2159 LSHIFT1:
      000BBF 4D               [ 1] 2160         tnz a 
      000BC0 27 05            [ 1] 2161         jreq LSHIFT4 
      000BC2 90 58            [ 2] 2162         sllw y 
      000BC4 4A               [ 1] 2163         dec a 
      000BC5 20 F8            [ 2] 2164         jra LSHIFT1 
      000BC7                       2165 LSHIFT4:
      000BC7 FF               [ 2] 2166         ldw (x),y 
      000BC8 81               [ 4] 2167         ret 
                                   2168 
                                   2169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2170 ; shift right n times                 
                                   2171 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BC9                       2173         _HEADER RSHIFT,6,"RSHIFT"
      000BC9 0B AF                    1         .word LINK 
                           000BCB     2         LINK=.
      000BCB 06                       3         .byte 6  
      000BCC 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BD2                          5         RSHIFT:
      000BD2 E6 01            [ 1] 2174         ld a,(1,x)
      000BD4 1C 00 02         [ 2] 2175         addw x,#CELLL 
      000BD7 90 93            [ 1] 2176         ldw y,x 
      000BD9 90 FE            [ 2] 2177         ldw y,(y)
      000BDB                       2178 RSHIFT1:
      000BDB 4D               [ 1] 2179         tnz a 
      000BDC 27 05            [ 1] 2180         jreq RSHIFT4 
      000BDE 90 54            [ 2] 2181         srlw y 
      000BE0 4A               [ 1] 2182         dec a 
      000BE1 20 F8            [ 2] 2183         jra RSHIFT1 
      000BE3                       2184 RSHIFT4:
      000BE3 FF               [ 2] 2185         ldw (x),y 
      000BE4 81               [ 4] 2186         ret 
                                   2187 
                                   2188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2189 ;       2/      ( n -- n )
                                   2190 ;       divide  tos by 2.
                                   2191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE5                       2192         _HEADER TWOSL,2,"2/"
      000BE5 0B CB                    1         .word LINK 
                           000BE7     2         LINK=.
      000BE7 02                       3         .byte 2  
      000BE8 32 2F                    4         .ascii "2/"
      000BEA                          5         TWOSL:
      000BEA 90 93            [ 1] 2193         LDW Y,X
      000BEC 90 FE            [ 2] 2194 	LDW Y,(Y)
      000BEE 90 57            [ 2] 2195         SRAW Y
      000BF0 FF               [ 2] 2196         LDW (X),Y
      000BF1 81               [ 4] 2197         RET
                                   2198 
                                   2199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2200 ;       BL      ( -- 32 )
                                   2201 ;       Return 32,  blank character.
                                   2202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF2                       2203         _HEADER BLANK,2,"BL"
      000BF2 0B E7                    1         .word LINK 
                           000BF4     2         LINK=.
      000BF4 02                       3         .byte 2  
      000BF5 42 4C                    4         .ascii "BL"
      000BF7                          5         BLANK:
      000BF7 1D 00 02         [ 2] 2204         SUBW X,#2
      000BFA 90 AE 00 20      [ 2] 2205 	LDW Y,#32
      000BFE FF               [ 2] 2206         LDW (X),Y
      000BFF 81               [ 4] 2207         RET
                                   2208 
                                   2209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2210 ;         0     ( -- 0)
                                   2211 ;         Return 0.
                                   2212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C00                       2213         _HEADER ZERO,1,"0"
      000C00 0B F4                    1         .word LINK 
                           000C02     2         LINK=.
      000C02 01                       3         .byte 1  
      000C03 30                       4         .ascii "0"
      000C04                          5         ZERO:
      000C04 1D 00 02         [ 2] 2214         SUBW X,#2
      000C07 90 5F            [ 1] 2215 	CLRW Y
      000C09 FF               [ 2] 2216         LDW (X),Y
      000C0A 81               [ 4] 2217         RET
                                   2218 
                                   2219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2220 ;         1     ( -- 1)
                                   2221 ;         Return 1.
                                   2222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0B                       2223         _HEADER ONE,1,"1"
      000C0B 0C 02                    1         .word LINK 
                           000C0D     2         LINK=.
      000C0D 01                       3         .byte 1  
      000C0E 31                       4         .ascii "1"
      000C0F                          5         ONE:
      000C0F 1D 00 02         [ 2] 2224         SUBW X,#2
      000C12 90 AE 00 01      [ 2] 2225 	LDW Y,#1
      000C16 FF               [ 2] 2226         LDW (X),Y
      000C17 81               [ 4] 2227         RET
                                   2228 
                                   2229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2230 ;         -1    ( -- -1)
                                   2231 ;   Return -1
                                   2232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C18                       2233         _HEADER MONE,2,"-1"
      000C18 0C 0D                    1         .word LINK 
                           000C1A     2         LINK=.
      000C1A 02                       3         .byte 2  
      000C1B 2D 31                    4         .ascii "-1"
      000C1D                          5         MONE:
      000C1D 1D 00 02         [ 2] 2234         SUBW X,#2
      000C20 90 AE FF FF      [ 2] 2235 	LDW Y,#0xFFFF
      000C24 FF               [ 2] 2236         LDW (X),Y
      000C25 81               [ 4] 2237         RET
                                   2238 
                                   2239 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2240 ;       >CHAR   ( c -- c )
                                   2241 ;       Filter non-printing characters.
                                   2242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C26                       2243         _HEADER TCHAR,5,">CHAR"
      000C26 0C 1A                    1         .word LINK 
                           000C28     2         LINK=.
      000C28 05                       3         .byte 5  
      000C29 3E 43 48 41 52           4         .ascii ">CHAR"
      000C2E                          5         TCHAR:
      000C2E E6 01            [ 1] 2244         ld a,(1,x)
      000C30 A1 20            [ 1] 2245         cp a,#32  
      000C32 2B 05            [ 1] 2246         jrmi 1$ 
      000C34 A1 7F            [ 1] 2247         cp a,#127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C36 2A 01            [ 1] 2248         jrpl 1$ 
      000C38 81               [ 4] 2249         ret 
      000C39 A6 5F            [ 1] 2250 1$:     ld a,#'_ 
      000C3B E7 01            [ 1] 2251         ld (1,x),a 
      000C3D 81               [ 4] 2252         ret 
                                   2253 
                                   2254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2255 ;       DEPTH   ( -- n )
                                   2256 ;       Return  depth of  data stack.
                                   2257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3E                       2258         _HEADER DEPTH,5,"DEPTH"
      000C3E 0C 28                    1         .word LINK 
                           000C40     2         LINK=.
      000C40 05                       3         .byte 5  
      000C41 44 45 50 54 48           4         .ascii "DEPTH"
      000C46                          5         DEPTH:
      000C46 90 BE 2C         [ 2] 2259         LDW Y,SP0    ;save data stack ptr
      000C49 BF 24            [ 2] 2260 	LDW XTEMP,X
      000C4B 72 B2 00 24      [ 2] 2261         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C4F 90 57            [ 2] 2262         SRAW Y    ;Y = #stack items
      000C51 1D 00 02         [ 2] 2263 	SUBW X,#2
      000C54 FF               [ 2] 2264         LDW (X),Y     ; if neg, underflow
      000C55 81               [ 4] 2265         RET
                                   2266 
                                   2267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2268 ;       PICK    ( ... +n -- ... w )
                                   2269 ;       Copy  nth stack item to tos.
                                   2270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C56                       2271         _HEADER PICK,4,"PICK"
      000C56 0C 40                    1         .word LINK 
                           000C58     2         LINK=.
      000C58 04                       3         .byte 4  
      000C59 50 49 43 4B              4         .ascii "PICK"
      000C5D                          5         PICK:
      000C5D 90 93            [ 1] 2272         LDW Y,X   ;D = n1
      000C5F 90 FE            [ 2] 2273         LDW Y,(Y)
                                   2274 ; modified for standard compliance          
                                   2275 ; 0 PICK must be equivalent to DUP 
      000C61 90 5C            [ 1] 2276         INCW Y 
      000C63 90 58            [ 2] 2277         SLAW Y
      000C65 BF 24            [ 2] 2278         LDW XTEMP,X
      000C67 72 B9 00 24      [ 2] 2279         ADDW Y,XTEMP
      000C6B 90 FE            [ 2] 2280         LDW Y,(Y)
      000C6D FF               [ 2] 2281         LDW (X),Y
      000C6E 81               [ 4] 2282         RET
                                   2283 
                                   2284 ;; Memory access
                                   2285 
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2287 ;       +!      ( n a -- )
                                   2288 ;       Add n to  contents at 
                                   2289 ;       address a.
                                   2290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C6F                       2291         _HEADER PSTOR,2,"+!"
      000C6F 0C 58                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                           000C71     2         LINK=.
      000C71 02                       3         .byte 2  
      000C72 2B 21                    4         .ascii "+!"
      000C74                          5         PSTOR:
      000C74 89               [ 2] 2292         PUSHW X   ; R: DP 
      000C75 90 93            [ 1] 2293         LDW Y,X 
      000C77 FE               [ 2] 2294         LDW X,(X) ; a 
      000C78 90 EE 02         [ 2] 2295         LDW Y,(2,Y)  ; n 
      000C7B 90 89            [ 2] 2296         PUSHW Y      ; R: DP n 
      000C7D 90 93            [ 1] 2297         LDW Y,X 
      000C7F 90 FE            [ 2] 2298         LDW Y,(Y)
      000C81 72 F9 01         [ 2] 2299         ADDW Y,(1,SP) ; *a + n 
      000C84 FF               [ 2] 2300         LDW (X),Y 
      000C85 1E 03            [ 2] 2301         LDW X,(3,SP) ; DP
      000C87 1C 00 04         [ 2] 2302         ADDW X,#2*CELLL  ; ( n a -- )  
      000C8A 5B 04            [ 2] 2303         ADDW SP,#2*CELLL ; R: DP n -- 
      000C8C 81               [ 4] 2304         RET 
                                   2305                 
                                   2306 
                                   2307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2308 ;       2!      ( d a -- )
                                   2309 ;       Store  double integer 
                                   2310 ;       to address a.
                                   2311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8D                       2312         _HEADER DSTOR,2,"2!"
      000C8D 0C 71                    1         .word LINK 
                           000C8F     2         LINK=.
      000C8F 02                       3         .byte 2  
      000C90 32 21                    4         .ascii "2!"
      000C92                          5         DSTOR:
      000C92 90 93            [ 1] 2313         LDW Y,X 
      000C94 89               [ 2] 2314         PUSHW X 
      000C95 FE               [ 2] 2315         LDW X,(X) ; a 
      000C96 90 EE 02         [ 2] 2316         LDW Y,(2,Y) ; dhi 
      000C99 FF               [ 2] 2317         LDW (X),Y 
      000C9A 16 01            [ 2] 2318         LDW Y,(1,SP)  
      000C9C 90 EE 04         [ 2] 2319         LDW Y,(4,Y) ; dlo 
      000C9F EF 02            [ 2] 2320         LDW (2,X),Y  
      000CA1 85               [ 2] 2321         POPW X 
      000CA2 1C 00 06         [ 2] 2322         ADDW X,#3*CELLL 
      000CA5 81               [ 4] 2323         RET 
                                   2324 
                                   2325 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2326 ;       2@      ( a -- d )
                                   2327 ;       Fetch double integer 
                                   2328 ;       from address a.
                                   2329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA6                       2330         _HEADER DAT,2,"2@"
      000CA6 0C 8F                    1         .word LINK 
                           000CA8     2         LINK=.
      000CA8 02                       3         .byte 2  
      000CA9 32 40                    4         .ascii "2@"
      000CAB                          5         DAT:
      000CAB 90 93            [ 1] 2331         ldw y,x 
      000CAD 1D 00 02         [ 2] 2332         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB0 90 FE            [ 2] 2333         ldw y,(y) ;address 
      000CB2 90 89            [ 2] 2334         pushw y  
      000CB4 90 FE            [ 2] 2335         ldw y,(y) ; dhi 
      000CB6 FF               [ 2] 2336         ldw (x),y 
      000CB7 90 85            [ 2] 2337         popw y 
      000CB9 90 EE 02         [ 2] 2338         ldw y,(2,y) ; dlo 
      000CBC EF 02            [ 2] 2339         ldw (2,x),y 
      000CBE 81               [ 4] 2340         ret 
                                   2341 
                                   2342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2343 ;       COUNT   ( b -- b +n )
                                   2344 ;       Return count byte of a string
                                   2345 ;       and add 1 to byte address.
                                   2346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBF                       2347         _HEADER COUNT,5,"COUNT"
      000CBF 0C A8                    1         .word LINK 
                           000CC1     2         LINK=.
      000CC1 05                       3         .byte 5  
      000CC2 43 4F 55 4E 54           4         .ascii "COUNT"
      000CC7                          5         COUNT:
      000CC7 90 93            [ 1] 2348         ldw y,x 
      000CC9 90 FE            [ 2] 2349         ldw y,(y) ; address 
      000CCB 90 F6            [ 1] 2350         ld a,(y)  ; count 
      000CCD 90 5C            [ 1] 2351         incw y 
      000CCF FF               [ 2] 2352         ldw (x),y 
      000CD0 1D 00 02         [ 2] 2353         subw x,#CELLL 
      000CD3 E7 01            [ 1] 2354         ld (1,x),a 
      000CD5 7F               [ 1] 2355         clr (x)
      000CD6 81               [ 4] 2356         ret 
                                   2357 
                                   2358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2359 ;       HERE    ( -- a )
                                   2360 ;       Return  top of  variables
                                   2361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CD7                       2362         _HEADER HERE,4,"HERE"
      000CD7 0C C1                    1         .word LINK 
                           000CD9     2         LINK=.
      000CD9 04                       3         .byte 4  
      000CDA 48 45 52 45              4         .ascii "HERE"
      000CDE                          5         HERE:
      000CDE 90 AE 00 18      [ 2] 2363       	ldw y,#UVP 
      000CE2 90 FE            [ 2] 2364         ldw y,(y)
      000CE4 1D 00 02         [ 2] 2365         subw x,#CELLL 
      000CE7 FF               [ 2] 2366         ldw (x),y 
      000CE8 81               [ 4] 2367         ret 
                                   2368 
                                   2369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2370 ;       PAD     ( -- a )
                                   2371 ;       Return address of text buffer
                                   2372 ;       above  code dictionary.
                                   2373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE9                       2374         _HEADER PAD,3,"PAD"
      000CE9 0C D9                    1         .word LINK 
                           000CEB     2         LINK=.
      000CEB 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000CEC 50 41 44                 4         .ascii "PAD"
      000CEF                          5         PAD:
      000CEF CD 0C DE         [ 4] 2375         CALL     HERE
      000CF2                       2376         _DOLIT   80
      000CF2 CD 04 70         [ 4]    1     CALL DOLIT 
      000CF5 00 50                    2     .word 80 
      000CF7 CC 08 3D         [ 2] 2377         JP     PLUS
                                   2378 
                                   2379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2380 ;       TIB     ( -- a )
                                   2381 ;       Return address of 
                                   2382 ;       terminal input buffer.
                                   2383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CFA                       2384         _HEADER TIB,3,"TIB"
      000CFA 0C EB                    1         .word LINK 
                           000CFC     2         LINK=.
      000CFC 03                       3         .byte 3  
      000CFD 54 49 42                 4         .ascii "TIB"
      000D00                          5         TIB:
      000D00 CD 07 0E         [ 4] 2385         CALL     NTIB
      000D03 CD 0B 6D         [ 4] 2386         CALL     CELLP
      000D06 CC 04 E4         [ 2] 2387         JP     AT
                                   2388 
                                   2389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2390 ;       @EXECUTE        ( a -- )
                                   2391 ;       Execute vector stored in 
                                   2392 ;       address a.
                                   2393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D09                       2394         _HEADER ATEXE,8,"@EXECUTE"
      000D09 0C FC                    1         .word LINK 
                           000D0B     2         LINK=.
      000D0B 08                       3         .byte 8  
      000D0C 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D14                          5         ATEXE:
      000D14 CD 04 E4         [ 4] 2395         CALL     AT
      000D17 CD 07 CD         [ 4] 2396         CALL     QDUP    ;?address or zero
      000D1A CD 04 99         [ 4] 2397         CALL     QBRAN
      000D1D 0D 22                 2398         .word      EXE1
      000D1F CD 04 C5         [ 4] 2399         CALL     EXECU   ;execute if non-zero
      000D22 81               [ 4] 2400 EXE1:   RET     ;do nothing if zero
                                   2401 
                                   2402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2403 ;       CMOVE   ( b1 b2 u -- )
                                   2404 ;       Copy u bytes from b1 to b2.
                                   2405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D23                       2406         _HEADER CMOVE,5,"CMOVE"
      000D23 0D 0B                    1         .word LINK 
                           000D25     2         LINK=.
      000D25 05                       3         .byte 5  
      000D26 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D2B                          5         CMOVE:
                                   2407         ;;;;  local variables ;;;;;;;
                           000005  2408         DP = 5
                           000003  2409         YTMP = 3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000001  2410         CNT  = 1 
                                   2411         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2B 89               [ 2] 2412         PUSHW X  ; R: DP  
      000D2C 52 02            [ 2] 2413         SUB SP,#2 ; R: DP YTMP 
      000D2E 90 93            [ 1] 2414         LDW Y,X 
      000D30 90 FE            [ 2] 2415         LDW Y,(Y) ; CNT 
      000D32 90 89            [ 2] 2416         PUSHW Y  ; R: DP YTMP CNT
      000D34 90 93            [ 1] 2417         LDW Y,X 
      000D36 90 EE 02         [ 2] 2418         LDW Y,(2,Y) ; b2, dest 
      000D39 EE 04            [ 2] 2419         LDW X,(4,X) ; b1, src 
      000D3B 17 03            [ 2] 2420         LDW (YTMP,SP),Y 
      000D3D 13 03            [ 2] 2421         CPW X,(YTMP,SP) 
      000D3F 22 1A            [ 1] 2422         JRUGT CMOV2  ; src>dest 
                                   2423 ; src<dest copy from top to bottom
      000D41 72 FB 01         [ 2] 2424         ADDW X,(CNT,SP)
      000D44 72 F9 01         [ 2] 2425         ADDW Y,(CNT,SP)
      000D47                       2426 CMOV1:  
      000D47 17 03            [ 2] 2427         LDW (YTMP,SP),Y 
      000D49 16 01            [ 2] 2428         LDW Y,(CNT,SP)
      000D4B 27 22            [ 1] 2429         JREQ CMOV3 
      000D4D 90 5A            [ 2] 2430         DECW Y 
      000D4F 17 01            [ 2] 2431         LDW (CNT,SP),Y 
      000D51 16 03            [ 2] 2432         LDW Y,(YTMP,SP)
      000D53 5A               [ 2] 2433         DECW X
      000D54 F6               [ 1] 2434         LD A,(X)
      000D55 90 5A            [ 2] 2435         DECW Y 
      000D57 90 F7            [ 1] 2436         LD (Y),A 
      000D59 20 EC            [ 2] 2437         JRA CMOV1
                                   2438 ; src>dest copy from bottom to top   
      000D5B                       2439 CMOV2: 
      000D5B 17 03            [ 2] 2440         LDW (YTMP,SP),Y 
      000D5D 16 01            [ 2] 2441         LDW Y,(CNT,SP)
      000D5F 27 0E            [ 1] 2442         JREQ CMOV3
      000D61 90 5A            [ 2] 2443         DECW Y 
      000D63 17 01            [ 2] 2444         LDW (CNT,SP),Y 
      000D65 16 03            [ 2] 2445         LDW Y,(YTMP,SP)
      000D67 F6               [ 1] 2446         LD A,(X)
      000D68 5C               [ 1] 2447         INCW X 
      000D69 90 F7            [ 1] 2448         LD (Y),A 
      000D6B 90 5C            [ 1] 2449         INCW Y 
      000D6D 20 EC            [ 2] 2450         JRA CMOV2 
      000D6F                       2451 CMOV3:
      000D6F 1E 05            [ 2] 2452         LDW X,(DP,SP)
      000D71 1C 00 06         [ 2] 2453         ADDW X,#3*CELLL 
      000D74 5B 06            [ 2] 2454         ADDW SP,#3*CELLL 
      000D76 81               [ 4] 2455         RET 
                                   2456         
                                   2457 
                                   2458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2459 ;       FILL    ( b u c -- )
                                   2460 ;       Fill u bytes of character c
                                   2461 ;       to area beginning at b.
                                   2462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D77                       2463         _HEADER FILL,4,"FILL"
      000D77 0D 25                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                           000D79     2         LINK=.
      000D79 04                       3         .byte 4  
      000D7A 46 49 4C 4C              4         .ascii "FILL"
      000D7E                          5         FILL:
      000D7E E6 01            [ 1] 2464         LD A,(1,X)
      000D80 90 93            [ 1] 2465         LDW Y,X 
      000D82 1C 00 06         [ 2] 2466         ADDW X,#3*CELLL 
      000D85 89               [ 2] 2467         PUSHW X ; R: DP 
      000D86 93               [ 1] 2468         LDW X,Y 
      000D87 EE 04            [ 2] 2469         LDW X,(4,X) ; b
      000D89 90 EE 02         [ 2] 2470         LDW Y,(2,Y) ; u
      000D8C                       2471 FILL0:
      000D8C 27 06            [ 1] 2472         JREQ FILL1
      000D8E F7               [ 1] 2473         LD (X),A 
      000D8F 5C               [ 1] 2474         INCW X 
      000D90 90 5A            [ 2] 2475         DECW Y 
      000D92 20 F8            [ 2] 2476         JRA FILL0         
      000D94 85               [ 2] 2477 FILL1: POPW X 
      000D95 81               [ 4] 2478         RET         
                                   2479         
                                   2480 
                                   2481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2482 ;       ERASE   ( b u -- )
                                   2483 ;       Erase u bytes beginning at b.
                                   2484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D96                       2485         _HEADER ERASE,5,"ERASE"
      000D96 0D 79                    1         .word LINK 
                           000D98     2         LINK=.
      000D98 05                       3         .byte 5  
      000D99 45 52 41 53 45           4         .ascii "ERASE"
      000D9E                          5         ERASE:
      000D9E 90 5F            [ 1] 2486         clrw y 
      000DA0 1D 00 02         [ 2] 2487         subw x,#CELLL 
      000DA3 FF               [ 2] 2488         ldw (x),y 
      000DA4 CC 0D 7E         [ 2] 2489         jp FILL 
                                   2490 
                                   2491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2492 ;       PACK0   ( b u a -- a )
                                   2493 ;       Build a counted string with
                                   2494 ;       u characters from b. Null fill.
                                   2495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA7                       2496         _HEADER PACKS,5,"PACK0"
      000DA7 0D 98                    1         .word LINK 
                           000DA9     2         LINK=.
      000DA9 05                       3         .byte 5  
      000DAA 50 41 43 4B 30           4         .ascii "PACK0"
      000DAF                          5         PACKS:
      000DAF CD 06 1A         [ 4] 2497         CALL     DUPP
      000DB2 CD 05 E3         [ 4] 2498         CALL     TOR     ;strings only on cell boundary
      000DB5 CD 08 28         [ 4] 2499         CALL     DDUP
      000DB8 CD 04 F1         [ 4] 2500         CALL     CSTOR
      000DBB CD 0B 98         [ 4] 2501         CALL     ONEP ;save count
      000DBE CD 06 2A         [ 4] 2502         CALL     SWAPP
      000DC1 CD 0D 2B         [ 4] 2503         CALL     CMOVE
      000DC4 CD 05 35         [ 4] 2504         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DC7 81               [ 4] 2505         RET
                                   2506 
                                   2507 ;; Numeric output, single precision
                                   2508 
                                   2509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2510 ;       DIGIT   ( u -- c )
                                   2511 ;       Convert digit u to a character.
                                   2512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC8                       2513         _HEADER DIGIT,5,"DIGIT"
      000DC8 0D A9                    1         .word LINK 
                           000DCA     2         LINK=.
      000DCA 05                       3         .byte 5  
      000DCB 44 49 47 49 54           4         .ascii "DIGIT"
      000DD0                          5         DIGIT:
      000DD0 CD 04 70         [ 4] 2514         CALL	DOLIT
      000DD3 00 09                 2515         .word	9
      000DD5 CD 06 42         [ 4] 2516         CALL	OVER
      000DD8 CD 09 27         [ 4] 2517         CALL	LESS
      000DDB CD 04 70         [ 4] 2518         CALL	DOLIT
      000DDE 00 07                 2519         .word	7
      000DE0 CD 06 77         [ 4] 2520         CALL	ANDD
      000DE3 CD 08 3D         [ 4] 2521         CALL	PLUS
      000DE6 CD 04 70         [ 4] 2522         CALL	DOLIT
      000DE9 00 30                 2523         .word	48	;'0'
      000DEB CC 08 3D         [ 2] 2524         JP	PLUS
                                   2525 
                                   2526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2527 ;       EXTRACT ( n base -- n c )
                                   2528 ;       Extract least significant 
                                   2529 ;       digit from n.
                                   2530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DEE                       2531         _HEADER EXTRC,7,"EXTRACT"
      000DEE 0D CA                    1         .word LINK 
                           000DF0     2         LINK=.
      000DF0 07                       3         .byte 7  
      000DF1 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DF8                          5         EXTRC:
      000DF8 CD 0C 04         [ 4] 2532         CALL     ZERO
      000DFB CD 06 2A         [ 4] 2533         CALL     SWAPP
      000DFE CD 09 B2         [ 4] 2534         CALL     UMMOD
      000E01 CD 06 2A         [ 4] 2535         CALL     SWAPP
      000E04 CC 0D D0         [ 2] 2536         JP     DIGIT
                                   2537 
                                   2538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2539 ;       <#      ( -- )
                                   2540 ;       Initiate  numeric 
                                   2541 ;       output process.
                                   2542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E07                       2543         _HEADER BDIGS,2,"#<"
      000E07 0D F0                    1         .word LINK 
                           000E09     2         LINK=.
      000E09 02                       3         .byte 2  
      000E0A 23 3C                    4         .ascii "#<"
      000E0C                          5         BDIGS:
      000E0C CD 0C EF         [ 4] 2544         CALL     PAD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E0F CD 07 50         [ 4] 2545         CALL     HLD
      000E12 CC 04 D2         [ 2] 2546         JP     STORE
                                   2547 
                                   2548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2549 ;       HOLD    ( c -- )
                                   2550 ;       Insert a character 
                                   2551 ;       into output string.
                                   2552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E15                       2553         _HEADER HOLD,4,"HOLD"
      000E15 0E 09                    1         .word LINK 
                           000E17     2         LINK=.
      000E17 04                       3         .byte 4  
      000E18 48 4F 4C 44              4         .ascii "HOLD"
      000E1C                          5         HOLD:
      000E1C CD 07 50         [ 4] 2554         CALL     HLD
      000E1F CD 04 E4         [ 4] 2555         CALL     AT
      000E22 CD 0B A5         [ 4] 2556         CALL     ONEM
      000E25 CD 06 1A         [ 4] 2557         CALL     DUPP
      000E28 CD 07 50         [ 4] 2558         CALL     HLD
      000E2B CD 04 D2         [ 4] 2559         CALL     STORE
      000E2E CC 04 F1         [ 2] 2560         JP     CSTOR
                                   2561 
                                   2562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2563 ;       #       ( u -- u )
                                   2564 ;       Extract one digit from u and
                                   2565 ;       append digit to output string.
                                   2566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E31                       2567         _HEADER DIG,1,"#"
      000E31 0E 17                    1         .word LINK 
                           000E33     2         LINK=.
      000E33 01                       3         .byte 1  
      000E34 23                       4         .ascii "#"
      000E35                          5         DIG:
      000E35 CD 06 E0         [ 4] 2568         CALL     BASE
      000E38 CD 04 E4         [ 4] 2569         CALL     AT
      000E3B CD 0D F8         [ 4] 2570         CALL     EXTRC
      000E3E CC 0E 1C         [ 2] 2571         JP     HOLD
                                   2572 
                                   2573 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2574 ;       #S      ( u -- 0 )
                                   2575 ;       Convert u until all digits
                                   2576 ;       are added to output string.
                                   2577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E41                       2578         _HEADER DIGS,2,"#S"
      000E41 0E 33                    1         .word LINK 
                           000E43     2         LINK=.
      000E43 02                       3         .byte 2  
      000E44 23 53                    4         .ascii "#S"
      000E46                          5         DIGS:
      000E46 CD 0E 35         [ 4] 2579 DIGS1:  CALL     DIG
      000E49 CD 06 1A         [ 4] 2580         CALL     DUPP
      000E4C CD 04 99         [ 4] 2581         CALL     QBRAN
      000E4F 0E 53                 2582         .word      DIGS2
      000E51 20 F3            [ 2] 2583         JRA     DIGS1
      000E53 81               [ 4] 2584 DIGS2:  RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2585 
                                   2586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2587 ;       SIGN    ( n -- )
                                   2588 ;       Add a minus sign to
                                   2589 ;       numeric output string.
                                   2590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E54                       2591         _HEADER SIGN,4,"SIGN"
      000E54 0E 43                    1         .word LINK 
                           000E56     2         LINK=.
      000E56 04                       3         .byte 4  
      000E57 53 49 47 4E              4         .ascii "SIGN"
      000E5B                          5         SIGN:
      000E5B CD 06 51         [ 4] 2592         CALL     ZLESS
      000E5E CD 04 99         [ 4] 2593         CALL     QBRAN
      000E61 0E 6B                 2594         .word      SIGN1
      000E63 CD 04 70         [ 4] 2595         CALL     DOLIT
      000E66 00 2D                 2596         .word      45	;"-"
      000E68 CC 0E 1C         [ 2] 2597         JP     HOLD
      000E6B 81               [ 4] 2598 SIGN1:  RET
                                   2599 
                                   2600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2601 ;       #>      ( w -- b u )
                                   2602 ;       Prepare output string.
                                   2603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E6C                       2604         _HEADER EDIGS,2,"#>"
      000E6C 0E 56                    1         .word LINK 
                           000E6E     2         LINK=.
      000E6E 02                       3         .byte 2  
      000E6F 23 3E                    4         .ascii "#>"
      000E71                          5         EDIGS:
      000E71 CD 06 10         [ 4] 2605         CALL     DROP
      000E74 CD 07 50         [ 4] 2606         CALL     HLD
      000E77 CD 04 E4         [ 4] 2607         CALL     AT
      000E7A CD 0C EF         [ 4] 2608         CALL     PAD
      000E7D CD 06 42         [ 4] 2609         CALL     OVER
      000E80 CC 08 D3         [ 2] 2610         JP     SUBB
                                   2611 
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2613 ;       str     ( w -- b u )
                                   2614 ;       Convert a signed integer
                                   2615 ;       to a numeric string.
                                   2616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E83                       2617         _HEADER STR,3,"STR"
      000E83 0E 6E                    1         .word LINK 
                           000E85     2         LINK=.
      000E85 03                       3         .byte 3  
      000E86 53 54 52                 4         .ascii "STR"
      000E89                          5         STR:
      000E89 CD 06 1A         [ 4] 2618         CALL     DUPP
      000E8C CD 05 E3         [ 4] 2619         CALL     TOR
      000E8F CD 08 ED         [ 4] 2620         CALL     ABSS
      000E92 CD 0E 0C         [ 4] 2621         CALL     BDIGS
      000E95 CD 0E 46         [ 4] 2622         CALL     DIGS
      000E98 CD 05 35         [ 4] 2623         CALL     RFROM
      000E9B CD 0E 5B         [ 4] 2624         CALL     SIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000E9E CC 0E 71         [ 2] 2625         JP     EDIGS
                                   2626 
                                   2627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2628 ;       HEX     ( -- )
                                   2629 ;       Use radix 16 as base for
                                   2630 ;       numeric conversions.
                                   2631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EA1                       2632         _HEADER HEX,3,"HEX"
      000EA1 0E 85                    1         .word LINK 
                           000EA3     2         LINK=.
      000EA3 03                       3         .byte 3  
      000EA4 48 45 58                 4         .ascii "HEX"
      000EA7                          5         HEX:
      000EA7 CD 04 70         [ 4] 2633         CALL     DOLIT
      000EAA 00 10                 2634         .word      16
      000EAC CD 06 E0         [ 4] 2635         CALL     BASE
      000EAF CC 04 D2         [ 2] 2636         JP     STORE
                                   2637 
                                   2638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2639 ;       DECIMAL ( -- )
                                   2640 ;       Use radix 10 as base
                                   2641 ;       for numeric conversions.
                                   2642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EB2                       2643         _HEADER DECIM,7,"DECIMAL"
      000EB2 0E A3                    1         .word LINK 
                           000EB4     2         LINK=.
      000EB4 07                       3         .byte 7  
      000EB5 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EBC                          5         DECIM:
      000EBC CD 04 70         [ 4] 2644         CALL     DOLIT
      000EBF 00 0A                 2645         .word      10
      000EC1 CD 06 E0         [ 4] 2646         CALL     BASE
      000EC4 CC 04 D2         [ 2] 2647         JP     STORE
                                   2648 
                                   2649 ;; Numeric input, single precision
                                   2650 
                                   2651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2652 ;       DIGIT?  ( c base -- u t )
                                   2653 ;       Convert a character to its numeric
                                   2654 ;       value. A flag indicates success.
                                   2655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EC7                       2656         _HEADER DIGTQ,6,"DIGIT?"
      000EC7 0E B4                    1         .word LINK 
                           000EC9     2         LINK=.
      000EC9 06                       3         .byte 6  
      000ECA 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000ED0                          5         DIGTQ:
      000ED0 CD 05 E3         [ 4] 2657         CALL     TOR
      000ED3 CD 04 70         [ 4] 2658         CALL     DOLIT
      000ED6 00 30                 2659         .word     48	; "0"
      000ED8 CD 08 D3         [ 4] 2660         CALL     SUBB
      000EDB CD 04 70         [ 4] 2661         CALL     DOLIT
      000EDE 00 09                 2662         .word      9
      000EE0 CD 06 42         [ 4] 2663         CALL     OVER
      000EE3 CD 09 27         [ 4] 2664         CALL     LESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EE6 CD 04 99         [ 4] 2665         CALL     QBRAN
      000EE9 0F 01                 2666         .word      DGTQ1
      000EEB CD 04 70         [ 4] 2667         CALL     DOLIT
      000EEE 00 07                 2668         .word      7
      000EF0 CD 08 D3         [ 4] 2669         CALL     SUBB
      000EF3 CD 06 1A         [ 4] 2670         CALL     DUPP
      000EF6 CD 04 70         [ 4] 2671         CALL     DOLIT
      000EF9 00 0A                 2672         .word      10
      000EFB CD 09 27         [ 4] 2673         CALL     LESS
      000EFE CD 06 8B         [ 4] 2674         CALL     ORR
      000F01 CD 06 1A         [ 4] 2675 DGTQ1:  CALL     DUPP
      000F04 CD 05 35         [ 4] 2676         CALL     RFROM
      000F07 CC 09 11         [ 2] 2677         JP     ULESS
                                   2678 
                           000001  2679 .if  WANT_DOUBLE
                           000000  2680 .else 
                                   2681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2682 ;       NUMBER? ( a -- n T | a F )
                                   2683 ;       Convert a number string to
                                   2684 ;       integer. Push a flag on tos.
                                   2685 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2686         _HEADER NUMBQ,7,"NUMBER?"
                                   2687         CALL     BASE
                                   2688         CALL     AT
                                   2689         CALL     TOR
                                   2690         CALL     ZERO
                                   2691         CALL     OVER
                                   2692         CALL     COUNT
                                   2693         CALL     OVER
                                   2694         CALL     CAT
                                   2695         CALL     DOLIT
                                   2696         .word     36	; "0x"
                                   2697         CALL     EQUAL
                                   2698         CALL     QBRAN
                                   2699         .word      NUMQ1
                                   2700         CALL     HEX
                                   2701         CALL     SWAPP
                                   2702         CALL     ONEP
                                   2703         CALL     SWAPP
                                   2704         CALL     ONEM
                                   2705 NUMQ1:  CALL     OVER
                                   2706         CALL     CAT
                                   2707         CALL     DOLIT
                                   2708         .word     45	; "-"
                                   2709         CALL     EQUAL
                                   2710         CALL     TOR
                                   2711         CALL     SWAPP
                                   2712         CALL     RAT
                                   2713         CALL     SUBB
                                   2714         CALL     SWAPP
                                   2715         CALL     RAT
                                   2716         CALL     PLUS
                                   2717         CALL     QDUP
                                   2718         CALL     QBRAN
                                   2719         .word      NUMQ6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2720         CALL     ONEM
                                   2721         CALL     TOR
                                   2722 NUMQ2:  CALL     DUPP
                                   2723         CALL     TOR
                                   2724         CALL     CAT
                                   2725         CALL     BASE
                                   2726         CALL     AT
                                   2727         CALL     DIGTQ
                                   2728         CALL     QBRAN
                                   2729         .word      NUMQ4
                                   2730         CALL     SWAPP
                                   2731         CALL     BASE
                                   2732         CALL     AT
                                   2733         CALL     STAR
                                   2734         CALL     PLUS
                                   2735         CALL     RFROM
                                   2736         CALL     ONEP
                                   2737         CALL     DONXT
                                   2738         .word      NUMQ2
                                   2739         CALL     RAT
                                   2740         CALL     SWAPP
                                   2741         CALL     DROP
                                   2742         CALL     QBRAN
                                   2743         .word      NUMQ3
                                   2744         CALL     NEGAT
                                   2745 NUMQ3:  CALL     SWAPP
                                   2746         JRA     NUMQ5
                                   2747 NUMQ4:  CALL     RFROM
                                   2748         CALL     RFROM
                                   2749         CALL     DDROP
                                   2750         CALL     DDROP
                                   2751         CALL     ZERO
                                   2752 NUMQ5:  CALL     DUPP
                                   2753 NUMQ6:  CALL     RFROM
                                   2754         CALL     DDROP
                                   2755         CALL     RFROM
                                   2756         CALL     BASE
                                   2757         JP     STORE
                                   2758 .endif ; WANT_DOUBLE  
                                   2759 
                                   2760 ;; Basic I/O
                                   2761 
                                   2762 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2763 ;       KEY     ( -- c )
                                   2764 ;       Wait for and return an
                                   2765 ;       input character.
                                   2766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F0A                       2767         _HEADER KEY,3,"KEY"
      000F0A 0E C9                    1         .word LINK 
                           000F0C     2         LINK=.
      000F0C 03                       3         .byte 3  
      000F0D 4B 45 59                 4         .ascii "KEY"
      000F10                          5         KEY:
      000F10 72 0B 52 30 FB   [ 2] 2768         btjf UART_SR,#UART_SR_RXNE,. 
      000F15 C6 52 31         [ 1] 2769         ld a,UART_DR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F18 1D 00 02         [ 2] 2770         subw x,#CELLL 
      000F1B E7 01            [ 1] 2771         ld (1,x),a 
      000F1D 7F               [ 1] 2772         clr (x)
      000F1E 81               [ 4] 2773         ret 
                                   2774 
                                   2775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2776 ;       NUF?    ( -- t )
                                   2777 ;       Return false if no input,
                                   2778 ;       else pause and if CR return true.
                                   2779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F1F                       2780         _HEADER NUFQ,4,"NUF?"
      000F1F 0F 0C                    1         .word LINK 
                           000F21     2         LINK=.
      000F21 04                       3         .byte 4  
      000F22 4E 55 46 3F              4         .ascii "NUF?"
      000F26                          5         NUFQ:
      000F26 CD 04 19         [ 4] 2781         CALL     QKEY
      000F29 CD 06 1A         [ 4] 2782         CALL     DUPP
      000F2C CD 04 99         [ 4] 2783         CALL     QBRAN
      000F2F 0F 3F                 2784         .word    NUFQ1
      000F31 CD 08 1D         [ 4] 2785         CALL     DDROP
      000F34 CD 0F 10         [ 4] 2786         CALL     KEY
      000F37 CD 04 70         [ 4] 2787         CALL     DOLIT
      000F3A 00 0D                 2788         .word      CRR
      000F3C CC 08 FB         [ 2] 2789         JP     EQUAL
      000F3F 81               [ 4] 2790 NUFQ1:  RET
                                   2791 
                                   2792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2793 ;       SPACE   ( -- )
                                   2794 ;       Send  blank character to
                                   2795 ;       output device.
                                   2796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F40                       2797         _HEADER SPACE,5,"SPACE"
      000F40 0F 21                    1         .word LINK 
                           000F42     2         LINK=.
      000F42 05                       3         .byte 5  
      000F43 53 50 41 43 45           4         .ascii "SPACE"
      000F48                          5         SPACE:
      000F48 CD 0B F7         [ 4] 2798         CALL     BLANK
      000F4B CC 04 37         [ 2] 2799         JP     EMIT
                                   2800 
                                   2801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2802 ;       SPACES  ( +n -- )
                                   2803 ;       Send n spaces to output device.
                                   2804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4E                       2805         _HEADER SPACS,6,"SPACES"
      000F4E 0F 42                    1         .word LINK 
                           000F50     2         LINK=.
      000F50 06                       3         .byte 6  
      000F51 53 50 41 43 45 53        4         .ascii "SPACES"
      000F57                          5         SPACS:
      000F57 CD 0C 04         [ 4] 2806         CALL     ZERO
      000F5A CD 09 6C         [ 4] 2807         CALL     MAX
      000F5D CD 05 E3         [ 4] 2808         CALL     TOR
      000F60 20 03            [ 2] 2809         JRA      CHAR2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F62 CD 0F 48         [ 4] 2810 CHAR1:  CALL     SPACE
      000F65 CD 04 84         [ 4] 2811 CHAR2:  CALL     DONXT
      000F68 0F 62                 2812         .word    CHAR1
      000F6A 81               [ 4] 2813         RET
                                   2814 
                                   2815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2816 ;       TYPE    ( b u -- )
                                   2817 ;       Output u characters from b.
                                   2818 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F6B                       2819         _HEADER TYPES,4,"TYPE"
      000F6B 0F 50                    1         .word LINK 
                           000F6D     2         LINK=.
      000F6D 04                       3         .byte 4  
      000F6E 54 59 50 45              4         .ascii "TYPE"
      000F72                          5         TYPES:
      000F72 CD 05 E3         [ 4] 2820         CALL     TOR
      000F75 20 06            [ 2] 2821         JRA     TYPE2
      000F77 CD 0C C7         [ 4] 2822 TYPE1:  CALL     COUNT 
      000F7A CD 04 37         [ 4] 2823         CALL     EMIT
      000F7D                       2824 TYPE2:  _DONXT  TYPE1
      000F7D CD 04 84         [ 4]    1     CALL DONXT 
      000F80 0F 77                    2     .word TYPE1 
      000F82                       2825         _DROP
      000F82 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000F85 81               [ 4] 2826         RET 
                                   2827 
                                   2828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2829 ;       CR      ( -- )
                                   2830 ;       Output a carriage return
                                   2831 ;       and a line feed.
                                   2832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F86                       2833         _HEADER CR,2,"CR"
      000F86 0F 6D                    1         .word LINK 
                           000F88     2         LINK=.
      000F88 02                       3         .byte 2  
      000F89 43 52                    4         .ascii "CR"
      000F8B                          5         CR:
      000F8B                       2834         _DOLIT  CRR 
      000F8B CD 04 70         [ 4]    1     CALL DOLIT 
      000F8E 00 0D                    2     .word CRR 
      000F90 CD 04 37         [ 4] 2835         CALL    EMIT
      000F93                       2836         _DOLIT  LF
      000F93 CD 04 70         [ 4]    1     CALL DOLIT 
      000F96 00 0A                    2     .word LF 
      000F98 CC 04 37         [ 2] 2837         JP      EMIT
                                   2838 
                                   2839 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2840 ;       do$     ( -- a )
                                   2841 ;       Return  address of a compiled
                                   2842 ;       string.
                                   2843 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2844 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F9B                       2845 DOSTR:
      000F9B CD 05 35         [ 4] 2846         CALL     RFROM
      000F9E CD 05 46         [ 4] 2847         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000FA1 CD 05 35         [ 4] 2848         CALL     RFROM
      000FA4 CD 0C C7         [ 4] 2849         CALL     COUNT
      000FA7 CD 08 3D         [ 4] 2850         CALL     PLUS
      000FAA CD 05 E3         [ 4] 2851         CALL     TOR
      000FAD CD 06 2A         [ 4] 2852         CALL     SWAPP
      000FB0 CD 05 E3         [ 4] 2853         CALL     TOR
      000FB3 81               [ 4] 2854         RET
                                   2855 
                                   2856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2857 ;       $"|     ( -- a )
                                   2858 ;       Run time routine compiled by $".
                                   2859 ;       Return address of a compiled string.
                                   2860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2861 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000FB4                       2862 STRQP:
      000FB4 CD 0F 9B         [ 4] 2863         CALL     DOSTR
      000FB7 81               [ 4] 2864         RET
                                   2865 
                                   2866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2867 ;       ."|     ( -- )
                                   2868 ;       Run time routine of ." .
                                   2869 ;       Output a compiled string.
                                   2870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2871 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FB8                       2872 DOTQP:
      000FB8 CD 0F 9B         [ 4] 2873         CALL     DOSTR
      000FBB CD 0C C7         [ 4] 2874         CALL     COUNT
      000FBE CC 0F 72         [ 2] 2875         JP     TYPES
                                   2876 
                                   2877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2878 ;       .R      ( n +n -- )
                                   2879 ;       Display an integer in a field
                                   2880 ;       of n columns, right justified.
                                   2881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FC1                       2882         _HEADER DOTR,2,".R"
      000FC1 0F 88                    1         .word LINK 
                           000FC3     2         LINK=.
      000FC3 02                       3         .byte 2  
      000FC4 2E 52                    4         .ascii ".R"
      000FC6                          5         DOTR:
      000FC6 CD 05 E3         [ 4] 2883         CALL     TOR
      000FC9 CD 0E 89         [ 4] 2884         CALL     STR
      000FCC CD 05 35         [ 4] 2885         CALL     RFROM
      000FCF CD 06 42         [ 4] 2886         CALL     OVER
      000FD2 CD 08 D3         [ 4] 2887         CALL     SUBB
      000FD5 CD 0F 57         [ 4] 2888         CALL     SPACS
      000FD8 CC 0F 72         [ 2] 2889         JP     TYPES
                                   2890 
                                   2891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2892 ;       U.R     ( u +n -- )
                                   2893 ;       Display an unsigned integer
                                   2894 ;       in n column, right justified.
                                   2895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FDB                       2896         _HEADER UDOTR,3,"U.R"
      000FDB 0F C3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                           000FDD     2         LINK=.
      000FDD 03                       3         .byte 3  
      000FDE 55 2E 52                 4         .ascii "U.R"
      000FE1                          5         UDOTR:
      000FE1 CD 05 E3         [ 4] 2897         CALL     TOR
      000FE4 CD 0E 0C         [ 4] 2898         CALL     BDIGS
      000FE7 CD 0E 46         [ 4] 2899         CALL     DIGS
      000FEA CD 0E 71         [ 4] 2900         CALL     EDIGS
      000FED CD 05 35         [ 4] 2901         CALL     RFROM
      000FF0 CD 06 42         [ 4] 2902         CALL     OVER
      000FF3 CD 08 D3         [ 4] 2903         CALL     SUBB
      000FF6 CD 0F 57         [ 4] 2904         CALL     SPACS
      000FF9 CC 0F 72         [ 2] 2905         JP     TYPES
                                   2906 
                                   2907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2908 ;       U.      ( u -- )
                                   2909 ;       Display an unsigned integer
                                   2910 ;       in free format.
                                   2911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFC                       2912         _HEADER UDOT,2,"U."
      000FFC 0F DD                    1         .word LINK 
                           000FFE     2         LINK=.
      000FFE 02                       3         .byte 2  
      000FFF 55 2E                    4         .ascii "U."
      001001                          5         UDOT:
      001001 CD 0E 0C         [ 4] 2913         CALL     BDIGS
      001004 CD 0E 46         [ 4] 2914         CALL     DIGS
      001007 CD 0E 71         [ 4] 2915         CALL     EDIGS
      00100A CD 0F 48         [ 4] 2916         CALL     SPACE
      00100D CC 0F 72         [ 2] 2917         JP     TYPES
                                   2918 
                                   2919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2920 ;   H. ( n -- )
                                   2921 ;   display n in hexadecimal 
                                   2922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001010                       2923         _HEADER HDOT,2,"H."
      001010 0F FE                    1         .word LINK 
                           001012     2         LINK=.
      001012 02                       3         .byte 2  
      001013 48 2E                    4         .ascii "H."
      001015                          5         HDOT:
      001015 CD 06 E0         [ 4] 2924         CALL BASE 
      001018 CD 04 E4         [ 4] 2925         CALL AT 
      00101B CD 05 E3         [ 4] 2926         CALL TOR 
      00101E CD 0E A7         [ 4] 2927         CALL HEX 
      001021 CD 10 01         [ 4] 2928         CALL UDOT 
      001024 CD 05 35         [ 4] 2929         CALL RFROM 
      001027 CD 06 E0         [ 4] 2930         CALL BASE 
      00102A CC 04 D2         [ 2] 2931         JP STORE 
                                   2932          
                                   2933 
                                   2934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2935 ;       .       ( w -- )
                                   2936 ;       Display an integer in free
                                   2937 ;       format, preceeded by a space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   2938 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00102D                       2939         _HEADER DOT,1,"."
      00102D 10 12                    1         .word LINK 
                           00102F     2         LINK=.
      00102F 01                       3         .byte 1  
      001030 2E                       4         .ascii "."
      001031                          5         DOT:
      001031 CD 06 E0         [ 4] 2940         CALL     BASE
      001034 CD 04 E4         [ 4] 2941         CALL     AT
      001037 CD 04 70         [ 4] 2942         CALL     DOLIT
      00103A 00 0A                 2943         .word      10
      00103C CD 06 A0         [ 4] 2944         CALL     XORR    ;?decimal
      00103F CD 04 99         [ 4] 2945         CALL     QBRAN
      001042 10 46                 2946         .word      DOT1
      001044 20 BB            [ 2] 2947         JRA     UDOT
      001046 CD 0E 89         [ 4] 2948 DOT1:   CALL     STR
      001049 CD 0F 48         [ 4] 2949         CALL     SPACE
      00104C CC 0F 72         [ 2] 2950         JP     TYPES
                                   2951 
                                   2952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2953 ;       ?       ( a -- )
                                   2954 ;       Display contents in memory cell.
                                   2955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00104F                       2956         _HEADER QUEST,1,"?"
      00104F 10 2F                    1         .word LINK 
                           001051     2         LINK=.
      001051 01                       3         .byte 1  
      001052 3F                       4         .ascii "?"
      001053                          5         QUEST:
      001053 CD 04 E4         [ 4] 2957         CALL     AT
      001056 20 D9            [ 2] 2958         JRA     DOT
                                   2959 
                                   2960 ;; Parsing
                                   2961 
                                   2962 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2963 ;       parse   ( b u c -- b u delta ; <string> )
                                   2964 ;       Scan string delimited by c.
                                   2965 ;       Return found string and its offset.
                                   2966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001058                       2967         _HEADER PARS,5,"PARS$"
      001058 10 51                    1         .word LINK 
                           00105A     2         LINK=.
      00105A 05                       3         .byte 5  
      00105B 50 41 52 53 24           4         .ascii "PARS$"
      001060                          5         PARS:
      001060 CD 06 EF         [ 4] 2968         CALL     TEMP
      001063 CD 04 D2         [ 4] 2969         CALL     STORE
      001066 CD 06 42         [ 4] 2970         CALL     OVER
      001069 CD 05 E3         [ 4] 2971         CALL     TOR
      00106C CD 06 1A         [ 4] 2972         CALL     DUPP
      00106F CD 04 99         [ 4] 2973         CALL     QBRAN
      001072 11 18                 2974         .word    PARS8
      001074 CD 0B A5         [ 4] 2975         CALL     ONEM
      001077 CD 06 EF         [ 4] 2976         CALL     TEMP
      00107A CD 04 E4         [ 4] 2977         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00107D CD 0B F7         [ 4] 2978         CALL     BLANK
      001080 CD 08 FB         [ 4] 2979         CALL     EQUAL
      001083 CD 04 99         [ 4] 2980         CALL     QBRAN
      001086 10 B9                 2981         .word      PARS3
      001088 CD 05 E3         [ 4] 2982         CALL     TOR
      00108B CD 0B F7         [ 4] 2983 PARS1:  CALL     BLANK
      00108E CD 06 42         [ 4] 2984         CALL     OVER
      001091 CD 05 02         [ 4] 2985         CALL     CAT     ;skip leading blanks ONLY
      001094 CD 08 D3         [ 4] 2986         CALL     SUBB
      001097 CD 06 51         [ 4] 2987         CALL     ZLESS
      00109A CD 08 76         [ 4] 2988         CALL     INVER
      00109D CD 04 99         [ 4] 2989         CALL     QBRAN
      0010A0 10 B6                 2990         .word      PARS2
      0010A2 CD 0B 98         [ 4] 2991         CALL     ONEP
      0010A5 CD 04 84         [ 4] 2992         CALL     DONXT
      0010A8 10 8B                 2993         .word      PARS1
      0010AA CD 05 35         [ 4] 2994         CALL     RFROM
      0010AD CD 06 10         [ 4] 2995         CALL     DROP
      0010B0 CD 0C 04         [ 4] 2996         CALL     ZERO
      0010B3 CC 06 1A         [ 2] 2997         JP     DUPP
      0010B6 CD 05 35         [ 4] 2998 PARS2:  CALL     RFROM
      0010B9 CD 06 42         [ 4] 2999 PARS3:  CALL     OVER
      0010BC CD 06 2A         [ 4] 3000         CALL     SWAPP
      0010BF CD 05 E3         [ 4] 3001         CALL     TOR
      0010C2 CD 06 EF         [ 4] 3002 PARS4:  CALL     TEMP
      0010C5 CD 04 E4         [ 4] 3003         CALL     AT
      0010C8 CD 06 42         [ 4] 3004         CALL     OVER
      0010CB CD 05 02         [ 4] 3005         CALL     CAT
      0010CE CD 08 D3         [ 4] 3006         CALL     SUBB    ;scan for delimiter
      0010D1 CD 06 EF         [ 4] 3007         CALL     TEMP
      0010D4 CD 04 E4         [ 4] 3008         CALL     AT
      0010D7 CD 0B F7         [ 4] 3009         CALL     BLANK
      0010DA CD 08 FB         [ 4] 3010         CALL     EQUAL
      0010DD CD 04 99         [ 4] 3011         CALL     QBRAN
      0010E0 10 E5                 3012         .word      PARS5
      0010E2 CD 06 51         [ 4] 3013         CALL     ZLESS
      0010E5 CD 04 99         [ 4] 3014 PARS5:  CALL     QBRAN
      0010E8 10 FA                 3015         .word      PARS6
      0010EA CD 0B 98         [ 4] 3016         CALL     ONEP
      0010ED CD 04 84         [ 4] 3017         CALL     DONXT
      0010F0 10 C2                 3018         .word      PARS4
      0010F2 CD 06 1A         [ 4] 3019         CALL     DUPP
      0010F5 CD 05 E3         [ 4] 3020         CALL     TOR
      0010F8 20 0F            [ 2] 3021         JRA     PARS7
      0010FA CD 05 35         [ 4] 3022 PARS6:  CALL     RFROM
      0010FD CD 06 10         [ 4] 3023         CALL     DROP
      001100 CD 06 1A         [ 4] 3024         CALL     DUPP
      001103 CD 0B 98         [ 4] 3025         CALL     ONEP
      001106 CD 05 E3         [ 4] 3026         CALL     TOR
      001109 CD 06 42         [ 4] 3027 PARS7:  CALL     OVER
      00110C CD 08 D3         [ 4] 3028         CALL     SUBB
      00110F CD 05 35         [ 4] 3029         CALL     RFROM
      001112 CD 05 35         [ 4] 3030         CALL     RFROM
      001115 CC 08 D3         [ 2] 3031         JP     SUBB
      001118 CD 06 42         [ 4] 3032 PARS8:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00111B CD 05 35         [ 4] 3033         CALL     RFROM
      00111E CC 08 D3         [ 2] 3034         JP     SUBB
                                   3035 
                                   3036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3037 ;       PARSE   ( c -- b u ; <string> )
                                   3038 ;       Scan input stream and return
                                   3039 ;       counted string delimited by c.
                                   3040 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001121                       3041         _HEADER PARSE,5,"PARSE"
      001121 10 5A                    1         .word LINK 
                           001123     2         LINK=.
      001123 05                       3         .byte 5  
      001124 50 41 52 53 45           4         .ascii "PARSE"
      001129                          5         PARSE:
      001129 CD 05 E3         [ 4] 3042         CALL     TOR
      00112C CD 0D 00         [ 4] 3043         CALL     TIB
      00112F CD 06 FE         [ 4] 3044         CALL     INN
      001132 CD 04 E4         [ 4] 3045         CALL     AT
      001135 CD 08 3D         [ 4] 3046         CALL     PLUS    ;current input buffer pointer
      001138 CD 07 0E         [ 4] 3047         CALL     NTIB
      00113B CD 04 E4         [ 4] 3048         CALL     AT
      00113E CD 06 FE         [ 4] 3049         CALL     INN
      001141 CD 04 E4         [ 4] 3050         CALL     AT
      001144 CD 08 D3         [ 4] 3051         CALL     SUBB    ;remaining count
      001147 CD 05 35         [ 4] 3052         CALL     RFROM
      00114A CD 10 60         [ 4] 3053         CALL     PARS
      00114D CD 06 FE         [ 4] 3054         CALL     INN
      001150 CC 0C 74         [ 2] 3055         JP     PSTOR
                                   3056 
                                   3057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3058 ;       .(      ( -- )
                                   3059 ;       Output following string up to next ) .
                                   3060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001153                       3061         _HEADER DOTPR,IMEDD+2,".("
      001153 11 23                    1         .word LINK 
                           001155     2         LINK=.
      001155 82                       3         .byte IMEDD+2  
      001156 2E 28                    4         .ascii ".("
      001158                          5         DOTPR:
      001158 CD 04 70         [ 4] 3062         CALL     DOLIT
      00115B 00 29                 3063         .word     41	; ")"
      00115D CD 11 29         [ 4] 3064         CALL     PARSE
      001160 CC 0F 72         [ 2] 3065         JP     TYPES
                                   3066 
                                   3067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3068 ;       (       ( -- )
                                   3069 ;       Ignore following string up to next ).
                                   3070 ;       A comment.
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001163                       3072         _HEADER PAREN,IMEDD+1,"("
      001163 11 55                    1         .word LINK 
                           001165     2         LINK=.
      001165 81                       3         .byte IMEDD+1  
      001166 28                       4         .ascii "("
      001167                          5         PAREN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001167 CD 04 70         [ 4] 3073         CALL     DOLIT
      00116A 00 29                 3074         .word     41	; ")"
      00116C CD 11 29         [ 4] 3075         CALL     PARSE
      00116F CC 08 1D         [ 2] 3076         JP     DDROP
                                   3077 
                                   3078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3079 ;       \       ( -- )
                                   3080 ;       Ignore following text till
                                   3081 ;       end of line.
                                   3082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001172                       3083         _HEADER BKSLA,IMEDD+1,"\\"
      001172 11 65                    1         .word LINK 
                           001174     2         LINK=.
      001174 81                       3         .byte IMEDD+1  
      001175 5C 5C                    4         .ascii "\\"
      001177                          5         BKSLA:
      001177 90 AE 00 0E      [ 2] 3084         ldw y,#UCTIB ; #TIB  
      00117B 90 FE            [ 2] 3085         ldw y,(y)
      00117D 90 89            [ 2] 3086         pushw y ; count in TIB 
      00117F 90 AE 00 0C      [ 2] 3087         ldw y,#UINN ; >IN 
      001183 90 BF 26         [ 2] 3088         ldw YTEMP,y
      001186 90 85            [ 2] 3089         popw y 
      001188 91 CF 26         [ 5] 3090         ldw [YTEMP],y
      00118B 81               [ 4] 3091         ret 
                                   3092 
                                   3093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3094 ;       WORD    ( c -- a ; <string> )
                                   3095 ;       Parse a word from input stream
                                   3096 ;       and copy it to code dictionary.
                                   3097 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00118C                       3098         _HEADER WORDD,4,"WORD"
      00118C 11 74                    1         .word LINK 
                           00118E     2         LINK=.
      00118E 04                       3         .byte 4  
      00118F 57 4F 52 44              4         .ascii "WORD"
      001193                          5         WORDD:
      001193 CD 11 29         [ 4] 3099         CALL     PARSE
      001196 CD 0C DE         [ 4] 3100         CALL     HERE
      001199 CD 0B 6D         [ 4] 3101         CALL     CELLP
                           000000  3102 .IF CASE_SENSE 
                                   3103         JP      PACKS 
                           000001  3104 .ELSE                 
      00119C CD 0D AF         [ 4] 3105         CALL     PACKS
                                   3106 ; uppercase TOKEN 
      00119F CD 06 1A         [ 4] 3107         CALL    DUPP 
      0011A2 CD 0C C7         [ 4] 3108         CALL    COUNT 
      0011A5 CD 05 E3         [ 4] 3109         CALL    TOR 
      0011A8 CD 04 B5         [ 4] 3110         CALL    BRAN 
      0011AB 11 D9                 3111         .word   UPPER2  
      0011AD                       3112 UPPER:
      0011AD CD 06 1A         [ 4] 3113         CALL    DUPP 
      0011B0 CD 05 02         [ 4] 3114         CALL    CAT
      0011B3 CD 06 1A         [ 4] 3115         CALL    DUPP 
      0011B6 CD 04 70         [ 4] 3116         CALL   DOLIT
      0011B9 00 61                 3117         .word   'a' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0011BB CD 04 70         [ 4] 3118         CALL    DOLIT
      0011BE 00 7B                 3119         .word   'z'+1 
      0011C0 CD 09 97         [ 4] 3120         CALL   WITHI 
      0011C3 CD 04 99         [ 4] 3121         CALL   QBRAN
      0011C6 11 D0                 3122         .word  UPPER1  
      0011C8 CD 04 70         [ 4] 3123         CALL    DOLIT 
      0011CB 00 DF                 3124         .word   0xDF 
      0011CD CD 06 77         [ 4] 3125         CALL    ANDD 
      0011D0                       3126 UPPER1:
      0011D0 CD 06 42         [ 4] 3127         CALL    OVER 
      0011D3 CD 04 F1         [ 4] 3128         CALL    CSTOR          
      0011D6 CD 0B 98         [ 4] 3129         CALL    ONEP 
      0011D9                       3130 UPPER2: 
      0011D9 CD 04 84         [ 4] 3131         CALL    DONXT
      0011DC 11 AD                 3132         .word   UPPER  
      0011DE CD 06 10         [ 4] 3133         CALL    DROP  
      0011E1 81               [ 4] 3134         RET 
                                   3135 .ENDIF 
                                   3136 
                                   3137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3138 ;       TOKEN   ( -- a ; <string> )
                                   3139 ;       Parse a word from input stream
                                   3140 ;       and copy it to name dictionary.
                                   3141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011E2                       3142         _HEADER TOKEN,5,"TOKEN"
      0011E2 11 8E                    1         .word LINK 
                           0011E4     2         LINK=.
      0011E4 05                       3         .byte 5  
      0011E5 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011EA                          5         TOKEN:
      0011EA CD 0B F7         [ 4] 3143         CALL     BLANK
      0011ED CC 11 93         [ 2] 3144         JP     WORDD
                                   3145 
                                   3146 ;; Dictionary search
                                   3147 
                                   3148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3149 ;       NAME>   ( na -- ca )
                                   3150 ;       Return a code address given
                                   3151 ;       a name address.
                                   3152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011F0                       3153         _HEADER NAMET,5,"NAME>"
      0011F0 11 E4                    1         .word LINK 
                           0011F2     2         LINK=.
      0011F2 05                       3         .byte 5  
      0011F3 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011F8                          5         NAMET:
      0011F8 CD 0C C7         [ 4] 3154         CALL     COUNT
      0011FB CD 04 70         [ 4] 3155         CALL     DOLIT
      0011FE 00 1F                 3156         .word      31
      001200 CD 06 77         [ 4] 3157         CALL     ANDD
      001203 CC 08 3D         [ 2] 3158         JP     PLUS
                                   3159 
                                   3160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3161 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3162 ;       Compare u cells in two
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3163 ;       strings. Return 0 if identical.
                                   3164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001206                       3165         _HEADER SAMEQ,5,"SAME?"
      001206 11 F2                    1         .word LINK 
                           001208     2         LINK=.
      001208 05                       3         .byte 5  
      001209 53 41 4D 45 3F           4         .ascii "SAME?"
      00120E                          5         SAMEQ:
      00120E CD 0B A5         [ 4] 3166         CALL     ONEM
      001211 CD 05 E3         [ 4] 3167         CALL     TOR
      001214 20 29            [ 2] 3168         JRA     SAME2
      001216 CD 06 42         [ 4] 3169 SAME1:  CALL     OVER
      001219 CD 05 46         [ 4] 3170         CALL     RAT
      00121C CD 08 3D         [ 4] 3171         CALL     PLUS
      00121F CD 05 02         [ 4] 3172         CALL     CAT
      001222 CD 06 42         [ 4] 3173         CALL     OVER
      001225 CD 05 46         [ 4] 3174         CALL     RAT
      001228 CD 08 3D         [ 4] 3175         CALL     PLUS
      00122B CD 05 02         [ 4] 3176         CALL     CAT
      00122E CD 08 D3         [ 4] 3177         CALL     SUBB
      001231 CD 07 CD         [ 4] 3178         CALL     QDUP
      001234 CD 04 99         [ 4] 3179         CALL     QBRAN
      001237 12 3F                 3180         .word      SAME2
      001239 CD 05 35         [ 4] 3181         CALL     RFROM
      00123C CC 06 10         [ 2] 3182         JP     DROP
      00123F CD 04 84         [ 4] 3183 SAME2:  CALL     DONXT
      001242 12 16                 3184         .word      SAME1
      001244 CC 0C 04         [ 2] 3185         JP     ZERO
                                   3186 
                                   3187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3188 ;       find    ( a va -- ca na | a F )
                                   3189 ;       Search vocabulary for string.
                                   3190 ;       Return ca and na if succeeded.
                                   3191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001247                       3192         _HEADER FIND,4,"FIND"
      001247 12 08                    1         .word LINK 
                           001249     2         LINK=.
      001249 04                       3         .byte 4  
      00124A 46 49 4E 44              4         .ascii "FIND"
      00124E                          5         FIND:
      00124E CD 06 2A         [ 4] 3193         CALL     SWAPP
      001251 CD 06 1A         [ 4] 3194         CALL     DUPP
      001254 CD 05 02         [ 4] 3195         CALL     CAT
      001257 CD 06 EF         [ 4] 3196         CALL     TEMP
      00125A CD 04 D2         [ 4] 3197         CALL     STORE
      00125D CD 06 1A         [ 4] 3198         CALL     DUPP
      001260 CD 04 E4         [ 4] 3199         CALL     AT
      001263 CD 05 E3         [ 4] 3200         CALL     TOR
      001266 CD 0B 6D         [ 4] 3201         CALL     CELLP
      001269 CD 06 2A         [ 4] 3202         CALL     SWAPP
      00126C CD 04 E4         [ 4] 3203 FIND1:  CALL     AT
      00126F CD 06 1A         [ 4] 3204         CALL     DUPP
      001272 CD 04 99         [ 4] 3205         CALL     QBRAN
      001275 12 AB                 3206         .word      FIND6
      001277 CD 06 1A         [ 4] 3207         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00127A CD 04 E4         [ 4] 3208         CALL     AT
      00127D CD 04 70         [ 4] 3209         CALL     DOLIT
      001280 1F 7F                 3210         .word      MASKK
      001282 CD 06 77         [ 4] 3211         CALL     ANDD
      001285 CD 05 46         [ 4] 3212         CALL     RAT
      001288 CD 06 A0         [ 4] 3213         CALL     XORR
      00128B CD 04 99         [ 4] 3214         CALL     QBRAN
      00128E 12 9A                 3215         .word      FIND2
      001290 CD 0B 6D         [ 4] 3216         CALL     CELLP
      001293 CD 04 70         [ 4] 3217         CALL     DOLIT
      001296 FF FF                 3218         .word     0xFFFF
      001298 20 0C            [ 2] 3219         JRA     FIND3
      00129A CD 0B 6D         [ 4] 3220 FIND2:  CALL     CELLP
      00129D CD 06 EF         [ 4] 3221         CALL     TEMP
      0012A0 CD 04 E4         [ 4] 3222         CALL     AT
      0012A3 CD 12 0E         [ 4] 3223         CALL     SAMEQ
      0012A6 CD 04 B5         [ 4] 3224 FIND3:  CALL     BRAN
      0012A9 12 BA                 3225         .word      FIND4
      0012AB CD 05 35         [ 4] 3226 FIND6:  CALL     RFROM
      0012AE CD 06 10         [ 4] 3227         CALL     DROP
      0012B1 CD 06 2A         [ 4] 3228         CALL     SWAPP
      0012B4 CD 0B 7C         [ 4] 3229         CALL     CELLM
      0012B7 CC 06 2A         [ 2] 3230         JP     SWAPP
      0012BA CD 04 99         [ 4] 3231 FIND4:  CALL     QBRAN
      0012BD 12 C7                 3232         .word      FIND5
      0012BF CD 0B 7C         [ 4] 3233         CALL     CELLM
      0012C2 CD 0B 7C         [ 4] 3234         CALL     CELLM
      0012C5 20 A5            [ 2] 3235         JRA     FIND1
      0012C7 CD 05 35         [ 4] 3236 FIND5:  CALL     RFROM
      0012CA CD 06 10         [ 4] 3237         CALL     DROP
      0012CD CD 06 2A         [ 4] 3238         CALL     SWAPP
      0012D0 CD 06 10         [ 4] 3239         CALL     DROP
      0012D3 CD 0B 7C         [ 4] 3240         CALL     CELLM
      0012D6 CD 06 1A         [ 4] 3241         CALL     DUPP
      0012D9 CD 11 F8         [ 4] 3242         CALL     NAMET
      0012DC CC 06 2A         [ 2] 3243         JP     SWAPP
                                   3244 
                                   3245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3246 ;       NAME?   ( a -- ca na | a F )
                                   3247 ;       Search vocabularies for a string.
                                   3248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012DF                       3249         _HEADER NAMEQ,5,"NAME?"
      0012DF 12 49                    1         .word LINK 
                           0012E1     2         LINK=.
      0012E1 05                       3         .byte 5  
      0012E2 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012E7                          5         NAMEQ:
      0012E7 CD 07 63         [ 4] 3250         CALL   CNTXT
      0012EA CC 12 4E         [ 2] 3251         JP     FIND
                                   3252 
                                   3253 ;; Terminal response
                                   3254 
                                   3255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3256 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3257 ;       Backup cursor by one character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012ED                       3259         _HEADER BKSP,2,"^H"
      0012ED 12 E1                    1         .word LINK 
                           0012EF     2         LINK=.
      0012EF 02                       3         .byte 2  
      0012F0 5E 48                    4         .ascii "^H"
      0012F2                          5         BKSP:
      0012F2 CD 05 E3         [ 4] 3260         CALL     TOR
      0012F5 CD 06 42         [ 4] 3261         CALL     OVER
      0012F8 CD 05 35         [ 4] 3262         CALL     RFROM
      0012FB CD 06 2A         [ 4] 3263         CALL     SWAPP
      0012FE CD 06 42         [ 4] 3264         CALL     OVER
      001301 CD 06 A0         [ 4] 3265         CALL     XORR
      001304 CD 04 99         [ 4] 3266         CALL     QBRAN
      001307 13 22                 3267         .word      BACK1
      001309 CD 04 70         [ 4] 3268         CALL     DOLIT
      00130C 00 08                 3269         .word      BKSPP
      00130E CD 04 37         [ 4] 3270         CALL     EMIT
      001311 CD 0B A5         [ 4] 3271         CALL     ONEM
      001314 CD 0B F7         [ 4] 3272         CALL     BLANK
      001317 CD 04 37         [ 4] 3273         CALL     EMIT
      00131A CD 04 70         [ 4] 3274         CALL     DOLIT
      00131D 00 08                 3275         .word      BKSPP
      00131F CC 04 37         [ 2] 3276         JP     EMIT
      001322 81               [ 4] 3277 BACK1:  RET
                                   3278 
                                   3279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3280 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3281 ;       Accept and echo key stroke
                                   3282 ;       and bump cursor.
                                   3283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001323                       3284         _HEADER TAP,3,"TAP"
      001323 12 EF                    1         .word LINK 
                           001325     2         LINK=.
      001325 03                       3         .byte 3  
      001326 54 41 50                 4         .ascii "TAP"
      001329                          5         TAP:
      001329 CD 06 1A         [ 4] 3285         CALL     DUPP
      00132C CD 04 37         [ 4] 3286         CALL     EMIT
      00132F CD 06 42         [ 4] 3287         CALL     OVER
      001332 CD 04 F1         [ 4] 3288         CALL     CSTOR
      001335 CC 0B 98         [ 2] 3289         JP     ONEP
                                   3290 
                                   3291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3292 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3293 ;       Process a key stroke,
                                   3294 ;       CR,LF or backspace.
                                   3295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001338                       3296         _HEADER KTAP,4,"KTAP"
      001338 13 25                    1         .word LINK 
                           00133A     2         LINK=.
      00133A 04                       3         .byte 4  
      00133B 4B 54 41 50              4         .ascii "KTAP"
      00133F                          5         KTAP:
      00133F CD 06 1A         [ 4] 3297         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001342 CD 04 70         [ 4] 3298         CALL     DOLIT
                           000001  3299 .if EOL_CR
      001345 00 0D                 3300         .word   CRR
                           000000  3301 .else ; EOL_LF 
                                   3302         .word   LF
                                   3303 .endif 
      001347 CD 06 A0         [ 4] 3304         CALL     XORR
      00134A CD 04 99         [ 4] 3305         CALL     QBRAN
      00134D 13 65                 3306         .word      KTAP2
      00134F CD 04 70         [ 4] 3307         CALL     DOLIT
      001352 00 08                 3308         .word      BKSPP
      001354 CD 06 A0         [ 4] 3309         CALL     XORR
      001357 CD 04 99         [ 4] 3310         CALL     QBRAN
      00135A 13 62                 3311         .word      KTAP1
      00135C CD 0B F7         [ 4] 3312         CALL     BLANK
      00135F CC 13 29         [ 2] 3313         JP     TAP
      001362 CC 12 F2         [ 2] 3314 KTAP1:  JP     BKSP
      001365 CD 06 10         [ 4] 3315 KTAP2:  CALL     DROP
      001368 CD 06 2A         [ 4] 3316         CALL     SWAPP
      00136B CD 06 10         [ 4] 3317         CALL     DROP
      00136E CC 06 1A         [ 2] 3318         JP     DUPP
                                   3319 
                                   3320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3321 ;       accept  ( b u -- b u )
                                   3322 ;       Accept characters to input
                                   3323 ;       buffer. Return with actual count.
                                   3324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001371                       3325         _HEADER ACCEP,6,"ACCEPT"
      001371 13 3A                    1         .word LINK 
                           001373     2         LINK=.
      001373 06                       3         .byte 6  
      001374 41 43 43 45 50 54        4         .ascii "ACCEPT"
      00137A                          5         ACCEP:
      00137A CD 06 42         [ 4] 3326         CALL     OVER
      00137D CD 08 3D         [ 4] 3327         CALL     PLUS
      001380 CD 06 42         [ 4] 3328         CALL     OVER
      001383 CD 08 28         [ 4] 3329 ACCP1:  CALL     DDUP
      001386 CD 06 A0         [ 4] 3330         CALL     XORR
      001389 CD 04 99         [ 4] 3331         CALL     QBRAN
      00138C 13 AE                 3332         .word      ACCP4
      00138E CD 0F 10         [ 4] 3333         CALL     KEY
      001391 CD 06 1A         [ 4] 3334         CALL     DUPP
      001394 CD 0B F7         [ 4] 3335         CALL     BLANK
      001397 CD 04 70         [ 4] 3336         CALL     DOLIT
      00139A 00 7F                 3337         .word      127
      00139C CD 09 97         [ 4] 3338         CALL     WITHI
      00139F CD 04 99         [ 4] 3339         CALL     QBRAN
      0013A2 13 A9                 3340         .word      ACCP2
      0013A4 CD 13 29         [ 4] 3341         CALL     TAP
      0013A7 20 03            [ 2] 3342         JRA     ACCP3
      0013A9 CD 13 3F         [ 4] 3343 ACCP2:  CALL     KTAP
      0013AC 20 D5            [ 2] 3344 ACCP3:  JRA     ACCP1
      0013AE CD 06 10         [ 4] 3345 ACCP4:  CALL     DROP
      0013B1 CD 06 42         [ 4] 3346         CALL     OVER
      0013B4 CC 08 D3         [ 2] 3347         JP     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3348 
                                   3349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3350 ;       QUERY   ( -- )
                                   3351 ;       Accept input stream to
                                   3352 ;       terminal input buffer.
                                   3353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013B7                       3354         _HEADER QUERY,5,"QUERY"
      0013B7 13 73                    1         .word LINK 
                           0013B9     2         LINK=.
      0013B9 05                       3         .byte 5  
      0013BA 51 55 45 52 59           4         .ascii "QUERY"
      0013BF                          5         QUERY:
      0013BF CD 0D 00         [ 4] 3355         CALL     TIB
      0013C2 CD 04 70         [ 4] 3356         CALL     DOLIT
      0013C5 00 50                 3357         .word      80
      0013C7 CD 13 7A         [ 4] 3358         CALL     ACCEP
      0013CA CD 07 0E         [ 4] 3359         CALL     NTIB
      0013CD CD 04 D2         [ 4] 3360         CALL     STORE
      0013D0 CD 06 10         [ 4] 3361         CALL     DROP
      0013D3 CD 0C 04         [ 4] 3362         CALL     ZERO
      0013D6 CD 06 FE         [ 4] 3363         CALL     INN
      0013D9 CC 04 D2         [ 2] 3364         JP     STORE
                                   3365 
                                   3366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3367 ;       ABORT   ( -- )
                                   3368 ;       Reset data stack and
                                   3369 ;       jump to QUIT.
                                   3370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013DC                       3371         _HEADER ABORT,5,"ABORT"
      0013DC 13 B9                    1         .word LINK 
                           0013DE     2         LINK=.
      0013DE 05                       3         .byte 5  
      0013DF 41 42 4F 52 54           4         .ascii "ABORT"
      0013E4                          5         ABORT:
      0013E4 CD 14 D8         [ 4] 3372         CALL     PRESE
      0013E7 CC 14 F5         [ 2] 3373         JP     QUIT
                                   3374 
                                   3375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3376 ;       abort"  ( f -- )
                                   3377 ;       Run time routine of ABORT".
                                   3378 ;       Abort with a message.
                                   3379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013EA                       3380         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013EA 13 DE                    1         .word LINK 
                           0013EC     2         LINK=.
      0013EC 46                       3         .byte COMPO+6  
      0013ED 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013F3                          5         ABORQ:
      0013F3 CD 04 99         [ 4] 3381         CALL     QBRAN
      0013F6 14 12                 3382         .word      ABOR2   ;text flag
      0013F8 CD 0F 9B         [ 4] 3383         CALL     DOSTR
      0013FB CD 0F 48         [ 4] 3384 ABOR1:  CALL     SPACE
      0013FE CD 0C C7         [ 4] 3385         CALL     COUNT
      001401 CD 0F 72         [ 4] 3386         CALL     TYPES
      001404 CD 04 70         [ 4] 3387         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001407 00 3F                 3388         .word     63 ; "?"
      001409 CD 04 37         [ 4] 3389         CALL     EMIT
      00140C CD 0F 8B         [ 4] 3390         CALL     CR
      00140F CC 13 E4         [ 2] 3391         JP     ABORT   ;pass error string
      001412 CD 0F 9B         [ 4] 3392 ABOR2:  CALL     DOSTR
      001415 CC 06 10         [ 2] 3393         JP     DROP
                                   3394 
                                   3395 ;; The text interpreter
                                   3396 
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3398 ;       $INTERPRET      ( a -- )
                                   3399 ;       Interpret a word. If failed,
                                   3400 ;       try to convert it to an integer.
                                   3401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001418                       3402         _HEADER INTER,10,"$INTERPRET"
      001418 13 EC                    1         .word LINK 
                           00141A     2         LINK=.
      00141A 0A                       3         .byte 10  
      00141B 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001425                          5         INTER:
      001425 CD 12 E7         [ 4] 3403         CALL     NAMEQ
      001428 CD 07 CD         [ 4] 3404         CALL     QDUP    ;?defined
      00142B CD 04 99         [ 4] 3405         CALL     QBRAN
      00142E 14 4F                 3406         .word      INTE1
      001430 CD 04 E4         [ 4] 3407         CALL     AT
      001433 CD 04 70         [ 4] 3408         CALL     DOLIT
      001436 40 00                 3409 	.word       0x4000	; COMPO*256
      001438 CD 06 77         [ 4] 3410         CALL     ANDD    ;?compile only lexicon bits
      00143B CD 13 F3         [ 4] 3411         CALL     ABORQ
      00143E 0D                    3412         .byte      13
      00143F 20 63 6F 6D 70 69 6C  3413         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00144C CC 04 C5         [ 2] 3414         JP      EXECU
      00144F                       3415 INTE1:  
      00144F CD 25 DD         [ 4] 3416         CALL     NUMBQ   ;convert a number
      001452 CD 04 99         [ 4] 3417         CALL     QBRAN
      001455 13 FB                 3418         .word    ABOR1
      001457 81               [ 4] 3419         RET
                                   3420 
                                   3421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3422 ;       [       ( -- )
                                   3423 ;       Start  text interpreter.
                                   3424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001458                       3425         _HEADER LBRAC,IMEDD+1,"["
      001458 14 1A                    1         .word LINK 
                           00145A     2         LINK=.
      00145A 81                       3         .byte IMEDD+1  
      00145B 5B                       4         .ascii "["
      00145C                          5         LBRAC:
      00145C CD 04 70         [ 4] 3426         CALL   DOLIT
      00145F 14 25                 3427         .word  INTER
      001461 CD 07 41         [ 4] 3428         CALL   TEVAL
      001464 CC 04 D2         [ 2] 3429         JP     STORE
                                   3430 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   3431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3432 ;       .OK     ( -- )
                                   3433 ;       Display 'ok' while interpreting.
                                   3434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001467                       3435         _HEADER DOTOK,3,".OK"
      001467 14 5A                    1         .word LINK 
                           001469     2         LINK=.
      001469 03                       3         .byte 3  
      00146A 2E 4F 4B                 4         .ascii ".OK"
      00146D                          5         DOTOK:
      00146D CD 04 70         [ 4] 3436         CALL     DOLIT
      001470 14 25                 3437         .word      INTER
      001472 CD 07 41         [ 4] 3438         CALL     TEVAL
      001475 CD 04 E4         [ 4] 3439         CALL     AT
      001478 CD 08 FB         [ 4] 3440         CALL     EQUAL
      00147B CD 04 99         [ 4] 3441         CALL     QBRAN
      00147E 14 87                 3442         .word      DOTO1
      001480 CD 0F B8         [ 4] 3443         CALL     DOTQP
      001483 03                    3444         .byte      3
      001484 20 6F 6B              3445         .ascii     " ok"
      001487 CC 0F 8B         [ 2] 3446 DOTO1:  JP     CR
                                   3447 
                                   3448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3449 ;       ?STACK  ( -- )
                                   3450 ;       Abort if stack underflows.
                                   3451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148A                       3452         _HEADER QSTAC,6,"?STACK"
      00148A 14 69                    1         .word LINK 
                           00148C     2         LINK=.
      00148C 06                       3         .byte 6  
      00148D 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001493                          5         QSTAC:
      001493 CD 0C 46         [ 4] 3453         CALL     DEPTH
      001496 CD 06 51         [ 4] 3454         CALL     ZLESS   ;check only for underflow
      001499 CD 13 F3         [ 4] 3455         CALL     ABORQ
      00149C 0B                    3456         .byte      11
      00149D 20 75 6E 64 65 72 66  3457         .ascii     " underflow "
             6C 6F 77 20
      0014A8 81               [ 4] 3458         RET
                                   3459 
                                   3460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3461 ;       EVAL    ( -- )
                                   3462 ;       Interpret  input stream.
                                   3463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014A9                       3464         _HEADER EVAL,4,"EVAL"
      0014A9 14 8C                    1         .word LINK 
                           0014AB     2         LINK=.
      0014AB 04                       3         .byte 4  
      0014AC 45 56 41 4C              4         .ascii "EVAL"
      0014B0                          5         EVAL:
      0014B0 CD 11 EA         [ 4] 3465 EVAL1:  CALL     TOKEN
      0014B3 CD 06 1A         [ 4] 3466         CALL     DUPP
      0014B6 CD 05 02         [ 4] 3467         CALL     CAT     ;?input stream empty
      0014B9 CD 04 99         [ 4] 3468         CALL     QBRAN
      0014BC 14 C9                 3469         .word    EVAL2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0014BE CD 07 41         [ 4] 3470         CALL     TEVAL
      0014C1 CD 0D 14         [ 4] 3471         CALL     ATEXE
      0014C4 CD 14 93         [ 4] 3472         CALL     QSTAC   ;evaluate input, check stack
      0014C7 20 E7            [ 2] 3473         JRA     EVAL1 
      0014C9 CD 06 10         [ 4] 3474 EVAL2:  CALL     DROP
      0014CC CC 14 6D         [ 2] 3475         JP       DOTOK
                                   3476 
                                   3477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3478 ;       PRESET  ( -- )
                                   3479 ;       Reset data stack pointer and
                                   3480 ;       terminal input buffer.
                                   3481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014CF                       3482         _HEADER PRESE,6,"PRESET"
      0014CF 14 AB                    1         .word LINK 
                           0014D1     2         LINK=.
      0014D1 06                       3         .byte 6  
      0014D2 50 52 45 53 45 54        4         .ascii "PRESET"
      0014D8                          5         PRESE:
      0014D8 CD 04 70         [ 4] 3483         CALL     DOLIT
      0014DB 16 80                 3484         .word      SPP
      0014DD CD 06 07         [ 4] 3485         CALL     SPSTO
      0014E0 CD 04 70         [ 4] 3486         CALL     DOLIT
      0014E3 17 00                 3487         .word      TIBB
      0014E5 CD 07 0E         [ 4] 3488         CALL     NTIB
      0014E8 CD 0B 6D         [ 4] 3489         CALL     CELLP
      0014EB CC 04 D2         [ 2] 3490         JP     STORE
                                   3491 
                                   3492 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3493 ;       QUIT    ( -- )
                                   3494 ;       Reset return stack pointer
                                   3495 ;       and start text interpreter.
                                   3496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014EE                       3497         _HEADER QUIT,4,"QUIT"
      0014EE 14 D1                    1         .word LINK 
                           0014F0     2         LINK=.
      0014F0 04                       3         .byte 4  
      0014F1 51 55 49 54              4         .ascii "QUIT"
      0014F5                          5         QUIT:
      0014F5 CD 04 70         [ 4] 3498         CALL     DOLIT
      0014F8 17 FF                 3499         .word      RPP
      0014FA CD 05 1F         [ 4] 3500         CALL     RPSTO   ;reset return stack pointer
      0014FD CD 14 5C         [ 4] 3501 QUIT1:  CALL     LBRAC   ;start interpretation
      001500 CD 13 BF         [ 4] 3502 QUIT2:  CALL     QUERY   ;get input
      001503 CD 14 B0         [ 4] 3503         CALL     EVAL
      001506 20 F8            [ 2] 3504         JRA     QUIT2   ;continue till error
                                   3505 
                                   3506 ;; The compiler
                                   3507 
                                   3508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3509 ;       '       ( -- ca )
                                   3510 ;       Search vocabularies for
                                   3511 ;       next word in input stream.
                                   3512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001508                       3513         _HEADER TICK,1,"'"
      001508 14 F0                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                           00150A     2         LINK=.
      00150A 01                       3         .byte 1  
      00150B 27                       4         .ascii "'"
      00150C                          5         TICK:
      00150C CD 11 EA         [ 4] 3514         CALL     TOKEN
      00150F CD 12 E7         [ 4] 3515         CALL     NAMEQ   ;?defined
      001512 CD 04 99         [ 4] 3516         CALL     QBRAN
      001515 13 FB                 3517         .word      ABOR1
      001517 81               [ 4] 3518         RET     ;yes, push code address
                                   3519 
                                   3520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3521 ;       ALLOT   ( n -- )
                                   3522 ;       Allocate n bytes to RAM 
                                   3523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001518                       3524         _HEADER ALLOT,5,"ALLOT"
      001518 15 0A                    1         .word LINK 
                           00151A     2         LINK=.
      00151A 05                       3         .byte 5  
      00151B 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001520                          5         ALLOT:
      001520 CD 07 71         [ 4] 3525         CALL     VPP
                                   3526 ; must update APP_VP each time VP is modidied
      001523 CD 0C 74         [ 4] 3527         call PSTOR 
      001526 CC 1D 29         [ 2] 3528         jp UPDATVP 
                                   3529 
                                   3530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3531 ;       ,       ( w -- )
                                   3532 ;         Compile an integer into
                                   3533 ;         variable space.
                                   3534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001529                       3535         _HEADER COMMA,1,^/"\,"/
      001529 15 1A                    1         .word LINK 
                           00152B     2         LINK=.
      00152B 01                       3         .byte 1  
      00152C 5C 2C                    4         .ascii "\,"
      00152E                          5         COMMA:
      00152E CD 0C DE         [ 4] 3536         CALL     HERE
      001531 CD 06 1A         [ 4] 3537         CALL     DUPP
      001534 CD 0B 6D         [ 4] 3538         CALL     CELLP   ;cell boundary
      001537 CD 07 71         [ 4] 3539         CALL     VPP
      00153A CD 04 D2         [ 4] 3540         CALL     STORE
      00153D CC 04 D2         [ 2] 3541         JP     STORE
                                   3542 
                                   3543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3544 ;       C,      ( c -- )
                                   3545 ;       Compile a byte into
                                   3546 ;       variables space.
                                   3547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001540                       3548         _HEADER CCOMMA,2,^/"C,"/
      001540 15 2B                    1         .word LINK 
                           001542     2         LINK=.
      001542 02                       3         .byte 2  
      001543 43 2C                    4         .ascii "C,"
      001545                          5         CCOMMA:
      001545 CD 0C DE         [ 4] 3549         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001548 CD 06 1A         [ 4] 3550         CALL     DUPP
      00154B CD 0B 98         [ 4] 3551         CALL     ONEP
      00154E CD 07 71         [ 4] 3552         CALL     VPP
      001551 CD 04 D2         [ 4] 3553         CALL     STORE
      001554 CC 04 F1         [ 2] 3554         JP     CSTOR
                                   3555 
                                   3556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3557 ;       [COMPILE]       ( -- ; <string> )
                                   3558 ;       Compile next immediate
                                   3559 ;       word into code dictionary.
                                   3560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001557                       3561         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001557 15 42                    1         .word LINK 
                           001559     2         LINK=.
      001559 89                       3         .byte IMEDD+9  
      00155A 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001563                          5         BCOMP:
      001563 CD 15 0C         [ 4] 3562         CALL     TICK
      001566 CC 18 44         [ 2] 3563         JP     JSRC
                                   3564 
                                   3565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3566 ;       COMPILE ( -- )
                                   3567 ;       Compile next jsr in
                                   3568 ;       colon list to code dictionary.
                                   3569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001569                       3570         _HEADER COMPI,COMPO+7,"COMPILE"
      001569 15 59                    1         .word LINK 
                           00156B     2         LINK=.
      00156B 47                       3         .byte COMPO+7  
      00156C 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001573                          5         COMPI:
      001573 CD 05 35         [ 4] 3571         CALL     RFROM
      001576 CD 06 1A         [ 4] 3572         CALL     DUPP
      001579 CD 04 E4         [ 4] 3573         CALL     AT
      00157C CD 18 44         [ 4] 3574         CALL     JSRC    ;compile subroutine
      00157F CD 0B 6D         [ 4] 3575         CALL     CELLP
      001582 90 93            [ 1] 3576         ldw y,x 
      001584 90 FE            [ 2] 3577         ldw y,(y)
      001586 1C 00 02         [ 2] 3578         addw x,#CELLL 
      001589 90 FC            [ 2] 3579         jp (y)
                                   3580 
                                   3581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3582 ;       LITERAL ( w -- )
                                   3583 ;       Compile tos to dictionary
                                   3584 ;       as an integer literal.
                                   3585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00158B                       3586         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00158B 15 6B                    1         .word LINK 
                           00158D     2         LINK=.
      00158D C7                       3         .byte COMPO+IMEDD+7  
      00158E 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001595                          5         LITER:
      001595 CD 15 73         [ 4] 3587         CALL     COMPI
      001598 04 70                 3588         .word DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00159A CC 15 2E         [ 2] 3589         JP     COMMA
                                   3590 
                                   3591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3592 ;       $,"     ( -- )
                                   3593 ;       Compile a literal string
                                   3594 ;       up to next " .
                                   3595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3596 ;        _HEADER STRCQ,3,^/'$,"'/
      00159D                       3597 STRCQ:
      00159D CD 04 70         [ 4] 3598         CALL     DOLIT
      0015A0 00 22                 3599         .word     34	; "
      0015A2 CD 11 29         [ 4] 3600         CALL     PARSE
      0015A5 CD 0C DE         [ 4] 3601         CALL     HERE
      0015A8 CD 0D AF         [ 4] 3602         CALL     PACKS   ;string to code dictionary
      0015AB CD 0C C7         [ 4] 3603         CALL     COUNT
      0015AE CD 08 3D         [ 4] 3604         CALL     PLUS    ;calculate aligned end of string
      0015B1 CD 07 71         [ 4] 3605         CALL     VPP
      0015B4 CC 04 D2         [ 2] 3606         JP     STORE
                                   3607 
                                   3608 ;; Structures
                                   3609 
                                   3610 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3611 ;       FOR     ( -- a )
                                   3612 ;       Start a FOR-NEXT loop
                                   3613 ;       structure in a colon definition.
                                   3614 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B7                       3615         _HEADER FOR,IMEDD+3,"FOR"
      0015B7 15 8D                    1         .word LINK 
                           0015B9     2         LINK=.
      0015B9 83                       3         .byte IMEDD+3  
      0015BA 46 4F 52                 4         .ascii "FOR"
      0015BD                          5         FOR:
      0015BD CD 15 73         [ 4] 3616         CALL     COMPI
      0015C0 05 E3                 3617         .word TOR 
      0015C2 CC 0C DE         [ 2] 3618         JP     HERE
                                   3619 
                                   3620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3621 ;       NEXT    ( a -- )
                                   3622 ;       Terminate a FOR-NEXT loop.
                                   3623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C5                       3624         _HEADER NEXT,IMEDD+4,"NEXT"
      0015C5 15 B9                    1         .word LINK 
                           0015C7     2         LINK=.
      0015C7 84                       3         .byte IMEDD+4  
      0015C8 4E 45 58 54              4         .ascii "NEXT"
      0015CC                          5         NEXT:
      0015CC CD 15 73         [ 4] 3625         CALL     COMPI
      0015CF 04 84                 3626         .word DONXT 
      0015D1 CD 07 BD         [ 4] 3627         call ADRADJ
      0015D4 CC 15 2E         [ 2] 3628         JP     COMMA
                                   3629 
                                   3630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3631 ;       I ( -- n )
                                   3632 ;       stack COUNTER
                                   3633 ;       of innermost FOR-NEXT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015D7                       3635         _HEADER IFETCH,1,"I"
      0015D7 15 C7                    1         .word LINK 
                           0015D9     2         LINK=.
      0015D9 01                       3         .byte 1  
      0015DA 49                       4         .ascii "I"
      0015DB                          5         IFETCH:
      0015DB 1D 00 02         [ 2] 3636         subw x,#CELLL 
      0015DE 16 03            [ 2] 3637         ldw y,(3,sp)
      0015E0 FF               [ 2] 3638         ldw (x),y 
      0015E1 81               [ 4] 3639         ret 
                                   3640 
                                   3641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3642 ;       J ( -- n )
                                   3643 ;   stack COUNTER
                                   3644 ;   of outer FOR-NEXT  
                                   3645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E2                       3646         _HEADER JFETCH,1,"J"
      0015E2 15 D9                    1         .word LINK 
                           0015E4     2         LINK=.
      0015E4 01                       3         .byte 1  
      0015E5 4A                       4         .ascii "J"
      0015E6                          5         JFETCH:
      0015E6 1D 00 02         [ 2] 3647         SUBW X,#CELLL 
      0015E9 16 05            [ 2] 3648         LDW Y,(5,SP)
      0015EB FF               [ 2] 3649         LDW (X),Y 
      0015EC 81               [ 4] 3650         RET 
                                   3651 
                                   3652 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3653 ;       BEGIN   ( -- a )
                                   3654 ;       Start an infinite or
                                   3655 ;       indefinite loop structure.
                                   3656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015ED                       3657         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015ED 15 E4                    1         .word LINK 
                           0015EF     2         LINK=.
      0015EF 85                       3         .byte IMEDD+5  
      0015F0 42 45 47 49 4E           4         .ascii "BEGIN"
      0015F5                          5         BEGIN:
      0015F5 CC 0C DE         [ 2] 3658         JP     HERE
                                   3659 
                                   3660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3661 ;       UNTIL   ( a -- )
                                   3662 ;       Terminate a BEGIN-UNTIL
                                   3663 ;       indefinite loop structure.
                                   3664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F8                       3665         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015F8 15 EF                    1         .word LINK 
                           0015FA     2         LINK=.
      0015FA 85                       3         .byte IMEDD+5  
      0015FB 55 4E 54 49 4C           4         .ascii "UNTIL"
      001600                          5         UNTIL:
      001600 CD 15 73         [ 4] 3666         CALL     COMPI
      001603 04 99                 3667         .word    QBRAN 
      001605 CD 07 BD         [ 4] 3668         call ADRADJ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001608 CC 15 2E         [ 2] 3669         JP     COMMA
                                   3670 
                                   3671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3672 ;       AGAIN   ( a -- )
                                   3673 ;       Terminate a BEGIN-AGAIN
                                   3674 ;       infinite loop structure.
                                   3675 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00160B                       3676         _HEADER AGAIN,IMEDD+5,"AGAIN"
      00160B 15 FA                    1         .word LINK 
                           00160D     2         LINK=.
      00160D 85                       3         .byte IMEDD+5  
      00160E 41 47 41 49 4E           4         .ascii "AGAIN"
      001613                          5         AGAIN:
                           000001  3677 .if OPTIMIZE 
      001613                       3678         _DOLIT JPIMM 
      001613 CD 04 70         [ 4]    1     CALL DOLIT 
      001616 00 CC                    2     .word JPIMM 
      001618 CD 15 45         [ 4] 3679         CALL  CCOMMA
                           000000  3680 .else 
                                   3681         CALL     COMPI
                                   3682         .word BRAN
                                   3683 .endif 
      00161B CD 07 BD         [ 4] 3684         call ADRADJ 
      00161E CC 15 2E         [ 2] 3685         JP     COMMA
                                   3686 
                                   3687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3688 ;       IF      ( -- A )
                                   3689 ;       Begin a conditional branch.
                                   3690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001621                       3691         _HEADER IFF,IMEDD+2,"IF"
      001621 16 0D                    1         .word LINK 
                           001623     2         LINK=.
      001623 82                       3         .byte IMEDD+2  
      001624 49 46                    4         .ascii "IF"
      001626                          5         IFF:
      001626 CD 15 73         [ 4] 3692         CALL     COMPI
      001629 04 99                 3693         .word QBRAN
      00162B CD 0C DE         [ 4] 3694         CALL     HERE
      00162E CD 0C 04         [ 4] 3695         CALL     ZERO
      001631 CC 15 2E         [ 2] 3696         JP     COMMA
                                   3697 
                                   3698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3699 ;       THEN        ( A -- )
                                   3700 ;       Terminate a conditional 
                                   3701 ;       branch structure.
                                   3702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001634                       3703         _HEADER THENN,IMEDD+4,"THEN"
      001634 16 23                    1         .word LINK 
                           001636     2         LINK=.
      001636 84                       3         .byte IMEDD+4  
      001637 54 48 45 4E              4         .ascii "THEN"
      00163B                          5         THENN:
      00163B CD 0C DE         [ 4] 3704         CALL     HERE
      00163E CD 07 BD         [ 4] 3705         call ADRADJ 
      001641 CD 06 2A         [ 4] 3706         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001644 CC 04 D2         [ 2] 3707         JP     STORE
                                   3708 
                                   3709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3710 ;       ELSE        ( A -- A )
                                   3711 ;       Start the false clause in 
                                   3712 ;       an IF-ELSE-THEN structure.
                                   3713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001647                       3714         _HEADER ELSEE,IMEDD+4,"ELSE"
      001647 16 36                    1         .word LINK 
                           001649     2         LINK=.
      001649 84                       3         .byte IMEDD+4  
      00164A 45 4C 53 45              4         .ascii "ELSE"
      00164E                          5         ELSEE:
                           000001  3715 .if OPTIMIZE 
      00164E                       3716         _DOLIT JPIMM 
      00164E CD 04 70         [ 4]    1     CALL DOLIT 
      001651 00 CC                    2     .word JPIMM 
      001653 CD 15 45         [ 4] 3717         CALL CCOMMA 
                           000000  3718 .else 
                                   3719          CALL     COMPI
                                   3720         .word BRAN
                                   3721 .endif 
      001656 CD 0C DE         [ 4] 3722         CALL     HERE
      001659 CD 0C 04         [ 4] 3723         CALL     ZERO
      00165C CD 15 2E         [ 4] 3724         CALL     COMMA
      00165F CD 06 2A         [ 4] 3725         CALL     SWAPP
      001662 CD 0C DE         [ 4] 3726         CALL     HERE
      001665 CD 07 BD         [ 4] 3727         call ADRADJ 
      001668 CD 06 2A         [ 4] 3728         CALL     SWAPP
      00166B CC 04 D2         [ 2] 3729         JP     STORE
                                   3730 
                                   3731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3732 ;       AHEAD       ( -- A )
                                   3733 ;       Compile a forward branch
                                   3734 ;       instruction.
                                   3735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00166E                       3736         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00166E 16 49                    1         .word LINK 
                           001670     2         LINK=.
      001670 85                       3         .byte IMEDD+5  
      001671 41 48 45 41 44           4         .ascii "AHEAD"
      001676                          5         AHEAD:
                           000001  3737 .if OPTIMIZE 
      001676                       3738         _DOLIT JPIMM 
      001676 CD 04 70         [ 4]    1     CALL DOLIT 
      001679 00 CC                    2     .word JPIMM 
      00167B CD 15 45         [ 4] 3739         CALL CCOMMA
                           000000  3740 .else 
                                   3741         CALL     COMPI
                                   3742         .word BRAN
                                   3743 .endif 
      00167E CD 0C DE         [ 4] 3744         CALL     HERE
      001681 CD 0C 04         [ 4] 3745         CALL     ZERO
      001684 CC 15 2E         [ 2] 3746         JP     COMMA
                                   3747 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3749 ;       WHILE       ( a -- A a )
                                   3750 ;       Conditional branch out of a 
                                   3751 ;       BEGIN-WHILE-REPEAT loop.
                                   3752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001687                       3753         _HEADER WHILE,IMEDD+5,"WHILE"
      001687 16 70                    1         .word LINK 
                           001689     2         LINK=.
      001689 85                       3         .byte IMEDD+5  
      00168A 57 48 49 4C 45           4         .ascii "WHILE"
      00168F                          5         WHILE:
      00168F CD 15 73         [ 4] 3754         CALL     COMPI
      001692 04 99                 3755         .word QBRAN
      001694 CD 0C DE         [ 4] 3756         CALL     HERE
      001697 CD 0C 04         [ 4] 3757         CALL     ZERO
      00169A CD 15 2E         [ 4] 3758         CALL     COMMA
      00169D CC 06 2A         [ 2] 3759         JP     SWAPP
                                   3760 
                                   3761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3762 ;       REPEAT      ( A a -- )
                                   3763 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3764 ;       indefinite loop.
                                   3765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A0                       3766         _HEADER REPEA,IMEDD+6,"REPEAT"
      0016A0 16 89                    1         .word LINK 
                           0016A2     2         LINK=.
      0016A2 86                       3         .byte IMEDD+6  
      0016A3 52 45 50 45 41 54        4         .ascii "REPEAT"
      0016A9                          5         REPEA:
                           000001  3767 .if OPTIMIZE 
      0016A9                       3768         _DOLIT JPIMM 
      0016A9 CD 04 70         [ 4]    1     CALL DOLIT 
      0016AC 00 CC                    2     .word JPIMM 
      0016AE CD 15 45         [ 4] 3769         CALL  CCOMMA
                           000000  3770 .else 
                                   3771         CALL     COMPI
                                   3772         .word BRAN
                                   3773 .endif 
      0016B1 CD 07 BD         [ 4] 3774         call ADRADJ 
      0016B4 CD 15 2E         [ 4] 3775         CALL     COMMA
      0016B7 CD 0C DE         [ 4] 3776         CALL     HERE
      0016BA CD 07 BD         [ 4] 3777         call ADRADJ 
      0016BD CD 06 2A         [ 4] 3778         CALL     SWAPP
      0016C0 CC 04 D2         [ 2] 3779         JP     STORE
                                   3780 
                                   3781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3782 ;       AFT         ( a -- a A )
                                   3783 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3784 ;       loop the first time through.
                                   3785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016C3                       3786         _HEADER AFT,IMEDD+3,"AFT"
      0016C3 16 A2                    1         .word LINK 
                           0016C5     2         LINK=.
      0016C5 83                       3         .byte IMEDD+3  
      0016C6 41 46 54                 4         .ascii "AFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0016C9                          5         AFT:
      0016C9 CD 06 10         [ 4] 3787         CALL     DROP
      0016CC CD 16 76         [ 4] 3788         CALL     AHEAD
      0016CF CD 0C DE         [ 4] 3789         CALL     HERE
      0016D2 CC 06 2A         [ 2] 3790         JP     SWAPP
                                   3791 
                                   3792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3793 ;       ABORT"      ( -- ; <string> )
                                   3794 ;       Conditional abort with an error message.
                                   3795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D5                       3796         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016D5 16 C5                    1         .word LINK 
                           0016D7     2         LINK=.
      0016D7 86                       3         .byte IMEDD+6  
      0016D8 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016DE                          5         ABRTQ:
      0016DE CD 15 73         [ 4] 3797         CALL     COMPI
      0016E1 13 F3                 3798         .word ABORQ
      0016E3 CC 15 9D         [ 2] 3799         JP     STRCQ
                                   3800 
                                   3801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3802 ;       $"     ( -- ; <string> )
                                   3803 ;       Compile an inline string literal.
                                   3804 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E6                       3805         _HEADER STRQ,IMEDD+2,'$"'
      0016E6 16 D7                    1         .word LINK 
                           0016E8     2         LINK=.
      0016E8 82                       3         .byte IMEDD+2  
      0016E9 24 22                    4         .ascii '$"'
      0016EB                          5         STRQ:
      0016EB CD 15 73         [ 4] 3806         CALL     COMPI
      0016EE 0F B4                 3807         .word STRQP 
      0016F0 CC 15 9D         [ 2] 3808         JP     STRCQ
                                   3809 
                                   3810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3811 ;       ."          ( -- ; <string> )
                                   3812 ;       Compile an inline string literal 
                                   3813 ;       to be typed out at run time.
                                   3814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F3                       3815         _HEADER DOTQ,IMEDD+2,'."'
      0016F3 16 E8                    1         .word LINK 
                           0016F5     2         LINK=.
      0016F5 82                       3         .byte IMEDD+2  
      0016F6 2E 22                    4         .ascii '."'
      0016F8                          5         DOTQ:
      0016F8 CD 15 73         [ 4] 3816         CALL     COMPI
      0016FB 0F B8                 3817         .word DOTQP 
      0016FD CC 15 9D         [ 2] 3818         JP     STRCQ
                                   3819 
                                   3820 ;; Name compiler
                                   3821 
                                   3822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3823 ;       ?UNIQUE ( a -- a )
                                   3824 ;       Display a warning message
                                   3825 ;       if word already exists.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   3826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001700                       3827         _HEADER UNIQU,7,"?UNIQUE"
      001700 16 F5                    1         .word LINK 
                           001702     2         LINK=.
      001702 07                       3         .byte 7  
      001703 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      00170A                          5         UNIQU:
      00170A CD 06 1A         [ 4] 3828         CALL     DUPP
      00170D CD 12 E7         [ 4] 3829         CALL     NAMEQ   ;?name exists
      001710 CD 04 99         [ 4] 3830         CALL     QBRAN
      001713 17 29                 3831         .word      UNIQ1
      001715 CD 0F B8         [ 4] 3832         CALL     DOTQP   ;redef are OK
      001718 07                    3833         .byte       7
      001719 20 72 65 44 65 66 20  3834         .ascii     " reDef "       
      001720 CD 06 42         [ 4] 3835         CALL     OVER
      001723 CD 0C C7         [ 4] 3836         CALL     COUNT
      001726 CD 0F 72         [ 4] 3837         CALL     TYPES   ;just in case
      001729 CC 06 10         [ 2] 3838 UNIQ1:  JP     DROP
                                   3839 
                                   3840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3841 ;       $,n     ( na -- )
                                   3842 ;       Build a new dictionary name
                                   3843 ;       using string at na.
                                   3844 ; compile dans l'espace des variables 
                                   3845 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3846 ;        _HEADER SNAME,3,^/"$,n"/
      00172C                       3847 SNAME: 
      00172C CD 06 1A         [ 4] 3848         CALL     DUPP
      00172F CD 05 02         [ 4] 3849         CALL     CAT     ;?null input
      001732 CD 04 99         [ 4] 3850         CALL     QBRAN
      001735 17 62                 3851         .word      PNAM1
      001737 CD 17 0A         [ 4] 3852         CALL     UNIQU   ;?redefinition
      00173A CD 06 1A         [ 4] 3853         CALL     DUPP
      00173D CD 0C C7         [ 4] 3854         CALL     COUNT
      001740 CD 08 3D         [ 4] 3855         CALL     PLUS
      001743 CD 07 71         [ 4] 3856         CALL     VPP
      001746 CD 04 D2         [ 4] 3857         CALL     STORE
      001749 CD 06 1A         [ 4] 3858         CALL     DUPP
      00174C CD 07 8F         [ 4] 3859         CALL     LAST
      00174F CD 04 D2         [ 4] 3860         CALL     STORE   ;save na for vocabulary link
      001752 CD 0B 7C         [ 4] 3861         CALL     CELLM   ;link address
      001755 CD 07 63         [ 4] 3862         CALL     CNTXT
      001758 CD 04 E4         [ 4] 3863         CALL     AT
      00175B CD 06 2A         [ 4] 3864         CALL     SWAPP
      00175E CD 04 D2         [ 4] 3865         CALL     STORE
      001761 81               [ 4] 3866         RET     ;save code pointer
      001762 CD 0F B4         [ 4] 3867 PNAM1:  CALL     STRQP
      001765 05                    3868         .byte      5
      001766 20 6E 61 6D 65        3869         .ascii     " name" ;null input
      00176B CC 13 FB         [ 2] 3870         JP     ABOR1
                                   3871 
                                   3872 ;; FORTH compiler
                                   3873 
                                   3874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3875 ;       $COMPILE        ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   3876 ;       Compile next word to
                                   3877 ;       dictionary as a token or literal.
                                   3878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00176E                       3879         _HEADER SCOMP,8,"$COMPILE"
      00176E 17 02                    1         .word LINK 
                           001770     2         LINK=.
      001770 08                       3         .byte 8  
      001771 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001779                          5         SCOMP:
      001779 CD 12 E7         [ 4] 3880         CALL     NAMEQ
      00177C CD 07 CD         [ 4] 3881         CALL     QDUP    ;?defined
      00177F CD 04 99         [ 4] 3882         CALL     QBRAN
      001782 17 9A                 3883         .word      SCOM2
      001784 CD 04 E4         [ 4] 3884         CALL     AT
      001787 CD 04 70         [ 4] 3885         CALL     DOLIT
      00178A 80 00                 3886         .word     0x8000	;  IMEDD*256
      00178C CD 06 77         [ 4] 3887         CALL     ANDD    ;?immediate
      00178F CD 04 99         [ 4] 3888         CALL     QBRAN
      001792 17 97                 3889         .word      SCOM1
      001794 CC 04 C5         [ 2] 3890         JP     EXECU
      001797 CC 18 44         [ 2] 3891 SCOM1:  JP     JSRC
      00179A CD 25 DD         [ 4] 3892 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00179D CD 07 CD         [ 4] 3893         CALL    QDUP  
      0017A0 CD 04 99         [ 4] 3894         CALL     QBRAN
      0017A3 13 FB                 3895         .word      ABOR1
      0017A5                       3896         _DOLIT  -1
      0017A5 CD 04 70         [ 4]    1     CALL DOLIT 
      0017A8 FF FF                    2     .word -1 
      0017AA CD 08 FB         [ 4] 3897         CALL    EQUAL
      0017AD                       3898         _QBRAN DLITER  
      0017AD CD 04 99         [ 4]    1     CALL QBRAN
      0017B0 29 BC                    2     .word DLITER
      0017B2 CC 15 95         [ 2] 3899         JP     LITER
                                   3900 
                                   3901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3902 ;       OVERT   ( -- )
                                   3903 ;       Link a new word into vocabulary.
                                   3904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B5                       3905         _HEADER OVERT,5,"OVERT"
      0017B5 17 70                    1         .word LINK 
                           0017B7     2         LINK=.
      0017B7 05                       3         .byte 5  
      0017B8 4F 56 45 52 54           4         .ascii "OVERT"
      0017BD                          5         OVERT:
      0017BD CD 07 8F         [ 4] 3906         CALL     LAST
      0017C0 CD 04 E4         [ 4] 3907         CALL     AT
      0017C3 CD 07 63         [ 4] 3908         CALL     CNTXT
      0017C6 CC 04 D2         [ 2] 3909         JP     STORE
                                   3910 
                                   3911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3912 ;       ;       ( -- )
                                   3913 ;       Terminate a colon definition.
                                   3914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C9                       3915         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0017C9 17 B7                    1         .word LINK 
                           0017CB     2         LINK=.
      0017CB C1                       3         .byte IMEDD+COMPO+1  
      0017CC 3B                       4         .ascii ";"
      0017CD                          5         SEMIS:
                           000001  3916 .if OPTIMIZE ; more compact and faster
      0017CD CD 04 70         [ 4] 3917         call DOLIT 
      0017D0 00 81                 3918         .word 0x81   ; opcode for RET 
      0017D2 CD 15 45         [ 4] 3919         call CCOMMA 
                           000000  3920 .else
                                   3921         CALL     COMPI
                                   3922         .word EXIT 
                                   3923 .endif 
      0017D5 CD 14 5C         [ 4] 3924         CALL     LBRAC
      0017D8 CD 17 BD         [ 4] 3925         call OVERT 
      0017DB CD 22 81         [ 4] 3926         CALL FMOVE
      0017DE CD 07 CD         [ 4] 3927         call QDUP 
      0017E1 CD 04 99         [ 4] 3928         call QBRAN 
      0017E4 19 5A                 3929         .word SET_RAMLAST 
      0017E6 CD 23 15         [ 4] 3930         CALL UPDATPTR
      0017E9 81               [ 4] 3931         RET 
                                   3932 
                                   3933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3934 ;       Terminate an ISR definition 
                                   3935 ;       retourn ca of ISR as double
                                   3936 ;       I; ( -- ud )
                                   3937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017EA                       3938        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017EA 17 CB                    1         .word LINK 
                           0017EC     2         LINK=.
      0017EC C2                       3         .byte 2+IMEDD+COMPO  
      0017ED 49 3B                    4         .ascii "I;"
      0017EF                          5         ISEMI:
      0017EF 1D 00 02         [ 2] 3939         subw x,#CELLL  
      0017F2 90 AE 00 80      [ 2] 3940         ldw y,#IRET_CODE 
      0017F6 FF               [ 2] 3941         ldw (x),y 
      0017F7 CD 15 45         [ 4] 3942         call CCOMMA
      0017FA CD 14 5C         [ 4] 3943         call LBRAC 
      0017FD CD 23 5A         [ 4] 3944         call IFMOVE
      001800 CD 07 CD         [ 4] 3945         call QDUP 
      001803 CD 04 99         [ 4] 3946         CALL QBRAN 
      001806 19 5A                 3947         .word SET_RAMLAST
      001808 CD 07 7F         [ 4] 3948         CALL CPP
      00180B CD 04 E4         [ 4] 3949         call AT 
      00180E CD 06 2A         [ 4] 3950         call SWAPP 
      001811 CD 07 7F         [ 4] 3951         CALL CPP 
      001814 CD 04 D2         [ 4] 3952         call STORE 
      001817 CD 1D 12         [ 4] 3953         call UPDATCP 
      00181A CD 1C CF         [ 4] 3954         call EEPVP 
      00181D                       3955         _DROP 
      00181D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001820 CD 04 E4         [ 4] 3956         call AT 
      001823 CD 07 71         [ 4] 3957         call VPP 
      001826 CD 04 D2         [ 4] 3958         call STORE 
      001829 CC 0C 04         [ 2] 3959         jp ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      00182C 81               [ 4] 3960         ret           
                                   3961         
                                   3962 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3963 ;       ]       ( -- )
                                   3964 ;       Start compiling words in
                                   3965 ;       input stream.
                                   3966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00182D                       3967         _HEADER RBRAC,1,"]"
      00182D 17 EC                    1         .word LINK 
                           00182F     2         LINK=.
      00182F 01                       3         .byte 1  
      001830 5D                       4         .ascii "]"
      001831                          5         RBRAC:
      001831 CD 04 70         [ 4] 3968         CALL   DOLIT
      001834 17 79                 3969         .word  SCOMP
      001836 CD 07 41         [ 4] 3970         CALL   TEVAL
      001839 CC 04 D2         [ 2] 3971         JP     STORE
                                   3972 
                                   3973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3974 ;       CALL,    ( ca -- )
                                   3975 ;       Compile a subroutine call.
                                   3976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00183C                       3977         _HEADER JSRC,5,^/"CALL,"/
      00183C 18 2F                    1         .word LINK 
                           00183E     2         LINK=.
      00183E 05                       3         .byte 5  
      00183F 43 41 4C 4C 2C           4         .ascii "CALL,"
      001844                          5         JSRC:
                           000001  3978 .if OPTIMIZE 
                                   3979 ;;;;; optimization code ;;;;;;;;;;;;;;;
      001844 90 AE 06 10      [ 2] 3980         LDW Y,#DROP 
      001848 90 BF 26         [ 2] 3981         LDW YTEMP,Y 
      00184B 90 93            [ 1] 3982         LDW Y,X 
      00184D 90 FE            [ 2] 3983         LDW Y,(Y)
      00184F 90 B3 26         [ 2] 3984         CPW Y,YTEMP 
      001852 26 13            [ 1] 3985         JRNE JSRC1         
                                   3986 ; replace CALL DROP BY  ADDW X,#CELLL 
      001854 1C 00 02         [ 2] 3987         ADDW X,#CELLL 
      001857                       3988         _DOLIT ADDWX ; opcode 
      001857 CD 04 70         [ 4]    1     CALL DOLIT 
      00185A 00 1C                    2     .word ADDWX 
      00185C CD 15 45         [ 4] 3989         CALL   CCOMMA 
      00185F                       3990         _DOLIT CELLL 
      00185F CD 04 70         [ 4]    1     CALL DOLIT 
      001862 00 02                    2     .word CELLL 
      001864 CC 15 2E         [ 2] 3991         JP      COMMA 
      001867                       3992 JSRC1: ; check for DDROP 
      001867 90 AE 08 1D      [ 2] 3993         LDW Y,#DDROP 
      00186B 90 BF 26         [ 2] 3994         LDW YTEMP,Y 
      00186E 90 93            [ 1] 3995         LDW Y,X 
      001870 90 FE            [ 2] 3996         LDW Y,(Y)
      001872 90 B3 26         [ 2] 3997         CPW Y,YTEMP 
      001875 26 13            [ 1] 3998         JRNE JSRC2 
                                   3999 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      001877 1C 00 02         [ 2] 4000         ADDW X,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      00187A                       4001         _DOLIT ADDWX 
      00187A CD 04 70         [ 4]    1     CALL DOLIT 
      00187D 00 1C                    2     .word ADDWX 
      00187F CD 15 45         [ 4] 4002         CALL  CCOMMA 
      001882                       4003         _DOLIT 2*CELLL 
      001882 CD 04 70         [ 4]    1     CALL DOLIT 
      001885 00 04                    2     .word 2*CELLL 
      001887 CC 15 2E         [ 2] 4004         JP  COMMA 
      00188A                       4005 JSRC2: 
                                   4006 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4007 .endif        
      00188A CD 04 70         [ 4] 4008         CALL     DOLIT
      00188D 00 CD                 4009         .word     CALLL     ;CALL
      00188F CD 15 45         [ 4] 4010         CALL     CCOMMA
      001892 CC 15 2E         [ 2] 4011         JP     COMMA
                                   4012 
                                   4013 ;       INIT-OFS ( -- )
                                   4014 ;       compute offset to adjust jump address 
                                   4015 ;       set variable OFFSET 
      001895 18 3E                 4016         .word LINK 
                           001897  4017         LINK=.
      001897 08                    4018         .byte 8 
      001898 49 4E 49 54 2D 4F 46  4019         .ascii "INIT-OFS" 
             53
      0018A0                       4020 INITOFS:
      0018A0 CD 07 30         [ 4] 4021         call TFLASH 
      0018A3 CD 04 E4         [ 4] 4022         CALL AT 
      0018A6 CD 06 1A         [ 4] 4023         CALL DUPP 
      0018A9 CD 04 99         [ 4] 4024         call QBRAN
      0018AC 18 BD                 4025         .word 1$
      0018AE                       4026         _DROP  
      0018AE 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018B1 CD 07 7F         [ 4] 4027         call CPP 
      0018B4 CD 04 E4         [ 4] 4028         call AT 
      0018B7 CD 0C DE         [ 4] 4029         call HERE
      0018BA CD 08 D3         [ 4] 4030         call SUBB 
      0018BD CD 07 B4         [ 4] 4031 1$:     call OFFSET 
      0018C0 CC 04 D2         [ 2] 4032         jp STORE  
                                   4033 
                                   4034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4035 ;       :       ( -- ; <string> )
                                   4036 ;       Start a new colon definition
                                   4037 ;       using next word as its name.
                                   4038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C3                       4039         _HEADER COLON,1,":"
      0018C3 18 97                    1         .word LINK 
                           0018C5     2         LINK=.
      0018C5 01                       3         .byte 1  
      0018C6 3A                       4         .ascii ":"
      0018C7                          5         COLON:
      0018C7 CD 18 A0         [ 4] 4040         call INITOFS       
      0018CA CD 11 EA         [ 4] 4041         CALL   TOKEN
      0018CD CD 17 2C         [ 4] 4042         CALL   SNAME
      0018D0 CC 18 31         [ 2] 4043         JP     RBRAC
                                   4044 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4046 ;       I:  ( -- )
                                   4047 ;       Start interrupt service 
                                   4048 ;       routine definition
                                   4049 ;       those definition have 
                                   4050 ;       no name.
                                   4051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018D3                       4052         _HEADER ICOLON,2,"I:"
      0018D3 18 C5                    1         .word LINK 
                           0018D5     2         LINK=.
      0018D5 02                       3         .byte 2  
      0018D6 49 3A                    4         .ascii "I:"
      0018D8                          5         ICOLON:
      0018D8 CD 18 A0         [ 4] 4053         call INITOFS 
      0018DB CC 18 31         [ 2] 4054         jp RBRAC  
                                   4055 
                                   4056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4057 ;       IMMEDIATE       ( -- )
                                   4058 ;       Make last compiled word
                                   4059 ;       an immediate word.
                                   4060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018DE                       4061         _HEADER IMMED,9,"IMMEDIATE"
      0018DE 18 D5                    1         .word LINK 
                           0018E0     2         LINK=.
      0018E0 09                       3         .byte 9  
      0018E1 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0018EA                          5         IMMED:
      0018EA CD 04 70         [ 4] 4062         CALL     DOLIT
      0018ED 80 00                 4063         .word     0x8000	;  IMEDD*256
      0018EF CD 07 8F         [ 4] 4064         CALL     LAST
      0018F2 CD 04 E4         [ 4] 4065         CALL     AT
      0018F5 CD 04 E4         [ 4] 4066         CALL     AT
      0018F8 CD 06 8B         [ 4] 4067         CALL     ORR
      0018FB CD 07 8F         [ 4] 4068         CALL     LAST
      0018FE CD 04 E4         [ 4] 4069         CALL     AT
      001901 CC 04 D2         [ 2] 4070         JP     STORE
                                   4071 
                                   4072 ;; Defining words
                                   4073 
                                   4074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4075 ;       CREATE  ( -- ; <string> )
                                   4076 ;       Compile a new array
                                   4077 ;       without allocating space.
                                   4078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001904                       4079         _HEADER CREAT,6,"CREATE"
      001904 18 E0                    1         .word LINK 
                           001906     2         LINK=.
      001906 06                       3         .byte 6  
      001907 43 52 45 41 54 45        4         .ascii "CREATE"
      00190D                          5         CREAT:
      00190D CD 11 EA         [ 4] 4080         CALL     TOKEN
      001910 CD 17 2C         [ 4] 4081         CALL     SNAME
      001913 CD 17 BD         [ 4] 4082         CALL     OVERT        
      001916 CD 15 73         [ 4] 4083         CALL     COMPI 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001919 06 D0                 4084         .word DOVAR 
      00191B 81               [ 4] 4085         RET
                                   4086 
                                   4087 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4088 ;       VARIABLE  ( -- ; <string> )
                                   4089 ;       Compile a new variable
                                   4090 ;       initialized to 0.
                                   4091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00191C                       4092         _HEADER VARIA,8,"VARIABLE"
      00191C 19 06                    1         .word LINK 
                           00191E     2         LINK=.
      00191E 08                       3         .byte 8  
      00191F 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001927                          5         VARIA:
                                   4093 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001927 CD 0C DE         [ 4] 4094         CALL HERE
      00192A CD 06 1A         [ 4] 4095         CALL DUPP 
      00192D CD 0B 6D         [ 4] 4096         CALL CELLP
      001930 CD 07 71         [ 4] 4097         CALL VPP 
      001933 CD 04 D2         [ 4] 4098         CALL STORE
      001936 CD 19 0D         [ 4] 4099         CALL CREAT
      001939 CD 06 1A         [ 4] 4100         CALL DUPP
      00193C CD 15 2E         [ 4] 4101         CALL COMMA
      00193F CD 0C 04         [ 4] 4102         CALL ZERO
      001942 CD 06 2A         [ 4] 4103         call SWAPP 
      001945 CD 04 D2         [ 4] 4104         CALL STORE
      001948 CD 22 81         [ 4] 4105         CALL FMOVE ; move definition to FLASH
      00194B CD 07 CD         [ 4] 4106         CALL QDUP 
      00194E CD 04 99         [ 4] 4107         CALL QBRAN 
      001951 19 5A                 4108         .word SET_RAMLAST   
      001953 CD 1D 29         [ 4] 4109         call UPDATVP  ; don't update if variable kept in RAM.
      001956 CD 23 15         [ 4] 4110         CALL UPDATPTR
      001959 81               [ 4] 4111         RET         
      00195A                       4112 SET_RAMLAST: 
      00195A CD 07 8F         [ 4] 4113         CALL LAST 
      00195D CD 04 E4         [ 4] 4114         CALL AT 
      001960 CD 07 A2         [ 4] 4115         CALL RAMLAST 
      001963 CC 04 D2         [ 2] 4116         JP STORE  
                                   4117 
                                   4118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4119 ;       CONSTANT  ( n -- ; <string> )
                                   4120 ;       Compile a new constant 
                                   4121 ;       n CONSTANT name 
                                   4122 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001966                       4123         _HEADER CONSTANT,8,"CONSTANT"
      001966 19 1E                    1         .word LINK 
                           001968     2         LINK=.
      001968 08                       3         .byte 8  
      001969 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001971                          5         CONSTANT:
      001971 CD 11 EA         [ 4] 4124         CALL TOKEN
      001974 CD 17 2C         [ 4] 4125         CALL SNAME 
      001977 CD 17 BD         [ 4] 4126         CALL OVERT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      00197A CD 15 73         [ 4] 4127         CALL COMPI 
      00197D 19 91                 4128         .word DOCONST
      00197F CD 15 2E         [ 4] 4129         CALL COMMA 
      001982 CD 22 81         [ 4] 4130         CALL FMOVE
      001985 CD 07 CD         [ 4] 4131         CALL QDUP 
      001988 CD 04 99         [ 4] 4132         CALL QBRAN 
      00198B 19 5A                 4133         .word SET_RAMLAST  
      00198D CD 23 15         [ 4] 4134         CALL UPDATPTR  
      001990 81               [ 4] 4135 1$:     RET          
                                   4136 
                                   4137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4138 ; CONSTANT runtime semantic 
                                   4139 ; doCONST  ( -- n )
                                   4140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4141 ;       _HEADER DOCONST,7,"DOCONST"
      001991                       4142 DOCONST:
      001991 1D 00 02         [ 2] 4143         subw x,#CELLL
      001994 90 85            [ 2] 4144         popw y 
      001996 90 FE            [ 2] 4145         ldw y,(y) 
      001998 FF               [ 2] 4146         ldw (x),y 
      001999 81               [ 4] 4147         ret 
                                   4148 
                                   4149 ;----------------------------------
                                   4150 ; create double constant 
                                   4151 ; 2CONSTANT ( d -- ; <string> )
                                   4152 ;----------------------------------
      00199A                       4153         _HEADER DCONST,9,"2CONSTANT"
      00199A 19 68                    1         .word LINK 
                           00199C     2         LINK=.
      00199C 09                       3         .byte 9  
      00199D 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      0019A6                          5         DCONST:
      0019A6 CD 11 EA         [ 4] 4154         CALL TOKEN
      0019A9 CD 17 2C         [ 4] 4155         CALL SNAME 
      0019AC CD 17 BD         [ 4] 4156         CALL OVERT 
      0019AF CD 15 73         [ 4] 4157         CALL COMPI 
      0019B2 19 C9                 4158         .word DO_DCONST
      0019B4 CD 15 2E         [ 4] 4159         CALL COMMA
      0019B7 CD 15 2E         [ 4] 4160         CALL COMMA  
      0019BA CD 22 81         [ 4] 4161         CALL FMOVE
      0019BD CD 07 CD         [ 4] 4162         CALL QDUP 
      0019C0 CD 04 99         [ 4] 4163         CALL QBRAN 
      0019C3 19 5A                 4164         .word SET_RAMLAST  
      0019C5 CD 23 15         [ 4] 4165         CALL UPDATPTR  
      0019C8 81               [ 4] 4166 1$:     RET          
                                   4167     
                                   4168 ;----------------------------------
                                   4169 ; runtime for DCONST 
                                   4170 ; stack double constant 
                                   4171 ; DO-DCONST ( -- d )
                                   4172 ;-----------------------------------
                                   4173 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      0019C9                       4174 DO_DCONST:
      0019C9 90 85            [ 2] 4175     popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      0019CB 90 BF 26         [ 2] 4176     ldw YTEMP,y 
      0019CE 1D 00 04         [ 2] 4177     subw x,#2*CELLL 
      0019D1 90 FE            [ 2] 4178     ldw y,(y)
      0019D3 FF               [ 2] 4179     ldw (x),y 
      0019D4 90 BE 26         [ 2] 4180     ldw y,YTEMP 
      0019D7 90 EE 02         [ 2] 4181     ldw y,(2,y)
      0019DA EF 02            [ 2] 4182     ldw (2,x),y 
      0019DC 81               [ 4] 4183     ret 
                                   4184 
                                   4185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4186 ;;          TOOLS 
                                   4187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4188 
                                   4189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4190 ;       _TYPE   ( b u -- )
                                   4191 ;       Display a string. Filter
                                   4192 ;       non-printing characters.
                                   4193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019DD                       4194         _HEADER UTYPE,5,"_TYPE"
      0019DD 19 9C                    1         .word LINK 
                           0019DF     2         LINK=.
      0019DF 05                       3         .byte 5  
      0019E0 5F 54 59 50 45           4         .ascii "_TYPE"
      0019E5                          5         UTYPE:
      0019E5 CD 05 E3         [ 4] 4195         CALL     TOR     ;start count down loop
      0019E8 20 0F            [ 2] 4196         JRA     UTYP2   ;skip first pass
      0019EA CD 06 1A         [ 4] 4197 UTYP1:  CALL     DUPP
      0019ED CD 05 02         [ 4] 4198         CALL     CAT
      0019F0 CD 0C 2E         [ 4] 4199         CALL     TCHAR
      0019F3 CD 04 37         [ 4] 4200         CALL     EMIT    ;display only printable
      0019F6 CD 0B 98         [ 4] 4201         CALL     ONEP    ;increment address
      0019F9 CD 04 84         [ 4] 4202 UTYP2:  CALL     DONXT
      0019FC 19 EA                 4203         .word      UTYP1   ;loop till done
      0019FE CC 06 10         [ 2] 4204         JP     DROP
                                   4205 
                                   4206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4207 ;       dm+     ( a u -- a )
                                   4208 ;       Dump u bytes from ,
                                   4209 ;       leaving a+u on  stack.
                                   4210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A01                       4211         _HEADER DUMPP,3,"DM+"
      001A01 19 DF                    1         .word LINK 
                           001A03     2         LINK=.
      001A03 03                       3         .byte 3  
      001A04 44 4D 2B                 4         .ascii "DM+"
      001A07                          5         DUMPP:
      001A07 CD 06 42         [ 4] 4212         CALL     OVER
      001A0A CD 04 70         [ 4] 4213         CALL     DOLIT
      001A0D 00 04                 4214         .word      4
      001A0F CD 0F E1         [ 4] 4215         CALL     UDOTR   ;display address
      001A12 CD 0F 48         [ 4] 4216         CALL     SPACE
      001A15 CD 05 E3         [ 4] 4217         CALL     TOR     ;start count down loop
      001A18 20 11            [ 2] 4218         JRA     PDUM2   ;skip first pass
      001A1A CD 06 1A         [ 4] 4219 PDUM1:  CALL     DUPP
      001A1D CD 05 02         [ 4] 4220         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A20 CD 04 70         [ 4] 4221         CALL     DOLIT
      001A23 00 03                 4222         .word      3
      001A25 CD 0F E1         [ 4] 4223         CALL     UDOTR   ;display numeric data
      001A28 CD 0B 98         [ 4] 4224         CALL     ONEP    ;increment address
      001A2B CD 04 84         [ 4] 4225 PDUM2:  CALL     DONXT
      001A2E 1A 1A                 4226         .word      PDUM1   ;loop till done
      001A30 81               [ 4] 4227         RET
                                   4228 
                                   4229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4230 ;       DUMP    ( a u -- )
                                   4231 ;       Dump u bytes from a,
                                   4232 ;       in a formatted manner.
                                   4233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A31                       4234         _HEADER DUMP,4,"DUMP"
      001A31 1A 03                    1         .word LINK 
                           001A33     2         LINK=.
      001A33 04                       3         .byte 4  
      001A34 44 55 4D 50              4         .ascii "DUMP"
      001A38                          5         DUMP:
      001A38 CD 06 E0         [ 4] 4235         CALL     BASE
      001A3B CD 04 E4         [ 4] 4236         CALL     AT
      001A3E CD 05 E3         [ 4] 4237         CALL     TOR
      001A41 CD 0E A7         [ 4] 4238         CALL     HEX     ;save radix, set hex
      001A44 CD 04 70         [ 4] 4239         CALL     DOLIT
      001A47 00 10                 4240         .word      16
      001A49 CD 0A BE         [ 4] 4241         CALL     SLASH   ;change count to lines
      001A4C CD 05 E3         [ 4] 4242         CALL     TOR     ;start count down loop
      001A4F CD 0F 8B         [ 4] 4243 DUMP1:  CALL     CR
      001A52 CD 04 70         [ 4] 4244         CALL     DOLIT
      001A55 00 10                 4245         .word      16
      001A57 CD 08 28         [ 4] 4246         CALL     DDUP
      001A5A CD 1A 07         [ 4] 4247         CALL     DUMPP   ;display numeric
      001A5D CD 07 DE         [ 4] 4248         CALL     ROT
      001A60 CD 07 DE         [ 4] 4249         CALL     ROT
      001A63 CD 0F 48         [ 4] 4250         CALL     SPACE
      001A66 CD 0F 48         [ 4] 4251         CALL     SPACE
      001A69 CD 19 E5         [ 4] 4252         CALL     UTYPE   ;display printable characters
      001A6C CD 04 84         [ 4] 4253         CALL     DONXT
      001A6F 1A 4F                 4254         .word      DUMP1   ;loop till done
      001A71 CD 06 10         [ 4] 4255 DUMP3:  CALL     DROP
      001A74 CD 05 35         [ 4] 4256         CALL     RFROM
      001A77 CD 06 E0         [ 4] 4257         CALL     BASE
      001A7A CC 04 D2         [ 2] 4258         JP     STORE   ;restore radix
                                   4259 
                                   4260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4261 ;       .S      ( ... -- ... )
                                   4262 ;        Display  contents of stack.
                                   4263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A7D                       4264         _HEADER DOTS,2,".S"
      001A7D 1A 33                    1         .word LINK 
                           001A7F     2         LINK=.
      001A7F 02                       3         .byte 2  
      001A80 2E 53                    4         .ascii ".S"
      001A82                          5         DOTS:
      001A82 CD 0F 8B         [ 4] 4265         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001A85 CD 0C 46         [ 4] 4266         CALL     DEPTH   ;stack depth
      001A88 CD 05 E3         [ 4] 4267         CALL     TOR     ;start count down loop
      001A8B 20 09            [ 2] 4268         JRA     DOTS2   ;skip first pass
      001A8D CD 05 46         [ 4] 4269 DOTS1:  CALL     RAT
      001A90 CD 0C 5D         [ 4] 4270 	CALL     PICK
      001A93 CD 10 31         [ 4] 4271         CALL     DOT     ;index stack, display contents
      001A96 CD 04 84         [ 4] 4272 DOTS2:  CALL     DONXT
      001A99 1A 8D                 4273         .word      DOTS1   ;loop till done
      001A9B CD 0F B8         [ 4] 4274         CALL     DOTQP
      001A9E 05                    4275         .byte      5
      001A9F 20 3C 73 70 20        4276         .ascii     " <sp "
      001AA4 81               [ 4] 4277         RET
                                   4278 
                                   4279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4280 ;       >NAME   ( ca -- na | F )
                                   4281 ;       Convert code address
                                   4282 ;       to a name address.
                                   4283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AA5                       4284         _HEADER TNAME,5,">NAME"
      001AA5 1A 7F                    1         .word LINK 
                           001AA7     2         LINK=.
      001AA7 05                       3         .byte 5  
      001AA8 3E 4E 41 4D 45           4         .ascii ">NAME"
      001AAD                          5         TNAME:
      001AAD CD 07 63         [ 4] 4285         CALL     CNTXT   ;vocabulary link
      001AB0 CD 04 E4         [ 4] 4286 TNAM2:  CALL     AT
      001AB3 CD 06 1A         [ 4] 4287         CALL     DUPP    ;?last word in a vocabulary
      001AB6 CD 04 99         [ 4] 4288         CALL     QBRAN
      001AB9 1A D4                 4289         .word      TNAM4
      001ABB CD 08 28         [ 4] 4290         CALL     DDUP
      001ABE CD 11 F8         [ 4] 4291         CALL     NAMET
      001AC1 CD 06 A0         [ 4] 4292         CALL     XORR    ;compare
      001AC4 CD 04 99         [ 4] 4293         CALL     QBRAN
      001AC7 1A CE                 4294         .word      TNAM3
      001AC9 CD 0B 7C         [ 4] 4295         CALL     CELLM   ;continue with next word
      001ACC 20 E2            [ 2] 4296         JRA     TNAM2
      001ACE CD 06 2A         [ 4] 4297 TNAM3:  CALL     SWAPP
      001AD1 CC 06 10         [ 2] 4298         JP     DROP
      001AD4 CD 08 1D         [ 4] 4299 TNAM4:  CALL     DDROP
      001AD7 CC 0C 04         [ 2] 4300         JP     ZERO
                                   4301 
                                   4302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4303 ;       .ID     ( na -- )
                                   4304 ;        Display  name at address.
                                   4305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001ADA                       4306         _HEADER DOTID,3,".ID"
      001ADA 1A A7                    1         .word LINK 
                           001ADC     2         LINK=.
      001ADC 03                       3         .byte 3  
      001ADD 2E 49 44                 4         .ascii ".ID"
      001AE0                          5         DOTID:
      001AE0 CD 07 CD         [ 4] 4307         CALL     QDUP    ;if zero no name
      001AE3 CD 04 99         [ 4] 4308         CALL     QBRAN
      001AE6 1A F6                 4309         .word      DOTI1
      001AE8 CD 0C C7         [ 4] 4310         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001AEB CD 04 70         [ 4] 4311         CALL     DOLIT
      001AEE 00 1F                 4312         .word      0x1F
      001AF0 CD 06 77         [ 4] 4313         CALL     ANDD    ;mask lexicon bits
      001AF3 CC 19 E5         [ 2] 4314         JP     UTYPE
      001AF6 CD 0F B8         [ 4] 4315 DOTI1:  CALL     DOTQP
      001AF9 09                    4316         .byte      9
      001AFA 20 6E 6F 4E 61 6D 65  4317         .ascii     " noName"
      001B01 81               [ 4] 4318         RET
                                   4319 
                           000000  4320 WANT_SEE=0
                           000000  4321 .if WANT_SEE 
                                   4322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4323 ;       SEE     ( -- ; <string> )
                                   4324 ;       A simple decompiler.
                                   4325 ;       Updated for byte machines.
                                   4326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4327         _HEADER SEE,3,"SEE"
                                   4328         CALL     TICK    ;starting address
                                   4329         CALL     CR
                                   4330         CALL     ONEM
                                   4331 SEE1:   CALL     ONEP
                                   4332         CALL     DUPP
                                   4333         CALL     AT
                                   4334         CALL     DUPP
                                   4335         CALL     QBRAN
                                   4336         .word    SEE2
                                   4337         CALL     TNAME   ;?is it a name
                                   4338 SEE2:   CALL     QDUP    ;name address or zero
                                   4339         CALL     QBRAN
                                   4340         .word    SEE3
                                   4341         CALL     SPACE
                                   4342         CALL     DOTID   ;display name
                                   4343         CALL     ONEP
                                   4344         JRA      SEE4
                                   4345 SEE3:   CALL     DUPP
                                   4346         CALL     CAT
                                   4347         CALL     UDOT    ;display number
                                   4348 SEE4:   CALL     NUFQ    ;user control
                                   4349         CALL     QBRAN
                                   4350         .word    SEE1
                                   4351         JP     DROP
                                   4352 .endif ; WANT_SEE 
                                   4353 
                                   4354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4355 ;       WORDS   ( -- )
                                   4356 ;       Display names in vocabulary.
                                   4357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B02                       4358         _HEADER WORDS,5,"WORDS"
      001B02 1A DC                    1         .word LINK 
                           001B04     2         LINK=.
      001B04 05                       3         .byte 5  
      001B05 57 4F 52 44 53           4         .ascii "WORDS"
      001B0A                          5         WORDS:
      001B0A CD 0F 8B         [ 4] 4359         CALL     CR
      001B0D CD 07 63         [ 4] 4360         CALL     CNTXT   ;only in context
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B10 CD 04 E4         [ 4] 4361 WORS1:  CALL     AT
      001B13 CD 07 CD         [ 4] 4362         CALL     QDUP    ;?at end of list
      001B16 CD 04 99         [ 4] 4363         CALL     QBRAN
      001B19 1B 2C                 4364         .word      WORS2
      001B1B CD 06 1A         [ 4] 4365         CALL     DUPP
      001B1E CD 0F 48         [ 4] 4366         CALL     SPACE
      001B21 CD 1A E0         [ 4] 4367         CALL     DOTID   ;display a name
      001B24 CD 0B 7C         [ 4] 4368         CALL     CELLM
      001B27 CD 04 B5         [ 4] 4369         CALL     BRAN
      001B2A 1B 10                 4370         .word      WORS1
      001B2C 81               [ 4] 4371 WORS2:  RET
                                   4372 
                                   4373         
                                   4374 ;; Hardware reset
                                   4375 
                                   4376 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4377 ;  COPYRIGTH
                                   4378 ; print copyright notice 
                                   4379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B2D                       4380 COPYRIGHT:
      001B2D CD 0F B8         [ 4] 4381     CALL DOTQP 
      001B30 21                    4382     .byte 33 
      001B31 4A 61 63 71 75 65 73  4383     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001B52 CC 0F 8B         [ 2] 4384     JP CR 
                                   4385 
                                   4386 
                                   4387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4388 ;  PRT_LICENCE 
                                   4389 ;  print GPLV2 licence 
                                   4390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B55                       4391 PRT_LICENCE:
      001B55 CD 0F B8         [ 4] 4392         CALL DOTQP 
      001B58 0F                    4393         .byte  15 
      001B59 4C 49 43 45 4E 43 45  4394         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B68 81               [ 4] 4395         RET 
                                   4396 
                                   4397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4398 ;    PRINT_VERSION ( c1 c2 -- )
                                   4399 ;    c2 minor 
                                   4400 ;    c1 major 
                                   4401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B69                       4402 PRINT_VERSION:
      001B69 CD 0F B8         [ 4] 4403      CALL DOTQP 
      001B6C 09                    4404      .byte 9
      001B6D 20 76 65 72 73 69 6F  4405      .ascii " version "
             6E 20
      001B76 CD 0E 0C         [ 4] 4406      CALL BDIGS 
      001B79 CD 0E 46         [ 4] 4407      CALL DIGS 
      001B7C CD 0E 46         [ 4] 4408      CALL DIGS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001B7F                       4409      _DOLIT '.' 
      001B7F CD 04 70         [ 4]    1     CALL DOLIT 
      001B82 00 2E                    2     .word '.' 
      001B84 CD 0E 1C         [ 4] 4410      CALL HOLD 
      001B87                       4411      _DROP 
      001B87 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001B8A CD 0E 46         [ 4] 4412      CALL DIGS 
      001B8D CD 0E 71         [ 4] 4413      CALL EDIGS 
      001B90 CC 0F 72         [ 2] 4414      JP TYPES 
                                   4415       
                                   4416 
                                   4417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4418 ;       hi      ( -- )
                                   4419 ;       Display sign-on message.
                                   4420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B93                       4421         _HEADER HI,2,"HI"
      001B93 1B 04                    1         .word LINK 
                           001B95     2         LINK=.
      001B95 02                       3         .byte 2  
      001B96 48 49                    4         .ascii "HI"
      001B98                          5         HI:
      001B98 CD 0F 8B         [ 4] 4422         CALL     CR
      001B9B CD 0F B8         [ 4] 4423         CALL     DOTQP   
      001B9E 0A                    4424         .byte      10
      001B9F 73 74 6D 38 65 46 6F  4425         .ascii     "stm8eForth"
             72 74 68
      001BA9                       4426 	_DOLIT VER 
      001BA9 CD 04 70         [ 4]    1     CALL DOLIT 
      001BAC 00 04                    2     .word VER 
      001BAE                       4427         _DOLIT EXT 
      001BAE CD 04 70         [ 4]    1     CALL DOLIT 
      001BB1 00 00                    2     .word EXT 
      001BB3 CD 1B 69         [ 4] 4428         CALL PRINT_VERSION 
      001BB6 CD 0F B8         [ 4] 4429         CALL    DOTQP
                           000001  4430 .if NUCLEO          
      001BB9 12                    4431         .byte 18
      001BBA 20 6F 6E 20 4E 55 43  4432         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4433 .endif
                           000000  4434 .if DISCOVERY
                                   4435         .byte 19
                                   4436         .ascii  " on STM8S-DISCOVERY"
                                   4437 .endif
                           000000  4438 .if DOORBELL
                                   4439         .byte 16
                                   4440         .ascii " on stm8s105k6b6"
                                   4441 .endif
      001BCC CC 0F 8B         [ 2] 4442         JP     CR
                                   4443 
                           000000  4444 WANT_DEBUG=0
                           000000  4445 .if WANT_DEBUG 
                                   4446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4447 ;       DEBUG      ( -- )
                                   4448 ;       Display sign-on message.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4449 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4450         _HEADER DEBUG,5,"DEBUG"
                                   4451 	CALL DOLIT
                                   4452 	.word 0x65
                                   4453 	CALL EMIT
                                   4454 	CALL ZERO
                                   4455  	CALL ZLESS 
                                   4456 	CALL DOLIT
                                   4457 	.word 0xFFFE
                                   4458 	CALL ZLESS 
                                   4459 	CALL UPLUS 
                                   4460  	_DROP 
                                   4461 	CALL DOLIT
                                   4462 	.word 3
                                   4463 	CALL UPLUS 
                                   4464 	CALL UPLUS 
                                   4465  	_DROP
                                   4466 	CALL DOLIT
                                   4467 	.word 0x43
                                   4468 	CALL UPLUS 
                                   4469  	_DROP
                                   4470 	CALL EMIT
                                   4471 	CALL DOLIT
                                   4472 	.word 0x4F
                                   4473 	CALL DOLIT
                                   4474 	.word 0x6F
                                   4475  	CALL XORR
                                   4476 	CALL DOLIT
                                   4477 	.word 0xF0
                                   4478  	CALL ANDD
                                   4479 	CALL DOLIT
                                   4480 	.word 0x4F
                                   4481  	CALL ORR
                                   4482 	CALL EMIT
                                   4483 	CALL DOLIT
                                   4484 	.word 8
                                   4485 	CALL DOLIT
                                   4486 	.word 6
                                   4487  	CALL SWAPP
                                   4488 	CALL OVER
                                   4489 	CALL XORR
                                   4490 	CALL DOLIT
                                   4491 	.word 3
                                   4492 	CALL ANDD 
                                   4493 	CALL ANDD
                                   4494 	CALL DOLIT
                                   4495 	.word 0x70
                                   4496 	CALL UPLUS 
                                   4497 	_DROP
                                   4498 	CALL EMIT
                                   4499 	CALL ZERO
                                   4500 	CALL QBRAN
                                   4501 	.word DEBUG1
                                   4502 	CALL DOLIT
                                   4503 	.word 0x3F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4504 DEBUG1:
                                   4505 	CALL DOLIT
                                   4506 	.word 0xFFFF
                                   4507 	CALL QBRAN
                                   4508 	.word DEBUG2
                                   4509 	CALL DOLIT
                                   4510 	.word 0x74
                                   4511 	CALL BRAN
                                   4512 	.word DEBUG3
                                   4513 DEBUG2:
                                   4514 	CALL DOLIT
                                   4515 	.word 0x21
                                   4516 DEBUG3:
                                   4517 	CALL EMIT
                                   4518 	CALL DOLIT
                                   4519 	.word 0x68
                                   4520 	CALL DOLIT
                                   4521 	.word 0x80
                                   4522 	CALL STORE
                                   4523 	CALL DOLIT
                                   4524 	.word 0x80
                                   4525 	CALL AT
                                   4526 	CALL EMIT
                                   4527 	CALL DOLIT
                                   4528 	.word 0x4D
                                   4529 	CALL TOR
                                   4530 	CALL RAT
                                   4531 	CALL RFROM
                                   4532 	CALL ANDD
                                   4533 	CALL EMIT
                                   4534 	CALL DOLIT
                                   4535 	.word 0x61
                                   4536 	CALL DOLIT
                                   4537 	.word 0xA
                                   4538 	CALL TOR
                                   4539 DEBUG4:
                                   4540 	CALL ONE
                                   4541 	CALL UPLUS 
                                   4542 	_DROP
                                   4543 	CALL DONXT
                                   4544 	.word DEBUG4
                                   4545 	CALL EMIT
                                   4546 	CALL DOLIT
                                   4547 	.word 0x656D
                                   4548 	CALL DOLIT
                                   4549 	.word 0x100
                                   4550 	CALL UMSTA
                                   4551 	CALL SWAPP
                                   4552 	CALL DOLIT
                                   4553 	.word 0x100
                                   4554 	CALL UMSTA
                                   4555 	CALL SWAPP 
                                   4556 	_DROP
                                   4557 	CALL EMIT
                                   4558 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4559 	CALL DOLIT
                                   4560 	.word 0x2043
                                   4561 	CALL ZERO
                                   4562 	CALL DOLIT
                                   4563 	.word 0x100
                                   4564 	CALL UMMOD
                                   4565 	CALL EMIT
                                   4566 	CALL EMIT
                                   4567 	;JP ORIG
                                   4568 	RET
                                   4569 .endif ; WANT_DEBUG 
                                   4570 
                                   4571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4572 ;       'BOOT   ( -- a )
                                   4573 ;       The application startup vector.
                                   4574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BCF                       4575         _HEADER TBOOT,5,"'BOOT"
      001BCF 1B 95                    1         .word LINK 
                           001BD1     2         LINK=.
      001BD1 05                       3         .byte 5  
      001BD2 27 42 4F 4F 54           4         .ascii "'BOOT"
      001BD7                          5         TBOOT:
      001BD7 CD 06 D0         [ 4] 4576         CALL     DOVAR
      001BDA 40 02                 4577         .word    APP_RUN      ;application to boot
                                   4578 
                                   4579 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4580 ;       COLD    ( -- )
                                   4581 ;       The hilevel cold start s=ence.
                                   4582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BDC                       4583         _HEADER COLD,4,"COLD"
      001BDC 1B D1                    1         .word LINK 
                           001BDE     2         LINK=.
      001BDE 04                       3         .byte 4  
      001BDF 43 4F 4C 44              4         .ascii "COLD"
      001BE3                          5         COLD:
                           000000  4584 .if WANT_DEBUG
                                   4585         CALL DEBUG
                                   4586 .endif ; WANT_DEBUG
      001BE3 CD 04 70         [ 4] 4587 COLD1:  CALL     DOLIT
      001BE6 00 2B                 4588         .word      UZERO
      001BE8 CD 04 70         [ 4] 4589 	CALL     DOLIT
      001BEB 00 06                 4590         .word      UPP
      001BED CD 04 70         [ 4] 4591         CALL     DOLIT
      001BF0 00 1C                 4592 	.word      UEND-UZERO
      001BF2 CD 0D 2B         [ 4] 4593         CALL     CMOVE   ;initialize user area
                           000001  4594 .if WANT_FLOAT 
      001BF5 CD 2C 8D         [ 4] 4595         CALL    FINIT 
                                   4596 .endif 
                                   4597 ; if APP_RUN==0 initialize with ca de 'hi'  
      001BF8 90 CE 40 02      [ 2] 4598         ldw y,APP_RUN 
      001BFC 26 0B            [ 1] 4599         jrne 0$
      001BFE 1D 00 02         [ 2] 4600         subw x,#CELLL 
      001C01 90 AE 1B 98      [ 2] 4601         ldw y,#HI  
      001C05 FF               [ 2] 4602         ldw (x),y
      001C06 CD 1D 01         [ 4] 4603         call UPDATRUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001C09                       4604 0$:        
                                   4605 ; update LAST with APP_LAST 
                                   4606 ; if APP_LAST > LAST else do the opposite
      001C09 90 CE 40 00      [ 2] 4607         ldw y,APP_LAST 
      001C0D 90 B3 1C         [ 2] 4608         cpw y,ULAST 
      001C10 22 05            [ 1] 4609         jrugt 1$ 
                                   4610 ; save LAST at APP_LAST  
      001C12 CD 1C E9         [ 4] 4611         call UPDATLAST 
      001C15 20 06            [ 2] 4612         jra 2$
      001C17                       4613 1$: ; update LAST with APP_LAST 
      001C17 90 BF 1C         [ 2] 4614         ldw ULAST,y
      001C1A 90 BF 16         [ 2] 4615         ldw UCNTXT,y
      001C1D                       4616 2$:  
                                   4617 ; update APP_CP if < app_space 
      001C1D 90 CE 40 04      [ 2] 4618         ldw y,APP_CP  
      001C21 90 B3 1A         [ 2] 4619         cpw y,UCP   
      001C24 24 06            [ 1] 4620         jruge 3$ 
      001C26 CD 1D 12         [ 4] 4621         call UPDATCP
      001C29 90 BE 1A         [ 2] 4622         ldw y,UCP   
      001C2C                       4623 3$:
      001C2C 90 BF 1A         [ 2] 4624         ldw UCP,y                 
                                   4625 ; update UVP with APP_VP  
                                   4626 ; if APP_VP>UVP else do the opposite 
      001C2F 90 CE 40 06      [ 2] 4627         ldw y,APP_VP 
      001C33 90 B3 18         [ 2] 4628         cpw y,UVP 
      001C36 22 05            [ 1] 4629         jrugt 4$
      001C38 CD 1D 29         [ 4] 4630         call UPDATVP 
      001C3B 20 03            [ 2] 4631         jra 6$
      001C3D                       4632 4$: ; update UVP with APP_VP 
      001C3D 90 BF 18         [ 2] 4633         ldw UVP,y 
      001C40                       4634 6$:      
      001C40 CD 14 D8         [ 4] 4635         CALL     PRESE   ;initialize data stack and TIB
      001C43 CD 1B D7         [ 4] 4636         CALL     TBOOT
      001C46 CD 0D 14         [ 4] 4637         CALL     ATEXE   ;application boot
      001C49 CD 17 BD         [ 4] 4638         CALL     OVERT
      001C4C CC 14 F5         [ 2] 4639         JP     QUIT    ;start interpretation
                                   4640 
                                   4641 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4642         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001C4F 1B DE                   31     .word LINK 
                           001C51    32     LINK=.
      001C51 03                      33     .byte 3 
      001C52 46 50 21                34     .ascii "FP!"
      001C55                         35 FPSTOR:
      001C55 90 93            [ 1]   36     ldw y,x
      001C57 90 FE            [ 2]   37     ldw y,(y)
      001C59 90 9F            [ 1]   38     ld a,yl 
      001C5B B7 34            [ 1]   39     ld FPTR,a 
      001C5D 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C60 90 93            [ 1]   41     ldw y,x 
      001C62 90 FE            [ 2]   42     ldw y,(y)
      001C64 90 BF 35         [ 2]   43     ldw PTR16,y
      001C67 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C6A 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C6B 1C 51                   52     .word LINK 
                           001C6D    53 LINK=.
      001C6D 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001C6E 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C74                         56 EEPROM: 
      001C74 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C78 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C7B EF 02            [ 2]   59     ldw (2,x),y 
      001C7D 90 5F            [ 1]   60     clrw y 
      001C7F FF               [ 2]   61     ldw (x),y 
      001C80 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C81 1C 6D                   68 	.word LINK 
                           001C83    69 	LINK=.
      001C83 08                      70 	.byte 8 
      001C84 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C8C                         72 EEPLAST:
      001C8C 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C8F 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C93 EF 02            [ 2]   75 	ldw (2,x),y 
      001C95 90 5F            [ 1]   76 	clrw y 
      001C97 FF               [ 2]   77 	ldw (x),y 
      001C98 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C99 1C 83                   84 	.word LINK 
                           001C9B    85 	LINK=.
      001C9B 07                      86 	.byte 7
      001C9C 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001CA3                         88 EEPRUN:
      001CA3 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001CA6 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001CAA EF 02            [ 2]   91 	ldw (2,x),y 
      001CAC 90 5F            [ 1]   92 	clrw y 
      001CAE FF               [ 2]   93 	ldw (x),y 
      001CAF 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001CB0 1C 9B                  100 	.word LINK
                           001CB2   101 	LINK=.
      001CB2 06                     102 	.byte 6 
      001CB3 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001CB9                        104 EEPCP:
      001CB9 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001CBC 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001CC0 EF 02            [ 2]  107 	ldw (2,x),y 
      001CC2 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001CC4 FF               [ 2]  109 	ldw (x),y 
      001CC5 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001CC6 1C B2                  116 	.word LINK
                           001CC8   117 	LINK=.
      001CC8 06                     118 	.byte 6
      001CC9 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001CCF                        120 EEPVP:
      001CCF 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001CD2 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001CD6 EF 02            [ 2]  123 	ldw (2,x),y 
      001CD8 90 5F            [ 1]  124 	clrw y 
      001CDA FF               [ 2]  125 	ldw (x),y 
      001CDB 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001CDC 1C C8                  132 	.word LINK 
                           001CDE   133 	LINK=.
      001CDE 0A                     134 	.byte 10
      001CDF 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001CE9                        136 UPDATLAST:
      001CE9 CD 07 8F         [ 4]  137 	call LAST
      001CEC CD 04 E4         [ 4]  138 	call AT  
      001CEF CD 1C 8C         [ 4]  139 	call EEPLAST
      001CF2 CC 1E DF         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001CF5 1C DE                  146 	.word LINK
                           001CF7   147 	LINK=.
      001CF7 09                     148 	.byte 9
      001CF8 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001D01                        150 UPDATRUN:
      001D01 CD 1C A3         [ 4]  151 	call EEPRUN
      001D04 CC 1E DF         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001D07 1C F7                  158 	.word LINK 
                           001D09   159 	LINK=.
      001D09 08                     160 	.byte 8 
      001D0A 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



             50
      001D12                        162 UPDATCP:
      001D12 CD 07 7F         [ 4]  163 	call CPP 
      001D15 CD 04 E4         [ 4]  164 	call AT 
      001D18 CD 1C B9         [ 4]  165 	call EEPCP 
      001D1B CC 1E DF         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001D1E 1D 09                  172 	.word LINK
                           001D20   173 	LINK=.
      001D20 08                     174 	.byte 8 
      001D21 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001D29                        176 UPDATVP:
      001D29 CD 07 71         [ 4]  177 	call VPP 
      001D2C CD 04 E4         [ 4]  178 	call AT
      001D2F CD 1C CF         [ 4]  179 	call EEPVP 
      001D32 CC 1E DF         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001D35 1D 20                  187     .word LINK 
                           001D37   188 LINK=.
      001D37 02                     189     .byte 2
      001D38 46 40                  190     .ascii "F@"
      001D3A                        191 FARAT:
      001D3A CD 1C 55         [ 4]  192     call FPSTOR
      001D3D CC 1E 02         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001D40 1D 37                  200     .word LINK
                           001D42   201     LINK=.
      001D42 03                     202     .byte 3 
      001D43 46 43 40               203     .ascii "FC@" 
      001D46                        204 FARCAT:
      001D46 CD 1C 55         [ 4]  205     call FPSTOR
      001D49 CC 1E 24         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001D4C 1D 42                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           001D4E   215 LINK=.
      001D4E 06                     216     .byte 6 
      001D4F 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001D55                        218 UNLKEE:
      001D55 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001D59 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001D5D 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D61 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D65 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D6A 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D6B 1D 4E                  231     .word LINK 
                           001D6D   232 LINK=. 
      001D6D 06                     233     .byte 6 
      001D6E 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D74                        235 UNLKFL:
      001D74 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D78 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D7C 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D80 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D84 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D89 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D8A 1D 6D                  248 	.word LINK 
                           001D8C   249 	LINK=.
      001D8C 06                     250 	.byte 6
      001D8D 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D93                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D93 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D96 3D 34            [ 1]  256 	tnz FPTR 
      001D98 26 16            [ 1]  257 	jrne 4$
      001D9A 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D9E 24 10            [ 1]  259     jruge 4$
      001DA0 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001DA4 25 0D            [ 1]  261     jrult 9$
      001DA6 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001DAA 22 07            [ 1]  263 	jrugt 9$
      001DAC CD 1D 55         [ 4]  264 	call UNLKEE
      001DAF 81               [ 4]  265 	ret 
      001DB0 CD 1D 74         [ 4]  266 4$: call UNLKFL
      001DB3 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001DB4 1D 8C                  274 	.word LINK 
                           001DB6   275 	LINK=.
      001DB6 04                     276 	.byte 4 
      001DB7 4C 4F 43 4B            277 	.ascii "LOCK" 
      001DBB                        278 LOCK: 
      001DBB 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001DBF 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DC3 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001DC4 1D B6                  287 	.word LINK 
                           001DC6   288 	LINK=. 
      001DC6 08                     289 	.byte 8 
      001DC7 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001DCF                        291 INC_FPTR:
      001DCF 3C 36            [ 1]  292 	inc PTR8 
      001DD1 26 0C            [ 1]  293 	jrne 1$
      001DD3 90 89            [ 2]  294 	pushw y 
      001DD5 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001DD8 90 5C            [ 1]  296 	incw y 
      001DDA 90 BF 34         [ 2]  297 	ldw FPTR,y
      001DDD 90 85            [ 2]  298 	popw y  
      001DDF 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001DE0 1D C6                  305 	.word LINK 
                           001DE2   306 	LINK=.
      001DE2 04                     307 	.byte 4 
      001DE3 50 54 52 2B            308 	.ascii "PTR+"
      001DE7                        309 PTRPLUS:
      001DE7 90 93            [ 1]  310 	ldw y,x 
      001DE9 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001DEC 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001DF0 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001DF3 24 02            [ 1]  314 	jrnc 1$
      001DF5 3C 34            [ 1]  315 	inc FPTR 
      001DF7 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001DF8 1D E2                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001DFA   324 	LINK=.
      001DFA 07                     325 	.byte 7 
      001DFB 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001E02                        327 EE_READ:
      001E02 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001E05 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001E09 90 95            [ 1]  330 	ld yh,a 
      001E0B CD 1D CF         [ 4]  331 	call INC_FPTR 
      001E0E 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001E12 CD 1D CF         [ 4]  333 	call INC_FPTR 
      001E15 90 97            [ 1]  334 	ld yl,a 
      001E17 FF               [ 2]  335 	ldw (x),y 
      001E18 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001E19 1D FA                  342 	.word LINK 
                           001E1B   343 	LINK=.
      001E1B 08                     344 	.byte 8
      001E1C 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001E24                        346 EE_CREAD:
      001E24 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001E27 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001E2B CD 1D CF         [ 4]  349 	call INC_FPTR
      001E2E 90 5F            [ 1]  350 	clrw y 
      001E30 90 97            [ 1]  351 	ld yl,a 
      001E32 FF               [ 2]  352 	ldw (x),y 
      001E33 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001E34 1E 1B                  362 	.word LINK 
                           001E36   363 	LINK=. 
      001E36 07                     364 	.byte 7 
      001E37 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001E3E                        367 WR_BYTE:
      001E3E CD 04 64         [ 4]  368 	call FC_XOFF
      001E41 90 93            [ 1]  369 	ldw y,x 
      001E43 90 FE            [ 2]  370 	ldw y,(y)
      001E45 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001E48 90 9F            [ 1]  372 	ld a,yl
      001E4A 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001E4E 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E53 CD 04 4E         [ 4]  375 	call FC_XON
      001E56 CC 1D CF         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001E59 1E 36                  385 	.word LINK 
                           001E5B   386 	LINK=.
      001E5B 07                     387 	.byte 7 
      001E5C 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E63                        389 WR_WORD:
      001E63 CD 04 64         [ 4]  390 	call FC_XOFF
      001E66 90 93            [ 1]  391 	ldw y,x
      001E68 90 FE            [ 2]  392 	ldw y,(y)
      001E6A 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E6D 90 9E            [ 1]  394 	ld a,yh 
      001E6F 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E73 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E78 CD 1D CF         [ 4]  397 	call INC_FPTR 
      001E7B 90 9F            [ 1]  398 	ld a,yl 
      001E7D 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E81 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E86 CD 04 4E         [ 4]  401 	call FC_XON
      001E89 CC 1D CF         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E8C 1E 5B                  409     .word LINK 
                           001E8E   410 	LINK=.
      001E8E 04                     411     .byte 4 
      001E8F 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E93                        417 EECSTORE:
      001E93 52 02            [ 2]  418 	sub sp,#VSIZE
      001E95 CD 1C 55         [ 4]  419     call FPSTOR
      001E98 E6 01            [ 1]  420 	ld a,(1,x)
      001E9A 43               [ 1]  421 	cpl a 
      001E9B 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E9D 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E9F CD 1D 93         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001EA2 3D 34            [ 1]  426 	tnz FPTR 
      001EA4 26 19            [ 1]  427 	jrne 2$
      001EA6 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001EA9 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001EAD 2B 10            [ 1]  430 	jrmi 2$
      001EAF 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001EB3 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001EB5 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001EB7 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001EBB 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001EBF                        437 2$: 
      001EBF CD 1E 3E         [ 4]  438 	call WR_BYTE 	
      001EC2 0D 02            [ 1]  439 	tnz (OPT,sp)
      001EC4 27 0D            [ 1]  440 	jreq 3$ 
      001EC6 7B 01            [ 1]  441     ld a,(BTW,sp)
      001EC8 90 5F            [ 1]  442     clrw y
      001ECA 90 97            [ 1]  443 	ld yl,a 
      001ECC 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001ECF FF               [ 2]  445 	ldw (x),y 
      001ED0 CD 1E 3E         [ 4]  446 	call WR_BYTE
      001ED3                        447 3$: 
      001ED3 CD 1D BB         [ 4]  448 	call LOCK 
      001ED6 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001ED8 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001ED9 1E 8E                  456 	.word LINK 
                           001EDB   457 	LINK=.
      001EDB 03                     458 	.byte 3 
      001EDC 45 45 21               459 	.ascii "EE!"
      001EDF                        460 EESTORE:
      001EDF CD 1C 55         [ 4]  461 	call FPSTOR 
      001EE2 CD 1D 93         [ 4]  462 	call UNLOCK 
      001EE5 90 93            [ 1]  463 	ldw y,x 
      001EE7 90 FE            [ 2]  464 	ldw y,(y)
      001EE9 90 89            [ 2]  465 	pushw y 
      001EEB 90 5E            [ 1]  466 	swapw y 
      001EED FF               [ 2]  467 	ldw (x),y 
      001EEE CD 1E 3E         [ 4]  468 	call WR_BYTE 
      001EF1 90 85            [ 2]  469 	popw y 
      001EF3 1D 00 02         [ 2]  470 	subw x,#CELLL
      001EF6 FF               [ 2]  471 	ldw (x),y 
      001EF7 CD 1E 3E         [ 4]  472 	call WR_BYTE
      001EFA CC 1D BB         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001EFD 1E DB                  481 	.word LINK 
                           001EFF   482 	LINK=. 
      001EFF 09                     483 	.byte 9 
      001F00 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001F09                        485 row_erase:
      001F09 CD 04 64         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F0C CD 1C 55         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001F0F 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001F12 90 AE 1F 62      [ 2]  491 	ldw y,#row_erase_proc
      001F16 FF               [ 2]  492 	ldw (x),y 
      001F17 CD 0C EF         [ 4]  493 	call PAD 
      001F1A 90 AE 1F 89      [ 2]  494 	ldw y,#row_erase_proc_end 
      001F1E 72 A2 1F 62      [ 2]  495 	subw y,#row_erase_proc
      001F22 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001F25 FF               [ 2]  497 	ldw (x),y 
      001F26 CD 0D 2B         [ 4]  498 	call CMOVE 
      001F29                        499 block_erase:
      001F29 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001F2C 90 A3 36 00      [ 2]  501 	cpw y,#app_space 
      001F30 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001F32 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001F36 24 04            [ 1]  505 	jruge 1$
      001F38 CD 04 4E         [ 4]  506 	call FC_XON
      001F3B 81               [ 4]  507 	ret ; bad address 
      001F3C 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001F40 23 04            [ 2]  509 	jrule 2$ 
      001F42 CD 04 4E         [ 4]  510 	call FC_XON
      001F45 81               [ 4]  511 	ret ; bad address 
      001F46                        512 2$:	
      001F46 CD 1D 55         [ 4]  513 	call UNLKEE 
      001F49 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001F4B                        516 erase_flash:
      001F4B CD 1D 74         [ 4]  517 	call UNLKFL 
      001F4E                        518 proceed_erase:
      001F4E CD 0C EF         [ 4]  519 	call PAD 
      001F51 90 93            [ 1]  520 	ldw y,x
      001F53 90 FE            [ 2]  521 	ldw y,(y)
      001F55 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001F58 90 FD            [ 4]  523 	call (y) 
      001F5A 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001F5E CD 04 4E         [ 4]  525 	call FC_XON
      001F61 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F62                        529 row_erase_proc:
      001F62 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F66 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F6A 4F               [ 1]  532 	clr a 
      001F6B 90 5F            [ 1]  533 	clrw y 
      001F6D 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F71 90 5C            [ 1]  535     incw y
      001F73 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F77 90 5C            [ 1]  537     incw y
      001F79 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F7D 90 5C            [ 1]  539     incw y
      001F7F 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F83 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001F88 81               [ 4]  542 	ret
      001F89                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F89                        556 copy_buffer:
      001F89 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F8B 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F8F 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F93 90 5F            [ 1]  561 	clrw y
      001F95 F6               [ 1]  562 1$:	ld a,(x)
      001F96 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F9A 5C               [ 1]  564 	incw x 
      001F9B 90 5C            [ 1]  565 	incw y 
      001F9D 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F9F 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001FA1 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001FA6 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001FA7 81               [ 4]  571 	ret 
      001FA8                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001FA8                        578 copy_prog_to_ram:
      001FA8 1D 00 06         [ 2]  579 	subw x,#6
      001FAB 90 AE 1F 89      [ 2]  580 	ldw y,#copy_buffer 
      001FAF EF 04            [ 2]  581 	ldw (4,x),y 
      001FB1 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001FB5 EF 02            [ 2]  583 	ldw (2,x),y 
      001FB7 90 AE 1F A8      [ 2]  584 	ldw y,#copy_buffer_end 
      001FBB 72 A2 1F 89      [ 2]  585 	subw y,#copy_buffer  
      001FBF FF               [ 2]  586 	ldw (x),y 
      001FC0 CD 0D 2B         [ 4]  587 	call CMOVE 
      001FC3 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001FC4 1E FF                  597 	.word LINK 
                           001FC6   598 	LINK=.
      001FC6 06                     599 	.byte 6 
      001FC7 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001FCD                        601 write_row:
      001FCD CD 04 64         [ 4]  602 	call FC_XOFF
      001FD0 CD 1C 55         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001FD3 A6 80            [ 1]  605 	ld a,#0x80 
      001FD5 B4 36            [ 1]  606 	and a,PTR8 
      001FD7 B7 36            [ 1]  607 	ld PTR8,a  
      001FD9 CD 1F A8         [ 4]  608 	call copy_prog_to_ram
      001FDC CD 1D 93         [ 4]  609 	call UNLOCK
      001FDF 90 93            [ 1]  610 	ldw y,x 
      001FE1 90 FE            [ 2]  611 	ldw y,(y)
      001FE3 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001FE6 89               [ 2]  613 	pushw x 
      001FE7 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001FE8 CD 17 00         [ 4]  615 	call TIBBASE
      001FEB CD 1D BB         [ 4]  616 	call LOCK
      001FEE 85               [ 2]  617 	popw x 
      001FEF CD 04 4E         [ 4]  618 	call FC_XON 
      001FF2 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001FF3 1F C6                  627 		.word LINK 
                           001FF5   628 		LINK=.
      001FF5 07                     629 		.byte 7 
      001FF6 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001FFD                        631 set_option: 
      001FFD 90 93            [ 1]  632 		ldw y,x 
      001FFF 90 FE            [ 2]  633 		ldw y,(y)
      002001 27 06            [ 1]  634 		jreq 1$
      002003 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002007 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002009 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      00200C 81               [ 4]  639 		ret
      00200D 90 58            [ 2]  640 2$:		sllw y 
      00200F 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      002013 FF               [ 2]  642 		ldw (x),y 
      002014 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002017 90 5F            [ 1]  644 		clrw y 
      002019 FF               [ 2]  645 		ldw (x),y 
      00201A CD 1E 93         [ 4]  646 		call EECSTORE
      00201D 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      00201E 1F F5                  656 	.word LINK  
                           002020   657 	LINK=.
      002020 08                     658 	.byte 8 
      002021 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002029                        660 pristine:
                                    661 ;;; erase EEPROM
      002029 CD 1C 74         [ 4]  662 	call EEPROM 
      00202C CD 08 28         [ 4]  663 1$:	call DDUP 
      00202F CD 1F 09         [ 4]  664 	call row_erase
      002032 90 93            [ 1]  665 	ldw y,x 
      002034 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002037 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      00203B EF 02            [ 2]  668 	ldw (2,x),y
      00203D 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      002041 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002043 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002047 FF               [ 2]  673 2$:	ldw (x),y   
      002048 90 5F            [ 1]  674 	clrw y 
      00204A EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      00204C CD 08 28         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      00204F CD 1F FD         [ 4]  677 	call set_option
      002052 90 93            [ 1]  678 	ldw y,x 
      002054 90 FE            [ 2]  679 	ldw y,(y)
      002056 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002058 90 A3 00 08      [ 2]  681 	cpw y,#8 
      00205C 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      00205E 90 AE 36 00      [ 2]  684 	ldw y,#app_space
      002062 EF 02            [ 2]  685 	ldw (2,x),y  
      002064 90 5F            [ 1]  686 	clrw y 
      002066 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002067 CD 1F 09         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00206A 1D 00 02         [ 2]  690 	subw x,#CELLL 
      00206D 90 5F            [ 1]  691 	clrw y  
      00206F FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002070 CD 06 1A         [ 4]  693 	call DUPP  
      002073 CD 20 90         [ 4]  694 	call reset_vector
      002076 90 93            [ 1]  695 	ldw y,x 
      002078 90 FE            [ 2]  696 	ldw y,(y)
      00207A 90 5C            [ 1]  697 	incw y   ; next vector 
      00207C 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002080 25 ED            [ 1]  699 	jrult 4$
      002082 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002085 20 20                  708 	.word LINK 
                           002087   709 	LINK=. 
      002087 08                     710 	.byte 8 
      002088 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002090                        712 reset_vector:
      002090 90 93            [ 1]  713 	ldw y,x
      002092 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002095 90 FE            [ 2]  715 	ldw y,(y)
      002097 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00209B 27 3A            [ 1]  717 	jreq 9$
      00209D 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      0020A1 22 34            [ 1]  719 	jrugt 9$  
      0020A3 90 58            [ 2]  720 	sllw y 
      0020A5 90 58            [ 2]  721 	sllw y 
      0020A7 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0020AB 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0020AE 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0020B1 EF 02            [ 2]  725 	ldw (2,x),y 
      0020B3 90 5F            [ 1]  726 	clrw y
      0020B5 FF               [ 2]  727 	ldw (x),y 
      0020B6 A6 82            [ 1]  728 	ld a,#0x82 
      0020B8 90 95            [ 1]  729 	ld yh,a
      0020BA EF 04            [ 2]  730 	ldw (4,x),y
      0020BC CD 1E DF         [ 4]  731 	call EESTORE
      0020BF 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0020C2 90 5F            [ 1]  733 	clrw y 
      0020C4 FF               [ 2]  734 	ldw (x),y 
      0020C5 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0020C9 EF 04            [ 2]  736 	ldw (4,x),y 
      0020CB 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0020CE 72 A9 00 02      [ 2]  738 	addw y,#2
      0020D2 EF 02            [ 2]  739 	ldw (2,x),y 
      0020D4 CD 1E DF         [ 4]  740 	call EESTORE
      0020D7 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0020D8 20 87                  750 	.word LINK 
                           0020DA   751 	LINK=.
      0020DA 07                     752 	.byte 7
      0020DB 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0020E2                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020E2 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0020E4 90 93            [ 1]  761 	ldw y,x 
      0020E6 90 FE            [ 2]  762 	ldw y,(y)
      0020E8 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0020EA 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0020EC AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0020EF BF 35            [ 2]  766 	ldw PTR16,X
      0020F1 AE FF FC         [ 2]  767 	ldw x,#-4 
      0020F4 1C 00 04         [ 2]  768 1$:	addw x,#4
      0020F7 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0020FA 27 22            [ 1]  770 	jreq 9$
      0020FC 90 93            [ 1]  771 	ldw y,x  
      0020FE 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      002101 11 03            [ 1]  773 	cp a,(CADR,sp)
      002103 25 EF            [ 1]  774 	jrult 1$
      002105 90 5C            [ 1]  775 	incw y 
      002107 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      00210A 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      00210C 25 E6            [ 1]  778 	jrult 1$ 
      00210E 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      002110 54               [ 2]  780 	srlw x
      002111 54               [ 2]  781 	srlw x 
      002112 90 93            [ 1]  782 	ldw y,x 
      002114 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002116 FF               [ 2]  784 	ldw (x),y
      002117 CD 20 90         [ 4]  785 	call reset_vector
      00211A 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      00211C 20 D6            [ 2]  787 	jra 1$
      00211E 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002120 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002123 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002125 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002126 20 DA                  799 	.word LINK
                           002128   800 	LINK=.
      002128 08                     801 	.byte 8 
      002129 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      002131                        803 set_vector:
      002131 90 93            [ 1]  804     ldw y,x 
      002133 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002136 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002138 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      00213C 23 04            [ 2]  808 	jrule 2$
      00213E 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002141 81               [ 4]  810 	ret
      002142 90 58            [ 2]  811 2$:	sllw y 
      002144 90 58            [ 2]  812 	sllw y 
      002146 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00214A 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      00214D A6 82            [ 1]  815 	ld a,#0x82 
      00214F 90 95            [ 1]  816 	ld yh,a 
      002151 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002153 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002155 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002158 EF 04            [ 2]  821 	ldw (4,x),y 
      00215A 90 BE 26         [ 2]  822 	ldw y,YTEMP
      00215D EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      00215F 90 5F            [ 1]  824 	clrw y 
      002161 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002162 CD 1E DF         [ 4]  826 	call EESTORE 
      002165 90 93            [ 1]  827 	ldw y,x 
      002167 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00216A 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00216D EF 04            [ 2]  830 	ldw (4,x),y 
      00216F 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002172 72 A9 00 02      [ 2]  832 	addw y,#2 
      002176 EF 02            [ 2]  833 	ldw (2,x),y 
      002178 90 5F            [ 1]  834 	clrw y 
      00217A FF               [ 2]  835 	ldw (x),y 
      00217B CD 1E DF         [ 4]  836 	call EESTORE
      00217E 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002181 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002182 21 28                  845 	.word LINK
                           002184   846 	LINK=.
      002184 03                     847 	.byte 3
      002185 45 45 2C               848 	.ascii "EE,"
      002188                        849 EE_COMMA:
      002188 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00218B 90 BE 1A         [ 2]  851 	ldw y,UCP
      00218E 90 89            [ 2]  852 	pushw y 
      002190 EF 02            [ 2]  853 	ldw (2,x),y 
      002192 90 5F            [ 1]  854 	clrw y 
      002194 FF               [ 2]  855 	ldw (x),y
      002195 CD 1E DF         [ 4]  856 	call EESTORE
      002198 90 85            [ 2]  857 	popw y 
      00219A 72 A9 00 02      [ 2]  858 	addw y,#2
      00219E 90 BF 1A         [ 2]  859 	ldw UCP,y
      0021A1 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0021A2 21 84                  867 	.word LINK 
                           0021A4   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021A4 04                     869 	.byte 4 
      0021A5 45 45 43 2C            870 	.ascii "EEC,"
      0021A9                        871 EE_CCOMMA:
      0021A9 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0021AC 90 BE 1A         [ 2]  873 	ldw y,UCP
      0021AF 90 89            [ 2]  874 	pushw y 
      0021B1 EF 02            [ 2]  875 	ldw (2,x),y 
      0021B3 90 5F            [ 1]  876 	clrw y 
      0021B5 FF               [ 2]  877 	ldw (x),y
      0021B6 CD 1E 93         [ 4]  878 	call EECSTORE
      0021B9 90 85            [ 2]  879 	popw y 
      0021BB 90 5C            [ 1]  880 	incw y 
      0021BD 90 BF 1A         [ 2]  881 	ldw UCP,y
      0021C0 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0021C1 21 A4                  889 	.word LINK 
                           0021C3   890 	LINK=.
      0021C3 07                     891 	.byte 7 
      0021C4 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0021CB                        893 ROW2BUF: 
      0021CB CD 1C 55         [ 4]  894 	call FPSTOR 
      0021CE A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0021D0 88               [ 1]  896 	push a 
      0021D1 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0021D3 B7 36            [ 1]  898 	ld PTR8,a
      0021D5 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0021D9 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0021DD 90 F7            [ 1]  901 	ld (y),a
      0021DF CD 1D CF         [ 4]  902 	call INC_FPTR
      0021E2 90 5C            [ 1]  903 	incw y 
      0021E4 0A 01            [ 1]  904 	dec (1,sp)
      0021E6 26 F1            [ 1]  905 	jrne 1$ 
      0021E8 84               [ 1]  906 	pop a 
      0021E9 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0021EA 21 C3                  915 	.word LINK 
                           0021EC   916 	LINK=.
      0021EC 07                     917 	.byte 7 
      0021ED 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0021F4                        919 BUF2ROW:
      0021F4 CD 07 1E         [ 4]  920 	call TBUF ; ( ud rb -- )
      0021F7 CD 07 DE         [ 4]  921 	call ROT 
      0021FA CD 07 DE         [ 4]  922 	call ROT  ; ( rb ud -- )
      0021FD CD 1F CD         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002200 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      002201 21 EC                  931 	.word LINK 
                           002203   932 	LINK=.
      002203 05                     933 	.byte 5 
      002204 52 46 52 45 45         934 	.ascii "RFREE"
      002209                        935 RFREE:
      002209 E6 01            [ 1]  936 	ld a,(1,x)
      00220B A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      00220D B7 26            [ 1]  938 	ld YTEMP,a 
      00220F A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      002211 B0 26            [ 1]  940 	sub a,YTEMP 
      002213 90 5F            [ 1]  941 	clrw y 
      002215 90 97            [ 1]  942 	ld yl,a
      002217 FF               [ 2]  943 	ldw (x),y 
      002218 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002219 22 03                  955 	.word LINK 
                           00221B   956 	LINK=. 
      00221B 06                     957 	.byte 6
      00221C 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002222                        960 RAM2EE:
                                    961 ; copy ud on top 
      002222 90 93            [ 1]  962 	ldw y,x 
      002224 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002227 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00222A 90 93            [ 1]  965 	ldw y,x 
      00222C 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      00222F 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002232 FF               [ 2]  968 	ldw (x),y 
      002233 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002236 EF 02            [ 2]  970 	ldw (2,x),y 
      002238 CD 21 CB         [ 4]  971 	call ROW2BUF 
      00223B 90 93            [ 1]  972 	ldw y,x 
      00223D 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002240 90 89            [ 2]  974 	pushw y ; udl 
      002242 90 9F            [ 1]  975 	ld a,yl
      002244 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002246 90 5F            [ 1]  977 	clrw y 
      002248 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00224A 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      00224E 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002251 FF               [ 2]  981 	ldw (x),y  
      002252 CD 06 2A         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002255 CD 05 35         [ 4]  983 	call RFROM  
      002258 CD 22 09         [ 4]  984 	call RFREE 
      00225B CD 09 80         [ 4]  985 	call MIN
      00225E CD 06 1A         [ 4]  986 	call DUPP 
      002261 CD 05 E3         [ 4]  987 	call TOR  
      002264 CD 0D 2B         [ 4]  988 	call CMOVE
      002267 CD 21 F4         [ 4]  989 	call BUF2ROW 
      00226A CD 05 35         [ 4]  990 	call RFROM 
      00226D 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00226E 22 1B                  999 	.word LINK 
                           002270  1000 	LINK=. 
      002270 05                    1001 	.byte 5 
      002271 46 41 44 44 52        1002 	.ascii "FADDR"
      002276                       1003 FADDR:
      002276 CC 0C 04         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002279 22 70                 1020 	.word LINK 
                           00227B  1021 	LINK=.
      00227B 05                    1022 	.byte 5 
      00227C 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002281                       1024 FMOVE:
      002281 CD 07 30         [ 4] 1025 	call TFLASH 
      002284 CD 04 E4         [ 4] 1026 	CALL AT 
      002287 CD 04 99         [ 4] 1027 	CALL QBRAN 
      00228A 23 05                 1028 	.word no_move  
      00228C CD 07 7F         [ 4] 1029 	call CPP
      00228F CD 04 E4         [ 4] 1030 	call AT  
      002292 CD 06 1A         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002295 CD 07 63         [ 4] 1032 	call CNTXT 
      002298 CD 04 E4         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00229B CD 04 70         [ 4] 1034 	call DOLIT 
      00229E 00 02                 1035 	.word 2 
      0022A0 CD 08 D3         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0022A3 CD 06 2A         [ 4] 1037 	call SWAPP 
      0022A6 CD 22 76         [ 4] 1038 	call FADDR 
      0022A9 CD 07 DE         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0022AC CD 06 1A         [ 4] 1040 	call DUPP 
      0022AF CD 05 E3         [ 4] 1041 	call TOR    ; R: a 
      0022B2                       1042 FMOVE2: 
      0022B2 CD 0C DE         [ 4] 1043 	call HERE 
      0022B5 CD 05 46         [ 4] 1044 	call RAT 
      0022B8 CD 08 D3         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0022BB                       1046 next_row:
      0022BB CD 06 1A         [ 4] 1047 	call DUPP 
      0022BE CD 05 E3         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0022C1 CD 22 22         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0022C4 CD 06 1A         [ 4] 1050 	call DUPP 
      0022C7 CD 05 E3         [ 4] 1051 	call TOR
      0022CA CD 08 3D         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0022CD CD 06 1A         [ 4] 1053 	call DUPP 
      0022D0 CD 0C 04         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0022D3 CD 05 35         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0022D6 CD 05 35         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0022D9 CD 06 42         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0022DC CD 08 D3         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0022DF CD 06 1A         [ 4] 1059 	call DUPP 
      0022E2 CD 04 99         [ 4] 1060 	call QBRAN
      0022E5 22 FE                 1061 	.word fmove_done 
      0022E7 CD 06 2A         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0022EA CD 05 35         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0022ED CD 08 3D         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0022F0 CD 06 1A         [ 4] 1065 	call DUPP 
      0022F3 CD 05 E3         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0022F6 CD 06 2A         [ 4] 1067 	call SWAPP 
      0022F9 CD 04 B5         [ 4] 1068 	call BRAN
      0022FC 22 BB                 1069 	.word next_row  
      0022FE                       1070 fmove_done:	
      0022FE CD 05 35         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002301 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002304 81               [ 4] 1073  	ret  
      002305                       1074 no_move:
      002305 CD 0C 04         [ 4] 1075 	call ZERO
      002308 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002309 22 7B                 1083 	.word LINK 
                           00230B  1084 	LINK=.
      00230B 09                    1085 	.byte 9
      00230C 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002315                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002315 CD 1C CF         [ 4] 1089 	call EEPVP 
      002318                       1090 	_DROP 
      002318 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00231B CD 04 E4         [ 4] 1091 	call AT
      00231E CD 07 71         [ 4] 1092 	call VPP 
      002321 CD 04 D2         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002324 CD 1C B9         [ 4] 1095 	call EEPCP 
      002327                       1096 	_DROP
      002327 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00232A CD 04 E4         [ 4] 1097 	call AT
      00232D CD 04 70         [ 4] 1098 	call DOLIT 
      002330 00 02                 1099 	.word 2 
      002332 CD 08 3D         [ 4] 1100 	call PLUS 
      002335 CD 06 1A         [ 4] 1101 	call DUPP 
      002338 CD 07 63         [ 4] 1102 	call CNTXT 
      00233B CD 04 D2         [ 4] 1103 	call STORE
      00233E CD 07 8F         [ 4] 1104 	call LAST
      002341 CD 04 D2         [ 4] 1105 	call STORE 
      002344 CD 1C E9         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002347 CD 07 7F         [ 4] 1108 	call CPP 
      00234A CD 04 D2         [ 4] 1109 	call STORE
      00234D CD 1D 12         [ 4] 1110 	call UPDATCP 
      002350 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002351 23 0B                 1117 	.word LINK 
                           002353  1118 	LINK=. 
      002353 06                    1119 	.byte 6
      002354 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00235A                       1121 IFMOVE:
      00235A CD 07 30         [ 4] 1122 	call TFLASH 
      00235D CD 04 E4         [ 4] 1123 	CALL AT 
      002360 CD 04 99         [ 4] 1124 	CALL QBRAN 
      002363 23 05                 1125 	.word no_move 
      002365 CD 07 7F         [ 4] 1126 	call CPP 
      002368 CD 04 E4         [ 4] 1127 	call AT 
      00236B CD 06 1A         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00236E CD 1C CF         [ 4] 1129 	call EEPVP 
      002371                       1130 	_DROP
      002371 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002374 CD 04 E4         [ 4] 1131 	call AT  ; ( udl udl a )
      002377 CD 05 E3         [ 4] 1132 	call TOR 
      00237A CD 22 76         [ 4] 1133 	call FADDR
      00237D CD 05 46         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002380 CC 22 B2         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           000001  4643 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4644         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002383 23 53                   34         .word LINK 
                           002385    35         LINK=.
      002385 02                      36         .byte 2
      002386 50 49                   37         .ascii "PI" 
      002388                         38 PII:
      002388 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00238B 90 AE 01 63      [ 2]   40         ldw y,#355 
      00238F EF 02            [ 2]   41         ldw (2,x),y 
      002391 90 AE 00 71      [ 2]   42         ldw y,#113 
      002395 FF               [ 2]   43         ldw (x),y 
      002396 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002397 23 85                   51         .word LINK 
                           002399    52         LINK=.
      002399 05                      53         .byte 5 
      00239A 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00239F                         55 SQRT2:
      00239F 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      0023A2 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      0023A6 EF 02            [ 2]   58         ldw (2,x),y 
      0023A8 90 AE 36 24      [ 2]   59         ldw y,#13860 
      0023AC FF               [ 2]   60         ldw (x),y 
      0023AD 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      0023AE 23 99                   66         .word LINK 
                           0023B0    67         LINK=.
      0023B0 05                      68         .byte 5
      0023B1 53 51 52 54 33          69         .ascii "SQRT3" 
      0023B6                         70 SQRT3: 
      0023B6 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      0023B9 90 AE 49 81      [ 2]   72     ldw y,#18817 
      0023BD EF 02            [ 2]   73     ldw (2,x),y 
      0023BF 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      0023C3 FF               [ 2]   75     ldw (x),y 
      0023C4 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      0023C5 23 B0                   81         .word LINK 
                           0023C7    82         LINK=.
      0023C7 01                      83         .byte 1
      0023C8 45                      84         .ascii "E" 
      0023C9                         85 ENEPER:
      0023C9 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      0023CC 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      0023D0 EF 02            [ 2]   88     ldw (2,x),y 
      0023D2 90 AE 29 32      [ 2]   89     ldw y,#10546 
      0023D6 FF               [ 2]   90     ldw (x),y 
      0023D7 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      0023D8 23 C7                   95         .word LINK 
                           0023DA    96         LINK=.
      0023DA 06                      97         .byte 6 
      0023DB 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0023E1                         99 SQRT10:
      0023E1 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0023E4 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0023E8 EF 02            [ 2]  102     ldw (2,x),y 
      0023EA 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0023EE FF               [ 2]  104     ldw (x),y 
      0023EF 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0023F0 23 DA                  110         .word LINK 
                           0023F2   111         LINK=. 
      0023F2 05                     112         .byte 5 
      0023F3 31 32 52 54 32         113         .ascii "12RT2"
      0023F8                        114 RT12_2:
      0023F8 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0023FB 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0023FF EF 02            [ 2]  117     ldw (2,x),y 
      002401 90 AE 62 CD      [ 2]  118     ldw y,#25293
      002405 FF               [ 2]  119     ldw (x),y 
      002406 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002407 23 F2                  125         .word LINK 
                           002409   126         LINK=.
      002409 05                     127         .byte 5 
      00240A 4C 4F 47 32 53         128         .ascii "LOG2S" 
      00240F                        129 LOG2S:
      00240F 1D 00 04         [ 2]  130     subw x,#2*CELLL
      002412 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      002416 EF 02            [ 2]  132     ldw (2,x),y 
      002418 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      00241C FF               [ 2]  134     ldw (x),y 
      00241D 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      00241E 24 09                  140         .word LINK 
                           002420   141         LINK=.
      002420 04                     142         .byte 4 
      002421 4C 4E 32 53            143         .ascii "LN2S" 
      002425                        144 LN2S: 
      002425 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002428 90 AE 01 E5      [ 2]  146     ldw y,#485
      00242C EF 02            [ 2]  147     ldw (2,x),y 
      00242E 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      002432 FF               [ 2]  149     ldw (x),y 
      002433 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4645 .endif
                           000001  4646 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   4647         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      002434 24 20                   34     .word LINK 
                           002436    35     LINK=.
      002436 06                      36     .byte 6
      002437 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      00243D                         38 CALLOT:
      00243D CD 07 7F         [ 4]   39     CALL CPP
      002440 CD 06 1A         [ 4]   40     CALL DUPP 
      002443 CD 04 E4         [ 4]   41     CALL AT 
      002446 CD 05 E3         [ 4]   42     CALL TOR 
      002449 CD 0C 74         [ 4]   43     CALL PSTOR 
      00244C CD 1D 12         [ 4]   44     CALL UPDATCP 
      00244F CD 05 35         [ 4]   45     CALL RFROM
      002452 CC 0C 04         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002455 24 36                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                           002457    55     LINK=.
      002457 06                      56     .byte 6
      002458 43 54 41 42 4C 45       57     .ascii "CTABLE"
      00245E                         58 CTABLE:
      00245E CD 24 3D         [ 4]   59     CALL CALLOT     
      002461 CC 19 A6         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002464 24 57                   69     .word LINK 
                           002466    70     LINK=.
      002466 06                      71     .byte 6
      002467 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00246D                         73 WTABLE:
      00246D CD 0B 8B         [ 4]   74     CALL CELLS  
      002470 CD 24 3D         [ 4]   75     CALL CALLOT 
      002473 CC 19 A6         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002476 24 66                   84     .word LINK 
                           002478    85     LINK=.
      002478 06                      86     .byte 6
      002479 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      00247F                         88 CTAT:
      00247F CD 1C 55         [ 4]   89     call FPSTOR 
      002482 CD 1D E7         [ 4]   90     call PTRPLUS 
      002485 CC 1E 24         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002488 24 78                   99     .word LINK 
                           00248A   100     LINK=.
      00248A 06                     101     .byte 6
      00248B 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002491                        103 WTAT:
      002491 CD 1C 55         [ 4]  104     call FPSTOR 
      002494 CD 0B 8B         [ 4]  105     call CELLS 
      002497 CD 1D E7         [ 4]  106     call PTRPLUS 
      00249A CD 1E 02         [ 4]  107     call EE_READ 
      00249D 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      00249E 24 8A                  115     .word LINK 
                           0024A0   116     LINK=.
      0024A0 06                     117     .byte 6 
      0024A1 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0024A7                        119 CTINIT:
      0024A7 CD 1C 55         [ 4]  120     CALL FPSTOR
      0024AA CD 1D 93         [ 4]  121     CALL UNLOCK
      0024AD CD 0C 04         [ 4]  122     CALL ZERO 
      0024B0 CD 0B 98         [ 4]  123 1$: CALL ONEP 
      0024B3 CD 06 1A         [ 4]  124     CALL DUPP 
      0024B6 CD 25 03         [ 4]  125     CALL INTQ 
      0024B9 CD 04 99         [ 4]  126     CALL QBRAN 
      0024BC 24 C6                  127     .word 2$
      0024BE CD 1E 3E         [ 4]  128     call WR_BYTE 
      0024C1 CD 04 B5         [ 4]  129     CALL BRAN 
      0024C4 24 B0                  130     .word 1$ 
      0024C6                        131 2$: _DDROP 
      0024C6 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024C9 CD 1D BB         [ 4]  132     CALL LOCK 
      0024CC 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0024CD 24 A0                  140     .word LINK 
                           0024CF   141     LINK=.
      0024CF 06                     142     .byte 6 
      0024D0 57 54 49 4E 49 54      143     .ascii "WTINIT"
      0024D6                        144 WTINIT:
      0024D6 CD 1C 55         [ 4]  145     CALL FPSTOR
      0024D9 CD 1D 93         [ 4]  146     CALL UNLOCK
      0024DC CD 0C 04         [ 4]  147     CALL ZERO 
      0024DF CD 0B 98         [ 4]  148 1$: CALL ONEP 
      0024E2 CD 06 1A         [ 4]  149     CALL DUPP
      0024E5 CD 25 03         [ 4]  150     CALL INTQ
      0024E8 CD 04 99         [ 4]  151     CALL QBRAN 
      0024EB 24 F5                  152     .word 2$
      0024ED CD 1E 63         [ 4]  153     call WR_WORD 
      0024F0 CD 04 B5         [ 4]  154     CALL BRAN 
      0024F3 24 DF                  155     .word 1$ 
      0024F5                        156 2$: _DDROP 
      0024F5 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024F8 CD 1D BB         [ 4]  157     CALL LOCK 
      0024FB 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      0024FC 24 CF                  166     .word LINK 
                           0024FE   167     LINK=.
      0024FE 04                     168     .byte 4
      0024FF 5B 4E 5D 3F            169     .ascii "[N]?" 
      002503                        170 INTQ:
      002503 CD 0F 8B         [ 4]  171     CALL CR 
      002506 CD 04 70         [ 4]  172     call DOLIT 
      002509 00 5B                  173     .word '[
      00250B CD 04 37         [ 4]  174     CALL EMIT 
      00250E CD 10 31         [ 4]  175     CALL DOT 
      002511 CD 0F B8         [ 4]  176     CALL  DOTQP
      002514 03                     177     .byte 3
      002515 5D 3F 20               178     .ascii "]? " 
      002518 CD 13 BF         [ 4]  179     CALL QUERY 
      00251B CD 11 EA         [ 4]  180     call TOKEN 
      00251E CC 25 DD         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                   4648 .endif
                           000001  4649 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   4650         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002521                         35     _HEADER DBLVER,7,"DBL-VER"
      002521 24 FE                    1         .word LINK 
                           002523     2         LINK=.
      002523 07                       3         .byte 7  
      002524 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      00252B                          5         DBLVER:
      00252B CD 0F 8B         [ 4]   36     CALL CR 
      00252E CD 0F B8         [ 4]   37     CALL DOTQP 
      002531 18                      38     .byte  24 
      002532 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      00254A CD 1B 55         [ 4]   40     CALL PRT_LICENCE
      00254D CD 1B 2D         [ 4]   41     CALL COPYRIGHT  
      002550                         42     _DOLIT DVER_MAJOR 
      002550 CD 04 70         [ 4]    1     CALL DOLIT 
      002553 00 01                    2     .word DVER_MAJOR 
      002555                         43     _DOLIT DVER_MINOR  
      002555 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002558 00 00                    2     .word DVER_MINOR 
      00255A CC 1B 69         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      00255D                         49 nsign: ; ( addr cntr -- addr cntr f ) 
      00255D 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      002560 90 93            [ 1]   51     LDW Y,X 
      002562 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      002565 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002567 A1 2D            [ 1]   54     CP A,#'-' 
      002569 27 03            [ 1]   55     JREQ NEG_SIGN 
      00256B 4F               [ 1]   56     CLR A  
      00256C 20 18            [ 2]   57     JRA STO_SIGN 
      00256E                         58 NEG_SIGN:
                                     59 ; increment addr 
      00256E 90 93            [ 1]   60     LDW Y,X 
      002570 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      002573 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002577 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      002579 90 93            [ 1]   65     LDW Y,X
      00257B 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      00257E 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      002582 EF 02            [ 2]   68     LDW (2,X),Y 
      002584 A6 FF            [ 1]   69     LD A,#0XFF
      002586                         70 STO_SIGN:   
      002586 F7               [ 1]   71     LD (X),A 
      002587 E7 01            [ 1]   72     LD (1,X),A 
      002589 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00258A                         79 parse_digits:
      00258A CD 06 1A         [ 4]   80     CALL DUPP 
      00258D                         81     _QBRAN parse_d5  
      00258D CD 04 99         [ 4]    1     CALL QBRAN
      002590 25 D2                    2     .word parse_d5
      002592 CD 05 E3         [ 4]   82     CALL TOR   ; dlo dhi a R: cntr 
      002595 CD 0C C7         [ 4]   83     CALL COUNT ; dlo dhi a+ char 
      002598 CD 06 E0         [ 4]   84     CALL BASE 
      00259B CD 04 E4         [ 4]   85     CALL AT 
      00259E CD 0E D0         [ 4]   86     CALL DIGTQ 
      0025A1                         87     _QBRAN parse_d4 ; not a digit
      0025A1 CD 04 99         [ 4]    1     CALL QBRAN
      0025A4 25 C6                    2     .word parse_d4
      0025A6 CD 29 1D         [ 4]   88     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0025A9 CD 06 E0         [ 4]   89     CALL BASE 
      0025AC CD 04 E4         [ 4]   90     CALL AT 
      0025AF CD 27 A8         [ 4]   91     CALL DSSTAR
      0025B2 CD 05 35         [ 4]   92     CALL RFROM 
      0025B5 CD 0C 04         [ 4]   93     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0025B8 CD 2B CC         [ 4]   94     CALL DPLUS 
      0025BB CD 05 35         [ 4]   95     CALL RFROM  ; dlo dhi a+ 
      0025BE CD 05 35         [ 4]   96     CALL RFROM ; dlo dhi a+ cntr 
      0025C1 CD 0B A5         [ 4]   97     CALL ONEM 
      0025C4 20 C4            [ 2]   98     JRA parse_digits ; dlo dhi a+ R: 
      0025C6                         99 parse_d4:
      0025C6 90 93            [ 1]  100     LDW Y,X 
      0025C8 90 EE 02         [ 2]  101     LDW Y,(2,Y)
      0025CB 90 5A            [ 2]  102     DECW Y  ; dec(a)
      0025CD EF 02            [ 2]  103     LDW (2,X),Y 
      0025CF 90 85            [ 2]  104     POPW Y 
      0025D1 FF               [ 2]  105     LDW (X),Y ; dlo dhi a cntr  
      0025D2                        106 parse_d5:
      0025D2 81               [ 4]  107     RET 
                                    108 
                                    109 
                                    110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    111 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    112 ;   convert string to integer 
                                    113 ;   double begin with '#' 
                                    114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025D3                        115     _HEADER NUMBQ,7,"NUMBER?"
      0025D3 25 23                    1         .word LINK 
                           0025D5     2         LINK=.
      0025D5 07                       3         .byte 7  
      0025D6 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0025DD                          5         NUMBQ:
                                    116 ; save current base value 
      0025DD CD 06 E0         [ 4]  117     CALL BASE 
      0025E0 CD 04 E4         [ 4]  118     CALL AT 
      0025E3 CD 05 E3         [ 4]  119     CALL TOR  ; R: base 
                                    120 ; initialize integer to 0     
      0025E6 1D 00 04         [ 2]  121     SUBW X,#4 ; create space for a double  
      0025E9 90 5F            [ 1]  122     CLRW Y 
      0025EB FF               [ 2]  123     LDW (X),Y 
      0025EC EF 02            [ 2]  124     LDW (2,X),Y ; a 0 0 R: base  
      0025EE                        125     _DOLIT 2 
      0025EE CD 04 70         [ 4]    1     CALL DOLIT 
      0025F1 00 02                    2     .word 2 
      0025F3 CD 0C 5D         [ 4]  126     CALL PICK  ; a 0 0 a R: base    
      0025F6 CD 0C C7         [ 4]  127     CALL COUNT ; a 0 0 a+ n 
                                    128 ; check for '#' double integer 
      0025F9 CD 06 42         [ 4]  129     CALL OVER  ; a 0 0 a+ n a+
      0025FC CD 05 02         [ 4]  130     CALL CAT   ; a 0 0 a+ n c 
      0025FF                        131     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0025FF CD 04 70         [ 4]    1     CALL DOLIT 
      002602 00 23                    2     .word '#' 
      002604 CD 08 FB         [ 4]  132     CALL EQUAL 
      002607 CD 05 E3         [ 4]  133     CALL TOR   ; a 0 0 a+ n R: base d? 
      00260A CD 05 46         [ 4]  134     CALL RAT   ; a 0 0 a+ n d? R: base d?
      00260D                        135     _QBRAN NUMQ0
      00260D CD 04 99         [ 4]    1     CALL QBRAN
      002610 26 1E                    2     .word NUMQ0
                                    136 ; update a and count
      002612 CD 06 2A         [ 4]  137     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002615 CD 0B 98         [ 4]  138     CALL ONEP 
      002618 CD 06 2A         [ 4]  139     CALL SWAPP 
      00261B CD 0B A5         [ 4]  140     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    141 ; check for '$' hexadecimal  
      00261E                        142 NUMQ0: 
      00261E CD 06 42         [ 4]  143     CALL OVER   
      002621 CD 05 02         [ 4]  144     CALL CAT   
      002624                        145     _DOLIT '$'
      002624 CD 04 70         [ 4]    1     CALL DOLIT 
      002627 00 24                    2     .word '$' 
      002629 CD 08 FB         [ 4]  146     CALL EQUAL ; a 0 0 a+ n- f  
      00262C                        147     _QBRAN NUMQ1 
      00262C CD 04 99         [ 4]    1     CALL QBRAN
      00262F 26 48                    2     .word NUMQ1
      002631 CD 0E A7         [ 4]  148     CALL HEX   ; switch to hexadecimal base 
                                    149 ; update a and count 
      002634 CD 06 2A         [ 4]  150     CALL SWAPP 
      002637 CD 0B 98         [ 4]  151     CALL ONEP 
      00263A CD 06 2A         [ 4]  152     CALL SWAPP
      00263D CD 0B A5         [ 4]  153     CALL ONEM ; a 0 0 a+ n-  R: base d?
      002640 CD 07 CD         [ 4]  154     CALL QDUP 
      002643                        155     _QBRAN NUMQ6 
      002643 CD 04 99         [ 4]    1     CALL QBRAN
      002646 26 9D                    2     .word NUMQ6
                                    156 ; check for minus sign 
      002648                        157 NUMQ1: 
      002648 CD 25 5D         [ 4]  158     CALL nsign 
      00264B CD 05 E3         [ 4]  159     CALL TOR ; R: base d? sign  
                                    160 ; check for end of string     
      00264E CD 07 CD         [ 4]  161     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      002651                        162     _QBRAN NUMQ5 ; yes , not a number 
      002651 CD 04 99         [ 4]    1     CALL QBRAN
      002654 26 9B                    2     .word NUMQ5
      002656 CD 25 8A         [ 4]  163     CALL parse_digits
      002659 CD 07 CD         [ 4]  164     CALL QDUP 
      00265C CD 06 63         [ 4]  165     CALL ZEQUAL  
      00265F                        166     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      00265F CD 04 99         [ 4]    1     CALL QBRAN
      002662 26 90                    2     .word NUMQ4
      002664                        167     _DROP  ; a dlo dhi 
      002664 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002667 CD 05 35         [ 4]  168     CALL RFROM  ; a dlo dhi sign 
      00266A                        169     _QBRAN NUMQ3
      00266A CD 04 99         [ 4]    1     CALL QBRAN
      00266D 26 72                    2     .word NUMQ3
      00266F CD 08 99         [ 4]  170     CALL DNEGA
      002672                        171 NUMQ3: 
      002672 CD 07 DE         [ 4]  172     CALL ROT ; dlo dhi a  R: base d?
      002675                        173     _DROP
      002675 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002678                        174     _DOLIT -2  ; double return -2 flag 
      002678 CD 04 70         [ 4]    1     CALL DOLIT 
      00267B FF FE                    2     .word -2 
      00267D CD 05 35         [ 4]  175     CALL RFROM ; dlo dhi d? R: base 
      002680                        176     _TBRAN NUMQ8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      002680 CD 04 A7         [ 4]    1     CALL TBRAN 
      002683 26 A5                    2     .word NUMQ8 
      002685 CD 06 2A         [ 4]  177     CALL SWAPP 
      002688                        178     _DROP
      002688 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00268B CD 0B 98         [ 4]  179     CALL ONEP   ; single return -1 flag   
      00268E 20 15            [ 2]  180     JRA NUMQ8
      002690                        181 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   182 .if WANT_FLOAT
      002690 CD 05 35         [ 4]  183     CALL RFROM ; sign 
      002693 CD 05 35         [ 4]  184     CALL RFROM ; d? 
      002696 CD 2F 9B         [ 4]  185     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )
      002699 20 0A            [ 2]  186     JRA NUMQ8 
                                    187 .endif 
      00269B                        188 NUMQ5: 
      00269B 5B 02            [ 2]  189     ADDW SP,#2
      00269D                        190 NUMQ6:    
      00269D 5B 02            [ 2]  191     ADDW SP,#2 
      00269F 1C 00 04         [ 2]  192     ADDW X,#4 
      0026A2 90 5F            [ 1]  193     CLRW Y 
      0026A4 FF               [ 2]  194     LDW (X),Y 
      0026A5                        195 NUMQ8: 
      0026A5 CD 05 35         [ 4]  196     CALL RFROM 
      0026A8 CD 06 E0         [ 4]  197     CALL BASE 
      0026AB CC 04 D2         [ 2]  198     JP STORE 
                                    199      
                                    200 
                                    201 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;   DABS ( d -- d )
                                    205 ;   absolute value of double
                                    206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026AE                        207     _HEADER DABS,4,"DABS"
      0026AE 25 D5                    1         .word LINK 
                           0026B0     2         LINK=.
      0026B0 04                       3         .byte 4  
      0026B1 44 41 42 53              4         .ascii "DABS"
      0026B5                          5         DABS:
      0026B5 F6               [ 1]  208     LD A,(X) 
      0026B6 A4 80            [ 1]  209     AND A,#0X80 
      0026B8 27 03            [ 1]  210     JREQ DABS1 
      0026BA CC 08 99         [ 2]  211     JP DNEGA 
      0026BD                        212 DABS1:
      0026BD 81               [ 4]  213     RET 
                                    214 
                                    215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    216 ;  DSIGN ( d -- d f )
                                    217 ;  sign of double 
                                    218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026BE                        219     _HEADER DSIGN,5,"DSIGN"
      0026BE 26 B0                    1         .word LINK 
                           0026C0     2         LINK=.
      0026C0 05                       3         .byte 5  
      0026C1 44 53 49 47 4E           4         .ascii "DSIGN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026C6                          5         DSIGN:
      0026C6 A6 00            [ 1]  220     LD A,#0 
      0026C8 90 93            [ 1]  221     LDW Y,X 
      0026CA 90 FE            [ 2]  222     LDW Y,(Y)
      0026CC 2A 02            [ 1]  223     JRPL DSIGN1
      0026CE A6 FF            [ 1]  224     LD A,#0XFF 
      0026D0                        225 DSIGN1:
      0026D0 1D 00 02         [ 2]  226     SUBW X,#2 
      0026D3 F7               [ 1]  227     LD (X),A 
      0026D4 E7 01            [ 1]  228     LD (1,X),A 
      0026D6 81               [ 4]  229     RET 
                                    230 
                                    231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    232 ;   DS/MOD ( ud us - ur qud )
                                    233 ;   unsigned divide double by single 
                                    234 ;   return double quotient 
                                    235 ;   and single remainder 
                                    236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D7                        237     _HEADER DSLMOD,6,"DS/MOD"
      0026D7 26 C0                    1         .word LINK 
                           0026D9     2         LINK=.
      0026D9 06                       3         .byte 6  
      0026DA 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      0026E0                          5         DSLMOD:
      0026E0 90 93            [ 1]  238         LDW     Y,X             ; stack pointer to Y
      0026E2 FE               [ 2]  239         LDW     X,(X)           ; un
      0026E3 BF 26            [ 2]  240         LDW     YTEMP,X         ; save un
      0026E5 93               [ 1]  241         LDW     X,Y
      0026E6 89               [ 2]  242         PUSHW   X               ; save stack pointer
      0026E7 90 89            [ 2]  243         PUSHW   Y 
      0026E9 EE 02            [ 2]  244         LDW     X,(2,X)           ; X=udh
      0026EB 90 BE 26         [ 2]  245         LDW     Y,YTEMP         ; divisor 
      0026EE 65               [ 2]  246         DIVW    X,Y 
      0026EF BF 24            [ 2]  247         LDW     XTEMP,X         ; QUOTIENT hi 
      0026F1 93               [ 1]  248         LDW     X,Y             ; remainder in X 
      0026F2 90 85            [ 2]  249         POPW    Y 
      0026F4 90 EE 04         [ 2]  250         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0026F7 A6 10            [ 1]  251         LD      A,#16           ; loop count
      0026F9 90 58            [ 2]  252         SLLW    Y               ; udl shift udl into udh
      0026FB                        253 DSLMOD3:
      0026FB 59               [ 2]  254         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0026FC 25 04            [ 1]  255         JRC     DSLMODa         ; if carry out of rotate
      0026FE B3 26            [ 2]  256         CPW     X,YTEMP         ; compare udh to un
      002700 25 05            [ 1]  257         JRULT   DSLMOD4         ; can't subtract
      002702                        258 DSLMODa:
      002702 72 B0 00 26      [ 2]  259         SUBW    X,YTEMP         ; can subtract
      002706 98               [ 1]  260         RCF
      002707                        261 DSLMOD4:
      002707 8C               [ 1]  262         CCF                     ; quotient bit
      002708 90 59            [ 2]  263         RLCW    Y               ; rotate into quotient, rotate out udl
      00270A 4A               [ 1]  264         DEC     A               ; repeat
      00270B 26 EE            [ 1]  265         JRNE    DSLMOD3           ; if A == 0
      00270D                        266 DSLMODb:
      00270D BF 26            [ 2]  267         LDW     YTEMP,X         ; done, save remainder
      00270F 85               [ 2]  268         POPW    X               ; restore stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002710 EF 02            [ 2]  269         LDW     (2,X),Y           ; save quotient low 
      002712 90 BE 24         [ 2]  270         LDW     Y,XTEMP         ; quotient hi 
      002715 FF               [ 2]  271         LDW     (X),Y           ; save quotient hi 
      002716 90 BE 26         [ 2]  272         LDW     Y,YTEMP         ; remainder onto stack
      002719 EF 04            [ 2]  273         LDW     (4,X),Y
      00271B 81               [ 4]  274         RET 
                                    275 
                                    276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    277 ;   D# ( d -- d )
                                    278 ;   extract least digit 
                                    279 ;   from double integer 
                                    280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00271C                        281     _HEADER DDIG,2,"D#"
      00271C 26 D9                    1         .word LINK 
                           00271E     2         LINK=.
      00271E 02                       3         .byte 2  
      00271F 44 23                    4         .ascii "D#"
      002721                          5         DDIG:
      002721 CD 06 E0         [ 4]  282     CALL BASE 
      002724 CD 04 E4         [ 4]  283     CALL AT 
      002727 CD 26 E0         [ 4]  284     CALL DSLMOD
      00272A CD 07 DE         [ 4]  285     CALL ROT   
      00272D CD 0D D0         [ 4]  286     CALL DIGIT 
      002730 CC 0E 1C         [ 2]  287     JP HOLD 
                                    288      
                                    289 
                                    290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    291 ;    D#S ( d -- s )
                                    292 ;   extract digit from double 
                                    293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002733                        294     _HEADER DDIGS,3,"D#S"
      002733 27 1E                    1         .word LINK 
                           002735     2         LINK=.
      002735 03                       3         .byte 3  
      002736 44 23 53                 4         .ascii "D#S"
      002739                          5         DDIGS:
      002739 CD 27 21         [ 4]  295     CALL    DDIG 
      00273C CD 08 28         [ 4]  296     CALL    DDUP 
      00273F CD 28 A3         [ 4]  297     CALL    DZEQUAL
      002742                        298     _QBRAN  DDIGS 
      002742 CD 04 99         [ 4]    1     CALL QBRAN
      002745 27 39                    2     .word DDIGS
      002747                        299     _DROP 
      002747 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00274A 81               [ 4]  300     RET
                                    301 
                                    302 
                                    303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    304 ;   D. ( d -- )
                                    305 ;   display double integer 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00274B                        307     _HEADER DDOT,2,"D."
      00274B 27 35                    1         .word LINK 
                           00274D     2         LINK=.
      00274D 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      00274E 44 2E                    4         .ascii "D."
      002750                          5         DDOT:
      002750 CD 0F 48         [ 4]  308     CALL SPACE 
      002753 CD 26 C6         [ 4]  309     CALL DSIGN 
      002756 CD 05 E3         [ 4]  310     CALL TOR
      002759 CD 05 46         [ 4]  311     CALL RAT 
      00275C                        312     _QBRAN DDOT0
      00275C CD 04 99         [ 4]    1     CALL QBRAN
      00275F 27 64                    2     .word DDOT0
      002761 CD 08 99         [ 4]  313     CALL DNEGA 
      002764                        314 DDOT0:     
      002764 CD 0E 0C         [ 4]  315     CALL BDIGS 
      002767 CD 27 39         [ 4]  316     CALL DDIGS 
      00276A CD 05 35         [ 4]  317     CALL RFROM 
      00276D                        318     _QBRAN DDOT1 
      00276D CD 04 99         [ 4]    1     CALL QBRAN
      002770 27 7A                    2     .word DDOT1
      002772                        319     _DOLIT '-' 
      002772 CD 04 70         [ 4]    1     CALL DOLIT 
      002775 00 2D                    2     .word '-' 
      002777 CD 0E 1C         [ 4]  320     CALL HOLD 
      00277A                        321 DDOT1: 
      00277A CD 0E 71         [ 4]  322     CALL EDIGS 
      00277D CC 0F 72         [ 2]  323     JP TYPES     
                                    324      
                                    325 
                                    326 
                                    327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    328 ;  UDS* ( ud u -- ud*u )
                                    329 ;  uint32*uint16 
                                    330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002780                        331     _HEADER UDSSTAR,4,"UDS*"
      002780 27 4D                    1         .word LINK 
                           002782     2         LINK=.
      002782 04                       3         .byte 4  
      002783 55 44 53 2A              4         .ascii "UDS*"
      002787                          5         UDSSTAR:
      002787 CD 05 E3         [ 4]  332     CALL TOR 
      00278A CD 06 2A         [ 4]  333     CALL SWAPP 
      00278D CD 05 46         [ 4]  334     CALL RAT 
      002790 CD 0A CD         [ 4]  335     CALL UMSTA ; udlo*u 
      002793 CD 07 DE         [ 4]  336     CALL ROT 
      002796 CD 05 35         [ 4]  337     CALL RFROM 
      002799 CD 0A CD         [ 4]  338     CALL UMSTA ; udhi*u 
      00279C                        339     _DROP  ; drop overflow 
      00279C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00279F CC 08 3D         [ 2]  340     JP PLUS  ; udlo*u+(uhi*u<<16)
                                    341      
                                    342 
                                    343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    344 ; multiply double by unsigned single 
                                    345 ; return double 
                                    346 ;  ( d u -- d )
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027A2                        348     _HEADER DSSTAR,3,"DS*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      0027A2 27 82                    1         .word LINK 
                           0027A4     2         LINK=.
      0027A4 03                       3         .byte 3  
      0027A5 44 53 2A                 4         .ascii "DS*"
      0027A8                          5         DSSTAR:
                                    349 ;DSSTAR:
      0027A8 CD 05 E3         [ 4]  350     CALL TOR
      0027AB CD 26 C6         [ 4]  351     CALL DSIGN 
      0027AE CD 07 FD         [ 4]  352     CALL NROT 
      0027B1 CD 26 B5         [ 4]  353     CALL DABS
      0027B4 CD 05 35         [ 4]  354     CALL RFROM 
      0027B7 CD 27 87         [ 4]  355     CALL UDSSTAR  
      0027BA CD 07 DE         [ 4]  356     CALL ROT 
      0027BD                        357     _QBRAN DSSTAR3 
      0027BD CD 04 99         [ 4]    1     CALL QBRAN
      0027C0 27 C5                    2     .word DSSTAR3
      0027C2 CC 08 99         [ 2]  358     JP DNEGA 
      0027C5                        359 DSSTAR3:
      0027C5 81               [ 4]  360     RET 
                                    361 
                                    362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    363 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    364 ;  swap double 
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027C6                        366     _HEADER DSWAP,5,"2SWAP"
      0027C6 27 A4                    1         .word LINK 
                           0027C8     2         LINK=.
      0027C8 05                       3         .byte 5  
      0027C9 32 53 57 41 50           4         .ascii "2SWAP"
      0027CE                          5         DSWAP:
      0027CE 90 93            [ 1]  367     LDW Y,X 
      0027D0 90 FE            [ 2]  368     LDW Y,(Y)
      0027D2 90 BF 26         [ 2]  369     LDW YTEMP,Y ; d2 hi 
      0027D5 90 93            [ 1]  370     LDW Y,X 
      0027D7 90 EE 02         [ 2]  371     LDW Y,(2,Y)
      0027DA 90 BF 24         [ 2]  372     LDW XTEMP,Y  ; d2 lo 
      0027DD 90 93            [ 1]  373     LDW Y,X 
      0027DF 90 EE 04         [ 2]  374     LDW Y,(4,Y)  ; d1 hi 
      0027E2 FF               [ 2]  375     LDW (X),Y 
      0027E3 90 93            [ 1]  376     LDW Y,X
      0027E5 90 EE 06         [ 2]  377     LDW Y,(6,Y)  ; d1 lo 
      0027E8 EF 02            [ 2]  378     LDW (2,X),Y
      0027EA 90 BE 26         [ 2]  379     LDW Y,YTEMP  
      0027ED EF 04            [ 2]  380     LDW (4,X),Y 
      0027EF 90 BE 24         [ 2]  381     LDW Y,XTEMP 
      0027F2 EF 06            [ 2]  382     LDW (6,X),Y 
      0027F4 81               [ 4]  383     RET 
                                    384 
                                    385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    386 ;    DCLZ ( d -- u )
                                    387 ;    double count leading zeros
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F5                        389     _HEADER DCLZ,4,"DCLZ"
      0027F5 27 C8                    1         .word LINK 
                           0027F7     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      0027F7 04                       3         .byte 4  
      0027F8 44 43 4C 5A              4         .ascii "DCLZ"
      0027FC                          5         DCLZ:
      0027FC 4F               [ 1]  390     CLR A 
      0027FD 90 93            [ 1]  391     LDW Y,X 
      0027FF 90 FE            [ 2]  392     LDW Y,(Y)
      002801 2B 18            [ 1]  393     JRMI DCLZ8 ; no leading zero 
      002803 27 09            [ 1]  394     JREQ DCLZ4 ; >=16 
      002805                        395 DCLZ1: ; <16
      002805 90 58            [ 2]  396     SLLW Y
      002807 4C               [ 1]  397     INC A 
      002808 90 5D            [ 2]  398     TNZW Y 
      00280A 2B 0F            [ 1]  399     JRMI DCLZ8
      00280C 20 F7            [ 2]  400     JRA DCLZ1 
      00280E                        401 DCLZ4: ; >=16 
      00280E A6 10            [ 1]  402     LD A,#16 
      002810 90 93            [ 1]  403     LDW Y,X 
      002812 90 EE 02         [ 2]  404     LDW Y,(2,Y)
      002815 2B 04            [ 1]  405     JRMI DCLZ8 
      002817 26 EC            [ 1]  406     JRNE DCLZ1 
      002819 AB 10            [ 1]  407     ADD A,#16
      00281B                        408 DCLZ8: 
      00281B 1C 00 02         [ 2]  409     ADDW X,#2 
      00281E 90 5F            [ 1]  410     CLRW Y 
      002820 90 97            [ 1]  411     LD YL,A 
      002822 FF               [ 2]  412     LDW (X),Y 
      002823 81               [ 4]  413     RET 
                                    414 
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    416 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    417 ;   rotate left doubles 
                                    418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002824                        419     _HEADER NDROT,5,"<2ROT"
      002824 27 F7                    1         .word LINK 
                           002826     2         LINK=.
      002826 05                       3         .byte 5  
      002827 3C 32 52 4F 54           4         .ascii "<2ROT"
      00282C                          5         NDROT:
                                    420 ; save d3 in temp 
      00282C 90 93            [ 1]  421     LDW Y,X 
      00282E 90 FE            [ 2]  422     LDW Y,(Y)
      002830 90 BF 26         [ 2]  423     LDW YTEMP,Y  ; d3 hi 
      002833 90 93            [ 1]  424     LDW Y,X 
      002835 90 EE 02         [ 2]  425     LDW Y,(2,Y)
      002838 90 BF 24         [ 2]  426     LDW XTEMP,Y  ; d3 lo 
                                    427 ; put d2 in d1 slot 
      00283B 90 93            [ 1]  428     LDW Y,X 
      00283D 90 EE 04         [ 2]  429     LDW Y,(4,Y) 
      002840 FF               [ 2]  430     LDW (X),Y   ; d2 hi 
      002841 90 93            [ 1]  431     LDW Y,X 
      002843 90 EE 06         [ 2]  432     LDW Y,(6,Y)
      002846 EF 02            [ 2]  433     LDW (2,X),Y ; d2 lo
                                    434 ; put d1 in d2 slot 
      002848 90 93            [ 1]  435     LDW Y,X 
      00284A 90 EE 08         [ 2]  436     LDW Y,(8,Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      00284D EF 04            [ 2]  437     LDW (4,X),Y ; d1 hi 
      00284F 90 93            [ 1]  438     LDW Y,X 
      002851 90 EE 0A         [ 2]  439     LDW Y,(10,Y)
      002854 EF 06            [ 2]  440     LDW (6,X),Y  ; d1 lo 
                                    441 ; put d3 in d1 slot 
      002856 90 BE 26         [ 2]  442     LDW Y,YTEMP 
      002859 EF 08            [ 2]  443     LDW (8,X),Y  ; d3 hi 
      00285B 90 BE 24         [ 2]  444     LDW Y,XTEMP 
      00285E EF 0A            [ 2]  445     LDW (10,X),Y  ; d3 lo 
      002860 81               [ 4]  446     RET 
                                    447 
                                    448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    449 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    450 ;   rotate right doubles 
                                    451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002861                        452     _HEADER DROT,4,"2ROT"
      002861 28 26                    1         .word LINK 
                           002863     2         LINK=.
      002863 04                       3         .byte 4  
      002864 32 52 4F 54              4         .ascii "2ROT"
      002868                          5         DROT:
                                    453 ; save d3 in temp 
      002868 90 93            [ 1]  454     LDW Y,X 
      00286A 90 FE            [ 2]  455     LDW Y,(Y)
      00286C 90 BF 26         [ 2]  456     LDW YTEMP,Y ; d3 hi 
      00286F 90 93            [ 1]  457     LDW Y,X 
      002871 90 EE 02         [ 2]  458     LDW Y,(2,Y)
      002874 90 BF 24         [ 2]  459     LDW XTEMP,Y ; d3 lo 
                                    460 ; put d1 in d3 slot 
      002877 90 93            [ 1]  461     LDW Y,X 
      002879 90 EE 08         [ 2]  462     LDW Y,(8,Y)
      00287C FF               [ 2]  463     LDW (X),Y  ; d1 hi 
      00287D 90 93            [ 1]  464     LDW Y,X 
      00287F 90 EE 0A         [ 2]  465     LDW Y,(10,Y) 
      002882 EF 02            [ 2]  466     LDW (2,X),Y ; d1 lo 
                                    467 ; put d2 in d1 slot 
      002884 90 93            [ 1]  468     LDW Y,X 
      002886 90 EE 04         [ 2]  469     LDW Y,(4,Y) ; d2 hi 
      002889 EF 08            [ 2]  470     LDW (8,X),Y 
      00288B 90 93            [ 1]  471     LDW Y,X 
      00288D 90 EE 06         [ 2]  472     LDW Y,(6,Y) ; d2 lo 
      002890 EF 0A            [ 2]  473     LDW (10,X),Y 
                                    474 ; put d3 in d2 slot 
      002892 90 BE 26         [ 2]  475     LDW Y,YTEMP 
      002895 EF 04            [ 2]  476     LDW (4,X),Y 
      002897 90 BE 24         [ 2]  477     LDW Y,XTEMP 
      00289A EF 06            [ 2]  478     LDW (6,X),Y 
      00289C 81               [ 4]  479     RET 
                                    480 
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    482 ;    D0= ( d -- 0|-1 )
                                    483 ;    check if double is 0 
                                    484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00289D                        485     _HEADER DZEQUAL,3,"D0="
      00289D 28 63                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                           00289F     2         LINK=.
      00289F 03                       3         .byte 3  
      0028A0 44 30 3D                 4         .ascii "D0="
      0028A3                          5         DZEQUAL:
      0028A3 4F               [ 1]  486     CLR A  
      0028A4 90 93            [ 1]  487     LDW Y,X 
      0028A6 90 FE            [ 2]  488     LDW Y,(Y)
      0028A8 26 09            [ 1]  489     JRNE ZEQ1 
      0028AA 90 93            [ 1]  490     LDW Y,X 
      0028AC 90 EE 02         [ 2]  491     LDW Y,(2,Y)
      0028AF 26 02            [ 1]  492     JRNE ZEQ1 
      0028B1 A6 FF            [ 1]  493     LD A,#0xFF
      0028B3                        494 ZEQ1:
      0028B3 1C 00 02         [ 2]  495     ADDW X,#CELLL 
      0028B6 F7               [ 1]  496     LD (X),A
      0028B7 E7 01            [ 1]  497     LD (1,X),A
      0028B9 81               [ 4]  498 	RET     
                                    499 
                                    500 
                                    501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    502 ;   D= ( d1 d2 -- f )
                                    503 ;   d1==d2?
                                    504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028BA                        505     _HEADER DEQUAL,2,"D="
      0028BA 28 9F                    1         .word LINK 
                           0028BC     2         LINK=.
      0028BC 02                       3         .byte 2  
      0028BD 44 3D                    4         .ascii "D="
      0028BF                          5         DEQUAL:
      0028BF A6 00            [ 1]  506     LD A,#0 
      0028C1 90 93            [ 1]  507     LDW Y,X 
      0028C3 90 FE            [ 2]  508     LDW Y,(Y)
      0028C5 E3 04            [ 2]  509     CPW Y,(4,X)
      0028C7 26 0B            [ 1]  510     JRNE DEQU4 
      0028C9 90 93            [ 1]  511     LDW Y,X 
      0028CB 90 EE 02         [ 2]  512     LDW Y,(2,Y)
      0028CE E3 06            [ 2]  513     CPW Y,(6,X)
      0028D0 26 02            [ 1]  514     JRNE DEQU4 
      0028D2 A6 FF            [ 1]  515     LD A,#0XFF
      0028D4                        516 DEQU4:
      0028D4 1C 00 06         [ 2]  517     ADDW X,#6
      0028D7 F7               [ 1]  518     LD (X),A 
      0028D8 E7 01            [ 1]  519     LD (1,X),A 
      0028DA 81               [ 4]  520     RET 
                                    521 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    523 ;   D> ( d1 d2 -- f )
                                    524 ;   d1>d2?
                                    525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028DB                        526     _HEADER DGREAT,2,"D>"
      0028DB 28 BC                    1         .word LINK 
                           0028DD     2         LINK=.
      0028DD 02                       3         .byte 2  
      0028DE 44 3E                    4         .ascii "D>"
      0028E0                          5         DGREAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      0028E0 CD 27 CE         [ 4]  527     CALL DSWAP 
      0028E3 CC 28 EB         [ 2]  528     JP DLESS 
                                    529 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    531 ;   D< ( d1 d2 -- f )
                                    532 ;   d1<d2? 
                                    533 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E6                        534     _HEADER DLESS,2,"D<"
      0028E6 28 DD                    1         .word LINK 
                           0028E8     2         LINK=.
      0028E8 02                       3         .byte 2  
      0028E9 44 3C                    4         .ascii "D<"
      0028EB                          5         DLESS:
      0028EB CD 2B FE         [ 4]  535     CALL DSUB
      0028EE CD 0C 04         [ 4]  536     CALL ZERO
      0028F1 CD 07 FD         [ 4]  537     CALL NROT  
      0028F4 CD 29 06         [ 4]  538     CALL DZLESS 
      0028F7                        539     _QBRAN DLESS4
      0028F7 CD 04 99         [ 4]    1     CALL QBRAN
      0028FA 28 FF                    2     .word DLESS4
      0028FC CC 08 76         [ 2]  540     JP INVER  
      0028FF                        541 DLESS4:
      0028FF 81               [ 4]  542     RET
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  D0< ( d -- f )
                                    546 ;  d<0? 
                                    547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002900                        548     _HEADER DZLESS,3,"D0<"
      002900 28 E8                    1         .word LINK 
                           002902     2         LINK=.
      002902 03                       3         .byte 3  
      002903 44 30 3C                 4         .ascii "D0<"
      002906                          5         DZLESS:
      002906 A6 00            [ 1]  549     LD A,#0 
      002908 90 93            [ 1]  550     LDW Y,X 
      00290A 90 FE            [ 2]  551     LDW Y,(Y)
      00290C 2A 02            [ 1]  552     JRPL DZLESS1 
      00290E A6 FF            [ 1]  553     LD A,#0XFF 
      002910                        554 DZLESS1:
      002910 1C 00 02         [ 2]  555     ADDW X,#CELLL 
      002913 F7               [ 1]  556     LD (X),A 
      002914 E7 01            [ 1]  557     LD (1,X),A    
      002916 81               [ 4]  558     RET 
                                    559 
                                    560 
                                    561 
                                    562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    563 ;   2>R ( d -- R: d )
                                    564 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002917                        565     _HEADER DTOR,3,"2>R"
      002917 29 02                    1         .word LINK 
                           002919     2         LINK=.
      002919 03                       3         .byte 3  
      00291A 32 3E 52                 4         .ascii "2>R"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      00291D                          5         DTOR:
      00291D 90 85            [ 2]  566     POPW Y 
      00291F 90 BF 26         [ 2]  567     LDW YTEMP,Y 
      002922 90 93            [ 1]  568     LDW Y,X 
      002924 90 EE 02         [ 2]  569     LDW Y,(2,Y)
      002927 90 89            [ 2]  570     PUSHW Y   ; d low 
      002929 90 93            [ 1]  571     LDW Y,X 
      00292B 90 FE            [ 2]  572     LDW Y,(Y)
      00292D 90 89            [ 2]  573     PUSHW Y   ; d hi 
      00292F                        574     _DDROP  
      00292F 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002932 92 CC 26         [ 5]  575     JP [YTEMP]
                                    576 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    578 ;  2R> ( -- d ) R: d --      
                                    579 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002935                        580     _HEADER DRFROM,3,"2R>"
      002935 29 19                    1         .word LINK 
                           002937     2         LINK=.
      002937 03                       3         .byte 3  
      002938 32 52 3E                 4         .ascii "2R>"
      00293B                          5         DRFROM:
      00293B 90 85            [ 2]  581     POPW Y      ; d hi 
      00293D 90 BF 26         [ 2]  582     LDW YTEMP,Y 
      002940 1D 00 04         [ 2]  583     SUBW X,#4
      002943 90 85            [ 2]  584     POPW Y       ; d hi 
      002945 FF               [ 2]  585     LDW (X),Y 
      002946 90 85            [ 2]  586     POPW Y       ; d low  
      002948 EF 02            [ 2]  587     LDW (2,X),Y 
      00294A 92 CC 26         [ 5]  588     JP [YTEMP]
                                    589     
                                    590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    591 ;   2R@ ( -- d )
                                    592 ;   fecth a double from RSTACK
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00294D                        594     _HEADER DRAT,3,"2R@"
      00294D 29 37                    1         .word LINK 
                           00294F     2         LINK=.
      00294F 03                       3         .byte 3  
      002950 32 52 40                 4         .ascii "2R@"
      002953                          5         DRAT:
      002953 90 85            [ 2]  595     POPW Y 
      002955 90 BF 26         [ 2]  596     LDW YTEMP,Y 
      002958 1D 00 04         [ 2]  597     SUBW X,#4 
      00295B 16 01            [ 2]  598     LDW Y,(1,SP)
      00295D FF               [ 2]  599     LDW (X),Y 
      00295E 16 03            [ 2]  600     LDW Y,(3,SP)
      002960 EF 02            [ 2]  601     LDW (2,X),Y 
      002962 92 CC 26         [ 5]  602     JP [YTEMP]
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;  2VARIABLE <name> 
                                    606 ;  create a double variable 
                                    607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002965                        608     _HEADER DVARIA,9,"2VARIABLE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002965 29 4F                    1         .word LINK 
                           002967     2         LINK=.
      002967 09                       3         .byte 9  
      002968 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002971                          5         DVARIA:
      002971 CD 0C DE         [ 4]  609         CALL HERE
      002974 CD 06 1A         [ 4]  610         CALL DUPP
      002977                        611         _DOLIT 4  
      002977 CD 04 70         [ 4]    1     CALL DOLIT 
      00297A 00 04                    2     .word 4 
      00297C CD 08 3D         [ 4]  612         CALL PLUS 
      00297F CD 07 71         [ 4]  613         CALL VPP 
      002982 CD 04 D2         [ 4]  614         CALL STORE
      002985 CD 19 0D         [ 4]  615         CALL CREAT
      002988 CD 06 1A         [ 4]  616         CALL DUPP
      00298B CD 15 2E         [ 4]  617         CALL COMMA
      00298E CD 0C 04         [ 4]  618         CALL ZERO
      002991 CD 06 42         [ 4]  619         CALL OVER 
      002994 CD 04 D2         [ 4]  620         CALL STORE 
      002997 CD 0C 04         [ 4]  621         CALL ZERO 
      00299A CD 06 2A         [ 4]  622         CALL SWAPP 
      00299D CD 04 D2         [ 4]  623         CALL STORE
      0029A0 CD 22 81         [ 4]  624         CALL FMOVE ; move definition to FLASH
      0029A3 CD 07 CD         [ 4]  625         CALL QDUP 
      0029A6 CD 04 99         [ 4]  626         CALL QBRAN 
      0029A9 19 5A                  627         .word SET_RAMLAST   
      0029AB CD 1D 29         [ 4]  628         CALL UPDATVP  ; don't update if variable kept in RAM.
      0029AE CC 23 15         [ 2]  629         JP UPDATPTR
                                    630                 
                                    631 
                                    632 
                                    633 
                                    634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    635 ;  2LITERAL ( d -- )
                                    636 ;  compile double literal 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029B1                        638     _HEADER DLITER,IMEDD+8,"2LITERAL"
      0029B1 29 67                    1         .word LINK 
                           0029B3     2         LINK=.
      0029B3 88                       3         .byte IMEDD+8  
      0029B4 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      0029BC                          5         DLITER:
      0029BC CD 15 73         [ 4]  639     CALL COMPI 
      0029BF 29 C7                  640     .word do2lit 
      0029C1 CD 15 2E         [ 4]  641     CALL COMMA 
      0029C4 CC 15 2E         [ 2]  642     JP   COMMA 
                                    643 
                                    644 
                                    645 ; runtime for 2LITERAL 
      0029C7                        646 do2lit:
      0029C7 1D 00 04         [ 2]  647     SUBW X,#4 
      0029CA 16 01            [ 2]  648     LDW Y,(1,SP)
      0029CC 90 FE            [ 2]  649     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      0029CE FF               [ 2]  650     LDW (X),Y 
      0029CF 16 01            [ 2]  651     LDW Y,(1,SP)
      0029D1 90 EE 02         [ 2]  652     LDW Y,(2,Y)
      0029D4 EF 02            [ 2]  653     LDW (2,X),Y 
      0029D6 90 85            [ 2]  654     POPW Y 
      0029D8 90 EC 04         [ 2]  655     JP (4,Y)
                                    656 
                                    657 
                                    658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    659 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029DB                        661     _HEADER DOVER,5,"2OVER"
      0029DB 29 B3                    1         .word LINK 
                           0029DD     2         LINK=.
      0029DD 05                       3         .byte 5  
      0029DE 32 4F 56 45 52           4         .ascii "2OVER"
      0029E3                          5         DOVER:
      0029E3 90 93            [ 1]  662     LDW Y,X 
      0029E5 1D 00 04         [ 2]  663     SUBW X,#4 
      0029E8 90 89            [ 2]  664     PUSHW Y 
      0029EA 90 EE 04         [ 2]  665     LDW Y,(4,Y)  ; d1 hi 
      0029ED FF               [ 2]  666     LDW (X),Y 
      0029EE 90 85            [ 2]  667     POPW Y 
      0029F0 90 EE 06         [ 2]  668     LDW Y,(6,Y)  ;d1 lo 
      0029F3 EF 02            [ 2]  669     LDW (2,X),Y 
      0029F5 81               [ 4]  670     RET 
                                    671 
                                    672 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    674 ;   D2/ ( d -- d/2 )
                                    675 ;   divide double by 2 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029F6                        677     _HEADER D2SLASH,3,"D2/"
      0029F6 29 DD                    1         .word LINK 
                           0029F8     2         LINK=.
      0029F8 03                       3         .byte 3  
      0029F9 44 32 2F                 4         .ascii "D2/"
      0029FC                          5         D2SLASH:
      0029FC 90 93            [ 1]  678     LDW Y,X 
      0029FE 90 FE            [ 2]  679     LDW Y,(Y)
      002A00 90 57            [ 2]  680     SRAW Y 
      002A02 FF               [ 2]  681     LDW (X),Y 
      002A03 90 93            [ 1]  682     LDW Y,X 
      002A05 90 EE 02         [ 2]  683     LDW Y,(2,Y)
      002A08 90 56            [ 2]  684     RRCW Y 
      002A0A EF 02            [ 2]  685     LDW (2,X),Y 
      002A0C 81               [ 4]  686     RET
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;  D2* ( d -- d*2 )
                                    690 ;  multiply double by 2 
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A0D                        692     _HEADER D2STAR,3,"D2*"
      002A0D 29 F8                    1         .word LINK 
                           002A0F     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A0F 03                       3         .byte 3  
      002A10 44 32 2A                 4         .ascii "D2*"
      002A13                          5         D2STAR:
      002A13 90 93            [ 1]  693     LDW Y,X 
      002A15 90 EE 02         [ 2]  694     LDW Y,(2,Y)
      002A18 98               [ 1]  695     RCF 
      002A19 90 59            [ 2]  696     RLCW Y 
      002A1B EF 02            [ 2]  697     LDW (2,X),Y 
      002A1D 90 93            [ 1]  698     LDW Y,X 
      002A1F 90 FE            [ 2]  699     LDW Y,(Y)
      002A21 90 59            [ 2]  700     RLCW Y 
      002A23 FF               [ 2]  701     LDW (X),Y 
      002A24 81               [ 4]  702     RET 
                                    703 
                                    704 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    705 ;   DLSHIFT ( d n -- d )
                                    706 ;   left shift double 
                                    707 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A25                        708     _HEADER DLSHIFT,7,"DLSHIFT"
      002A25 2A 0F                    1         .word LINK 
                           002A27     2         LINK=.
      002A27 07                       3         .byte 7  
      002A28 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002A2F                          5         DLSHIFT:
      002A2F E6 01            [ 1]  709     LD A,(1,X) ; shift count 
      002A31 A4 1F            [ 1]  710     AND A,#31
      002A33 1C 00 02         [ 2]  711     ADDW X,#CELLL 
      002A36 90 93            [ 1]  712     LDW Y,X 
      002A38 90 FE            [ 2]  713     LDW Y,(Y)
      002A3A 90 BF 26         [ 2]  714     LDW YTEMP,Y  ; d hi 
      002A3D 90 93            [ 1]  715     LDW Y,X 
      002A3F 90 EE 02         [ 2]  716     LDW Y,(2,Y)  ; d low 
      002A42                        717 DLSHIFT1:
      002A42 4D               [ 1]  718     TNZ A 
      002A43 27 12            [ 1]  719     JREQ DLSHIFT2 
      002A45 98               [ 1]  720     RCF 
      002A46 90 59            [ 2]  721     RLCW Y 
      002A48 90 89            [ 2]  722     PUSHW Y 
      002A4A 90 BE 26         [ 2]  723     LDW Y,YTEMP 
      002A4D 90 59            [ 2]  724     RLCW Y 
      002A4F 90 BF 26         [ 2]  725     LDW YTEMP,Y 
      002A52 90 85            [ 2]  726     POPW Y 
      002A54 4A               [ 1]  727     DEC A 
      002A55 20 EB            [ 2]  728     JRA DLSHIFT1 
      002A57                        729 DLSHIFT2:
      002A57 EF 02            [ 2]  730     LDW (2,X),Y 
      002A59 90 BE 26         [ 2]  731     LDW Y,YTEMP 
      002A5C FF               [ 2]  732     LDW (X),Y 
      002A5D 81               [ 4]  733     RET 
                                    734 
                                    735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    736 ;  DRSHIFT ( d n -- d )
                                    737 ;  shift right n bits 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A5E                        739     _HEADER DRSHIFT,7,"DRSHIFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002A5E 2A 27                    1         .word LINK 
                           002A60     2         LINK=.
      002A60 07                       3         .byte 7  
      002A61 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002A68                          5         DRSHIFT:
      002A68 E6 01            [ 1]  740     LD A,(1,X)
      002A6A A4 1F            [ 1]  741     AND A,#31
      002A6C 1C 00 02         [ 2]  742     ADDW X,#2 
      002A6F                        743 DRSHIFT1:
      002A6F 4D               [ 1]  744     TNZ A 
      002A70 27 13            [ 1]  745     JREQ DRSHIFT2 
      002A72 90 93            [ 1]  746     LDW Y,X 
      002A74 90 FE            [ 2]  747     LDW Y,(Y)
      002A76 90 54            [ 2]  748     SRLW Y 
      002A78 FF               [ 2]  749     LDW (X),Y 
      002A79 90 93            [ 1]  750     LDW Y,X 
      002A7B 90 EE 02         [ 2]  751     LDW Y,(2,Y)
      002A7E 90 56            [ 2]  752     RRCW Y 
      002A80 EF 02            [ 2]  753     LDW (2,X),Y 
      002A82 4A               [ 1]  754     DEC A
      002A83 20 EA            [ 2]  755     JRA DRSHIFT1  
      002A85                        756 DRSHIFT2:
      002A85 81               [ 4]  757     RET 
                                    758 
                                    759 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    761 ;   D* ( d1 d2 -- d3 )
                                    762 ;   double product 
                                    763 ;   d3 = d1 * d2
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A86                        765     _HEADER DSTAR,2,"D*"
      002A86 2A 60                    1         .word LINK 
                           002A88     2         LINK=.
      002A88 02                       3         .byte 2  
      002A89 44 2A                    4         .ascii "D*"
      002A8B                          5         DSTAR:
      002A8B 90 5F            [ 1]  766     CLRW Y 
      002A8D F6               [ 1]  767     LD A,(X)   ; d2 sign 
      002A8E E8 04            [ 1]  768     XOR A,(4,X) ; d1 sign 
      002A90 2A 02            [ 1]  769     JRPL 1$
      002A92 90 53            [ 2]  770     CPLW Y  
      002A94 52 02            [ 2]  771 1$: SUB SP,#2 
      002A96 17 01            [ 2]  772     LDW (1,SP),Y ; R: prod_sign 
      002A98 CD 26 B5         [ 4]  773     CALL DABS   
      002A9B CD 29 1D         [ 4]  774     CALL DTOR 
      002A9E CD 26 B5         [ 4]  775     CALL DABS
      002AA1 CD 08 28         [ 4]  776     CALL DDUP   ; ud1 ud1  
      002AA4 CD 05 35         [ 4]  777     CALL RFROM  ; ud1 ud1 ud2hi 
      002AA7 CD 27 A8         [ 4]  778     CALL DSSTAR ; ud1 dprodhi 
                                    779 ; shift partial product 16 bits left 
      002AAA                        780     _DROP   ; drop overflow 
      002AAA 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002AAD CD 0C 04         [ 4]  781     CALL ZERO   ; ud1 prodhi 
      002AB0 CD 06 2A         [ 4]  782     CALL SWAPP  
      002AB3 CD 27 CE         [ 4]  783     CALL DSWAP  ; dprodhi ud1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002AB6 CD 05 35         [ 4]  784     CALL RFROM  ; dprodhi ud1 ud2lo
      002AB9 CD 27 A8         [ 4]  785     CALL DSSTAR ; dprodhi dprodlo 
      002ABC CD 2B CC         [ 4]  786     CALL DPLUS    
      002ABF CD 05 35         [ 4]  787     CALL RFROM    ; dprod ps 
      002AC2                        788     _QBRAN DDSTAR3 
      002AC2 CD 04 99         [ 4]    1     CALL QBRAN
      002AC5 2A CA                    2     .word DDSTAR3
      002AC7 CC 08 99         [ 2]  789     JP DNEGA 
      002ACA                        790 DDSTAR3:  
      002ACA 81               [ 4]  791     RET 
                                    792 
                                    793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    794 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002ACB                        796     _HEADER UDSLMOD,6,"UD/MOD"
      002ACB 2A 88                    1         .word LINK 
                           002ACD     2         LINK=.
      002ACD 06                       3         .byte 6  
      002ACE 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002AD4                          5         UDSLMOD:
                                    797 ;;;;;;;;;;;LOCAL VARIABLES ;;;;;;;;;;;;;;;;
                           000009   798     QLO = 9   ; 4 
                           000007   799     QHI = 7   ; 3
                           000005   800     CNT1 = 5  ; 2 
                           000003   801     CNT2 = 3  ; 1
                           000001   802     QLBIT = 1 ; 0
                                    803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    804 ; unsigned double division 
      002AD4 52 0A            [ 2]  805     SUB SP,#5*CELLL ; space for local variables 
      002AD6 90 5F            [ 1]  806     CLRW Y 
      002AD8 17 09            [ 2]  807     LDW (QLO,SP),Y 
      002ADA 17 07            [ 2]  808     LDW (QHI,SP),Y ; quotient=0  
      002ADC CD 29 E3         [ 4]  809     CALL DOVER 
      002ADF CD 27 FC         [ 4]  810     CALL DCLZ ; n2, dividend leading zeros  
      002AE2 CD 05 E3         [ 4]  811     CALL TOR 
      002AE5 CD 08 28         [ 4]  812     CALL DDUP    
      002AE8 CD 27 FC         [ 4]  813     CALL DCLZ  ; n1, divisor leading zeros
      002AEB CD 05 35         [ 4]  814     CALL RFROM ; n1 n2 
      002AEE CD 08 D3         [ 4]  815     CALL SUBB  ; loop count 
      002AF1 90 93            [ 1]  816     LDW Y,X 
      002AF3 90 FE            [ 2]  817     LDW Y,(Y)
      002AF5 17 05            [ 2]  818     LDW (CNT1,SP),Y 
      002AF7 17 03            [ 2]  819     LDW (CNT2,SP),Y 
      002AF9 90 5D            [ 2]  820     TNZW Y 
      002AFB 2B 50            [ 1]  821     JRMI UDSLA7 ; quotient is null 
      002AFD CD 2A 2F         [ 4]  822     CALL DLSHIFT ; align divisor with dividend 
      002B00 90 5F            [ 1]  823     CLRW Y  
      002B02 17 01            [ 2]  824     LDW (QLBIT,SP),Y ; quotient least bit R: qlo qhi cntr qlbit 
      002B04                        825 UDSLA3: ; division loop -- dividend divisor  
      002B04 0F 02            [ 1]  826     CLR (2,SP)  ; qlbit=0 
      002B06 CD 29 E3         [ 4]  827     CALL DOVER 
      002B09 CD 29 E3         [ 4]  828     CALL DOVER 
      002B0C CD 28 EB         [ 4]  829     CALL DLESS 
      002B0F                        830     _TBRAN UDSLA4 
      002B0F CD 04 A7         [ 4]    1     CALL TBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B12 2B 22                    2     .word UDSLA4 
                                    831 ; divident >= divisor then substract     
      002B14 0C 02            [ 1]  832     INC (2,SP) ; quotient least bit 1 
      002B16 CD 08 28         [ 4]  833     CALL DDUP  ; dividend divisor divisor 
      002B19 CD 29 1D         [ 4]  834     CALL DTOR  
      002B1C CD 2B FE         [ 4]  835     CALL DSUB  ; dividend-divisor 
      002B1F CD 29 3B         [ 4]  836     CALL DRFROM  ; dividend- divisor  
      002B22                        837 UDSLA4: ; shift quotient and add qlbit 
      002B22 16 09            [ 2]  838     LDW Y,(QLO,SP) ; quotient low 
      002B24 98               [ 1]  839     RCF 
      002B25 90 59            [ 2]  840     RLCW Y
      002B27 17 09            [ 2]  841     LDW (QLO,SP),Y 
      002B29 16 07            [ 2]  842     LDW Y,(QHI,SP) ; quotient hi 
      002B2B 90 59            [ 2]  843     RLCW Y 
      002B2D 17 07            [ 2]  844     LDW (QHI,SP),Y 
      002B2F 16 09            [ 2]  845     LDW Y,(QLO,SP) 
      002B31 72 F9 01         [ 2]  846     ADDW Y,(QLBIT,SP)
      002B34 17 09            [ 2]  847     LDW (QLO,SP),Y 
      002B36 16 03            [ 2]  848     LDW Y,(CNT2,SP) ; loop counter 
      002B38 90 5D            [ 2]  849     TNZW Y 
      002B3A 27 1F            [ 1]  850     JREQ UDSLA8
      002B3C 72 A2 00 01      [ 2]  851     SUBW Y,#1  
      002B40 17 03            [ 2]  852     LDW (CNT2,SP),Y  
                                    853 ; shift dividend left 1 bit      
      002B42 CD 27 CE         [ 4]  854     CALL DSWAP 
      002B45 CD 2A 13         [ 4]  855     CALL D2STAR 
      002B48 CD 27 CE         [ 4]  856     CALL DSWAP 
      002B4B 20 B7            [ 2]  857     JRA UDSLA3 
      002B4D                        858 UDSLA7:
      002B4D                        859     _DROP 
      002B4D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B50 CD 0C 04         [ 4]  860     CALL ZERO 
      002B53                        861     _DOLIT 2   ; cnt1 local var 
      002B53 CD 04 70         [ 4]    1     CALL DOLIT 
      002B56 00 02                    2     .word 2 
      002B58 CD 05 BF         [ 4]  862     CALL NRSTO ; R: 0 0 cnt1 cnt2 qlbit     
      002B5B                        863 UDSLA8:
      002B5B 1C 00 04         [ 2]  864     ADDW X,#4 ; drop divisor
      002B5E CD 29 3B         [ 4]  865     CALL DRFROM  
      002B61                        866     _DDROP ; drop cnt2 qlbit  
      002B61 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002B64 CD 05 35         [ 4]  867     CALL RFROM   ; cnt1 
      002B67 CD 2A 68         [ 4]  868     CALL DRSHIFT 
                                    869     ; quotient replace dividend 
      002B6A CD 29 3B         [ 4]  870     CALL DRFROM  ; quotient 
      002B6D 81               [ 4]  871     RET 
                                    872 
                                    873 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    874 ;   D/MOD  ( d1 d2 -- dr dq )
                                    875 ;   double division dq=d1/d2
                                    876 ;   dr remainder double 
                                    877 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B6E                        878     _HEADER DDSLMOD,5,"D/MOD"  
      002B6E 2A CD                    1         .word LINK 
                           002B70     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002B70 05                       3         .byte 5  
      002B71 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B76                          5         DDSLMOD:
      002B76 F6               [ 1]  879     LD A,(X) ; disisor sign 
      002B77 88               [ 1]  880     PUSH A 
      002B78 E6 04            [ 1]  881     LD A,(4,X) ; dividend sign 
      002B7A 88               [ 1]  882     PUSH A   ; R: sdivsor sdivnd 
      002B7B CD 26 B5         [ 4]  883     CALL DABS 
      002B7E CD 29 1D         [ 4]  884     CALL DTOR ; R: sign abs(divisor)
      002B81 CD 26 B5         [ 4]  885     CALL DABS  ; ud1  
      002B84 CD 29 53         [ 4]  886     CALL DRAT  ; ud1 ud2 R: sign abs(divisor) 
      002B87 CD 2A D4         [ 4]  887     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002B8A 7B 05            [ 1]  888     LD A,(5,SP) ; sdivnd 
      002B8C 18 06            [ 1]  889     XOR A,(6,SP) ; 
      002B8E 2A 18            [ 1]  890     JRPL DSLA8 
      002B90 CD 0C 0F         [ 4]  891     CALL ONE 
      002B93 CD 0C 04         [ 4]  892     CALL ZERO 
      002B96 CD 2B CC         [ 4]  893     CALL DPLUS 
      002B99 CD 08 99         [ 4]  894     CALL DNEGA ; negate quotient  
      002B9C CD 29 53         [ 4]  895     CALL DRAT 
      002B9F CD 28 68         [ 4]  896     CALL DROT 
      002BA2 CD 2B FE         [ 4]  897     CALL DSUB  ; corrected_remainder=divisor-remainder 
      002BA5 CD 27 CE         [ 4]  898     CALL DSWAP
      002BA8                        899 DSLA8:      
                                    900 ; check for divisor sign 
                                    901 ; if negative change negate remainder 
      002BA8 7B 06            [ 1]  902     LD A,(6,SP) ; divisor sign 
      002BAA 2A 09            [ 1]  903     JRPL DSLA9 
      002BAC CD 29 1D         [ 4]  904     CALL DTOR 
      002BAF CD 08 99         [ 4]  905     CALL DNEGA 
      002BB2 CD 29 3B         [ 4]  906     CALL DRFROM 
      002BB5                        907 DSLA9:
      002BB5 5B 06            [ 2]  908     ADDW SP,#6 
      002BB7 81               [ 4]  909     RET 
                                    910 
                                    911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    912 ;   D/  ( d1 d2 -- dq )
                                    913 ;   division double by double 
                                    914 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BB8                        915     _HEADER DSLASH,2,"D/"
      002BB8 2B 70                    1         .word LINK 
                           002BBA     2         LINK=.
      002BBA 02                       3         .byte 2  
      002BBB 44 2F                    4         .ascii "D/"
      002BBD                          5         DSLASH:
      002BBD CD 2B 76         [ 4]  916     CALL DDSLMOD
      002BC0 CD 27 CE         [ 4]  917     CALL DSWAP
      002BC3                        918     _DDROP 
      002BC3 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002BC6 81               [ 4]  919     RET 
                                    920 
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    922 ;   D+ ( d1 d2 -- d3 )
                                    923 ;   add 2 doubles 
                                    924 ;   d3=d1+d2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                    925 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BC7                        926     _HEADER DPLUS,2,"D+"
      002BC7 2B BA                    1         .word LINK 
                           002BC9     2         LINK=.
      002BC9 02                       3         .byte 2  
      002BCA 44 2B                    4         .ascii "D+"
      002BCC                          5         DPLUS:
      002BCC 90 93            [ 1]  927     LDW Y,X 
      002BCE 90 FE            [ 2]  928     LDW Y,(Y)
      002BD0 90 BF 26         [ 2]  929     LDW YTEMP,Y ; d2 hi 
      002BD3 90 93            [ 1]  930     LDW Y,X 
      002BD5 90 EE 02         [ 2]  931     LDW Y,(2,Y)
      002BD8 90 BF 24         [ 2]  932     LDW XTEMP,Y ; d2 lo 
      002BDB 1C 00 04         [ 2]  933     ADDW X,#4 
      002BDE 90 93            [ 1]  934     LDW Y,X 
      002BE0 90 EE 02         [ 2]  935     LDW Y,(2,Y) ; d1 lo
      002BE3 72 B9 00 24      [ 2]  936     ADDW Y,XTEMP
      002BE7 EF 02            [ 2]  937     LDW (2,X),Y 
      002BE9 90 93            [ 1]  938     LDW Y,X 
      002BEB 90 FE            [ 2]  939     LDW Y,(Y) ; d1 hi 
      002BED 24 04            [ 1]  940     JRNC DPLUS1 
      002BEF 72 A9 00 01      [ 2]  941     ADDW Y,#1 
      002BF3                        942 DPLUS1: 
      002BF3 72 B9 00 26      [ 2]  943     ADDW Y,YTEMP 
      002BF7 FF               [ 2]  944     LDW (X),Y 
      002BF8 81               [ 4]  945     RET 
                                    946 
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    948 ;   D- ( d1 d2 -- d3 )
                                    949 ;   d3=d1-d2 
                                    950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BF9                        951     _HEADER DSUB,2,"D-"
      002BF9 2B C9                    1         .word LINK 
                           002BFB     2         LINK=.
      002BFB 02                       3         .byte 2  
      002BFC 44 2D                    4         .ascii "D-"
      002BFE                          5         DSUB:
      002BFE 90 93            [ 1]  952     LDW Y,X 
      002C00 90 FE            [ 2]  953     LDW Y,(Y)
      002C02 90 BF 26         [ 2]  954     LDW YTEMP,Y ; d2 hi 
      002C05 90 93            [ 1]  955     LDW Y,X 
      002C07 90 EE 02         [ 2]  956     LDW Y,(2,Y)
      002C0A 90 BF 24         [ 2]  957     LDW XTEMP,Y ; d2 lo 
      002C0D 1C 00 04         [ 2]  958     ADDW X,#4 
      002C10 90 93            [ 1]  959     LDW Y,X 
      002C12 90 EE 02         [ 2]  960     LDW Y,(2,Y) ; d1 lo
      002C15 72 B2 00 24      [ 2]  961     SUBW Y,XTEMP
      002C19 EF 02            [ 2]  962     LDW (2,X),Y 
      002C1B 90 93            [ 1]  963     LDW Y,X 
      002C1D 90 FE            [ 2]  964     LDW Y,(Y) ; d1 hi 
      002C1F 24 04            [ 1]  965     JRNC DSUB1 
      002C21 72 A2 00 01      [ 2]  966     SUBW Y,#1 
      002C25                        967 DSUB1: 
      002C25 72 B2 00 26      [ 2]  968     SUBW Y,YTEMP 
      002C29 FF               [ 2]  969     LDW (X),Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      002C2A 81               [ 4]  970     RET 
                                    971 
                                    972 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   4651 .endif 
                           000001  4652 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   4653         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C2B                         56     _HEADER FVER,9,"FLOAT-VER"
      002C2B 2B FB                    1         .word LINK 
                           002C2D     2         LINK=.
      002C2D 09                       3         .byte 9  
      002C2E 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002C37                          5         FVER:
      002C37 CD 0F 8B         [ 4]   57     CALL CR 
      002C3A CD 0F B8         [ 4]   58     CALL DOTQP 
      002C3D 11                      59     .byte  17 
      002C3E 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002C4F CD 1B 55         [ 4]   61     CALL PRT_LICENCE 
      002C52 CD 1B 2D         [ 4]   62     CALL COPYRIGHT 
      002C55                         63     _DOLIT FLOAT_MAJOR     
      002C55 CD 04 70         [ 4]    1     CALL DOLIT 
      002C58 00 01                    2     .word FLOAT_MAJOR 
      002C5A                         64     _DOLIT FLOAT_MINOR 
      002C5A CD 04 70         [ 4]    1     CALL DOLIT 
      002C5D 00 00                    2     .word FLOAT_MINOR 
      002C5F CC 1B 69         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C62                         75     _HEADER FPSW,4,"FPSW"
      002C62 2C 2D                    1         .word LINK 
                           002C64     2         LINK=.
      002C64 04                       3         .byte 4  
      002C65 46 50 53 57              4         .ascii "FPSW"
      002C69                          5         FPSW:
      002C69 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C6D 1D 00 02         [ 2]   77 	SUBW X,#2
      002C70 FF               [ 2]   78     LDW (X),Y
      002C71 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C72                         85     _HEADER FRESET,6,"FRESET"
      002C72 2C 64                    1         .word LINK 
                           002C74     2         LINK=.
      002C74 06                       3         .byte 6  
      002C75 46 52 45 53 45 54        4         .ascii "FRESET"
      002C7B                          5         FRESET:
      002C7B CD 0C 04         [ 4]   86     CALL ZERO  
      002C7E CD 2C 69         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002C81 CD 04 D2         [ 4]   88     CALL STORE 
      002C84 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C85                         96     _HEADER FINIT,5,"FINIT"
      002C85 2C 74                    1         .word LINK 
                           002C87     2         LINK=.
      002C87 05                       3         .byte 5  
      002C88 46 49 4E 49 54           4         .ascii "FINIT"
      002C8D                          5         FINIT:
      002C8D CD 2C 7B         [ 4]   97     CALL FRESET 
      002C90 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C91                        104     _HEADER FER,3,"FER"
      002C91 2C 87                    1         .word LINK 
                           002C93     2         LINK=.
      002C93 03                       3         .byte 3  
      002C94 46 45 52                 4         .ascii "FER"
      002C97                          5         FER:
      002C97 CD 2C 69         [ 4]  105     CALL FPSW 
      002C9A CD 04 E4         [ 4]  106     CALL AT 
      002C9D 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C9E                        113     _HEADER FZE,3,"FZE"
      002C9E 2C 93                    1         .word LINK 
                           002CA0     2         LINK=.
      002CA0 03                       3         .byte 3  
      002CA1 46 5A 45                 4         .ascii "FZE"
      002CA4                          5         FZE:
      002CA4 CD 2C 69         [ 4]  114     CALL FPSW
      002CA7 CD 04 E4         [ 4]  115     CALL AT  
      002CAA CD 0C 0F         [ 4]  116     CALL ONE 
      002CAD CD 06 77         [ 4]  117     CALL ANDD
      002CB0 CD 08 87         [ 4]  118     CALL NEGAT  
      002CB3 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB4                        125     _HEADER FNE,3,"FNE"
      002CB4 2C A0                    1         .word LINK 
                           002CB6     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002CB6 03                       3         .byte 3  
      002CB7 46 4E 45                 4         .ascii "FNE"
      002CBA                          5         FNE:
      002CBA CD 2C 69         [ 4]  126     CALL FPSW 
      002CBD CD 04 E4         [ 4]  127     CALL AT 
      002CC0                        128     _DOLIT 2 
      002CC0 CD 04 70         [ 4]    1     CALL DOLIT 
      002CC3 00 02                    2     .word 2 
      002CC5 CD 06 77         [ 4]  129     CALL ANDD
      002CC8 CD 0B EA         [ 4]  130     CALL TWOSL
      002CCB CD 08 87         [ 4]  131     CALL NEGAT   
      002CCE 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CCF                        138     _HEADER FOV,3,"FOV"
      002CCF 2C B6                    1         .word LINK 
                           002CD1     2         LINK=.
      002CD1 03                       3         .byte 3  
      002CD2 46 4F 56                 4         .ascii "FOV"
      002CD5                          5         FOV:
      002CD5 CD 2C 69         [ 4]  139     CALL FPSW
      002CD8 CD 04 E4         [ 4]  140     CALL AT  
      002CDB                        141     _DOLIT 4 
      002CDB CD 04 70         [ 4]    1     CALL DOLIT 
      002CDE 00 04                    2     .word 4 
      002CE0 CD 06 77         [ 4]  142     CALL ANDD
      002CE3                        143     _DOLIT 2 
      002CE3 CD 04 70         [ 4]    1     CALL DOLIT 
      002CE6 00 02                    2     .word 2 
      002CE8 CD 0B D2         [ 4]  144     CALL RSHIFT 
      002CEB CD 08 87         [ 4]  145     CALL NEGAT  
      002CEE 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CEF                        152     _HEADER SFZ,3,"SFZ"
      002CEF 2C D1                    1         .word LINK 
                           002CF1     2         LINK=.
      002CF1 03                       3         .byte 3  
      002CF2 53 46 5A                 4         .ascii "SFZ"
      002CF5                          5         SFZ:
      002CF5 CD 2C 97         [ 4]  153     CALL FER 
      002CF8                        154     _DOLIT 0xfffe 
      002CF8 CD 04 70         [ 4]    1     CALL DOLIT 
      002CFB FF FE                    2     .word 0xfffe 
      002CFD CD 06 77         [ 4]  155     CALL ANDD 
      002D00 CD 05 E3         [ 4]  156     CALL TOR    
      002D03 CD 08 28         [ 4]  157     CALL DDUP 
      002D06                        158     _DOLIT 0xFF  
      002D06 CD 04 70         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002D09 00 FF                    2     .word 0xFF 
      002D0B CD 06 77         [ 4]  159     CALL ANDD
      002D0E CD 28 A3         [ 4]  160     CALL DZEQUAL 
      002D11                        161     _DOLIT 1 
      002D11 CD 04 70         [ 4]    1     CALL DOLIT 
      002D14 00 01                    2     .word 1 
      002D16 CD 06 77         [ 4]  162     CALL ANDD 
      002D19 CD 05 35         [ 4]  163     CALL RFROM 
      002D1C CD 06 8B         [ 4]  164     CALL ORR 
      002D1F CD 2C 69         [ 4]  165     CALL FPSW 
      002D22 CD 04 D2         [ 4]  166     CALL STORE 
      002D25 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D26                        174     _HEADER SFN,3,"SFN"
      002D26 2C F1                    1         .word LINK 
                           002D28     2         LINK=.
      002D28 03                       3         .byte 3  
      002D29 53 46 4E                 4         .ascii "SFN"
      002D2C                          5         SFN:
      002D2C CD 2C 97         [ 4]  175     CALL FER 
      002D2F                        176     _DOLIT 0xFFFD 
      002D2F CD 04 70         [ 4]    1     CALL DOLIT 
      002D32 FF FD                    2     .word 0xFFFD 
      002D34 CD 06 77         [ 4]  177     CALL ANDD  
      002D37 CD 05 E3         [ 4]  178     CALL TOR 
      002D3A CD 06 1A         [ 4]  179     CALL DUPP 
      002D3D                        180     _DOLIT 0X80 
      002D3D CD 04 70         [ 4]    1     CALL DOLIT 
      002D40 00 80                    2     .word 0X80 
      002D42 CD 06 77         [ 4]  181     CALL ANDD 
      002D45                        182     _DOLIT 6 
      002D45 CD 04 70         [ 4]    1     CALL DOLIT 
      002D48 00 06                    2     .word 6 
      002D4A CD 0B D2         [ 4]  183     CALL RSHIFT 
      002D4D CD 05 35         [ 4]  184     CALL RFROM 
      002D50 CD 06 8B         [ 4]  185     CALL ORR 
      002D53 CD 2C 69         [ 4]  186     CALL FPSW 
      002D56 CD 04 D2         [ 4]  187     CALL STORE 
      002D59 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D5A                        195     _HEADER SFV,3,"SFV"
      002D5A 2D 28                    1         .word LINK 
                           002D5C     2         LINK=.
      002D5C 03                       3         .byte 3  
      002D5D 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002D60                          5         SFV:
      002D60 CD 2C 97         [ 4]  196     CALL FER 
      002D63                        197     _DOLIT 4 
      002D63 CD 04 70         [ 4]    1     CALL DOLIT 
      002D66 00 04                    2     .word 4 
      002D68 CD 06 8B         [ 4]  198     CALL ORR 
      002D6B CD 2C 69         [ 4]  199     CALL FPSW 
      002D6E CD 04 D2         [ 4]  200     CALL STORE 
      002D71 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D72                        209     _HEADER ATEXP,4,"F>ME"             
      002D72 2D 5C                    1         .word LINK 
                           002D74     2         LINK=.
      002D74 04                       3         .byte 4  
      002D75 46 3E 4D 45              4         .ascii "F>ME"
      002D79                          5         ATEXP:
      002D79 CD 2C 7B         [ 4]  210     CALL FRESET
      002D7C CD 2D 2C         [ 4]  211     CALL SFN
      002D7F CD 2C F5         [ 4]  212     CALL SFZ 
      002D82 90 93            [ 1]  213     LDW Y,X 
      002D84 90 FE            [ 2]  214     LDW Y,(Y)
      002D86 90 89            [ 2]  215     PUSHW Y 
      002D88 4F               [ 1]  216     CLR A  
      002D89 90 5E            [ 1]  217     SWAPW Y 
      002D8B 2A 01            [ 1]  218     JRPL ATEXP1 
      002D8D 43               [ 1]  219     CPL A 
      002D8E                        220 ATEXP1: ; sign extend mantissa 
      002D8E 90 5E            [ 1]  221     SWAPW Y 
      002D90 90 95            [ 1]  222     LD YH,A 
      002D92 FF               [ 2]  223     LDW (X),Y 
      002D93 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002D96 90 85            [ 2]  225     POPW Y 
      002D98 4F               [ 1]  226     CLR A 
      002D99 90 5D            [ 2]  227     TNZW Y 
      002D9B 2A 01            [ 1]  228     JRPL ATEXP2 
      002D9D 43               [ 1]  229     CPL A 
      002D9E                        230 ATEXP2:
      002D9E 90 5E            [ 1]  231     SWAPW Y 
      002DA0 90 95            [ 1]  232     LD YH,A 
      002DA2 FF               [ 2]  233     LDW (X),Y 
      002DA3 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DA4                        241     _HEADER STEXP,4,"ME>F"
      002DA4 2D 74                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                           002DA6     2         LINK=.
      002DA6 04                       3         .byte 4  
      002DA7 4D 45 3E 46              4         .ascii "ME>F"
      002DAB                          5         STEXP:
      002DAB CD 06 1A         [ 4]  242     CALL DUPP 
      002DAE CD 08 ED         [ 4]  243     CALL ABSS 
      002DB1                        244     _DOLIT 127 
      002DB1 CD 04 70         [ 4]    1     CALL DOLIT 
      002DB4 00 7F                    2     .word 127 
      002DB6 CD 09 54         [ 4]  245     CALL GREAT
      002DB9                        246     _QBRAN STEXP1
      002DB9 CD 04 99         [ 4]    1     CALL QBRAN
      002DBC 2D C1                    2     .word STEXP1
      002DBE CD 2D 60         [ 4]  247     CALL SFV
      002DC1                        248 STEXP1:
      002DC1 90 93            [ 1]  249     LDW Y,X 
      002DC3 90 FE            [ 2]  250     LDW Y,(Y)
      002DC5 4F               [ 1]  251     CLR A 
      002DC6 90 95            [ 1]  252     LD YH,A
      002DC8 90 5E            [ 1]  253     SWAPW Y 
      002DCA 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002DCC 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002DCF CD 08 28         [ 4]  256     CALL DDUP 
      002DD2 CD 26 B5         [ 4]  257     CALL DABS
      002DD5 CD 06 2A         [ 4]  258     CALL SWAPP 
      002DD8                        259     _DROP  
      002DD8 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002DDB                        260     _DOLIT 127 
      002DDB CD 04 70         [ 4]    1     CALL DOLIT 
      002DDE 00 7F                    2     .word 127 
      002DE0 CD 09 54         [ 4]  261     CALL GREAT 
      002DE3                        262     _QBRAN STEXP2 
      002DE3 CD 04 99         [ 4]    1     CALL QBRAN
      002DE6 2D EB                    2     .word STEXP2
      002DE8 CD 2D 60         [ 4]  263     CALL SFV 
      002DEB                        264 STEXP2: 
      002DEB 4F               [ 1]  265     CLR A 
      002DEC F7               [ 1]  266     LD (X),A     
      002DED CD 05 35         [ 4]  267     CALL RFROM 
      002DF0 CD 06 8B         [ 4]  268     CALL ORR
      002DF3 CD 2C F5         [ 4]  269     CALL SFZ 
      002DF6 CD 2D 2C         [ 4]  270     CALL SFN 
      002DF9 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DFA                        279     _HEADER EDOT,2,"E."
      002DFA 2D A6                    1         .word LINK 
                           002DFC     2         LINK=.
      002DFC 02                       3         .byte 2  
      002DFD 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002DFF                          5         EDOT:
      002DFF CD 06 E0         [ 4]  280     CALL BASE 
      002E02 CD 04 E4         [ 4]  281     CALL AT 
      002E05 CD 05 E3         [ 4]  282     CALL TOR 
      002E08                        283     _DOLIT 10 
      002E08 CD 04 70         [ 4]    1     CALL DOLIT 
      002E0B 00 0A                    2     .word 10 
      002E0D CD 06 E0         [ 4]  284     CALL BASE 
      002E10 CD 04 D2         [ 4]  285     CALL STORE 
      002E13 CD 2D 79         [ 4]  286     CALL ATEXP ; m e 
      002E16                        287 EDOT0:
      002E16 CD 05 E3         [ 4]  288     CALL TOR   
      002E19 CD 26 B5         [ 4]  289     CALL DABS 
      002E1C CD 0F 48         [ 4]  290     CALL SPACE 
      002E1F CD 0E 0C         [ 4]  291     CALL BDIGS     
      002E22                        292 EDOT2: 
      002E22 CD 27 21         [ 4]  293     CALL DDIG
      002E25 CD 05 35         [ 4]  294     CALL RFROM 
      002E28 CD 0B 98         [ 4]  295     CALL ONEP 
      002E2B CD 05 E3         [ 4]  296     CALL TOR 
      002E2E CD 06 1A         [ 4]  297     CALL DUPP
      002E31                        298     _QBRAN EDOT3 
      002E31 CD 04 99         [ 4]    1     CALL QBRAN
      002E34 2E 38                    2     .word EDOT3
      002E36 20 EA            [ 2]  299     JRA EDOT2  
      002E38                        300 EDOT3:
      002E38 CD 06 42         [ 4]  301     CALL OVER 
      002E3B CD 06 E0         [ 4]  302     CALL BASE 
      002E3E CD 04 E4         [ 4]  303     CALL AT 
      002E41 CD 09 11         [ 4]  304     CALL ULESS 
      002E44                        305     _QBRAN EDOT2 
      002E44 CD 04 99         [ 4]    1     CALL QBRAN
      002E47 2E 22                    2     .word EDOT2
      002E49                        306     _DOLIT '.'
      002E49 CD 04 70         [ 4]    1     CALL DOLIT 
      002E4C 00 2E                    2     .word '.' 
      002E4E CD 0E 1C         [ 4]  307     CALL HOLD  
      002E51 CD 27 21         [ 4]  308     CALL DDIG
      002E54 CD 2C BA         [ 4]  309     CALL FNE 
      002E57                        310     _QBRAN EDOT4 
      002E57 CD 04 99         [ 4]    1     CALL QBRAN
      002E5A 2E 64                    2     .word EDOT4
      002E5C                        311     _DOLIT '-'
      002E5C CD 04 70         [ 4]    1     CALL DOLIT 
      002E5F 00 2D                    2     .word '-' 
      002E61 CD 0E 1C         [ 4]  312     CALL HOLD 
      002E64                        313 EDOT4:       
      002E64                        314     _DROP 
      002E64 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E67 CD 0E 71         [ 4]  315     CALL EDIGS 
      002E6A CD 0F 72         [ 4]  316     CALL TYPES
      002E6D CD 05 35         [ 4]  317     CALL RFROM 
      002E70 CD 07 CD         [ 4]  318     CALL QDUP 
      002E73                        319     _QBRAN EDOT5     
      002E73 CD 04 99         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002E76 2E 83                    2     .word EDOT5
      002E78                        320     _DOLIT 'E'
      002E78 CD 04 70         [ 4]    1     CALL DOLIT 
      002E7B 00 45                    2     .word 'E' 
      002E7D CD 04 37         [ 4]  321     CALL EMIT 
      002E80 CD 10 31         [ 4]  322     CALL DOT
      002E83                        323 EDOT5: 
      002E83 CD 05 35         [ 4]  324     CALL RFROM 
      002E86 CD 06 E0         [ 4]  325     CALL BASE 
      002E89 CD 04 D2         [ 4]  326     CALL STORE  
      002E8C 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002E8D                        334     _HEADER FDOT,2,"F."
      002E8D 2D FC                    1         .word LINK 
                           002E8F     2         LINK=.
      002E8F 02                       3         .byte 2  
      002E90 46 2E                    4         .ascii "F."
      002E92                          5         FDOT:
      002E92 CD 06 E0         [ 4]  335     CALL BASE 
      002E95 CD 04 E4         [ 4]  336     CALL AT 
      002E98 CD 05 E3         [ 4]  337     CALL TOR 
      002E9B                        338     _DOLIT 10 
      002E9B CD 04 70         [ 4]    1     CALL DOLIT 
      002E9E 00 0A                    2     .word 10 
      002EA0 CD 06 E0         [ 4]  339     CALL BASE 
      002EA3 CD 04 D2         [ 4]  340     CALL STORE 
      002EA6 CD 2D 79         [ 4]  341     CALL    ATEXP
      002EA9 CD 06 1A         [ 4]  342     CALL    DUPP  
      002EAC CD 08 ED         [ 4]  343     CALL    ABSS 
      002EAF                        344     _DOLIT  8
      002EAF CD 04 70         [ 4]    1     CALL DOLIT 
      002EB2 00 08                    2     .word 8 
      002EB4 CD 09 54         [ 4]  345     CALL    GREAT 
      002EB7                        346     _QBRAN  FDOT1 
      002EB7 CD 04 99         [ 4]    1     CALL QBRAN
      002EBA 2E BF                    2     .word FDOT1
      002EBC CC 2E 16         [ 2]  347     JP      EDOT0 
      002EBF                        348 FDOT1:
      002EBF CD 0F 48         [ 4]  349     CALL    SPACE 
      002EC2 CD 05 E3         [ 4]  350     CALL    TOR 
      002EC5 CD 2C BA         [ 4]  351     CALL    FNE 
      002EC8                        352     _QBRAN  FDOT0 
      002EC8 CD 04 99         [ 4]    1     CALL QBRAN
      002ECB 2E D0                    2     .word FDOT0
      002ECD CD 08 99         [ 4]  353     CALL    DNEGA 
      002ED0                        354 FDOT0: 
      002ED0 CD 0E 0C         [ 4]  355     CALL    BDIGS
      002ED3 CD 05 46         [ 4]  356     CALL    RAT  
      002ED6 CD 06 51         [ 4]  357     CALL    ZLESS 
      002ED9                        358     _QBRAN  FDOT6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002ED9 CD 04 99         [ 4]    1     CALL QBRAN
      002EDC 2F 01                    2     .word FDOT6
      002EDE                        359 FDOT2: ; e<0 
      002EDE CD 27 21         [ 4]  360     CALL    DDIG 
      002EE1 CD 05 35         [ 4]  361     CALL    RFROM
      002EE4 CD 0B 98         [ 4]  362     CALL    ONEP 
      002EE7 CD 07 CD         [ 4]  363     CALL    QDUP 
      002EEA                        364     _QBRAN  FDOT3 
      002EEA CD 04 99         [ 4]    1     CALL QBRAN
      002EED 2E F4                    2     .word FDOT3
      002EEF CD 05 E3         [ 4]  365     CALL    TOR 
      002EF2 20 EA            [ 2]  366     JRA   FDOT2 
      002EF4                        367 FDOT3:
      002EF4                        368     _DOLIT  '.' 
      002EF4 CD 04 70         [ 4]    1     CALL DOLIT 
      002EF7 00 2E                    2     .word '.' 
      002EF9 CD 0E 1C         [ 4]  369     CALL    HOLD 
      002EFC CD 27 39         [ 4]  370     CALL    DDIGS
      002EFF 20 12            [ 2]  371     JRA   FDOT9  
      002F01                        372 FDOT6: ; e>=0 
      002F01 20 08            [ 2]  373     JRA   FDOT8
      002F03                        374 FDOT7:     
      002F03                        375     _DOLIT  '0'
      002F03 CD 04 70         [ 4]    1     CALL DOLIT 
      002F06 00 30                    2     .word '0' 
      002F08 CD 0E 1C         [ 4]  376     CALL    HOLD 
      002F0B                        377 FDOT8:
      002F0B CD 04 84         [ 4]  378     CALL    DONXT 
      002F0E 2F 03                  379     .word   FDOT7
      002F10 CD 27 39         [ 4]  380     CALL    DDIGS 
      002F13                        381 FDOT9:
      002F13 CD 2C BA         [ 4]  382     CALL    FNE 
      002F16                        383     _QBRAN  FDOT10 
      002F16 CD 04 99         [ 4]    1     CALL QBRAN
      002F19 2F 23                    2     .word FDOT10
      002F1B                        384     _DOLIT '-' 
      002F1B CD 04 70         [ 4]    1     CALL DOLIT 
      002F1E 00 2D                    2     .word '-' 
      002F20 CD 0E 1C         [ 4]  385     CALL   HOLD 
      002F23                        386 FDOT10:
      002F23 CD 0E 71         [ 4]  387     CALL    EDIGS 
      002F26 CD 0F 72         [ 4]  388     CALL    TYPES 
      002F29 CD 05 35         [ 4]  389     CALL    RFROM 
      002F2C CD 06 E0         [ 4]  390     CALL    BASE 
      002F2F CD 04 D2         [ 4]  391     CALL    STORE 
      002F32 81               [ 4]  392     RET 
                                    393 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F33                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002F33 CD 05 E3         [ 4]  400     CALL TOR   ; R: cntr 
      002F36 CD 06 1A         [ 4]  401     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002F39 CD 05 02         [ 4]  402     CALL CAT 
      002F3C                        403     _DOLIT 'E' 
      002F3C CD 04 70         [ 4]    1     CALL DOLIT 
      002F3F 00 45                    2     .word 'E' 
      002F41 CD 08 FB         [ 4]  404     CALL EQUAL 
      002F44                        405     _QBRAN 1$
      002F44 CD 04 99         [ 4]    1     CALL QBRAN
      002F47 2F 74                    2     .word 1$
      002F49 CD 0B 98         [ 4]  406     CALL ONEP 
      002F4C CD 05 35         [ 4]  407     CALL RFROM  ; a cntr 
      002F4F CD 0B A5         [ 4]  408     CALL ONEM
      002F52 CD 06 1A         [ 4]  409     CALL DUPP 
      002F55                        410     _QBRAN 2$ ; a cntr 
      002F55 CD 04 99         [ 4]    1     CALL QBRAN
      002F58 2F 77                    2     .word 2$
      002F5A CD 0C 04         [ 4]  411     CALL ZERO
      002F5D CD 06 1A         [ 4]  412     CALL DUPP 
      002F60 CD 27 CE         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F63 CD 25 5D         [ 4]  414     CALL nsign 
      002F66 CD 05 E3         [ 4]  415     CALL TOR   ; R: esign  
      002F69 CD 25 8A         [ 4]  416     CALL parse_digits
      002F6C                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F6C CD 04 99         [ 4]    1     CALL QBRAN
      002F6F 2F 7E                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F71                        419     _DDROP ; 0 a 
      002F71 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F74                        420 1$: 
      002F74 CD 05 35         [ 4]  421     CALL RFROM ; sign||cntr  
      002F77                        422 2$:
      002F77                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F77 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F7A CD 0C 04         [ 4]  424     CALL ZERO   ; return only 0 
      002F7D 81               [ 4]  425     RET 
      002F7E                        426 PARSEXP_SUCCESS: 
      002F7E                        427     _DDROP ; drop dhi a 
      002F7E 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F81 CD 05 35         [ 4]  428     CALL RFROM ; es 
      002F84                        429     _QBRAN 1$
      002F84 CD 04 99         [ 4]    1     CALL QBRAN
      002F87 2F 8C                    2     .word 1$
      002F89 CD 08 87         [ 4]  430     CALL NEGAT
      002F8C                        431 1$:
      002F8C                        432     _DOLIT -1 ; -- e -1 
      002F8C CD 04 70         [ 4]    1     CALL DOLIT 
      002F8F FF FF                    2     .word -1 
      002F91 81               [ 4]  433     RET 
                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F92                        441     _HEADER FLOATQ,5,"FLOAT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      002F92 2E 8F                    1         .word LINK 
                           002F94     2         LINK=.
      002F94 05                       3         .byte 5  
      002F95 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002F9B                          5         FLOATQ:
      002F9B                        442     _QBRAN FLOATQ0 
      002F9B CD 04 99         [ 4]    1     CALL QBRAN
      002F9E 2F A3                    2     .word FLOATQ0
      002FA0 CC 30 42         [ 2]  443     JP FLOAT_ERROR  ; not a float, string start with '#'
      002FA3                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002FA3 CD 06 E0         [ 4]  446     CALL BASE 
      002FA6 CD 04 E4         [ 4]  447     CALL AT 
      002FA9                        448     _DOLIT 10 
      002FA9 CD 04 70         [ 4]    1     CALL DOLIT 
      002FAC 00 0A                    2     .word 10 
      002FAE CD 08 FB         [ 4]  449     CALL EQUAL 
      002FB1                        450     _QBRAN FLOAT_ERROR 
      002FB1 CD 04 99         [ 4]    1     CALL QBRAN
      002FB4 30 42                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002FB6 CD 05 E3         [ 4]  452     CALL TOR ; R: sign  
      002FB9 CD 05 E3         [ 4]  453     CALL TOR ; R: sign cntr 
      002FBC CD 06 1A         [ 4]  454     CALL DUPP
      002FBF CD 05 02         [ 4]  455     CALL CAT 
      002FC2                        456     _DOLIT '.' 
      002FC2 CD 04 70         [ 4]    1     CALL DOLIT 
      002FC5 00 2E                    2     .word '.' 
      002FC7 CD 08 FB         [ 4]  457     CALL EQUAL 
      002FCA                        458     _QBRAN FLOATQ1 ; not a dot 
      002FCA CD 04 99         [ 4]    1     CALL QBRAN
      002FCD 30 02                    2     .word FLOATQ1
      002FCF CD 0B 98         [ 4]  459     CALL ONEP 
      002FD2 CD 05 35         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002FD5 CD 0B A5         [ 4]  461     CALL ONEM 
      002FD8 CD 06 1A         [ 4]  462     CALL DUPP 
      002FDB CD 05 E3         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002FDE CD 25 8A         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002FE1 CD 06 1A         [ 4]  466     CALL DUPP 
      002FE4 CD 05 35         [ 4]  467     CALL RFROM 
      002FE7 CD 06 2A         [ 4]  468     CALL SWAPP 
      002FEA CD 08 D3         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      002FED CD 05 E3         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      002FF0 CD 06 1A         [ 4]  471     CALL DUPP ; cntr cntr  
      002FF3                        472     _QBRAN 1$ ; end of string, no exponent
      002FF3 CD 04 99         [ 4]    1     CALL QBRAN
      002FF6 2F FA                    2     .word 1$
      002FF8 20 11            [ 2]  473     JRA FLOATQ2
      002FFA CD 06 2A         [ 4]  474 1$: CALL SWAPP 
      002FFD                        475     _DROP ; a
      002FFD 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003000 20 11            [ 2]  476     JRA FLOATQ3        
      003002                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      003002 CD 05 35         [ 4]  478     CALL RFROM ; cntr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003005 CD 0C 04         [ 4]  479     CALL ZERO  ; fd 
      003008 CD 05 E3         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      00300B                        481 FLOATQ2: 
      00300B CD 2F 33         [ 4]  482     CALL parse_exponent 
      00300E                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      00300E CD 04 99         [ 4]    1     CALL QBRAN
      003011 30 3F                    2     .word FLOAT_ERROR0
      003013                        484 FLOATQ3: ; dm 0 || dm e  
      003013 CD 05 35         [ 4]  485     CALL RFROM ;  fd  
      003016 CD 08 D3         [ 4]  486     CALL SUBB  ; exp=e-fd 
      003019 CD 07 FD         [ 4]  487     CALL NROT 
      00301C CD 05 35         [ 4]  488     CALL RFROM  ; sign 
      00301F                        489     _QBRAN FLOATQ4 
      00301F CD 04 99         [ 4]    1     CALL QBRAN
      003022 30 27                    2     .word FLOATQ4
      003024 CD 08 99         [ 4]  490     CALL DNEGA 
      003027                        491 FLOATQ4:
      003027 CD 07 DE         [ 4]  492     CALL ROT 
      00302A CD 2D AB         [ 4]  493     CALL STEXP 
      00302D CD 07 DE         [ 4]  494     CALL ROT 
      003030                        495     _DROP 
      003030 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003033 CD 2D 2C         [ 4]  496     CALL SFN 
      003036 CD 2C F5         [ 4]  497     CALL SFZ 
      003039                        498     _DOLIT -3 
      003039 CD 04 70         [ 4]    1     CALL DOLIT 
      00303C FF FD                    2     .word -3 
      00303E 81               [ 4]  499     RET       
      00303F                        500 FLOAT_ERROR0: 
      00303F CD 29 3B         [ 4]  501     CALL DRFROM ; sign df      
      003042                        502 FLOAT_ERROR: 
      003042 CD 0C 46         [ 4]  503     CALL DEPTH 
      003045 CD 0B 8B         [ 4]  504     CALL CELLS 
      003048 CD 05 FA         [ 4]  505     CALL SPAT 
      00304B CD 06 2A         [ 4]  506     CALL SWAPP 
      00304E CD 08 3D         [ 4]  507     CALL PLUS  
      003051 CD 06 07         [ 4]  508     CALL SPSTO 
      003054 CD 0C 04         [ 4]  509     CALL ZERO 
      003057 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003058                        516     _HEADER LSCALE,6,"LSCALE"
      003058 2F 94                    1         .word LINK 
                           00305A     2         LINK=.
      00305A 06                       3         .byte 6  
      00305B 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      003061                          5         LSCALE:
      003061 CD 2D 79         [ 4]  517     CALL ATEXP 
      003064 CD 0C 0F         [ 4]  518     CALL ONE 
      003067 CD 08 D3         [ 4]  519     CALL SUBB 
      00306A CD 05 E3         [ 4]  520     CALL TOR
      00306D                        521     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00306D CD 04 70         [ 4]    1     CALL DOLIT 
      003070 00 0A                    2     .word 10 
      003072 CD 27 A8         [ 4]  522     CALL DSSTAR
      003075 CD 05 35         [ 4]  523     CALL RFROM 
      003078 CD 2D AB         [ 4]  524     CALL STEXP 
      00307B 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00307C                        531     _HEADER RSCALE,6,"RSCALE"
      00307C 30 5A                    1         .word LINK 
                           00307E     2         LINK=.
      00307E 06                       3         .byte 6  
      00307F 52 53 43 41 4C 45        4         .ascii "RSCALE"
      003085                          5         RSCALE:
      003085 CD 2D 79         [ 4]  532     CALL ATEXP 
      003088 CD 0C 0F         [ 4]  533     CALL ONE 
      00308B CD 08 3D         [ 4]  534     CALL PLUS 
      00308E CD 05 E3         [ 4]  535     CALL TOR 
      003091                        536     _DOLIT 10 
      003091 CD 04 70         [ 4]    1     CALL DOLIT 
      003094 00 0A                    2     .word 10 
      003096 CD 26 E0         [ 4]  537     CALL DSLMOD 
      003099 CD 07 DE         [ 4]  538     CALL ROT 
      00309C                        539     _DROP 
      00309C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00309F CD 05 35         [ 4]  540     CALL RFROM 
      0030A2 CD 2D AB         [ 4]  541     CALL STEXP 
      0030A5 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030A6                        551 SCALEUP:
      0030A6 CD 08 28         [ 4]  552     CALL DDUP
      0030A9 CD 09 27         [ 4]  553     CALL LESS  
      0030AC                        554     _QBRAN SCALEUP3
      0030AC CD 04 99         [ 4]    1     CALL QBRAN
      0030AF 30 DC                    2     .word SCALEUP3
      0030B1 CD 29 1D         [ 4]  555     CALL DTOR   ; R: u1 u2  
      0030B4 CD 08 28         [ 4]  556     CALL DDUP 
      0030B7                        557     _DOLIT 0XCCCC 
      0030B7 CD 04 70         [ 4]    1     CALL DOLIT 
      0030BA CC CC                    2     .word 0XCCCC 
      0030BC                        558     _DOLIT 0XCCC 
      0030BC CD 04 70         [ 4]    1     CALL DOLIT 
      0030BF 0C CC                    2     .word 0XCCC 
      0030C1 CD 28 E0         [ 4]  559     CALL DGREAT  
      0030C4                        560     _TBRAN SCALEUP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0030C4 CD 04 A7         [ 4]    1     CALL TBRAN 
      0030C7 30 D9                    2     .word SCALEUP2 
      0030C9                        561     _DOLIT 10 
      0030C9 CD 04 70         [ 4]    1     CALL DOLIT 
      0030CC 00 0A                    2     .word 10 
      0030CE CD 27 87         [ 4]  562     CALL UDSSTAR 
      0030D1 CD 29 3B         [ 4]  563     CALL DRFROM 
      0030D4 CD 0B A5         [ 4]  564     CALL ONEM
      0030D7 20 CD            [ 2]  565     JRA SCALEUP
      0030D9                        566 SCALEUP2:
      0030D9 CD 29 3B         [ 4]  567     CALL DRFROM
      0030DC                        568 SCALEUP3: 
      0030DC 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030DD                        578 SCALEDOWN: 
      0030DD CD 08 28         [ 4]  579     CALL DDUP 
      0030E0 CD 09 54         [ 4]  580     CALL GREAT 
      0030E3                        581     _QBRAN SCALDN3 
      0030E3 CD 04 99         [ 4]    1     CALL QBRAN
      0030E6 31 0C                    2     .word SCALDN3
      0030E8 CD 29 1D         [ 4]  582     CALL DTOR 
      0030EB CD 08 28         [ 4]  583     CALL DDUP 
      0030EE CD 28 A3         [ 4]  584     CALL DZEQUAL 
      0030F1                        585     _TBRAN SCALDN2  
      0030F1 CD 04 A7         [ 4]    1     CALL TBRAN 
      0030F4 31 09                    2     .word SCALDN2 
      0030F6                        586     _DOLIT 10
      0030F6 CD 04 70         [ 4]    1     CALL DOLIT 
      0030F9 00 0A                    2     .word 10 
      0030FB CD 0C 04         [ 4]  587     CALL ZERO  
      0030FE CD 2B BD         [ 4]  588     CALL DSLASH 
      003101 CD 29 3B         [ 4]  589     CALL DRFROM 
      003104 CD 0B 98         [ 4]  590     CALL ONEP  
      003107 20 D4            [ 2]  591     JRA SCALEDOWN 
      003109                        592 SCALDN2:
      003109 CD 29 3B         [ 4]  593     CALL DRFROM 
      00310C                        594 SCALDN3:
      00310C 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00310D                        602     _HEADER FALIGN,7,"F-ALIGN"
      00310D 30 7E                    1         .word LINK 
                           00310F     2         LINK=.
      00310F 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003110 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      003117                          5         FALIGN:
      003117 CD 2D 79         [ 4]  603     CALL ATEXP 
      00311A CD 05 E3         [ 4]  604     CALL TOR 
      00311D CD 27 CE         [ 4]  605     CALL DSWAP 
      003120 CD 2D 79         [ 4]  606     CALL ATEXP 
      003123 CD 05 E3         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      003126 CD 27 CE         [ 4]  608     CALL DSWAP 
      003129 CD 29 53         [ 4]  609     CALL DRAT 
      00312C CD 08 FB         [ 4]  610     CALL EQUAL 
      00312F                        611     _TBRAN FALGN8
      00312F CD 04 A7         [ 4]    1     CALL TBRAN 
      003132 31 B4                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      003134 CD 29 53         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      003137 CD 09 54         [ 4]  616     CALL GREAT 
      00313A                        617     _QBRAN FALGN4 ; e2<e1 
      00313A CD 04 99         [ 4]    1     CALL QBRAN
      00313D 31 50                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      00313F CD 29 3B         [ 4]  619     CALL DRFROM 
      003142 CD 06 2A         [ 4]  620     CALL SWAPP 
      003145 CD 30 A6         [ 4]  621     CALL SCALEUP 
      003148 CD 06 2A         [ 4]  622     CALL SWAPP 
      00314B CD 29 1D         [ 4]  623     CALL DTOR 
      00314E 20 0F            [ 2]  624     JRA FALGN6
      003150                        625 FALGN4: ; e2<e1 then scaleup m1 
      003150 CD 27 CE         [ 4]  626     CALL DSWAP 
      003153 CD 29 3B         [ 4]  627     CALL DRFROM 
      003156 CD 30 A6         [ 4]  628     CALL SCALEUP 
      003159 CD 29 1D         [ 4]  629     CALL DTOR
      00315C CD 27 CE         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      00315F                        635 FALGN6: 
      00315F CD 29 53         [ 4]  636     CALL DRAT 
      003162 CD 08 FB         [ 4]  637     CALL EQUAL 
      003165                        638     _TBRAN FALGN8 
      003165 CD 04 A7         [ 4]    1     CALL TBRAN 
      003168 31 B4                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      00316A CD 29 53         [ 4]  640     CALL DRAT 
      00316D CD 09 54         [ 4]  641     CALL GREAT 
      003170                        642     _QBRAN FALGN7 ; e2<e1 
      003170 CD 04 99         [ 4]    1     CALL QBRAN
      003173 31 86                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      003175 CD 27 CE         [ 4]  644     CALL DSWAP 
      003178 CD 29 3B         [ 4]  645     CALL DRFROM 
      00317B CD 30 DD         [ 4]  646     CALL SCALEDOWN
      00317E CD 06 2A         [ 4]  647     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      003181 CD 29 1D         [ 4]  648     CALL DTOR 
      003184 20 0F            [ 2]  649     JRA FALGN71  
      003186                        650 FALGN7: ; e2<e1 scaledown m2 
      003186 CD 29 3B         [ 4]  651     CALL DRFROM 
      003189 CD 06 2A         [ 4]  652     CALL SWAPP 
      00318C CD 30 DD         [ 4]  653     CALL SCALEDOWN 
      00318F CD 06 2A         [ 4]  654     CALL SWAPP 
      003192 CD 29 1D         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      003195                        660 FALGN71:
      003195 CD 29 53         [ 4]  661     CALL DRAT 
      003198 CD 08 FB         [ 4]  662     CALL EQUAL
      00319B                        663     _TBRAN FALGN8 
      00319B CD 04 A7         [ 4]    1     CALL TBRAN 
      00319E 31 B4                    2     .word FALGN8 
      0031A0 CD 29 3B         [ 4]  664     CALL DRFROM 
      0031A3 CD 08 28         [ 4]  665     CALL DDUP 
      0031A6 CD 09 54         [ 4]  666     CALL GREAT 
      0031A9                        667     _TBRAN FALGN72
      0031A9 CD 04 A7         [ 4]    1     CALL TBRAN 
      0031AC 31 B1                    2     .word FALGN72 
      0031AE CD 06 2A         [ 4]  668     CALL SWAPP     
      0031B1                        669 FALGN72:
      0031B1 CD 29 1D         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      0031B4                        671 FALGN8:
      0031B4 CD 29 3B         [ 4]  672     CALL DRFROM 
      0031B7                        673     _DROP 
      0031B7 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0031BA 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031BB                        680     _HEADER FPLUS,2,"F+"
      0031BB 31 0F                    1         .word LINK 
                           0031BD     2         LINK=.
      0031BD 02                       3         .byte 2  
      0031BE 46 2B                    4         .ascii "F+"
      0031C0                          5         FPLUS:
      0031C0 CD 31 17         [ 4]  681     CALL FALIGN 
      0031C3 CD 05 E3         [ 4]  682     CALL TOR 
      0031C6 CD 2B CC         [ 4]  683     CALL DPLUS
      0031C9 CD 26 C6         [ 4]  684     CALL DSIGN 
      0031CC CD 05 E3         [ 4]  685     CALL TOR 
      0031CF CD 26 B5         [ 4]  686     CALL DABS 
      0031D2 CD 32 35         [ 4]  687     CALL SCALETOM
      0031D5 CD 05 35         [ 4]  688     CALL RFROM 
      0031D8                        689     _QBRAN FPLUS1 
      0031D8 CD 04 99         [ 4]    1     CALL QBRAN
      0031DB 31 E0                    2     .word FPLUS1
      0031DD CD 08 99         [ 4]  690     CALL DNEGA  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0031E0                        691 FPLUS1: 
      0031E0 CD 07 DE         [ 4]  692     CALL ROT   
      0031E3 CD 05 35         [ 4]  693     CALL RFROM
      0031E6 CD 08 3D         [ 4]  694     CALL PLUS  
      0031E9 CD 2D AB         [ 4]  695     CALL STEXP 
      0031EC 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031ED                        702     _HEADER FSUB,2,"F-"
      0031ED 31 BD                    1         .word LINK 
                           0031EF     2         LINK=.
      0031EF 02                       3         .byte 2  
      0031F0 46 2D                    4         .ascii "F-"
      0031F2                          5         FSUB:
      0031F2 CD 31 17         [ 4]  703     CALL FALIGN 
      0031F5 CD 05 E3         [ 4]  704     CALL TOR 
      0031F8 CD 2B FE         [ 4]  705     CALL DSUB
      0031FB CD 26 C6         [ 4]  706     CALL DSIGN 
      0031FE CD 05 E3         [ 4]  707     CALL TOR 
      003201 CD 26 B5         [ 4]  708     CALL DABS 
      003204 CD 32 35         [ 4]  709     CALL SCALETOM 
      003207 CD 05 35         [ 4]  710     CALL RFROM 
      00320A                        711     _QBRAN FSUB1 
      00320A CD 04 99         [ 4]    1     CALL QBRAN
      00320D 32 12                    2     .word FSUB1
      00320F CD 08 99         [ 4]  712     CALL DNEGA 
      003212                        713 FSUB1:
      003212 CD 07 DE         [ 4]  714     CALL ROT 
      003215 CD 05 35         [ 4]  715     CALL RFROM
      003218 CD 08 3D         [ 4]  716     CALL PLUS  
      00321B CD 2D AB         [ 4]  717     CALL STEXP 
      00321E 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00321F                        725 UMOD10:
      00321F                        726     _DOLIT 10 
      00321F CD 04 70         [ 4]    1     CALL DOLIT 
      003222 00 0A                    2     .word 10 
      003224 CD 26 E0         [ 4]  727     CALL DSLMOD
      003227 CD 07 DE         [ 4]  728     CALL ROT  
      00322A 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00322B                        739     _HEADER SCALETOM,7,"SCALE>M"
      00322B 31 EF                    1         .word LINK 
                           00322D     2         LINK=.
      00322D 07                       3         .byte 7  
      00322E 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      003235                          5         SCALETOM:
      003235 CD 0C 04         [ 4]  740     CALL ZERO 
      003238 CD 07 FD         [ 4]  741     CALL NROT 
      00323B                        742 SCAL1:
      00323B CD 06 1A         [ 4]  743     CALL DUPP 
      00323E                        744     _DOLIT 0X7F 
      00323E CD 04 70         [ 4]    1     CALL DOLIT 
      003241 00 7F                    2     .word 0X7F 
      003243 CD 09 3E         [ 4]  745     CALL UGREAT 
      003246                        746     _QBRAN SCAL2  
      003246 CD 04 99         [ 4]    1     CALL QBRAN
      003249 32 5C                    2     .word SCAL2
      00324B CD 32 1F         [ 4]  747     CALL UMOD10 
      00324E                        748     _DROP 
      00324E 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003251 CD 07 DE         [ 4]  749     CALL ROT 
      003254 CD 0B 98         [ 4]  750     CALL ONEP 
      003257 CD 07 FD         [ 4]  751     CALL NROT  
      00325A 20 DF            [ 2]  752     JRA SCAL1 
      00325C                        753 SCAL2: 
      00325C 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00325D                        761 UDIV10:
      00325D 90 93            [ 1]  762     LDW Y,X 
      00325F 90 FE            [ 2]  763     LDW Y,(Y)
      003261 A6 0A            [ 1]  764     LD A,#10 
      003263 90 62            [ 2]  765     DIV Y,A 
      003265 FF               [ 2]  766     LDW (X),Y 
      003266 90 95            [ 1]  767     LD YH,A 
      003268 E6 02            [ 1]  768     LD A,(2,X)
      00326A 90 97            [ 1]  769     LD YL,A 
      00326C A6 0A            [ 1]  770     LD A,#10 
      00326E 90 62            [ 2]  771     DIV Y,A 
      003270 90 95            [ 1]  772     LD YH,A 
      003272 90 9F            [ 1]  773     LD A,YL 
      003274 E7 02            [ 1]  774     LD (2,X),A 
      003276 E6 03            [ 1]  775     LD A,(3,X)
      003278 90 97            [ 1]  776     LD YL,A 
      00327A A6 0A            [ 1]  777     LD A,#10 
      00327C 90 62            [ 2]  778     DIV Y,A 
      00327E 90 95            [ 1]  779     LD YH,A 
      003280 90 9F            [ 1]  780     LD A,YL 
      003282 E7 03            [ 1]  781     LD (3,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      003284 E6 04            [ 1]  782     LD A,(4,X)
      003286 90 97            [ 1]  783     LD YL,A 
      003288 A6 0A            [ 1]  784     LD A,#10 
      00328A 90 62            [ 2]  785     DIV Y,A 
      00328C 90 95            [ 1]  786     LD YH,A 
      00328E 90 9F            [ 1]  787     LD A,YL 
      003290 E7 04            [ 1]  788     LD (4,X),A 
      003292 E6 05            [ 1]  789     LD A,(5,X)
      003294 90 97            [ 1]  790     LD YL,A 
      003296 A6 0A            [ 1]  791     LD A,#10 
      003298 90 62            [ 2]  792     DIV Y,A 
      00329A 90 9F            [ 1]  793     LD A,YL 
      00329C E7 05            [ 1]  794     LD (5,X),A 
      00329E 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00329F                        806     _HEADER MMSTAR,3,"MM*"
      00329F 32 2D                    1         .word LINK 
                           0032A1     2         LINK=.
      0032A1 03                       3         .byte 3  
      0032A2 4D 4D 2A                 4         .ascii "MM*"
      0032A5                          5         MMSTAR:
      0032A5 CD 08 28         [ 4]  807     CALL DDUP
      0032A8 CD 28 A3         [ 4]  808     CALL DZEQUAL
      0032AB                        809     _TBRAN MMSTA2
      0032AB CD 04 A7         [ 4]    1     CALL TBRAN 
      0032AE 32 BB                    2     .word MMSTA2 
      0032B0                        810 MMSTA1:
      0032B0 CD 29 E3         [ 4]  811     CALL DOVER 
      0032B3 CD 28 A3         [ 4]  812     CALL DZEQUAL 
      0032B6                        813     _QBRAN MMSTA3 
      0032B6 CD 04 99         [ 4]    1     CALL QBRAN
      0032B9 32 C6                    2     .word MMSTA3
      0032BB                        814 MMSTA2: ; ( -- 0 0 0 )
      0032BB 1C 00 02         [ 2]  815     ADDW X,#2 
      0032BE 90 5F            [ 1]  816     CLRW Y 
      0032C0 FF               [ 2]  817     LDW (X),Y 
      0032C1 EF 02            [ 2]  818     LDW (2,X),Y
      0032C3 EF 04            [ 2]  819     LDW (4,X),Y 
      0032C5 81               [ 4]  820     RET 
      0032C6                        821 MMSTA3:
      0032C6 CD 26 C6         [ 4]  822     CALL DSIGN 
      0032C9 CD 05 E3         [ 4]  823     CALL TOR    ; R: m2sign 
      0032CC CD 26 B5         [ 4]  824     CALL DABS   ; m1 um2 
      0032CF CD 27 CE         [ 4]  825     CALL DSWAP  ; um2 m1 
      0032D2 CD 26 C6         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      0032D5 CD 05 35         [ 4]  827     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0032D8 CD 06 A0         [ 4]  828     CALL XORR 
      0032DB CD 05 E3         [ 4]  829     CALL TOR   ; R: product_sign 
      0032DE CD 26 B5         [ 4]  830     CALL DABS  ; um2 um1  
      0032E1 CD 29 1D         [ 4]  831     CALL DTOR  ; um2 
      0032E4 CD 06 1A         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032E7 CD 05 46         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      0032EA CD 0B 17         [ 4]  836     CALL STAR 
      0032ED CD 0C 04         [ 4]  837     CALL ZERO 
      0032F0 CD 06 2A         [ 4]  838     CALL SWAPP ; pd1<<16  
      0032F3 CD 27 CE         [ 4]  839     CALL DSWAP ; pd1 um2 
      0032F6 CD 06 42         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      0032F9 CD 05 35         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      0032FC CD 0A CD         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      0032FF CD 27 CE         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      003302 CD 05 46         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      003305 CD 0A CD         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003308 CD 07 DE         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      00330B CD 05 E3         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      00330E CD 2B CC         [ 4]  851     CALL DPLUS 
      003311 CD 2B CC         [ 4]  852     CALL DPLUS  
      003314 CD 29 3B         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      003317 CD 0A CD         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      00331A CD 29 1D         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      00331D 90 93            [ 1]  859     LDW Y,X 
      00331F 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      003322 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      003325 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      003327 90 93            [ 1]  863     LDW Y,X
      003329 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      00332B 24 04            [ 1]  865     JRNC MMSTA4
      00332D 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
      003331                        867 MMSTA4:     
      003331 1D 00 02         [ 2]  868     SUBW X,#2 
      003334 FF               [ 2]  869     LDW (X),Y 
      003335 90 85            [ 2]  870     POPW Y 
      003337 EF 02            [ 2]  871     LDW (2,X),Y 
      003339 90 85            [ 2]  872     POPW Y 
      00333B EF 04            [ 2]  873     LDW (4,X),Y
      00333D CD 0C 04         [ 4]  874     CALL ZERO 
      003340 CD 05 E3         [ 4]  875     CALL TOR 
      003343                        876 MMSTA5:
      003343 CD 07 CD         [ 4]  877     CALL QDUP 
      003346                        878     _QBRAN MMSTA6 
      003346 CD 04 99         [ 4]    1     CALL QBRAN
      003349 33 59                    2     .word MMSTA6
      00334B CD 32 5D         [ 4]  879     CALL UDIV10 
      00334E CD 05 35         [ 4]  880     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      003351 CD 0B 98         [ 4]  881     CALL ONEP 
      003354 CD 05 E3         [ 4]  882     CALL TOR 
      003357 20 EA            [ 2]  883     JRA MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      003359                        886 MMSTA6: 
      003359 CD 05 35         [ 4]  887     CALL RFROM 
      00335C CD 07 FD         [ 4]  888     CALL NROT 
      00335F CD 32 35         [ 4]  889     CALL SCALETOM
      003362 CD 29 1D         [ 4]  890     CALL DTOR 
      003365 CD 08 3D         [ 4]  891     CALL PLUS 
      003368 CD 29 3B         [ 4]  892     CALL DRFROM 
      00336B CD 05 35         [ 4]  893     CALL RFROM
      00336E                        894     _QBRAN MMSTA7
      00336E CD 04 99         [ 4]    1     CALL QBRAN
      003371 33 76                    2     .word MMSTA7
      003373 CD 08 99         [ 4]  895     CALL DNEGA
      003376                        896 MMSTA7:
      003376 CD 07 DE         [ 4]  897     CALL ROT ; m e 
      003379 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00337A                        905     _HEADER FSTAR,2,"F*"
      00337A 32 A1                    1         .word LINK 
                           00337C     2         LINK=.
      00337C 02                       3         .byte 2  
      00337D 46 2A                    4         .ascii "F*"
      00337F                          5         FSTAR:
      00337F CD 2D 79         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      003382 CD 05 E3         [ 4]  907     CALL TOR   
      003385 CD 27 CE         [ 4]  908     CALL DSWAP ; m2 f#1
      003388 CD 2D 79         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      00338B CD 05 35         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
      00338E CD 08 3D         [ 4]  911     CALL PLUS  ; m2 m1 e 
      003391 CD 05 E3         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      003394 CD 32 A5         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      003397 CD 05 35         [ 4]  914     CALL RFROM 
      00339A CD 08 3D         [ 4]  915     CALL PLUS 
      00339D CD 2D AB         [ 4]  916     CALL STEXP ; f#3 
      0033A0 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0033A1                        924     _HEADER FSLASH,2,"F/"
      0033A1 33 7C                    1         .word LINK 
                           0033A3     2         LINK=.
      0033A3 02                       3         .byte 2  
      0033A4 46 2F                    4         .ascii "F/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      0033A6                          5         FSLASH:
      0033A6 CD 2D 79         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      0033A9 CD 05 E3         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      0033AC CD 26 C6         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      0033AF CD 05 E3         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      0033B2 CD 26 B5         [ 4]  929     CALL DABS   ; F#1 um2 
      0033B5 CD 27 CE         [ 4]  930     CALL DSWAP  ; m2 f#1 
      0033B8 CD 2D 79         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      0033BB CD 0C 0F         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      0033BE CD 05 A0         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      0033C1 CD 08 D3         [ 4]  934     CALL SUBB   ; m2 m1 e 
      0033C4 CD 0C 0F         [ 4]  935     CALL ONE    ; e slot on rstack 
      0033C7 CD 05 BF         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      0033CA CD 26 C6         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      0033CD CD 05 35         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      0033D0 CD 06 A0         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      0033D3 CD 05 35         [ 4]  940     CALL RFROM   
      0033D6 CD 29 1D         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      0033D9 CD 26 B5         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      0033DC CD 27 CE         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033DF CD 08 28         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033E2 CD 29 1D         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033E5 CD 2A D4         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      0033E8                        947 FSLASH1: 
      0033E8 CD 29 E3         [ 4]  948     CALL DOVER ; if remainder null done 
      0033EB CD 28 A3         [ 4]  949     CALL DZEQUAL 
      0033EE                        950     _TBRAN FSLASH8 
      0033EE CD 04 A7         [ 4]    1     CALL TBRAN 
      0033F1 34 4B                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      0033F3 CD 08 28         [ 4]  954     CALL DDUP 
      0033F6                        955     _DOLIT 0XCCCC 
      0033F6 CD 04 70         [ 4]    1     CALL DOLIT 
      0033F9 CC CC                    2     .word 0XCCCC 
      0033FB                        956     _DOLIT 0xC
      0033FB CD 04 70         [ 4]    1     CALL DOLIT 
      0033FE 00 0C                    2     .word 0xC 
      003400 CD 28 E0         [ 4]  957     CALL DGREAT 
      003403                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      003403 CD 04 A7         [ 4]    1     CALL TBRAN 
      003406 34 4B                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      003408                        960     _DOLIT 10 
      003408 CD 04 70         [ 4]    1     CALL DOLIT 
      00340B 00 0A                    2     .word 10 
      00340D CD 0C 04         [ 4]  961     CALL ZERO 
      003410 CD 2A 8B         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      003413 CD 27 CE         [ 4]  964     CALL DSWAP 
      003416                        965     _DOLIT 10 
      003416 CD 04 70         [ 4]    1     CALL DOLIT 
      003419 00 0A                    2     .word 10 
      00341B CD 0C 04         [ 4]  966     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00341E CD 2A 8B         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      003421 CD 29 53         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      003424 CD 2A D4         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      003427 CD 27 CE         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      00342A CD 29 1D         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      00342D CD 2B CC         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      003430 CD 29 3B         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      003433 CD 27 CE         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      003436                        977     _DOLIT 2    ; e slot on rstack 
      003436 CD 04 70         [ 4]    1     CALL DOLIT 
      003439 00 02                    2     .word 2 
      00343B CD 05 A0         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      00343E CD 0B 98         [ 4]  979     CALL ONEP   ; increment exponent 
      003441                        980     _DOLIT 2 
      003441 CD 04 70         [ 4]    1     CALL DOLIT 
      003444 00 02                    2     .word 2 
      003446 CD 05 BF         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      003449 20 9D            [ 2]  982     JRA FSLASH1
      00344B                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      00344B CD 27 CE         [ 4]  984     CALL DSWAP  
      00344E                        985     _DDROP  ; drop remainder     
      00344E 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003451 CD 29 3B         [ 4]  986     CALL DRFROM
      003454                        987     _DDROP  ; drop divisor 
      003454 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003457 CD 15 E6         [ 4]  988     CALL JFETCH    ; quotient sign 
      00345A                        989     _QBRAN FSLASH9 
      00345A CD 04 99         [ 4]    1     CALL QBRAN
      00345D 34 62                    2     .word FSLASH9
      00345F CD 08 99         [ 4]  990     CALL DNEGA  
      003462                        991 FSLASH9:
      003462 CD 05 35         [ 4]  992     CALL RFROM  ; exponent 
      003465 CD 2D AB         [ 4]  993     CALL STEXP 
      003468 CD 05 35         [ 4]  994     CALL RFROM 
      00346B                        995     _DROP ; drop qs 
      00346B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00346E 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00346F                       1002     _HEADER DTOF,3,"D>F"
      00346F 33 A3                    1         .word LINK 
                           003471     2         LINK=.
      003471 03                       3         .byte 3  
      003472 44 3E 46                 4         .ascii "D>F"
      003475                          5         DTOF:
      003475 CD 26 C6         [ 4] 1003     CALL DSIGN 
      003478 CD 05 E3         [ 4] 1004     CALL TOR
      00347B CD 26 B5         [ 4] 1005     CALL DABS  
      00347E                       1006 DTOF1:      
      00347E CD 32 35         [ 4] 1007     CALL SCALETOM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      003481 CD 05 35         [ 4] 1008     CALL RFROM
      003484                       1009     _QBRAN DTOF2 
      003484 CD 04 99         [ 4]    1     CALL QBRAN
      003487 34 8C                    2     .word DTOF2
      003489 CD 08 99         [ 4] 1010     CALL DNEGA 
      00348C                       1011 DTOF2: 
      00348C CD 07 DE         [ 4] 1012     CALL ROT 
      00348F CD 2D AB         [ 4] 1013     CALL STEXP 
      003492 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003493                       1020     _HEADER FTOD,3,"F>D"
      003493 34 71                    1         .word LINK 
                           003495     2         LINK=.
      003495 03                       3         .byte 3  
      003496 46 3E 44                 4         .ascii "F>D"
      003499                          5         FTOD:
      003499 CD 2D 79         [ 4] 1021     CALL ATEXP ; m e 
      00349C CD 07 CD         [ 4] 1022     CALL QDUP
      00349F                       1023     _QBRAN FTOD9
      00349F CD 04 99         [ 4]    1     CALL QBRAN
      0034A2 35 23                    2     .word FTOD9
      0034A4 CD 05 E3         [ 4] 1024     CALL TOR 
      0034A7 CD 26 C6         [ 4] 1025     CALL DSIGN 
      0034AA CD 07 FD         [ 4] 1026     CALL NROT 
      0034AD CD 26 B5         [ 4] 1027     CALL DABS
      0034B0 CD 05 35         [ 4] 1028     CALL RFROM  
      0034B3 CD 06 1A         [ 4] 1029     CALL DUPP   
      0034B6 CD 06 51         [ 4] 1030     CALL ZLESS 
      0034B9                       1031     _QBRAN FTOD4 
      0034B9 CD 04 99         [ 4]    1     CALL QBRAN
      0034BC 34 EE                    2     .word FTOD4
                                   1032 ; negative exponent 
      0034BE CD 08 ED         [ 4] 1033     CALL ABSS 
      0034C1 CD 05 E3         [ 4] 1034     CALL TOR
      0034C4 20 19            [ 2] 1035     JRA FTOD2  
      0034C6                       1036 FTOD1:
      0034C6 CD 08 28         [ 4] 1037     CALL DDUP 
      0034C9 CD 28 A3         [ 4] 1038     CALL DZEQUAL 
      0034CC                       1039     _TBRAN FTOD3 
      0034CC CD 04 A7         [ 4]    1     CALL TBRAN 
      0034CF 34 E6                    2     .word FTOD3 
      0034D1                       1040     _DOLIT 10 
      0034D1 CD 04 70         [ 4]    1     CALL DOLIT 
      0034D4 00 0A                    2     .word 10 
      0034D6 CD 26 E0         [ 4] 1041     CALL DSLMOD 
      0034D9 CD 07 DE         [ 4] 1042     CALL ROT 
      0034DC                       1043     _DROP
      0034DC 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034DF                       1044 FTOD2:      
      0034DF                       1045     _DONXT FTOD1
      0034DF CD 04 84         [ 4]    1     CALL DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0034E2 34 C6                    2     .word FTOD1 
      0034E4 20 32            [ 2] 1046     JRA FTOD8   
      0034E6                       1047 FTOD3: 
      0034E6 CD 05 35         [ 4] 1048     CALL RFROM 
      0034E9                       1049     _DROP 
      0034E9 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034EC 20 2A            [ 2] 1050     JRA FTOD8  
                                   1051 ; positive exponent 
      0034EE                       1052 FTOD4:
      0034EE CD 05 E3         [ 4] 1053     CALL TOR 
      0034F1 20 20            [ 2] 1054     JRA FTOD6
      0034F3                       1055 FTOD5:
      0034F3 CD 08 28         [ 4] 1056     CALL DDUP 
      0034F6                       1057     _DOLIT 0XCCCC
      0034F6 CD 04 70         [ 4]    1     CALL DOLIT 
      0034F9 CC CC                    2     .word 0XCCCC 
      0034FB                       1058     _DOLIT 0XCCC  
      0034FB CD 04 70         [ 4]    1     CALL DOLIT 
      0034FE 0C CC                    2     .word 0XCCC 
      003500 CD 28 E0         [ 4] 1059     CALL DGREAT 
      003503                       1060     _TBRAN FTOD3 
      003503 CD 04 A7         [ 4]    1     CALL TBRAN 
      003506 34 E6                    2     .word FTOD3 
      003508                       1061     _DOLIT 10 
      003508 CD 04 70         [ 4]    1     CALL DOLIT 
      00350B 00 0A                    2     .word 10 
      00350D CD 0C 04         [ 4] 1062     CALL ZERO 
      003510 CD 2A 8B         [ 4] 1063     CALL DSTAR 
      003513                       1064 FTOD6: 
      003513                       1065     _DONXT FTOD5 
      003513 CD 04 84         [ 4]    1     CALL DONXT 
      003516 34 F3                    2     .word FTOD5 
      003518                       1066 FTOD8:
      003518 CD 07 DE         [ 4] 1067     CALL ROT 
      00351B                       1068     _QBRAN FTOD9 
      00351B CD 04 99         [ 4]    1     CALL QBRAN
      00351E 35 23                    2     .word FTOD9
      003520 CD 08 99         [ 4] 1069     CALL DNEGA
      003523                       1070 FTOD9:          
      003523 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      003524                       1078     _HEADER FZLESS,3,"F0<"
      003524 34 95                    1         .word LINK 
                           003526     2         LINK=.
      003526 03                       3         .byte 3  
      003527 46 30 3C                 4         .ascii "F0<"
      00352A                          5         FZLESS:
      00352A CD 2D 79         [ 4] 1079     CALL ATEXP 
      00352D                       1080     _DROP 
      00352D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      003530 CD 06 2A         [ 4] 1081     CALL SWAPP 
      003533                       1082     _DROP 
      003533 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003536 CD 06 51         [ 4] 1083     CALL ZLESS 
      003539 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      00353A                       1090     _HEADER FLESS,2,"F<"
      00353A 35 26                    1         .word LINK 
                           00353C     2         LINK=.
      00353C 02                       3         .byte 2  
      00353D 46 3C                    4         .ascii "F<"
      00353F                          5         FLESS:
      00353F CD 31 F2         [ 4] 1091     CALL FSUB  
      003542 CC 35 2A         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003545                       1098     _HEADER FGREAT,2,"F>"
      003545 35 3C                    1         .word LINK 
                           003547     2         LINK=.
      003547 02                       3         .byte 2  
      003548 46 3E                    4         .ascii "F>"
      00354A                          5         FGREAT:
      00354A CD 27 CE         [ 4] 1099     CALL DSWAP 
      00354D CC 35 3F         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003550                       1106     _HEADER FEQUAL,2,"F="
      003550 35 47                    1         .word LINK 
                           003552     2         LINK=.
      003552 02                       3         .byte 2  
      003553 46 3D                    4         .ascii "F="
      003555                          5         FEQUAL:
      003555 CC 28 BF         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003558                       1113     _HEADER FZEQUAL,3,"F0="
      003558 35 52                    1         .word LINK 
                           00355A     2         LINK=.
      00355A 03                       3         .byte 3  
      00355B 46 30 3D                 4         .ascii "F0="
      00355E                          5         FZEQUAL:
      00355E CD 2D 79         [ 4] 1114     CALL ATEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      003561                       1115     _DROP 
      003561 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003564 CC 28 A3         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003567                       1122     _HEADER FNEGA,7,"FNEGATE"
      003567 35 5A                    1         .word LINK 
                           003569     2         LINK=.
      003569 07                       3         .byte 7  
      00356A 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003571                          5         FNEGA:
      003571 CD 2D 79         [ 4] 1123     CALL ATEXP 
      003574 CD 05 E3         [ 4] 1124     CALL TOR 
      003577 CD 08 99         [ 4] 1125     CALL DNEGA
      00357A CD 05 35         [ 4] 1126     CALL RFROM 
      00357D CD 2D AB         [ 4] 1127     CALL STEXP 
      003580 CD 2D 2C         [ 4] 1128     CALL SFN 
      003583 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003584                       1134     _HEADER FABS,4,"FABS"
      003584 35 69                    1         .word LINK 
                           003586     2         LINK=.
      003586 04                       3         .byte 4  
      003587 46 41 42 53              4         .ascii "FABS"
      00358B                          5         FABS:
      00358B CD 2D 79         [ 4] 1135     CALL ATEXP 
      00358E CD 05 E3         [ 4] 1136     CALL TOR 
      003591 CD 06 1A         [ 4] 1137     CALL DUPP 
      003594                       1138     _DOLIT 0X80 
      003594 CD 04 70         [ 4]    1     CALL DOLIT 
      003597 00 80                    2     .word 0X80 
      003599 CD 06 77         [ 4] 1139     CALL ANDD 
      00359C                       1140     _QBRAN FABS1
      00359C CD 04 99         [ 4]    1     CALL QBRAN
      00359F 35 A4                    2     .word FABS1
      0035A1 CD 08 99         [ 4] 1141     CALL DNEGA 
      0035A4                       1142 FABS1: 
      0035A4 CD 05 35         [ 4] 1143     CALL RFROM 
      0035A7 CD 2D AB         [ 4] 1144     CALL STEXP 
      0035AA CD 2D 2C         [ 4] 1145     CALL SFN 
      0035AD 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   4654 .endif 
                                   4655 
                                   4656 ;===============================================================
                                   4657 
                           003586  4658 LASTN =	LINK   ;last name defined
                                   4659 
                                   4660 ; application code begin here
      003600                       4661 	.bndry 128 ; align on flash block  
      003600                       4662 app_space: 
                                   4663 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F6 R   |   6 ABOR1      0013FB R
  6 ABOR2      001412 R   |   6 ABORQ      0013F3 R   |   6 ABORT      0013E4 R
  6 ABRTQ      0016DE R   |   6 ABSS       0008ED R   |   6 ACCEP      00137A R
  6 ACCP1      001383 R   |   6 ACCP2      0013A9 R   |   6 ACCP3      0013AC R
  6 ACCP4      0013AE R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BD R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0016C9 R   |   6 AGAIN      001613 R
  6 AHEAD      001676 R   |   6 ALLOT      001520 R   |   6 ANDD       000677 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E4 R   |   6 ATEXE      000D14 R
  6 ATEXP      002D79 R   |   6 ATEXP1     002D8E R   |   6 ATEXP2     002D9E R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E1 R   |     B19200  =  000003     |   6 B19K2      0003BE R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038F R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039D R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CF R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AD R   |   6 BACK1      001322 R   |   6 BASE       0006E0 R
    BASEE   =  00000A     |   6 BAUD       0003F1 R   |     BCNT    =  000001 
  6 BCOMP      001563 R   |   6 BDIGS      000E0C R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0015F5 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001177 R   |   6 BKSP       0012F2 R   |     BKSPP   =  000008 
  6 BLANK      000BF7 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B5 R   |     BTW     =  000001 
  6 BUF2ROW    0021F4 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     00243D R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000502 R   |   6 CCOMMA     001545 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B7C R
  6 CELLP      000B6D R   |   6 CELLS      000B8B R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000F62 R
  6 CHAR2      000F65 R   |   6 CHKIVEC    0020E2 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D47 R
  6 CMOV2      000D5B R   |   6 CMOV3      000D6F R   |   6 CMOVE      000D2B R
    CNT     =  000001     |     CNT1    =  000005     |     CNT2    =  000003 
    CNTDWN  =  000032     |   6 CNTXT      000763 R   |   6 COLD       001BE3 R
  6 COLD1      001BE3 R   |   6 COLON      0018C7 R   |   6 COMMA      00152E R
  6 COMPI      001573 R   |     COMPO   =  000040     |   6 CONSTANT   001971 R
  6 COPYRIGH   001B2D R   |   6 COUNT      000CC7 R   |   6 CPP        00077F R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F8B R
  6 CREAT      00190D R   |     CRR     =  00000D     |   6 CSTOR      0004F1 R
  6 CTABLE     00245E R   |   6 CTAT       00247F R   |   6 CTINIT     0024A7 R
  6 D2SLASH    0029FC R   |   6 D2STAR     002A13 R   |   6 DABS       0026B5 R
  6 DABS1      0026BD R   |   6 DAT        000CAB R   |     DATSTK  =  001680 
  6 DBLVER     00252B R   |   6 DCLZ       0027FC R   |   6 DCLZ1      002805 R
  6 DCLZ4      00280E R   |   6 DCLZ8      00281B R   |   6 DCONST     0019A6 R
  6 DDIG       002721 R   |   6 DDIGS      002739 R   |   6 DDOT       002750 R
  6 DDOT0      002764 R   |   6 DDOT1      00277A R   |   6 DDROP      00081D R
  6 DDSLMOD    002B76 R   |   6 DDSTAR3    002ACA R   |   6 DDUP       000828 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000EBC R
  6 DEPTH      000C46 R   |   6 DEQU4      0028D4 R   |   6 DEQUAL     0028BF R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGREAT     0028E0 R
  6 DGTQ1      000F01 R   |   6 DI         0000C4 R   |   6 DIG        000E35 R
  6 DIGIT      000DD0 R   |   6 DIGS       000E46 R   |   6 DIGS1      000E46 R
  6 DIGS2      000E53 R   |   6 DIGTQ      000ED0 R   |     DISCOVER=  000000 
  6 DLESS      0028EB R   |   6 DLESS4     0028FF R   |   6 DLITER     0029BC R
  6 DLSHIFT    002A2F R   |   6 DLSHIFT1   002A42 R   |   6 DLSHIFT2   002A57 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0008B4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

  6 DNEGA      000899 R   |   6 DOCONST    001991 R   |   6 DOLIT      000470 R
  6 DONXT      000484 R   |     DOORBELL=  000000     |   6 DOSTR      000F9B R
  6 DOT        001031 R   |   6 DOT1       001046 R   |   6 DOTI1      001AF6 R
  6 DOTID      001AE0 R   |   6 DOTO1      001487 R   |   6 DOTOK      00146D R
  6 DOTPR      001158 R   |   6 DOTQ       0016F8 R   |   6 DOTQP      000FB8 R
  6 DOTR       000FC6 R   |   6 DOTS       001A82 R   |   6 DOTS1      001A8D R
  6 DOTS2      001A96 R   |   6 DOVAR      0006D0 R   |   6 DOVER      0029E3 R
  6 DO_DCONS   0019C9 R   |     DP      =  000005     |   6 DPLUS      002BCC R
  6 DPLUS1     002BF3 R   |   6 DRAT       002953 R   |   6 DRFROM     00293B R
  6 DROP       000610 R   |   6 DROT       002868 R   |   6 DRSHIFT    002A68 R
  6 DRSHIFT1   002A6F R   |   6 DRSHIFT2   002A85 R   |   6 DSIGN      0026C6 R
  6 DSIGN1     0026D0 R   |   6 DSLA8      002BA8 R   |   6 DSLA9      002BB5 R
  6 DSLASH     002BBD R   |   6 DSLMOD     0026E0 R   |   6 DSLMOD3    0026FB R
  6 DSLMOD4    002707 R   |   6 DSLMODa    002702 R   |   6 DSLMODb    00270D R
  6 DSSTAR     0027A8 R   |   6 DSSTAR3    0027C5 R   |   6 DSTAR      002A8B R
  6 DSTOR      000C92 R   |   6 DSUB       002BFE R   |   6 DSUB1      002C25 R
  6 DSWAP      0027CE R   |   6 DTOF       003475 R   |   6 DTOF1      00347E R
  6 DTOF2      00348C R   |   6 DTOR       00291D R   |   6 DUMP       001A38 R
  6 DUMP1      001A4F R   |   6 DUMP3      001A71 R   |   6 DUMPP      001A07 R
  6 DUPP       00061A R   |   6 DVARIA     002971 R   |     DVER_MAJ=  000001 
    DVER_MIN=  000000     |   6 DZEQUAL    0028A3 R   |   6 DZLESS     002906 R
  6 DZLESS1    002910 R   |   6 EDIGS      000E71 R   |   6 EDOT       002DFF R
  6 EDOT0      002E16 R   |   6 EDOT2      002E22 R   |   6 EDOT3      002E38 R
  6 EDOT4      002E64 R   |   6 EDOT5      002E83 R   |   6 EECSTORE   001E93 R
  6 EEPCP      001CB9 R   |   6 EEPLAST    001C8C R   |   6 EEPROM     001C74 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001CA3 R   |   6 EEPVP      001CCF R
  6 EESTORE    001EDF R   |   6 EE_CCOMM   0021A9 R   |   6 EE_COMMA   002188 R
  6 EE_CREAD   001E24 R   |   6 EE_READ    001E02 R   |   6 EI         0000BD R
  6 ELSEE      00164E R   |   6 EMIT       000437 R   |   6 ENEPER     0023C9 R
    EOL_CR  =  000001     |     EOL_LF  =  000000     |   6 EQ1        000908 R
  6 EQUAL      0008FB R   |   6 ERASE      000D9E R   |     ERR     =  00001B 
  6 EVAL       0014B0 R   |   6 EVAL1      0014B0 R   |   6 EVAL2      0014C9 R
  6 EXE1       000D22 R   |   6 EXECU      0004C5 R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000DF8 R
  6 FABS       00358B R   |   6 FABS1      0035A4 R   |   6 FADDR      002276 R
  6 FALGN4     003150 R   |   6 FALGN6     00315F R   |   6 FALGN7     003186 R
  6 FALGN71    003195 R   |   6 FALGN72    0031B1 R   |   6 FALGN8     0031B4 R
  6 FALIGN     003117 R   |   6 FALSE      000869 R   |   6 FARAT      001D3A R
  6 FARCAT     001D46 R   |   6 FC_XOFF    000464 R   |   6 FC_XON     00044E R
  6 FDOT       002E92 R   |   6 FDOT0      002ED0 R   |   6 FDOT1      002EBF R
  6 FDOT10     002F23 R   |   6 FDOT2      002EDE R   |   6 FDOT3      002EF4 R
  6 FDOT6      002F01 R   |   6 FDOT7      002F03 R   |   6 FDOT8      002F0B R
  6 FDOT9      002F13 R   |   6 FEQUAL     003555 R   |   6 FER        002C97 R
  6 FGREAT     00354A R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000D7E R   |   6 FILL0      000D8C R   |   6 FILL1      000D94 R
  6 FIND       00124E R   |   6 FIND1      00126C R   |   6 FIND2      00129A R
  6 FIND3      0012A6 R   |   6 FIND4      0012BA R   |   6 FIND5      0012C7 R
  6 FIND6      0012AB R   |   6 FINIT      002C8D R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |   6 FLESS      00353F R
  6 FLOATQ     002F9B R   |   6 FLOATQ0    002FA3 R   |   6 FLOATQ1    003002 R
  6 FLOATQ2    00300B R   |   6 FLOATQ3    003013 R   |   6 FLOATQ4    003027 R
  6 FLOAT_ER   003042 R   |   6 FLOAT_ER   00303F R   |     FLOAT_MA=  000001 
    FLOAT_MI=  000000     |     FLSI    =  01F400     |   6 FMOVE      002281 R
  6 FMOVE2     0022B2 R   |   6 FNE        002CBA R   |   6 FNEGA      003571 R
  6 FOR        0015BD R   |   6 FORGET     00015A R   |   6 FORGET1    000189 R
  6 FORGET2    00020F R   |   6 FORGET4    000218 R   |   6 FORGET6    0001D1 R
  6 FOV        002CD5 R   |   6 FPLUS      0031C0 R   |   6 FPLUS1     0031E0 R
  6 FPSTOR     001C55 R   |   6 FPSW       002C69 R   |     FPTR    =  000034 
  6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R   |   6 FRESET     002C7B R
  6 FSLASH     0033A6 R   |   6 FSLASH1    0033E8 R   |   6 FSLASH8    00344B R
  6 FSLASH9    003462 R   |   6 FSTAR      00337F R   |   6 FSUB       0031F2 R
  6 FSUB1      003212 R   |   6 FTOD       003499 R   |   6 FTOD1      0034C6 R
  6 FTOD2      0034DF R   |   6 FTOD3      0034E6 R   |   6 FTOD4      0034EE R
  6 FTOD5      0034F3 R   |   6 FTOD6      003513 R   |   6 FTOD8      003518 R
  6 FTOD9      003523 R   |   6 FVER       002C37 R   |   6 FZE        002CA4 R
  6 FZEQUAL    00355E R   |   6 FZLESS     00352A R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 GREAT      000954 R   |   6 GREAT1     00095F R   |   6 HDOT       001015 R
  6 HERE       000CDE R   |   6 HEX        000EA7 R   |   6 HI         001B98 R
  6 HLD        000750 R   |   6 HOLD       000E1C R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     0018D8 R   |   6 IFETCH     0015DB R   |   6 IFF        001626 R
  6 IFMOVE     00235A R   |     IMEDD   =  000080     |   6 IMMED      0018EA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 INCH       00042B R   |   6 INC_FPTR   001DCF R   |   6 INITOFS    0018A0 R
  6 INN        0006FE R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      00144F R
  6 INTER      001425 R   |   6 INTQ       002503 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000876 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0017EF R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JFETCH     0015E6 R   |     JPIMM   =  0000CC 
  6 JSRC       001844 R   |   6 JSRC1      001867 R   |   6 JSRC2      00188A R
  6 KEY        000F10 R   |   6 KTAP       00133F R   |   6 KTAP1      001362 R
  6 KTAP2      001365 R   |   6 LAST       00078F R   |   6 LASTN   =  003586 R
  6 LBRAC      00145C R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       000927 R   |     LF      =  00000A 
  6 LINK    =  003586 R   |   6 LITER      001595 R   |   6 LN2S       002425 R
  6 LOCAL      000555 R   |   6 LOCK       001DBB R   |   6 LOG2S      00240F R
  6 LSCALE     003061 R   |   6 LSHIFT     000BB6 R   |   6 LSHIFT1    000BBF R
  6 LSHIFT4    000BC7 R   |   6 LT1        000932 R   |     MASKK   =  001F7F 
  6 MAX        00096C R   |   6 MAX1       000976 R   |     MAX_MANT=  7FFFFF 
  6 MIN        000980 R   |   6 MIN1       00098A R   |   6 MMOD1      000A39 R
  6 MMOD2      000A4D R   |   6 MMOD3      000A64 R   |   6 MMSM0      0009C9 R
  6 MMSM1      0009D9 R   |   6 MMSM3      0009DD R   |   6 MMSM4      0009E9 R
  6 MMSMa      0009E4 R   |   6 MMSMb      0009EF R   |   6 MMSTA1     0032B0 R
  6 MMSTA2     0032BB R   |   6 MMSTA3     0032C6 R   |   6 MMSTA4     003331 R
  6 MMSTA5     003343 R   |   6 MMSTA6     003359 R   |   6 MMSTA7     003376 R
  6 MMSTAR     0032A5 R   |   6 MODD       000AB4 R   |   6 MONE       000C1D R
    MS      =  000030     |   6 MSEC       0002D1 R   |   6 MSMOD      000A1C R
  6 MSTA1      000B45 R   |   6 MSTAR      000B22 R   |     NAFR    =  004804 
  6 NAMEQ      0012E7 R   |   6 NAMET      0011F8 R   |     NCLKOPT =  004808 
  6 NDROT      00282C R   |   6 NEGAT      000887 R   |   6 NEG_SIGN   00256E R
  6 NEX1       000491 R   |   6 NEXT       0015CC R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NRAT       0005A0 R   |   6 NRDROP     00057C R   |   6 NROT       0007FD R
  6 NRSTO      0005BF R   |   6 NTIB       00070E R   |     NUBC    =  004802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

    NUCLEO  =  000001     |   6 NUFQ       000F26 R   |   6 NUFQ1      000F3F R
  6 NUMBQ      0025DD R   |   6 NUMQ0      00261E R   |   6 NUMQ1      002648 R
  6 NUMQ3      002672 R   |   6 NUMQ4      002690 R   |   6 NUMQ5      00269B R
  6 NUMQ6      00269D R   |   6 NUMQ8      0026A5 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007B4 R
    OFS     =  000005     |   6 ONE        000C0F R   |   6 ONEM       000BA5 R
  6 ONEP       000B98 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        00068B R   |   6 OUTPUT     00043C R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000642 R   |   6 OVERT      0017BD R
    PA      =  000000     |   6 PACKS      000DAF R   |   6 PAD        000CEF R
  6 PAREN      001167 R   |   6 PARS       001060 R   |   6 PARS1      00108B R
  6 PARS2      0010B6 R   |   6 PARS3      0010B9 R   |   6 PARS4      0010C2 R
  6 PARS5      0010E5 R   |   6 PARS6      0010FA R   |   6 PARS7      001109 R
  6 PARS8      001118 R   |   6 PARSE      001129 R   |   6 PARSEXP_   002F7E R
  6 PAUSE      0002E1 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001A1A R   |   6 PDUM2      001A2B R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000C5D R
  6 PII        002388 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00083D R   |   6 PNAM1      001762 R
  6 PRESE      0014D8 R   |   6 PRINT_VE   001B69 R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000201 R
  6 PRT_LICE   001B55 R   |   6 PSTOR      000C74 R   |     PTR16   =  000035 
    PTR8    =  000036     |   6 PTRPLUS    001DE7 R   |   6 QBRAN      000499 R
  6 QDUP       0007CD R   |   6 QDUP1      0007D7 R   |     QHI     =  000007 
  6 QKEY       000419 R   |     QLBIT   =  000001     |     QLO     =  000009 
  6 QSTAC      001493 R   |   6 QUERY      0013BF R   |   6 QUEST      001053 R
  6 QUIT       0014F5 R   |   6 QUIT1      0014FD R   |   6 QUIT2      001500 R
  6 RAM2EE     002222 R   |     RAMBASE =  000000     |   6 RAMLAST    0007A2 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RANDOM     00027F R   |   6 RAT        000546 R   |   6 RBRAC      001831 R
  6 REPEA      0016A9 R   |   6 RFREE      002209 R   |   6 RFROM      000535 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    ROP     =  004800     |   6 ROT        0007DE R   |   6 ROW2BUF    0021CB R
    ROWBUFF =  001680     |     RP0     =  00002E     |   6 RPAT       000512 R
    RPP     =  0017FF     |   6 RPSTO      00051F R   |   6 RSCALE     003085 R
  6 RSHIFT     000BD2 R   |   6 RSHIFT1    000BDB R   |   6 RSHIFT4    000BE3 R
    RST_SR  =  0050B3     |   6 RT12_2     0023F8 R   |   6 SAME1      001216 R
  6 SAME2      00123F R   |   6 SAMEQ      00120E R   |   6 SCAL1      00323B R
  6 SCAL2      00325C R   |   6 SCALDN2    003109 R   |   6 SCALDN3    00310C R
  6 SCALEDOW   0030DD R   |   6 SCALETOM   003235 R   |   6 SCALEUP    0030A6 R
  6 SCALEUP2   0030D9 R   |   6 SCALEUP3   0030DC R   |   6 SCOM1      001797 R
  6 SCOM2      00179A R   |   6 SCOMP      001779 R   |   6 SEED       000266 R
    SEEDX   =  000038     |     SEEDY   =  00003A     |   6 SEMIS      0017CD R
  6 SETISP     0000D0 R   |   6 SET_RAML   00195A R   |   6 SFN        002D2C R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002D60 R
  6 SFZ        002CF5 R   |   6 SIGN       000E5B R   |   6 SIGN1      000E6B R
  6 SLASH      000ABE R   |   6 SLMOD      000A6C R   |   6 SLMOD1     000A9E R
  6 SLMOD8     000AAB R   |   6 SNAME      00172C R   |     SP0     =  00002C 
  6 SPACE      000F48 R   |   6 SPACS      000F57 R   |   6 SPAT       0005FA R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  001680 
    SPSAVE  =  000001     |   6 SPSTO      000607 R   |   6 SQRT10     0023E1 R
  6 SQRT2      00239F R   |   6 SQRT3      0023B6 R   |   6 SSMOD      000B4E R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000B17 R
  6 STASL      000B5F R   |   6 STEXP      002DAB R   |   6 STEXP1     002DC1 R
  6 STEXP2     002DEB R   |   6 STOD       0008BC R   |   6 STORE      0004D2 R
  6 STO_SIGN   002586 R   |   6 STR        000E89 R   |   6 STRCQ      00159D R
  6 STRQ       0016EB R   |   6 STRQP      000FB4 R   |   6 SUBB       0008D3 R
  6 SWAPP      00062A R   |     SWIM_CSR=  007F80     |   6 TAP        001329 R
  6 TBOOT      001BD7 R   |   6 TBRAN      0004A7 R   |   6 TBUF       00071E R
    TBUFFBAS=  001680     |   6 TCHAR      000C2E R   |   6 TEMP       0006EF R
  6 TEVAL      000741 R   |   6 TFLASH     000730 R   |   6 THENN      00163B R
  6 TIB        000D00 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       00150C R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000311 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

  6 TIMER      0002FB R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001AB0 R   |   6 TNAM3      001ACE R   |   6 TNAM4      001AD4 R
  6 TNAME      001AAD R   |   6 TOFLASH    000336 R   |   6 TOKEN      0011EA R
  6 TOR        0005E3 R   |   6 TORAM      000376 R   |   6 TRUE       000858 R
    TRUEE   =  00FFFF     |   6 TWOSL      000BEA R   |   6 TYPE1      000F77 R
  6 TYPE2      000F7D R   |   6 TYPES      000F72 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000016     |     UCP     =  00001A     |     UCTIB   =  00000E 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDIV10     00325D R   |   6 UDOT       001001 R
  6 UDOTR      000FE1 R   |   6 UDSLA3     002B04 R   |   6 UDSLA4     002B22 R
  6 UDSLA7     002B4D R   |   6 UDSLA8     002B5B R   |   6 UDSLMOD    002AD4 R
  6 UDSSTAR    002787 R   |   6 UEND       000047 R   |     UFPSW   =  000008 
  6 UGREAT     00093E R   |   6 UGREAT1    000949 R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00091C R   |   6 ULESS      000911 R   |   6 UMMOD      0009B2 R
  6 UMOD10     00321F R   |   6 UMSTA      000ACD R   |   6 UNIQ1      001729 R
  6 UNIQU      00170A R   |   6 UNLKEE     001D55 R   |   6 UNLKFL     001D74 R
  6 UNLOCK     001D93 R   |   6 UNTIL      001600 R   |     UOFFSET =  00001E 
  6 UPDATCP    001D12 R   |   6 UPDATLAS   001CE9 R   |   6 UPDATPTR   002315 R
  6 UPDATRUN   001D01 R   |   6 UPDATVP    001D29 R   |   6 UPL1       0006CC R
  6 UPLUS      0006B5 R   |     UPP     =  000006     |   6 UPPER      0011AD R
  6 UPPER1     0011D0 R   |   6 UPPER2     0011D9 R   |     URLAST  =  000022 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Symbol Table

  6 USLMOD     000A01 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      0019EA R   |   6 UTYP2      0019F9 R
  6 UTYPE      0019E5 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      001927 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        000771 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000001 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00168F R
  6 WITHI      000997 R   |   6 WORDD      001193 R   |   6 WORDS      001B0A R
  6 WORS1      001B10 R   |   6 WORS2      001B2C R   |   6 WR_BYTE    001E3E R
  6 WR_WORD    001E63 R   |   6 WTABLE     00246D R   |   6 WTAT       002491 R
  6 WTINIT     0024D6 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       0006A0 R   |     XTEMP   =  000024     |     YTEMP   =  000026 
    YTMP    =  000003     |   6 ZEQ1       0028B3 R   |   6 ZEQU1      00066D R
  6 ZEQUAL     000663 R   |   6 ZERO       000C04 R   |   6 ZL1        00065A R
  6 ZLESS      000651 R   |   6 app_spac   003600 R   |   6 baudrate   00037C R
  6 block_er   001F29 R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   001F89 R   |   6 copy_buf   001FA8 R   |   6 copy_pro   001FA8 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 do2lit     0029C7 R   |   6 erase_fl   001F4B R
  6 fmove_do   0022FE R   |   6 main       000016 R   |   6 next_row   0022BB R
  6 no_move    002305 R   |   6 nsign      00255D R   |   6 parse_d4   0025C6 R
  6 parse_d5   0025D2 R   |   6 parse_di   00258A R   |   6 parse_ex   002F33 R
  6 pristine   002029 R   |   6 proceed_   001F4E R   |   6 reboot     000328 R
  6 reset_ve   002090 R   |   6 row_eras   001F09 R   |   6 row_eras   001F62 R
  6 row_eras   001F89 R   |   6 set_opti   001FFD R   |   6 set_vect   002131 R
  6 uart_ini   000076 R   |   6 write_ro   001FCD R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3600   flags    0

