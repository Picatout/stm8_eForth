ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include floating point 
                                        ; library
                                        ; require double library  
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2  ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200         .if NUCLEO
                                    201         bset PC_ODR,#LED2_BIT
                                    202         .else ;DISCOVERY 
                                    203         .if DISCOVERY
                                    204         bres PD_ODR,#LD1_BIT 
                                    205         .endif
                                    206         .endif
                                    207         .endm
                                    208 
                                    209         .macro _ledoff
                                    210         .if NUCLEO 
                                    211         bres PC_ODR,#LED2_BIT
                                    212         .else ;DISCOVERY 
                                    213         .if DISCOVERY
                                    214         bset PD_ODR,#LD1_BIT 
                                    215         .endif 
                                    216         .endif
                                    217         .endm
                                    218 
                                    219 ;**********************************************************
                                    220         .area DATA (ABS)
      000000                        221         .org RAMBASE 
                                    222 ;**********************************************************
                                    223 
                                    224 ;**********************************************************
                                    225         .area SSEG (ABS) ; STACK
      001700                        226         .org 0x1700
      001700                        227         .ds 256 
                                    228 ; space for DATSTK,TIB and STACK         
                                    229 ;**********************************************************
                                    230 
                                    231 ;**********************************************************
                                    232         .area HOME ; vectors table
                                    233 ;**********************************************************
      000000 82 00 00 16            234 	int main	        ; reset
      000004 82 00 00 00            235 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            236 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            237 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            238 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            239 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            240 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            241 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            242 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            243 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            244 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            245 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            246 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            247 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            248 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            249 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            250 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            251 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            252 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            253 	int NonHandledInterrupt	; irq17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000050 82 00 00 00            254 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            255 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            256 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            257 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            258 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            259 	int Timer4Handler	; irq23
      000068 82 00 00 00            260 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            261 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            262 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            263 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            264 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            265 	int NonHandledInterrupt	; irq29
                                    266 
                                    267 ;**********************************************************
                                    268         .area CODE
                                    269 ;**********************************************************
                                    270 
                                    271 ; non handled interrupt reset MCU
      000000                        272 NonHandledInterrupt:
      000000 A6 80            [ 1]  273         ld a, #0x80
      000002 C7 50 D1         [ 1]  274         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    275 	;iret
                                    276 
                                    277 ; used for milliseconds counter 
                                    278 ; MS is 16 bits counter 
      000005                        279 Timer4Handler:
      000005 72 5F 53 42      [ 1]  280 	clr TIM4_SR 
      000009 BE 30            [ 2]  281         ldw x,MS 
      00000B 5C               [ 1]  282         incw x 
      00000C BF 30            [ 2]  283         ldw MS,x
      00000E BE 32            [ 2]  284         ldw x,CNTDWN 
      000010 27 03            [ 1]  285         jreq 1$
      000012 5A               [ 2]  286         decw x 
      000013 BF 32            [ 2]  287         ldw CNTDWN,x 
      000015                        288 1$:         
      000015 80               [11]  289         iret 
                                    290 
                                    291 
                                    292 ;; Main entry points and COLD start data
      000016                        293 main:
                                    294 ; clear all RAM
      000016 AE 00 00         [ 2]  295 	ldw X,#RAMBASE
      000019                        296 clear_ram0:
      000019 7F               [ 1]  297 	clr (X)
      00001A 5C               [ 1]  298 	incw X
      00001B A3 17 FF         [ 2]  299 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  300 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  301         ldw x,#RPP
      000023 94               [ 1]  302         ldw sp,x
                                    303 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  304         inc SEEDX+1 
      000026 3C 3B            [ 1]  305         inc SEEDY+1          
      000028 CC 00 49         [ 2]  306 	jp ORIG
                                    307 
                                    308 ; COLD initialize these variables.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B                        309 UZERO:
      00002B 00 0A                  310         .word      BASEE   ;BASE
      00002D 00 00                  311         .word      0       ; floating point state 
      00002F 00 00                  312         .word      0       ;tmp
      000031 00 00                  313         .word      0       ;>IN
      000033 00 00                  314         .word      0       ;#TIB
      000035 17 00                  315         .word      TIBB    ;TIB
      000037 14 25                  316         .word      INTER   ;'EVAL
      000039 00 00                  317         .word      0       ;HLD
      00003B 35 9E                  318         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  319         .word      VAR_BASE   ;variables free space pointer 
      00003F 36 00                  320         .word      app_space ; FLASH free space pointer 
      000041 35 9E                  321         .word      LASTN   ;LAST
      000043 00 00                  322         .word      0        ; OFFSET 
      000045 00 00                  323         .word      0       ; TFLASH
                                    324 ;       .word      0       ; URLAST   
      000047 00 00                  325 UEND:   .word      0
                                    326 
      000049                        327 ORIG:   
                                    328 ; initialize SP
      000049 AE 17 FF         [ 2]  329         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  330         LDW     SP,X
      00004D BF 2E            [ 2]  331         LDW     RP0,X
      00004F AE 16 80         [ 2]  332         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  333         LDW     SP0,X
                           000001   334 .if NUCLEO        
                                    335 ; initialize PC_5 as output to control LED2
                                    336 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  337         bset PC_CR1,#LED2_BIT
      000058 72 1A 50 0E      [ 1]  338         bset PC_CR2,#LED2_BIT
      00005C 72 1A 50 0C      [ 1]  339         bset PC_DDR,#LED2_BIT
                                    340 .endif 
                           000000   341 .if DISCOVERY
                                    342         bset PD_CR1,#LD1_BIT
                                    343         bset PD_CR2,#LD1_BIT
                                    344         bset PD_DDR,#LD1_BIT 
                                    345 .endif
      000060                        346         _ledoff
                           000001     1         .if NUCLEO 
      000060 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    347 ; initialize clock to HSI
                                    348 ; no divisor 16Mhz 
                                    349 ; Added by Picatout 
      000064                        350 clock_init:
      000064 72 5F 50 C6      [ 1]  351         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  352 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   353 .if NUCLEO|DOORBELL
      00006C A6 E1            [ 1]  354 	ld a,#CLK_SWR_HSI
                           000000   355 .else ; DISCOVERY as 16Mhz crystal
                                    356 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    357 .endif 
      00006E C7 50 C4         [ 1]  358 	ld CLK_SWR,a
      000071 C1 50 C3         [ 1]  359 1$:	cp a,CLK_CMSR
      000074 26 FB            [ 1]  360 	jrne 1$
                                    361         
                                    362 ; initialize UART, 115200 8N1
      000076                        363 uart_init:
                           000001   364 .if NUCLEO 
      000076 72 14 50 C7      [ 1]  365 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    366 	; configure tx pin
      00007A 72 1A 50 02      [ 1]  367 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007E 72 1A 50 03      [ 1]  368 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000082 72 1A 50 04      [ 1]  369 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    370 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   371 .else ; DISCOVERY use UART2 
                                    372 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    373 	; configure tx pin
                                    374 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    375 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    376 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    377 .endif
                                    378 ; baud rate 115200 Fmaster=8Mhz  
      000086 35 0B 52 33      [ 1]  379 	mov UART_BRR2,#0x0b ; must be loaded first
      00008A 35 08 52 32      [ 1]  380 	mov UART_BRR1,#0x8
      00008E 35 0C 52 35      [ 1]  381 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    382 ; initialize timer4, used for millisecond interrupt  
      000092 35 07 53 45      [ 1]  383 	mov TIM4_PSCR,#7 ; prescale 128  
      000096 35 7D 53 46      [ 1]  384 	mov TIM4_ARR,#125 ; set for 1msec.
      00009A 35 05 53 40      [ 1]  385 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009E 72 10 53 41      [ 1]  386 	bset TIM4_IER,#TIM4_IER_UIE 
                                    387 ; set TIM4 interrupt priority to highest
      0000A2 A6 3F            [ 1]  388         ld a,#~(IPR_MASK<<6)
      0000A4 C4 7F 75         [ 1]  389         and a,ITC_SPR6
      0000A7 AA C0            [ 1]  390         or a,#(IPR3<<6)
      0000A9 C7 7F 75         [ 1]  391         ld ITC_SPR6,a 
      0000AC 9A               [ 1]  392         rim
      0000AD CC 1B E3         [ 2]  393         jp  COLD   ;default=MN1
                                    394 
                           000000   395         LINK=0 
                                    396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    397 ;; place MCU in sleep mode with
                                    398 ;; halt opcode 
                                    399 ;; BYE ( -- )
                                    400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B0                        401         _HEADER BYE,3,"BYE"
      0000B0 00 00                    1         .word LINK 
                           0000B2     2         LINK=.
      0000B2 03                       3         .byte 3  
      0000B3 42 59 45                 4         .ascii "BYE"
      0000B6                          5         BYE:
      0000B6 8E               [10]  402         halt 
      0000B7 81               [ 4]  403         ret 
                                    404 
                                    405 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    406 ; Enable interrupts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    407 ; EI ( -- )
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000B8                        409         _HEADER EI,2,"EI"
      0000B8 00 B2                    1         .word LINK 
                           0000BA     2         LINK=.
      0000BA 02                       3         .byte 2  
      0000BB 45 49                    4         .ascii "EI"
      0000BD                          5         EI:
      0000BD 9A               [ 1]  410         rim 
      0000BE 81               [ 4]  411         ret 
                                    412 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    413 ; Disable interrupts
                                    414 ; DI ( -- )
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000BF                        416         _HEADER DI,2,"DI"
      0000BF 00 BA                    1         .word LINK 
                           0000C1     2         LINK=.
      0000C1 02                       3         .byte 2  
      0000C2 44 49                    4         .ascii "DI"
      0000C4                          5         DI:
      0000C4 9B               [ 1]  417         sim 
      0000C5 81               [ 4]  418         ret 
                                    419 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    421 ; set interrupt priority level 
                                    422 ; SET-ISP ( n1 n2 -- )
                                    423 ; n1 level {1..3}
                                    424 ; n2 vector {0..29}
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000C6                        426         _HEADER SETISP,7,"SET-ISP"
      0000C6 00 C1                    1         .word LINK 
                           0000C8     2         LINK=.
      0000C8 07                       3         .byte 7  
      0000C9 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000D0                          5         SETISP:
      0000D0 90 93            [ 1]  427         ldw y,x 
      0000D2 90 FE            [ 2]  428         ldw y,(y)
      0000D4 A6 04            [ 1]  429         ld a,#4 ; 4 slot per register 
                                    430 ;  quotient select register, remainder select slot in register.        
      0000D6 90 62            [ 2]  431         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D8 A4 03            [ 1]  432         and a,#3 
      0000DA 48               [ 1]  433         sll a ; 2*SLOT  lshift 
      0000DB 72 A9 7F 70      [ 2]  434         addw y,#ITC_SPR1 
      0000DF FF               [ 2]  435         ldw (x),y  ; ( level reg -- )
      0000E0 90 5F            [ 1]  436         clrw y 
      0000E2 90 97            [ 1]  437         ld yl,a 
      0000E4 1D 00 02         [ 2]  438         subw x,#CELLL 
      0000E7 FF               [ 2]  439         ldw (x),y  ; ( level reg lshift -- )
      0000E8 90 93            [ 1]  440         ldw y,x 
      0000EA 90 EE 02         [ 2]  441         ldw y,(2,y) 
      0000ED 90 F6            [ 1]  442         ld a,(y)   ; reg_value
      0000EF 1D 00 02         [ 2]  443         subw x,#CELLL 
      0000F2 FF               [ 2]  444         ldw (x),y ; ( level reg lshift rval -- )
      0000F3 CD 06 41         [ 4]  445         call OVER ; ( level reg lshift rval lshift -- )
      0000F6 CD 04 6F         [ 4]  446         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0000F9 00 03                  447         .word 3
      0000FB CD 06 29         [ 4]  448         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FE CD 0B B5         [ 4]  449         call LSHIFT ; creat slot mask 
      000101 CD 08 75         [ 4]  450         call INVER  ; ( level reg lshift rval mask )
      000104 CD 06 76         [ 4]  451         call ANDD ; ( level reg lshift slot_masked )
      000107 CD 05 E2         [ 4]  452         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010A CD 07 DD         [ 4]  453         call ROT  ; ( reg lshift level )
      00010D CD 06 29         [ 4]  454         call SWAPP ; ( reg level lshift )
      000110 CD 0B B5         [ 4]  455         call LSHIFT  ; ( reg slot_level -- )
      000113 CD 05 34         [ 4]  456         call RFROM ; ( reg slot_level masked_val )
      000116 CD 06 8A         [ 4]  457         call ORR   ; ( reg updated_rval )
      000119 CD 06 29         [ 4]  458         call SWAPP 
      00011C CC 04 F0         [ 2]  459         jp CSTOR
                                    460 
                                    461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    462 ; sélectionne l'application 
                                    463 ; qui démarre automatique lors 
                                    464 ; d'un COLD start 
                                    465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00011F                        466         _HEADER AUTORUN,7,"AUTORUN"
      00011F 00 C8                    1         .word LINK 
                           000121     2         LINK=.
      000121 07                       3         .byte 7  
      000122 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000129                          5         AUTORUN:
      000129 CD 11 EA         [ 4]  467         call TOKEN 
      00012C CD 06 19         [ 4]  468         call DUPP 
      00012F CD 04 98         [ 4]  469         call QBRAN 
      000132 02 0F                  470         .word FORGET2
      000134 CD 12 E7         [ 4]  471         call NAMEQ
      000137 CD 07 CC         [ 4]  472         call QDUP 
      00013A CD 04 98         [ 4]  473         call QBRAN 
      00013D 02 0F                  474         .word FORGET2
      00013F                        475         _DROP 
      00013F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000142 1D 00 04         [ 2]  476         subw x,#2*CELLL 
      000145 90 5F            [ 1]  477         clrw y 
      000147 FF               [ 2]  478         ldw (x),y 
      000148 90 AE 40 02      [ 2]  479         ldw y,#APP_RUN 
      00014C EF 02            [ 2]  480         ldw (2,x),y 
      00014E CC 1E DF         [ 2]  481         jp EESTORE 
                                    482 
                                    483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    484 ;; Reset dictionary pointer before 
                                    485 ;; forgotten word. RAM space and 
                                    486 ;; interrupt vector defined after 
                                    487 ;; must be resetted also.
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000151                        489         _HEADER FORGET,6,"FORGET"
      000151 01 21                    1         .word LINK 
                           000153     2         LINK=.
      000153 06                       3         .byte 6  
      000154 46 4F 52 47 45 54        4         .ascii "FORGET"
      00015A                          5         FORGET:
      00015A CD 11 EA         [ 4]  490         call TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00015D CD 06 19         [ 4]  491         call DUPP 
      000160 CD 04 98         [ 4]  492         call QBRAN 
      000163 02 0F                  493         .word FORGET2
      000165 CD 12 E7         [ 4]  494         call NAMEQ ; ( a -- ca na | a F )
      000168 CD 07 CC         [ 4]  495         call QDUP 
      00016B CD 04 98         [ 4]  496         call QBRAN 
      00016E 02 0F                  497         .word FORGET2
                                    498 ; only forget users words 
      000170 CD 06 19         [ 4]  499         call DUPP ; ( ca na na )
      000173 CD 04 6F         [ 4]  500         call DOLIT 
      000176 36 00                  501         .word app_space 
      000178 CD 06 29         [ 4]  502         call SWAPP 
      00017B CD 09 10         [ 4]  503         call  ULESS 
      00017E CD 04 98         [ 4]  504         call QBRAN 
      000181 01 D1                  505         .word FORGET6 
                                    506 ; ( ca na -- )        
                                    507 ;reset ivec with address >= ca
      000183 CD 06 29         [ 4]  508         call SWAPP ; ( na ca -- ) 
      000186 CD 20 E2         [ 4]  509         call CHKIVEC ; ( na -- ) 
                                    510 ; start at LAST and link back to na 
                                    511 ; if variable found reset VP at that point.
      000189                        512 FORGET1:
      000189 CD 07 8E         [ 4]  513         call LAST 
      00018C CD 04 E3         [ 4]  514         call AT 
      00018F CD 06 19         [ 4]  515         call DUPP  ; ( -- na last last )
      000192 CD 02 25         [ 4]  516         call FREEVAR ; ( -- na last )
      000195 CD 06 19         [ 4]  517         call DUPP 
      000198 CD 04 6F         [ 4]  518         call DOLIT 
      00019B 00 02                  519         .word 2 
      00019D CD 08 D2         [ 4]  520         call SUBB ; ( na last -- na last lfa ) link address 
      0001A0 CD 04 E3         [ 4]  521         call AT 
      0001A3 CD 06 19         [ 4]  522         call DUPP ; ( -- na last a a )
      0001A6 CD 07 62         [ 4]  523         call CNTXT 
      0001A9 CD 04 D1         [ 4]  524         call STORE
      0001AC CD 07 8E         [ 4]  525         call LAST  
      0001AF CD 04 D1         [ 4]  526         call STORE ; ( --  na last )
      0001B2 CD 06 41         [ 4]  527         call OVER 
      0001B5 CD 08 FA         [ 4]  528         call EQUAL ; ( na last na -- na T|F ) 
      0001B8 CD 04 98         [ 4]  529         call QBRAN 
      0001BB 01 89                  530         .word FORGET1 
                                    531 ; ( na -- )
      0001BD CD 04 6F         [ 4]  532         call DOLIT 
      0001C0 00 02                  533         .word 2 
      0001C2 CD 08 D2         [ 4]  534         call SUBB 
      0001C5 CD 07 7E         [ 4]  535         call CPP 
      0001C8 CD 04 D1         [ 4]  536         call STORE  
      0001CB CD 1D 12         [ 4]  537         call UPDATCP 
      0001CE CC 1C E9         [ 2]  538         jp UPDATLAST 
      0001D1                        539 FORGET6: ; tried to forget a RAM or system word 
                                    540 ; ( ca na -- )
      0001D1 1D 00 02         [ 2]  541         subw x,#CELLL 
      0001D4 90 BE 2C         [ 2]  542         ldw y,SP0 
      0001D7 FF               [ 2]  543         ldw (x),y  
      0001D8 CD 09 10         [ 4]  544         call ULESS
      0001DB CD 04 98         [ 4]  545         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001DE 02 01                  546         .word PROTECTED 
      0001E0 CD 13 F3         [ 4]  547         call ABORQ 
      0001E3 1D                     548         .byte 29
      0001E4 20 46 6F 72 20 52 41   549         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000201                        550 PROTECTED:
      000201 CD 13 F3         [ 4]  551         call ABORQ
      000204 0A                     552         .byte 10
      000205 20 50 72 6F 74 65 63   553         .ascii " Protected"
             74 65 64
      00020F                        554 FORGET2: ; no name or not found in dictionary 
      00020F CD 13 F3         [ 4]  555         call ABORQ
      000212 05                     556         .byte 5
      000213 20 77 68 61 74         557         .ascii " what"
      000218                        558 FORGET4:
      000218 CC 06 0F         [ 2]  559         jp DROP 
                                    560 
                                    561 
                                    562 ;;;;;;;;;;;;;;;;;;;;;
                                    563 ; if na is variable 
                                    564 ; free variable data  
                                    565 ; FREEVAR ( na -- )
                                    566 ;;;;;;;;;;;;;;;;;;;;;;
      00021B                        567         _HEADER FREEVAR,7,"FREEVAR"
      00021B 01 53                    1         .word LINK 
                           00021D     2         LINK=.
      00021D 07                       3         .byte 7  
      00021E 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000225                          5         FREEVAR:
      000225 CD 06 19         [ 4]  568         call DUPP ; ( na na -- )
      000228 CD 05 01         [ 4]  569         CALL CAT  ; ( na c -- )
      00022B CD 0B 97         [ 4]  570         call ONEP ;
      00022E CD 08 3C         [ 4]  571         CALL PLUS ; ( na c+1 -- ca ) 
      000231 CD 0B 97         [ 4]  572         call ONEP ; ( ca+ -- ) to get routne address 
      000234 CD 06 19         [ 4]  573         call DUPP ; ( ca+ ca+ -- )
      000237 CD 04 E3         [ 4]  574         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023A CD 04 6F         [ 4]  575         call DOLIT 
      00023D 06 CF                  576         .word DOVAR ; if routine address is DOVAR then variable 
      00023F CD 08 FA         [ 4]  577         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000242 CD 04 98         [ 4]  578         call QBRAN 
      000245 02 5B                  579         .word FREEVAR4 
      000247 CD 04 6F         [ 4]  580         call DOLIT 
      00024A 00 02                  581         .word 2 
      00024C CD 08 3C         [ 4]  582         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024F CD 04 E3         [ 4]  583         call AT 
      000252 CD 07 70         [ 4]  584         call VPP   
      000255 CD 04 D1         [ 4]  585         call STORE 
      000258 CC 1D 29         [ 2]  586         jp UPDATVP 
      00025B                        587 FREEVAR4: ; not variable
      00025B CC 06 0F         [ 2]  588         jp  DROP 
                                    589 
                                    590 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    591 ;    SEED ( n -- )
                                    592 ; Initialize PRNG seed with n 
                                    593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00025E                        594         _HEADER SEED,4,"SEED"
      00025E 02 1D                    1         .word LINK 
                           000260     2         LINK=.
      000260 04                       3         .byte 4  
      000261 53 45 45 44              4         .ascii "SEED"
      000265                          5         SEED:
      000265 90 93            [ 1]  595         ldw y,x 
      000267 1C 00 02         [ 2]  596         addw x,#CELLL
      00026A 90 FE            [ 2]  597         ldw y,(y)
      00026C 90 9E            [ 1]  598         ld a,yh 
      00026E B7 38            [ 1]  599         ld SEEDX,a 
      000270 90 9F            [ 1]  600         ld a,yl 
      000272 B7 3A            [ 1]  601         ld SEEDY,a 
      000274 81               [ 4]  602         ret 
                                    603 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    605 ;    RANDOM ( u1 -- u2 )
                                    606 ; Pseudo random number betwen 0 and u1-1
                                    607 ;  XOR32 algorithm 
                                    608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000275                        609         _HEADER RANDOM,6,"RANDOM"
      000275 02 60                    1         .word LINK 
                           000277     2         LINK=.
      000277 06                       3         .byte 6  
      000278 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00027E                          5         RANDOM:
                                    610 ;local variable 
                           000001   611         SPSAVE=1
                           000002   612         VSIZE=2 
      00027E 52 02            [ 2]  613         sub sp,#VSIZE
      000280 1F 01            [ 2]  614         ldw (SPSAVE,sp),x  
                                    615 ; XTEMP=(SEEDX<<5)^SEEDX 
      000282 90 93            [ 1]  616         ldw y,x 
      000284 90 FE            [ 2]  617         ldw y,(y)
      000286 90 BF 26         [ 2]  618         ldw YTEMP,y 
      000289 BE 38            [ 2]  619 	ldw x,SEEDX 
      00028B 58               [ 2]  620 	sllw x 
      00028C 58               [ 2]  621 	sllw x 
      00028D 58               [ 2]  622 	sllw x 
      00028E 58               [ 2]  623 	sllw x 
      00028F 58               [ 2]  624 	sllw x 
      000290 9E               [ 1]  625 	ld a,xh 
      000291 B8 38            [ 1]  626 	xor a,SEEDX 
      000293 B7 24            [ 1]  627 	ld XTEMP,a 
      000295 9F               [ 1]  628 	ld a,xl 
      000296 B8 39            [ 1]  629 	xor a,SEEDX+1 
      000298 B7 25            [ 1]  630 	ld XTEMP+1,a 
                                    631 ; SEEDX=SEEDY 
      00029A BE 3A            [ 2]  632 	ldw x,SEEDY 
      00029C BF 38            [ 2]  633 	ldw SEEDX,x  
                                    634 ; SEEDY=SEEDY^(SEEDY>>1)
      00029E 54               [ 2]  635 	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00029F 9E               [ 1]  636 	ld a,xh 
      0002A0 B8 3A            [ 1]  637 	xor a,SEEDY 
      0002A2 B7 3A            [ 1]  638 	ld SEEDY,a  
      0002A4 9F               [ 1]  639 	ld a,xl 
      0002A5 B8 3B            [ 1]  640 	xor a,SEEDY+1 
      0002A7 B7 3B            [ 1]  641 	ld SEEDY+1,a 
                                    642 ; XTEMP>>3 
      0002A9 BE 24            [ 2]  643 	ldw x,XTEMP 
      0002AB 54               [ 2]  644 	srlw x 
      0002AC 54               [ 2]  645 	srlw x 
      0002AD 54               [ 2]  646 	srlw x 
                                    647 ; x=XTEMP^x 
      0002AE 9E               [ 1]  648 	ld a,xh 
      0002AF B8 24            [ 1]  649 	xor a,XTEMP 
      0002B1 95               [ 1]  650 	ld xh,a 
      0002B2 9F               [ 1]  651 	ld a,xl 
      0002B3 B8 25            [ 1]  652 	xor a,XTEMP+1  
      0002B5 97               [ 1]  653 	ld xl,a 
                                    654 ; SEEDY=x^SEEDY 
      0002B6 B8 3B            [ 1]  655 	xor a,SEEDY+1
      0002B8 97               [ 1]  656 	ld xl,a 
      0002B9 9E               [ 1]  657 	ld a,xh 
      0002BA B8 3A            [ 1]  658 	xor a,SEEDY
      0002BC 95               [ 1]  659 	ld xh,a 
      0002BD BF 3A            [ 2]  660 	ldw SEEDY,x 
                                    661 ; return SEEDY modulo YTEMP  
      0002BF 90 BE 26         [ 2]  662 	ldw y,YTEMP  
      0002C2 65               [ 2]  663 	divw x,y 
      0002C3 1E 01            [ 2]  664 	ldw x,(SPSAVE,sp)
      0002C5 FF               [ 2]  665         ldw (x),y 
      0002C6 5B 02            [ 2]  666         addw sp,#VSIZE 
      0002C8 81               [ 4]  667 	ret 
                                    668 
                                    669 
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    671 ;; get millisecond counter 
                                    672 ;; msec ( -- u )
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002C9                        674         _HEADER MSEC,4,"MSEC"
      0002C9 02 77                    1         .word LINK 
                           0002CB     2         LINK=.
      0002CB 04                       3         .byte 4  
      0002CC 4D 53 45 43              4         .ascii "MSEC"
      0002D0                          5         MSEC:
      0002D0 1D 00 02         [ 2]  675         subw x,#CELLL 
      0002D3 90 BE 30         [ 2]  676         ldw y,MS 
      0002D6 FF               [ 2]  677         ldw (x),y 
      0002D7 81               [ 4]  678         ret 
                                    679 
                                    680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    681 ; suspend execution for u msec 
                                    682 ;  pause ( u -- )
                                    683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002D8                        684         _HEADER PAUSE,5,"PAUSE"
      0002D8 02 CB                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           0002DA     2         LINK=.
      0002DA 05                       3         .byte 5  
      0002DB 50 41 55 53 45           4         .ascii "PAUSE"
      0002E0                          5         PAUSE:
      0002E0 90 93            [ 1]  685         ldw y,x
      0002E2 90 FE            [ 2]  686         ldw y,(y)
      0002E4 72 B9 00 30      [ 2]  687         addw y,MS 
      0002E8 8F               [10]  688 1$:     wfi  
      0002E9 90 B3 30         [ 2]  689         cpw y,MS  
      0002EC 26 FA            [ 1]  690         jrne 1$        
      0002EE 1C 00 02         [ 2]  691         addw x,#CELLL 
      0002F1 81               [ 4]  692         ret 
                                    693 
                                    694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    695 ; initialize count down timer 
                                    696 ;  TIMER ( u -- )  milliseconds
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F2                        698         _HEADER TIMER,5,"TIMER"
      0002F2 02 DA                    1         .word LINK 
                           0002F4     2         LINK=.
      0002F4 05                       3         .byte 5  
      0002F5 54 49 4D 45 52           4         .ascii "TIMER"
      0002FA                          5         TIMER:
      0002FA 90 93            [ 1]  699         ldw y,x
      0002FC 90 FE            [ 2]  700         ldw y,(y) 
      0002FE 90 BF 32         [ 2]  701         ldw CNTDWN,y
      000301 1C 00 02         [ 2]  702         addw x,#CELLL 
      000304 81               [ 4]  703         ret 
                                    704 
                                    705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    706 ; check for TIMER exiparition 
                                    707 ;  TIMEOUT? ( -- 0|-1 )
                                    708 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000305                        709         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000305 02 F4                    1         .word LINK 
                           000307     2         LINK=.
      000307 08                       3         .byte 8  
      000308 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000310                          5         TIMEOUTQ:
      000310 4F               [ 1]  710         clr a
      000311 1D 00 02         [ 2]  711         subw x,#CELLL 
      000314 90 BE 32         [ 2]  712         ldw y,CNTDWN 
      000317 26 01            [ 1]  713         jrne 1$ 
      000319 43               [ 1]  714         cpl a 
      00031A E7 01            [ 1]  715 1$:     ld (1,x),a 
      00031C F7               [ 1]  716         ld (x),a 
      00031D 81               [ 4]  717         ret         
                                    718 
                                    719 ;;;;;;;;;;;;;;;;;;;;;
                                    720 ; reboot MCU 
                                    721 ; REBOOT ( -- )
                                    722 ;;;;;;;;;;;;;;;;;;;;;
      00031E                        723         _HEADER reboot,6,"REBOOT"
      00031E 03 07                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000320     2         LINK=.
      000320 06                       3         .byte 6  
      000321 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000327                          5         reboot:
      000327 CC 00 00         [ 2]  724         jp NonHandledInterrupt
                                    725 
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    727 ; compile to flash memory 
                                    728 ; TO-FLASH ( -- )
                                    729 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        730         _HEADER TOFLASH,8,"TO-FLASH"
      00032A 03 20                    1         .word LINK 
                           00032C     2         LINK=.
      00032C 08                       3         .byte 8  
      00032D 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000335                          5         TOFLASH:
      000335 CD 07 A1         [ 4]  731         call RAMLAST 
      000338 CD 04 E3         [ 4]  732         call AT 
      00033B CD 07 CC         [ 4]  733         call QDUP 
      00033E CD 04 98         [ 4]  734         call QBRAN
      000341 03 64                  735         .word 1$
      000343 CD 13 F3         [ 4]  736         call ABORQ 
      000346 1D                     737         .byte 29
      000347 20 4E 6F 74 20 77 68   738         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000364 90 AE FF FF      [ 2]  739 1$:     ldw y,#-1 
      000368 90 BF 20         [ 2]  740         ldw UTFLASH,y
      00036B 81               [ 4]  741         ret 
                                    742 
                                    743 ;;;;;;;;;;;;;;;;;;;;;;
                                    744 ; compile to RAM 
                                    745 ; TO-RAM ( -- )
                                    746 ;;;;;;;;;;;;;;;;;;;;;;
      00036C                        747         _HEADER TORAM,6,"TO-RAM"
      00036C 03 2C                    1         .word LINK 
                           00036E     2         LINK=.
      00036E 06                       3         .byte 6  
      00036F 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000375                          5         TORAM:
      000375 90 5F            [ 1]  748         clrw y 
      000377 90 BF 20         [ 2]  749         ldw UTFLASH,y 
      00037A 81               [ 4]  750         ret 
                                    751 
                                    752 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    753 ;; BAUD RATE constants table
                                    754 ; values to put in BRR1 & BRR2 
                                    755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00037B                        756 baudrate: 
      00037B A0 1B                  757 	.byte 0xa0,0x1b ; 2400
      00037D D0 05                  758 	.byte 0xd0,0x5  ; 4800 
      00037F 68 03                  759 	.byte 0x68,0x3  ; 9600
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000381 34 01                  760 	.byte 0x34,0x1  ; 19200
      000383 11 06                  761 	.byte 0x11,0x6  ; 57600
      000385 08 0B                  762 	.byte 0x8,0xb   ; 115200
                                    763 
                                    764 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    765 ; BAUD RATE CONSTANTS names 
                                    766 ; 2400 baud  ( -- n )
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000387                        768         _HEADER B2K4,4,"B2K4"
      000387 03 6E                    1         .word LINK 
                           000389     2         LINK=.
      000389 04                       3         .byte 4  
      00038A 42 32 4B 34              4         .ascii "B2K4"
      00038E                          5         B2K4:
      00038E 1D 00 02         [ 2]  769 	subw x,#CELLL 
      000391 90 5F            [ 1]  770         clrw y
      000393 FF               [ 2]  771         ldw (x),y
      000394 81               [ 4]  772 	ret
                                    773 
                                    774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    775 ; 4800 baud	
                                    776 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000395                        777         _HEADER B4K8,4,"B4K8"
      000395 03 89                    1         .word LINK 
                           000397     2         LINK=.
      000397 04                       3         .byte 4  
      000398 42 34 4B 38              4         .ascii "B4K8"
      00039C                          5         B4K8:
      00039C 1D 00 02         [ 2]  778         subw x,#CELLL 
      00039F 90 AE 00 02      [ 2]  779         ldw y,#2 
      0003A3 FF               [ 2]  780         ldw (x),y
      0003A4 81               [ 4]  781         ret 
                                    782 
                                    783 ;;;;;;;;;;;;;;;;;;;;
                                    784 ; 9600 baud
                                    785 ;;;;;;;;;;;;;;;;;;;;
      0003A5                        786         _HEADER B9K6,4,"B9K6"
      0003A5 03 97                    1         .word LINK 
                           0003A7     2         LINK=.
      0003A7 04                       3         .byte 4  
      0003A8 42 39 4B 36              4         .ascii "B9K6"
      0003AC                          5         B9K6:
      0003AC 1D 00 02         [ 2]  787         subw x,#CELLL 
      0003AF 90 AE 00 04      [ 2]  788         ldw y,#4 
      0003B3 FF               [ 2]  789         ldw (x),y 
      0003B4 81               [ 4]  790         ret 
                                    791 ;;;;;;;;;;;;;;
                                    792 ; 19200 baud
                                    793 ;;;;;;;;;;;;;;
      0003B5                        794         _HEADER B19K2,5,"B19K2"
      0003B5 03 A7                    1         .word LINK 
                           0003B7     2         LINK=.
      0003B7 05                       3         .byte 5  
      0003B8 42 31 39 4B 32           4         .ascii "B19K2"
      0003BD                          5         B19K2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003BD 1D 00 02         [ 2]  795         subw x,#CELLL
      0003C0 90 AE 00 06      [ 2]  796         ldw y,#6 
      0003C4 FF               [ 2]  797         ldw (x),y 
      0003C5 81               [ 4]  798         ret 
                                    799 ;;;;;;;;;;;;;;
                                    800 ; 57600 baud  
                                    801 ;;;;;;;;;;;;;;
      0003C6                        802         _HEADER B57K6,5,"B57K6"
      0003C6 03 B7                    1         .word LINK 
                           0003C8     2         LINK=.
      0003C8 05                       3         .byte 5  
      0003C9 42 35 37 4B 36           4         .ascii "B57K6"
      0003CE                          5         B57K6:
      0003CE 1D 00 02         [ 2]  803         subw x,#CELLL 
      0003D1 90 AE 00 08      [ 2]  804         ldw y,#8 
      0003D5 FF               [ 2]  805         ldw (x),y 
      0003D6 81               [ 4]  806         ret 
                                    807 ;;;;;;;;;;;;;;
                                    808 ; 115200 baud 
                                    809 ;;;;;;;;;;;;;;
      0003D7                        810         _HEADER B115K2,6,"B115K2"
      0003D7 03 C8                    1         .word LINK 
                           0003D9     2         LINK=.
      0003D9 06                       3         .byte 6  
      0003DA 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003E0                          5         B115K2:
      0003E0 1D 00 02         [ 2]  811 	subw x,#CELLL 
      0003E3 90 AE 00 0A      [ 2]  812         ldw y,#10 
      0003E7 FF               [ 2]  813         ldw (x),y 
      0003E8 81               [ 4]  814         ret 
                                    815 
                                    816 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    817 ;; set UART2 BAUD rate
                                    818 ;	BAUD ( u -- )
                                    819 ;;;;;;;;;;;;;;;;;;;;;;;
      0003E9                        820         _HEADER BAUD,4,"BAUD"
      0003E9 03 D9                    1         .word LINK 
                           0003EB     2         LINK=.
      0003EB 04                       3         .byte 4  
      0003EC 42 41 55 44              4         .ascii "BAUD"
      0003F0                          5         BAUD:
      0003F0 1D 00 02         [ 2]  821 	subw x,#CELLL
      0003F3 90 AE 03 7B      [ 2]  822         ldw y,#baudrate 
      0003F7 FF               [ 2]  823         ldw (x),y 
      0003F8 CD 08 3C         [ 4]  824         call PLUS
      0003FB 90 93            [ 1]  825         ldw y,x  
      0003FD 90 FE            [ 2]  826         ldw y,(y)
      0003FF 90 F6            [ 1]  827         ld a,(y)
      000401 88               [ 1]  828         push a 
      000402 90 5C            [ 1]  829         incw y 
      000404 90 F6            [ 1]  830         ld a,(y)
      000406 C7 52 33         [ 1]  831         ld UART_BRR2,a 
      000409 84               [ 1]  832         pop a
      00040A C7 52 32         [ 1]  833         ld UART_BRR1,a 
      00040D 1C 00 02         [ 2]  834         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000410 81               [ 4]  835         ret 
                                    836 
                                    837 ;; Device dependent I/O
                                    838 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    839 ;       ?RX     ( -- c T | F )
                                    840 ;         Return input byte and true, or false.
                                    841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000411                        842         _HEADER QKEY,4,"?KEY"
      000411 03 EB                    1         .word LINK 
                           000413     2         LINK=.
      000413 04                       3         .byte 4  
      000414 3F 4B 45 59              4         .ascii "?KEY"
      000418                          5         QKEY:
      000418 90 5F            [ 1]  843         CLRW Y 
      00041A 72 0B 52 30 0B   [ 2]  844         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00041F C6 52 31         [ 1]  845         LD    A,UART_DR   ;get char in A
      000422 1D 00 02         [ 2]  846 	SUBW	X,#2
      000425 E7 01            [ 1]  847         LD     (1,X),A
      000427 7F               [ 1]  848 	CLR	(X)
      000428 90 53            [ 2]  849         CPLW     Y
      00042A                        850 INCH:
      00042A 1D 00 02         [ 2]  851 		SUBW	X,#2
      00042D FF               [ 2]  852         LDW     (X),Y
      00042E 81               [ 4]  853         RET
                                    854 
                                    855 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    856 ;       TX!     ( c -- )
                                    857 ;       Send character c to  output device.
                                    858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042F                        859         _HEADER EMIT,4,"EMIT"
      00042F 04 13                    1         .word LINK 
                           000431     2         LINK=.
      000431 04                       3         .byte 4  
      000432 45 4D 49 54              4         .ascii "EMIT"
      000436                          5         EMIT:
      000436 E6 01            [ 1]  860         LD     A,(1,X)
      000438 1C 00 02         [ 2]  861 	ADDW	X,#2
      00043B 72 0F 52 30 FB   [ 2]  862 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000440 C7 52 31         [ 1]  863         LD    UART_DR,A   ;send A
      000443 81               [ 4]  864         RET
                                    865 
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    867 ;       FC-XON  ( -- )
                                    868 ;       send XON character 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000444                        870         _HEADER FC_XON,6,"FC-XON"
      000444 04 31                    1         .word LINK 
                           000446     2         LINK=.
      000446 06                       3         .byte 6  
      000447 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00044D                          5         FC_XON:
      00044D 1D 00 02         [ 2]  871         subw x,#CELLL 
      000450 7F               [ 1]  872         clr (x)
      000451 A6 11            [ 1]  873         ld a,#XON 
      000453 E7 01            [ 1]  874         ld (1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000455 CD 04 36         [ 4]  875         call EMIT 
      000458 81               [ 4]  876         ret 
                                    877 
                                    878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    879 ;       FC-XOFF ( -- )
                                    880 ;       Send XOFF character 
                                    881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000459                        882         _HEADER FC_XOFF,7,"FC-XOFF"
      000459 04 46                    1         .word LINK 
                           00045B     2         LINK=.
      00045B 07                       3         .byte 7  
      00045C 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000463                          5         FC_XOFF:
      000463 1D 00 02         [ 2]  883         subw x,#CELLL 
      000466 7F               [ 1]  884         clr (x)
      000467 A6 13            [ 1]  885         ld a,#XOFF 
      000469 E7 01            [ 1]  886         ld (1,x),a 
      00046B CD 04 36         [ 4]  887         call EMIT 
      00046E 81               [ 4]  888         ret
                                    889 
                                    890 ;; The kernel
                                    891 
                                    892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    893 ;       doLIT   ( -- w )
                                    894 ;       Push an inline literal.
                                    895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00046F                        896 DOLIT:
      00046F 1D 00 02         [ 2]  897 	SUBW X,#2
      000472 16 01            [ 2]  898         ldw y,(1,sp)
      000474 90 FE            [ 2]  899         ldw y,(y)
      000476 FF               [ 2]  900         ldw (x),y
      000477 90 85            [ 2]  901         popw y 
      000479 90 EC 02         [ 2]  902         jp (2,y)
                                    903 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    905 ;       NEXT    ( -- )
                                    906 ;       Code for  single index loop.
                                    907 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00047C                        908         _HEADER DONXT,COMPO+4,"NEXT"
      00047C 04 5B                    1         .word LINK 
                           00047E     2         LINK=.
      00047E 44                       3         .byte COMPO+4  
      00047F 4E 45 58 54              4         .ascii "NEXT"
      000483                          5         DONXT:
      000483 16 03            [ 2]  909 	LDW Y,(3,SP)
      000485 90 5A            [ 2]  910 	DECW Y
      000487 2A 07            [ 1]  911 	JRPL NEX1 ; jump if N=0
      000489 90 85            [ 2]  912 	POPW Y
      00048B 5B 02            [ 2]  913         addw sp,#2
      00048D 90 EC 02         [ 2]  914         JP (2,Y)
      000490                        915 NEX1:
      000490 17 03            [ 2]  916         LDW (3,SP),Y
      000492 90 85            [ 2]  917         POPW Y
      000494 90 FE            [ 2]  918 	LDW Y,(Y)
      000496 90 FC            [ 2]  919 	JP (Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    920 
                                    921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    922 ;       ?branch ( f -- )
                                    923 ;       Branch if flag is zero.
                                    924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    925 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      000498                        926 QBRAN:	
      000498 90 93            [ 1]  927         LDW Y,X
      00049A 1C 00 02         [ 2]  928 	ADDW X,#2
      00049D 90 FE            [ 2]  929 	LDW Y,(Y)
      00049F 27 13            [ 1]  930         JREQ     BRAN
      0004A1 90 85            [ 2]  931 	POPW Y
      0004A3 90 EC 02         [ 2]  932 	JP (2,Y)
                                    933 
                                    934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    935 ;  TBRANCH ( f -- )
                                    936 ;  branch if f==TRUE 
                                    937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    938 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004A6                        939 TBRAN: 
      0004A6 90 93            [ 1]  940         LDW Y,X 
      0004A8 1C 00 02         [ 2]  941         ADDW X,#2 
      0004AB 90 FE            [ 2]  942         LDW Y,(Y)
      0004AD 26 05            [ 1]  943         JRNE BRAN 
      0004AF 90 85            [ 2]  944         POPW Y 
      0004B1 90 EC 02         [ 2]  945         JP (2,Y)
                                    946 
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    948 ;       branch  ( -- )
                                    949 ;       Branch to an inline address.
                                    950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    951 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004B4                        952 BRAN:
      0004B4 90 85            [ 2]  953         POPW Y
      0004B6 90 FE            [ 2]  954 	LDW Y,(Y)
      0004B8 90 FC            [ 2]  955         JP  (Y)
                                    956 
                                    957 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    958 ;       EXECUTE ( ca -- )
                                    959 ;       Execute  word at ca.
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004BA                        961         _HEADER EXECU,7,"EXECUTE"
      0004BA 04 7E                    1         .word LINK 
                           0004BC     2         LINK=.
      0004BC 07                       3         .byte 7  
      0004BD 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004C4                          5         EXECU:
      0004C4 90 93            [ 1]  962         LDW Y,X
      0004C6 1C 00 02         [ 2]  963 	ADDW X,#CELLL 
      0004C9 90 FE            [ 2]  964 	LDW  Y,(Y)
      0004CB 90 FC            [ 2]  965         JP   (Y)
                                    966 
                           000001   967 OPTIMIZE = 1
                           000001   968 .if OPTIMIZE 
                                    969 ; remplacement de CALL EXIT par 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    970 ; le opcode de RET.
                                    971 ; Voir modification au code de ";"
                           000000   972 .else 
                                    973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    974 ;       EXIT    ( -- )
                                    975 ;       Terminate a colon definition.
                                    976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    977 ;       _HEADER EXIT,4,"EXIT"
                                    978 EXIT:
                                    979         POPW Y
                                    980         RET
                                    981 .endif 
                                    982 
                                    983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    984 ;       !       ( w a -- )
                                    985 ;       Pop  data stack to memory.
                                    986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004CD                        987         _HEADER STORE,1,"!"
      0004CD 04 BC                    1         .word LINK 
                           0004CF     2         LINK=.
      0004CF 01                       3         .byte 1  
      0004D0 21                       4         .ascii "!"
      0004D1                          5         STORE:
      0004D1 90 93            [ 1]  988         LDW Y,X
      0004D3 90 FE            [ 2]  989         LDW Y,(Y)    ;Y=a
      0004D5 89               [ 2]  990         PUSHW X
      0004D6 EE 02            [ 2]  991         LDW X,(2,X) ; x=w 
      0004D8 90 FF            [ 2]  992         LDW (Y),X 
      0004DA 85               [ 2]  993         POPW X  
      0004DB 1C 00 04         [ 2]  994         ADDW X,#4 ; DDROP 
      0004DE 81               [ 4]  995         RET     
                                    996 
                                    997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    998 ;       @       ( a -- w )
                                    999 ;       Push memory location to stack.
                                   1000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004DF                       1001         _HEADER AT,1,"@"
      0004DF 04 CF                    1         .word LINK 
                           0004E1     2         LINK=.
      0004E1 01                       3         .byte 1  
      0004E2 40                       4         .ascii "@"
      0004E3                          5         AT:
      0004E3 90 93            [ 1] 1002         LDW Y,X     ;Y = a
      0004E5 90 FE            [ 2] 1003         LDW Y,(Y)   ; address 
      0004E7 90 FE            [ 2] 1004         LDW Y,(Y)   ; value 
      0004E9 FF               [ 2] 1005         LDW (X),Y ;w = @Y
      0004EA 81               [ 4] 1006         RET     
                                   1007 
                                   1008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1009 ;       C!      ( c b -- )
                                   1010 ;       Pop  data stack to byte memory.
                                   1011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EB                       1012         _HEADER CSTOR,2,"C!"
      0004EB 04 E1                    1         .word LINK 
                           0004ED     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004ED 02                       3         .byte 2  
      0004EE 43 21                    4         .ascii "C!"
      0004F0                          5         CSTOR:
      0004F0 90 93            [ 1] 1013         LDW Y,X
      0004F2 90 FE            [ 2] 1014 	LDW Y,(Y)    ;Y=b
      0004F4 E6 03            [ 1] 1015         LD A,(3,X)    ;D = c
      0004F6 90 F7            [ 1] 1016         LD  (Y),A     ;store c at b
      0004F8 1C 00 04         [ 2] 1017 	ADDW X,#4 ; DDROP 
      0004FB 81               [ 4] 1018         RET     
                                   1019 
                                   1020 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1021 ;       C@      ( b -- c )
                                   1022 ;       Push byte in memory to  stack.
                                   1023 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                       1024         _HEADER CAT,2,"C@"
      0004FC 04 ED                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 02                       3         .byte 2  
      0004FF 43 40                    4         .ascii "C@"
      000501                          5         CAT:
      000501 90 93            [ 1] 1025         LDW Y,X     ;Y=b
      000503 90 FE            [ 2] 1026         LDW Y,(Y)
      000505 90 F6            [ 1] 1027         LD A,(Y)
      000507 E7 01            [ 1] 1028         LD (1,X),A
      000509 7F               [ 1] 1029         CLR (X)
      00050A 81               [ 4] 1030         RET     
                                   1031 
                                   1032 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1033 ;       RP@     ( -- a )
                                   1034 ;       Push current RP to data stack.
                                   1035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00050B                       1036         _HEADER RPAT,3,"RP@"
      00050B 04 FE                    1         .word LINK 
                           00050D     2         LINK=.
      00050D 03                       3         .byte 3  
      00050E 52 50 40                 4         .ascii "RP@"
      000511                          5         RPAT:
      000511 90 96            [ 1] 1037         LDW Y,SP    ;save return addr
      000513 1D 00 02         [ 2] 1038         SUBW X,#2
      000516 FF               [ 2] 1039         LDW (X),Y
      000517 81               [ 4] 1040         RET     
                                   1041 
                                   1042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1043 ;       RP!     ( a -- )
                                   1044 ;       Set  return stack pointer.
                                   1045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000518                       1046         _HEADER RPSTO,COMPO+3,"RP!"
      000518 05 0D                    1         .word LINK 
                           00051A     2         LINK=.
      00051A 43                       3         .byte COMPO+3  
      00051B 52 50 21                 4         .ascii "RP!"
      00051E                          5         RPSTO:
      00051E 90 85            [ 2] 1047         POPW Y
      000520 90 BF 26         [ 2] 1048         LDW YTEMP,Y
      000523 90 93            [ 1] 1049         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000525 90 FE            [ 2] 1050         LDW Y,(Y)
      000527 90 94            [ 1] 1051         LDW SP,Y
      000529 1C 00 02         [ 2] 1052         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      00052C 92 CC 26         [ 5] 1053         JP [YTEMP]
                                   1054 
                                   1055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1056 ;       R>      ( -- w )
                                   1057 ;       Pop return stack to data stack.
                                   1058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1059         _HEADER RFROM,2,"R>"
      00052F 05 1A                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 52 3E                    4         .ascii "R>"
      000534                          5         RFROM:
      000534 1D 00 02         [ 2] 1060         SUBW X,#CELLL 
      000537 16 03            [ 2] 1061         LDW Y,(3,SP)
      000539 FF               [ 2] 1062         LDW (X),Y 
      00053A 90 85            [ 2] 1063         POPW Y 
      00053C 5B 02            [ 2] 1064         ADDW SP,#2 
      00053E 90 FC            [ 2] 1065         JP (Y)
                                   1066 
                                   1067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1068 ;       R@      ( -- w )
                                   1069 ;       Copy top of return stack to stack.
                                   1070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1071         _HEADER RAT,2,"R@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 52 40                    4         .ascii "R@"
      000545                          5         RAT:
      000545 16 03            [ 2] 1072         ldw y,(3,sp)
      000547 1D 00 02         [ 2] 1073         subw x,#CELLL 
      00054A FF               [ 2] 1074         ldw (x),y 
      00054B 81               [ 4] 1075         ret 
                                   1076 
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1078 ;       LOCAL ( n -- )
                                   1079 ;       reserve n slots on return stack
                                   1080 ;       for local variables 
                                   1081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1082         _HEADER LOCAL,5,"LOCAL"
      00054C 05 42                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 05                       3         .byte 5  
      00054F 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000554                          5         LOCAL:
      000554 90 85            [ 2] 1083         POPW Y  
      000556 90 BF 26         [ 2] 1084         LDW YTEMP,Y ; RETURN ADDRESS 
      000559 E6 01            [ 1] 1085         LD A,(1,X)
      00055B 90 97            [ 1] 1086         LD YL,A 
      00055D A6 02            [ 1] 1087         LD A,#CELLL 
      00055F 90 42            [ 4] 1088         MUL Y,A 
      000561 90 BF 24         [ 2] 1089         LDw XTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000564 90 96            [ 1] 1090         LDW Y,SP 
      000566 72 B2 00 24      [ 2] 1091         SUBW Y,XTEMP
      00056A 90 94            [ 1] 1092         LDW SP,Y 
      00056C 1C 00 02         [ 2] 1093         ADDW X,#CELLL 
      00056F 92 CC 26         [ 5] 1094         JP [YTEMP]
                                   1095 
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1097 ;       NRDROP ( n -- )
                                   1098 ;       drop n elements from rstack
                                   1099 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000572                       1100         _HEADER NRDROP,6,"NRDROP" 
      000572 05 4E                    1         .word LINK 
                           000574     2         LINK=.
      000574 06                       3         .byte 6  
      000575 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      00057B                          5         NRDROP:
      00057B 90 85            [ 2] 1101         POPW Y 
      00057D 90 BF 26         [ 2] 1102         LDW YTEMP,Y ; RETURN ADDRESS 
      000580 E6 01            [ 1] 1103         LD A,(1,X)
      000582 90 97            [ 1] 1104         LD YL,A  
      000584 A6 02            [ 1] 1105         LD A,#CELLL 
      000586 90 42            [ 4] 1106         MUL Y,A 
      000588 90 BF 24         [ 2] 1107         LDW XTEMP,Y 
      00058B 90 96            [ 1] 1108         LDW Y,SP 
      00058D 72 B9 00 24      [ 2] 1109         ADDW Y,XTEMP 
      000591 90 94            [ 1] 1110         LDW SP,Y  
      000593 1C 00 02         [ 2] 1111         ADDW X,#CELLL 
      000596 92 CC 26         [ 5] 1112         JP [YTEMP]
                                   1113 
                                   1114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1115 ;        ( n -- w)
                                   1116 ;      fetch nth element ofr return stack 
                                   1117 ;      n==0 is same as R@ 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000599                       1119         _HEADER NRAT,3,"NR@"
      000599 05 74                    1         .word LINK 
                           00059B     2         LINK=.
      00059B 03                       3         .byte 3  
      00059C 4E 52 40                 4         .ascii "NR@"
      00059F                          5         NRAT:
      00059F E6 01            [ 1] 1120         LD A,(1,X)
      0005A1 90 97            [ 1] 1121         LD YL,A 
      0005A3 A6 02            [ 1] 1122         LD A,#CELLL 
      0005A5 90 42            [ 4] 1123         MUL Y,A 
      0005A7 90 BF 26         [ 2] 1124         LDW YTEMP,Y 
      0005AA 90 96            [ 1] 1125         LDW Y,SP 
      0005AC 72 A9 00 03      [ 2] 1126         ADDW Y,#3 
      0005B0 72 B9 00 26      [ 2] 1127         ADDW Y,YTEMP 
      0005B4 90 FE            [ 2] 1128         LDW Y,(Y)
      0005B6 FF               [ 2] 1129         LDW (X),Y 
      0005B7 81               [ 4] 1130         RET 
                                   1131 
                                   1132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1133 ;       NR! ( w n --  )
                                   1134 ;       store w on nth position of 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1135 ;       return stack 
                                   1136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B8                       1137         _HEADER NRSTO,3,"NR!"
      0005B8 05 9B                    1         .word LINK 
                           0005BA     2         LINK=.
      0005BA 03                       3         .byte 3  
      0005BB 4E 52 21                 4         .ascii "NR!"
      0005BE                          5         NRSTO:
      0005BE 90 96            [ 1] 1138         LDW Y,SP
      0005C0 72 A9 00 03      [ 2] 1139         ADDW Y,#3 
      0005C4 90 BF 26         [ 2] 1140         LDW YTEMP,Y 
      0005C7 E6 01            [ 1] 1141         LD A,(1,X)
      0005C9 90 97            [ 1] 1142         LD YL,A 
      0005CB A6 02            [ 1] 1143         LD A,#CELLL 
      0005CD 90 42            [ 4] 1144         MUL Y,A 
      0005CF 72 B9 00 26      [ 2] 1145         ADDW Y,YTEMP
      0005D3 89               [ 2] 1146         PUSHW X 
      0005D4 EE 02            [ 2] 1147         LDW X,(2,X)
      0005D6 90 FF            [ 2] 1148         LDW (Y),X
      0005D8 85               [ 2] 1149         POPW X 
      0005D9 1C 00 04         [ 2] 1150         ADDW X,#2*CELLL 
      0005DC 81               [ 4] 1151         RET 
                                   1152 
                                   1153 
                                   1154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1155 ;       >R      ( w -- )
                                   1156 ;       Push data stack to return stack.
                                   1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DD                       1158         _HEADER TOR,COMPO+2,">R"
      0005DD 05 BA                    1         .word LINK 
                           0005DF     2         LINK=.
      0005DF 42                       3         .byte COMPO+2  
      0005E0 3E 52                    4         .ascii ">R"
      0005E2                          5         TOR:
      0005E2 90 85            [ 2] 1159         POPW Y    ;save return addr
      0005E4 90 BF 26         [ 2] 1160         LDW YTEMP,Y
      0005E7 90 93            [ 1] 1161         LDW Y,X
      0005E9 90 FE            [ 2] 1162         LDW Y,(Y)  ; W
      0005EB 90 89            [ 2] 1163         PUSHW Y    ;W >R 
      0005ED 1C 00 02         [ 2] 1164         ADDW X,#2
      0005F0 92 CC 26         [ 5] 1165         JP [YTEMP]
                                   1166 
                                   1167 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1168 ;       SP@     ( -- a )
                                   1169 ;       Push current stack pointer.
                                   1170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F3                       1171         _HEADER SPAT,3,"SP@"
      0005F3 05 DF                    1         .word LINK 
                           0005F5     2         LINK=.
      0005F5 03                       3         .byte 3  
      0005F6 53 50 40                 4         .ascii "SP@"
      0005F9                          5         SPAT:
      0005F9 90 93            [ 1] 1172 	LDW Y,X
      0005FB 1D 00 02         [ 2] 1173         SUBW X,#2
      0005FE FF               [ 2] 1174 	LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0005FF 81               [ 4] 1175         RET     
                                   1176 
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1178 ;       SP!     ( a -- )
                                   1179 ;       Set  data stack pointer.
                                   1180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000600                       1181         _HEADER SPSTO,3,"SP!"
      000600 05 F5                    1         .word LINK 
                           000602     2         LINK=.
      000602 03                       3         .byte 3  
      000603 53 50 21                 4         .ascii "SP!"
      000606                          5         SPSTO:
      000606 FE               [ 2] 1182         LDW     X,(X)     ;X = a
      000607 81               [ 4] 1183         RET     
                                   1184 
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1186 ;       DROP    ( w -- )
                                   1187 ;       Discard top stack item.
                                   1188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000608                       1189         _HEADER DROP,4,"DROP"
      000608 06 02                    1         .word LINK 
                           00060A     2         LINK=.
      00060A 04                       3         .byte 4  
      00060B 44 52 4F 50              4         .ascii "DROP"
      00060F                          5         DROP:
      00060F 1C 00 02         [ 2] 1190         ADDW X,#2     
      000612 81               [ 4] 1191         RET     
                                   1192 
                                   1193 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1194 ;       DUP     ( w -- w w )
                                   1195 ;       Duplicate  top stack item.
                                   1196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000613                       1197         _HEADER DUPP,3,"DUP"
      000613 06 0A                    1         .word LINK 
                           000615     2         LINK=.
      000615 03                       3         .byte 3  
      000616 44 55 50                 4         .ascii "DUP"
      000619                          5         DUPP:
      000619 90 93            [ 1] 1198 	LDW Y,X
      00061B 1D 00 02         [ 2] 1199         SUBW X,#2
      00061E 90 FE            [ 2] 1200 	LDW Y,(Y)
      000620 FF               [ 2] 1201 	LDW (X),Y
      000621 81               [ 4] 1202         RET     
                                   1203 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1205 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1206 ;       Exchange top two stack items.
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000622                       1208         _HEADER SWAPP,4,"SWAP"
      000622 06 15                    1         .word LINK 
                           000624     2         LINK=.
      000624 04                       3         .byte 4  
      000625 53 57 41 50              4         .ascii "SWAP"
      000629                          5         SWAPP:
      000629 90 93            [ 1] 1209         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00062B 90 FE            [ 2] 1210         LDW Y,(Y)
      00062D 90 89            [ 2] 1211         PUSHW Y  
      00062F 90 93            [ 1] 1212         LDW Y,X
      000631 90 EE 02         [ 2] 1213         LDW Y,(2,Y)
      000634 FF               [ 2] 1214         LDW (X),Y
      000635 90 85            [ 2] 1215         POPW Y 
      000637 EF 02            [ 2] 1216         LDW (2,X),Y
      000639 81               [ 4] 1217         RET     
                                   1218 
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1220 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1221 ;       Copy second stack item to top.
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063A                       1223         _HEADER OVER,4,"OVER"
      00063A 06 24                    1         .word LINK 
                           00063C     2         LINK=.
      00063C 04                       3         .byte 4  
      00063D 4F 56 45 52              4         .ascii "OVER"
      000641                          5         OVER:
      000641 1D 00 02         [ 2] 1224         SUBW X,#2
      000644 90 93            [ 1] 1225         LDW Y,X
      000646 90 EE 04         [ 2] 1226         LDW Y,(4,Y)
      000649 FF               [ 2] 1227         LDW (X),Y
      00064A 81               [ 4] 1228         RET     
                                   1229 
                                   1230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1231 ;       0<      ( n -- t )
                                   1232 ;       Return true if n is negative.
                                   1233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064B                       1234         _HEADER ZLESS,2,"0<"
      00064B 06 3C                    1         .word LINK 
                           00064D     2         LINK=.
      00064D 02                       3         .byte 2  
      00064E 30 3C                    4         .ascii "0<"
      000650                          5         ZLESS:
      000650 A6 FF            [ 1] 1235         LD A,#0xFF
      000652 90 93            [ 1] 1236         LDW Y,X
      000654 90 FE            [ 2] 1237         LDW Y,(Y)
      000656 2B 01            [ 1] 1238         JRMI     ZL1
      000658 4F               [ 1] 1239         CLR A   ;false
      000659 F7               [ 1] 1240 ZL1:    LD     (X),A
      00065A E7 01            [ 1] 1241         LD (1,X),A
      00065C 81               [ 4] 1242 	RET     
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;       0= ( n -- f )
                                   1246 ;   n==0?
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00065D                       1248         _HEADER ZEQUAL,2,"0="
      00065D 06 4D                    1         .word LINK 
                           00065F     2         LINK=.
      00065F 02                       3         .byte 2  
      000660 30 3D                    4         .ascii "0="
      000662                          5         ZEQUAL:
      000662 A6 FF            [ 1] 1249         LD A,#0XFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000664 90 93            [ 1] 1250         LDW Y,X 
      000666 90 FE            [ 2] 1251         LDW Y,(Y)
      000668 27 02            [ 1] 1252         JREQ ZEQU1 
      00066A A6 00            [ 1] 1253         LD A,#0 
      00066C                       1254 ZEQU1:  
      00066C F7               [ 1] 1255         LD (X),A 
      00066D E7 01            [ 1] 1256         LD (1,X),A         
      00066F 81               [ 4] 1257         RET 
                                   1258 
                                   1259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1260 ;       AND     ( w w -- w )
                                   1261 ;       Bitwise AND.
                                   1262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000670                       1263         _HEADER ANDD,3,"AND"
      000670 06 5F                    1         .word LINK 
                           000672     2         LINK=.
      000672 03                       3         .byte 3  
      000673 41 4E 44                 4         .ascii "AND"
      000676                          5         ANDD:
      000676 F6               [ 1] 1264         LD  A,(X)    ;D=w
      000677 E4 02            [ 1] 1265         AND A,(2,X)
      000679 E7 02            [ 1] 1266         LD (2,X),A
      00067B E6 01            [ 1] 1267         LD A,(1,X)
      00067D E4 03            [ 1] 1268         AND A,(3,X)
      00067F E7 03            [ 1] 1269         LD (3,X),A
      000681 1C 00 02         [ 2] 1270         ADDW X,#2
      000684 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1274 ;       OR      ( w w -- w )
                                   1275 ;       Bitwise inclusive OR.
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000685                       1277         _HEADER ORR,2,"OR"
      000685 06 72                    1         .word LINK 
                           000687     2         LINK=.
      000687 02                       3         .byte 2  
      000688 4F 52                    4         .ascii "OR"
      00068A                          5         ORR:
      00068A F6               [ 1] 1278         LD A,(X)    ;D=w
      00068B EA 02            [ 1] 1279         OR A,(2,X)
      00068D E7 02            [ 1] 1280         LD (2,X),A
      00068F E6 01            [ 1] 1281         LD A,(1,X)
      000691 EA 03            [ 1] 1282         OR A,(3,X)
      000693 E7 03            [ 1] 1283         LD (3,X),A
      000695 1C 00 02         [ 2] 1284         ADDW X,#2
      000698 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       XOR     ( w w -- w )
                                   1289 ;       Bitwise exclusive OR.
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000699                       1291         _HEADER XORR,3,"XOR"
      000699 06 87                    1         .word LINK 
                           00069B     2         LINK=.
      00069B 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00069C 58 4F 52                 4         .ascii "XOR"
      00069F                          5         XORR:
      00069F F6               [ 1] 1292         LD A,(X)    ;D=w
      0006A0 E8 02            [ 1] 1293         XOR A,(2,X)
      0006A2 E7 02            [ 1] 1294         LD (2,X),A
      0006A4 E6 01            [ 1] 1295         LD A,(1,X)
      0006A6 E8 03            [ 1] 1296         XOR A,(3,X)
      0006A8 E7 03            [ 1] 1297         LD (3,X),A
      0006AA 1C 00 02         [ 2] 1298         ADDW X,#2
      0006AD 81               [ 4] 1299         RET
                                   1300 
                                   1301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1302 ;       UM+     ( u u -- udsum )
                                   1303 ;       Add two unsigned single
                                   1304 ;       and return a double sum.
                                   1305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006AE                       1306         _HEADER UPLUS,3,"UM+"
      0006AE 06 9B                    1         .word LINK 
                           0006B0     2         LINK=.
      0006B0 03                       3         .byte 3  
      0006B1 55 4D 2B                 4         .ascii "UM+"
      0006B4                          5         UPLUS:
      0006B4 A6 01            [ 1] 1307         LD A,#1
      0006B6 90 93            [ 1] 1308         LDW Y,X
      0006B8 90 EE 02         [ 2] 1309         LDW Y,(2,Y)
      0006BB 90 BF 26         [ 2] 1310         LDW YTEMP,Y
      0006BE 90 93            [ 1] 1311         LDW Y,X
      0006C0 90 FE            [ 2] 1312         LDW Y,(Y)
      0006C2 72 B9 00 26      [ 2] 1313         ADDW Y,YTEMP
      0006C6 EF 02            [ 2] 1314         LDW (2,X),Y
      0006C8 25 01            [ 1] 1315         JRC     UPL1
      0006CA 4F               [ 1] 1316         CLR A
      0006CB E7 01            [ 1] 1317 UPL1:   LD     (1,X),A
      0006CD 7F               [ 1] 1318         CLR (X)
      0006CE 81               [ 4] 1319         RET
                                   1320 
                                   1321 ;; System and user variables
                                   1322 
                                   1323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1324 ;       doVAR   ( -- a )
                                   1325 ;       run time code 
                                   1326 ;       for VARIABLE and CREATE.
                                   1327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1328 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006CF                       1329 DOVAR:
      0006CF 1D 00 02         [ 2] 1330 	SUBW X,#2
      0006D2 90 85            [ 2] 1331         POPW Y    ;get return addr (pfa)
      0006D4 90 FE            [ 2] 1332         LDW Y,(Y) ; indirect address 
      0006D6 FF               [ 2] 1333         LDW (X),Y    ;push on stack
      0006D7 81               [ 4] 1334         RET     ;go to RET of EXEC
                                   1335 
                                   1336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1337 ;       BASE    ( -- a )
                                   1338 ;       Radix base for numeric I/O.
                                   1339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006D8                       1340         _HEADER BASE,4,"BASE"
      0006D8 06 B0                    1         .word LINK 
                           0006DA     2         LINK=.
      0006DA 04                       3         .byte 4  
      0006DB 42 41 53 45              4         .ascii "BASE"
      0006DF                          5         BASE:
      0006DF 90 AE 00 06      [ 2] 1341 	LDW Y,#UBASE 
      0006E3 1D 00 02         [ 2] 1342 	SUBW X,#2
      0006E6 FF               [ 2] 1343         LDW (X),Y
      0006E7 81               [ 4] 1344         RET
                                   1345 
                                   1346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1347 ;       tmp     ( -- a )
                                   1348 ;       A temporary storage.
                                   1349 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006E8                       1350         _HEADER TEMP,3,"TMP"
      0006E8 06 DA                    1         .word LINK 
                           0006EA     2         LINK=.
      0006EA 03                       3         .byte 3  
      0006EB 54 4D 50                 4         .ascii "TMP"
      0006EE                          5         TEMP:
      0006EE 90 AE 00 0A      [ 2] 1351 	LDW Y,#UTMP
      0006F2 1D 00 02         [ 2] 1352 	SUBW X,#2
      0006F5 FF               [ 2] 1353         LDW (X),Y
      0006F6 81               [ 4] 1354         RET
                                   1355 
                                   1356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1357 ;       >IN     ( -- a )
                                   1358 ;        Hold parsing pointer.
                                   1359 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F7                       1360         _HEADER INN,3,">IN"
      0006F7 06 EA                    1         .word LINK 
                           0006F9     2         LINK=.
      0006F9 03                       3         .byte 3  
      0006FA 3E 49 4E                 4         .ascii ">IN"
      0006FD                          5         INN:
      0006FD 90 AE 00 0C      [ 2] 1361 	LDW Y,#UINN 
      000701 1D 00 02         [ 2] 1362 	SUBW X,#2
      000704 FF               [ 2] 1363         LDW (X),Y
      000705 81               [ 4] 1364         RET
                                   1365 
                                   1366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1367 ;       #TIB    ( -- a )
                                   1368 ;       Count in terminal input 
                                   1369 ;       buffer.
                                   1370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000706                       1371         _HEADER NTIB,4,"#TIB"
      000706 06 F9                    1         .word LINK 
                           000708     2         LINK=.
      000708 04                       3         .byte 4  
      000709 23 54 49 42              4         .ascii "#TIB"
      00070D                          5         NTIB:
      00070D 90 AE 00 0E      [ 2] 1372 	LDW Y,#UCTIB 
      000711 1D 00 02         [ 2] 1373 	SUBW X,#2
      000714 FF               [ 2] 1374         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000715 81               [ 4] 1375         RET
                                   1376 
                                   1377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1378 ;       TBUF ( -- a )
                                   1379 ;       address of 128 bytes 
                                   1380 ;       transaction buffer
                                   1381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000716                       1382         _HEADER TBUF,4,"TBUF"
      000716 07 08                    1         .word LINK 
                           000718     2         LINK=.
      000718 04                       3         .byte 4  
      000719 54 42 55 46              4         .ascii "TBUF"
      00071D                          5         TBUF:
      00071D 90 AE 16 80      [ 2] 1383         ldw y,#ROWBUFF
      000721 1D 00 02         [ 2] 1384         subw x,#CELLL
      000724 FF               [ 2] 1385         ldw (x),y 
      000725 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ; systeme variable 
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1390 ; compilation destination 
                                   1391 ; TFLASH ( -- A )
                                   1392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000726                       1393         _HEADER TFLASH,6,"TFLASH"
      000726 07 18                    1         .word LINK 
                           000728     2         LINK=.
      000728 06                       3         .byte 6  
      000729 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00072F                          5         TFLASH:
      00072F 1D 00 02         [ 2] 1394         subw x,#CELLL 
      000732 90 AE 00 20      [ 2] 1395         ldw y,#UTFLASH
      000736 FF               [ 2] 1396         ldw (x),y 
      000737 81               [ 4] 1397         ret 
                                   1398 
                                   1399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1400 ;       "EVAL   ( -- a )
                                   1401 ;       Execution vector of EVAL.
                                   1402 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000738                       1403         _HEADER TEVAL,5,"'EVAL"
      000738 07 28                    1         .word LINK 
                           00073A     2         LINK=.
      00073A 05                       3         .byte 5  
      00073B 27 45 56 41 4C           4         .ascii "'EVAL"
      000740                          5         TEVAL:
      000740 90 AE 00 12      [ 2] 1404 	LDW Y,#UINTER 
      000744 1D 00 02         [ 2] 1405 	SUBW X,#2
      000747 FF               [ 2] 1406         LDW (X),Y
      000748 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1410 ;       HLD     ( -- a )
                                   1411 ;       Hold a pointer of output
                                   1412 ;        string.
                                   1413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000749                       1414         _HEADER HLD,3,"HLD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000749 07 3A                    1         .word LINK 
                           00074B     2         LINK=.
      00074B 03                       3         .byte 3  
      00074C 48 4C 44                 4         .ascii "HLD"
      00074F                          5         HLD:
      00074F 90 AE 00 14      [ 2] 1415 	LDW Y,#UHLD 
      000753 1D 00 02         [ 2] 1416 	SUBW X,#2
      000756 FF               [ 2] 1417         LDW (X),Y
      000757 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1421 ;       CONTEXT ( -- a )
                                   1422 ;       Start vocabulary search.
                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000758                       1424         _HEADER CNTXT,7,"CONTEXT"
      000758 07 4B                    1         .word LINK 
                           00075A     2         LINK=.
      00075A 07                       3         .byte 7  
      00075B 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      000762                          5         CNTXT:
      000762 90 AE 00 16      [ 2] 1425 	LDW Y,#UCNTXT
      000766 1D 00 02         [ 2] 1426 	SUBW X,#2
      000769 FF               [ 2] 1427         LDW (X),Y
      00076A 81               [ 4] 1428         RET
                                   1429 
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1431 ;       VP      ( -- a )
                                   1432 ;       Point to top of variables
                                   1433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076B                       1434         _HEADER VPP,2,"VP"
      00076B 07 5A                    1         .word LINK 
                           00076D     2         LINK=.
      00076D 02                       3         .byte 2  
      00076E 56 50                    4         .ascii "VP"
      000770                          5         VPP:
      000770 90 AE 00 18      [ 2] 1435 	LDW Y,#UVP 
      000774 1D 00 02         [ 2] 1436 	SUBW X,#2
      000777 FF               [ 2] 1437         LDW (X),Y
      000778 81               [ 4] 1438         RET
                                   1439 
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1441 ;       CP    ( -- a )
                                   1442 ;       Pointer to top of FLASH 
                                   1443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000779                       1444         _HEADER CPP,2,"CP"
      000779 07 6D                    1         .word LINK 
                           00077B     2         LINK=.
      00077B 02                       3         .byte 2  
      00077C 43 50                    4         .ascii "CP"
      00077E                          5         CPP:
      00077E 90 AE 00 1A      [ 2] 1445         ldw y,#UCP 
      000782 1D 00 02         [ 2] 1446         subw x,#CELLL 
      000785 FF               [ 2] 1447         ldw (x),y 
      000786 81               [ 4] 1448         ret                
                                   1449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1450 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1451 ;       LAST    ( -- a )
                                   1452 ;       Point to last name in 
                                   1453 ;       dictionary.
                                   1454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000787                       1455         _HEADER LAST,4,"LAST"
      000787 07 7B                    1         .word LINK 
                           000789     2         LINK=.
      000789 04                       3         .byte 4  
      00078A 4C 41 53 54              4         .ascii "LAST"
      00078E                          5         LAST:
      00078E 90 AE 00 1C      [ 2] 1456 	LDW Y,#ULAST 
      000792 1D 00 02         [ 2] 1457 	SUBW X,#2
      000795 FF               [ 2] 1458         LDW (X),Y
      000796 81               [ 4] 1459         RET
                                   1460 
                                   1461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1462 ; address of system variable URLAST 
                                   1463 ;       RAMLAST ( -- a )
                                   1464 ; RAM dictionary context 
                                   1465 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000797                       1466         _HEADER RAMLAST,7,"RAMLAST"
      000797 07 89                    1         .word LINK 
                           000799     2         LINK=.
      000799 07                       3         .byte 7  
      00079A 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007A1                          5         RAMLAST:
      0007A1 90 AE 00 22      [ 2] 1467         ldw y,#URLAST 
      0007A5 1D 00 02         [ 2] 1468         subw x,#CELLL 
      0007A8 FF               [ 2] 1469         ldw (x),y 
      0007A9 81               [ 4] 1470         ret 
                                   1471 
                                   1472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1473 ;       OFFSET ( -- a )
                                   1474 ;       address of system 
                                   1475 ;       variable OFFSET 
                                   1476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AA                       1477         _HEADER OFFSET,6,"OFFSET"
      0007AA 07 99                    1         .word LINK 
                           0007AC     2         LINK=.
      0007AC 06                       3         .byte 6  
      0007AD 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007B3                          5         OFFSET:
      0007B3 1D 00 02         [ 2] 1478         subw x,#CELLL
      0007B6 90 AE 00 1E      [ 2] 1479         ldw y,#UOFFSET 
      0007BA FF               [ 2] 1480         ldw (x),y 
      0007BB 81               [ 4] 1481         ret 
                                   1482 
                                   1483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1484 ; adjust jump address 
                                   1485 ;  adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
                                   1487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BC                       1488 ADRADJ: 
      0007BC CD 07 B3         [ 4] 1489         call OFFSET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007BF CD 04 E3         [ 4] 1490         call AT 
      0007C2 CC 08 3C         [ 2] 1491         jp PLUS 
                                   1492 
                                   1493 
                                   1494 ;; Common functions
                                   1495 
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1497 ;       ?DUP    ( w -- w w | 0 )
                                   1498 ;       Dup tos if its is not zero.
                                   1499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C5                       1500         _HEADER QDUP,4,"?DUP"
      0007C5 07 AC                    1         .word LINK 
                           0007C7     2         LINK=.
      0007C7 04                       3         .byte 4  
      0007C8 3F 44 55 50              4         .ascii "?DUP"
      0007CC                          5         QDUP:
      0007CC 90 93            [ 1] 1501         LDW Y,X
      0007CE 90 FE            [ 2] 1502 	LDW Y,(Y)
      0007D0 27 04            [ 1] 1503         JREQ     QDUP1
      0007D2 1D 00 02         [ 2] 1504 	SUBW X,#CELLL 
      0007D5 FF               [ 2] 1505         LDW (X),Y
      0007D6 81               [ 4] 1506 QDUP1:  RET
                                   1507 
                                   1508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D7                       1512         _HEADER ROT,3,"ROT"
      0007D7 07 C7                    1         .word LINK 
                           0007D9     2         LINK=.
      0007D9 03                       3         .byte 3  
      0007DA 52 4F 54                 4         .ascii "ROT"
      0007DD                          5         ROT:
      0007DD 90 93            [ 1] 1513         ldw y,x 
      0007DF 90 FE            [ 2] 1514         ldw y,(y)
      0007E1 90 89            [ 2] 1515         pushw y 
      0007E3 90 93            [ 1] 1516         ldw y,x 
      0007E5 90 EE 04         [ 2] 1517         ldw y,(4,y)
      0007E8 FF               [ 2] 1518         ldw (x),y 
      0007E9 90 93            [ 1] 1519         ldw y,x 
      0007EB 90 EE 02         [ 2] 1520         ldw y,(2,y)
      0007EE EF 04            [ 2] 1521         ldw (4,x),y 
      0007F0 90 85            [ 2] 1522         popw y 
      0007F2 EF 02            [ 2] 1523         ldw (2,x),y
      0007F4 81               [ 4] 1524         ret 
                                   1525 
                                   1526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1527 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1528 ;    rotate left 3 top elements 
                                   1529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F5                       1530     _HEADER NROT,4,"<ROT"
      0007F5 07 D9                    1         .word LINK 
                           0007F7     2         LINK=.
      0007F7 04                       3         .byte 4  
      0007F8 3C 52 4F 54              4         .ascii "<ROT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0007FC                          5         NROT:
      0007FC 90 93            [ 1] 1531     LDW Y,X 
      0007FE 90 FE            [ 2] 1532     LDW Y,(Y)
      000800 90 89            [ 2] 1533     PUSHW Y ; n3 >R 
      000802 90 93            [ 1] 1534     LDW Y,X 
      000804 90 EE 02         [ 2] 1535     LDW Y,(2,Y) ; Y = n2 
      000807 FF               [ 2] 1536     LDW (X),Y   ; TOS = n2 
      000808 90 93            [ 1] 1537     LDW Y,X    
      00080A 90 EE 04         [ 2] 1538     LDW Y,(4,Y) ; Y = n1 
      00080D EF 02            [ 2] 1539     LDW (2,X),Y ;   = n1 
      00080F 90 85            [ 2] 1540     POPW Y  ; R> Y 
      000811 EF 04            [ 2] 1541     LDW (4,X),Y ; = n3 
      000813 81               [ 4] 1542     RET 
                                   1543 
                                   1544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1545 ;       2DROP   ( w w -- )
                                   1546 ;       Discard two items on stack.
                                   1547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000814                       1548         _HEADER DDROP,5,"2DROP"
      000814 07 F7                    1         .word LINK 
                           000816     2         LINK=.
      000816 05                       3         .byte 5  
      000817 32 44 52 4F 50           4         .ascii "2DROP"
      00081C                          5         DDROP:
      00081C 1C 00 04         [ 2] 1549         ADDW X,#4
      00081F 81               [ 4] 1550         RET
                                   1551 
                                   1552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1553 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1554 ;       Duplicate top two items.
                                   1555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000820                       1556         _HEADER DDUP,4,"2DUP"
      000820 08 16                    1         .word LINK 
                           000822     2         LINK=.
      000822 04                       3         .byte 4  
      000823 32 44 55 50              4         .ascii "2DUP"
      000827                          5         DDUP:
      000827 1D 00 04         [ 2] 1557         SUBW X,#4
      00082A 90 93            [ 1] 1558         LDW Y,X
      00082C 90 EE 06         [ 2] 1559         LDW Y,(6,Y)
      00082F EF 02            [ 2] 1560         LDW (2,X),Y
      000831 90 93            [ 1] 1561         LDW Y,X
      000833 90 EE 04         [ 2] 1562         LDW Y,(4,Y)
      000836 FF               [ 2] 1563         LDW (X),Y
      000837 81               [ 4] 1564         RET
                                   1565 
                                   1566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1567 ;       +       ( w w -- sum )
                                   1568 ;       Add top two items.
                                   1569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000838                       1570         _HEADER PLUS,1,"+"
      000838 08 22                    1         .word LINK 
                           00083A     2         LINK=.
      00083A 01                       3         .byte 1  
      00083B 2B                       4         .ascii "+"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00083C                          5         PLUS:
      00083C 90 93            [ 1] 1571         LDW Y,X
      00083E 90 FE            [ 2] 1572         LDW Y,(Y)
      000840 90 BF 26         [ 2] 1573         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1574         ADDW X,#2
      000846 90 93            [ 1] 1575         LDW Y,X
      000848 90 FE            [ 2] 1576         LDW Y,(Y)
      00084A 72 B9 00 26      [ 2] 1577         ADDW Y,YTEMP
      00084E FF               [ 2] 1578         LDW (X),Y
      00084F 81               [ 4] 1579         RET
                                   1580 
                                   1581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1582 ;       TRUE ( -- -1 )
                                   1583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000850                       1584         _HEADER TRUE,4,"TRUE"
      000850 08 3A                    1         .word LINK 
                           000852     2         LINK=.
      000852 04                       3         .byte 4  
      000853 54 52 55 45              4         .ascii "TRUE"
      000857                          5         TRUE:
      000857 A6 FF            [ 1] 1585         LD A,#255 
      000859 1D 00 02         [ 2] 1586         SUBW X,#CELLL
      00085C F7               [ 1] 1587         LD (X),A 
      00085D E7 01            [ 1] 1588         LD (1,X),A 
      00085F 81               [ 4] 1589         RET 
                                   1590 
                                   1591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1592 ;       FALSE ( -- 0 )
                                   1593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000860                       1594         _HEADER FALSE,5,"FALSE"
      000860 08 52                    1         .word LINK 
                           000862     2         LINK=.
      000862 05                       3         .byte 5  
      000863 46 41 4C 53 45           4         .ascii "FALSE"
      000868                          5         FALSE:
      000868 1D 00 02         [ 2] 1595         SUBW X,#CELLL 
      00086B 7F               [ 1] 1596         CLR (X) 
      00086C 6F 01            [ 1] 1597         CLR (1,X)
      00086E 81               [ 4] 1598         RET 
                                   1599 
                                   1600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1601 ;       NOT     ( w -- w )
                                   1602 ;       One's complement of tos.
                                   1603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086F                       1604         _HEADER INVER,3,"NOT"
      00086F 08 62                    1         .word LINK 
                           000871     2         LINK=.
      000871 03                       3         .byte 3  
      000872 4E 4F 54                 4         .ascii "NOT"
      000875                          5         INVER:
      000875 90 93            [ 1] 1605         LDW Y,X
      000877 90 FE            [ 2] 1606         LDW Y,(Y)
      000879 90 53            [ 2] 1607         CPLW Y
      00087B FF               [ 2] 1608         LDW (X),Y
      00087C 81               [ 4] 1609         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1610 
                                   1611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1612 ;       NEGATE  ( n -- -n )
                                   1613 ;       Two's complement of tos.
                                   1614 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087D                       1615         _HEADER NEGAT,6,"NEGATE"
      00087D 08 71                    1         .word LINK 
                           00087F     2         LINK=.
      00087F 06                       3         .byte 6  
      000880 4E 45 47 41 54 45        4         .ascii "NEGATE"
      000886                          5         NEGAT:
      000886 90 93            [ 1] 1616         LDW Y,X
      000888 90 FE            [ 2] 1617         LDW Y,(Y)
      00088A 90 50            [ 2] 1618         NEGW Y
      00088C FF               [ 2] 1619         LDW (X),Y
      00088D 81               [ 4] 1620         RET
                                   1621 
                                   1622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1623 ;       DNEGATE ( d -- -d )
                                   1624 ;       Two's complement of double.
                                   1625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088E                       1626         _HEADER DNEGA,7,"DNEGATE"
      00088E 08 7F                    1         .word LINK 
                           000890     2         LINK=.
      000890 07                       3         .byte 7  
      000891 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      000898                          5         DNEGA:
      000898 90 93            [ 1] 1627         LDW Y,X
      00089A 90 FE            [ 2] 1628 	LDW Y,(Y)
      00089C 90 53            [ 2] 1629         CPLW Y
      00089E 90 89            [ 2] 1630         PUSHW Y      ; Y >R 
      0008A0 90 93            [ 1] 1631         LDW Y,X
      0008A2 90 EE 02         [ 2] 1632         LDW Y,(2,Y)
      0008A5 90 53            [ 2] 1633         CPLW Y
      0008A7 72 A9 00 01      [ 2] 1634         ADDW Y,#1
      0008AB EF 02            [ 2] 1635         LDW (2,X),Y
      0008AD 90 85            [ 2] 1636         POPW Y       ; R> Y  
      0008AF 24 02            [ 1] 1637         JRNC DN1 
      0008B1 90 5C            [ 1] 1638         INCW Y
      0008B3 FF               [ 2] 1639 DN1:    LDW (X),Y
      0008B4 81               [ 4] 1640         RET
                                   1641 
                                   1642 
                                   1643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1644 ;       S>D ( n -- d )
                                   1645 ; convert single integer to double 
                                   1646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B5                       1647         _HEADER STOD,3,"S>D"
      0008B5 08 90                    1         .word LINK 
                           0008B7     2         LINK=.
      0008B7 03                       3         .byte 3  
      0008B8 53 3E 44                 4         .ascii "S>D"
      0008BB                          5         STOD:
      0008BB 1D 00 02         [ 2] 1648         SUBW X,#CELLL 
      0008BE 7F               [ 1] 1649         CLR (X) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008BF 6F 01            [ 1] 1650         CLR (1,X) 
      0008C1 90 93            [ 1] 1651         LDW Y,X 
      0008C3 90 EE 02         [ 2] 1652         LDW Y,(2,Y)
      0008C6 2A 05            [ 1] 1653         JRPL 1$
      0008C8 90 AE FF FF      [ 2] 1654         LDW Y,#-1 
      0008CC FF               [ 2] 1655         LDW (X),Y 
      0008CD 81               [ 4] 1656 1$:     RET 
                                   1657 
                                   1658 
                                   1659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1660 ;       -       ( n1 n2 -- n1-n2 )
                                   1661 ;       Subtraction.
                                   1662 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008CE                       1663         _HEADER SUBB,1,"-"
      0008CE 08 B7                    1         .word LINK 
                           0008D0     2         LINK=.
      0008D0 01                       3         .byte 1  
      0008D1 2D                       4         .ascii "-"
      0008D2                          5         SUBB:
      0008D2 90 93            [ 1] 1664         LDW Y,X
      0008D4 90 FE            [ 2] 1665         LDW Y,(Y) ; n2 
      0008D6 90 BF 26         [ 2] 1666         LDW YTEMP,Y 
      0008D9 1C 00 02         [ 2] 1667         ADDW X,#CELLL 
      0008DC 90 93            [ 1] 1668         LDW Y,X
      0008DE 90 FE            [ 2] 1669         LDW Y,(Y) ; n1 
      0008E0 72 B2 00 26      [ 2] 1670         SUBW Y,YTEMP ; n1-n2 
      0008E4 FF               [ 2] 1671         LDW (X),Y
      0008E5 81               [ 4] 1672         RET
                                   1673 
                                   1674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1675 ;       ABS     ( n -- n )
                                   1676 ;       Return  absolute value of n.
                                   1677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008E6                       1678         _HEADER ABSS,3,"ABS"
      0008E6 08 D0                    1         .word LINK 
                           0008E8     2         LINK=.
      0008E8 03                       3         .byte 3  
      0008E9 41 42 53                 4         .ascii "ABS"
      0008EC                          5         ABSS:
      0008EC 90 93            [ 1] 1679         LDW Y,X
      0008EE 90 FE            [ 2] 1680 	LDW Y,(Y)
      0008F0 2A 03            [ 1] 1681         JRPL     AB1     ;negate:
      0008F2 90 50            [ 2] 1682         NEGW     Y     ;else negate hi byte
      0008F4 FF               [ 2] 1683         LDW (X),Y
      0008F5 81               [ 4] 1684 AB1:    RET
                                   1685 
                                   1686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1687 ;       =       ( w w -- t )
                                   1688 ;       Return true if top two are equal.
                                   1689 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F6                       1690         _HEADER EQUAL,1,"="
      0008F6 08 E8                    1         .word LINK 
                           0008F8     2         LINK=.
      0008F8 01                       3         .byte 1  
      0008F9 3D                       4         .ascii "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0008FA                          5         EQUAL:
      0008FA A6 FF            [ 1] 1691         LD A,#0xFF  ;true
      0008FC 90 93            [ 1] 1692         LDW Y,X    
      0008FE 90 FE            [ 2] 1693         LDW Y,(Y)   ; n2 
      000900 1C 00 02         [ 2] 1694         ADDW X,#CELLL 
      000903 F3               [ 2] 1695         CPW Y,(X)   ; n1==n2
      000904 27 01            [ 1] 1696         JREQ EQ1 
      000906 4F               [ 1] 1697         CLR A 
      000907 F7               [ 1] 1698 EQ1:    LD (X),A
      000908 E7 01            [ 1] 1699         LD (1,X),A
      00090A 81               [ 4] 1700 	RET     
                                   1701 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1703 ;       U<      ( u1 u2 -- f )
                                   1704 ;       Unsigned compare of top two items.
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00090B                       1706         _HEADER ULESS,2,"U<"
      00090B 08 F8                    1         .word LINK 
                           00090D     2         LINK=.
      00090D 02                       3         .byte 2  
      00090E 55 3C                    4         .ascii "U<"
      000910                          5         ULESS:
      000910 A6 FF            [ 1] 1707         LD A,#0xFF  ;true
      000912 90 93            [ 1] 1708         LDW Y,X    
      000914 90 EE 02         [ 2] 1709         LDW Y,(2,Y) ; u1 
      000917 F3               [ 2] 1710         CPW Y,(X)   ; cpw u1  u2 
      000918 25 01            [ 1] 1711         JRULT     ULES1
      00091A 4F               [ 1] 1712         CLR A
      00091B 1C 00 02         [ 2] 1713 ULES1:  ADDW X,#CELLL 
      00091E F7               [ 1] 1714         LD (X),A
      00091F E7 01            [ 1] 1715         LD (1,X),A
      000921 81               [ 4] 1716 	RET     
                                   1717 
                                   1718 
                                   1719 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1720 ;       <       ( n1 n2 -- t )
                                   1721 ;       Signed compare of top two items.
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000922                       1723         _HEADER LESS,1,"<"
      000922 09 0D                    1         .word LINK 
                           000924     2         LINK=.
      000924 01                       3         .byte 1  
      000925 3C                       4         .ascii "<"
      000926                          5         LESS:
      000926 A6 FF            [ 1] 1724         LD A,#0xFF  ;true
      000928 90 93            [ 1] 1725         LDW Y,X    
      00092A 90 EE 02         [ 2] 1726         LDW Y,(2,Y)  ; n1 
      00092D F3               [ 2] 1727         CPW Y,(X)  ; n1 < n2 ? 
      00092E 2F 01            [ 1] 1728         JRSLT     LT1
      000930 4F               [ 1] 1729         CLR A
      000931 1C 00 02         [ 2] 1730 LT1:    ADDW X,#CELLL 
      000934 F7               [ 1] 1731         LD (X),A
      000935 E7 01            [ 1] 1732         LD (1,X),A
      000937 81               [ 4] 1733 	RET     
                                   1734 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   1735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1736 ;   U> ( u1 u2 -- f )
                                   1737 ;   f = true if u1>u2 
                                   1738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000938                       1739         _HEADER UGREAT,2,"U>"
      000938 09 24                    1         .word LINK 
                           00093A     2         LINK=.
      00093A 02                       3         .byte 2  
      00093B 55 3E                    4         .ascii "U>"
      00093D                          5         UGREAT:
      00093D A6 FF            [ 1] 1740         LD A,#255  
      00093F 90 93            [ 1] 1741         LDW Y,X 
      000941 90 EE 02         [ 2] 1742         LDW Y,(2,Y)  ; u1 
      000944 F3               [ 2] 1743         CPW Y,(X)  ; u1 > u2 
      000945 22 01            [ 1] 1744         JRUGT UGREAT1 
      000947 4F               [ 1] 1745         CLR A   
      000948                       1746 UGREAT1:
      000948 1C 00 02         [ 2] 1747         ADDW X,#CELLL 
      00094B F7               [ 1] 1748         LD (X),A 
      00094C E7 01            [ 1] 1749         LD (1,X),A 
      00094E 81               [ 4] 1750         RET 
                                   1751 
                                   1752 
                                   1753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1754 ;       >   (n1 n2 -- f )
                                   1755 ;  signed compare n1 n2 
                                   1756 ;  true if n1 > n2 
                                   1757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1758         _HEADER GREAT,1,">"
      00094F 09 3A                    1         .word LINK 
                           000951     2         LINK=.
      000951 01                       3         .byte 1  
      000952 3E                       4         .ascii ">"
      000953                          5         GREAT:
      000953 A6 FF            [ 1] 1759         LD A,#0xFF ;
      000955 90 93            [ 1] 1760         LDW Y,X 
      000957 90 EE 02         [ 2] 1761         LDW Y,(2,Y)  ; n1 
      00095A F3               [ 2] 1762         CPW Y,(X) ; n1 > n2 ?  
      00095B 2C 01            [ 1] 1763         JRSGT GREAT1 
      00095D 4F               [ 1] 1764         CLR  A
      00095E                       1765 GREAT1:
      00095E 1C 00 02         [ 2] 1766         ADDW X,#CELLL 
      000961 F7               [ 1] 1767         LD (X),A 
      000962 E7 01            [ 1] 1768         LD (1,X),A 
      000964 81               [ 4] 1769         RET 
                                   1770 
                                   1771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1772 ;       MAX     ( n n -- n )
                                   1773 ;       Return greater of two top items.
                                   1774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000965                       1775         _HEADER MAX,3,"MAX"
      000965 09 51                    1         .word LINK 
                           000967     2         LINK=.
      000967 03                       3         .byte 3  
      000968 4D 41 58                 4         .ascii "MAX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00096B                          5         MAX:
      00096B 90 93            [ 1] 1776         LDW Y,X    
      00096D 90 FE            [ 2] 1777         LDW Y,(Y) ; n2 
      00096F E3 02            [ 2] 1778         CPW Y,(2,X)   
      000971 2F 02            [ 1] 1779         JRSLT  MAX1
      000973 EF 02            [ 2] 1780         LDW (2,X),Y
      000975 1C 00 02         [ 2] 1781 MAX1:   ADDW X,#2
      000978 81               [ 4] 1782 	RET     
                                   1783 
                                   1784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1785 ;       MIN     ( n n -- n )
                                   1786 ;       Return smaller of top two items.
                                   1787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000979                       1788         _HEADER MIN,3,"MIN"
      000979 09 67                    1         .word LINK 
                           00097B     2         LINK=.
      00097B 03                       3         .byte 3  
      00097C 4D 49 4E                 4         .ascii "MIN"
      00097F                          5         MIN:
      00097F 90 93            [ 1] 1789         LDW Y,X    
      000981 90 FE            [ 2] 1790         LDW Y,(Y)  ; n2 
      000983 E3 02            [ 2] 1791         CPW Y,(2,X) 
      000985 2C 02            [ 1] 1792         JRSGT MIN1
      000987 EF 02            [ 2] 1793         LDW (2,X),Y
      000989 1C 00 02         [ 2] 1794 MIN1:	ADDW X,#2
      00098C 81               [ 4] 1795 	RET     
                                   1796 
                                   1797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1798 ;       WITHIN  ( u ul uh -- t )
                                   1799 ;       Return true if u is within
                                   1800 ;       range of ul and uh. ( ul <= u < uh )
                                   1801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00098D                       1802         _HEADER WITHI,6,"WITHIN"
      00098D 09 7B                    1         .word LINK 
                           00098F     2         LINK=.
      00098F 06                       3         .byte 6  
      000990 57 49 54 48 49 4E        4         .ascii "WITHIN"
      000996                          5         WITHI:
      000996 CD 06 41         [ 4] 1803         CALL     OVER
      000999 CD 08 D2         [ 4] 1804         CALL     SUBB
      00099C CD 05 E2         [ 4] 1805         CALL     TOR
      00099F CD 08 D2         [ 4] 1806         CALL     SUBB
      0009A2 CD 05 34         [ 4] 1807         CALL     RFROM
      0009A5 CC 09 10         [ 2] 1808         JP     ULESS
                                   1809 
                                   1810 ;; Divide
                                   1811 
                                   1812 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1813 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1814 ;       Unsigned divide of a double by a
                                   1815 ;       single. Return mod and quotient.
                                   1816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1817 ; 2021-02-22
                                   1818 ; changed algorithm for Jeeek one 
                                   1819 ; ref: https://github.com/TG9541/stm8ef/pull/406        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0009A8                       1820         _HEADER UMMOD,6,"UM/MOD"
      0009A8 09 8F                    1         .word LINK 
                           0009AA     2         LINK=.
      0009AA 06                       3         .byte 6  
      0009AB 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009B1                          5         UMMOD:
      0009B1 90 93            [ 1] 1821         LDW     Y,X             ; stack pointer to Y
      0009B3 FE               [ 2] 1822         LDW     X,(X)           ; un
      0009B4 BF 26            [ 2] 1823         LDW     YTEMP,X         ; save un
      0009B6 93               [ 1] 1824         LDW     X,Y
      0009B7 5C               [ 1] 1825         INCW    X               ; drop un
      0009B8 5C               [ 1] 1826         INCW    X
      0009B9 89               [ 2] 1827         PUSHW   X               ; save stack pointer
      0009BA FE               [ 2] 1828         LDW     X,(X)           ; X=udh
      0009BB 26 0B            [ 1] 1829         JRNE    MMSM0
      0009BD 1E 01            [ 2] 1830         LDW    X,(1,SP)
      0009BF EE 02            [ 2] 1831         LDW    X,(2,X)          ; udl 
      0009C1 90 BE 26         [ 2] 1832         LDW     Y,YTEMP         ;divisor 
      0009C4 65               [ 2] 1833         DIVW    X,Y             ; udl/un 
      0009C5 51               [ 1] 1834         EXGW    X,Y 
      0009C6 20 26            [ 2] 1835         JRA     MMSMb 
      0009C8                       1836 MMSM0:    
      0009C8 90 EE 04         [ 2] 1837         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009CB B3 26            [ 2] 1838         CPW     X,YTEMP
      0009CD 25 09            [ 1] 1839         JRULT   MMSM1           ; X is still on the R-stack
      0009CF 85               [ 2] 1840         POPW    X               ; restore stack pointer
      0009D0 90 5F            [ 1] 1841         CLRW    Y
      0009D2 EF 02            [ 2] 1842         LDW     (2,X),Y         ; remainder 0
      0009D4 90 5A            [ 2] 1843         DECW    Y
      0009D6 FF               [ 2] 1844         LDW     (X),Y           ; quotient max. 16 bit value
      0009D7 81               [ 4] 1845         RET
      0009D8                       1846 MMSM1:
      0009D8 A6 10            [ 1] 1847         LD      A,#16           ; loop count
      0009DA 90 58            [ 2] 1848         SLLW    Y               ; udl shift udl into udh
      0009DC                       1849 MMSM3:
      0009DC 59               [ 2] 1850         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009DD 25 04            [ 1] 1851         JRC     MMSMa           ; if carry out of rotate
      0009DF B3 26            [ 2] 1852         CPW     X,YTEMP         ; compare udh to un
      0009E1 25 05            [ 1] 1853         JRULT   MMSM4           ; can't subtract
      0009E3                       1854 MMSMa:
      0009E3 72 B0 00 26      [ 2] 1855         SUBW    X,YTEMP         ; can subtract
      0009E7 98               [ 1] 1856         RCF
      0009E8                       1857 MMSM4:
      0009E8 8C               [ 1] 1858         CCF                     ; quotient bit
      0009E9 90 59            [ 2] 1859         RLCW    Y               ; rotate into quotient, rotate out udl
      0009EB 4A               [ 1] 1860         DEC     A               ; repeat
      0009EC 26 EE            [ 1] 1861         JRNE    MMSM3           ; if A == 0
      0009EE                       1862 MMSMb:
      0009EE BF 26            [ 2] 1863         LDW     YTEMP,X         ; done, save remainder
      0009F0 85               [ 2] 1864         POPW    X               ; restore stack pointer
      0009F1 FF               [ 2] 1865         LDW     (X),Y           ; save quotient
      0009F2 90 BE 26         [ 2] 1866         LDW     Y,YTEMP         ; remainder onto stack
      0009F5 EF 02            [ 2] 1867         LDW     (2,X),Y
      0009F7 81               [ 4] 1868         RET
                                   1869 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1870 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1871 ;   U/MOD ( u1 u2 -- ur uq )
                                   1872 ;   unsigned divide u1/u2 
                                   1873 ;   return remainder and quotient 
                                   1874 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009F8                       1875         _HEADER USLMOD,5,"U/MOD"
      0009F8 09 AA                    1         .word LINK 
                           0009FA     2         LINK=.
      0009FA 05                       3         .byte 5  
      0009FB 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A00                          5         USLMOD:
      000A00 90 93            [ 1] 1876         LDW Y,X 
      000A02 90 FE            [ 2] 1877         LDW Y,(Y)  ; dividend 
      000A04 89               [ 2] 1878         PUSHW X    ; DP >R 
      000A05 EE 02            [ 2] 1879         LDW X,(2,X) ; divisor 
      000A07 65               [ 2] 1880         DIVW X,Y 
      000A08 89               [ 2] 1881         PUSHW X     ; quotient 
      000A09 1E 03            [ 2] 1882         LDW X,(3,SP) ; DP 
      000A0B EF 02            [ 2] 1883         LDW (2,X),Y ; remainder 
      000A0D 16 01            [ 2] 1884         LDW Y,(1,SP) ; quotient 
      000A0F FF               [ 2] 1885         LDW (X),Y 
      000A10 5B 04            [ 2] 1886         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A12 81               [ 4] 1887         RET 
                                   1888 
                                   1889 
                                   1890 
                                   1891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1892 ;       M/MOD   ( d n -- r q )
                                   1893 ;       Signed floored divide of double by
                                   1894 ;       single. Return mod and quotient.
                                   1895 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A13                       1896         _HEADER MSMOD,5,"M/MOD"
      000A13 09 FA                    1         .word LINK 
                           000A15     2         LINK=.
      000A15 05                       3         .byte 5  
      000A16 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A1B                          5         MSMOD:
      000A1B CD 06 19         [ 4] 1897         CALL	DUPP
      000A1E CD 06 50         [ 4] 1898         CALL	ZLESS
      000A21 CD 06 19         [ 4] 1899         CALL	DUPP
      000A24 CD 05 E2         [ 4] 1900         CALL	TOR
      000A27 CD 04 98         [ 4] 1901         CALL	QBRAN
      000A2A 0A 38                 1902         .word	MMOD1
      000A2C CD 08 86         [ 4] 1903         CALL	NEGAT
      000A2F CD 05 E2         [ 4] 1904         CALL	TOR
      000A32 CD 08 98         [ 4] 1905         CALL	DNEGA
      000A35 CD 05 34         [ 4] 1906         CALL	RFROM
      000A38 CD 05 E2         [ 4] 1907 MMOD1:	CALL	TOR
      000A3B CD 06 19         [ 4] 1908         CALL	DUPP
      000A3E CD 06 50         [ 4] 1909         CALL	ZLESS
      000A41 CD 04 98         [ 4] 1910         CALL	QBRAN
      000A44 0A 4C                 1911         .word	MMOD2
      000A46 CD 05 45         [ 4] 1912         CALL	RAT
      000A49 CD 08 3C         [ 4] 1913         CALL	PLUS
      000A4C CD 05 34         [ 4] 1914 MMOD2:	CALL	RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000A4F CD 09 B1         [ 4] 1915         CALL	UMMOD
      000A52 CD 05 34         [ 4] 1916         CALL	RFROM
      000A55 CD 04 98         [ 4] 1917         CALL	QBRAN
      000A58 0A 63                 1918         .word	MMOD3
      000A5A CD 06 29         [ 4] 1919         CALL	SWAPP
      000A5D CD 08 86         [ 4] 1920         CALL	NEGAT
      000A60 CC 06 29         [ 2] 1921         JP	SWAPP
      000A63 81               [ 4] 1922 MMOD3:	RET
                                   1923 
                                   1924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1925 ;       /MOD    ( n1 n2 -- r q )
                                   1926 ;       Signed divide n1/n2. 
                                   1927 ;       Return mod and quotient.
                                   1928 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A64                       1929         _HEADER SLMOD,4,"/MOD"
      000A64 0A 15                    1         .word LINK 
                           000A66     2         LINK=.
      000A66 04                       3         .byte 4  
      000A67 2F 4D 4F 44              4         .ascii "/MOD"
      000A6B                          5         SLMOD:
      000A6B F6               [ 1] 1930         LD A,(X)
      000A6C 88               [ 1] 1931         PUSH A   ; n2 sign 
      000A6D E6 02            [ 1] 1932         LD A,(2,X)
      000A6F 88               [ 1] 1933         PUSH A    ; n1 sign 
      000A70 CD 08 EC         [ 4] 1934         CALL ABSS 
      000A73 CD 05 E2         [ 4] 1935         CALL TOR  ; 
      000A76 CD 08 EC         [ 4] 1936         CALL ABSS 
      000A79 CD 05 45         [ 4] 1937         CALL RAT   
      000A7C CD 0A 00         [ 4] 1938         CALL USLMOD 
      000A7F 7B 03            [ 1] 1939         LD A,(3,SP)
      000A81 1A 04            [ 1] 1940         OR A,(4,SP)
      000A83 2A 25            [ 1] 1941         JRPL SLMOD8 ; both positive nothing to change 
      000A85 7B 03            [ 1] 1942         LD A,(3,SP)
      000A87 18 04            [ 1] 1943         XOR A,(4,SP)
      000A89 2A 12            [ 1] 1944         JRPL SLMOD1
                                   1945 ; dividend and divisor are opposite sign          
      000A8B CD 0B 97         [ 4] 1946         CALL ONEP   ; add one to quotient 
      000A8E CD 08 86         [ 4] 1947         CALL NEGAT ; negative quotient
      000A91 CD 05 45         [ 4] 1948         CALL RAT 
      000A94 CD 07 DD         [ 4] 1949         CALL ROT 
      000A97 CD 08 D2         [ 4] 1950         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000A9A CD 06 29         [ 4] 1951         CALL SWAPP
      000A9D                       1952 SLMOD1:
      000A9D 7B 04            [ 1] 1953         LD A,(4,SP) ; divisor sign 
      000A9F 2A 09            [ 1] 1954         JRPL SLMOD8 
      000AA1 CD 05 E2         [ 4] 1955         CALL TOR 
      000AA4 CD 08 86         [ 4] 1956         CALL NEGAT ; if divisor negative negate remainder 
      000AA7 CD 05 34         [ 4] 1957         CALL RFROM 
      000AAA                       1958 SLMOD8: 
      000AAA 5B 04            [ 2] 1959         ADDW SP,#4 
      000AAC 81               [ 4] 1960         RET 
                                   1961 
                                   1962 
                                   1963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1964 ;       MOD     ( n n -- r )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1965 ;       Signed divide. Return mod only.
                                   1966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AAD                       1967         _HEADER MODD,3,"MOD"
      000AAD 0A 66                    1         .word LINK 
                           000AAF     2         LINK=.
      000AAF 03                       3         .byte 3  
      000AB0 4D 4F 44                 4         .ascii "MOD"
      000AB3                          5         MODD:
      000AB3 CD 0A 6B         [ 4] 1968 	CALL	SLMOD
      000AB6 CC 06 0F         [ 2] 1969 	JP	DROP
                                   1970 
                                   1971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1972 ;       /       ( n n -- q )
                                   1973 ;       Signed divide. Return quotient only.
                                   1974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AB9                       1975         _HEADER SLASH,1,"/"
      000AB9 0A AF                    1         .word LINK 
                           000ABB     2         LINK=.
      000ABB 01                       3         .byte 1  
      000ABC 2F                       4         .ascii "/"
      000ABD                          5         SLASH:
      000ABD CD 0A 6B         [ 4] 1976         CALL	SLMOD
      000AC0 CD 06 29         [ 4] 1977         CALL	SWAPP
      000AC3 CC 06 0F         [ 2] 1978         JP	DROP
                                   1979 
                                   1980 ;; Multiply
                                   1981 
                                   1982 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1983 ;       UM*     ( u1 u2 -- ud )
                                   1984 ;       Unsigned multiply. Return 
                                   1985 ;       double product.
                                   1986 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC6                       1987         _HEADER UMSTA,3,"UM*"
      000AC6 0A BB                    1         .word LINK 
                           000AC8     2         LINK=.
      000AC8 03                       3         .byte 3  
      000AC9 55 4D 2A                 4         .ascii "UM*"
      000ACC                          5         UMSTA:
                                   1988 ; stack have 4 bytes u1=a:b u2=c:d
                                   1989         ;; bytes offset on data stack 
                           000002  1990         da=2 
                           000003  1991         db=3 
                           000000  1992         dc=0 
                           000001  1993         dd=1 
                                   1994         ;;;;;; local variables ;;;;;;;;;
                                   1995         ;; product bytes offset on return stack 
                           000001  1996         UD1=1  ; ud bits 31..24
                           000002  1997         UD2=2  ; ud bits 23..16
                           000003  1998         UD3=3  ; ud bits 15..8 
                           000004  1999         UD4=4  ; ud bits 7..0 
                                   2000         ;; local variable for product set to zero   
      000ACC 90 5F            [ 1] 2001         clrw y 
      000ACE 90 89            [ 2] 2002         pushw y  ; bits 15..0
      000AD0 90 89            [ 2] 2003         pushw y  ; bits 31..16 
      000AD2 E6 03            [ 1] 2004         ld a,(db,x) ; b 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000AD4 90 97            [ 1] 2005         ld yl,a 
      000AD6 E6 01            [ 1] 2006         ld a,(dd,x)   ; d
      000AD8 90 42            [ 4] 2007         mul y,a    ; b*d  
      000ADA 17 03            [ 2] 2008         ldw (UD3,sp),y ; lowest weight product 
      000ADC E6 03            [ 1] 2009         ld a,(db,x)
      000ADE 90 97            [ 1] 2010         ld yl,a 
      000AE0 E6 00            [ 1] 2011         ld a,(dc,x)
      000AE2 90 42            [ 4] 2012         mul y,a  ; b*c 
                                   2013         ;;; do the partial sum 
      000AE4 72 F9 02         [ 2] 2014         addw y,(UD2,sp)
      000AE7 4F               [ 1] 2015         clr a 
      000AE8 49               [ 1] 2016         rlc a
      000AE9 6B 01            [ 1] 2017         ld (UD1,sp),a 
      000AEB 17 02            [ 2] 2018         ldw (UD2,sp),y 
      000AED E6 02            [ 1] 2019         ld a,(da,x)
      000AEF 90 97            [ 1] 2020         ld yl,a 
      000AF1 E6 01            [ 1] 2021         ld a,(dd,x)
      000AF3 90 42            [ 4] 2022         mul y,a   ; a*d 
                                   2023         ;; do partial sum 
      000AF5 72 F9 02         [ 2] 2024         addw y,(UD2,sp)
      000AF8 4F               [ 1] 2025         clr a 
      000AF9 19 01            [ 1] 2026         adc a,(UD1,sp)
      000AFB 6B 01            [ 1] 2027         ld (UD1,sp),a  
      000AFD 17 02            [ 2] 2028         ldw (UD2,sp),y 
      000AFF E6 02            [ 1] 2029         ld a,(da,x)
      000B01 90 97            [ 1] 2030         ld yl,a 
      000B03 E6 00            [ 1] 2031         ld a,(dc,x)
      000B05 90 42            [ 4] 2032         mul y,a  ;  a*c highest weight product 
                                   2033         ;;; do partial sum 
      000B07 72 F9 01         [ 2] 2034         addw y,(UD1,sp)
      000B0A FF               [ 2] 2035         ldw (x),y  ; udh 
      000B0B 16 03            [ 2] 2036         ldw y,(UD3,sp)
      000B0D EF 02            [ 2] 2037         ldw (2,x),y  ; udl  
      000B0F 5B 04            [ 2] 2038         addw sp,#4 ; drop local variable 
      000B11 81               [ 4] 2039         ret  
                                   2040 
                                   2041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2042 ;       *       ( n n -- n )
                                   2043 ;       Signed multiply. Return 
                                   2044 ;       single product.
                                   2045 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B12                       2046         _HEADER STAR,1,"*"
      000B12 0A C8                    1         .word LINK 
                           000B14     2         LINK=.
      000B14 01                       3         .byte 1  
      000B15 2A                       4         .ascii "*"
      000B16                          5         STAR:
      000B16 CD 0A CC         [ 4] 2047 	CALL	UMSTA
      000B19 CC 06 0F         [ 2] 2048 	JP	DROP
                                   2049 
                                   2050 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2051 ;       M*      ( n n -- d )
                                   2052 ;       Signed multiply. Return 
                                   2053 ;       double product.
                                   2054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B1C                       2055         _HEADER MSTAR,2,"M*"
      000B1C 0B 14                    1         .word LINK 
                           000B1E     2         LINK=.
      000B1E 02                       3         .byte 2  
      000B1F 4D 2A                    4         .ascii "M*"
      000B21                          5         MSTAR:
      000B21 CD 08 27         [ 4] 2056         CALL	DDUP
      000B24 CD 06 9F         [ 4] 2057         CALL	XORR
      000B27 CD 06 50         [ 4] 2058         CALL	ZLESS
      000B2A CD 05 E2         [ 4] 2059         CALL	TOR
      000B2D CD 08 EC         [ 4] 2060         CALL	ABSS
      000B30 CD 06 29         [ 4] 2061         CALL	SWAPP
      000B33 CD 08 EC         [ 4] 2062         CALL	ABSS
      000B36 CD 0A CC         [ 4] 2063         CALL	UMSTA
      000B39 CD 05 34         [ 4] 2064         CALL	RFROM
      000B3C CD 04 98         [ 4] 2065         CALL	QBRAN
      000B3F 0B 44                 2066         .word	MSTA1
      000B41 CC 08 98         [ 2] 2067         JP	DNEGA
      000B44 81               [ 4] 2068 MSTA1:	RET
                                   2069 
                                   2070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2071 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2072 ;       Multiply n1 and n2, then divide
                                   2073 ;       by n3. Return mod and quotient.
                                   2074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B45                       2075         _HEADER SSMOD,5,"*/MOD"
      000B45 0B 1E                    1         .word LINK 
                           000B47     2         LINK=.
      000B47 05                       3         .byte 5  
      000B48 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B4D                          5         SSMOD:
      000B4D CD 05 E2         [ 4] 2076         CALL     TOR
      000B50 CD 0B 21         [ 4] 2077         CALL     MSTAR
      000B53 CD 05 34         [ 4] 2078         CALL     RFROM
      000B56 CC 0A 1B         [ 2] 2079         JP     MSMOD
                                   2080 
                                   2081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2082 ;       */      ( n1 n2 n3 -- q )
                                   2083 ;       Multiply n1 by n2, then divide
                                   2084 ;       by n3. Return quotient only.
                                   2085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B59                       2086         _HEADER STASL,2,"*/"
      000B59 0B 47                    1         .word LINK 
                           000B5B     2         LINK=.
      000B5B 02                       3         .byte 2  
      000B5C 2A 2F                    4         .ascii "*/"
      000B5E                          5         STASL:
      000B5E CD 0B 4D         [ 4] 2087         CALL	SSMOD
      000B61 CD 06 29         [ 4] 2088         CALL	SWAPP
      000B64 CC 06 0F         [ 2] 2089         JP	DROP
                                   2090 
                                   2091 ;; Miscellaneous
                                   2092 
                                   2093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2094 ;       2+   ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2095 ;       Add cell size in byte to address.
                                   2096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B67                       2097         _HEADER CELLP,2,"2+"
      000B67 0B 5B                    1         .word LINK 
                           000B69     2         LINK=.
      000B69 02                       3         .byte 2  
      000B6A 32 2B                    4         .ascii "2+"
      000B6C                          5         CELLP:
      000B6C 90 93            [ 1] 2098         LDW Y,X
      000B6E 90 FE            [ 2] 2099 	LDW Y,(Y)
      000B70 72 A9 00 02      [ 2] 2100         ADDW Y,#CELLL 
      000B74 FF               [ 2] 2101         LDW (X),Y
      000B75 81               [ 4] 2102         RET
                                   2103 
                                   2104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2105 ;       2-   ( a -- a )
                                   2106 ;       Subtract 2 from address.
                                   2107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B76                       2108         _HEADER CELLM,2,"2-"
      000B76 0B 69                    1         .word LINK 
                           000B78     2         LINK=.
      000B78 02                       3         .byte 2  
      000B79 32 2D                    4         .ascii "2-"
      000B7B                          5         CELLM:
      000B7B 90 93            [ 1] 2109         LDW Y,X
      000B7D 90 FE            [ 2] 2110 	LDW Y,(Y)
      000B7F 72 A2 00 02      [ 2] 2111         SUBW Y,#CELLL
      000B83 FF               [ 2] 2112         LDW (X),Y
      000B84 81               [ 4] 2113         RET
                                   2114 
                                   2115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2116 ;       2*   ( n -- n )
                                   2117 ;       Multiply tos by 2.
                                   2118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B85                       2119         _HEADER CELLS,2,"2*"
      000B85 0B 78                    1         .word LINK 
                           000B87     2         LINK=.
      000B87 02                       3         .byte 2  
      000B88 32 2A                    4         .ascii "2*"
      000B8A                          5         CELLS:
      000B8A 90 93            [ 1] 2120         LDW Y,X
      000B8C 90 FE            [ 2] 2121 	LDW Y,(Y)
      000B8E 90 58            [ 2] 2122         SLAW Y
      000B90 FF               [ 2] 2123         LDW (X),Y
      000B91 81               [ 4] 2124         RET
                                   2125 
                                   2126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2127 ;       1+      ( a -- a )
                                   2128 ;       Add cell size in byte 
                                   2129 ;       to address.
                                   2130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B92                       2131         _HEADER ONEP,2,"1+"
      000B92 0B 87                    1         .word LINK 
                           000B94     2         LINK=.
      000B94 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000B95 31 2B                    4         .ascii "1+"
      000B97                          5         ONEP:
      000B97 90 93            [ 1] 2132         LDW Y,X
      000B99 90 FE            [ 2] 2133 	LDW Y,(Y)
      000B9B 90 5C            [ 1] 2134         INCW Y
      000B9D FF               [ 2] 2135         LDW (X),Y
      000B9E 81               [ 4] 2136         RET
                                   2137 
                                   2138 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2139 ;       1-      ( a -- a )
                                   2140 ;       Subtract 2 from address.
                                   2141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9F                       2142         _HEADER ONEM,2,"1-"
      000B9F 0B 94                    1         .word LINK 
                           000BA1     2         LINK=.
      000BA1 02                       3         .byte 2  
      000BA2 31 2D                    4         .ascii "1-"
      000BA4                          5         ONEM:
      000BA4 90 93            [ 1] 2143         LDW Y,X
      000BA6 90 FE            [ 2] 2144 	LDW Y,(Y)
      000BA8 90 5A            [ 2] 2145         DECW Y
      000BAA FF               [ 2] 2146         LDW (X),Y
      000BAB 81               [ 4] 2147         RET
                                   2148 
                                   2149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2150 ;  shift left n times 
                                   2151 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAC                       2153         _HEADER LSHIFT,6,"LSHIFT"
      000BAC 0B A1                    1         .word LINK 
                           000BAE     2         LINK=.
      000BAE 06                       3         .byte 6  
      000BAF 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BB5                          5         LSHIFT:
      000BB5 E6 01            [ 1] 2154         ld a,(1,x)
      000BB7 1C 00 02         [ 2] 2155         addw x,#CELLL 
      000BBA 90 93            [ 1] 2156         ldw y,x 
      000BBC 90 FE            [ 2] 2157         ldw y,(y)
      000BBE                       2158 LSHIFT1:
      000BBE 4D               [ 1] 2159         tnz a 
      000BBF 27 05            [ 1] 2160         jreq LSHIFT4 
      000BC1 90 58            [ 2] 2161         sllw y 
      000BC3 4A               [ 1] 2162         dec a 
      000BC4 20 F8            [ 2] 2163         jra LSHIFT1 
      000BC6                       2164 LSHIFT4:
      000BC6 FF               [ 2] 2165         ldw (x),y 
      000BC7 81               [ 4] 2166         ret 
                                   2167 
                                   2168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2169 ; shift right n times                 
                                   2170 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC8                       2172         _HEADER RSHIFT,6,"RSHIFT"
      000BC8 0B AE                    1         .word LINK 
                           000BCA     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BCA 06                       3         .byte 6  
      000BCB 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BD1                          5         RSHIFT:
      000BD1 E6 01            [ 1] 2173         ld a,(1,x)
      000BD3 1C 00 02         [ 2] 2174         addw x,#CELLL 
      000BD6 90 93            [ 1] 2175         ldw y,x 
      000BD8 90 FE            [ 2] 2176         ldw y,(y)
      000BDA                       2177 RSHIFT1:
      000BDA 4D               [ 1] 2178         tnz a 
      000BDB 27 05            [ 1] 2179         jreq RSHIFT4 
      000BDD 90 54            [ 2] 2180         srlw y 
      000BDF 4A               [ 1] 2181         dec a 
      000BE0 20 F8            [ 2] 2182         jra RSHIFT1 
      000BE2                       2183 RSHIFT4:
      000BE2 FF               [ 2] 2184         ldw (x),y 
      000BE3 81               [ 4] 2185         ret 
                                   2186 
                                   2187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2188 ;       2/      ( n -- n )
                                   2189 ;       divide  tos by 2.
                                   2190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE4                       2191         _HEADER TWOSL,2,"2/"
      000BE4 0B CA                    1         .word LINK 
                           000BE6     2         LINK=.
      000BE6 02                       3         .byte 2  
      000BE7 32 2F                    4         .ascii "2/"
      000BE9                          5         TWOSL:
      000BE9 90 93            [ 1] 2192         LDW Y,X
      000BEB 90 FE            [ 2] 2193 	LDW Y,(Y)
      000BED 90 57            [ 2] 2194         SRAW Y
      000BEF FF               [ 2] 2195         LDW (X),Y
      000BF0 81               [ 4] 2196         RET
                                   2197 
                                   2198 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2199 ;       BL      ( -- 32 )
                                   2200 ;       Return 32,  blank character.
                                   2201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF1                       2202         _HEADER BLANK,2,"BL"
      000BF1 0B E6                    1         .word LINK 
                           000BF3     2         LINK=.
      000BF3 02                       3         .byte 2  
      000BF4 42 4C                    4         .ascii "BL"
      000BF6                          5         BLANK:
      000BF6 1D 00 02         [ 2] 2203         SUBW X,#2
      000BF9 90 AE 00 20      [ 2] 2204 	LDW Y,#32
      000BFD FF               [ 2] 2205         LDW (X),Y
      000BFE 81               [ 4] 2206         RET
                                   2207 
                                   2208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2209 ;         0     ( -- 0)
                                   2210 ;         Return 0.
                                   2211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFF                       2212         _HEADER ZERO,1,"0"
      000BFF 0B F3                    1         .word LINK 
                           000C01     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C01 01                       3         .byte 1  
      000C02 30                       4         .ascii "0"
      000C03                          5         ZERO:
      000C03 1D 00 02         [ 2] 2213         SUBW X,#2
      000C06 90 5F            [ 1] 2214 	CLRW Y
      000C08 FF               [ 2] 2215         LDW (X),Y
      000C09 81               [ 4] 2216         RET
                                   2217 
                                   2218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2219 ;         1     ( -- 1)
                                   2220 ;         Return 1.
                                   2221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0A                       2222         _HEADER ONE,1,"1"
      000C0A 0C 01                    1         .word LINK 
                           000C0C     2         LINK=.
      000C0C 01                       3         .byte 1  
      000C0D 31                       4         .ascii "1"
      000C0E                          5         ONE:
      000C0E 1D 00 02         [ 2] 2223         SUBW X,#2
      000C11 90 AE 00 01      [ 2] 2224 	LDW Y,#1
      000C15 FF               [ 2] 2225         LDW (X),Y
      000C16 81               [ 4] 2226         RET
                                   2227 
                                   2228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2229 ;         -1    ( -- -1)
                                   2230 ;   Return -1
                                   2231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C17                       2232         _HEADER MONE,2,"-1"
      000C17 0C 0C                    1         .word LINK 
                           000C19     2         LINK=.
      000C19 02                       3         .byte 2  
      000C1A 2D 31                    4         .ascii "-1"
      000C1C                          5         MONE:
      000C1C 1D 00 02         [ 2] 2233         SUBW X,#2
      000C1F 90 AE FF FF      [ 2] 2234 	LDW Y,#0xFFFF
      000C23 FF               [ 2] 2235         LDW (X),Y
      000C24 81               [ 4] 2236         RET
                                   2237 
                                   2238 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2239 ;       >CHAR   ( c -- c )
                                   2240 ;       Filter non-printing characters.
                                   2241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C25                       2242         _HEADER TCHAR,5,">CHAR"
      000C25 0C 19                    1         .word LINK 
                           000C27     2         LINK=.
      000C27 05                       3         .byte 5  
      000C28 3E 43 48 41 52           4         .ascii ">CHAR"
      000C2D                          5         TCHAR:
      000C2D E6 01            [ 1] 2243         ld a,(1,x)
      000C2F A1 20            [ 1] 2244         cp a,#32  
      000C31 2B 05            [ 1] 2245         jrmi 1$ 
      000C33 A1 7F            [ 1] 2246         cp a,#127 
      000C35 2A 01            [ 1] 2247         jrpl 1$ 
      000C37 81               [ 4] 2248         ret 
      000C38 A6 5F            [ 1] 2249 1$:     ld a,#'_ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000C3A E7 01            [ 1] 2250         ld (1,x),a 
      000C3C 81               [ 4] 2251         ret 
                                   2252 
                                   2253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2254 ;       DEPTH   ( -- n )
                                   2255 ;       Return  depth of  data stack.
                                   2256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3D                       2257         _HEADER DEPTH,5,"DEPTH"
      000C3D 0C 27                    1         .word LINK 
                           000C3F     2         LINK=.
      000C3F 05                       3         .byte 5  
      000C40 44 45 50 54 48           4         .ascii "DEPTH"
      000C45                          5         DEPTH:
      000C45 90 BE 2C         [ 2] 2258         LDW Y,SP0    ;save data stack ptr
      000C48 BF 24            [ 2] 2259 	LDW XTEMP,X
      000C4A 72 B2 00 24      [ 2] 2260         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C4E 90 57            [ 2] 2261         SRAW Y    ;Y = #stack items
      000C50 1D 00 02         [ 2] 2262 	SUBW X,#2
      000C53 FF               [ 2] 2263         LDW (X),Y     ; if neg, underflow
      000C54 81               [ 4] 2264         RET
                                   2265 
                                   2266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2267 ;       PICK    ( ... +n -- ... w )
                                   2268 ;       Copy  nth stack item to tos.
                                   2269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C55                       2270         _HEADER PICK,4,"PICK"
      000C55 0C 3F                    1         .word LINK 
                           000C57     2         LINK=.
      000C57 04                       3         .byte 4  
      000C58 50 49 43 4B              4         .ascii "PICK"
      000C5C                          5         PICK:
      000C5C 90 93            [ 1] 2271         LDW Y,X   ;D = n1
      000C5E 90 FE            [ 2] 2272         LDW Y,(Y)
                                   2273 ; modified for standard compliance          
                                   2274 ; 0 PICK must be equivalent to DUP 
      000C60 90 5C            [ 1] 2275         INCW Y 
      000C62 90 58            [ 2] 2276         SLAW Y
      000C64 BF 24            [ 2] 2277         LDW XTEMP,X
      000C66 72 B9 00 24      [ 2] 2278         ADDW Y,XTEMP
      000C6A 90 FE            [ 2] 2279         LDW Y,(Y)
      000C6C FF               [ 2] 2280         LDW (X),Y
      000C6D 81               [ 4] 2281         RET
                                   2282 
                                   2283 ;; Memory access
                                   2284 
                                   2285 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2286 ;       +!      ( n a -- )
                                   2287 ;       Add n to  contents at 
                                   2288 ;       address a.
                                   2289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C6E                       2290         _HEADER PSTOR,2,"+!"
      000C6E 0C 57                    1         .word LINK 
                           000C70     2         LINK=.
      000C70 02                       3         .byte 2  
      000C71 2B 21                    4         .ascii "+!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000C73                          5         PSTOR:
      000C73 89               [ 2] 2291         PUSHW X   ; R: DP 
      000C74 90 93            [ 1] 2292         LDW Y,X 
      000C76 FE               [ 2] 2293         LDW X,(X) ; a 
      000C77 90 EE 02         [ 2] 2294         LDW Y,(2,Y)  ; n 
      000C7A 90 89            [ 2] 2295         PUSHW Y      ; R: DP n 
      000C7C 90 93            [ 1] 2296         LDW Y,X 
      000C7E 90 FE            [ 2] 2297         LDW Y,(Y)
      000C80 72 F9 01         [ 2] 2298         ADDW Y,(1,SP) ; *a + n 
      000C83 FF               [ 2] 2299         LDW (X),Y 
      000C84 1E 03            [ 2] 2300         LDW X,(3,SP) ; DP
      000C86 1C 00 04         [ 2] 2301         ADDW X,#2*CELLL  ; ( n a -- )  
      000C89 5B 04            [ 2] 2302         ADDW SP,#2*CELLL ; R: DP n -- 
      000C8B 81               [ 4] 2303         RET 
                                   2304                 
                                   2305 
                                   2306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2307 ;       2!      ( d a -- )
                                   2308 ;       Store  double integer 
                                   2309 ;       to address a.
                                   2310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8C                       2311         _HEADER DSTOR,2,"2!"
      000C8C 0C 70                    1         .word LINK 
                           000C8E     2         LINK=.
      000C8E 02                       3         .byte 2  
      000C8F 32 21                    4         .ascii "2!"
      000C91                          5         DSTOR:
      000C91 90 93            [ 1] 2312         LDW Y,X 
      000C93 89               [ 2] 2313         PUSHW X 
      000C94 FE               [ 2] 2314         LDW X,(X) ; a 
      000C95 90 EE 02         [ 2] 2315         LDW Y,(2,Y) ; dhi 
      000C98 FF               [ 2] 2316         LDW (X),Y 
      000C99 16 01            [ 2] 2317         LDW Y,(1,SP)  
      000C9B 90 EE 04         [ 2] 2318         LDW Y,(4,Y) ; dlo 
      000C9E EF 02            [ 2] 2319         LDW (2,X),Y  
      000CA0 85               [ 2] 2320         POPW X 
      000CA1 1C 00 06         [ 2] 2321         ADDW X,#3*CELLL 
      000CA4 81               [ 4] 2322         RET 
                                   2323 
                                   2324 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2325 ;       2@      ( a -- d )
                                   2326 ;       Fetch double integer 
                                   2327 ;       from address a.
                                   2328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA5                       2329         _HEADER DAT,2,"2@"
      000CA5 0C 8E                    1         .word LINK 
                           000CA7     2         LINK=.
      000CA7 02                       3         .byte 2  
      000CA8 32 40                    4         .ascii "2@"
      000CAA                          5         DAT:
      000CAA 90 93            [ 1] 2330         ldw y,x 
      000CAC 1D 00 02         [ 2] 2331         subw x,#CELLL 
      000CAF 90 FE            [ 2] 2332         ldw y,(y) ;address 
      000CB1 90 89            [ 2] 2333         pushw y  
      000CB3 90 FE            [ 2] 2334         ldw y,(y) ; dhi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CB5 FF               [ 2] 2335         ldw (x),y 
      000CB6 90 85            [ 2] 2336         popw y 
      000CB8 90 EE 02         [ 2] 2337         ldw y,(2,y) ; dlo 
      000CBB EF 02            [ 2] 2338         ldw (2,x),y 
      000CBD 81               [ 4] 2339         ret 
                                   2340 
                                   2341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2342 ;       COUNT   ( b -- b +n )
                                   2343 ;       Return count byte of a string
                                   2344 ;       and add 1 to byte address.
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBE                       2346         _HEADER COUNT,5,"COUNT"
      000CBE 0C A7                    1         .word LINK 
                           000CC0     2         LINK=.
      000CC0 05                       3         .byte 5  
      000CC1 43 4F 55 4E 54           4         .ascii "COUNT"
      000CC6                          5         COUNT:
      000CC6 90 93            [ 1] 2347         ldw y,x 
      000CC8 90 FE            [ 2] 2348         ldw y,(y) ; address 
      000CCA 90 F6            [ 1] 2349         ld a,(y)  ; count 
      000CCC 90 5C            [ 1] 2350         incw y 
      000CCE FF               [ 2] 2351         ldw (x),y 
      000CCF 1D 00 02         [ 2] 2352         subw x,#CELLL 
      000CD2 E7 01            [ 1] 2353         ld (1,x),a 
      000CD4 7F               [ 1] 2354         clr (x)
      000CD5 81               [ 4] 2355         ret 
                                   2356 
                                   2357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2358 ;       HERE    ( -- a )
                                   2359 ;       Return  top of  variables
                                   2360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CD6                       2361         _HEADER HERE,4,"HERE"
      000CD6 0C C0                    1         .word LINK 
                           000CD8     2         LINK=.
      000CD8 04                       3         .byte 4  
      000CD9 48 45 52 45              4         .ascii "HERE"
      000CDD                          5         HERE:
      000CDD 90 AE 00 18      [ 2] 2362       	ldw y,#UVP 
      000CE1 90 FE            [ 2] 2363         ldw y,(y)
      000CE3 1D 00 02         [ 2] 2364         subw x,#CELLL 
      000CE6 FF               [ 2] 2365         ldw (x),y 
      000CE7 81               [ 4] 2366         ret 
                                   2367 
                                   2368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2369 ;       PAD     ( -- a )
                                   2370 ;       Return address of text buffer
                                   2371 ;       above  code dictionary.
                                   2372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE8                       2373         _HEADER PAD,3,"PAD"
      000CE8 0C D8                    1         .word LINK 
                           000CEA     2         LINK=.
      000CEA 03                       3         .byte 3  
      000CEB 50 41 44                 4         .ascii "PAD"
      000CEE                          5         PAD:
      000CEE CD 0C DD         [ 4] 2374         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000CF1                       2375         _DOLIT   80
      000CF1 CD 04 6F         [ 4]    1     CALL DOLIT 
      000CF4 00 50                    2     .word 80 
      000CF6 CC 08 3C         [ 2] 2376         JP     PLUS
                                   2377 
                                   2378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2379 ;       TIB     ( -- a )
                                   2380 ;       Return address of 
                                   2381 ;       terminal input buffer.
                                   2382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF9                       2383         _HEADER TIB,3,"TIB"
      000CF9 0C EA                    1         .word LINK 
                           000CFB     2         LINK=.
      000CFB 03                       3         .byte 3  
      000CFC 54 49 42                 4         .ascii "TIB"
      000CFF                          5         TIB:
      000CFF CD 07 0D         [ 4] 2384         CALL     NTIB
      000D02 CD 0B 6C         [ 4] 2385         CALL     CELLP
      000D05 CC 04 E3         [ 2] 2386         JP     AT
                                   2387 
                                   2388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2389 ;       @EXECUTE        ( a -- )
                                   2390 ;       Execute vector stored in 
                                   2391 ;       address a.
                                   2392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D08                       2393         _HEADER ATEXE,8,"@EXECUTE"
      000D08 0C FB                    1         .word LINK 
                           000D0A     2         LINK=.
      000D0A 08                       3         .byte 8  
      000D0B 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D13                          5         ATEXE:
      000D13 CD 04 E3         [ 4] 2394         CALL     AT
      000D16 CD 07 CC         [ 4] 2395         CALL     QDUP    ;?address or zero
      000D19 CD 04 98         [ 4] 2396         CALL     QBRAN
      000D1C 0D 21                 2397         .word      EXE1
      000D1E CD 04 C4         [ 4] 2398         CALL     EXECU   ;execute if non-zero
      000D21 81               [ 4] 2399 EXE1:   RET     ;do nothing if zero
                                   2400 
                                   2401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2402 ;       CMOVE   ( b1 b2 u -- )
                                   2403 ;       Copy u bytes from b1 to b2.
                                   2404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D22                       2405         _HEADER CMOVE,5,"CMOVE"
      000D22 0D 0A                    1         .word LINK 
                           000D24     2         LINK=.
      000D24 05                       3         .byte 5  
      000D25 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D2A                          5         CMOVE:
                                   2406         ;;;;  local variables ;;;;;;;
                           000005  2407         DP = 5
                           000003  2408         YTMP = 3 
                           000001  2409         CNT  = 1 
                                   2410         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D2A 89               [ 2] 2411         PUSHW X  ; R: DP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D2B 52 02            [ 2] 2412         SUB SP,#2 ; R: DP YTMP 
      000D2D 90 93            [ 1] 2413         LDW Y,X 
      000D2F 90 FE            [ 2] 2414         LDW Y,(Y) ; CNT 
      000D31 90 89            [ 2] 2415         PUSHW Y  ; R: DP YTMP CNT
      000D33 90 93            [ 1] 2416         LDW Y,X 
      000D35 90 EE 02         [ 2] 2417         LDW Y,(2,Y) ; b2, dest 
      000D38 EE 04            [ 2] 2418         LDW X,(4,X) ; b1, src 
      000D3A 17 03            [ 2] 2419         LDW (YTMP,SP),Y 
      000D3C 13 03            [ 2] 2420         CPW X,(YTMP,SP) 
      000D3E 22 1A            [ 1] 2421         JRUGT CMOV2  ; src>dest 
                                   2422 ; src<dest copy from top to bottom
      000D40 72 FB 01         [ 2] 2423         ADDW X,(CNT,SP)
      000D43 72 F9 01         [ 2] 2424         ADDW Y,(CNT,SP)
      000D46                       2425 CMOV1:  
      000D46 17 03            [ 2] 2426         LDW (YTMP,SP),Y 
      000D48 16 01            [ 2] 2427         LDW Y,(CNT,SP)
      000D4A 27 22            [ 1] 2428         JREQ CMOV3 
      000D4C 90 5A            [ 2] 2429         DECW Y 
      000D4E 17 01            [ 2] 2430         LDW (CNT,SP),Y 
      000D50 16 03            [ 2] 2431         LDW Y,(YTMP,SP)
      000D52 5A               [ 2] 2432         DECW X
      000D53 F6               [ 1] 2433         LD A,(X)
      000D54 90 5A            [ 2] 2434         DECW Y 
      000D56 90 F7            [ 1] 2435         LD (Y),A 
      000D58 20 EC            [ 2] 2436         JRA CMOV1
                                   2437 ; src>dest copy from bottom to top   
      000D5A                       2438 CMOV2: 
      000D5A 17 03            [ 2] 2439         LDW (YTMP,SP),Y 
      000D5C 16 01            [ 2] 2440         LDW Y,(CNT,SP)
      000D5E 27 0E            [ 1] 2441         JREQ CMOV3
      000D60 90 5A            [ 2] 2442         DECW Y 
      000D62 17 01            [ 2] 2443         LDW (CNT,SP),Y 
      000D64 16 03            [ 2] 2444         LDW Y,(YTMP,SP)
      000D66 F6               [ 1] 2445         LD A,(X)
      000D67 5C               [ 1] 2446         INCW X 
      000D68 90 F7            [ 1] 2447         LD (Y),A 
      000D6A 90 5C            [ 1] 2448         INCW Y 
      000D6C 20 EC            [ 2] 2449         JRA CMOV2 
      000D6E                       2450 CMOV3:
      000D6E 1E 05            [ 2] 2451         LDW X,(DP,SP)
      000D70 1C 00 06         [ 2] 2452         ADDW X,#3*CELLL 
      000D73 5B 06            [ 2] 2453         ADDW SP,#3*CELLL 
      000D75 81               [ 4] 2454         RET 
                                   2455         
                                   2456 
                                   2457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2458 ;       FILL    ( b u c -- )
                                   2459 ;       Fill u bytes of character c
                                   2460 ;       to area beginning at b.
                                   2461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D76                       2462         _HEADER FILL,4,"FILL"
      000D76 0D 24                    1         .word LINK 
                           000D78     2         LINK=.
      000D78 04                       3         .byte 4  
      000D79 46 49 4C 4C              4         .ascii "FILL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000D7D                          5         FILL:
      000D7D E6 01            [ 1] 2463         LD A,(1,X)
      000D7F 90 93            [ 1] 2464         LDW Y,X 
      000D81 1C 00 06         [ 2] 2465         ADDW X,#3*CELLL 
      000D84 89               [ 2] 2466         PUSHW X ; R: DP 
      000D85 93               [ 1] 2467         LDW X,Y 
      000D86 EE 04            [ 2] 2468         LDW X,(4,X) ; b
      000D88 90 EE 02         [ 2] 2469         LDW Y,(2,Y) ; u
      000D8B                       2470 FILL0:
      000D8B 27 06            [ 1] 2471         JREQ FILL1
      000D8D F7               [ 1] 2472         LD (X),A 
      000D8E 5C               [ 1] 2473         INCW X 
      000D8F 90 5A            [ 2] 2474         DECW Y 
      000D91 20 F8            [ 2] 2475         JRA FILL0         
      000D93 85               [ 2] 2476 FILL1: POPW X 
      000D94 81               [ 4] 2477         RET         
                                   2478         
                                   2479 
                                   2480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2481 ;       ERASE   ( b u -- )
                                   2482 ;       Erase u bytes beginning at b.
                                   2483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D95                       2484         _HEADER ERASE,5,"ERASE"
      000D95 0D 78                    1         .word LINK 
                           000D97     2         LINK=.
      000D97 05                       3         .byte 5  
      000D98 45 52 41 53 45           4         .ascii "ERASE"
      000D9D                          5         ERASE:
      000D9D 90 5F            [ 1] 2485         clrw y 
      000D9F 1D 00 02         [ 2] 2486         subw x,#CELLL 
      000DA2 FF               [ 2] 2487         ldw (x),y 
      000DA3 CC 0D 7D         [ 2] 2488         jp FILL 
                                   2489 
                                   2490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2491 ;       PACK0   ( b u a -- a )
                                   2492 ;       Build a counted string with
                                   2493 ;       u characters from b. Null fill.
                                   2494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DA6                       2495         _HEADER PACKS,5,"PACK0"
      000DA6 0D 97                    1         .word LINK 
                           000DA8     2         LINK=.
      000DA8 05                       3         .byte 5  
      000DA9 50 41 43 4B 30           4         .ascii "PACK0"
      000DAE                          5         PACKS:
      000DAE CD 06 19         [ 4] 2496         CALL     DUPP
      000DB1 CD 05 E2         [ 4] 2497         CALL     TOR     ;strings only on cell boundary
      000DB4 CD 08 27         [ 4] 2498         CALL     DDUP
      000DB7 CD 04 F0         [ 4] 2499         CALL     CSTOR
      000DBA CD 0B 97         [ 4] 2500         CALL     ONEP ;save count
      000DBD CD 06 29         [ 4] 2501         CALL     SWAPP
      000DC0 CD 0D 2A         [ 4] 2502         CALL     CMOVE
      000DC3 CD 05 34         [ 4] 2503         CALL     RFROM
      000DC6 81               [ 4] 2504         RET
                                   2505 
                                   2506 ;; Numeric output, single precision
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   2507 
                                   2508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2509 ;       DIGIT   ( u -- c )
                                   2510 ;       Convert digit u to a character.
                                   2511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC7                       2512         _HEADER DIGIT,5,"DIGIT"
      000DC7 0D A8                    1         .word LINK 
                           000DC9     2         LINK=.
      000DC9 05                       3         .byte 5  
      000DCA 44 49 47 49 54           4         .ascii "DIGIT"
      000DCF                          5         DIGIT:
      000DCF CD 04 6F         [ 4] 2513         CALL	DOLIT
      000DD2 00 09                 2514         .word	9
      000DD4 CD 06 41         [ 4] 2515         CALL	OVER
      000DD7 CD 09 26         [ 4] 2516         CALL	LESS
      000DDA CD 04 6F         [ 4] 2517         CALL	DOLIT
      000DDD 00 07                 2518         .word	7
      000DDF CD 06 76         [ 4] 2519         CALL	ANDD
      000DE2 CD 08 3C         [ 4] 2520         CALL	PLUS
      000DE5 CD 04 6F         [ 4] 2521         CALL	DOLIT
      000DE8 00 30                 2522         .word	48	;'0'
      000DEA CC 08 3C         [ 2] 2523         JP	PLUS
                                   2524 
                                   2525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2526 ;       EXTRACT ( n base -- n c )
                                   2527 ;       Extract least significant 
                                   2528 ;       digit from n.
                                   2529 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DED                       2530         _HEADER EXTRC,7,"EXTRACT"
      000DED 0D C9                    1         .word LINK 
                           000DEF     2         LINK=.
      000DEF 07                       3         .byte 7  
      000DF0 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000DF7                          5         EXTRC:
      000DF7 CD 0C 03         [ 4] 2531         CALL     ZERO
      000DFA CD 06 29         [ 4] 2532         CALL     SWAPP
      000DFD CD 09 B1         [ 4] 2533         CALL     UMMOD
      000E00 CD 06 29         [ 4] 2534         CALL     SWAPP
      000E03 CC 0D CF         [ 2] 2535         JP     DIGIT
                                   2536 
                                   2537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2538 ;       <#      ( -- )
                                   2539 ;       Initiate  numeric 
                                   2540 ;       output process.
                                   2541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E06                       2542         _HEADER BDIGS,2,"#<"
      000E06 0D EF                    1         .word LINK 
                           000E08     2         LINK=.
      000E08 02                       3         .byte 2  
      000E09 23 3C                    4         .ascii "#<"
      000E0B                          5         BDIGS:
      000E0B CD 0C EE         [ 4] 2543         CALL     PAD
      000E0E CD 07 4F         [ 4] 2544         CALL     HLD
      000E11 CC 04 D1         [ 2] 2545         JP     STORE
                                   2546 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   2547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2548 ;       HOLD    ( c -- )
                                   2549 ;       Insert a character 
                                   2550 ;       into output string.
                                   2551 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E14                       2552         _HEADER HOLD,4,"HOLD"
      000E14 0E 08                    1         .word LINK 
                           000E16     2         LINK=.
      000E16 04                       3         .byte 4  
      000E17 48 4F 4C 44              4         .ascii "HOLD"
      000E1B                          5         HOLD:
      000E1B CD 07 4F         [ 4] 2553         CALL     HLD
      000E1E CD 04 E3         [ 4] 2554         CALL     AT
      000E21 CD 0B A4         [ 4] 2555         CALL     ONEM
      000E24 CD 06 19         [ 4] 2556         CALL     DUPP
      000E27 CD 07 4F         [ 4] 2557         CALL     HLD
      000E2A CD 04 D1         [ 4] 2558         CALL     STORE
      000E2D CC 04 F0         [ 2] 2559         JP     CSTOR
                                   2560 
                                   2561 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2562 ;       #       ( u -- u )
                                   2563 ;       Extract one digit from u and
                                   2564 ;       append digit to output string.
                                   2565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E30                       2566         _HEADER DIG,1,"#"
      000E30 0E 16                    1         .word LINK 
                           000E32     2         LINK=.
      000E32 01                       3         .byte 1  
      000E33 23                       4         .ascii "#"
      000E34                          5         DIG:
      000E34 CD 06 DF         [ 4] 2567         CALL     BASE
      000E37 CD 04 E3         [ 4] 2568         CALL     AT
      000E3A CD 0D F7         [ 4] 2569         CALL     EXTRC
      000E3D CC 0E 1B         [ 2] 2570         JP     HOLD
                                   2571 
                                   2572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2573 ;       #S      ( u -- 0 )
                                   2574 ;       Convert u until all digits
                                   2575 ;       are added to output string.
                                   2576 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E40                       2577         _HEADER DIGS,2,"#S"
      000E40 0E 32                    1         .word LINK 
                           000E42     2         LINK=.
      000E42 02                       3         .byte 2  
      000E43 23 53                    4         .ascii "#S"
      000E45                          5         DIGS:
      000E45 CD 0E 34         [ 4] 2578 DIGS1:  CALL     DIG
      000E48 CD 06 19         [ 4] 2579         CALL     DUPP
      000E4B CD 04 98         [ 4] 2580         CALL     QBRAN
      000E4E 0E 52                 2581         .word      DIGS2
      000E50 20 F3            [ 2] 2582         JRA     DIGS1
      000E52 81               [ 4] 2583 DIGS2:  RET
                                   2584 
                                   2585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2586 ;       SIGN    ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2587 ;       Add a minus sign to
                                   2588 ;       numeric output string.
                                   2589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E53                       2590         _HEADER SIGN,4,"SIGN"
      000E53 0E 42                    1         .word LINK 
                           000E55     2         LINK=.
      000E55 04                       3         .byte 4  
      000E56 53 49 47 4E              4         .ascii "SIGN"
      000E5A                          5         SIGN:
      000E5A CD 06 50         [ 4] 2591         CALL     ZLESS
      000E5D CD 04 98         [ 4] 2592         CALL     QBRAN
      000E60 0E 6A                 2593         .word      SIGN1
      000E62 CD 04 6F         [ 4] 2594         CALL     DOLIT
      000E65 00 2D                 2595         .word      45	;"-"
      000E67 CC 0E 1B         [ 2] 2596         JP     HOLD
      000E6A 81               [ 4] 2597 SIGN1:  RET
                                   2598 
                                   2599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2600 ;       #>      ( w -- b u )
                                   2601 ;       Prepare output string.
                                   2602 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E6B                       2603         _HEADER EDIGS,2,"#>"
      000E6B 0E 55                    1         .word LINK 
                           000E6D     2         LINK=.
      000E6D 02                       3         .byte 2  
      000E6E 23 3E                    4         .ascii "#>"
      000E70                          5         EDIGS:
      000E70 CD 06 0F         [ 4] 2604         CALL     DROP
      000E73 CD 07 4F         [ 4] 2605         CALL     HLD
      000E76 CD 04 E3         [ 4] 2606         CALL     AT
      000E79 CD 0C EE         [ 4] 2607         CALL     PAD
      000E7C CD 06 41         [ 4] 2608         CALL     OVER
      000E7F CC 08 D2         [ 2] 2609         JP     SUBB
                                   2610 
                                   2611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2612 ;       str     ( w -- b u )
                                   2613 ;       Convert a signed integer
                                   2614 ;       to a numeric string.
                                   2615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E82                       2616         _HEADER STR,3,"STR"
      000E82 0E 6D                    1         .word LINK 
                           000E84     2         LINK=.
      000E84 03                       3         .byte 3  
      000E85 53 54 52                 4         .ascii "STR"
      000E88                          5         STR:
      000E88 CD 06 19         [ 4] 2617         CALL     DUPP
      000E8B CD 05 E2         [ 4] 2618         CALL     TOR
      000E8E CD 08 EC         [ 4] 2619         CALL     ABSS
      000E91 CD 0E 0B         [ 4] 2620         CALL     BDIGS
      000E94 CD 0E 45         [ 4] 2621         CALL     DIGS
      000E97 CD 05 34         [ 4] 2622         CALL     RFROM
      000E9A CD 0E 5A         [ 4] 2623         CALL     SIGN
      000E9D CC 0E 70         [ 2] 2624         JP     EDIGS
                                   2625 
                                   2626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   2627 ;       HEX     ( -- )
                                   2628 ;       Use radix 16 as base for
                                   2629 ;       numeric conversions.
                                   2630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EA0                       2631         _HEADER HEX,3,"HEX"
      000EA0 0E 84                    1         .word LINK 
                           000EA2     2         LINK=.
      000EA2 03                       3         .byte 3  
      000EA3 48 45 58                 4         .ascii "HEX"
      000EA6                          5         HEX:
      000EA6 CD 04 6F         [ 4] 2632         CALL     DOLIT
      000EA9 00 10                 2633         .word      16
      000EAB CD 06 DF         [ 4] 2634         CALL     BASE
      000EAE CC 04 D1         [ 2] 2635         JP     STORE
                                   2636 
                                   2637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2638 ;       DECIMAL ( -- )
                                   2639 ;       Use radix 10 as base
                                   2640 ;       for numeric conversions.
                                   2641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EB1                       2642         _HEADER DECIM,7,"DECIMAL"
      000EB1 0E A2                    1         .word LINK 
                           000EB3     2         LINK=.
      000EB3 07                       3         .byte 7  
      000EB4 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EBB                          5         DECIM:
      000EBB CD 04 6F         [ 4] 2643         CALL     DOLIT
      000EBE 00 0A                 2644         .word      10
      000EC0 CD 06 DF         [ 4] 2645         CALL     BASE
      000EC3 CC 04 D1         [ 2] 2646         JP     STORE
                                   2647 
                                   2648 ;; Numeric input, single precision
                                   2649 
                                   2650 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2651 ;       DIGIT?  ( c base -- u t )
                                   2652 ;       Convert a character to its numeric
                                   2653 ;       value. A flag indicates success.
                                   2654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EC6                       2655         _HEADER DIGTQ,6,"DIGIT?"
      000EC6 0E B3                    1         .word LINK 
                           000EC8     2         LINK=.
      000EC8 06                       3         .byte 6  
      000EC9 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000ECF                          5         DIGTQ:
      000ECF CD 05 E2         [ 4] 2656         CALL     TOR
      000ED2 CD 04 6F         [ 4] 2657         CALL     DOLIT
      000ED5 00 30                 2658         .word     48	; "0"
      000ED7 CD 08 D2         [ 4] 2659         CALL     SUBB
      000EDA CD 04 6F         [ 4] 2660         CALL     DOLIT
      000EDD 00 09                 2661         .word      9
      000EDF CD 06 41         [ 4] 2662         CALL     OVER
      000EE2 CD 09 26         [ 4] 2663         CALL     LESS
      000EE5 CD 04 98         [ 4] 2664         CALL     QBRAN
      000EE8 0F 00                 2665         .word      DGTQ1
      000EEA CD 04 6F         [ 4] 2666         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000EED 00 07                 2667         .word      7
      000EEF CD 08 D2         [ 4] 2668         CALL     SUBB
      000EF2 CD 06 19         [ 4] 2669         CALL     DUPP
      000EF5 CD 04 6F         [ 4] 2670         CALL     DOLIT
      000EF8 00 0A                 2671         .word      10
      000EFA CD 09 26         [ 4] 2672         CALL     LESS
      000EFD CD 06 8A         [ 4] 2673         CALL     ORR
      000F00 CD 06 19         [ 4] 2674 DGTQ1:  CALL     DUPP
      000F03 CD 05 34         [ 4] 2675         CALL     RFROM
      000F06 CC 09 10         [ 2] 2676         JP     ULESS
                                   2677 
                           000001  2678 .if  WANT_DOUBLE
                           000000  2679 .else 
                                   2680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2681 ;       NUMBER? ( a -- n T | a F )
                                   2682 ;       Convert a number string to
                                   2683 ;       integer. Push a flag on tos.
                                   2684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2685         _HEADER NUMBQ,7,"NUMBER?"
                                   2686         CALL     BASE
                                   2687         CALL     AT
                                   2688         CALL     TOR
                                   2689         CALL     ZERO
                                   2690         CALL     OVER
                                   2691         CALL     COUNT
                                   2692         CALL     OVER
                                   2693         CALL     CAT
                                   2694         CALL     DOLIT
                                   2695         .word     36	; "0x"
                                   2696         CALL     EQUAL
                                   2697         CALL     QBRAN
                                   2698         .word      NUMQ1
                                   2699         CALL     HEX
                                   2700         CALL     SWAPP
                                   2701         CALL     ONEP
                                   2702         CALL     SWAPP
                                   2703         CALL     ONEM
                                   2704 NUMQ1:  CALL     OVER
                                   2705         CALL     CAT
                                   2706         CALL     DOLIT
                                   2707         .word     45	; "-"
                                   2708         CALL     EQUAL
                                   2709         CALL     TOR
                                   2710         CALL     SWAPP
                                   2711         CALL     RAT
                                   2712         CALL     SUBB
                                   2713         CALL     SWAPP
                                   2714         CALL     RAT
                                   2715         CALL     PLUS
                                   2716         CALL     QDUP
                                   2717         CALL     QBRAN
                                   2718         .word      NUMQ6
                                   2719         CALL     ONEM
                                   2720         CALL     TOR
                                   2721 NUMQ2:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722         CALL     TOR
                                   2723         CALL     CAT
                                   2724         CALL     BASE
                                   2725         CALL     AT
                                   2726         CALL     DIGTQ
                                   2727         CALL     QBRAN
                                   2728         .word      NUMQ4
                                   2729         CALL     SWAPP
                                   2730         CALL     BASE
                                   2731         CALL     AT
                                   2732         CALL     STAR
                                   2733         CALL     PLUS
                                   2734         CALL     RFROM
                                   2735         CALL     ONEP
                                   2736         CALL     DONXT
                                   2737         .word      NUMQ2
                                   2738         CALL     RAT
                                   2739         CALL     SWAPP
                                   2740         CALL     DROP
                                   2741         CALL     QBRAN
                                   2742         .word      NUMQ3
                                   2743         CALL     NEGAT
                                   2744 NUMQ3:  CALL     SWAPP
                                   2745         JRA     NUMQ5
                                   2746 NUMQ4:  CALL     RFROM
                                   2747         CALL     RFROM
                                   2748         CALL     DDROP
                                   2749         CALL     DDROP
                                   2750         CALL     ZERO
                                   2751 NUMQ5:  CALL     DUPP
                                   2752 NUMQ6:  CALL     RFROM
                                   2753         CALL     DDROP
                                   2754         CALL     RFROM
                                   2755         CALL     BASE
                                   2756         JP     STORE
                                   2757 .endif ; WANT_DOUBLE  
                                   2758 
                                   2759 ;; Basic I/O
                                   2760 
                                   2761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2762 ;       KEY     ( -- c )
                                   2763 ;       Wait for and return an
                                   2764 ;       input character.
                                   2765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F09                       2766         _HEADER KEY,3,"KEY"
      000F09 0E C8                    1         .word LINK 
                           000F0B     2         LINK=.
      000F0B 03                       3         .byte 3  
      000F0C 4B 45 59                 4         .ascii "KEY"
      000F0F                          5         KEY:
      000F0F 72 0B 52 30 FB   [ 2] 2767         btjf UART_SR,#UART_SR_RXNE,. 
      000F14 C6 52 31         [ 1] 2768         ld a,UART_DR 
      000F17 1D 00 02         [ 2] 2769         subw x,#CELLL 
      000F1A E7 01            [ 1] 2770         ld (1,x),a 
      000F1C 7F               [ 1] 2771         clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F1D 81               [ 4] 2772         ret 
                                   2773 
                                   2774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2775 ;       NUF?    ( -- t )
                                   2776 ;       Return false if no input,
                                   2777 ;       else pause and if CR return true.
                                   2778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F1E                       2779         _HEADER NUFQ,4,"NUF?"
      000F1E 0F 0B                    1         .word LINK 
                           000F20     2         LINK=.
      000F20 04                       3         .byte 4  
      000F21 4E 55 46 3F              4         .ascii "NUF?"
      000F25                          5         NUFQ:
      000F25 CD 04 18         [ 4] 2780         CALL     QKEY
      000F28 CD 06 19         [ 4] 2781         CALL     DUPP
      000F2B CD 04 98         [ 4] 2782         CALL     QBRAN
      000F2E 0F 3E                 2783         .word    NUFQ1
      000F30 CD 08 1C         [ 4] 2784         CALL     DDROP
      000F33 CD 0F 0F         [ 4] 2785         CALL     KEY
      000F36 CD 04 6F         [ 4] 2786         CALL     DOLIT
      000F39 00 0D                 2787         .word      CRR
      000F3B CC 08 FA         [ 2] 2788         JP     EQUAL
      000F3E 81               [ 4] 2789 NUFQ1:  RET
                                   2790 
                                   2791 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2792 ;       SPACE   ( -- )
                                   2793 ;       Send  blank character to
                                   2794 ;       output device.
                                   2795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F3F                       2796         _HEADER SPACE,5,"SPACE"
      000F3F 0F 20                    1         .word LINK 
                           000F41     2         LINK=.
      000F41 05                       3         .byte 5  
      000F42 53 50 41 43 45           4         .ascii "SPACE"
      000F47                          5         SPACE:
      000F47 CD 0B F6         [ 4] 2797         CALL     BLANK
      000F4A CC 04 36         [ 2] 2798         JP     EMIT
                                   2799 
                                   2800 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2801 ;       SPACES  ( +n -- )
                                   2802 ;       Send n spaces to output device.
                                   2803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F4D                       2804         _HEADER SPACS,6,"SPACES"
      000F4D 0F 41                    1         .word LINK 
                           000F4F     2         LINK=.
      000F4F 06                       3         .byte 6  
      000F50 53 50 41 43 45 53        4         .ascii "SPACES"
      000F56                          5         SPACS:
      000F56 CD 0C 03         [ 4] 2805         CALL     ZERO
      000F59 CD 09 6B         [ 4] 2806         CALL     MAX
      000F5C CD 05 E2         [ 4] 2807         CALL     TOR
      000F5F 20 03            [ 2] 2808         JRA      CHAR2
      000F61 CD 0F 47         [ 4] 2809 CHAR1:  CALL     SPACE
      000F64 CD 04 83         [ 4] 2810 CHAR2:  CALL     DONXT
      000F67 0F 61                 2811         .word    CHAR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000F69 81               [ 4] 2812         RET
                                   2813 
                                   2814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2815 ;       TYPE    ( b u -- )
                                   2816 ;       Output u characters from b.
                                   2817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F6A                       2818         _HEADER TYPES,4,"TYPE"
      000F6A 0F 4F                    1         .word LINK 
                           000F6C     2         LINK=.
      000F6C 04                       3         .byte 4  
      000F6D 54 59 50 45              4         .ascii "TYPE"
      000F71                          5         TYPES:
      000F71 CD 05 E2         [ 4] 2819         CALL     TOR
      000F74 20 06            [ 2] 2820         JRA     TYPE2
      000F76 CD 0C C6         [ 4] 2821 TYPE1:  CALL     COUNT 
      000F79 CD 04 36         [ 4] 2822         CALL     EMIT
      000F7C                       2823 TYPE2:  _DONXT  TYPE1
      000F7C CD 04 83         [ 4]    1     CALL DONXT 
      000F7F 0F 76                    2     .word TYPE1 
      000F81 CC 06 0F         [ 2] 2824         JP     DROP
                                   2825 
                                   2826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2827 ;       CR      ( -- )
                                   2828 ;       Output a carriage return
                                   2829 ;       and a line feed.
                                   2830 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F84                       2831         _HEADER CR,2,"CR"
      000F84 0F 6C                    1         .word LINK 
                           000F86     2         LINK=.
      000F86 02                       3         .byte 2  
      000F87 43 52                    4         .ascii "CR"
      000F89                          5         CR:
      000F89                       2832         _DOLIT  CRR 
      000F89 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F8C 00 0D                    2     .word CRR 
      000F8E CD 04 36         [ 4] 2833         CALL    EMIT
      000F91                       2834         _DOLIT  LF
      000F91 CD 04 6F         [ 4]    1     CALL DOLIT 
      000F94 00 0A                    2     .word LF 
      000F96 CC 04 36         [ 2] 2835         JP      EMIT
                                   2836 
                                   2837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2838 ;       do$     ( -- a )
                                   2839 ;       Return  address of a compiled
                                   2840 ;       string.
                                   2841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2842 ;       _HEADER DOSTR,COMPO+3,"DO$"
      000F99                       2843 DOSTR:
      000F99 CD 05 34         [ 4] 2844         CALL     RFROM
      000F9C CD 05 45         [ 4] 2845         CALL     RAT
      000F9F CD 05 34         [ 4] 2846         CALL     RFROM
      000FA2 CD 0C C6         [ 4] 2847         CALL     COUNT
      000FA5 CD 08 3C         [ 4] 2848         CALL     PLUS
      000FA8 CD 05 E2         [ 4] 2849         CALL     TOR
      000FAB CD 06 29         [ 4] 2850         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000FAE CD 05 E2         [ 4] 2851         CALL     TOR
      000FB1 81               [ 4] 2852         RET
                                   2853 
                                   2854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2855 ;       $"|     ( -- a )
                                   2856 ;       Run time routine compiled by $".
                                   2857 ;       Return address of a compiled string.
                                   2858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2859 ;       _HEADER STRQP,COMPO+3,"$\"|"
      000FB2                       2860 STRQP:
      000FB2 CD 0F 99         [ 4] 2861         CALL     DOSTR
      000FB5 81               [ 4] 2862         RET
                                   2863 
                                   2864 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2865 ;       ."|     ( -- )
                                   2866 ;       Run time routine of ." .
                                   2867 ;       Output a compiled string.
                                   2868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2869 ;       _HEADER DOTQP,COMPO+3,".\"|"
      000FB6                       2870 DOTQP:
      000FB6 CD 0F 99         [ 4] 2871         CALL     DOSTR
      000FB9 CD 0C C6         [ 4] 2872         CALL     COUNT
      000FBC CC 0F 71         [ 2] 2873         JP     TYPES
                                   2874 
                                   2875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2876 ;       .R      ( n +n -- )
                                   2877 ;       Display an integer in a field
                                   2878 ;       of n columns, right justified.
                                   2879 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FBF                       2880         _HEADER DOTR,2,".R"
      000FBF 0F 86                    1         .word LINK 
                           000FC1     2         LINK=.
      000FC1 02                       3         .byte 2  
      000FC2 2E 52                    4         .ascii ".R"
      000FC4                          5         DOTR:
      000FC4 CD 05 E2         [ 4] 2881         CALL     TOR
      000FC7 CD 0E 88         [ 4] 2882         CALL     STR
      000FCA CD 05 34         [ 4] 2883         CALL     RFROM
      000FCD CD 06 41         [ 4] 2884         CALL     OVER
      000FD0 CD 08 D2         [ 4] 2885         CALL     SUBB
      000FD3 CD 0F 56         [ 4] 2886         CALL     SPACS
      000FD6 CC 0F 71         [ 2] 2887         JP     TYPES
                                   2888 
                                   2889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2890 ;       U.R     ( u +n -- )
                                   2891 ;       Display an unsigned integer
                                   2892 ;       in n column, right justified.
                                   2893 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FD9                       2894         _HEADER UDOTR,3,"U.R"
      000FD9 0F C1                    1         .word LINK 
                           000FDB     2         LINK=.
      000FDB 03                       3         .byte 3  
      000FDC 55 2E 52                 4         .ascii "U.R"
      000FDF                          5         UDOTR:
      000FDF CD 05 E2         [ 4] 2895         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000FE2 CD 0E 0B         [ 4] 2896         CALL     BDIGS
      000FE5 CD 0E 45         [ 4] 2897         CALL     DIGS
      000FE8 CD 0E 70         [ 4] 2898         CALL     EDIGS
      000FEB CD 05 34         [ 4] 2899         CALL     RFROM
      000FEE CD 06 41         [ 4] 2900         CALL     OVER
      000FF1 CD 08 D2         [ 4] 2901         CALL     SUBB
      000FF4 CD 0F 56         [ 4] 2902         CALL     SPACS
      000FF7 CC 0F 71         [ 2] 2903         JP     TYPES
                                   2904 
                                   2905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2906 ;       U.      ( u -- )
                                   2907 ;       Display an unsigned integer
                                   2908 ;       in free format.
                                   2909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFA                       2910         _HEADER UDOT,2,"U."
      000FFA 0F DB                    1         .word LINK 
                           000FFC     2         LINK=.
      000FFC 02                       3         .byte 2  
      000FFD 55 2E                    4         .ascii "U."
      000FFF                          5         UDOT:
      000FFF CD 0E 0B         [ 4] 2911         CALL     BDIGS
      001002 CD 0E 45         [ 4] 2912         CALL     DIGS
      001005 CD 0E 70         [ 4] 2913         CALL     EDIGS
      001008 CD 0F 47         [ 4] 2914         CALL     SPACE
      00100B CC 0F 71         [ 2] 2915         JP     TYPES
                                   2916 
                                   2917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2918 ;   H. ( n -- )
                                   2919 ;   display n in hexadecimal 
                                   2920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00100E                       2921         _HEADER HDOT,2,"H."
      00100E 0F FC                    1         .word LINK 
                           001010     2         LINK=.
      001010 02                       3         .byte 2  
      001011 48 2E                    4         .ascii "H."
      001013                          5         HDOT:
      001013 CD 06 DF         [ 4] 2922         CALL BASE 
      001016 CD 04 E3         [ 4] 2923         CALL AT 
      001019 CD 05 E2         [ 4] 2924         CALL TOR 
      00101C CD 0E A6         [ 4] 2925         CALL HEX 
      00101F CD 0F FF         [ 4] 2926         CALL UDOT 
      001022 CD 05 34         [ 4] 2927         CALL RFROM 
      001025 CD 06 DF         [ 4] 2928         CALL BASE 
      001028 CC 04 D1         [ 2] 2929         JP STORE 
                                   2930          
                                   2931 
                                   2932 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2933 ;       .       ( w -- )
                                   2934 ;       Display an integer in free
                                   2935 ;       format, preceeded by a space.
                                   2936 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00102B                       2937         _HEADER DOT,1,"."
      00102B 10 10                    1         .word LINK 
                           00102D     2         LINK=.
      00102D 01                       3         .byte 1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00102E 2E                       4         .ascii "."
      00102F                          5         DOT:
      00102F CD 06 DF         [ 4] 2938         CALL     BASE
      001032 CD 04 E3         [ 4] 2939         CALL     AT
      001035 CD 04 6F         [ 4] 2940         CALL     DOLIT
      001038 00 0A                 2941         .word      10
      00103A CD 06 9F         [ 4] 2942         CALL     XORR    ;?decimal
      00103D CD 04 98         [ 4] 2943         CALL     QBRAN
      001040 10 45                 2944         .word      DOT1
      001042 CC 0F FF         [ 2] 2945         JP     UDOT
      001045 CD 0E 88         [ 4] 2946 DOT1:   CALL     STR
      001048 CD 0F 47         [ 4] 2947         CALL     SPACE
      00104B CC 0F 71         [ 2] 2948         JP     TYPES
                                   2949 
                                   2950 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2951 ;       ?       ( a -- )
                                   2952 ;       Display contents in memory cell.
                                   2953 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00104E                       2954         _HEADER QUEST,1,"?"
      00104E 10 2D                    1         .word LINK 
                           001050     2         LINK=.
      001050 01                       3         .byte 1  
      001051 3F                       4         .ascii "?"
      001052                          5         QUEST:
      001052 CD 04 E3         [ 4] 2955         CALL     AT
      001055 CC 10 2F         [ 2] 2956         JP     DOT
                                   2957 
                                   2958 ;; Parsing
                                   2959 
                                   2960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2961 ;       parse   ( b u c -- b u delta ; <string> )
                                   2962 ;       Scan string delimited by c.
                                   2963 ;       Return found string and its offset.
                                   2964 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001058                       2965         _HEADER PARS,5,"PARS$"
      001058 10 50                    1         .word LINK 
                           00105A     2         LINK=.
      00105A 05                       3         .byte 5  
      00105B 50 41 52 53 24           4         .ascii "PARS$"
      001060                          5         PARS:
      001060 CD 06 EE         [ 4] 2966         CALL     TEMP
      001063 CD 04 D1         [ 4] 2967         CALL     STORE
      001066 CD 06 41         [ 4] 2968         CALL     OVER
      001069 CD 05 E2         [ 4] 2969         CALL     TOR
      00106C CD 06 19         [ 4] 2970         CALL     DUPP
      00106F CD 04 98         [ 4] 2971         CALL     QBRAN
      001072 11 18                 2972         .word    PARS8
      001074 CD 0B A4         [ 4] 2973         CALL     ONEM
      001077 CD 06 EE         [ 4] 2974         CALL     TEMP
      00107A CD 04 E3         [ 4] 2975         CALL     AT
      00107D CD 0B F6         [ 4] 2976         CALL     BLANK
      001080 CD 08 FA         [ 4] 2977         CALL     EQUAL
      001083 CD 04 98         [ 4] 2978         CALL     QBRAN
      001086 10 B9                 2979         .word      PARS3
      001088 CD 05 E2         [ 4] 2980         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00108B CD 0B F6         [ 4] 2981 PARS1:  CALL     BLANK
      00108E CD 06 41         [ 4] 2982         CALL     OVER
      001091 CD 05 01         [ 4] 2983         CALL     CAT     ;skip leading blanks ONLY
      001094 CD 08 D2         [ 4] 2984         CALL     SUBB
      001097 CD 06 50         [ 4] 2985         CALL     ZLESS
      00109A CD 08 75         [ 4] 2986         CALL     INVER
      00109D CD 04 98         [ 4] 2987         CALL     QBRAN
      0010A0 10 B6                 2988         .word      PARS2
      0010A2 CD 0B 97         [ 4] 2989         CALL     ONEP
      0010A5 CD 04 83         [ 4] 2990         CALL     DONXT
      0010A8 10 8B                 2991         .word      PARS1
      0010AA CD 05 34         [ 4] 2992         CALL     RFROM
      0010AD CD 06 0F         [ 4] 2993         CALL     DROP
      0010B0 CD 0C 03         [ 4] 2994         CALL     ZERO
      0010B3 CC 06 19         [ 2] 2995         JP     DUPP
      0010B6 CD 05 34         [ 4] 2996 PARS2:  CALL     RFROM
      0010B9 CD 06 41         [ 4] 2997 PARS3:  CALL     OVER
      0010BC CD 06 29         [ 4] 2998         CALL     SWAPP
      0010BF CD 05 E2         [ 4] 2999         CALL     TOR
      0010C2 CD 06 EE         [ 4] 3000 PARS4:  CALL     TEMP
      0010C5 CD 04 E3         [ 4] 3001         CALL     AT
      0010C8 CD 06 41         [ 4] 3002         CALL     OVER
      0010CB CD 05 01         [ 4] 3003         CALL     CAT
      0010CE CD 08 D2         [ 4] 3004         CALL     SUBB    ;scan for delimiter
      0010D1 CD 06 EE         [ 4] 3005         CALL     TEMP
      0010D4 CD 04 E3         [ 4] 3006         CALL     AT
      0010D7 CD 0B F6         [ 4] 3007         CALL     BLANK
      0010DA CD 08 FA         [ 4] 3008         CALL     EQUAL
      0010DD CD 04 98         [ 4] 3009         CALL     QBRAN
      0010E0 10 E5                 3010         .word      PARS5
      0010E2 CD 06 50         [ 4] 3011         CALL     ZLESS
      0010E5 CD 04 98         [ 4] 3012 PARS5:  CALL     QBRAN
      0010E8 10 FA                 3013         .word      PARS6
      0010EA CD 0B 97         [ 4] 3014         CALL     ONEP
      0010ED CD 04 83         [ 4] 3015         CALL     DONXT
      0010F0 10 C2                 3016         .word      PARS4
      0010F2 CD 06 19         [ 4] 3017         CALL     DUPP
      0010F5 CD 05 E2         [ 4] 3018         CALL     TOR
      0010F8 20 0F            [ 2] 3019         JRA     PARS7
      0010FA CD 05 34         [ 4] 3020 PARS6:  CALL     RFROM
      0010FD CD 06 0F         [ 4] 3021         CALL     DROP
      001100 CD 06 19         [ 4] 3022         CALL     DUPP
      001103 CD 0B 97         [ 4] 3023         CALL     ONEP
      001106 CD 05 E2         [ 4] 3024         CALL     TOR
      001109 CD 06 41         [ 4] 3025 PARS7:  CALL     OVER
      00110C CD 08 D2         [ 4] 3026         CALL     SUBB
      00110F CD 05 34         [ 4] 3027         CALL     RFROM
      001112 CD 05 34         [ 4] 3028         CALL     RFROM
      001115 CC 08 D2         [ 2] 3029         JP     SUBB
      001118 CD 06 41         [ 4] 3030 PARS8:  CALL     OVER
      00111B CD 05 34         [ 4] 3031         CALL     RFROM
      00111E CC 08 D2         [ 2] 3032         JP     SUBB
                                   3033 
                                   3034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3035 ;       PARSE   ( c -- b u ; <string> )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3036 ;       Scan input stream and return
                                   3037 ;       counted string delimited by c.
                                   3038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001121                       3039         _HEADER PARSE,5,"PARSE"
      001121 10 5A                    1         .word LINK 
                           001123     2         LINK=.
      001123 05                       3         .byte 5  
      001124 50 41 52 53 45           4         .ascii "PARSE"
      001129                          5         PARSE:
      001129 CD 05 E2         [ 4] 3040         CALL     TOR
      00112C CD 0C FF         [ 4] 3041         CALL     TIB
      00112F CD 06 FD         [ 4] 3042         CALL     INN
      001132 CD 04 E3         [ 4] 3043         CALL     AT
      001135 CD 08 3C         [ 4] 3044         CALL     PLUS    ;current input buffer pointer
      001138 CD 07 0D         [ 4] 3045         CALL     NTIB
      00113B CD 04 E3         [ 4] 3046         CALL     AT
      00113E CD 06 FD         [ 4] 3047         CALL     INN
      001141 CD 04 E3         [ 4] 3048         CALL     AT
      001144 CD 08 D2         [ 4] 3049         CALL     SUBB    ;remaining count
      001147 CD 05 34         [ 4] 3050         CALL     RFROM
      00114A CD 10 60         [ 4] 3051         CALL     PARS
      00114D CD 06 FD         [ 4] 3052         CALL     INN
      001150 CC 0C 73         [ 2] 3053         JP     PSTOR
                                   3054 
                                   3055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3056 ;       .(      ( -- )
                                   3057 ;       Output following string up to next ) .
                                   3058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001153                       3059         _HEADER DOTPR,IMEDD+2,".("
      001153 11 23                    1         .word LINK 
                           001155     2         LINK=.
      001155 82                       3         .byte IMEDD+2  
      001156 2E 28                    4         .ascii ".("
      001158                          5         DOTPR:
      001158 CD 04 6F         [ 4] 3060         CALL     DOLIT
      00115B 00 29                 3061         .word     41	; ")"
      00115D CD 11 29         [ 4] 3062         CALL     PARSE
      001160 CC 0F 71         [ 2] 3063         JP     TYPES
                                   3064 
                                   3065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3066 ;       (       ( -- )
                                   3067 ;       Ignore following string up to next ).
                                   3068 ;       A comment.
                                   3069 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001163                       3070         _HEADER PAREN,IMEDD+1,"("
      001163 11 55                    1         .word LINK 
                           001165     2         LINK=.
      001165 81                       3         .byte IMEDD+1  
      001166 28                       4         .ascii "("
      001167                          5         PAREN:
      001167 CD 04 6F         [ 4] 3071         CALL     DOLIT
      00116A 00 29                 3072         .word     41	; ")"
      00116C CD 11 29         [ 4] 3073         CALL     PARSE
      00116F CC 08 1C         [ 2] 3074         JP     DDROP
                                   3075 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3077 ;       \       ( -- )
                                   3078 ;       Ignore following text till
                                   3079 ;       end of line.
                                   3080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001172                       3081         _HEADER BKSLA,IMEDD+1,"\\"
      001172 11 65                    1         .word LINK 
                           001174     2         LINK=.
      001174 81                       3         .byte IMEDD+1  
      001175 5C 5C                    4         .ascii "\\"
      001177                          5         BKSLA:
      001177 90 AE 00 0E      [ 2] 3082         ldw y,#UCTIB ; #TIB  
      00117B 90 FE            [ 2] 3083         ldw y,(y)
      00117D 90 89            [ 2] 3084         pushw y ; count in TIB 
      00117F 90 AE 00 0C      [ 2] 3085         ldw y,#UINN ; >IN 
      001183 90 BF 26         [ 2] 3086         ldw YTEMP,y
      001186 90 85            [ 2] 3087         popw y 
      001188 91 CF 26         [ 5] 3088         ldw [YTEMP],y
      00118B 81               [ 4] 3089         ret 
                                   3090 
                                   3091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3092 ;       WORD    ( c -- a ; <string> )
                                   3093 ;       Parse a word from input stream
                                   3094 ;       and copy it to code dictionary.
                                   3095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00118C                       3096         _HEADER WORDD,4,"WORD"
      00118C 11 74                    1         .word LINK 
                           00118E     2         LINK=.
      00118E 04                       3         .byte 4  
      00118F 57 4F 52 44              4         .ascii "WORD"
      001193                          5         WORDD:
      001193 CD 11 29         [ 4] 3097         CALL     PARSE
      001196 CD 0C DD         [ 4] 3098         CALL     HERE
      001199 CD 0B 6C         [ 4] 3099         CALL     CELLP
                           000000  3100 .IF CASE_SENSE 
                                   3101         JP      PACKS 
                           000001  3102 .ELSE                 
      00119C CD 0D AE         [ 4] 3103         CALL     PACKS
                                   3104 ; uppercase TOKEN 
      00119F CD 06 19         [ 4] 3105         CALL    DUPP 
      0011A2 CD 0C C6         [ 4] 3106         CALL    COUNT 
      0011A5 CD 05 E2         [ 4] 3107         CALL    TOR 
      0011A8 CD 04 B4         [ 4] 3108         CALL    BRAN 
      0011AB 11 D9                 3109         .word   UPPER2  
      0011AD                       3110 UPPER:
      0011AD CD 06 19         [ 4] 3111         CALL    DUPP 
      0011B0 CD 05 01         [ 4] 3112         CALL    CAT
      0011B3 CD 06 19         [ 4] 3113         CALL    DUPP 
      0011B6 CD 04 6F         [ 4] 3114         CALL   DOLIT
      0011B9 00 61                 3115         .word   'a' 
      0011BB CD 04 6F         [ 4] 3116         CALL    DOLIT
      0011BE 00 7B                 3117         .word   'z'+1 
      0011C0 CD 09 96         [ 4] 3118         CALL   WITHI 
      0011C3 CD 04 98         [ 4] 3119         CALL   QBRAN
      0011C6 11 D0                 3120         .word  UPPER1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0011C8 CD 04 6F         [ 4] 3121         CALL    DOLIT 
      0011CB 00 DF                 3122         .word   0xDF 
      0011CD CD 06 76         [ 4] 3123         CALL    ANDD 
      0011D0                       3124 UPPER1:
      0011D0 CD 06 41         [ 4] 3125         CALL    OVER 
      0011D3 CD 04 F0         [ 4] 3126         CALL    CSTOR          
      0011D6 CD 0B 97         [ 4] 3127         CALL    ONEP 
      0011D9                       3128 UPPER2: 
      0011D9 CD 04 83         [ 4] 3129         CALL    DONXT
      0011DC 11 AD                 3130         .word   UPPER  
      0011DE CD 06 0F         [ 4] 3131         CALL    DROP  
      0011E1 81               [ 4] 3132         RET 
                                   3133 .ENDIF 
                                   3134 
                                   3135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3136 ;       TOKEN   ( -- a ; <string> )
                                   3137 ;       Parse a word from input stream
                                   3138 ;       and copy it to name dictionary.
                                   3139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011E2                       3140         _HEADER TOKEN,5,"TOKEN"
      0011E2 11 8E                    1         .word LINK 
                           0011E4     2         LINK=.
      0011E4 05                       3         .byte 5  
      0011E5 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0011EA                          5         TOKEN:
      0011EA CD 0B F6         [ 4] 3141         CALL     BLANK
      0011ED CC 11 93         [ 2] 3142         JP     WORDD
                                   3143 
                                   3144 ;; Dictionary search
                                   3145 
                                   3146 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3147 ;       NAME>   ( na -- ca )
                                   3148 ;       Return a code address given
                                   3149 ;       a name address.
                                   3150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011F0                       3151         _HEADER NAMET,5,"NAME>"
      0011F0 11 E4                    1         .word LINK 
                           0011F2     2         LINK=.
      0011F2 05                       3         .byte 5  
      0011F3 4E 41 4D 45 3E           4         .ascii "NAME>"
      0011F8                          5         NAMET:
      0011F8 CD 0C C6         [ 4] 3152         CALL     COUNT
      0011FB CD 04 6F         [ 4] 3153         CALL     DOLIT
      0011FE 00 1F                 3154         .word      31
      001200 CD 06 76         [ 4] 3155         CALL     ANDD
      001203 CC 08 3C         [ 2] 3156         JP     PLUS
                                   3157 
                                   3158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3159 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3160 ;       Compare u cells in two
                                   3161 ;       strings. Return 0 if identical.
                                   3162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001206                       3163         _HEADER SAMEQ,5,"SAME?"
      001206 11 F2                    1         .word LINK 
                           001208     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001208 05                       3         .byte 5  
      001209 53 41 4D 45 3F           4         .ascii "SAME?"
      00120E                          5         SAMEQ:
      00120E CD 0B A4         [ 4] 3164         CALL     ONEM
      001211 CD 05 E2         [ 4] 3165         CALL     TOR
      001214 20 29            [ 2] 3166         JRA     SAME2
      001216 CD 06 41         [ 4] 3167 SAME1:  CALL     OVER
      001219 CD 05 45         [ 4] 3168         CALL     RAT
      00121C CD 08 3C         [ 4] 3169         CALL     PLUS
      00121F CD 05 01         [ 4] 3170         CALL     CAT
      001222 CD 06 41         [ 4] 3171         CALL     OVER
      001225 CD 05 45         [ 4] 3172         CALL     RAT
      001228 CD 08 3C         [ 4] 3173         CALL     PLUS
      00122B CD 05 01         [ 4] 3174         CALL     CAT
      00122E CD 08 D2         [ 4] 3175         CALL     SUBB
      001231 CD 07 CC         [ 4] 3176         CALL     QDUP
      001234 CD 04 98         [ 4] 3177         CALL     QBRAN
      001237 12 3F                 3178         .word      SAME2
      001239 CD 05 34         [ 4] 3179         CALL     RFROM
      00123C CC 06 0F         [ 2] 3180         JP     DROP
      00123F CD 04 83         [ 4] 3181 SAME2:  CALL     DONXT
      001242 12 16                 3182         .word      SAME1
      001244 CC 0C 03         [ 2] 3183         JP     ZERO
                                   3184 
                                   3185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3186 ;       find    ( a va -- ca na | a F )
                                   3187 ;       Search vocabulary for string.
                                   3188 ;       Return ca and na if succeeded.
                                   3189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001247                       3190         _HEADER FIND,4,"FIND"
      001247 12 08                    1         .word LINK 
                           001249     2         LINK=.
      001249 04                       3         .byte 4  
      00124A 46 49 4E 44              4         .ascii "FIND"
      00124E                          5         FIND:
      00124E CD 06 29         [ 4] 3191         CALL     SWAPP
      001251 CD 06 19         [ 4] 3192         CALL     DUPP
      001254 CD 05 01         [ 4] 3193         CALL     CAT
      001257 CD 06 EE         [ 4] 3194         CALL     TEMP
      00125A CD 04 D1         [ 4] 3195         CALL     STORE
      00125D CD 06 19         [ 4] 3196         CALL     DUPP
      001260 CD 04 E3         [ 4] 3197         CALL     AT
      001263 CD 05 E2         [ 4] 3198         CALL     TOR
      001266 CD 0B 6C         [ 4] 3199         CALL     CELLP
      001269 CD 06 29         [ 4] 3200         CALL     SWAPP
      00126C CD 04 E3         [ 4] 3201 FIND1:  CALL     AT
      00126F CD 06 19         [ 4] 3202         CALL     DUPP
      001272 CD 04 98         [ 4] 3203         CALL     QBRAN
      001275 12 AB                 3204         .word      FIND6
      001277 CD 06 19         [ 4] 3205         CALL     DUPP
      00127A CD 04 E3         [ 4] 3206         CALL     AT
      00127D CD 04 6F         [ 4] 3207         CALL     DOLIT
      001280 1F 7F                 3208         .word      MASKK
      001282 CD 06 76         [ 4] 3209         CALL     ANDD
      001285 CD 05 45         [ 4] 3210         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001288 CD 06 9F         [ 4] 3211         CALL     XORR
      00128B CD 04 98         [ 4] 3212         CALL     QBRAN
      00128E 12 9A                 3213         .word      FIND2
      001290 CD 0B 6C         [ 4] 3214         CALL     CELLP
      001293 CD 04 6F         [ 4] 3215         CALL     DOLIT
      001296 FF FF                 3216         .word     0xFFFF
      001298 20 0C            [ 2] 3217         JRA     FIND3
      00129A CD 0B 6C         [ 4] 3218 FIND2:  CALL     CELLP
      00129D CD 06 EE         [ 4] 3219         CALL     TEMP
      0012A0 CD 04 E3         [ 4] 3220         CALL     AT
      0012A3 CD 12 0E         [ 4] 3221         CALL     SAMEQ
      0012A6 CD 04 B4         [ 4] 3222 FIND3:  CALL     BRAN
      0012A9 12 BA                 3223         .word      FIND4
      0012AB CD 05 34         [ 4] 3224 FIND6:  CALL     RFROM
      0012AE CD 06 0F         [ 4] 3225         CALL     DROP
      0012B1 CD 06 29         [ 4] 3226         CALL     SWAPP
      0012B4 CD 0B 7B         [ 4] 3227         CALL     CELLM
      0012B7 CC 06 29         [ 2] 3228         JP     SWAPP
      0012BA CD 04 98         [ 4] 3229 FIND4:  CALL     QBRAN
      0012BD 12 C7                 3230         .word      FIND5
      0012BF CD 0B 7B         [ 4] 3231         CALL     CELLM
      0012C2 CD 0B 7B         [ 4] 3232         CALL     CELLM
      0012C5 20 A5            [ 2] 3233         JRA     FIND1
      0012C7 CD 05 34         [ 4] 3234 FIND5:  CALL     RFROM
      0012CA CD 06 0F         [ 4] 3235         CALL     DROP
      0012CD CD 06 29         [ 4] 3236         CALL     SWAPP
      0012D0 CD 06 0F         [ 4] 3237         CALL     DROP
      0012D3 CD 0B 7B         [ 4] 3238         CALL     CELLM
      0012D6 CD 06 19         [ 4] 3239         CALL     DUPP
      0012D9 CD 11 F8         [ 4] 3240         CALL     NAMET
      0012DC CC 06 29         [ 2] 3241         JP     SWAPP
                                   3242 
                                   3243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3244 ;       NAME?   ( a -- ca na | a F )
                                   3245 ;       Search vocabularies for a string.
                                   3246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012DF                       3247         _HEADER NAMEQ,5,"NAME?"
      0012DF 12 49                    1         .word LINK 
                           0012E1     2         LINK=.
      0012E1 05                       3         .byte 5  
      0012E2 4E 41 4D 45 3F           4         .ascii "NAME?"
      0012E7                          5         NAMEQ:
      0012E7 CD 07 62         [ 4] 3248         CALL   CNTXT
      0012EA CC 12 4E         [ 2] 3249         JP     FIND
                                   3250 
                                   3251 ;; Terminal response
                                   3252 
                                   3253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3254 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3255 ;       Backup cursor by one character.
                                   3256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012ED                       3257         _HEADER BKSP,2,"^H"
      0012ED 12 E1                    1         .word LINK 
                           0012EF     2         LINK=.
      0012EF 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0012F0 5E 48                    4         .ascii "^H"
      0012F2                          5         BKSP:
      0012F2 CD 05 E2         [ 4] 3258         CALL     TOR
      0012F5 CD 06 41         [ 4] 3259         CALL     OVER
      0012F8 CD 05 34         [ 4] 3260         CALL     RFROM
      0012FB CD 06 29         [ 4] 3261         CALL     SWAPP
      0012FE CD 06 41         [ 4] 3262         CALL     OVER
      001301 CD 06 9F         [ 4] 3263         CALL     XORR
      001304 CD 04 98         [ 4] 3264         CALL     QBRAN
      001307 13 22                 3265         .word      BACK1
      001309 CD 04 6F         [ 4] 3266         CALL     DOLIT
      00130C 00 08                 3267         .word      BKSPP
      00130E CD 04 36         [ 4] 3268         CALL     EMIT
      001311 CD 0B A4         [ 4] 3269         CALL     ONEM
      001314 CD 0B F6         [ 4] 3270         CALL     BLANK
      001317 CD 04 36         [ 4] 3271         CALL     EMIT
      00131A CD 04 6F         [ 4] 3272         CALL     DOLIT
      00131D 00 08                 3273         .word      BKSPP
      00131F CC 04 36         [ 2] 3274         JP     EMIT
      001322 81               [ 4] 3275 BACK1:  RET
                                   3276 
                                   3277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3278 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3279 ;       Accept and echo key stroke
                                   3280 ;       and bump cursor.
                                   3281 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001323                       3282         _HEADER TAP,3,"TAP"
      001323 12 EF                    1         .word LINK 
                           001325     2         LINK=.
      001325 03                       3         .byte 3  
      001326 54 41 50                 4         .ascii "TAP"
      001329                          5         TAP:
      001329 CD 06 19         [ 4] 3283         CALL     DUPP
      00132C CD 04 36         [ 4] 3284         CALL     EMIT
      00132F CD 06 41         [ 4] 3285         CALL     OVER
      001332 CD 04 F0         [ 4] 3286         CALL     CSTOR
      001335 CC 0B 97         [ 2] 3287         JP     ONEP
                                   3288 
                                   3289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3290 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3291 ;       Process a key stroke,
                                   3292 ;       CR,LF or backspace.
                                   3293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001338                       3294         _HEADER KTAP,4,"KTAP"
      001338 13 25                    1         .word LINK 
                           00133A     2         LINK=.
      00133A 04                       3         .byte 4  
      00133B 4B 54 41 50              4         .ascii "KTAP"
      00133F                          5         KTAP:
      00133F CD 06 19         [ 4] 3295         CALL     DUPP
      001342 CD 04 6F         [ 4] 3296         CALL     DOLIT
                           000001  3297 .if EOL_CR
      001345 00 0D                 3298         .word   CRR
                           000000  3299 .else ; EOL_LF 
                                   3300         .word   LF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3301 .endif 
      001347 CD 06 9F         [ 4] 3302         CALL     XORR
      00134A CD 04 98         [ 4] 3303         CALL     QBRAN
      00134D 13 65                 3304         .word      KTAP2
      00134F CD 04 6F         [ 4] 3305         CALL     DOLIT
      001352 00 08                 3306         .word      BKSPP
      001354 CD 06 9F         [ 4] 3307         CALL     XORR
      001357 CD 04 98         [ 4] 3308         CALL     QBRAN
      00135A 13 62                 3309         .word      KTAP1
      00135C CD 0B F6         [ 4] 3310         CALL     BLANK
      00135F CC 13 29         [ 2] 3311         JP     TAP
      001362 CC 12 F2         [ 2] 3312 KTAP1:  JP     BKSP
      001365 CD 06 0F         [ 4] 3313 KTAP2:  CALL     DROP
      001368 CD 06 29         [ 4] 3314         CALL     SWAPP
      00136B CD 06 0F         [ 4] 3315         CALL     DROP
      00136E CC 06 19         [ 2] 3316         JP     DUPP
                                   3317 
                                   3318 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3319 ;       accept  ( b u -- b u )
                                   3320 ;       Accept characters to input
                                   3321 ;       buffer. Return with actual count.
                                   3322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001371                       3323         _HEADER ACCEP,6,"ACCEPT"
      001371 13 3A                    1         .word LINK 
                           001373     2         LINK=.
      001373 06                       3         .byte 6  
      001374 41 43 43 45 50 54        4         .ascii "ACCEPT"
      00137A                          5         ACCEP:
      00137A CD 06 41         [ 4] 3324         CALL     OVER
      00137D CD 08 3C         [ 4] 3325         CALL     PLUS
      001380 CD 06 41         [ 4] 3326         CALL     OVER
      001383 CD 08 27         [ 4] 3327 ACCP1:  CALL     DDUP
      001386 CD 06 9F         [ 4] 3328         CALL     XORR
      001389 CD 04 98         [ 4] 3329         CALL     QBRAN
      00138C 13 AE                 3330         .word      ACCP4
      00138E CD 0F 0F         [ 4] 3331         CALL     KEY
      001391 CD 06 19         [ 4] 3332         CALL     DUPP
      001394 CD 0B F6         [ 4] 3333         CALL     BLANK
      001397 CD 04 6F         [ 4] 3334         CALL     DOLIT
      00139A 00 7F                 3335         .word      127
      00139C CD 09 96         [ 4] 3336         CALL     WITHI
      00139F CD 04 98         [ 4] 3337         CALL     QBRAN
      0013A2 13 A9                 3338         .word      ACCP2
      0013A4 CD 13 29         [ 4] 3339         CALL     TAP
      0013A7 20 03            [ 2] 3340         JRA     ACCP3
      0013A9 CD 13 3F         [ 4] 3341 ACCP2:  CALL     KTAP
      0013AC 20 D5            [ 2] 3342 ACCP3:  JRA     ACCP1
      0013AE CD 06 0F         [ 4] 3343 ACCP4:  CALL     DROP
      0013B1 CD 06 41         [ 4] 3344         CALL     OVER
      0013B4 CC 08 D2         [ 2] 3345         JP     SUBB
                                   3346 
                                   3347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3348 ;       QUERY   ( -- )
                                   3349 ;       Accept input stream to
                                   3350 ;       terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   3351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013B7                       3352         _HEADER QUERY,5,"QUERY"
      0013B7 13 73                    1         .word LINK 
                           0013B9     2         LINK=.
      0013B9 05                       3         .byte 5  
      0013BA 51 55 45 52 59           4         .ascii "QUERY"
      0013BF                          5         QUERY:
      0013BF CD 0C FF         [ 4] 3353         CALL     TIB
      0013C2 CD 04 6F         [ 4] 3354         CALL     DOLIT
      0013C5 00 50                 3355         .word      80
      0013C7 CD 13 7A         [ 4] 3356         CALL     ACCEP
      0013CA CD 07 0D         [ 4] 3357         CALL     NTIB
      0013CD CD 04 D1         [ 4] 3358         CALL     STORE
      0013D0 CD 06 0F         [ 4] 3359         CALL     DROP
      0013D3 CD 0C 03         [ 4] 3360         CALL     ZERO
      0013D6 CD 06 FD         [ 4] 3361         CALL     INN
      0013D9 CC 04 D1         [ 2] 3362         JP     STORE
                                   3363 
                                   3364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3365 ;       ABORT   ( -- )
                                   3366 ;       Reset data stack and
                                   3367 ;       jump to QUIT.
                                   3368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013DC                       3369         _HEADER ABORT,5,"ABORT"
      0013DC 13 B9                    1         .word LINK 
                           0013DE     2         LINK=.
      0013DE 05                       3         .byte 5  
      0013DF 41 42 4F 52 54           4         .ascii "ABORT"
      0013E4                          5         ABORT:
      0013E4 CD 14 D8         [ 4] 3370         CALL     PRESE
      0013E7 CC 14 F5         [ 2] 3371         JP     QUIT
                                   3372 
                                   3373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3374 ;       abort"  ( f -- )
                                   3375 ;       Run time routine of ABORT".
                                   3376 ;       Abort with a message.
                                   3377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013EA                       3378         _HEADER ABORQ,COMPO+6,'ABORT"'
      0013EA 13 DE                    1         .word LINK 
                           0013EC     2         LINK=.
      0013EC 46                       3         .byte COMPO+6  
      0013ED 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0013F3                          5         ABORQ:
      0013F3 CD 04 98         [ 4] 3379         CALL     QBRAN
      0013F6 14 12                 3380         .word      ABOR2   ;text flag
      0013F8 CD 0F 99         [ 4] 3381         CALL     DOSTR
      0013FB CD 0F 47         [ 4] 3382 ABOR1:  CALL     SPACE
      0013FE CD 0C C6         [ 4] 3383         CALL     COUNT
      001401 CD 0F 71         [ 4] 3384         CALL     TYPES
      001404 CD 04 6F         [ 4] 3385         CALL     DOLIT
      001407 00 3F                 3386         .word     63 ; "?"
      001409 CD 04 36         [ 4] 3387         CALL     EMIT
      00140C CD 0F 89         [ 4] 3388         CALL     CR
      00140F CC 13 E4         [ 2] 3389         JP     ABORT   ;pass error string
      001412 CD 0F 99         [ 4] 3390 ABOR2:  CALL     DOSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001415 CC 06 0F         [ 2] 3391         JP     DROP
                                   3392 
                                   3393 ;; The text interpreter
                                   3394 
                                   3395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3396 ;       $INTERPRET      ( a -- )
                                   3397 ;       Interpret a word. If failed,
                                   3398 ;       try to convert it to an integer.
                                   3399 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001418                       3400         _HEADER INTER,10,"$INTERPRET"
      001418 13 EC                    1         .word LINK 
                           00141A     2         LINK=.
      00141A 0A                       3         .byte 10  
      00141B 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001425                          5         INTER:
      001425 CD 12 E7         [ 4] 3401         CALL     NAMEQ
      001428 CD 07 CC         [ 4] 3402         CALL     QDUP    ;?defined
      00142B CD 04 98         [ 4] 3403         CALL     QBRAN
      00142E 14 4F                 3404         .word      INTE1
      001430 CD 04 E3         [ 4] 3405         CALL     AT
      001433 CD 04 6F         [ 4] 3406         CALL     DOLIT
      001436 40 00                 3407 	.word       0x4000	; COMPO*256
      001438 CD 06 76         [ 4] 3408         CALL     ANDD    ;?compile only lexicon bits
      00143B CD 13 F3         [ 4] 3409         CALL     ABORQ
      00143E 0D                    3410         .byte      13
      00143F 20 63 6F 6D 70 69 6C  3411         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00144C CC 04 C4         [ 2] 3412         JP     EXECU
      00144F CD 25 DA         [ 4] 3413 INTE1:  CALL     NUMBQ   ;convert a number
      001452 CD 04 98         [ 4] 3414         CALL     QBRAN
      001455 13 FB                 3415         .word    ABOR1
      001457 81               [ 4] 3416         RET
                                   3417 
                                   3418 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3419 ;       [       ( -- )
                                   3420 ;       Start  text interpreter.
                                   3421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001458                       3422         _HEADER LBRAC,IMEDD+1,"["
      001458 14 1A                    1         .word LINK 
                           00145A     2         LINK=.
      00145A 81                       3         .byte IMEDD+1  
      00145B 5B                       4         .ascii "["
      00145C                          5         LBRAC:
      00145C CD 04 6F         [ 4] 3423         CALL   DOLIT
      00145F 14 25                 3424         .word  INTER
      001461 CD 07 40         [ 4] 3425         CALL   TEVAL
      001464 CC 04 D1         [ 2] 3426         JP     STORE
                                   3427 
                                   3428 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3429 ;       .OK     ( -- )
                                   3430 ;       Display 'ok' while interpreting.
                                   3431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001467                       3432         _HEADER DOTOK,3,".OK"
      001467 14 5A                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                           001469     2         LINK=.
      001469 03                       3         .byte 3  
      00146A 2E 4F 4B                 4         .ascii ".OK"
      00146D                          5         DOTOK:
      00146D CD 04 6F         [ 4] 3433         CALL     DOLIT
      001470 14 25                 3434         .word      INTER
      001472 CD 07 40         [ 4] 3435         CALL     TEVAL
      001475 CD 04 E3         [ 4] 3436         CALL     AT
      001478 CD 08 FA         [ 4] 3437         CALL     EQUAL
      00147B CD 04 98         [ 4] 3438         CALL     QBRAN
      00147E 14 87                 3439         .word      DOTO1
      001480 CD 0F B6         [ 4] 3440         CALL     DOTQP
      001483 03                    3441         .byte      3
      001484 20 6F 6B              3442         .ascii     " ok"
      001487 CC 0F 89         [ 2] 3443 DOTO1:  JP     CR
                                   3444 
                                   3445 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3446 ;       ?STACK  ( -- )
                                   3447 ;       Abort if stack underflows.
                                   3448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148A                       3449         _HEADER QSTAC,6,"?STACK"
      00148A 14 69                    1         .word LINK 
                           00148C     2         LINK=.
      00148C 06                       3         .byte 6  
      00148D 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001493                          5         QSTAC:
      001493 CD 0C 45         [ 4] 3450         CALL     DEPTH
      001496 CD 06 50         [ 4] 3451         CALL     ZLESS   ;check only for underflow
      001499 CD 13 F3         [ 4] 3452         CALL     ABORQ
      00149C 0B                    3453         .byte      11
      00149D 20 75 6E 64 65 72 66  3454         .ascii     " underflow "
             6C 6F 77 20
      0014A8 81               [ 4] 3455         RET
                                   3456 
                                   3457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3458 ;       EVAL    ( -- )
                                   3459 ;       Interpret  input stream.
                                   3460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014A9                       3461         _HEADER EVAL,4,"EVAL"
      0014A9 14 8C                    1         .word LINK 
                           0014AB     2         LINK=.
      0014AB 04                       3         .byte 4  
      0014AC 45 56 41 4C              4         .ascii "EVAL"
      0014B0                          5         EVAL:
      0014B0 CD 11 EA         [ 4] 3462 EVAL1:  CALL     TOKEN
      0014B3 CD 06 19         [ 4] 3463         CALL     DUPP
      0014B6 CD 05 01         [ 4] 3464         CALL     CAT     ;?input stream empty
      0014B9 CD 04 98         [ 4] 3465         CALL     QBRAN
      0014BC 14 C9                 3466         .word    EVAL2
      0014BE CD 07 40         [ 4] 3467         CALL     TEVAL
      0014C1 CD 0D 13         [ 4] 3468         CALL     ATEXE
      0014C4 CD 14 93         [ 4] 3469         CALL     QSTAC   ;evaluate input, check stack
      0014C7 20 E7            [ 2] 3470         JRA     EVAL1 
      0014C9 CD 06 0F         [ 4] 3471 EVAL2:  CALL     DROP
      0014CC CC 14 6D         [ 2] 3472         JP       DOTOK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   3473 
                                   3474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3475 ;       PRESET  ( -- )
                                   3476 ;       Reset data stack pointer and
                                   3477 ;       terminal input buffer.
                                   3478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014CF                       3479         _HEADER PRESE,6,"PRESET"
      0014CF 14 AB                    1         .word LINK 
                           0014D1     2         LINK=.
      0014D1 06                       3         .byte 6  
      0014D2 50 52 45 53 45 54        4         .ascii "PRESET"
      0014D8                          5         PRESE:
      0014D8 CD 04 6F         [ 4] 3480         CALL     DOLIT
      0014DB 16 80                 3481         .word      SPP
      0014DD CD 06 06         [ 4] 3482         CALL     SPSTO
      0014E0 CD 04 6F         [ 4] 3483         CALL     DOLIT
      0014E3 17 00                 3484         .word      TIBB
      0014E5 CD 07 0D         [ 4] 3485         CALL     NTIB
      0014E8 CD 0B 6C         [ 4] 3486         CALL     CELLP
      0014EB CC 04 D1         [ 2] 3487         JP     STORE
                                   3488 
                                   3489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3490 ;       QUIT    ( -- )
                                   3491 ;       Reset return stack pointer
                                   3492 ;       and start text interpreter.
                                   3493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014EE                       3494         _HEADER QUIT,4,"QUIT"
      0014EE 14 D1                    1         .word LINK 
                           0014F0     2         LINK=.
      0014F0 04                       3         .byte 4  
      0014F1 51 55 49 54              4         .ascii "QUIT"
      0014F5                          5         QUIT:
      0014F5 CD 04 6F         [ 4] 3495         CALL     DOLIT
      0014F8 17 FF                 3496         .word      RPP
      0014FA CD 05 1E         [ 4] 3497         CALL     RPSTO   ;reset return stack pointer
      0014FD CD 14 5C         [ 4] 3498 QUIT1:  CALL     LBRAC   ;start interpretation
      001500 CD 13 BF         [ 4] 3499 QUIT2:  CALL     QUERY   ;get input
      001503 CD 14 B0         [ 4] 3500         CALL     EVAL
      001506 20 F8            [ 2] 3501         JRA     QUIT2   ;continue till error
                                   3502 
                                   3503 ;; The compiler
                                   3504 
                                   3505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3506 ;       '       ( -- ca )
                                   3507 ;       Search vocabularies for
                                   3508 ;       next word in input stream.
                                   3509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001508                       3510         _HEADER TICK,1,"'"
      001508 14 F0                    1         .word LINK 
                           00150A     2         LINK=.
      00150A 01                       3         .byte 1  
      00150B 27                       4         .ascii "'"
      00150C                          5         TICK:
      00150C CD 11 EA         [ 4] 3511         CALL     TOKEN
      00150F CD 12 E7         [ 4] 3512         CALL     NAMEQ   ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001512 CD 04 98         [ 4] 3513         CALL     QBRAN
      001515 13 FB                 3514         .word      ABOR1
      001517 81               [ 4] 3515         RET     ;yes, push code address
                                   3516 
                                   3517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3518 ;       ALLOT   ( n -- )
                                   3519 ;       Allocate n bytes to RAM 
                                   3520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001518                       3521         _HEADER ALLOT,5,"ALLOT"
      001518 15 0A                    1         .word LINK 
                           00151A     2         LINK=.
      00151A 05                       3         .byte 5  
      00151B 41 4C 4C 4F 54           4         .ascii "ALLOT"
      001520                          5         ALLOT:
      001520 CD 07 70         [ 4] 3522         CALL     VPP
                                   3523 ; must update APP_VP each time VP is modidied
      001523 CD 0C 73         [ 4] 3524         call PSTOR 
      001526 CC 1D 29         [ 2] 3525         jp UPDATVP 
                                   3526 
                                   3527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3528 ;       ,       ( w -- )
                                   3529 ;         Compile an integer into
                                   3530 ;         variable space.
                                   3531 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001529                       3532         _HEADER COMMA,1,^/"\,"/
      001529 15 1A                    1         .word LINK 
                           00152B     2         LINK=.
      00152B 01                       3         .byte 1  
      00152C 5C 2C                    4         .ascii "\,"
      00152E                          5         COMMA:
      00152E CD 0C DD         [ 4] 3533         CALL     HERE
      001531 CD 06 19         [ 4] 3534         CALL     DUPP
      001534 CD 0B 6C         [ 4] 3535         CALL     CELLP   ;cell boundary
      001537 CD 07 70         [ 4] 3536         CALL     VPP
      00153A CD 04 D1         [ 4] 3537         CALL     STORE
      00153D CC 04 D1         [ 2] 3538         JP     STORE
                                   3539 
                                   3540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3541 ;       C,      ( c -- )
                                   3542 ;       Compile a byte into
                                   3543 ;       variables space.
                                   3544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001540                       3545         _HEADER CCOMMA,2,^/"C,"/
      001540 15 2B                    1         .word LINK 
                           001542     2         LINK=.
      001542 02                       3         .byte 2  
      001543 43 2C                    4         .ascii "C,"
      001545                          5         CCOMMA:
      001545 CD 0C DD         [ 4] 3546         CALL     HERE
      001548 CD 06 19         [ 4] 3547         CALL     DUPP
      00154B CD 0B 97         [ 4] 3548         CALL     ONEP
      00154E CD 07 70         [ 4] 3549         CALL     VPP
      001551 CD 04 D1         [ 4] 3550         CALL     STORE
      001554 CC 04 F0         [ 2] 3551         JP     CSTOR
                                   3552 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   3553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3554 ;       [COMPILE]       ( -- ; <string> )
                                   3555 ;       Compile next immediate
                                   3556 ;       word into code dictionary.
                                   3557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001557                       3558         _HEADER BCOMP,IMEDD+9,"[COMPILE]"
      001557 15 42                    1         .word LINK 
                           001559     2         LINK=.
      001559 89                       3         .byte IMEDD+9  
      00155A 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001563                          5         BCOMP:
      001563 CD 15 0C         [ 4] 3559         CALL     TICK
      001566 CC 18 44         [ 2] 3560         JP     JSRC
                                   3561 
                                   3562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3563 ;       COMPILE ( -- )
                                   3564 ;       Compile next jsr in
                                   3565 ;       colon list to code dictionary.
                                   3566 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001569                       3567         _HEADER COMPI,COMPO+7,"COMPILE"
      001569 15 59                    1         .word LINK 
                           00156B     2         LINK=.
      00156B 47                       3         .byte COMPO+7  
      00156C 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001573                          5         COMPI:
      001573 CD 05 34         [ 4] 3568         CALL     RFROM
      001576 CD 06 19         [ 4] 3569         CALL     DUPP
      001579 CD 04 E3         [ 4] 3570         CALL     AT
      00157C CD 18 44         [ 4] 3571         CALL     JSRC    ;compile subroutine
      00157F CD 0B 6C         [ 4] 3572         CALL     CELLP
      001582 90 93            [ 1] 3573         ldw y,x 
      001584 90 FE            [ 2] 3574         ldw y,(y)
      001586 1C 00 02         [ 2] 3575         addw x,#CELLL 
      001589 90 FC            [ 2] 3576         jp (y)
                                   3577 
                                   3578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3579 ;       LITERAL ( w -- )
                                   3580 ;       Compile tos to dictionary
                                   3581 ;       as an integer literal.
                                   3582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00158B                       3583         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00158B 15 6B                    1         .word LINK 
                           00158D     2         LINK=.
      00158D C7                       3         .byte COMPO+IMEDD+7  
      00158E 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001595                          5         LITER:
      001595 CD 15 73         [ 4] 3584         CALL     COMPI
      001598 04 6F                 3585         .word DOLIT 
      00159A CC 15 2E         [ 2] 3586         JP     COMMA
                                   3587 
                                   3588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3589 ;       $,"     ( -- )
                                   3590 ;       Compile a literal string
                                   3591 ;       up to next " .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   3592 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3593 ;        _HEADER STRCQ,3,^/'$,"'/
      00159D                       3594 STRCQ:
      00159D CD 04 6F         [ 4] 3595         CALL     DOLIT
      0015A0 00 22                 3596         .word     34	; "
      0015A2 CD 11 29         [ 4] 3597         CALL     PARSE
      0015A5 CD 0C DD         [ 4] 3598         CALL     HERE
      0015A8 CD 0D AE         [ 4] 3599         CALL     PACKS   ;string to code dictionary
      0015AB CD 0C C6         [ 4] 3600         CALL     COUNT
      0015AE CD 08 3C         [ 4] 3601         CALL     PLUS    ;calculate aligned end of string
      0015B1 CD 07 70         [ 4] 3602         CALL     VPP
      0015B4 CC 04 D1         [ 2] 3603         JP     STORE
                                   3604 
                                   3605 ;; Structures
                                   3606 
                                   3607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3608 ;       FOR     ( -- a )
                                   3609 ;       Start a FOR-NEXT loop
                                   3610 ;       structure in a colon definition.
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B7                       3612         _HEADER FOR,IMEDD+3,"FOR"
      0015B7 15 8D                    1         .word LINK 
                           0015B9     2         LINK=.
      0015B9 83                       3         .byte IMEDD+3  
      0015BA 46 4F 52                 4         .ascii "FOR"
      0015BD                          5         FOR:
      0015BD CD 15 73         [ 4] 3613         CALL     COMPI
      0015C0 05 E2                 3614         .word TOR 
      0015C2 CC 0C DD         [ 2] 3615         JP     HERE
                                   3616 
                                   3617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3618 ;       NEXT    ( a -- )
                                   3619 ;       Terminate a FOR-NEXT loop.
                                   3620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C5                       3621         _HEADER NEXT,IMEDD+4,"NEXT"
      0015C5 15 B9                    1         .word LINK 
                           0015C7     2         LINK=.
      0015C7 84                       3         .byte IMEDD+4  
      0015C8 4E 45 58 54              4         .ascii "NEXT"
      0015CC                          5         NEXT:
      0015CC CD 15 73         [ 4] 3622         CALL     COMPI
      0015CF 04 83                 3623         .word DONXT 
      0015D1 CD 07 BC         [ 4] 3624         call ADRADJ
      0015D4 CC 15 2E         [ 2] 3625         JP     COMMA
                                   3626 
                                   3627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3628 ;       I ( -- n )
                                   3629 ;       stack COUNTER
                                   3630 ;       of innermost FOR-NEXT  
                                   3631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015D7                       3632         _HEADER IFETCH,1,"I"
      0015D7 15 C7                    1         .word LINK 
                           0015D9     2         LINK=.
      0015D9 01                       3         .byte 1  
      0015DA 49                       4         .ascii "I"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0015DB                          5         IFETCH:
      0015DB 1D 00 02         [ 2] 3633         subw x,#CELLL 
      0015DE 16 03            [ 2] 3634         ldw y,(3,sp)
      0015E0 FF               [ 2] 3635         ldw (x),y 
      0015E1 81               [ 4] 3636         ret 
                                   3637 
                                   3638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3639 ;       J ( -- n )
                                   3640 ;   stack COUNTER
                                   3641 ;   of outer FOR-NEXT  
                                   3642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015E2                       3643         _HEADER JFETCH,1,"J"
      0015E2 15 D9                    1         .word LINK 
                           0015E4     2         LINK=.
      0015E4 01                       3         .byte 1  
      0015E5 4A                       4         .ascii "J"
      0015E6                          5         JFETCH:
      0015E6 1D 00 02         [ 2] 3644         SUBW X,#CELLL 
      0015E9 16 05            [ 2] 3645         LDW Y,(5,SP)
      0015EB FF               [ 2] 3646         LDW (X),Y 
      0015EC 81               [ 4] 3647         RET 
                                   3648 
                                   3649 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3650 ;       BEGIN   ( -- a )
                                   3651 ;       Start an infinite or
                                   3652 ;       indefinite loop structure.
                                   3653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015ED                       3654         _HEADER BEGIN,IMEDD+5,"BEGIN"
      0015ED 15 E4                    1         .word LINK 
                           0015EF     2         LINK=.
      0015EF 85                       3         .byte IMEDD+5  
      0015F0 42 45 47 49 4E           4         .ascii "BEGIN"
      0015F5                          5         BEGIN:
      0015F5 CC 0C DD         [ 2] 3655         JP     HERE
                                   3656 
                                   3657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3658 ;       UNTIL   ( a -- )
                                   3659 ;       Terminate a BEGIN-UNTIL
                                   3660 ;       indefinite loop structure.
                                   3661 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F8                       3662         _HEADER UNTIL,IMEDD+5,"UNTIL"
      0015F8 15 EF                    1         .word LINK 
                           0015FA     2         LINK=.
      0015FA 85                       3         .byte IMEDD+5  
      0015FB 55 4E 54 49 4C           4         .ascii "UNTIL"
      001600                          5         UNTIL:
      001600 CD 15 73         [ 4] 3663         CALL     COMPI
      001603 04 98                 3664         .word    QBRAN 
      001605 CD 07 BC         [ 4] 3665         call ADRADJ
      001608 CC 15 2E         [ 2] 3666         JP     COMMA
                                   3667 
                                   3668 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3669 ;       AGAIN   ( a -- )
                                   3670 ;       Terminate a BEGIN-AGAIN
                                   3671 ;       infinite loop structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00160B                       3673         _HEADER AGAIN,IMEDD+5,"AGAIN"
      00160B 15 FA                    1         .word LINK 
                           00160D     2         LINK=.
      00160D 85                       3         .byte IMEDD+5  
      00160E 41 47 41 49 4E           4         .ascii "AGAIN"
      001613                          5         AGAIN:
                           000001  3674 .if OPTIMIZE 
      001613                       3675         _DOLIT JPIMM 
      001613 CD 04 6F         [ 4]    1     CALL DOLIT 
      001616 00 CC                    2     .word JPIMM 
      001618 CD 15 45         [ 4] 3676         CALL  CCOMMA
                           000000  3677 .else 
                                   3678         CALL     COMPI
                                   3679         .word BRAN
                                   3680 .endif 
      00161B CD 07 BC         [ 4] 3681         call ADRADJ 
      00161E CC 15 2E         [ 2] 3682         JP     COMMA
                                   3683 
                                   3684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3685 ;       IF      ( -- A )
                                   3686 ;       Begin a conditional branch.
                                   3687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001621                       3688         _HEADER IFF,IMEDD+2,"IF"
      001621 16 0D                    1         .word LINK 
                           001623     2         LINK=.
      001623 82                       3         .byte IMEDD+2  
      001624 49 46                    4         .ascii "IF"
      001626                          5         IFF:
      001626 CD 15 73         [ 4] 3689         CALL     COMPI
      001629 04 98                 3690         .word QBRAN
      00162B CD 0C DD         [ 4] 3691         CALL     HERE
      00162E CD 0C 03         [ 4] 3692         CALL     ZERO
      001631 CC 15 2E         [ 2] 3693         JP     COMMA
                                   3694 
                                   3695 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3696 ;       THEN        ( A -- )
                                   3697 ;       Terminate a conditional 
                                   3698 ;       branch structure.
                                   3699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001634                       3700         _HEADER THENN,IMEDD+4,"THEN"
      001634 16 23                    1         .word LINK 
                           001636     2         LINK=.
      001636 84                       3         .byte IMEDD+4  
      001637 54 48 45 4E              4         .ascii "THEN"
      00163B                          5         THENN:
      00163B CD 0C DD         [ 4] 3701         CALL     HERE
      00163E CD 07 BC         [ 4] 3702         call ADRADJ 
      001641 CD 06 29         [ 4] 3703         CALL     SWAPP
      001644 CC 04 D1         [ 2] 3704         JP     STORE
                                   3705 
                                   3706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3707 ;       ELSE        ( A -- A )
                                   3708 ;       Start the false clause in 
                                   3709 ;       an IF-ELSE-THEN structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3710 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001647                       3711         _HEADER ELSEE,IMEDD+4,"ELSE"
      001647 16 36                    1         .word LINK 
                           001649     2         LINK=.
      001649 84                       3         .byte IMEDD+4  
      00164A 45 4C 53 45              4         .ascii "ELSE"
      00164E                          5         ELSEE:
                           000001  3712 .if OPTIMIZE 
      00164E                       3713         _DOLIT JPIMM 
      00164E CD 04 6F         [ 4]    1     CALL DOLIT 
      001651 00 CC                    2     .word JPIMM 
      001653 CD 15 45         [ 4] 3714         CALL CCOMMA 
                           000000  3715 .else 
                                   3716          CALL     COMPI
                                   3717         .word BRAN
                                   3718 .endif 
      001656 CD 0C DD         [ 4] 3719         CALL     HERE
      001659 CD 0C 03         [ 4] 3720         CALL     ZERO
      00165C CD 15 2E         [ 4] 3721         CALL     COMMA
      00165F CD 06 29         [ 4] 3722         CALL     SWAPP
      001662 CD 0C DD         [ 4] 3723         CALL     HERE
      001665 CD 07 BC         [ 4] 3724         call ADRADJ 
      001668 CD 06 29         [ 4] 3725         CALL     SWAPP
      00166B CC 04 D1         [ 2] 3726         JP     STORE
                                   3727 
                                   3728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3729 ;       AHEAD       ( -- A )
                                   3730 ;       Compile a forward branch
                                   3731 ;       instruction.
                                   3732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00166E                       3733         _HEADER AHEAD,IMEDD+5,"AHEAD"
      00166E 16 49                    1         .word LINK 
                           001670     2         LINK=.
      001670 85                       3         .byte IMEDD+5  
      001671 41 48 45 41 44           4         .ascii "AHEAD"
      001676                          5         AHEAD:
                           000001  3734 .if OPTIMIZE 
      001676                       3735         _DOLIT JPIMM 
      001676 CD 04 6F         [ 4]    1     CALL DOLIT 
      001679 00 CC                    2     .word JPIMM 
      00167B CD 15 45         [ 4] 3736         CALL CCOMMA
                           000000  3737 .else 
                                   3738         CALL     COMPI
                                   3739         .word BRAN
                                   3740 .endif 
      00167E CD 0C DD         [ 4] 3741         CALL     HERE
      001681 CD 0C 03         [ 4] 3742         CALL     ZERO
      001684 CC 15 2E         [ 2] 3743         JP     COMMA
                                   3744 
                                   3745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3746 ;       WHILE       ( a -- A a )
                                   3747 ;       Conditional branch out of a 
                                   3748 ;       BEGIN-WHILE-REPEAT loop.
                                   3749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001687                       3750         _HEADER WHILE,IMEDD+5,"WHILE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001687 16 70                    1         .word LINK 
                           001689     2         LINK=.
      001689 85                       3         .byte IMEDD+5  
      00168A 57 48 49 4C 45           4         .ascii "WHILE"
      00168F                          5         WHILE:
      00168F CD 15 73         [ 4] 3751         CALL     COMPI
      001692 04 98                 3752         .word QBRAN
      001694 CD 0C DD         [ 4] 3753         CALL     HERE
      001697 CD 0C 03         [ 4] 3754         CALL     ZERO
      00169A CD 15 2E         [ 4] 3755         CALL     COMMA
      00169D CC 06 29         [ 2] 3756         JP     SWAPP
                                   3757 
                                   3758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3759 ;       REPEAT      ( A a -- )
                                   3760 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3761 ;       indefinite loop.
                                   3762 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A0                       3763         _HEADER REPEA,IMEDD+6,"REPEAT"
      0016A0 16 89                    1         .word LINK 
                           0016A2     2         LINK=.
      0016A2 86                       3         .byte IMEDD+6  
      0016A3 52 45 50 45 41 54        4         .ascii "REPEAT"
      0016A9                          5         REPEA:
                           000001  3764 .if OPTIMIZE 
      0016A9                       3765         _DOLIT JPIMM 
      0016A9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0016AC 00 CC                    2     .word JPIMM 
      0016AE CD 15 45         [ 4] 3766         CALL  CCOMMA
                           000000  3767 .else 
                                   3768         CALL     COMPI
                                   3769         .word BRAN
                                   3770 .endif 
      0016B1 CD 07 BC         [ 4] 3771         call ADRADJ 
      0016B4 CD 15 2E         [ 4] 3772         CALL     COMMA
      0016B7 CD 0C DD         [ 4] 3773         CALL     HERE
      0016BA CD 07 BC         [ 4] 3774         call ADRADJ 
      0016BD CD 06 29         [ 4] 3775         CALL     SWAPP
      0016C0 CC 04 D1         [ 2] 3776         JP     STORE
                                   3777 
                                   3778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3779 ;       AFT         ( a -- a A )
                                   3780 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3781 ;       loop the first time through.
                                   3782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016C3                       3783         _HEADER AFT,IMEDD+3,"AFT"
      0016C3 16 A2                    1         .word LINK 
                           0016C5     2         LINK=.
      0016C5 83                       3         .byte IMEDD+3  
      0016C6 41 46 54                 4         .ascii "AFT"
      0016C9                          5         AFT:
      0016C9 CD 06 0F         [ 4] 3784         CALL     DROP
      0016CC CD 16 76         [ 4] 3785         CALL     AHEAD
      0016CF CD 0C DD         [ 4] 3786         CALL     HERE
      0016D2 CC 06 29         [ 2] 3787         JP     SWAPP
                                   3788 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   3789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3790 ;       ABORT"      ( -- ; <string> )
                                   3791 ;       Conditional abort with an error message.
                                   3792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D5                       3793         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0016D5 16 C5                    1         .word LINK 
                           0016D7     2         LINK=.
      0016D7 86                       3         .byte IMEDD+6  
      0016D8 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0016DE                          5         ABRTQ:
      0016DE CD 15 73         [ 4] 3794         CALL     COMPI
      0016E1 13 F3                 3795         .word ABORQ
      0016E3 CC 15 9D         [ 2] 3796         JP     STRCQ
                                   3797 
                                   3798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3799 ;       $"     ( -- ; <string> )
                                   3800 ;       Compile an inline string literal.
                                   3801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E6                       3802         _HEADER STRQ,IMEDD+2,'$"'
      0016E6 16 D7                    1         .word LINK 
                           0016E8     2         LINK=.
      0016E8 82                       3         .byte IMEDD+2  
      0016E9 24 22                    4         .ascii '$"'
      0016EB                          5         STRQ:
      0016EB CD 15 73         [ 4] 3803         CALL     COMPI
      0016EE 0F B2                 3804         .word STRQP 
      0016F0 CC 15 9D         [ 2] 3805         JP     STRCQ
                                   3806 
                                   3807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3808 ;       ."          ( -- ; <string> )
                                   3809 ;       Compile an inline string literal 
                                   3810 ;       to be typed out at run time.
                                   3811 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F3                       3812         _HEADER DOTQ,IMEDD+2,'."'
      0016F3 16 E8                    1         .word LINK 
                           0016F5     2         LINK=.
      0016F5 82                       3         .byte IMEDD+2  
      0016F6 2E 22                    4         .ascii '."'
      0016F8                          5         DOTQ:
      0016F8 CD 15 73         [ 4] 3813         CALL     COMPI
      0016FB 0F B6                 3814         .word DOTQP 
      0016FD CC 15 9D         [ 2] 3815         JP     STRCQ
                                   3816 
                                   3817 ;; Name compiler
                                   3818 
                                   3819 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3820 ;       ?UNIQUE ( a -- a )
                                   3821 ;       Display a warning message
                                   3822 ;       if word already exists.
                                   3823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001700                       3824         _HEADER UNIQU,7,"?UNIQUE"
      001700 16 F5                    1         .word LINK 
                           001702     2         LINK=.
      001702 07                       3         .byte 7  
      001703 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      00170A                          5         UNIQU:
      00170A CD 06 19         [ 4] 3825         CALL     DUPP
      00170D CD 12 E7         [ 4] 3826         CALL     NAMEQ   ;?name exists
      001710 CD 04 98         [ 4] 3827         CALL     QBRAN
      001713 17 29                 3828         .word      UNIQ1
      001715 CD 0F B6         [ 4] 3829         CALL     DOTQP   ;redef are OK
      001718 07                    3830         .byte       7
      001719 20 72 65 44 65 66 20  3831         .ascii     " reDef "       
      001720 CD 06 41         [ 4] 3832         CALL     OVER
      001723 CD 0C C6         [ 4] 3833         CALL     COUNT
      001726 CD 0F 71         [ 4] 3834         CALL     TYPES   ;just in case
      001729 CC 06 0F         [ 2] 3835 UNIQ1:  JP     DROP
                                   3836 
                                   3837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3838 ;       $,n     ( na -- )
                                   3839 ;       Build a new dictionary name
                                   3840 ;       using string at na.
                                   3841 ; compile dans l'espace des variables 
                                   3842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3843 ;        _HEADER SNAME,3,^/"$,n"/
      00172C                       3844 SNAME: 
      00172C CD 06 19         [ 4] 3845         CALL     DUPP
      00172F CD 05 01         [ 4] 3846         CALL     CAT     ;?null input
      001732 CD 04 98         [ 4] 3847         CALL     QBRAN
      001735 17 62                 3848         .word      PNAM1
      001737 CD 17 0A         [ 4] 3849         CALL     UNIQU   ;?redefinition
      00173A CD 06 19         [ 4] 3850         CALL     DUPP
      00173D CD 0C C6         [ 4] 3851         CALL     COUNT
      001740 CD 08 3C         [ 4] 3852         CALL     PLUS
      001743 CD 07 70         [ 4] 3853         CALL     VPP
      001746 CD 04 D1         [ 4] 3854         CALL     STORE
      001749 CD 06 19         [ 4] 3855         CALL     DUPP
      00174C CD 07 8E         [ 4] 3856         CALL     LAST
      00174F CD 04 D1         [ 4] 3857         CALL     STORE   ;save na for vocabulary link
      001752 CD 0B 7B         [ 4] 3858         CALL     CELLM   ;link address
      001755 CD 07 62         [ 4] 3859         CALL     CNTXT
      001758 CD 04 E3         [ 4] 3860         CALL     AT
      00175B CD 06 29         [ 4] 3861         CALL     SWAPP
      00175E CD 04 D1         [ 4] 3862         CALL     STORE
      001761 81               [ 4] 3863         RET     ;save code pointer
      001762 CD 0F B2         [ 4] 3864 PNAM1:  CALL     STRQP
      001765 05                    3865         .byte      5
      001766 20 6E 61 6D 65        3866         .ascii     " name" ;null input
      00176B CC 13 FB         [ 2] 3867         JP     ABOR1
                                   3868 
                                   3869 ;; FORTH compiler
                                   3870 
                                   3871 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3872 ;       $COMPILE        ( a -- )
                                   3873 ;       Compile next word to
                                   3874 ;       dictionary as a token or literal.
                                   3875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00176E                       3876         _HEADER SCOMP,8,"$COMPILE"
      00176E 17 02                    1         .word LINK 
                           001770     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001770 08                       3         .byte 8  
      001771 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001779                          5         SCOMP:
      001779 CD 12 E7         [ 4] 3877         CALL     NAMEQ
      00177C CD 07 CC         [ 4] 3878         CALL     QDUP    ;?defined
      00177F CD 04 98         [ 4] 3879         CALL     QBRAN
      001782 17 9A                 3880         .word      SCOM2
      001784 CD 04 E3         [ 4] 3881         CALL     AT
      001787 CD 04 6F         [ 4] 3882         CALL     DOLIT
      00178A 80 00                 3883         .word     0x8000	;  IMEDD*256
      00178C CD 06 76         [ 4] 3884         CALL     ANDD    ;?immediate
      00178F CD 04 98         [ 4] 3885         CALL     QBRAN
      001792 17 97                 3886         .word      SCOM1
      001794 CC 04 C4         [ 2] 3887         JP     EXECU
      001797 CC 18 44         [ 2] 3888 SCOM1:  JP     JSRC
      00179A CD 25 DA         [ 4] 3889 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00179D CD 07 CC         [ 4] 3890         CALL    QDUP  
      0017A0 CD 04 98         [ 4] 3891         CALL     QBRAN
      0017A3 13 FB                 3892         .word      ABOR1
      0017A5                       3893         _DOLIT  -1
      0017A5 CD 04 6F         [ 4]    1     CALL DOLIT 
      0017A8 FF FF                    2     .word -1 
      0017AA CD 08 FA         [ 4] 3894         CALL    EQUAL
      0017AD                       3895         _QBRAN DLITER  
      0017AD CD 04 98         [ 4]    1     CALL QBRAN
      0017B0 29 AA                    2     .word DLITER
      0017B2 CC 15 95         [ 2] 3896         JP     LITER
                                   3897 
                                   3898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3899 ;       OVERT   ( -- )
                                   3900 ;       Link a new word into vocabulary.
                                   3901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017B5                       3902         _HEADER OVERT,5,"OVERT"
      0017B5 17 70                    1         .word LINK 
                           0017B7     2         LINK=.
      0017B7 05                       3         .byte 5  
      0017B8 4F 56 45 52 54           4         .ascii "OVERT"
      0017BD                          5         OVERT:
      0017BD CD 07 8E         [ 4] 3903         CALL     LAST
      0017C0 CD 04 E3         [ 4] 3904         CALL     AT
      0017C3 CD 07 62         [ 4] 3905         CALL     CNTXT
      0017C6 CC 04 D1         [ 2] 3906         JP     STORE
                                   3907 
                                   3908 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3909 ;       ;       ( -- )
                                   3910 ;       Terminate a colon definition.
                                   3911 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017C9                       3912         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0017C9 17 B7                    1         .word LINK 
                           0017CB     2         LINK=.
      0017CB C1                       3         .byte IMEDD+COMPO+1  
      0017CC 3B                       4         .ascii ";"
      0017CD                          5         SEMIS:
                           000001  3913 .if OPTIMIZE ; more compact and faster
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0017CD CD 04 6F         [ 4] 3914         call DOLIT 
      0017D0 00 81                 3915         .word 0x81   ; opcode for RET 
      0017D2 CD 15 45         [ 4] 3916         call CCOMMA 
                           000000  3917 .else
                                   3918         CALL     COMPI
                                   3919         .word EXIT 
                                   3920 .endif 
      0017D5 CD 14 5C         [ 4] 3921         CALL     LBRAC
      0017D8 CD 17 BD         [ 4] 3922         call OVERT 
      0017DB CD 22 81         [ 4] 3923         CALL FMOVE
      0017DE CD 07 CC         [ 4] 3924         call QDUP 
      0017E1 CD 04 98         [ 4] 3925         call QBRAN 
      0017E4 19 5A                 3926         .word SET_RAMLAST 
      0017E6 CD 23 15         [ 4] 3927         CALL UPDATPTR
      0017E9 81               [ 4] 3928         RET 
                                   3929 
                                   3930 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3931 ;       Terminate an ISR definition 
                                   3932 ;       retourn ca of ISR as double
                                   3933 ;       I; ( -- ud )
                                   3934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017EA                       3935        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0017EA 17 CB                    1         .word LINK 
                           0017EC     2         LINK=.
      0017EC C2                       3         .byte 2+IMEDD+COMPO  
      0017ED 49 3B                    4         .ascii "I;"
      0017EF                          5         ISEMI:
      0017EF 1D 00 02         [ 2] 3936         subw x,#CELLL  
      0017F2 90 AE 00 80      [ 2] 3937         ldw y,#IRET_CODE 
      0017F6 FF               [ 2] 3938         ldw (x),y 
      0017F7 CD 15 45         [ 4] 3939         call CCOMMA
      0017FA CD 14 5C         [ 4] 3940         call LBRAC 
      0017FD CD 23 5A         [ 4] 3941         call IFMOVE
      001800 CD 07 CC         [ 4] 3942         call QDUP 
      001803 CD 04 98         [ 4] 3943         CALL QBRAN 
      001806 19 5A                 3944         .word SET_RAMLAST
      001808 CD 07 7E         [ 4] 3945         CALL CPP
      00180B CD 04 E3         [ 4] 3946         call AT 
      00180E CD 06 29         [ 4] 3947         call SWAPP 
      001811 CD 07 7E         [ 4] 3948         CALL CPP 
      001814 CD 04 D1         [ 4] 3949         call STORE 
      001817 CD 1D 12         [ 4] 3950         call UPDATCP 
      00181A CD 1C CF         [ 4] 3951         call EEPVP 
      00181D                       3952         _DROP 
      00181D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001820 CD 04 E3         [ 4] 3953         call AT 
      001823 CD 07 70         [ 4] 3954         call VPP 
      001826 CD 04 D1         [ 4] 3955         call STORE 
      001829 CC 0C 03         [ 2] 3956         jp ZERO
      00182C 81               [ 4] 3957         ret           
                                   3958         
                                   3959 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3960 ;       ]       ( -- )
                                   3961 ;       Start compiling words in
                                   3962 ;       input stream.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   3963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00182D                       3964         _HEADER RBRAC,1,"]"
      00182D 17 EC                    1         .word LINK 
                           00182F     2         LINK=.
      00182F 01                       3         .byte 1  
      001830 5D                       4         .ascii "]"
      001831                          5         RBRAC:
      001831 CD 04 6F         [ 4] 3965         CALL   DOLIT
      001834 17 79                 3966         .word  SCOMP
      001836 CD 07 40         [ 4] 3967         CALL   TEVAL
      001839 CC 04 D1         [ 2] 3968         JP     STORE
                                   3969 
                                   3970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3971 ;       CALL,    ( ca -- )
                                   3972 ;       Compile a subroutine call.
                                   3973 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00183C                       3974         _HEADER JSRC,5,^/"CALL,"/
      00183C 18 2F                    1         .word LINK 
                           00183E     2         LINK=.
      00183E 05                       3         .byte 5  
      00183F 43 41 4C 4C 2C           4         .ascii "CALL,"
      001844                          5         JSRC:
                           000001  3975 .if OPTIMIZE 
                                   3976 ;;;;; optimization code ;;;;;;;;;;;;;;;
      001844 90 AE 06 0F      [ 2] 3977         LDW Y,#DROP 
      001848 90 BF 26         [ 2] 3978         LDW YTEMP,Y 
      00184B 90 93            [ 1] 3979         LDW Y,X 
      00184D 90 FE            [ 2] 3980         LDW Y,(Y)
      00184F 90 B3 26         [ 2] 3981         CPW Y,YTEMP 
      001852 26 13            [ 1] 3982         JRNE JSRC1         
                                   3983 ; replace CALL DROP BY  ADDW X,#CELLL 
      001854 1C 00 02         [ 2] 3984         ADDW X,#CELLL 
      001857                       3985         _DOLIT ADDWX ; opcode 
      001857 CD 04 6F         [ 4]    1     CALL DOLIT 
      00185A 00 1C                    2     .word ADDWX 
      00185C CD 15 45         [ 4] 3986         CALL   CCOMMA 
      00185F                       3987         _DOLIT CELLL 
      00185F CD 04 6F         [ 4]    1     CALL DOLIT 
      001862 00 02                    2     .word CELLL 
      001864 CC 15 2E         [ 2] 3988         JP      COMMA 
      001867                       3989 JSRC1: ; check for DDROP 
      001867 90 AE 08 1C      [ 2] 3990         LDW Y,#DDROP 
      00186B 90 BF 26         [ 2] 3991         LDW YTEMP,Y 
      00186E 90 93            [ 1] 3992         LDW Y,X 
      001870 90 FE            [ 2] 3993         LDW Y,(Y)
      001872 90 B3 26         [ 2] 3994         CPW Y,YTEMP 
      001875 26 13            [ 1] 3995         JRNE JSRC2 
                                   3996 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      001877 1C 00 02         [ 2] 3997         ADDW X,#CELLL 
      00187A                       3998         _DOLIT ADDWX 
      00187A CD 04 6F         [ 4]    1     CALL DOLIT 
      00187D 00 1C                    2     .word ADDWX 
      00187F CD 15 45         [ 4] 3999         CALL  CCOMMA 
      001882                       4000         _DOLIT 2*CELLL 
      001882 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001885 00 04                    2     .word 2*CELLL 
      001887 CC 15 2E         [ 2] 4001         JP  COMMA 
      00188A                       4002 JSRC2: 
                                   4003 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4004 .endif        
      00188A CD 04 6F         [ 4] 4005         CALL     DOLIT
      00188D 00 CD                 4006         .word     CALLL     ;CALL
      00188F CD 15 45         [ 4] 4007         CALL     CCOMMA
      001892 CC 15 2E         [ 2] 4008         JP     COMMA
                                   4009 
                                   4010 ;       INIT-OFS ( -- )
                                   4011 ;       compute offset to adjust jump address 
                                   4012 ;       set variable OFFSET 
      001895 18 3E                 4013         .word LINK 
                           001897  4014         LINK=.
      001897 08                    4015         .byte 8 
      001898 49 4E 49 54 2D 4F 46  4016         .ascii "INIT-OFS" 
             53
      0018A0                       4017 INITOFS:
      0018A0 CD 07 2F         [ 4] 4018         call TFLASH 
      0018A3 CD 04 E3         [ 4] 4019         CALL AT 
      0018A6 CD 06 19         [ 4] 4020         CALL DUPP 
      0018A9 CD 04 98         [ 4] 4021         call QBRAN
      0018AC 18 BD                 4022         .word 1$
      0018AE                       4023         _DROP  
      0018AE 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018B1 CD 07 7E         [ 4] 4024         call CPP 
      0018B4 CD 04 E3         [ 4] 4025         call AT 
      0018B7 CD 0C DD         [ 4] 4026         call HERE
      0018BA CD 08 D2         [ 4] 4027         call SUBB 
      0018BD CD 07 B3         [ 4] 4028 1$:     call OFFSET 
      0018C0 CC 04 D1         [ 2] 4029         jp STORE  
                                   4030 
                                   4031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4032 ;       :       ( -- ; <string> )
                                   4033 ;       Start a new colon definition
                                   4034 ;       using next word as its name.
                                   4035 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018C3                       4036         _HEADER COLON,1,":"
      0018C3 18 97                    1         .word LINK 
                           0018C5     2         LINK=.
      0018C5 01                       3         .byte 1  
      0018C6 3A                       4         .ascii ":"
      0018C7                          5         COLON:
      0018C7 CD 18 A0         [ 4] 4037         call INITOFS       
      0018CA CD 11 EA         [ 4] 4038         CALL   TOKEN
      0018CD CD 17 2C         [ 4] 4039         CALL   SNAME
      0018D0 CC 18 31         [ 2] 4040         JP     RBRAC
                                   4041 
                                   4042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4043 ;       I:  ( -- )
                                   4044 ;       Start interrupt service 
                                   4045 ;       routine definition
                                   4046 ;       those definition have 
                                   4047 ;       no name.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018D3                       4049         _HEADER ICOLON,2,"I:"
      0018D3 18 C5                    1         .word LINK 
                           0018D5     2         LINK=.
      0018D5 02                       3         .byte 2  
      0018D6 49 3A                    4         .ascii "I:"
      0018D8                          5         ICOLON:
      0018D8 CD 18 A0         [ 4] 4050         call INITOFS 
      0018DB CC 18 31         [ 2] 4051         jp RBRAC  
                                   4052 
                                   4053 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4054 ;       IMMEDIATE       ( -- )
                                   4055 ;       Make last compiled word
                                   4056 ;       an immediate word.
                                   4057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018DE                       4058         _HEADER IMMED,9,"IMMEDIATE"
      0018DE 18 D5                    1         .word LINK 
                           0018E0     2         LINK=.
      0018E0 09                       3         .byte 9  
      0018E1 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0018EA                          5         IMMED:
      0018EA CD 04 6F         [ 4] 4059         CALL     DOLIT
      0018ED 80 00                 4060         .word     0x8000	;  IMEDD*256
      0018EF CD 07 8E         [ 4] 4061         CALL     LAST
      0018F2 CD 04 E3         [ 4] 4062         CALL     AT
      0018F5 CD 04 E3         [ 4] 4063         CALL     AT
      0018F8 CD 06 8A         [ 4] 4064         CALL     ORR
      0018FB CD 07 8E         [ 4] 4065         CALL     LAST
      0018FE CD 04 E3         [ 4] 4066         CALL     AT
      001901 CC 04 D1         [ 2] 4067         JP     STORE
                                   4068 
                                   4069 ;; Defining words
                                   4070 
                                   4071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4072 ;       CREATE  ( -- ; <string> )
                                   4073 ;       Compile a new array
                                   4074 ;       without allocating space.
                                   4075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001904                       4076         _HEADER CREAT,6,"CREATE"
      001904 18 E0                    1         .word LINK 
                           001906     2         LINK=.
      001906 06                       3         .byte 6  
      001907 43 52 45 41 54 45        4         .ascii "CREATE"
      00190D                          5         CREAT:
      00190D CD 11 EA         [ 4] 4077         CALL     TOKEN
      001910 CD 17 2C         [ 4] 4078         CALL     SNAME
      001913 CD 17 BD         [ 4] 4079         CALL     OVERT        
      001916 CD 15 73         [ 4] 4080         CALL     COMPI 
      001919 06 CF                 4081         .word DOVAR 
      00191B 81               [ 4] 4082         RET
                                   4083 
                                   4084 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4085 ;       VARIABLE  ( -- ; <string> )
                                   4086 ;       Compile a new variable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4087 ;       initialized to 0.
                                   4088 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00191C                       4089         _HEADER VARIA,8,"VARIABLE"
      00191C 19 06                    1         .word LINK 
                           00191E     2         LINK=.
      00191E 08                       3         .byte 8  
      00191F 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001927                          5         VARIA:
                                   4090 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001927 CD 0C DD         [ 4] 4091         CALL HERE
      00192A CD 06 19         [ 4] 4092         CALL DUPP 
      00192D CD 0B 6C         [ 4] 4093         CALL CELLP
      001930 CD 07 70         [ 4] 4094         CALL VPP 
      001933 CD 04 D1         [ 4] 4095         CALL STORE
      001936 CD 19 0D         [ 4] 4096         CALL CREAT
      001939 CD 06 19         [ 4] 4097         CALL DUPP
      00193C CD 15 2E         [ 4] 4098         CALL COMMA
      00193F CD 0C 03         [ 4] 4099         CALL ZERO
      001942 CD 06 29         [ 4] 4100         call SWAPP 
      001945 CD 04 D1         [ 4] 4101         CALL STORE
      001948 CD 22 81         [ 4] 4102         CALL FMOVE ; move definition to FLASH
      00194B CD 07 CC         [ 4] 4103         CALL QDUP 
      00194E CD 04 98         [ 4] 4104         CALL QBRAN 
      001951 19 5A                 4105         .word SET_RAMLAST   
      001953 CD 1D 29         [ 4] 4106         call UPDATVP  ; don't update if variable kept in RAM.
      001956 CD 23 15         [ 4] 4107         CALL UPDATPTR
      001959 81               [ 4] 4108         RET         
      00195A                       4109 SET_RAMLAST: 
      00195A CD 07 8E         [ 4] 4110         CALL LAST 
      00195D CD 04 E3         [ 4] 4111         CALL AT 
      001960 CD 07 A1         [ 4] 4112         CALL RAMLAST 
      001963 CC 04 D1         [ 2] 4113         JP STORE  
                                   4114 
                                   4115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4116 ;       CONSTANT  ( n -- ; <string> )
                                   4117 ;       Compile a new constant 
                                   4118 ;       n CONSTANT name 
                                   4119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001966                       4120         _HEADER CONSTANT,8,"CONSTANT"
      001966 19 1E                    1         .word LINK 
                           001968     2         LINK=.
      001968 08                       3         .byte 8  
      001969 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001971                          5         CONSTANT:
      001971 CD 11 EA         [ 4] 4121         CALL TOKEN
      001974 CD 17 2C         [ 4] 4122         CALL SNAME 
      001977 CD 17 BD         [ 4] 4123         CALL OVERT 
      00197A CD 15 73         [ 4] 4124         CALL COMPI 
      00197D 19 91                 4125         .word DOCONST
      00197F CD 15 2E         [ 4] 4126         CALL COMMA 
      001982 CD 22 81         [ 4] 4127         CALL FMOVE
      001985 CD 07 CC         [ 4] 4128         CALL QDUP 
      001988 CD 04 98         [ 4] 4129         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      00198B 19 5A                 4130         .word SET_RAMLAST  
      00198D CD 23 15         [ 4] 4131         CALL UPDATPTR  
      001990 81               [ 4] 4132 1$:     RET          
                                   4133 
                                   4134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4135 ; CONSTANT runtime semantic 
                                   4136 ; doCONST  ( -- n )
                                   4137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4138 ;       _HEADER DOCONST,7,"DOCONST"
      001991                       4139 DOCONST:
      001991 1D 00 02         [ 2] 4140         subw x,#CELLL
      001994 90 85            [ 2] 4141         popw y 
      001996 90 FE            [ 2] 4142         ldw y,(y) 
      001998 FF               [ 2] 4143         ldw (x),y 
      001999 81               [ 4] 4144         ret 
                                   4145 
                                   4146 ;----------------------------------
                                   4147 ; create double constant 
                                   4148 ; 2CONSTANT ( d -- ; <string> )
                                   4149 ;----------------------------------
      00199A                       4150         _HEADER DCONST,9,"2CONSTANT"
      00199A 19 68                    1         .word LINK 
                           00199C     2         LINK=.
      00199C 09                       3         .byte 9  
      00199D 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      0019A6                          5         DCONST:
      0019A6 CD 11 EA         [ 4] 4151         CALL TOKEN
      0019A9 CD 17 2C         [ 4] 4152         CALL SNAME 
      0019AC CD 17 BD         [ 4] 4153         CALL OVERT 
      0019AF CD 15 73         [ 4] 4154         CALL COMPI 
      0019B2 19 C9                 4155         .word DO_DCONST
      0019B4 CD 15 2E         [ 4] 4156         CALL COMMA
      0019B7 CD 15 2E         [ 4] 4157         CALL COMMA  
      0019BA CD 22 81         [ 4] 4158         CALL FMOVE
      0019BD CD 07 CC         [ 4] 4159         CALL QDUP 
      0019C0 CD 04 98         [ 4] 4160         CALL QBRAN 
      0019C3 19 5A                 4161         .word SET_RAMLAST  
      0019C5 CD 23 15         [ 4] 4162         CALL UPDATPTR  
      0019C8 81               [ 4] 4163 1$:     RET          
                                   4164     
                                   4165 ;----------------------------------
                                   4166 ; runtime for DCONST 
                                   4167 ; stack double constant 
                                   4168 ; DO-DCONST ( -- d )
                                   4169 ;-----------------------------------
                                   4170 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      0019C9                       4171 DO_DCONST:
      0019C9 90 85            [ 2] 4172     popw y 
      0019CB 90 BF 26         [ 2] 4173     ldw YTEMP,y 
      0019CE 1D 00 04         [ 2] 4174     subw x,#2*CELLL 
      0019D1 90 FE            [ 2] 4175     ldw y,(y)
      0019D3 FF               [ 2] 4176     ldw (x),y 
      0019D4 90 BE 26         [ 2] 4177     ldw y,YTEMP 
      0019D7 90 EE 02         [ 2] 4178     ldw y,(2,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      0019DA EF 02            [ 2] 4179     ldw (2,x),y 
      0019DC 81               [ 4] 4180     ret 
                                   4181 
                                   4182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4183 ;;          TOOLS 
                                   4184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4185 
                                   4186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4187 ;       _TYPE   ( b u -- )
                                   4188 ;       Display a string. Filter
                                   4189 ;       non-printing characters.
                                   4190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019DD                       4191         _HEADER UTYPE,5,"_TYPE"
      0019DD 19 9C                    1         .word LINK 
                           0019DF     2         LINK=.
      0019DF 05                       3         .byte 5  
      0019E0 5F 54 59 50 45           4         .ascii "_TYPE"
      0019E5                          5         UTYPE:
      0019E5 CD 05 E2         [ 4] 4192         CALL     TOR     ;start count down loop
      0019E8 20 0F            [ 2] 4193         JRA     UTYP2   ;skip first pass
      0019EA CD 06 19         [ 4] 4194 UTYP1:  CALL     DUPP
      0019ED CD 05 01         [ 4] 4195         CALL     CAT
      0019F0 CD 0C 2D         [ 4] 4196         CALL     TCHAR
      0019F3 CD 04 36         [ 4] 4197         CALL     EMIT    ;display only printable
      0019F6 CD 0B 97         [ 4] 4198         CALL     ONEP    ;increment address
      0019F9 CD 04 83         [ 4] 4199 UTYP2:  CALL     DONXT
      0019FC 19 EA                 4200         .word      UTYP1   ;loop till done
      0019FE CC 06 0F         [ 2] 4201         JP     DROP
                                   4202 
                                   4203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4204 ;       dm+     ( a u -- a )
                                   4205 ;       Dump u bytes from ,
                                   4206 ;       leaving a+u on  stack.
                                   4207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A01                       4208         _HEADER DUMPP,3,"DM+"
      001A01 19 DF                    1         .word LINK 
                           001A03     2         LINK=.
      001A03 03                       3         .byte 3  
      001A04 44 4D 2B                 4         .ascii "DM+"
      001A07                          5         DUMPP:
      001A07 CD 06 41         [ 4] 4209         CALL     OVER
      001A0A CD 04 6F         [ 4] 4210         CALL     DOLIT
      001A0D 00 04                 4211         .word      4
      001A0F CD 0F DF         [ 4] 4212         CALL     UDOTR   ;display address
      001A12 CD 0F 47         [ 4] 4213         CALL     SPACE
      001A15 CD 05 E2         [ 4] 4214         CALL     TOR     ;start count down loop
      001A18 20 11            [ 2] 4215         JRA     PDUM2   ;skip first pass
      001A1A CD 06 19         [ 4] 4216 PDUM1:  CALL     DUPP
      001A1D CD 05 01         [ 4] 4217         CALL     CAT
      001A20 CD 04 6F         [ 4] 4218         CALL     DOLIT
      001A23 00 03                 4219         .word      3
      001A25 CD 0F DF         [ 4] 4220         CALL     UDOTR   ;display numeric data
      001A28 CD 0B 97         [ 4] 4221         CALL     ONEP    ;increment address
      001A2B CD 04 83         [ 4] 4222 PDUM2:  CALL     DONXT
      001A2E 1A 1A                 4223         .word      PDUM1   ;loop till done
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001A30 81               [ 4] 4224         RET
                                   4225 
                                   4226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4227 ;       DUMP    ( a u -- )
                                   4228 ;       Dump u bytes from a,
                                   4229 ;       in a formatted manner.
                                   4230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A31                       4231         _HEADER DUMP,4,"DUMP"
      001A31 1A 03                    1         .word LINK 
                           001A33     2         LINK=.
      001A33 04                       3         .byte 4  
      001A34 44 55 4D 50              4         .ascii "DUMP"
      001A38                          5         DUMP:
      001A38 CD 06 DF         [ 4] 4232         CALL     BASE
      001A3B CD 04 E3         [ 4] 4233         CALL     AT
      001A3E CD 05 E2         [ 4] 4234         CALL     TOR
      001A41 CD 0E A6         [ 4] 4235         CALL     HEX     ;save radix, set hex
      001A44 CD 04 6F         [ 4] 4236         CALL     DOLIT
      001A47 00 10                 4237         .word      16
      001A49 CD 0A BD         [ 4] 4238         CALL     SLASH   ;change count to lines
      001A4C CD 05 E2         [ 4] 4239         CALL     TOR     ;start count down loop
      001A4F CD 0F 89         [ 4] 4240 DUMP1:  CALL     CR
      001A52 CD 04 6F         [ 4] 4241         CALL     DOLIT
      001A55 00 10                 4242         .word      16
      001A57 CD 08 27         [ 4] 4243         CALL     DDUP
      001A5A CD 1A 07         [ 4] 4244         CALL     DUMPP   ;display numeric
      001A5D CD 07 DD         [ 4] 4245         CALL     ROT
      001A60 CD 07 DD         [ 4] 4246         CALL     ROT
      001A63 CD 0F 47         [ 4] 4247         CALL     SPACE
      001A66 CD 0F 47         [ 4] 4248         CALL     SPACE
      001A69 CD 19 E5         [ 4] 4249         CALL     UTYPE   ;display printable characters
      001A6C CD 04 83         [ 4] 4250         CALL     DONXT
      001A6F 1A 4F                 4251         .word      DUMP1   ;loop till done
      001A71 CD 06 0F         [ 4] 4252 DUMP3:  CALL     DROP
      001A74 CD 05 34         [ 4] 4253         CALL     RFROM
      001A77 CD 06 DF         [ 4] 4254         CALL     BASE
      001A7A CC 04 D1         [ 2] 4255         JP     STORE   ;restore radix
                                   4256 
                                   4257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4258 ;       .S      ( ... -- ... )
                                   4259 ;        Display  contents of stack.
                                   4260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A7D                       4261         _HEADER DOTS,2,".S"
      001A7D 1A 33                    1         .word LINK 
                           001A7F     2         LINK=.
      001A7F 02                       3         .byte 2  
      001A80 2E 53                    4         .ascii ".S"
      001A82                          5         DOTS:
      001A82 CD 0F 89         [ 4] 4262         CALL     CR
      001A85 CD 0C 45         [ 4] 4263         CALL     DEPTH   ;stack depth
      001A88 CD 05 E2         [ 4] 4264         CALL     TOR     ;start count down loop
      001A8B 20 09            [ 2] 4265         JRA     DOTS2   ;skip first pass
      001A8D CD 05 45         [ 4] 4266 DOTS1:  CALL     RAT
      001A90 CD 0C 5C         [ 4] 4267 	CALL     PICK
      001A93 CD 10 2F         [ 4] 4268         CALL     DOT     ;index stack, display contents
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001A96 CD 04 83         [ 4] 4269 DOTS2:  CALL     DONXT
      001A99 1A 8D                 4270         .word      DOTS1   ;loop till done
      001A9B CD 0F B6         [ 4] 4271         CALL     DOTQP
      001A9E 05                    4272         .byte      5
      001A9F 20 3C 73 70 20        4273         .ascii     " <sp "
      001AA4 81               [ 4] 4274         RET
                                   4275 
                                   4276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4277 ;       >NAME   ( ca -- na | F )
                                   4278 ;       Convert code address
                                   4279 ;       to a name address.
                                   4280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AA5                       4281         _HEADER TNAME,5,">NAME"
      001AA5 1A 7F                    1         .word LINK 
                           001AA7     2         LINK=.
      001AA7 05                       3         .byte 5  
      001AA8 3E 4E 41 4D 45           4         .ascii ">NAME"
      001AAD                          5         TNAME:
      001AAD CD 07 62         [ 4] 4282         CALL     CNTXT   ;vocabulary link
      001AB0 CD 04 E3         [ 4] 4283 TNAM2:  CALL     AT
      001AB3 CD 06 19         [ 4] 4284         CALL     DUPP    ;?last word in a vocabulary
      001AB6 CD 04 98         [ 4] 4285         CALL     QBRAN
      001AB9 1A D4                 4286         .word      TNAM4
      001ABB CD 08 27         [ 4] 4287         CALL     DDUP
      001ABE CD 11 F8         [ 4] 4288         CALL     NAMET
      001AC1 CD 06 9F         [ 4] 4289         CALL     XORR    ;compare
      001AC4 CD 04 98         [ 4] 4290         CALL     QBRAN
      001AC7 1A CE                 4291         .word      TNAM3
      001AC9 CD 0B 7B         [ 4] 4292         CALL     CELLM   ;continue with next word
      001ACC 20 E2            [ 2] 4293         JRA     TNAM2
      001ACE CD 06 29         [ 4] 4294 TNAM3:  CALL     SWAPP
      001AD1 CC 06 0F         [ 2] 4295         JP     DROP
      001AD4 CD 08 1C         [ 4] 4296 TNAM4:  CALL     DDROP
      001AD7 CC 0C 03         [ 2] 4297         JP     ZERO
                                   4298 
                                   4299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4300 ;       .ID     ( na -- )
                                   4301 ;        Display  name at address.
                                   4302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001ADA                       4303         _HEADER DOTID,3,".ID"
      001ADA 1A A7                    1         .word LINK 
                           001ADC     2         LINK=.
      001ADC 03                       3         .byte 3  
      001ADD 2E 49 44                 4         .ascii ".ID"
      001AE0                          5         DOTID:
      001AE0 CD 07 CC         [ 4] 4304         CALL     QDUP    ;if zero no name
      001AE3 CD 04 98         [ 4] 4305         CALL     QBRAN
      001AE6 1A F6                 4306         .word      DOTI1
      001AE8 CD 0C C6         [ 4] 4307         CALL     COUNT
      001AEB CD 04 6F         [ 4] 4308         CALL     DOLIT
      001AEE 00 1F                 4309         .word      0x1F
      001AF0 CD 06 76         [ 4] 4310         CALL     ANDD    ;mask lexicon bits
      001AF3 CC 19 E5         [ 2] 4311         JP     UTYPE
      001AF6 CD 0F B6         [ 4] 4312 DOTI1:  CALL     DOTQP
      001AF9 09                    4313         .byte      9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001AFA 20 6E 6F 4E 61 6D 65  4314         .ascii     " noName"
      001B01 81               [ 4] 4315         RET
                                   4316 
                           000000  4317 WANT_SEE=0
                           000000  4318 .if WANT_SEE 
                                   4319 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4320 ;       SEE     ( -- ; <string> )
                                   4321 ;       A simple decompiler.
                                   4322 ;       Updated for byte machines.
                                   4323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4324         _HEADER SEE,3,"SEE"
                                   4325         CALL     TICK    ;starting address
                                   4326         CALL     CR
                                   4327         CALL     ONEM
                                   4328 SEE1:   CALL     ONEP
                                   4329         CALL     DUPP
                                   4330         CALL     AT
                                   4331         CALL     DUPP
                                   4332         CALL     QBRAN
                                   4333         .word    SEE2
                                   4334         CALL     TNAME   ;?is it a name
                                   4335 SEE2:   CALL     QDUP    ;name address or zero
                                   4336         CALL     QBRAN
                                   4337         .word    SEE3
                                   4338         CALL     SPACE
                                   4339         CALL     DOTID   ;display name
                                   4340         CALL     ONEP
                                   4341         JRA      SEE4
                                   4342 SEE3:   CALL     DUPP
                                   4343         CALL     CAT
                                   4344         CALL     UDOT    ;display number
                                   4345 SEE4:   CALL     NUFQ    ;user control
                                   4346         CALL     QBRAN
                                   4347         .word    SEE1
                                   4348         JP     DROP
                                   4349 .endif ; WANT_SEE 
                                   4350 
                                   4351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4352 ;       WORDS   ( -- )
                                   4353 ;       Display names in vocabulary.
                                   4354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B02                       4355         _HEADER WORDS,5,"WORDS"
      001B02 1A DC                    1         .word LINK 
                           001B04     2         LINK=.
      001B04 05                       3         .byte 5  
      001B05 57 4F 52 44 53           4         .ascii "WORDS"
      001B0A                          5         WORDS:
      001B0A CD 0F 89         [ 4] 4356         CALL     CR
      001B0D CD 07 62         [ 4] 4357         CALL     CNTXT   ;only in context
      001B10 CD 04 E3         [ 4] 4358 WORS1:  CALL     AT
      001B13 CD 07 CC         [ 4] 4359         CALL     QDUP    ;?at end of list
      001B16 CD 04 98         [ 4] 4360         CALL     QBRAN
      001B19 1B 2C                 4361         .word      WORS2
      001B1B CD 06 19         [ 4] 4362         CALL     DUPP
      001B1E CD 0F 47         [ 4] 4363         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001B21 CD 1A E0         [ 4] 4364         CALL     DOTID   ;display a name
      001B24 CD 0B 7B         [ 4] 4365         CALL     CELLM
      001B27 CD 04 B4         [ 4] 4366         CALL     BRAN
      001B2A 1B 10                 4367         .word      WORS1
      001B2C 81               [ 4] 4368 WORS2:  RET
                                   4369 
                                   4370         
                                   4371 ;; Hardware reset
                                   4372 
                                   4373 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4374 ;  COPYRIGTH
                                   4375 ; print copyright notice 
                                   4376 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B2D                       4377 COPYRIGHT:
      001B2D CD 0F B6         [ 4] 4378     CALL DOTQP 
      001B30 21                    4379     .byte 33 
      001B31 4A 61 63 71 75 65 73  4380     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001B52 CC 0F 89         [ 2] 4381     JP CR 
                                   4382 
                                   4383 
                                   4384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4385 ;  PRT_LICENCE 
                                   4386 ;  print GPLV2 licence 
                                   4387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B55                       4388 PRT_LICENCE:
      001B55 CD 0F B6         [ 4] 4389         CALL DOTQP 
      001B58 0F                    4390         .byte  15 
      001B59 4C 49 43 45 4E 43 45  4391         .ascii "LICENCE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001B68 81               [ 4] 4392         RET 
                                   4393 
                                   4394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4395 ;    PRINT_VERSION ( c1 c2 -- )
                                   4396 ;    c2 minor 
                                   4397 ;    c1 major 
                                   4398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B69                       4399 PRINT_VERSION:
      001B69 CD 0F B6         [ 4] 4400      CALL DOTQP 
      001B6C 09                    4401      .byte 9
      001B6D 20 76 65 72 73 69 6F  4402      .ascii " version "
             6E 20
      001B76 CD 0E 0B         [ 4] 4403      CALL BDIGS 
      001B79 CD 0E 45         [ 4] 4404      CALL DIGS 
      001B7C CD 0E 45         [ 4] 4405      CALL DIGS 
      001B7F                       4406      _DOLIT '.' 
      001B7F CD 04 6F         [ 4]    1     CALL DOLIT 
      001B82 00 2E                    2     .word '.' 
      001B84 CD 0E 1B         [ 4] 4407      CALL HOLD 
      001B87                       4408      _DROP 
      001B87 1C 00 02         [ 2]    1     ADDW X,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001B8A CD 0E 45         [ 4] 4409      CALL DIGS 
      001B8D CD 0E 70         [ 4] 4410      CALL EDIGS 
      001B90 CC 0F 71         [ 2] 4411      JP TYPES 
                                   4412       
                                   4413 
                                   4414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4415 ;       hi      ( -- )
                                   4416 ;       Display sign-on message.
                                   4417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B93                       4418         _HEADER HI,2,"HI"
      001B93 1B 04                    1         .word LINK 
                           001B95     2         LINK=.
      001B95 02                       3         .byte 2  
      001B96 48 49                    4         .ascii "HI"
      001B98                          5         HI:
      001B98 CD 0F 89         [ 4] 4419         CALL     CR
      001B9B CD 0F B6         [ 4] 4420         CALL     DOTQP   
      001B9E 0A                    4421         .byte      10
      001B9F 73 74 6D 38 65 46 6F  4422         .ascii     "stm8eForth"
             72 74 68
      001BA9                       4423 	_DOLIT VER 
      001BA9 CD 04 6F         [ 4]    1     CALL DOLIT 
      001BAC 00 04                    2     .word VER 
      001BAE                       4424         _DOLIT EXT 
      001BAE CD 04 6F         [ 4]    1     CALL DOLIT 
      001BB1 00 00                    2     .word EXT 
      001BB3 CD 1B 69         [ 4] 4425         CALL PRINT_VERSION 
      001BB6 CD 0F B6         [ 4] 4426         CALL    DOTQP
                           000001  4427 .if NUCLEO          
      001BB9 12                    4428         .byte 18
      001BBA 20 6F 6E 20 4E 55 43  4429         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4430 .endif
                           000000  4431 .if DISCOVERY
                                   4432         .byte 19
                                   4433         .ascii  " on STM8S-DISCOVERY"
                                   4434 .endif
                           000000  4435 .if DOORBELL
                                   4436         .byte 16
                                   4437         .ascii " on stm8s105k6b6"
                                   4438 .endif
      001BCC CC 0F 89         [ 2] 4439         JP     CR
                                   4440 
                           000000  4441 WANT_DEBUG=0
                           000000  4442 .if WANT_DEBUG 
                                   4443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4444 ;       DEBUG      ( -- )
                                   4445 ;       Display sign-on message.
                                   4446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4447         _HEADER DEBUG,5,"DEBUG"
                                   4448 	CALL DOLIT
                                   4449 	.word 0x65
                                   4450 	CALL EMIT
                                   4451 	CALL ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   4452  	CALL ZLESS 
                                   4453 	CALL DOLIT
                                   4454 	.word 0xFFFE
                                   4455 	CALL ZLESS 
                                   4456 	CALL UPLUS 
                                   4457  	_DROP 
                                   4458 	CALL DOLIT
                                   4459 	.word 3
                                   4460 	CALL UPLUS 
                                   4461 	CALL UPLUS 
                                   4462  	_DROP
                                   4463 	CALL DOLIT
                                   4464 	.word 0x43
                                   4465 	CALL UPLUS 
                                   4466  	_DROP
                                   4467 	CALL EMIT
                                   4468 	CALL DOLIT
                                   4469 	.word 0x4F
                                   4470 	CALL DOLIT
                                   4471 	.word 0x6F
                                   4472  	CALL XORR
                                   4473 	CALL DOLIT
                                   4474 	.word 0xF0
                                   4475  	CALL ANDD
                                   4476 	CALL DOLIT
                                   4477 	.word 0x4F
                                   4478  	CALL ORR
                                   4479 	CALL EMIT
                                   4480 	CALL DOLIT
                                   4481 	.word 8
                                   4482 	CALL DOLIT
                                   4483 	.word 6
                                   4484  	CALL SWAPP
                                   4485 	CALL OVER
                                   4486 	CALL XORR
                                   4487 	CALL DOLIT
                                   4488 	.word 3
                                   4489 	CALL ANDD 
                                   4490 	CALL ANDD
                                   4491 	CALL DOLIT
                                   4492 	.word 0x70
                                   4493 	CALL UPLUS 
                                   4494 	_DROP
                                   4495 	CALL EMIT
                                   4496 	CALL ZERO
                                   4497 	CALL QBRAN
                                   4498 	.word DEBUG1
                                   4499 	CALL DOLIT
                                   4500 	.word 0x3F
                                   4501 DEBUG1:
                                   4502 	CALL DOLIT
                                   4503 	.word 0xFFFF
                                   4504 	CALL QBRAN
                                   4505 	.word DEBUG2
                                   4506 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4507 	.word 0x74
                                   4508 	CALL BRAN
                                   4509 	.word DEBUG3
                                   4510 DEBUG2:
                                   4511 	CALL DOLIT
                                   4512 	.word 0x21
                                   4513 DEBUG3:
                                   4514 	CALL EMIT
                                   4515 	CALL DOLIT
                                   4516 	.word 0x68
                                   4517 	CALL DOLIT
                                   4518 	.word 0x80
                                   4519 	CALL STORE
                                   4520 	CALL DOLIT
                                   4521 	.word 0x80
                                   4522 	CALL AT
                                   4523 	CALL EMIT
                                   4524 	CALL DOLIT
                                   4525 	.word 0x4D
                                   4526 	CALL TOR
                                   4527 	CALL RAT
                                   4528 	CALL RFROM
                                   4529 	CALL ANDD
                                   4530 	CALL EMIT
                                   4531 	CALL DOLIT
                                   4532 	.word 0x61
                                   4533 	CALL DOLIT
                                   4534 	.word 0xA
                                   4535 	CALL TOR
                                   4536 DEBUG4:
                                   4537 	CALL ONE
                                   4538 	CALL UPLUS 
                                   4539 	_DROP
                                   4540 	CALL DONXT
                                   4541 	.word DEBUG4
                                   4542 	CALL EMIT
                                   4543 	CALL DOLIT
                                   4544 	.word 0x656D
                                   4545 	CALL DOLIT
                                   4546 	.word 0x100
                                   4547 	CALL UMSTA
                                   4548 	CALL SWAPP
                                   4549 	CALL DOLIT
                                   4550 	.word 0x100
                                   4551 	CALL UMSTA
                                   4552 	CALL SWAPP 
                                   4553 	_DROP
                                   4554 	CALL EMIT
                                   4555 	CALL EMIT
                                   4556 	CALL DOLIT
                                   4557 	.word 0x2043
                                   4558 	CALL ZERO
                                   4559 	CALL DOLIT
                                   4560 	.word 0x100
                                   4561 	CALL UMMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4562 	CALL EMIT
                                   4563 	CALL EMIT
                                   4564 	;JP ORIG
                                   4565 	RET
                                   4566 .endif ; WANT_DEBUG 
                                   4567 
                                   4568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4569 ;       'BOOT   ( -- a )
                                   4570 ;       The application startup vector.
                                   4571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BCF                       4572         _HEADER TBOOT,5,"'BOOT"
      001BCF 1B 95                    1         .word LINK 
                           001BD1     2         LINK=.
      001BD1 05                       3         .byte 5  
      001BD2 27 42 4F 4F 54           4         .ascii "'BOOT"
      001BD7                          5         TBOOT:
      001BD7 CD 06 CF         [ 4] 4573         CALL     DOVAR
      001BDA 40 02                 4574         .word    APP_RUN      ;application to boot
                                   4575 
                                   4576 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4577 ;       COLD    ( -- )
                                   4578 ;       The hilevel cold start s=ence.
                                   4579 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BDC                       4580         _HEADER COLD,4,"COLD"
      001BDC 1B D1                    1         .word LINK 
                           001BDE     2         LINK=.
      001BDE 04                       3         .byte 4  
      001BDF 43 4F 4C 44              4         .ascii "COLD"
      001BE3                          5         COLD:
                           000000  4581 .if WANT_DEBUG
                                   4582         CALL DEBUG
                                   4583 .endif ; WANT_DEBUG
      001BE3 CD 04 6F         [ 4] 4584 COLD1:  CALL     DOLIT
      001BE6 00 2B                 4585         .word      UZERO
      001BE8 CD 04 6F         [ 4] 4586 	CALL     DOLIT
      001BEB 00 06                 4587         .word      UPP
      001BED CD 04 6F         [ 4] 4588         CALL     DOLIT
      001BF0 00 1C                 4589 	.word      UEND-UZERO
      001BF2 CD 0D 2A         [ 4] 4590         CALL     CMOVE   ;initialize user area
                           000001  4591 .if WANT_FLOAT 
      001BF5 CD 2C A5         [ 4] 4592         CALL    FINIT 
                                   4593 .endif 
                                   4594 ; if APP_RUN==0 initialize with ca de 'hi'  
      001BF8 90 CE 40 02      [ 2] 4595         ldw y,APP_RUN 
      001BFC 26 0B            [ 1] 4596         jrne 0$
      001BFE 1D 00 02         [ 2] 4597         subw x,#CELLL 
      001C01 90 AE 1B 98      [ 2] 4598         ldw y,#HI  
      001C05 FF               [ 2] 4599         ldw (x),y
      001C06 CD 1D 01         [ 4] 4600         call UPDATRUN 
      001C09                       4601 0$:        
                                   4602 ; update LAST with APP_LAST 
                                   4603 ; if APP_LAST > LAST else do the opposite
      001C09 90 CE 40 00      [ 2] 4604         ldw y,APP_LAST 
      001C0D 90 B3 1C         [ 2] 4605         cpw y,ULAST 
      001C10 22 05            [ 1] 4606         jrugt 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4607 ; save LAST at APP_LAST  
      001C12 CD 1C E9         [ 4] 4608         call UPDATLAST 
      001C15 20 06            [ 2] 4609         jra 2$
      001C17                       4610 1$: ; update LAST with APP_LAST 
      001C17 90 BF 1C         [ 2] 4611         ldw ULAST,y
      001C1A 90 BF 16         [ 2] 4612         ldw UCNTXT,y
      001C1D                       4613 2$:  
                                   4614 ; update APP_CP if < app_space 
      001C1D 90 CE 40 04      [ 2] 4615         ldw y,APP_CP  
      001C21 90 B3 1A         [ 2] 4616         cpw y,UCP   
      001C24 24 06            [ 1] 4617         jruge 3$ 
      001C26 CD 1D 12         [ 4] 4618         call UPDATCP
      001C29 90 BE 1A         [ 2] 4619         ldw y,UCP   
      001C2C                       4620 3$:
      001C2C 90 BF 1A         [ 2] 4621         ldw UCP,y                 
                                   4622 ; update UVP with APP_VP  
                                   4623 ; if APP_VP>UVP else do the opposite 
      001C2F 90 CE 40 06      [ 2] 4624         ldw y,APP_VP 
      001C33 90 B3 18         [ 2] 4625         cpw y,UVP 
      001C36 22 05            [ 1] 4626         jrugt 4$
      001C38 CD 1D 29         [ 4] 4627         call UPDATVP 
      001C3B 20 03            [ 2] 4628         jra 6$
      001C3D                       4629 4$: ; update UVP with APP_VP 
      001C3D 90 BF 18         [ 2] 4630         ldw UVP,y 
      001C40                       4631 6$:      
      001C40 CD 14 D8         [ 4] 4632         CALL     PRESE   ;initialize data stack and TIB
      001C43 CD 1B D7         [ 4] 4633         CALL     TBOOT
      001C46 CD 0D 13         [ 4] 4634         CALL     ATEXE   ;application boot
      001C49 CD 17 BD         [ 4] 4635         CALL     OVERT
      001C4C CC 14 F5         [ 2] 4636         JP     QUIT    ;start interpretation
                                   4637 
                                   4638 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   4639         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001C4F 1B DE                   31     .word LINK 
                           001C51    32     LINK=.
      001C51 03                      33     .byte 3 
      001C52 46 50 21                34     .ascii "FP!"
      001C55                         35 FPSTOR:
      001C55 90 93            [ 1]   36     ldw y,x
      001C57 90 FE            [ 2]   37     ldw y,(y)
      001C59 90 9F            [ 1]   38     ld a,yl 
      001C5B B7 34            [ 1]   39     ld FPTR,a 
      001C5D 1C 00 02         [ 2]   40     addw x,#CELLL 
      001C60 90 93            [ 1]   41     ldw y,x 
      001C62 90 FE            [ 2]   42     ldw y,(y)
      001C64 90 BF 35         [ 2]   43     ldw PTR16,y
      001C67 1C 00 02         [ 2]   44     addw x,#CELLL 
      001C6A 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001C6B 1C 51                   52     .word LINK 
                           001C6D    53 LINK=.
      001C6D 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001C6E 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001C74                         56 EEPROM: 
      001C74 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001C78 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001C7B EF 02            [ 2]   59     ldw (2,x),y 
      001C7D 90 5F            [ 1]   60     clrw y 
      001C7F FF               [ 2]   61     ldw (x),y 
      001C80 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001C81 1C 6D                   68 	.word LINK 
                           001C83    69 	LINK=.
      001C83 08                      70 	.byte 8 
      001C84 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001C8C                         72 EEPLAST:
      001C8C 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001C8F 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001C93 EF 02            [ 2]   75 	ldw (2,x),y 
      001C95 90 5F            [ 1]   76 	clrw y 
      001C97 FF               [ 2]   77 	ldw (x),y 
      001C98 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001C99 1C 83                   84 	.word LINK 
                           001C9B    85 	LINK=.
      001C9B 07                      86 	.byte 7
      001C9C 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001CA3                         88 EEPRUN:
      001CA3 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001CA6 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001CAA EF 02            [ 2]   91 	ldw (2,x),y 
      001CAC 90 5F            [ 1]   92 	clrw y 
      001CAE FF               [ 2]   93 	ldw (x),y 
      001CAF 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001CB0 1C 9B                  100 	.word LINK
                           001CB2   101 	LINK=.
      001CB2 06                     102 	.byte 6 
      001CB3 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001CB9                        104 EEPCP:
      001CB9 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001CBC 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001CC0 EF 02            [ 2]  107 	ldw (2,x),y 
      001CC2 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001CC4 FF               [ 2]  109 	ldw (x),y 
      001CC5 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001CC6 1C B2                  116 	.word LINK
                           001CC8   117 	LINK=.
      001CC8 06                     118 	.byte 6
      001CC9 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001CCF                        120 EEPVP:
      001CCF 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001CD2 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001CD6 EF 02            [ 2]  123 	ldw (2,x),y 
      001CD8 90 5F            [ 1]  124 	clrw y 
      001CDA FF               [ 2]  125 	ldw (x),y 
      001CDB 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001CDC 1C C8                  132 	.word LINK 
                           001CDE   133 	LINK=.
      001CDE 0A                     134 	.byte 10
      001CDF 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001CE9                        136 UPDATLAST:
      001CE9 CD 07 8E         [ 4]  137 	call LAST
      001CEC CD 04 E3         [ 4]  138 	call AT  
      001CEF CD 1C 8C         [ 4]  139 	call EEPLAST
      001CF2 CC 1E DF         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001CF5 1C DE                  146 	.word LINK
                           001CF7   147 	LINK=.
      001CF7 09                     148 	.byte 9
      001CF8 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001D01                        150 UPDATRUN:
      001D01 CD 1C A3         [ 4]  151 	call EEPRUN
      001D04 CC 1E DF         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001D07 1C F7                  158 	.word LINK 
                           001D09   159 	LINK=.
      001D09 08                     160 	.byte 8 
      001D0A 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



             50
      001D12                        162 UPDATCP:
      001D12 CD 07 7E         [ 4]  163 	call CPP 
      001D15 CD 04 E3         [ 4]  164 	call AT 
      001D18 CD 1C B9         [ 4]  165 	call EEPCP 
      001D1B CC 1E DF         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001D1E 1D 09                  172 	.word LINK
                           001D20   173 	LINK=.
      001D20 08                     174 	.byte 8 
      001D21 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001D29                        176 UPDATVP:
      001D29 CD 07 70         [ 4]  177 	call VPP 
      001D2C CD 04 E3         [ 4]  178 	call AT
      001D2F CD 1C CF         [ 4]  179 	call EEPVP 
      001D32 CC 1E DF         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001D35 1D 20                  187     .word LINK 
                           001D37   188 LINK=.
      001D37 02                     189     .byte 2
      001D38 46 40                  190     .ascii "F@"
      001D3A                        191 FARAT:
      001D3A CD 1C 55         [ 4]  192     call FPSTOR
      001D3D CC 1E 02         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001D40 1D 37                  200     .word LINK
                           001D42   201     LINK=.
      001D42 03                     202     .byte 3 
      001D43 46 43 40               203     .ascii "FC@" 
      001D46                        204 FARCAT:
      001D46 CD 1C 55         [ 4]  205     call FPSTOR
      001D49 CC 1E 24         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001D4C 1D 42                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                           001D4E   215 LINK=.
      001D4E 06                     216     .byte 6 
      001D4F 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001D55                        218 UNLKEE:
      001D55 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001D59 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001D5D 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001D61 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001D65 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001D6A 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001D6B 1D 4E                  231     .word LINK 
                           001D6D   232 LINK=. 
      001D6D 06                     233     .byte 6 
      001D6E 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001D74                        235 UNLKFL:
      001D74 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001D78 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001D7C 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001D80 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001D84 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001D89 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001D8A 1D 6D                  248 	.word LINK 
                           001D8C   249 	LINK=.
      001D8C 06                     250 	.byte 6
      001D8D 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001D93                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001D93 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001D96 3D 34            [ 1]  256 	tnz FPTR 
      001D98 26 16            [ 1]  257 	jrne 4$
      001D9A 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001D9E 24 10            [ 1]  259     jruge 4$
      001DA0 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001DA4 25 0D            [ 1]  261     jrult 9$
      001DA6 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001DAA 22 07            [ 1]  263 	jrugt 9$
      001DAC CD 1D 55         [ 4]  264 	call UNLKEE
      001DAF 81               [ 4]  265 	ret 
      001DB0 CD 1D 74         [ 4]  266 4$: call UNLKFL
      001DB3 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001DB4 1D 8C                  274 	.word LINK 
                           001DB6   275 	LINK=.
      001DB6 04                     276 	.byte 4 
      001DB7 4C 4F 43 4B            277 	.ascii "LOCK" 
      001DBB                        278 LOCK: 
      001DBB 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001DBF 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001DC3 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001DC4 1D B6                  287 	.word LINK 
                           001DC6   288 	LINK=. 
      001DC6 08                     289 	.byte 8 
      001DC7 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001DCF                        291 INC_FPTR:
      001DCF 3C 36            [ 1]  292 	inc PTR8 
      001DD1 26 0C            [ 1]  293 	jrne 1$
      001DD3 90 89            [ 2]  294 	pushw y 
      001DD5 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001DD8 90 5C            [ 1]  296 	incw y 
      001DDA 90 BF 34         [ 2]  297 	ldw FPTR,y
      001DDD 90 85            [ 2]  298 	popw y  
      001DDF 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001DE0 1D C6                  305 	.word LINK 
                           001DE2   306 	LINK=.
      001DE2 04                     307 	.byte 4 
      001DE3 50 54 52 2B            308 	.ascii "PTR+"
      001DE7                        309 PTRPLUS:
      001DE7 90 93            [ 1]  310 	ldw y,x 
      001DE9 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001DEC 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001DF0 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001DF3 24 02            [ 1]  314 	jrnc 1$
      001DF5 3C 34            [ 1]  315 	inc FPTR 
      001DF7 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001DF8 1D E2                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001DFA   324 	LINK=.
      001DFA 07                     325 	.byte 7 
      001DFB 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001E02                        327 EE_READ:
      001E02 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001E05 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001E09 90 95            [ 1]  330 	ld yh,a 
      001E0B CD 1D CF         [ 4]  331 	call INC_FPTR 
      001E0E 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001E12 CD 1D CF         [ 4]  333 	call INC_FPTR 
      001E15 90 97            [ 1]  334 	ld yl,a 
      001E17 FF               [ 2]  335 	ldw (x),y 
      001E18 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001E19 1D FA                  342 	.word LINK 
                           001E1B   343 	LINK=.
      001E1B 08                     344 	.byte 8
      001E1C 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001E24                        346 EE_CREAD:
      001E24 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001E27 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001E2B CD 1D CF         [ 4]  349 	call INC_FPTR
      001E2E 90 5F            [ 1]  350 	clrw y 
      001E30 90 97            [ 1]  351 	ld yl,a 
      001E32 FF               [ 2]  352 	ldw (x),y 
      001E33 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001E34 1E 1B                  362 	.word LINK 
                           001E36   363 	LINK=. 
      001E36 07                     364 	.byte 7 
      001E37 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001E3E                        367 WR_BYTE:
      001E3E CD 04 63         [ 4]  368 	call FC_XOFF
      001E41 90 93            [ 1]  369 	ldw y,x 
      001E43 90 FE            [ 2]  370 	ldw y,(y)
      001E45 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001E48 90 9F            [ 1]  372 	ld a,yl
      001E4A 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001E4E 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E53 CD 04 4D         [ 4]  375 	call FC_XON
      001E56 CC 1D CF         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001E59 1E 36                  385 	.word LINK 
                           001E5B   386 	LINK=.
      001E5B 07                     387 	.byte 7 
      001E5C 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001E63                        389 WR_WORD:
      001E63 CD 04 63         [ 4]  390 	call FC_XOFF
      001E66 90 93            [ 1]  391 	ldw y,x
      001E68 90 FE            [ 2]  392 	ldw y,(y)
      001E6A 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001E6D 90 9E            [ 1]  394 	ld a,yh 
      001E6F 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001E73 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E78 CD 1D CF         [ 4]  397 	call INC_FPTR 
      001E7B 90 9F            [ 1]  398 	ld a,yl 
      001E7D 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001E81 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E86 CD 04 4D         [ 4]  401 	call FC_XON
      001E89 CC 1D CF         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001E8C 1E 5B                  409     .word LINK 
                           001E8E   410 	LINK=.
      001E8E 04                     411     .byte 4 
      001E8F 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001E93                        417 EECSTORE:
      001E93 52 02            [ 2]  418 	sub sp,#VSIZE
      001E95 CD 1C 55         [ 4]  419     call FPSTOR
      001E98 E6 01            [ 1]  420 	ld a,(1,x)
      001E9A 43               [ 1]  421 	cpl a 
      001E9B 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001E9D 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001E9F CD 1D 93         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001EA2 3D 34            [ 1]  426 	tnz FPTR 
      001EA4 26 19            [ 1]  427 	jrne 2$
      001EA6 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001EA9 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001EAD 2B 10            [ 1]  430 	jrmi 2$
      001EAF 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001EB3 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001EB5 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001EB7 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001EBB 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001EBF                        437 2$: 
      001EBF CD 1E 3E         [ 4]  438 	call WR_BYTE 	
      001EC2 0D 02            [ 1]  439 	tnz (OPT,sp)
      001EC4 27 0D            [ 1]  440 	jreq 3$ 
      001EC6 7B 01            [ 1]  441     ld a,(BTW,sp)
      001EC8 90 5F            [ 1]  442     clrw y
      001ECA 90 97            [ 1]  443 	ld yl,a 
      001ECC 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001ECF FF               [ 2]  445 	ldw (x),y 
      001ED0 CD 1E 3E         [ 4]  446 	call WR_BYTE
      001ED3                        447 3$: 
      001ED3 CD 1D BB         [ 4]  448 	call LOCK 
      001ED6 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001ED8 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001ED9 1E 8E                  456 	.word LINK 
                           001EDB   457 	LINK=.
      001EDB 03                     458 	.byte 3 
      001EDC 45 45 21               459 	.ascii "EE!"
      001EDF                        460 EESTORE:
      001EDF CD 1C 55         [ 4]  461 	call FPSTOR 
      001EE2 CD 1D 93         [ 4]  462 	call UNLOCK 
      001EE5 90 93            [ 1]  463 	ldw y,x 
      001EE7 90 FE            [ 2]  464 	ldw y,(y)
      001EE9 90 89            [ 2]  465 	pushw y 
      001EEB 90 5E            [ 1]  466 	swapw y 
      001EED FF               [ 2]  467 	ldw (x),y 
      001EEE CD 1E 3E         [ 4]  468 	call WR_BYTE 
      001EF1 90 85            [ 2]  469 	popw y 
      001EF3 1D 00 02         [ 2]  470 	subw x,#CELLL
      001EF6 FF               [ 2]  471 	ldw (x),y 
      001EF7 CD 1E 3E         [ 4]  472 	call WR_BYTE
      001EFA CC 1D BB         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001EFD 1E DB                  481 	.word LINK 
                           001EFF   482 	LINK=. 
      001EFF 09                     483 	.byte 9 
      001F00 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001F09                        485 row_erase:
      001F09 CD 04 63         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001F0C CD 1C 55         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001F0F 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001F12 90 AE 1F 62      [ 2]  491 	ldw y,#row_erase_proc
      001F16 FF               [ 2]  492 	ldw (x),y 
      001F17 CD 0C EE         [ 4]  493 	call PAD 
      001F1A 90 AE 1F 89      [ 2]  494 	ldw y,#row_erase_proc_end 
      001F1E 72 A2 1F 62      [ 2]  495 	subw y,#row_erase_proc
      001F22 1D 00 02         [ 2]  496 	subw x,#CELLL 
      001F25 FF               [ 2]  497 	ldw (x),y 
      001F26 CD 0D 2A         [ 4]  498 	call CMOVE 
      001F29                        499 block_erase:
      001F29 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      001F2C 90 A3 36 00      [ 2]  501 	cpw y,#app_space 
      001F30 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      001F32 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      001F36 24 04            [ 1]  505 	jruge 1$
      001F38 CD 04 4D         [ 4]  506 	call FC_XON
      001F3B 81               [ 4]  507 	ret ; bad address 
      001F3C 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      001F40 23 04            [ 2]  509 	jrule 2$ 
      001F42 CD 04 4D         [ 4]  510 	call FC_XON
      001F45 81               [ 4]  511 	ret ; bad address 
      001F46                        512 2$:	
      001F46 CD 1D 55         [ 4]  513 	call UNLKEE 
      001F49 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      001F4B                        516 erase_flash:
      001F4B CD 1D 74         [ 4]  517 	call UNLKFL 
      001F4E                        518 proceed_erase:
      001F4E CD 0C EE         [ 4]  519 	call PAD 
      001F51 90 93            [ 1]  520 	ldw y,x
      001F53 90 FE            [ 2]  521 	ldw y,(y)
      001F55 1C 00 02         [ 2]  522 	addw x,#CELLL  
      001F58 90 FD            [ 4]  523 	call (y) 
      001F5A 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001F5E CD 04 4D         [ 4]  525 	call FC_XON
      001F61 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      001F62                        529 row_erase_proc:
      001F62 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001F66 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001F6A 4F               [ 1]  532 	clr a 
      001F6B 90 5F            [ 1]  533 	clrw y 
      001F6D 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      001F71 90 5C            [ 1]  535     incw y
      001F73 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      001F77 90 5C            [ 1]  537     incw y
      001F79 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      001F7D 90 5C            [ 1]  539     incw y
      001F7F 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      001F83 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001F88 81               [ 4]  542 	ret
      001F89                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      001F89                        556 copy_buffer:
      001F89 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      001F8B 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001F8F 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001F93 90 5F            [ 1]  561 	clrw y
      001F95 F6               [ 1]  562 1$:	ld a,(x)
      001F96 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      001F9A 5C               [ 1]  564 	incw x 
      001F9B 90 5C            [ 1]  565 	incw y 
      001F9D 0A 01            [ 1]  566 	dec (BCNT,sp)
      001F9F 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      001FA1 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001FA6 84               [ 1]  570 	pop a ; remove BCNT from stack 
      001FA7 81               [ 4]  571 	ret 
      001FA8                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      001FA8                        578 copy_prog_to_ram:
      001FA8 1D 00 06         [ 2]  579 	subw x,#6
      001FAB 90 AE 1F 89      [ 2]  580 	ldw y,#copy_buffer 
      001FAF EF 04            [ 2]  581 	ldw (4,x),y 
      001FB1 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      001FB5 EF 02            [ 2]  583 	ldw (2,x),y 
      001FB7 90 AE 1F A8      [ 2]  584 	ldw y,#copy_buffer_end 
      001FBB 72 A2 1F 89      [ 2]  585 	subw y,#copy_buffer  
      001FBF FF               [ 2]  586 	ldw (x),y 
      001FC0 CD 0D 2A         [ 4]  587 	call CMOVE 
      001FC3 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001FC4 1E FF                  597 	.word LINK 
                           001FC6   598 	LINK=.
      001FC6 06                     599 	.byte 6 
      001FC7 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      001FCD                        601 write_row:
      001FCD CD 04 63         [ 4]  602 	call FC_XOFF
      001FD0 CD 1C 55         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      001FD3 A6 80            [ 1]  605 	ld a,#0x80 
      001FD5 B4 36            [ 1]  606 	and a,PTR8 
      001FD7 B7 36            [ 1]  607 	ld PTR8,a  
      001FD9 CD 1F A8         [ 4]  608 	call copy_prog_to_ram
      001FDC CD 1D 93         [ 4]  609 	call UNLOCK
      001FDF 90 93            [ 1]  610 	ldw y,x 
      001FE1 90 FE            [ 2]  611 	ldw y,(y)
      001FE3 1C 00 02         [ 2]  612 	addw x,#CELLL 
      001FE6 89               [ 2]  613 	pushw x 
      001FE7 93               [ 1]  614 	ldw x,y ; buffer address in x 
      001FE8 CD 17 00         [ 4]  615 	call TIBBASE
      001FEB CD 1D BB         [ 4]  616 	call LOCK
      001FEE 85               [ 2]  617 	popw x 
      001FEF CD 04 4D         [ 4]  618 	call FC_XON 
      001FF2 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      001FF3 1F C6                  627 		.word LINK 
                           001FF5   628 		LINK=.
      001FF5 07                     629 		.byte 7 
      001FF6 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      001FFD                        631 set_option: 
      001FFD 90 93            [ 1]  632 		ldw y,x 
      001FFF 90 FE            [ 2]  633 		ldw y,(y)
      002001 27 06            [ 1]  634 		jreq 1$
      002003 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002007 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002009 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      00200C 81               [ 4]  639 		ret
      00200D 90 58            [ 2]  640 2$:		sllw y 
      00200F 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      002013 FF               [ 2]  642 		ldw (x),y 
      002014 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002017 90 5F            [ 1]  644 		clrw y 
      002019 FF               [ 2]  645 		ldw (x),y 
      00201A CD 1E 93         [ 4]  646 		call EECSTORE
      00201D 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      00201E 1F F5                  656 	.word LINK  
                           002020   657 	LINK=.
      002020 08                     658 	.byte 8 
      002021 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002029                        660 pristine:
                                    661 ;;; erase EEPROM
      002029 CD 1C 74         [ 4]  662 	call EEPROM 
      00202C CD 08 27         [ 4]  663 1$:	call DDUP 
      00202F CD 1F 09         [ 4]  664 	call row_erase
      002032 90 93            [ 1]  665 	ldw y,x 
      002034 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002037 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      00203B EF 02            [ 2]  668 	ldw (2,x),y
      00203D 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      002041 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002043 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002047 FF               [ 2]  673 2$:	ldw (x),y   
      002048 90 5F            [ 1]  674 	clrw y 
      00204A EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      00204C CD 08 27         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      00204F CD 1F FD         [ 4]  677 	call set_option
      002052 90 93            [ 1]  678 	ldw y,x 
      002054 90 FE            [ 2]  679 	ldw y,(y)
      002056 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002058 90 A3 00 08      [ 2]  681 	cpw y,#8 
      00205C 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      00205E 90 AE 36 00      [ 2]  684 	ldw y,#app_space
      002062 EF 02            [ 2]  685 	ldw (2,x),y  
      002064 90 5F            [ 1]  686 	clrw y 
      002066 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002067 CD 1F 09         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00206A 1D 00 02         [ 2]  690 	subw x,#CELLL 
      00206D 90 5F            [ 1]  691 	clrw y  
      00206F FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002070 CD 06 19         [ 4]  693 	call DUPP  
      002073 CD 20 90         [ 4]  694 	call reset_vector
      002076 90 93            [ 1]  695 	ldw y,x 
      002078 90 FE            [ 2]  696 	ldw y,(y)
      00207A 90 5C            [ 1]  697 	incw y   ; next vector 
      00207C 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002080 25 ED            [ 1]  699 	jrult 4$
      002082 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      002085 20 20                  708 	.word LINK 
                           002087   709 	LINK=. 
      002087 08                     710 	.byte 8 
      002088 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002090                        712 reset_vector:
      002090 90 93            [ 1]  713 	ldw y,x
      002092 1C 00 02         [ 2]  714 	addw x,#CELLL 
      002095 90 FE            [ 2]  715 	ldw y,(y)
      002097 90 A3 00 17      [ 2]  716 	cpw y,#23 
      00209B 27 3A            [ 1]  717 	jreq 9$
      00209D 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      0020A1 22 34            [ 1]  719 	jrugt 9$  
      0020A3 90 58            [ 2]  720 	sllw y 
      0020A5 90 58            [ 2]  721 	sllw y 
      0020A7 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0020AB 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0020AE 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0020B1 EF 02            [ 2]  725 	ldw (2,x),y 
      0020B3 90 5F            [ 1]  726 	clrw y
      0020B5 FF               [ 2]  727 	ldw (x),y 
      0020B6 A6 82            [ 1]  728 	ld a,#0x82 
      0020B8 90 95            [ 1]  729 	ld yh,a
      0020BA EF 04            [ 2]  730 	ldw (4,x),y
      0020BC CD 1E DF         [ 4]  731 	call EESTORE
      0020BF 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0020C2 90 5F            [ 1]  733 	clrw y 
      0020C4 FF               [ 2]  734 	ldw (x),y 
      0020C5 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0020C9 EF 04            [ 2]  736 	ldw (4,x),y 
      0020CB 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0020CE 72 A9 00 02      [ 2]  738 	addw y,#2
      0020D2 EF 02            [ 2]  739 	ldw (2,x),y 
      0020D4 CD 1E DF         [ 4]  740 	call EESTORE
      0020D7 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0020D8 20 87                  750 	.word LINK 
                           0020DA   751 	LINK=.
      0020DA 07                     752 	.byte 7
      0020DB 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0020E2                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020E2 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0020E4 90 93            [ 1]  761 	ldw y,x 
      0020E6 90 FE            [ 2]  762 	ldw y,(y)
      0020E8 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0020EA 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0020EC AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0020EF BF 35            [ 2]  766 	ldw PTR16,X
      0020F1 AE FF FC         [ 2]  767 	ldw x,#-4 
      0020F4 1C 00 04         [ 2]  768 1$:	addw x,#4
      0020F7 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0020FA 27 22            [ 1]  770 	jreq 9$
      0020FC 90 93            [ 1]  771 	ldw y,x  
      0020FE 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      002101 11 03            [ 1]  773 	cp a,(CADR,sp)
      002103 25 EF            [ 1]  774 	jrult 1$
      002105 90 5C            [ 1]  775 	incw y 
      002107 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      00210A 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      00210C 25 E6            [ 1]  778 	jrult 1$ 
      00210E 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      002110 54               [ 2]  780 	srlw x
      002111 54               [ 2]  781 	srlw x 
      002112 90 93            [ 1]  782 	ldw y,x 
      002114 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002116 FF               [ 2]  784 	ldw (x),y
      002117 CD 20 90         [ 4]  785 	call reset_vector
      00211A 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      00211C 20 D6            [ 2]  787 	jra 1$
      00211E 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002120 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002123 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      002125 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002126 20 DA                  799 	.word LINK
                           002128   800 	LINK=.
      002128 08                     801 	.byte 8 
      002129 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      002131                        803 set_vector:
      002131 90 93            [ 1]  804     ldw y,x 
      002133 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002136 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002138 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      00213C 23 04            [ 2]  808 	jrule 2$
      00213E 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002141 81               [ 4]  810 	ret
      002142 90 58            [ 2]  811 2$:	sllw y 
      002144 90 58            [ 2]  812 	sllw y 
      002146 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00214A 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      00214D A6 82            [ 1]  815 	ld a,#0x82 
      00214F 90 95            [ 1]  816 	ld yh,a 
      002151 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002153 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      002155 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002158 EF 04            [ 2]  821 	ldw (4,x),y 
      00215A 90 BE 26         [ 2]  822 	ldw y,YTEMP
      00215D EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      00215F 90 5F            [ 1]  824 	clrw y 
      002161 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002162 CD 1E DF         [ 4]  826 	call EESTORE 
      002165 90 93            [ 1]  827 	ldw y,x 
      002167 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00216A 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      00216D EF 04            [ 2]  830 	ldw (4,x),y 
      00216F 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002172 72 A9 00 02      [ 2]  832 	addw y,#2 
      002176 EF 02            [ 2]  833 	ldw (2,x),y 
      002178 90 5F            [ 1]  834 	clrw y 
      00217A FF               [ 2]  835 	ldw (x),y 
      00217B CD 1E DF         [ 4]  836 	call EESTORE
      00217E 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002181 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002182 21 28                  845 	.word LINK
                           002184   846 	LINK=.
      002184 03                     847 	.byte 3
      002185 45 45 2C               848 	.ascii "EE,"
      002188                        849 EE_COMMA:
      002188 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      00218B 90 BE 1A         [ 2]  851 	ldw y,UCP
      00218E 90 89            [ 2]  852 	pushw y 
      002190 EF 02            [ 2]  853 	ldw (2,x),y 
      002192 90 5F            [ 1]  854 	clrw y 
      002194 FF               [ 2]  855 	ldw (x),y
      002195 CD 1E DF         [ 4]  856 	call EESTORE
      002198 90 85            [ 2]  857 	popw y 
      00219A 72 A9 00 02      [ 2]  858 	addw y,#2
      00219E 90 BF 1A         [ 2]  859 	ldw UCP,y
      0021A1 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0021A2 21 84                  867 	.word LINK 
                           0021A4   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0021A4 04                     869 	.byte 4 
      0021A5 45 45 43 2C            870 	.ascii "EEC,"
      0021A9                        871 EE_CCOMMA:
      0021A9 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0021AC 90 BE 1A         [ 2]  873 	ldw y,UCP
      0021AF 90 89            [ 2]  874 	pushw y 
      0021B1 EF 02            [ 2]  875 	ldw (2,x),y 
      0021B3 90 5F            [ 1]  876 	clrw y 
      0021B5 FF               [ 2]  877 	ldw (x),y
      0021B6 CD 1E 93         [ 4]  878 	call EECSTORE
      0021B9 90 85            [ 2]  879 	popw y 
      0021BB 90 5C            [ 1]  880 	incw y 
      0021BD 90 BF 1A         [ 2]  881 	ldw UCP,y
      0021C0 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0021C1 21 A4                  889 	.word LINK 
                           0021C3   890 	LINK=.
      0021C3 07                     891 	.byte 7 
      0021C4 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0021CB                        893 ROW2BUF: 
      0021CB CD 1C 55         [ 4]  894 	call FPSTOR 
      0021CE A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0021D0 88               [ 1]  896 	push a 
      0021D1 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0021D3 B7 36            [ 1]  898 	ld PTR8,a
      0021D5 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0021D9 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0021DD 90 F7            [ 1]  901 	ld (y),a
      0021DF CD 1D CF         [ 4]  902 	call INC_FPTR
      0021E2 90 5C            [ 1]  903 	incw y 
      0021E4 0A 01            [ 1]  904 	dec (1,sp)
      0021E6 26 F1            [ 1]  905 	jrne 1$ 
      0021E8 84               [ 1]  906 	pop a 
      0021E9 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0021EA 21 C3                  915 	.word LINK 
                           0021EC   916 	LINK=.
      0021EC 07                     917 	.byte 7 
      0021ED 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0021F4                        919 BUF2ROW:
      0021F4 CD 07 1D         [ 4]  920 	call TBUF ; ( ud rb -- )
      0021F7 CD 07 DD         [ 4]  921 	call ROT 
      0021FA CD 07 DD         [ 4]  922 	call ROT  ; ( rb ud -- )
      0021FD CD 1F CD         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002200 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      002201 21 EC                  931 	.word LINK 
                           002203   932 	LINK=.
      002203 05                     933 	.byte 5 
      002204 52 46 52 45 45         934 	.ascii "RFREE"
      002209                        935 RFREE:
      002209 E6 01            [ 1]  936 	ld a,(1,x)
      00220B A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      00220D B7 26            [ 1]  938 	ld YTEMP,a 
      00220F A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      002211 B0 26            [ 1]  940 	sub a,YTEMP 
      002213 90 5F            [ 1]  941 	clrw y 
      002215 90 97            [ 1]  942 	ld yl,a
      002217 FF               [ 2]  943 	ldw (x),y 
      002218 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002219 22 03                  955 	.word LINK 
                           00221B   956 	LINK=. 
      00221B 06                     957 	.byte 6
      00221C 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002222                        960 RAM2EE:
                                    961 ; copy ud on top 
      002222 90 93            [ 1]  962 	ldw y,x 
      002224 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002227 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00222A 90 93            [ 1]  965 	ldw y,x 
      00222C 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      00222F 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002232 FF               [ 2]  968 	ldw (x),y 
      002233 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002236 EF 02            [ 2]  970 	ldw (2,x),y 
      002238 CD 21 CB         [ 4]  971 	call ROW2BUF 
      00223B 90 93            [ 1]  972 	ldw y,x 
      00223D 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002240 90 89            [ 2]  974 	pushw y ; udl 
      002242 90 9F            [ 1]  975 	ld a,yl
      002244 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002246 90 5F            [ 1]  977 	clrw y 
      002248 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00224A 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      00224E 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002251 FF               [ 2]  981 	ldw (x),y  
      002252 CD 06 29         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      002255 CD 05 34         [ 4]  983 	call RFROM  
      002258 CD 22 09         [ 4]  984 	call RFREE 
      00225B CD 09 7F         [ 4]  985 	call MIN
      00225E CD 06 19         [ 4]  986 	call DUPP 
      002261 CD 05 E2         [ 4]  987 	call TOR  
      002264 CD 0D 2A         [ 4]  988 	call CMOVE
      002267 CD 21 F4         [ 4]  989 	call BUF2ROW 
      00226A CD 05 34         [ 4]  990 	call RFROM 
      00226D 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      00226E 22 1B                  999 	.word LINK 
                           002270  1000 	LINK=. 
      002270 05                    1001 	.byte 5 
      002271 46 41 44 44 52        1002 	.ascii "FADDR"
      002276                       1003 FADDR:
      002276 CC 0C 03         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      002279 22 70                 1020 	.word LINK 
                           00227B  1021 	LINK=.
      00227B 05                    1022 	.byte 5 
      00227C 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002281                       1024 FMOVE:
      002281 CD 07 2F         [ 4] 1025 	call TFLASH 
      002284 CD 04 E3         [ 4] 1026 	CALL AT 
      002287 CD 04 98         [ 4] 1027 	CALL QBRAN 
      00228A 23 05                 1028 	.word no_move  
      00228C CD 07 7E         [ 4] 1029 	call CPP
      00228F CD 04 E3         [ 4] 1030 	call AT  
      002292 CD 06 19         [ 4] 1031 	call DUPP ; ( udl udl -- )
      002295 CD 07 62         [ 4] 1032 	call CNTXT 
      002298 CD 04 E3         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00229B CD 04 6F         [ 4] 1034 	call DOLIT 
      00229E 00 02                 1035 	.word 2 
      0022A0 CD 08 D2         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0022A3 CD 06 29         [ 4] 1037 	call SWAPP 
      0022A6 CD 22 76         [ 4] 1038 	call FADDR 
      0022A9 CD 07 DD         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0022AC CD 06 19         [ 4] 1040 	call DUPP 
      0022AF CD 05 E2         [ 4] 1041 	call TOR    ; R: a 
      0022B2                       1042 FMOVE2: 
      0022B2 CD 0C DD         [ 4] 1043 	call HERE 
      0022B5 CD 05 45         [ 4] 1044 	call RAT 
      0022B8 CD 08 D2         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0022BB                       1046 next_row:
      0022BB CD 06 19         [ 4] 1047 	call DUPP 
      0022BE CD 05 E2         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0022C1 CD 22 22         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0022C4 CD 06 19         [ 4] 1050 	call DUPP 
      0022C7 CD 05 E2         [ 4] 1051 	call TOR
      0022CA CD 08 3C         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0022CD CD 06 19         [ 4] 1053 	call DUPP 
      0022D0 CD 0C 03         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0022D3 CD 05 34         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0022D6 CD 05 34         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0022D9 CD 06 41         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0022DC CD 08 D2         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0022DF CD 06 19         [ 4] 1059 	call DUPP 
      0022E2 CD 04 98         [ 4] 1060 	call QBRAN
      0022E5 22 FE                 1061 	.word fmove_done 
      0022E7 CD 06 29         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0022EA CD 05 34         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0022ED CD 08 3C         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0022F0 CD 06 19         [ 4] 1065 	call DUPP 
      0022F3 CD 05 E2         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0022F6 CD 06 29         [ 4] 1067 	call SWAPP 
      0022F9 CD 04 B4         [ 4] 1068 	call BRAN
      0022FC 22 BB                 1069 	.word next_row  
      0022FE                       1070 fmove_done:	
      0022FE CD 05 34         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002301 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002304 81               [ 4] 1073  	ret  
      002305                       1074 no_move:
      002305 CD 0C 03         [ 4] 1075 	call ZERO
      002308 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002309 22 7B                 1083 	.word LINK 
                           00230B  1084 	LINK=.
      00230B 09                    1085 	.byte 9
      00230C 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      002315                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      002315 CD 1C CF         [ 4] 1089 	call EEPVP 
      002318                       1090 	_DROP 
      002318 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00231B CD 04 E3         [ 4] 1091 	call AT
      00231E CD 07 70         [ 4] 1092 	call VPP 
      002321 CD 04 D1         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002324 CD 1C B9         [ 4] 1095 	call EEPCP 
      002327                       1096 	_DROP
      002327 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00232A CD 04 E3         [ 4] 1097 	call AT
      00232D CD 04 6F         [ 4] 1098 	call DOLIT 
      002330 00 02                 1099 	.word 2 
      002332 CD 08 3C         [ 4] 1100 	call PLUS 
      002335 CD 06 19         [ 4] 1101 	call DUPP 
      002338 CD 07 62         [ 4] 1102 	call CNTXT 
      00233B CD 04 D1         [ 4] 1103 	call STORE
      00233E CD 07 8E         [ 4] 1104 	call LAST
      002341 CD 04 D1         [ 4] 1105 	call STORE 
      002344 CD 1C E9         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002347 CD 07 7E         [ 4] 1108 	call CPP 
      00234A CD 04 D1         [ 4] 1109 	call STORE
      00234D CD 1D 12         [ 4] 1110 	call UPDATCP 
      002350 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002351 23 0B                 1117 	.word LINK 
                           002353  1118 	LINK=. 
      002353 06                    1119 	.byte 6
      002354 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00235A                       1121 IFMOVE:
      00235A CD 07 2F         [ 4] 1122 	call TFLASH 
      00235D CD 04 E3         [ 4] 1123 	CALL AT 
      002360 CD 04 98         [ 4] 1124 	CALL QBRAN 
      002363 23 05                 1125 	.word no_move 
      002365 CD 07 7E         [ 4] 1126 	call CPP 
      002368 CD 04 E3         [ 4] 1127 	call AT 
      00236B CD 06 19         [ 4] 1128 	call DUPP ; ( udl udl -- )
      00236E CD 1C CF         [ 4] 1129 	call EEPVP 
      002371                       1130 	_DROP
      002371 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002374 CD 04 E3         [ 4] 1131 	call AT  ; ( udl udl a )
      002377 CD 05 E2         [ 4] 1132 	call TOR 
      00237A CD 22 76         [ 4] 1133 	call FADDR
      00237D CD 05 45         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002380 CC 22 B2         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           000001  4640 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4641         .include "const_ratio.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;--------------------------------------------------------------------
                                     22 ; Irrationals constants 
                                     23 ; expressed as 2 integers ratio
                                     24 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     25 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     26 ;---------------------------------------------------------------------
                                     27 
                                     28 ;       PI ( --  355 113 )
                                     29 ; precision 8.5e-8 
                                     30 ; usage example to compute circle area
                                     31 ; : CAREA DUP * PI */ ;
                                     32 ; 
                                     33 
      002383 23 53                   34         .word LINK 
                           002385    35         LINK=.
      002385 02                      36         .byte 2
      002386 50 49                   37         .ascii "PI" 
      002388                         38 PII:
      002388 1D 00 04         [ 2]   39         subw x,#2*CELLL 
      00238B 90 AE 01 63      [ 2]   40         ldw y,#355 
      00238F EF 02            [ 2]   41         ldw (2,x),y 
      002391 90 AE 00 71      [ 2]   42         ldw y,#113 
      002395 FF               [ 2]   43         ldw (x),y 
      002396 81               [ 4]   44         ret 
                                     45 
                                     46 ;      SQRT2 ( -- 19601  13860 )
                                     47 ; precision: 1.5e-9 
                                     48 ; usage example to compute Voltage peek to peek from Vrms 
                                     49 ; : VPP SQRT2 */ 2 * ;
                                     50 ;
      002397 23 85                   51         .word LINK 
                           002399    52         LINK=.
      002399 05                      53         .byte 5 
      00239A 53 51 52 54 32          54         .ascii "SQRT2" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00239F                         55 SQRT2:
      00239F 1D 00 04         [ 2]   56         subw x,#2*CELLL 
      0023A2 90 AE 4C 91      [ 2]   57         ldw y,#19601 
      0023A6 EF 02            [ 2]   58         ldw (2,x),y 
      0023A8 90 AE 36 24      [ 2]   59         ldw y,#13860 
      0023AC FF               [ 2]   60         ldw (x),y 
      0023AD 81               [ 4]   61         ret 
                                     62 
                                     63 ;   SQRT3 ( -- 18817 10864 )
                                     64 ; precision: 1.1e-9
                                     65 ;
      0023AE 23 99                   66         .word LINK 
                           0023B0    67         LINK=.
      0023B0 05                      68         .byte 5
      0023B1 53 51 52 54 33          69         .ascii "SQRT3" 
      0023B6                         70 SQRT3: 
      0023B6 1D 00 04         [ 2]   71     subw x,#2*CELLL 
      0023B9 90 AE 49 81      [ 2]   72     ldw y,#18817 
      0023BD EF 02            [ 2]   73     ldw (2,x),y 
      0023BF 90 AE 2A 70      [ 2]   74     ldw y,#10864 
      0023C3 FF               [ 2]   75     ldw (x),y 
      0023C4 81               [ 4]   76     ret 
                                     77 
                                     78 ;   E ( -- 28667 10546 )
                                     79 ; precision: 5.5e-9 
                                     80 ; natural log base 
      0023C5 23 B0                   81         .word LINK 
                           0023C7    82         LINK=.
      0023C7 01                      83         .byte 1
      0023C8 45                      84         .ascii "E" 
      0023C9                         85 ENEPER:
      0023C9 1D 00 04         [ 2]   86     subw x,#2*CELLL 
      0023CC 90 AE 6F FB      [ 2]   87     ldw y,#28667 
      0023D0 EF 02            [ 2]   88     ldw (2,x),y 
      0023D2 90 AE 29 32      [ 2]   89     ldw y,#10546 
      0023D6 FF               [ 2]   90     ldw (x),y 
      0023D7 81               [ 4]   91     ret 
                                     92 
                                     93 ;   SQRT10 ( -- 22936 7253 )
                                     94 ; precision: 5.7e-9 
      0023D8 23 C7                   95         .word LINK 
                           0023DA    96         LINK=.
      0023DA 06                      97         .byte 6 
      0023DB 53 51 52 54 31 30       98         .ascii "SQRT10" 
      0023E1                         99 SQRT10:
      0023E1 1D 00 04         [ 2]  100     subw x,#2*CELLL
      0023E4 90 AE 59 98      [ 2]  101     ldw y,#22936 
      0023E8 EF 02            [ 2]  102     ldw (2,x),y 
      0023EA 90 AE 1C 55      [ 2]  103     ldw y,#7253
      0023EE FF               [ 2]  104     ldw (x),y 
      0023EF 81               [ 4]  105     ret 
                                    106 
                                    107 ;   12RT2 ( -- 26797 25293 )
                                    108 ; precision: 1.0e-9 
                                    109 ; used in music to compute well tempered scale
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0023F0 23 DA                  110         .word LINK 
                           0023F2   111         LINK=. 
      0023F2 05                     112         .byte 5 
      0023F3 31 32 52 54 32         113         .ascii "12RT2"
      0023F8                        114 RT12_2:
      0023F8 1D 00 04         [ 2]  115     subw x,#2*CELLL 
      0023FB 90 AE 68 AD      [ 2]  116     ldw y,#26797
      0023FF EF 02            [ 2]  117     ldw (2,x),y 
      002401 90 AE 62 CD      [ 2]  118     ldw y,#25293
      002405 FF               [ 2]  119     ldw (x),y 
      002406 81               [ 4]  120     ret 
                                    121 
                                    122 ;   LOG2s ( -- 2040 11103 )
                                    123 ; log(2)/1.6384
                                    124 ; precision: 1.1e-8
      002407 23 F2                  125         .word LINK 
                           002409   126         LINK=.
      002409 05                     127         .byte 5 
      00240A 4C 4F 47 32 53         128         .ascii "LOG2S" 
      00240F                        129 LOG2S:
      00240F 1D 00 04         [ 2]  130     subw x,#2*CELLL
      002412 90 AE 07 F8      [ 2]  131     ldw y,#2040 
      002416 EF 02            [ 2]  132     ldw (2,x),y 
      002418 90 AE 2B 5F      [ 2]  133     ldw y,#11103 
      00241C FF               [ 2]  134     ldw (x),y 
      00241D 81               [ 4]  135     ret 
                                    136 
                                    137 ;   LN2 ( -- 485 11464 )
                                    138 ; ln(2)/16.384 
                                    139 ; precision: 1.0e-7 
      00241E 24 09                  140         .word LINK 
                           002420   141         LINK=.
      002420 04                     142         .byte 4 
      002421 4C 4E 32 53            143         .ascii "LN2S" 
      002425                        144 LN2S: 
      002425 1D 00 04         [ 2]  145     subw x,#2*CELLL
      002428 90 AE 01 E5      [ 2]  146     ldw y,#485
      00242C EF 02            [ 2]  147     ldw (2,x),y 
      00242E 90 AE 2C C8      [ 2]  148     ldw y,#11464 
      002432 FF               [ 2]  149     ldw (x),y 
      002433 81               [ 4]  150     ret 
                                    151 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4642 .endif
                           000001  4643 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   4644         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      002434 24 20                   34     .word LINK 
                           002436    35     LINK=.
      002436 06                      36     .byte 6
      002437 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      00243D                         38 CALLOT:
      00243D CD 07 7E         [ 4]   39     CALL CPP
      002440 CD 06 19         [ 4]   40     CALL DUPP 
      002443 CD 04 E3         [ 4]   41     CALL AT 
      002446 CD 05 E2         [ 4]   42     CALL TOR 
      002449 CD 0C 73         [ 4]   43     CALL PSTOR 
      00244C CD 1D 12         [ 4]   44     CALL UPDATCP 
      00244F CD 05 34         [ 4]   45     CALL RFROM
      002452 CC 0C 03         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      002455 24 36                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                           002457    55     LINK=.
      002457 06                      56     .byte 6
      002458 43 54 41 42 4C 45       57     .ascii "CTABLE"
      00245E                         58 CTABLE:
      00245E CD 24 3D         [ 4]   59     CALL CALLOT     
      002461 CC 19 A6         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      002464 24 57                   69     .word LINK 
                           002466    70     LINK=.
      002466 06                      71     .byte 6
      002467 57 54 41 42 4C 45       72     .ascii "WTABLE"
      00246D                         73 WTABLE:
      00246D CD 0B 8A         [ 4]   74     CALL CELLS  
      002470 CD 24 3D         [ 4]   75     CALL CALLOT 
      002473 CC 19 A6         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      002476 24 66                   84     .word LINK 
                           002478    85     LINK=.
      002478 06                      86     .byte 6
      002479 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      00247F                         88 CTAT:
      00247F CD 1C 55         [ 4]   89     call FPSTOR 
      002482 CD 1D E7         [ 4]   90     call PTRPLUS 
      002485 CC 1E 24         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002488 24 78                   99     .word LINK 
                           00248A   100     LINK=.
      00248A 06                     101     .byte 6
      00248B 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      002491                        103 WTAT:
      002491 CD 1C 55         [ 4]  104     call FPSTOR 
      002494 CD 0B 8A         [ 4]  105     call CELLS 
      002497 CD 1D E7         [ 4]  106     call PTRPLUS 
      00249A CD 1E 02         [ 4]  107     call EE_READ 
      00249D 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      00249E 24 8A                  115     .word LINK 
                           0024A0   116     LINK=.
      0024A0 06                     117     .byte 6 
      0024A1 43 54 49 4E 49 54      118     .ascii "CTINIT"
      0024A7                        119 CTINIT:
      0024A7 CD 1C 55         [ 4]  120     CALL FPSTOR
      0024AA CD 1D 93         [ 4]  121     CALL UNLOCK
      0024AD CD 0C 03         [ 4]  122     CALL ZERO 
      0024B0 CD 0B 97         [ 4]  123 1$: CALL ONEP 
      0024B3 CD 06 19         [ 4]  124     CALL DUPP 
      0024B6 CD 25 03         [ 4]  125     CALL INTQ 
      0024B9 CD 04 98         [ 4]  126     CALL QBRAN 
      0024BC 24 C6                  127     .word 2$
      0024BE CD 1E 3E         [ 4]  128     call WR_BYTE 
      0024C1 CD 04 B4         [ 4]  129     CALL BRAN 
      0024C4 24 B0                  130     .word 1$ 
      0024C6                        131 2$: _DDROP 
      0024C6 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024C9 CD 1D BB         [ 4]  132     CALL LOCK 
      0024CC 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      0024CD 24 A0                  140     .word LINK 
                           0024CF   141     LINK=.
      0024CF 06                     142     .byte 6 
      0024D0 57 54 49 4E 49 54      143     .ascii "WTINIT"
      0024D6                        144 WTINIT:
      0024D6 CD 1C 55         [ 4]  145     CALL FPSTOR
      0024D9 CD 1D 93         [ 4]  146     CALL UNLOCK
      0024DC CD 0C 03         [ 4]  147     CALL ZERO 
      0024DF CD 0B 97         [ 4]  148 1$: CALL ONEP 
      0024E2 CD 06 19         [ 4]  149     CALL DUPP
      0024E5 CD 25 03         [ 4]  150     CALL INTQ
      0024E8 CD 04 98         [ 4]  151     CALL QBRAN 
      0024EB 24 F5                  152     .word 2$
      0024ED CD 1E 63         [ 4]  153     call WR_WORD 
      0024F0 CD 04 B4         [ 4]  154     CALL BRAN 
      0024F3 24 DF                  155     .word 1$ 
      0024F5                        156 2$: _DDROP 
      0024F5 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0024F8 CD 1D BB         [ 4]  157     CALL LOCK 
      0024FB 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      0024FC 24 CF                  166     .word LINK 
                           0024FE   167     LINK=.
      0024FE 04                     168     .byte 4
      0024FF 5B 4E 5D 3F            169     .ascii "[N]?" 
      002503                        170 INTQ:
      002503 CD 0F 89         [ 4]  171     CALL CR 
      002506 CD 04 6F         [ 4]  172     call DOLIT 
      002509 00 5B                  173     .word '[
      00250B CD 04 36         [ 4]  174     CALL EMIT 
      00250E CD 10 2F         [ 4]  175     CALL DOT 
      002511 CD 0F B6         [ 4]  176     CALL  DOTQP
      002514 03                     177     .byte 3
      002515 5D 3F 20               178     .ascii "]? " 
      002518 CD 13 BF         [ 4]  179     CALL QUERY 
      00251B CD 11 EA         [ 4]  180     call TOKEN 
      00251E CC 25 DA         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                   4645 .endif
                           000001  4646 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   4647         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26     .module DOUBLE 
                                     27 
                           000001    28     DVER_MAJOR=1 
                           000000    29     DVER_MINOR=0 
                                     30 
                                     31 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     32 ;  DBL-VER ( -- )
                                     33 ;  print library version 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002521                         35     _HEADER DBLVER,7,"DBL-VER"
      002521 24 FE                    1         .word LINK 
                           002523     2         LINK=.
      002523 07                       3         .byte 7  
      002524 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      00252B                          5         DBLVER:
      00252B CD 0F 89         [ 4]   36     CALL CR 
      00252E CD 0F B6         [ 4]   37     CALL DOTQP 
      002531 18                      38     .byte  24 
      002532 64 6F 75 62 6C 65 20    39     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      00254A CD 1B 55         [ 4]   40     CALL PRT_LICENCE
      00254D CD 1B 2D         [ 4]   41     CALL COPYRIGHT  
      002550                         42     _DOLIT DVER_MAJOR 
      002550 CD 04 6F         [ 4]    1     CALL DOLIT 
      002553 00 01                    2     .word DVER_MAJOR 
      002555                         43     _DOLIT DVER_MINOR  
      002555 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002558 00 00                    2     .word DVER_MINOR 
      00255A CC 1B 69         [ 2]   44     JP PRINT_VERSION  
                                     45 
                                     46 
                                     47 ; check for negative sign 
                                     48 ; ajust pointer and cntr 
      00255D                         49 nsign: ; addr cntr -- addr cntr f 
      00255D 1D 00 02         [ 2]   50     SUBW X,#CELLL ; a cntr f 
      002560 90 93            [ 1]   51     LDW Y,X 
      002562 90 EE 04         [ 2]   52     LDW Y,(4,Y) ; addr 
      002565 90 F6            [ 1]   53     LD A,(Y) ; char=*addr  
      002567 A1 2D            [ 1]   54     CP A,#'-' 
      002569 27 03            [ 1]   55     JREQ NEG_SIGN 
      00256B 4F               [ 1]   56     CLR A  
      00256C 20 18            [ 2]   57     JRA STO_SIGN 
      00256E                         58 NEG_SIGN:
                                     59 ; increment addr 
      00256E 90 93            [ 1]   60     LDW Y,X 
      002570 90 EE 04         [ 2]   61     LDW Y,(4,Y)
      002573 72 A9 00 01      [ 2]   62     ADDW Y,#1   ;addr+1 
      002577 EF 04            [ 2]   63     LDW (4,X),Y 
                                     64 ; decrement cntr 
      002579 90 93            [ 1]   65     LDW Y,X
      00257B 90 EE 02         [ 2]   66     LDW Y,(2,Y)
      00257E 72 A2 00 01      [ 2]   67     SUBW Y,#1   ;cntr-1 
      002582 EF 02            [ 2]   68     LDW (2,X),Y 
      002584 A6 FF            [ 1]   69     LD A,#0XFF
      002586                         70 STO_SIGN:   
      002586 F7               [ 1]   71     LD (X),A 
      002587 E7 01            [ 1]   72     LD (1,X),A 
      002589 81               [ 4]   73     RET 
                                     74 
                                     75 
                                     76 ; get all digits in row 
                                     77 ; stop at first non-digit or end of string 
                                     78 ; ( dlo dhi a cntr -- dlo dhi [ a+ cntr- | a+ 0 ] )
      00258A                         79 parse_digits:
      00258A                         80 1$:
      00258A CD 06 19         [ 4]   81     CALL DUPP 
      00258D                         82     _QBRAN 5$ 
      00258D CD 04 98         [ 4]    1     CALL QBRAN
      002590 25 CF                    2     .word 5$
      002592 CD 05 E2         [ 4]   83     CALL TOR   ; dlo dhi a R: cntr 
      002595 CD 0C C6         [ 4]   84     CALL COUNT ; dlo dhi a+ char 
      002598 CD 06 DF         [ 4]   85     CALL BASE 
      00259B CD 04 E3         [ 4]   86     CALL AT 
      00259E CD 0E CF         [ 4]   87     CALL DIGTQ 
      0025A1                         88     _QBRAN 4$ ; not a digit
      0025A1 CD 04 98         [ 4]    1     CALL QBRAN
      0025A4 25 C6                    2     .word 4$
      0025A6 CD 29 0A         [ 4]   89     CALL DTOR  ; dlo dhi R: cntr a+ c  
      0025A9 CD 06 DF         [ 4]   90     CALL BASE 
      0025AC CD 04 E3         [ 4]   91     CALL AT 
      0025AF CD 27 95         [ 4]   92     CALL DSSTAR
      0025B2 CD 05 34         [ 4]   93     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0025B5 CD 0C 03         [ 4]   94     CALL ZERO 
      0025B8 CD 2B E4         [ 4]   95     CALL DPLUS 
      0025BB CD 05 34         [ 4]   96     CALL RFROM  ; dlo dhi a+ 
      0025BE CD 05 34         [ 4]   97     CALL RFROM ; dlo dhi a+ cntr 
      0025C1 CD 0B A4         [ 4]   98     CALL ONEM 
      0025C4 20 C4            [ 2]   99     JRA 1$ ; dlo dhi a+ R: 
      0025C6                        100 4$: _DROP  ; dlo dhi a+ 
      0025C6 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0025C9 CD 0B A4         [ 4]  101     CALL ONEM  ; unget char 
      0025CC CD 05 34         [ 4]  102     CALL RFROM ; dlo dhi a+ cntr-
      0025CF                        103 5$:
      0025CF 81               [ 4]  104     RET 
                                    105 
                                    106 
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    108 ;   NUMBER? (a -- s -1 |d -2 | a F )
                                    109 ;   convert string to integer 
                                    110 ;   double begin with '#' 
                                    111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025D0                        112     _HEADER NUMBQ,7,"NUMBER?"
      0025D0 25 23                    1         .word LINK 
                           0025D2     2         LINK=.
      0025D2 07                       3         .byte 7  
      0025D3 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      0025DA                          5         NUMBQ:
                                    113 ; save current base value 
      0025DA CD 06 DF         [ 4]  114     CALL BASE 
      0025DD CD 04 E3         [ 4]  115     CALL AT 
      0025E0 CD 05 E2         [ 4]  116     CALL TOR 
                                    117 ; initialize integer to 0     
      0025E3 1D 00 04         [ 2]  118     SUBW X,#4 
      0025E6 90 5F            [ 1]  119     CLRW Y 
      0025E8 FF               [ 2]  120     LDW (X),Y 
      0025E9 EF 02            [ 2]  121     LDW (2,X),Y ; a 0 0 R: base  
      0025EB                        122     _DOLIT 2 
      0025EB CD 04 6F         [ 4]    1     CALL DOLIT 
      0025EE 00 02                    2     .word 2 
      0025F0 CD 0C 5C         [ 4]  123     CALL PICK  ; a 0 0 a R: base    
      0025F3 CD 0C C6         [ 4]  124     CALL COUNT ; a 0 0 a+ n 
                                    125 ; check for '#' double integer 
      0025F6 CD 06 41         [ 4]  126     CALL OVER  ; a 0 0 a+ n a+
      0025F9 CD 05 01         [ 4]  127     CALL CAT   ; a 0 0 a+ n c 
      0025FC                        128     _DOLIT '#' ; a 0 0 a+ n c '#' 
      0025FC CD 04 6F         [ 4]    1     CALL DOLIT 
      0025FF 00 23                    2     .word '#' 
      002601 CD 08 FA         [ 4]  129     CALL EQUAL 
      002604 CD 05 E2         [ 4]  130     CALL TOR   ; a 0 0 a+ n R: base d? 
      002607 CD 05 45         [ 4]  131     CALL RAT   ; a 0 0 a+ n d? R: base d?
      00260A                        132     _QBRAN NUMQ0
      00260A CD 04 98         [ 4]    1     CALL QBRAN
      00260D 26 1B                    2     .word NUMQ0
                                    133 ; update a and count
      00260F CD 06 29         [ 4]  134     CALL SWAPP 
      002612 CD 0B 97         [ 4]  135     CALL ONEP 
      002615 CD 06 29         [ 4]  136     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002618 CD 0B A4         [ 4]  137     CALL ONEM  ; a 0 0 a+ n- R: base d?
                                    138 ; check for '$' hexadecimal  
      00261B                        139 NUMQ0: 
      00261B CD 06 41         [ 4]  140     CALL OVER   
      00261E CD 05 01         [ 4]  141     CALL CAT   
      002621                        142     _DOLIT '$'
      002621 CD 04 6F         [ 4]    1     CALL DOLIT 
      002624 00 24                    2     .word '$' 
      002626 CD 08 FA         [ 4]  143     CALL EQUAL ; a 0 0 a+ n- f  
      002629                        144     _QBRAN NUMQ1 
      002629 CD 04 98         [ 4]    1     CALL QBRAN
      00262C 26 3D                    2     .word NUMQ1
      00262E CD 0E A6         [ 4]  145     CALL HEX   ; switch to hexadecimal base 
                                    146 ; update a and count 
      002631 CD 06 29         [ 4]  147     CALL SWAPP 
      002634 CD 0B 97         [ 4]  148     CALL ONEP 
      002637 CD 06 29         [ 4]  149     CALL SWAPP
      00263A CD 0B A4         [ 4]  150     CALL ONEM ; a 0 0 a+ n-  R: base d?
                                    151 ; check for minus sign 
      00263D                        152 NUMQ1: 
      00263D CD 25 5D         [ 4]  153     CALL nsign 
      002640 CD 05 E2         [ 4]  154     CALL TOR ; R: base d? sign  
                                    155 ; check for end of string     
      002643 CD 07 CC         [ 4]  156     CALL QDUP    ; a dlo dhi a+ cntr R: base d? sign 
      002646                        157     _QBRAN NUMQ4 ; yes , not a number 
      002646 CD 04 98         [ 4]    1     CALL QBRAN
      002649 26 85                    2     .word NUMQ4
      00264B CD 25 8A         [ 4]  158     CALL parse_digits
      00264E CD 07 CC         [ 4]  159     CALL QDUP 
      002651 CD 06 62         [ 4]  160     CALL ZEQUAL  
      002654                        161     _QBRAN NUMQ4 ; error not end of string  ( a dlo dhi a+ R: base d? sign )
      002654 CD 04 98         [ 4]    1     CALL QBRAN
      002657 26 85                    2     .word NUMQ4
      002659                        162     _DROP  ; a dlo dhi 
      002659 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00265C CD 05 34         [ 4]  163     CALL RFROM  ; a dlo dhi sign 
      00265F                        164     _QBRAN NUMQ3
      00265F CD 04 98         [ 4]    1     CALL QBRAN
      002662 26 67                    2     .word NUMQ3
      002664 CD 08 98         [ 4]  165     CALL DNEGA
      002667                        166 NUMQ3: 
      002667 CD 07 DD         [ 4]  167     CALL ROT ; dlo dhi a  R: base d?
      00266A                        168     _DROP
      00266A 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00266D                        169     _DOLIT -2  ; double return -2 flag 
      00266D CD 04 6F         [ 4]    1     CALL DOLIT 
      002670 FF FE                    2     .word -2 
      002672 CD 05 34         [ 4]  170     CALL RFROM ; dlo dhi d? R: base 
      002675                        171     _TBRAN NUMQ8 
      002675 CD 04 A6         [ 4]    1     CALL TBRAN 
      002678 26 8E                    2     .word NUMQ8 
      00267A CD 06 29         [ 4]  172     CALL SWAPP 
      00267D                        173     _DROP
      00267D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002680 CD 0B 97         [ 4]  174     CALL ONEP   ; single return -1 flag   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      002683 20 09            [ 2]  175     JRA NUMQ8
      002685                        176 NUMQ4: ; not end of string error , ( a dlo dhi a+ cntr R: base d? sign )
                           000001   177 .if WANT_FLOAT
      002685 CD 05 34         [ 4]  178     CALL RFROM ; sign 
      002688 CD 05 34         [ 4]  179     CALL RFROM ; d? 
      00268B CD 2F B3         [ 4]  180     CALL FLOATQ ; ( a dlo dhi a+ cntr sign d? )    
                           000000   181 .else 
                                    182     ADDW X,#4 ; drop dhi a+  , ( a dlo R: base d? sign ) 
                                    183     ADDW SP,#4 ; drop d? sign  R: base 
                                    184     CLRW Y 
                                    185     LDW (X),Y ; dlo replaced by 0 ( -- a 0 R: base ) 
                                    186 .endif 
                                    187 ; restore original base value     
      00268E                        188 NUMQ8: 
      00268E CD 05 34         [ 4]  189     CALL RFROM 
      002691 CD 06 DF         [ 4]  190     CALL BASE 
      002694 CD 04 D1         [ 4]  191     CALL STORE 
      002697 81               [ 4]  192     RET 
                                    193 
                                    194 
                                    195 
                                    196 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    197 ;   DABS ( d -- d )
                                    198 ;   absolute value of double
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002698                        200     _HEADER DABS,4,"DABS"
      002698 25 D2                    1         .word LINK 
                           00269A     2         LINK=.
      00269A 04                       3         .byte 4  
      00269B 44 41 42 53              4         .ascii "DABS"
      00269F                          5         DABS:
      00269F F6               [ 1]  201     LD A,(X) 
      0026A0 A4 80            [ 1]  202     AND A,#0X80 
      0026A2 27 03            [ 1]  203     JREQ DABS1 
      0026A4 CD 08 98         [ 4]  204     CALL DNEGA 
      0026A7                        205 DABS1:
      0026A7 81               [ 4]  206     RET 
                                    207 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    209 ;  DSIGN ( d -- d f )
                                    210 ;  sign of double 
                                    211 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026A8                        212     _HEADER DSIGN,5,"DSIGN"
      0026A8 26 9A                    1         .word LINK 
                           0026AA     2         LINK=.
      0026AA 05                       3         .byte 5  
      0026AB 44 53 49 47 4E           4         .ascii "DSIGN"
      0026B0                          5         DSIGN:
      0026B0 A6 00            [ 1]  213     LD A,#0 
      0026B2 90 93            [ 1]  214     LDW Y,X 
      0026B4 90 FE            [ 2]  215     LDW Y,(Y)
      0026B6 2A 02            [ 1]  216     JRPL DSIGN1
      0026B8 A6 FF            [ 1]  217     LD A,#0XFF 
      0026BA                        218 DSIGN1:
      0026BA 1D 00 02         [ 2]  219     SUBW X,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0026BD F7               [ 1]  220     LD (X),A 
      0026BE E7 01            [ 1]  221     LD (1,X),A 
      0026C0 81               [ 4]  222     RET 
                                    223 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    225 ;   DS/MOD ( ud us - ur qud )
                                    226 ;   unsigned divide double by single 
                                    227 ;   return double quotient 
                                    228 ;   and single remainder 
                                    229 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C1                        230     _HEADER DSLMOD,6,"DS/MOD"
      0026C1 26 AA                    1         .word LINK 
                           0026C3     2         LINK=.
      0026C3 06                       3         .byte 6  
      0026C4 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      0026CA                          5         DSLMOD:
      0026CA 90 93            [ 1]  231         LDW     Y,X             ; stack pointer to Y
      0026CC FE               [ 2]  232         LDW     X,(X)           ; un
      0026CD BF 26            [ 2]  233         LDW     YTEMP,X         ; save un
      0026CF 93               [ 1]  234         LDW     X,Y
      0026D0 89               [ 2]  235         PUSHW   X               ; save stack pointer
      0026D1 90 89            [ 2]  236         PUSHW   Y 
      0026D3 EE 02            [ 2]  237         LDW     X,(2,X)           ; X=udh
      0026D5 90 BE 26         [ 2]  238         LDW     Y,YTEMP         ; divisor 
      0026D8 65               [ 2]  239         DIVW    X,Y 
      0026D9 BF 24            [ 2]  240         LDW     XTEMP,X         ; QUOTIENT hi 
      0026DB 93               [ 1]  241         LDW     X,Y             ; remainder in X 
      0026DC 90 85            [ 2]  242         POPW    Y 
      0026DE 90 EE 04         [ 2]  243         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0026E1 A6 10            [ 1]  244         LD      A,#16           ; loop count
      0026E3 90 58            [ 2]  245         SLLW    Y               ; udl shift udl into udh
      0026E5                        246 DSLMOD3:
      0026E5 59               [ 2]  247         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0026E6 25 04            [ 1]  248         JRC     DSLMODa         ; if carry out of rotate
      0026E8 B3 26            [ 2]  249         CPW     X,YTEMP         ; compare udh to un
      0026EA 25 05            [ 1]  250         JRULT   DSLMOD4         ; can't subtract
      0026EC                        251 DSLMODa:
      0026EC 72 B0 00 26      [ 2]  252         SUBW    X,YTEMP         ; can subtract
      0026F0 98               [ 1]  253         RCF
      0026F1                        254 DSLMOD4:
      0026F1 8C               [ 1]  255         CCF                     ; quotient bit
      0026F2 90 59            [ 2]  256         RLCW    Y               ; rotate into quotient, rotate out udl
      0026F4 4A               [ 1]  257         DEC     A               ; repeat
      0026F5 26 EE            [ 1]  258         JRNE    DSLMOD3           ; if A == 0
      0026F7                        259 DSLMODb:
      0026F7 BF 26            [ 2]  260         LDW     YTEMP,X         ; done, save remainder
      0026F9 85               [ 2]  261         POPW    X               ; restore stack pointer
      0026FA EF 02            [ 2]  262         LDW     (2,X),Y           ; save quotient low 
      0026FC 90 BE 24         [ 2]  263         LDW     Y,XTEMP         ; quotient hi 
      0026FF FF               [ 2]  264         LDW     (X),Y           ; save quotient hi 
      002700 90 BE 26         [ 2]  265         LDW     Y,YTEMP         ; remainder onto stack
      002703 EF 04            [ 2]  266         LDW     (4,X),Y
      002705 81               [ 4]  267         RET 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                    270 ;   D# ( d -- d )
                                    271 ;   extract least digit 
                                    272 ;   from double integer 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002706                        274     _HEADER DDIG,2,"D#"
      002706 26 C3                    1         .word LINK 
                           002708     2         LINK=.
      002708 02                       3         .byte 2  
      002709 44 23                    4         .ascii "D#"
      00270B                          5         DDIG:
      00270B CD 06 DF         [ 4]  275     CALL BASE 
      00270E CD 04 E3         [ 4]  276     CALL AT 
      002711 CD 26 CA         [ 4]  277     CALL DSLMOD
      002714 CD 07 DD         [ 4]  278     CALL ROT   
      002717 CD 0D CF         [ 4]  279     CALL DIGIT 
      00271A CD 0E 1B         [ 4]  280     CALL HOLD 
      00271D 81               [ 4]  281     RET 
                                    282 
                                    283 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    284 ;    D#S ( d -- s )
                                    285 ;   extract digit from double 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00271E                        287     _HEADER DDIGS,3,"D#S"
      00271E 27 08                    1         .word LINK 
                           002720     2         LINK=.
      002720 03                       3         .byte 3  
      002721 44 23 53                 4         .ascii "D#S"
      002724                          5         DDIGS:
      002724 CD 27 0B         [ 4]  288     CALL    DDIG 
      002727 CD 08 27         [ 4]  289     CALL    DDUP 
      00272A CD 28 90         [ 4]  290     CALL    DZEQUAL
      00272D                        291     _QBRAN  DDIGS 
      00272D CD 04 98         [ 4]    1     CALL QBRAN
      002730 27 24                    2     .word DDIGS
      002732 CD 06 0F         [ 4]  292     CALL    DROP 
      002735 81               [ 4]  293     RET 
                                    294 
                                    295 
                                    296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    297 ;   D. ( d -- )
                                    298 ;   display double integer 
                                    299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002736                        300     _HEADER DDOT,2,"D."
      002736 27 20                    1         .word LINK 
                           002738     2         LINK=.
      002738 02                       3         .byte 2  
      002739 44 2E                    4         .ascii "D."
      00273B                          5         DDOT:
      00273B CD 0F 47         [ 4]  301     CALL SPACE 
      00273E CD 26 B0         [ 4]  302     CALL DSIGN 
      002741 CD 05 E2         [ 4]  303     CALL TOR
      002744 CD 05 45         [ 4]  304     CALL RAT 
      002747                        305     _QBRAN DDOT0
      002747 CD 04 98         [ 4]    1     CALL QBRAN
      00274A 27 4F                    2     .word DDOT0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      00274C CD 08 98         [ 4]  306     CALL DNEGA 
      00274F                        307 DDOT0:     
      00274F CD 0E 0B         [ 4]  308     CALL BDIGS 
      002752 CD 27 24         [ 4]  309     CALL DDIGS 
      002755 CD 05 34         [ 4]  310     CALL RFROM 
      002758                        311     _QBRAN DDOT1 
      002758 CD 04 98         [ 4]    1     CALL QBRAN
      00275B 27 65                    2     .word DDOT1
      00275D                        312     _DOLIT '-' 
      00275D CD 04 6F         [ 4]    1     CALL DOLIT 
      002760 00 2D                    2     .word '-' 
      002762 CD 0E 1B         [ 4]  313     CALL HOLD 
      002765                        314 DDOT1: 
      002765 CD 0E 70         [ 4]  315     CALL EDIGS 
      002768 CD 0F 71         [ 4]  316     CALL TYPES     
      00276B 81               [ 4]  317     RET 
                                    318 
                                    319 
                                    320 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    321 ;  UDS* ( ud u -- ud*u )
                                    322 ;  uint32*uint16 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00276C                        324     _HEADER UDSSTAR,4,"UDS*"
      00276C 27 38                    1         .word LINK 
                           00276E     2         LINK=.
      00276E 04                       3         .byte 4  
      00276F 55 44 53 2A              4         .ascii "UDS*"
      002773                          5         UDSSTAR:
      002773 CD 05 E2         [ 4]  325     CALL TOR 
      002776 CD 06 29         [ 4]  326     CALL SWAPP 
      002779 CD 05 45         [ 4]  327     CALL RAT 
      00277C CD 0A CC         [ 4]  328     CALL UMSTA ; udlo*u 
      00277F CD 07 DD         [ 4]  329     CALL ROT 
      002782 CD 05 34         [ 4]  330     CALL RFROM 
      002785 CD 0A CC         [ 4]  331     CALL UMSTA ; udhi*u 
      002788                        332     _DROP  ; drop overflow 
      002788 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00278B CD 08 3C         [ 4]  333     CALL PLUS  ; udlo*u+(uhi*u<<16)
      00278E 81               [ 4]  334     RET 
                                    335 
                                    336 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    337 ; multiply double by unsigned single 
                                    338 ; return double 
                                    339 ;  ( d u -- d )
                                    340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00278F                        341     _HEADER DSSTAR,3,"DS*"
      00278F 27 6E                    1         .word LINK 
                           002791     2         LINK=.
      002791 03                       3         .byte 3  
      002792 44 53 2A                 4         .ascii "DS*"
      002795                          5         DSSTAR:
                                    342 ;DSSTAR:
      002795 CD 05 E2         [ 4]  343     CALL TOR
      002798 CD 26 B0         [ 4]  344     CALL DSIGN 
      00279B CD 07 FC         [ 4]  345     CALL NROT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      00279E CD 26 9F         [ 4]  346     CALL DABS
      0027A1 CD 05 34         [ 4]  347     CALL RFROM 
      0027A4 CD 27 73         [ 4]  348     CALL UDSSTAR  
      0027A7 CD 07 DD         [ 4]  349     CALL ROT 
      0027AA                        350     _QBRAN DSSTAR3 
      0027AA CD 04 98         [ 4]    1     CALL QBRAN
      0027AD 27 B2                    2     .word DSSTAR3
      0027AF CD 08 98         [ 4]  351     CALL DNEGA 
      0027B2                        352 DSSTAR3:
      0027B2 81               [ 4]  353     RET 
                                    354 
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    357 ;  swap double 
                                    358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B3                        359     _HEADER DSWAP,5,"2SWAP"
      0027B3 27 91                    1         .word LINK 
                           0027B5     2         LINK=.
      0027B5 05                       3         .byte 5  
      0027B6 32 53 57 41 50           4         .ascii "2SWAP"
      0027BB                          5         DSWAP:
      0027BB 90 93            [ 1]  360     LDW Y,X 
      0027BD 90 FE            [ 2]  361     LDW Y,(Y)
      0027BF 90 BF 26         [ 2]  362     LDW YTEMP,Y ; d2 hi 
      0027C2 90 93            [ 1]  363     LDW Y,X 
      0027C4 90 EE 02         [ 2]  364     LDW Y,(2,Y)
      0027C7 90 BF 24         [ 2]  365     LDW XTEMP,Y  ; d2 lo 
      0027CA 90 93            [ 1]  366     LDW Y,X 
      0027CC 90 EE 04         [ 2]  367     LDW Y,(4,Y)  ; d1 hi 
      0027CF FF               [ 2]  368     LDW (X),Y 
      0027D0 90 93            [ 1]  369     LDW Y,X
      0027D2 90 EE 06         [ 2]  370     LDW Y,(6,Y)  ; d1 lo 
      0027D5 EF 02            [ 2]  371     LDW (2,X),Y
      0027D7 90 BE 26         [ 2]  372     LDW Y,YTEMP  
      0027DA EF 04            [ 2]  373     LDW (4,X),Y 
      0027DC 90 BE 24         [ 2]  374     LDW Y,XTEMP 
      0027DF EF 06            [ 2]  375     LDW (6,X),Y 
      0027E1 81               [ 4]  376     RET 
                                    377 
                                    378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    379 ;    DCLZ ( d -- u )
                                    380 ;    double count leading zeros
                                    381 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027E2                        382     _HEADER DCLZ,4,"DCLZ"
      0027E2 27 B5                    1         .word LINK 
                           0027E4     2         LINK=.
      0027E4 04                       3         .byte 4  
      0027E5 44 43 4C 5A              4         .ascii "DCLZ"
      0027E9                          5         DCLZ:
      0027E9 4F               [ 1]  383     CLR A 
      0027EA 90 93            [ 1]  384     LDW Y,X 
      0027EC 90 FE            [ 2]  385     LDW Y,(Y)
      0027EE 2B 18            [ 1]  386     JRMI DCLZ8 ; no leading zero 
      0027F0 27 09            [ 1]  387     JREQ DCLZ4 ; >=16 
      0027F2                        388 DCLZ1: ; <16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      0027F2 90 58            [ 2]  389     SLLW Y
      0027F4 4C               [ 1]  390     INC A 
      0027F5 90 5D            [ 2]  391     TNZW Y 
      0027F7 2B 0F            [ 1]  392     JRMI DCLZ8
      0027F9 20 F7            [ 2]  393     JRA DCLZ1 
      0027FB                        394 DCLZ4: ; >=16 
      0027FB A6 10            [ 1]  395     LD A,#16 
      0027FD 90 93            [ 1]  396     LDW Y,X 
      0027FF 90 EE 02         [ 2]  397     LDW Y,(2,Y)
      002802 2B 04            [ 1]  398     JRMI DCLZ8 
      002804 26 EC            [ 1]  399     JRNE DCLZ1 
      002806 AB 10            [ 1]  400     ADD A,#16
      002808                        401 DCLZ8: 
      002808 1C 00 02         [ 2]  402     ADDW X,#2 
      00280B 90 5F            [ 1]  403     CLRW Y 
      00280D 90 97            [ 1]  404     LD YL,A 
      00280F FF               [ 2]  405     LDW (X),Y 
      002810 81               [ 4]  406     RET 
                                    407 
                                    408 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    409 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    410 ;   rotate left doubles 
                                    411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002811                        412     _HEADER NDROT,5,"<2ROT"
      002811 27 E4                    1         .word LINK 
                           002813     2         LINK=.
      002813 05                       3         .byte 5  
      002814 3C 32 52 4F 54           4         .ascii "<2ROT"
      002819                          5         NDROT:
                                    413 ; save d3 in temp 
      002819 90 93            [ 1]  414     LDW Y,X 
      00281B 90 FE            [ 2]  415     LDW Y,(Y)
      00281D 90 BF 26         [ 2]  416     LDW YTEMP,Y  ; d3 hi 
      002820 90 93            [ 1]  417     LDW Y,X 
      002822 90 EE 02         [ 2]  418     LDW Y,(2,Y)
      002825 90 BF 24         [ 2]  419     LDW XTEMP,Y  ; d3 lo 
                                    420 ; put d2 in d1 slot 
      002828 90 93            [ 1]  421     LDW Y,X 
      00282A 90 EE 04         [ 2]  422     LDW Y,(4,Y) 
      00282D FF               [ 2]  423     LDW (X),Y   ; d2 hi 
      00282E 90 93            [ 1]  424     LDW Y,X 
      002830 90 EE 06         [ 2]  425     LDW Y,(6,Y)
      002833 EF 02            [ 2]  426     LDW (2,X),Y ; d2 lo
                                    427 ; put d1 in d2 slot 
      002835 90 93            [ 1]  428     LDW Y,X 
      002837 90 EE 08         [ 2]  429     LDW Y,(8,Y) 
      00283A EF 04            [ 2]  430     LDW (4,X),Y ; d1 hi 
      00283C 90 93            [ 1]  431     LDW Y,X 
      00283E 90 EE 0A         [ 2]  432     LDW Y,(10,Y)
      002841 EF 06            [ 2]  433     LDW (6,X),Y  ; d1 lo 
                                    434 ; put d3 in d1 slot 
      002843 90 BE 26         [ 2]  435     LDW Y,YTEMP 
      002846 EF 08            [ 2]  436     LDW (8,X),Y  ; d3 hi 
      002848 90 BE 24         [ 2]  437     LDW Y,XTEMP 
      00284B EF 0A            [ 2]  438     LDW (10,X),Y  ; d3 lo 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      00284D 81               [ 4]  439     RET 
                                    440 
                                    441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    442 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    443 ;   rotate right doubles 
                                    444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00284E                        445     _HEADER DROT,4,"2ROT"
      00284E 28 13                    1         .word LINK 
                           002850     2         LINK=.
      002850 04                       3         .byte 4  
      002851 32 52 4F 54              4         .ascii "2ROT"
      002855                          5         DROT:
                                    446 ; save d3 in temp 
      002855 90 93            [ 1]  447     LDW Y,X 
      002857 90 FE            [ 2]  448     LDW Y,(Y)
      002859 90 BF 26         [ 2]  449     LDW YTEMP,Y ; d3 hi 
      00285C 90 93            [ 1]  450     LDW Y,X 
      00285E 90 EE 02         [ 2]  451     LDW Y,(2,Y)
      002861 90 BF 24         [ 2]  452     LDW XTEMP,Y ; d3 lo 
                                    453 ; put d1 in d3 slot 
      002864 90 93            [ 1]  454     LDW Y,X 
      002866 90 EE 08         [ 2]  455     LDW Y,(8,Y)
      002869 FF               [ 2]  456     LDW (X),Y  ; d1 hi 
      00286A 90 93            [ 1]  457     LDW Y,X 
      00286C 90 EE 0A         [ 2]  458     LDW Y,(10,Y) 
      00286F EF 02            [ 2]  459     LDW (2,X),Y ; d1 lo 
                                    460 ; put d2 in d1 slot 
      002871 90 93            [ 1]  461     LDW Y,X 
      002873 90 EE 04         [ 2]  462     LDW Y,(4,Y) ; d2 hi 
      002876 EF 08            [ 2]  463     LDW (8,X),Y 
      002878 90 93            [ 1]  464     LDW Y,X 
      00287A 90 EE 06         [ 2]  465     LDW Y,(6,Y) ; d2 lo 
      00287D EF 0A            [ 2]  466     LDW (10,X),Y 
                                    467 ; put d3 in d2 slot 
      00287F 90 BE 26         [ 2]  468     LDW Y,YTEMP 
      002882 EF 04            [ 2]  469     LDW (4,X),Y 
      002884 90 BE 24         [ 2]  470     LDW Y,XTEMP 
      002887 EF 06            [ 2]  471     LDW (6,X),Y 
      002889 81               [ 4]  472     RET 
                                    473 
                                    474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    475 ;    D0= ( d -- 0|-1 )
                                    476 ;    check if double is 0 
                                    477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00288A                        478     _HEADER DZEQUAL,3,"D0="
      00288A 28 50                    1         .word LINK 
                           00288C     2         LINK=.
      00288C 03                       3         .byte 3  
      00288D 44 30 3D                 4         .ascii "D0="
      002890                          5         DZEQUAL:
      002890 4F               [ 1]  479     CLR A  
      002891 90 93            [ 1]  480     LDW Y,X 
      002893 90 FE            [ 2]  481     LDW Y,(Y)
      002895 26 09            [ 1]  482     JRNE ZEQ1 
      002897 90 93            [ 1]  483     LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      002899 90 EE 02         [ 2]  484     LDW Y,(2,Y)
      00289C 26 02            [ 1]  485     JRNE ZEQ1 
      00289E A6 FF            [ 1]  486     LD A,#0xFF
      0028A0                        487 ZEQ1:
      0028A0 1C 00 02         [ 2]  488     ADDW X,#CELLL 
      0028A3 F7               [ 1]  489     LD (X),A
      0028A4 E7 01            [ 1]  490     LD (1,X),A
      0028A6 81               [ 4]  491 	RET     
                                    492 
                                    493 
                                    494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    495 ;   D= ( d1 d2 -- f )
                                    496 ;   d1==d2?
                                    497 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A7                        498     _HEADER DEQUAL,2,"D="
      0028A7 28 8C                    1         .word LINK 
                           0028A9     2         LINK=.
      0028A9 02                       3         .byte 2  
      0028AA 44 3D                    4         .ascii "D="
      0028AC                          5         DEQUAL:
      0028AC A6 00            [ 1]  499     LD A,#0 
      0028AE 90 93            [ 1]  500     LDW Y,X 
      0028B0 90 FE            [ 2]  501     LDW Y,(Y)
      0028B2 E3 04            [ 2]  502     CPW Y,(4,X)
      0028B4 26 0B            [ 1]  503     JRNE DEQU4 
      0028B6 90 93            [ 1]  504     LDW Y,X 
      0028B8 90 EE 02         [ 2]  505     LDW Y,(2,Y)
      0028BB E3 06            [ 2]  506     CPW Y,(6,X)
      0028BD 26 02            [ 1]  507     JRNE DEQU4 
      0028BF A6 FF            [ 1]  508     LD A,#0XFF
      0028C1                        509 DEQU4:
      0028C1 1C 00 06         [ 2]  510     ADDW X,#6
      0028C4 F7               [ 1]  511     LD (X),A 
      0028C5 E7 01            [ 1]  512     LD (1,X),A 
      0028C7 81               [ 4]  513     RET 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;   D> ( d1 d2 -- f )
                                    517 ;   d1>d2?
                                    518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C8                        519     _HEADER DGREAT,2,"D>"
      0028C8 28 A9                    1         .word LINK 
                           0028CA     2         LINK=.
      0028CA 02                       3         .byte 2  
      0028CB 44 3E                    4         .ascii "D>"
      0028CD                          5         DGREAT:
      0028CD CD 27 BB         [ 4]  520     CALL DSWAP 
      0028D0 CC 28 D8         [ 2]  521     JP DLESS 
                                    522 
                                    523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    524 ;   D< ( d1 d2 -- f )
                                    525 ;   d1<d2? 
                                    526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028D3                        527     _HEADER DLESS,2,"D<"
      0028D3 28 CA                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                           0028D5     2         LINK=.
      0028D5 02                       3         .byte 2  
      0028D6 44 3C                    4         .ascii "D<"
      0028D8                          5         DLESS:
      0028D8 CD 2C 16         [ 4]  528     CALL DSUB
      0028DB CD 0C 03         [ 4]  529     CALL ZERO
      0028DE CD 07 FC         [ 4]  530     CALL NROT  
      0028E1 CD 28 F3         [ 4]  531     CALL DZLESS 
      0028E4                        532     _QBRAN DLESS4
      0028E4 CD 04 98         [ 4]    1     CALL QBRAN
      0028E7 28 EC                    2     .word DLESS4
      0028E9 CD 08 75         [ 4]  533     CALL INVER  
      0028EC                        534 DLESS4:
      0028EC 81               [ 4]  535     RET
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  D0< ( d -- f )
                                    539 ;  d<0? 
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028ED                        541     _HEADER DZLESS,3,"D0<"
      0028ED 28 D5                    1         .word LINK 
                           0028EF     2         LINK=.
      0028EF 03                       3         .byte 3  
      0028F0 44 30 3C                 4         .ascii "D0<"
      0028F3                          5         DZLESS:
      0028F3 A6 00            [ 1]  542     LD A,#0 
      0028F5 90 93            [ 1]  543     LDW Y,X 
      0028F7 90 FE            [ 2]  544     LDW Y,(Y)
      0028F9 2A 02            [ 1]  545     JRPL DZLESS1 
      0028FB A6 FF            [ 1]  546     LD A,#0XFF 
      0028FD                        547 DZLESS1:
      0028FD 1C 00 02         [ 2]  548     ADDW X,#CELLL 
      002900 F7               [ 1]  549     LD (X),A 
      002901 E7 01            [ 1]  550     LD (1,X),A    
      002903 81               [ 4]  551     RET 
                                    552 
                                    553 
                                    554 
                                    555 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    556 ;   2>R ( d -- R: d )
                                    557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002904                        558     _HEADER DTOR,3,"2>R"
      002904 28 EF                    1         .word LINK 
                           002906     2         LINK=.
      002906 03                       3         .byte 3  
      002907 32 3E 52                 4         .ascii "2>R"
      00290A                          5         DTOR:
      00290A 90 85            [ 2]  559     POPW Y 
      00290C 90 BF 26         [ 2]  560     LDW YTEMP,Y 
      00290F 90 93            [ 1]  561     LDW Y,X 
      002911 90 EE 02         [ 2]  562     LDW Y,(2,Y)
      002914 90 89            [ 2]  563     PUSHW Y   ; d low 
      002916 90 93            [ 1]  564     LDW Y,X 
      002918 90 FE            [ 2]  565     LDW Y,(Y)
      00291A 90 89            [ 2]  566     PUSHW Y   ; d hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      00291C 1C 00 04         [ 2]  567     ADDW X,#4  
      00291F 92 CC 26         [ 5]  568     JP [YTEMP]
                                    569 
                                    570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    571 ;  2R> ( -- d ) R: d --      
                                    572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002922                        573     _HEADER DRFROM,3,"2R>"
      002922 29 06                    1         .word LINK 
                           002924     2         LINK=.
      002924 03                       3         .byte 3  
      002925 32 52 3E                 4         .ascii "2R>"
      002928                          5         DRFROM:
      002928 90 85            [ 2]  574     POPW Y      ; d hi 
      00292A 90 BF 26         [ 2]  575     LDW YTEMP,Y 
      00292D 1D 00 04         [ 2]  576     SUBW X,#4
      002930 90 85            [ 2]  577     POPW Y       ; d hi 
      002932 FF               [ 2]  578     LDW (X),Y 
      002933 90 85            [ 2]  579     POPW Y       ; d low  
      002935 EF 02            [ 2]  580     LDW (2,X),Y 
      002937 92 CC 26         [ 5]  581     JP [YTEMP]
                                    582     
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;   2R@ ( -- d )
                                    585 ;   fecth a double from RSTACK
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00293A                        587     _HEADER DRAT,3,"2R@"
      00293A 29 24                    1         .word LINK 
                           00293C     2         LINK=.
      00293C 03                       3         .byte 3  
      00293D 32 52 40                 4         .ascii "2R@"
      002940                          5         DRAT:
      002940 90 85            [ 2]  588     POPW Y 
      002942 90 BF 26         [ 2]  589     LDW YTEMP,Y 
      002945 1D 00 04         [ 2]  590     SUBW X,#4 
      002948 16 01            [ 2]  591     LDW Y,(1,SP)
      00294A FF               [ 2]  592     LDW (X),Y 
      00294B 16 03            [ 2]  593     LDW Y,(3,SP)
      00294D EF 02            [ 2]  594     LDW (2,X),Y 
      00294F 92 CC 26         [ 5]  595     JP [YTEMP]
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;  2VARIABLE <name> 
                                    599 ;  create a double variable 
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002952                        601     _HEADER DVARIA,9,"2VARIABLE"
      002952 29 3C                    1         .word LINK 
                           002954     2         LINK=.
      002954 09                       3         .byte 9  
      002955 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      00295E                          5         DVARIA:
      00295E CD 0C DD         [ 4]  602         CALL HERE
      002961 CD 06 19         [ 4]  603         CALL DUPP
      002964                        604         _DOLIT 4  
      002964 CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      002967 00 04                    2     .word 4 
      002969 CD 08 3C         [ 4]  605         CALL PLUS 
      00296C CD 07 70         [ 4]  606         CALL VPP 
      00296F CD 04 D1         [ 4]  607         CALL STORE
      002972 CD 19 0D         [ 4]  608         CALL CREAT
      002975 CD 06 19         [ 4]  609         CALL DUPP
      002978 CD 15 2E         [ 4]  610         CALL COMMA
      00297B CD 0C 03         [ 4]  611         CALL ZERO
      00297E CD 06 41         [ 4]  612         CALL OVER 
      002981 CD 04 D1         [ 4]  613         CALL STORE 
      002984 CD 0C 03         [ 4]  614         CALL ZERO 
      002987 CD 06 29         [ 4]  615         CALL SWAPP 
      00298A CD 04 D1         [ 4]  616         CALL STORE
      00298D CD 22 81         [ 4]  617         CALL FMOVE ; move definition to FLASH
      002990 CD 07 CC         [ 4]  618         CALL QDUP 
      002993 CD 04 98         [ 4]  619         CALL QBRAN 
      002996 19 5A                  620         .word SET_RAMLAST   
      002998 CD 1D 29         [ 4]  621         call UPDATVP  ; don't update if variable kept in RAM.
      00299B CD 23 15         [ 4]  622         CALL UPDATPTR
      00299E 81               [ 4]  623         RET         
                                    624 
                                    625 
                                    626 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    628 ;  2LITERAL ( d -- )
                                    629 ;  compile double literal 
                                    630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00299F                        631     _HEADER DLITER,IMEDD+8,"2LITERAL"
      00299F 29 54                    1         .word LINK 
                           0029A1     2         LINK=.
      0029A1 88                       3         .byte IMEDD+8  
      0029A2 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      0029AA                          5         DLITER:
      0029AA CD 15 73         [ 4]  632     CALL COMPI 
      0029AD 29 B5                  633     .word do2lit 
      0029AF CD 15 2E         [ 4]  634     CALL COMMA 
      0029B2 CC 15 2E         [ 2]  635     JP   COMMA 
                                    636 
                                    637 
                                    638 ; runtime for 2LITERAL 
      0029B5                        639 do2lit:
      0029B5 1D 00 04         [ 2]  640     SUBW X,#4 
      0029B8 16 01            [ 2]  641     LDW Y,(1,SP)
      0029BA 90 FE            [ 2]  642     LDW Y,(Y)
      0029BC FF               [ 2]  643     LDW (X),Y 
      0029BD 16 01            [ 2]  644     LDW Y,(1,SP)
      0029BF 90 EE 02         [ 2]  645     LDW Y,(2,Y)
      0029C2 EF 02            [ 2]  646     LDW (2,X),Y 
      0029C4 90 85            [ 2]  647     POPW Y 
      0029C6 90 EC 04         [ 2]  648     JP (4,Y)
                                    649 
                                    650 
                                    651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    652 ;   2OVER ( d1 d2 -- d1 d2 d1 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                    653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029C9                        654     _HEADER DOVER,5,"2OVER"
      0029C9 29 A1                    1         .word LINK 
                           0029CB     2         LINK=.
      0029CB 05                       3         .byte 5  
      0029CC 32 4F 56 45 52           4         .ascii "2OVER"
      0029D1                          5         DOVER:
      0029D1 90 93            [ 1]  655     LDW Y,X 
      0029D3 1D 00 04         [ 2]  656     SUBW X,#4 
      0029D6 90 89            [ 2]  657     PUSHW Y 
      0029D8 90 EE 04         [ 2]  658     LDW Y,(4,Y)  ; d1 hi 
      0029DB FF               [ 2]  659     LDW (X),Y 
      0029DC 90 85            [ 2]  660     POPW Y 
      0029DE 90 EE 06         [ 2]  661     LDW Y,(6,Y)  ;d1 lo 
      0029E1 EF 02            [ 2]  662     LDW (2,X),Y 
      0029E3 81               [ 4]  663     RET 
                                    664 
                                    665 
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    667 ;   D2/ ( d -- d/2 )
                                    668 ;   divide double by 2 
                                    669 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029E4                        670     _HEADER D2SLASH,3,"D2/"
      0029E4 29 CB                    1         .word LINK 
                           0029E6     2         LINK=.
      0029E6 03                       3         .byte 3  
      0029E7 44 32 2F                 4         .ascii "D2/"
      0029EA                          5         D2SLASH:
      0029EA 90 93            [ 1]  671     LDW Y,X 
      0029EC 90 FE            [ 2]  672     LDW Y,(Y)
      0029EE 90 57            [ 2]  673     SRAW Y 
      0029F0 FF               [ 2]  674     LDW (X),Y 
      0029F1 90 93            [ 1]  675     LDW Y,X 
      0029F3 90 EE 02         [ 2]  676     LDW Y,(2,Y)
      0029F6 90 56            [ 2]  677     RRCW Y 
      0029F8 EF 02            [ 2]  678     LDW (2,X),Y 
      0029FA 81               [ 4]  679     RET
                                    680 
                                    681 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    682 ;  D2* ( d -- d*2 )
                                    683 ;  multiply double by 2 
                                    684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029FB                        685     _HEADER D2STAR,3,"D2*"
      0029FB 29 E6                    1         .word LINK 
                           0029FD     2         LINK=.
      0029FD 03                       3         .byte 3  
      0029FE 44 32 2A                 4         .ascii "D2*"
      002A01                          5         D2STAR:
      002A01 90 93            [ 1]  686     LDW Y,X 
      002A03 90 EE 02         [ 2]  687     LDW Y,(2,Y)
      002A06 98               [ 1]  688     RCF 
      002A07 90 59            [ 2]  689     RLCW Y 
      002A09 EF 02            [ 2]  690     LDW (2,X),Y 
      002A0B 90 93            [ 1]  691     LDW Y,X 
      002A0D 90 FE            [ 2]  692     LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002A0F 90 59            [ 2]  693     RLCW Y 
      002A11 FF               [ 2]  694     LDW (X),Y 
      002A12 81               [ 4]  695     RET 
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;   DLSHIFT ( d n -- d )
                                    699 ;   left shift double 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A13                        701     _HEADER DLSHIFT,7,"DLSHIFT"
      002A13 29 FD                    1         .word LINK 
                           002A15     2         LINK=.
      002A15 07                       3         .byte 7  
      002A16 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      002A1D                          5         DLSHIFT:
      002A1D E6 01            [ 1]  702     LD A,(1,X) ; shift count 
      002A1F A4 1F            [ 1]  703     AND A,#31
      002A21 1C 00 02         [ 2]  704     ADDW X,#CELLL 
      002A24 90 93            [ 1]  705     LDW Y,X 
      002A26 90 FE            [ 2]  706     LDW Y,(Y)
      002A28 90 BF 26         [ 2]  707     LDW YTEMP,Y  ; d hi 
      002A2B 90 93            [ 1]  708     LDW Y,X 
      002A2D 90 EE 02         [ 2]  709     LDW Y,(2,Y)  ; d low 
      002A30                        710 DLSHIFT1:
      002A30 4D               [ 1]  711     TNZ A 
      002A31 27 12            [ 1]  712     JREQ DLSHIFT2 
      002A33 98               [ 1]  713     RCF 
      002A34 90 59            [ 2]  714     RLCW Y 
      002A36 90 89            [ 2]  715     PUSHW Y 
      002A38 90 BE 26         [ 2]  716     LDW Y,YTEMP 
      002A3B 90 59            [ 2]  717     RLCW Y 
      002A3D 90 BF 26         [ 2]  718     LDW YTEMP,Y 
      002A40 90 85            [ 2]  719     POPW Y 
      002A42 4A               [ 1]  720     DEC A 
      002A43 20 EB            [ 2]  721     JRA DLSHIFT1 
      002A45                        722 DLSHIFT2:
      002A45 EF 02            [ 2]  723     LDW (2,X),Y 
      002A47 90 BE 26         [ 2]  724     LDW Y,YTEMP 
      002A4A FF               [ 2]  725     LDW (X),Y 
      002A4B 81               [ 4]  726     RET 
                                    727 
                                    728 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    729 ;  DRSHIFT ( d n -- d )
                                    730 ;  shift right n bits 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A4C                        732     _HEADER DRSHIFT,7,"DRSHIFT"
      002A4C 2A 15                    1         .word LINK 
                           002A4E     2         LINK=.
      002A4E 07                       3         .byte 7  
      002A4F 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      002A56                          5         DRSHIFT:
      002A56 E6 01            [ 1]  733     LD A,(1,X)
      002A58 A4 1F            [ 1]  734     AND A,#31
      002A5A 1C 00 02         [ 2]  735     ADDW X,#2 
      002A5D                        736 DRSHIFT1:
      002A5D 4D               [ 1]  737     TNZ A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002A5E 27 13            [ 1]  738     JREQ DRSHIFT2 
      002A60 90 93            [ 1]  739     LDW Y,X 
      002A62 90 FE            [ 2]  740     LDW Y,(Y)
      002A64 90 54            [ 2]  741     SRLW Y 
      002A66 FF               [ 2]  742     LDW (X),Y 
      002A67 90 93            [ 1]  743     LDW Y,X 
      002A69 90 EE 02         [ 2]  744     LDW Y,(2,Y)
      002A6C 90 56            [ 2]  745     RRCW Y 
      002A6E EF 02            [ 2]  746     LDW (2,X),Y 
      002A70 4A               [ 1]  747     DEC A
      002A71 20 EA            [ 2]  748     JRA DRSHIFT1  
      002A73                        749 DRSHIFT2:
      002A73 81               [ 4]  750     RET 
                                    751 
                                    752 
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    754 ;   D* ( d1 d2 -- d3 )
                                    755 ;   double product 
                                    756 ;   d3 = d1 * d2
                                    757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A74                        758     _HEADER DSTAR,2,"D*"
      002A74 2A 4E                    1         .word LINK 
                           002A76     2         LINK=.
      002A76 02                       3         .byte 2  
      002A77 44 2A                    4         .ascii "D*"
      002A79                          5         DSTAR:
      002A79 CD 06 19         [ 4]  759     CALL DUPP 
      002A7C CD 06 50         [ 4]  760     CALL ZLESS  
      002A7F CD 05 E2         [ 4]  761     CALL TOR    ; R: d2sign 
      002A82 CD 26 9F         [ 4]  762     CALL DABS   
      002A85 CD 05 34         [ 4]  763     CALL RFROM 
      002A88 CD 07 FC         [ 4]  764     CALL NROT  ; d1 d2s ud2
      002A8B CD 29 0A         [ 4]  765     CALL DTOR  ; d1 d2s R: ud2  
      002A8E CD 05 E2         [ 4]  766     CALL TOR   ; d1 R: ud2 d2s   
      002A91 CD 06 19         [ 4]  767     CALL DUPP 
      002A94 CD 06 50         [ 4]  768     CALL ZLESS 
      002A97 CD 05 34         [ 4]  769     CALL RFROM 
      002A9A CD 06 9F         [ 4]  770     CALL XORR   
      002A9D CD 05 E2         [ 4]  771     CALL TOR   ; d1 R: ud2 prod_sign  
      002AA0 CD 26 9F         [ 4]  772     CALL DABS ; ud1 R: ud2 ps  
      002AA3 CD 05 34         [ 4]  773     CALL RFROM  
      002AA6 CD 07 FC         [ 4]  774     CALL NROT   ; ps ud1 
      002AA9 CD 08 27         [ 4]  775     CALL DDUP   ; ps ud1 ud1  
      002AAC CD 05 34         [ 4]  776     CALL RFROM  ; ps ud1 ud1 ud2hi 
      002AAF CD 27 95         [ 4]  777     CALL DSSTAR ; ps ud1 dprodhi 
                                    778 ; shift partial product 16 bits left 
      002AB2                        779     _DROP   ; drop overflow 
      002AB2 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002AB5 CD 0C 03         [ 4]  780     CALL ZERO   ; ps ud1 prodhi 
      002AB8 CD 06 29         [ 4]  781     CALL SWAPP  
      002ABB CD 27 BB         [ 4]  782     CALL DSWAP  ; ps dprodhi ud1 
      002ABE CD 05 34         [ 4]  783     CALL RFROM  ; ps dprodhi ud1 ud2lo
      002AC1 CD 27 95         [ 4]  784     CALL DSSTAR ; ps  dprodhi dprodlo 
      002AC4 CD 2B E4         [ 4]  785     CALL DPLUS
      002AC7 CD 07 DD         [ 4]  786     CALL ROT    ; dprod ps 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002ACA                        787     _QBRAN DDSTAR3 
      002ACA CD 04 98         [ 4]    1     CALL QBRAN
      002ACD 2A D2                    2     .word DDSTAR3
      002ACF CD 08 98         [ 4]  788     CALL DNEGA 
      002AD2                        789 DDSTAR3:  
      002AD2 81               [ 4]  790     RET 
                                    791 
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    793 ;  UD/MOD ( ud1 ud2 -- dr udq )
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002AD3                        795     _HEADER UDSLMOD,6,"UD/MOD"
      002AD3 2A 76                    1         .word LINK 
                           002AD5     2         LINK=.
      002AD5 06                       3         .byte 6  
      002AD6 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002ADC                          5         UDSLMOD:
                                    796 ; unsigned double division 
      002ADC CD 0C 03         [ 4]  797     CALL ZERO 
      002ADF CD 0C 03         [ 4]  798     CALL ZERO
      002AE2 CD 29 0A         [ 4]  799     CALL DTOR ; quotient  R: qlo qhi 
      002AE5 CD 29 D1         [ 4]  800     CALL DOVER 
      002AE8 CD 27 E9         [ 4]  801     CALL DCLZ ; n2, dividend leading zeros  
      002AEB CD 05 E2         [ 4]  802     CALL TOR 
      002AEE CD 08 27         [ 4]  803     CALL DDUP    
      002AF1 CD 27 E9         [ 4]  804     CALL DCLZ  ; n1, divisor leading zeros
      002AF4 CD 05 34         [ 4]  805     CALL RFROM ; n1 n2 
      002AF7 CD 08 D2         [ 4]  806     CALL SUBB  ; loop count 
      002AFA CD 06 19         [ 4]  807     CALL DUPP
      002AFD CD 29 0A         [ 4]  808     CALL DTOR  ; ud1 ud2 R: qlo qhi cntr cntr 
      002B00 CD 05 45         [ 4]  809     CALL RAT    
      002B03 CD 06 50         [ 4]  810     CALL ZLESS 
      002B06                        811     _TBRAN UDSLA7 ; quotient is null 
      002B06 CD 04 A6         [ 4]    1     CALL TBRAN 
      002B09 2B 68                    2     .word UDSLA7 
      002B0B CD 05 45         [ 4]  812     CALL RAT 
      002B0E CD 2A 1D         [ 4]  813     CALL DLSHIFT ; align divisor with dividend 
      002B11                        814 UDSLA3: ; division loop -- dividend divisor  
      002B11 90 5F            [ 1]  815     CLRW Y 
      002B13 90 89            [ 2]  816     PUSHW Y  
      002B15 CD 29 D1         [ 4]  817     CALL DOVER 
      002B18 CD 29 D1         [ 4]  818     CALL DOVER 
      002B1B CD 28 D8         [ 4]  819     CALL DLESS 
      002B1E                        820     _TBRAN UDSLA4 
      002B1E CD 04 A6         [ 4]    1     CALL TBRAN 
      002B21 2B 37                    2     .word UDSLA4 
      002B23 90 85            [ 2]  821     POPW Y 
      002B25 72 A9 00 01      [ 2]  822     ADDW Y,#1 
      002B29 90 89            [ 2]  823     PUSHW Y    ; quotiend least bit 
      002B2B CD 08 27         [ 4]  824     CALL DDUP  ; dividend divisor divisor 
      002B2E CD 29 0A         [ 4]  825     CALL DTOR  
      002B31 CD 2C 16         [ 4]  826     CALL DSUB  ; dividend-divisor 
      002B34 CD 29 28         [ 4]  827     CALL DRFROM  ; dividend- divisor  
      002B37                        828 UDSLA4: ; shift quotient and add 1 bit 
      002B37 90 85            [ 2]  829     POPW Y 
      002B39 90 BF 26         [ 2]  830     LDW YTEMP,Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      002B3C 16 07            [ 2]  831     LDW Y,(7,SP) ; quotient low 
      002B3E 98               [ 1]  832     RCF 
      002B3F 90 59            [ 2]  833     RLCW Y
      002B41 17 07            [ 2]  834     LDW (7,SP),Y 
      002B43 16 05            [ 2]  835     LDW Y,(5,SP) ; quotient hi 
      002B45 90 59            [ 2]  836     RLCW Y 
      002B47 17 05            [ 2]  837     LDW (5,SP),Y 
      002B49 16 07            [ 2]  838     LDW Y,(7,SP) 
      002B4B 72 B9 00 26      [ 2]  839     ADDW Y,YTEMP
      002B4F 17 07            [ 2]  840     LDW (7,SP),Y 
      002B51 16 01            [ 2]  841     LDW Y,(1,SP) ; loop counter 
      002B53 90 5D            [ 2]  842     TNZW Y 
      002B55 27 1C            [ 1]  843     JREQ UDSLA8
      002B57 72 A2 00 01      [ 2]  844     SUBW Y,#1  
      002B5B 17 01            [ 2]  845     LDW (1,SP),Y  
                                    846 ; shift dividend left 1 bit      
      002B5D CD 27 BB         [ 4]  847     CALL DSWAP 
      002B60 CD 2A 01         [ 4]  848     CALL D2STAR 
      002B63 CD 27 BB         [ 4]  849     CALL DSWAP 
      002B66 20 A9            [ 2]  850     JRA UDSLA3 
      002B68                        851 UDSLA7:
      002B68 CD 0C 03         [ 4]  852     CALL ZERO 
      002B6B                        853     _DOLIT 1 
      002B6B CD 04 6F         [ 4]    1     CALL DOLIT 
      002B6E 00 01                    2     .word 1 
      002B70 CD 05 BE         [ 4]  854     CALL NRSTO ; R: 0 0 0 cntr    
      002B73                        855 UDSLA8:
      002B73 1C 00 04         [ 2]  856     ADDW X,#4 ; drop divisor
      002B76 CD 05 34         [ 4]  857     CALL RFROM  
      002B79                        858     _DROP ; drop cntr 
      002B79 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002B7C CD 05 34         [ 4]  859     CALL RFROM   ; shift count
      002B7F CD 2A 56         [ 4]  860     CALL DRSHIFT 
                                    861     ; quotient replace dividend 
      002B82 CD 29 28         [ 4]  862     CALL DRFROM  ; quotient 
      002B85 81               [ 4]  863     RET 
                                    864 
                                    865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    866 ;   D/MOD  ( d1 d2 -- dr dq )
                                    867 ;   double division dq=d1/d2
                                    868 ;   dr remainder double 
                                    869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B86                        870     _HEADER DDSLMOD,5,"D/MOD"  
      002B86 2A D5                    1         .word LINK 
                           002B88     2         LINK=.
      002B88 05                       3         .byte 5  
      002B89 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B8E                          5         DDSLMOD:
      002B8E F6               [ 1]  871     LD A,(X) ; disisor sign 
      002B8F 88               [ 1]  872     PUSH A 
      002B90 E6 04            [ 1]  873     LD A,(4,X) ; dividend sign 
      002B92 88               [ 1]  874     PUSH A   ; R: sdivsor sdivnd 
      002B93 CD 26 9F         [ 4]  875     CALL DABS 
      002B96 CD 29 0A         [ 4]  876     CALL DTOR ; R: sign abs(divisor)
      002B99 CD 26 9F         [ 4]  877     CALL DABS  ; ud1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002B9C CD 29 40         [ 4]  878     CALL DRAT  ; ud1 ud2 R: sign abs(divisor) 
      002B9F CD 2A DC         [ 4]  879     CALL UDSLMOD ; ud1/ud2 -- dr dq  
      002BA2 7B 05            [ 1]  880     LD A,(5,SP) ; sdivnd 
      002BA4 18 06            [ 1]  881     XOR A,(6,SP) ; 
      002BA6 2A 18            [ 1]  882     JRPL DSLA8 
      002BA8 CD 0C 0E         [ 4]  883     CALL ONE 
      002BAB CD 0C 03         [ 4]  884     CALL ZERO 
      002BAE CD 2B E4         [ 4]  885     CALL DPLUS 
      002BB1 CD 08 98         [ 4]  886     CALL DNEGA ; negate quotient  
      002BB4 CD 29 40         [ 4]  887     CALL DRAT 
      002BB7 CD 28 55         [ 4]  888     CALL DROT 
      002BBA CD 2C 16         [ 4]  889     CALL DSUB  ; corrected_remainder=divisor-remainder 
      002BBD CD 27 BB         [ 4]  890     CALL DSWAP
      002BC0                        891 DSLA8:      
                                    892 ; check for divisor sign 
                                    893 ; if negative change negate remainder 
      002BC0 7B 06            [ 1]  894     LD A,(6,SP) ; divisor sign 
      002BC2 2A 09            [ 1]  895     JRPL DSLA9 
      002BC4 CD 29 0A         [ 4]  896     CALL DTOR 
      002BC7 CD 08 98         [ 4]  897     CALL DNEGA 
      002BCA CD 29 28         [ 4]  898     CALL DRFROM 
      002BCD                        899 DSLA9:
      002BCD 5B 06            [ 2]  900     ADDW SP,#6 
      002BCF 81               [ 4]  901     RET 
                                    902 
                                    903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    904 ;   D/  ( d1 d2 -- dq )
                                    905 ;   division double by double 
                                    906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BD0                        907     _HEADER DSLASH,2,"D/"
      002BD0 2B 88                    1         .word LINK 
                           002BD2     2         LINK=.
      002BD2 02                       3         .byte 2  
      002BD3 44 2F                    4         .ascii "D/"
      002BD5                          5         DSLASH:
      002BD5 CD 2B 8E         [ 4]  908     CALL DDSLMOD
      002BD8 CD 27 BB         [ 4]  909     CALL DSWAP
      002BDB                        910     _DDROP 
      002BDB 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002BDE 81               [ 4]  911     RET 
                                    912 
                                    913 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    914 ;   D+ ( d1 d2 -- d3 )
                                    915 ;   add 2 doubles 
                                    916 ;   d3=d1+d2 
                                    917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BDF                        918     _HEADER DPLUS,2,"D+"
      002BDF 2B D2                    1         .word LINK 
                           002BE1     2         LINK=.
      002BE1 02                       3         .byte 2  
      002BE2 44 2B                    4         .ascii "D+"
      002BE4                          5         DPLUS:
      002BE4 90 93            [ 1]  919     LDW Y,X 
      002BE6 90 FE            [ 2]  920     LDW Y,(Y)
      002BE8 90 BF 26         [ 2]  921     LDW YTEMP,Y ; d2 hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002BEB 90 93            [ 1]  922     LDW Y,X 
      002BED 90 EE 02         [ 2]  923     LDW Y,(2,Y)
      002BF0 90 BF 24         [ 2]  924     LDW XTEMP,Y ; d2 lo 
      002BF3 1C 00 04         [ 2]  925     ADDW X,#4 
      002BF6 90 93            [ 1]  926     LDW Y,X 
      002BF8 90 EE 02         [ 2]  927     LDW Y,(2,Y) ; d1 lo
      002BFB 72 B9 00 24      [ 2]  928     ADDW Y,XTEMP
      002BFF EF 02            [ 2]  929     LDW (2,X),Y 
      002C01 90 93            [ 1]  930     LDW Y,X 
      002C03 90 FE            [ 2]  931     LDW Y,(Y) ; d1 hi 
      002C05 24 04            [ 1]  932     JRNC DPLUS1 
      002C07 72 A9 00 01      [ 2]  933     ADDW Y,#1 
      002C0B                        934 DPLUS1: 
      002C0B 72 B9 00 26      [ 2]  935     ADDW Y,YTEMP 
      002C0F FF               [ 2]  936     LDW (X),Y 
      002C10 81               [ 4]  937     RET 
                                    938 
                                    939 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    940 ;   D- ( d1 d2 -- d3 )
                                    941 ;   d3=d1-d2 
                                    942 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C11                        943     _HEADER DSUB,2,"D-"
      002C11 2B E1                    1         .word LINK 
                           002C13     2         LINK=.
      002C13 02                       3         .byte 2  
      002C14 44 2D                    4         .ascii "D-"
      002C16                          5         DSUB:
      002C16 90 93            [ 1]  944     LDW Y,X 
      002C18 90 FE            [ 2]  945     LDW Y,(Y)
      002C1A 90 BF 26         [ 2]  946     LDW YTEMP,Y ; d2 hi 
      002C1D 90 93            [ 1]  947     LDW Y,X 
      002C1F 90 EE 02         [ 2]  948     LDW Y,(2,Y)
      002C22 90 BF 24         [ 2]  949     LDW XTEMP,Y ; d2 lo 
      002C25 1C 00 04         [ 2]  950     ADDW X,#4 
      002C28 90 93            [ 1]  951     LDW Y,X 
      002C2A 90 EE 02         [ 2]  952     LDW Y,(2,Y) ; d1 lo
      002C2D 72 B2 00 24      [ 2]  953     SUBW Y,XTEMP
      002C31 EF 02            [ 2]  954     LDW (2,X),Y 
      002C33 90 93            [ 1]  955     LDW Y,X 
      002C35 90 FE            [ 2]  956     LDW Y,(Y) ; d1 hi 
      002C37 24 04            [ 1]  957     JRNC DSUB1 
      002C39 72 A2 00 01      [ 2]  958     SUBW Y,#1 
      002C3D                        959 DSUB1: 
      002C3D 72 B2 00 26      [ 2]  960     SUBW Y,YTEMP 
      002C41 FF               [ 2]  961     LDW (X),Y 
      002C42 81               [ 4]  962     RET 
                                    963 
                                    964 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   4648 .endif 
                           000001  4649 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   4650         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent
                                     36 ;***********************************************  
                                     37 
                                     38     .module FLOAT 
                                     39 
                           000001    40 .if WANT_DOUBLE 
                                     41 ; already included 
                           000000    42 .else
                                     43 ;  must be included  
                                     44     .include "double.asm"
                                     45 .endif  
                                     46 
                           7FFFFF    47     MAX_MANTISSA = 0x7FFFFF 
                                     48 
                           000001    49     FLOAT_MAJOR=1 
                           000000    50     FLOAT_MINOR=0 
                                     51 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 ;   FLOAT-VER ( -- )
                                     54 ;   print library version 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C43                         56     _HEADER FVER,9,"FLOAT-VER"
      002C43 2C 13                    1         .word LINK 
                           002C45     2         LINK=.
      002C45 09                       3         .byte 9  
      002C46 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002C4F                          5         FVER:
      002C4F CD 0F 89         [ 4]   57     CALL CR 
      002C52 CD 0F B6         [ 4]   58     CALL DOTQP 
      002C55 11                      59     .byte  17 
      002C56 66 6C 6F 61 74 33 32    60     .ascii "float32 library, "
             20 6C 69 62 72 61 72
             79 2C 20
      002C67 CD 1B 55         [ 4]   61     CALL PRT_LICENCE 
      002C6A CD 1B 2D         [ 4]   62     CALL COPYRIGHT 
      002C6D                         63     _DOLIT FLOAT_MAJOR     
      002C6D CD 04 6F         [ 4]    1     CALL DOLIT 
      002C70 00 01                    2     .word FLOAT_MAJOR 
      002C72                         64     _DOLIT FLOAT_MINOR 
      002C72 CD 04 6F         [ 4]    1     CALL DOLIT 
      002C75 00 00                    2     .word FLOAT_MINOR 
      002C77 CC 1B 69         [ 2]   65     JP PRINT_VERSION 
                                     66 
                                     67 
                                     68 ;-------------------------
                                     69 ;    FPSW ( -- a )
                                     70 ;    floating state variable
                                     71 ;    bit 0 zero flag 
                                     72 ;    bit 1 negative flag 
                                     73 ;    bit 2 overflow/error flag 
                                     74 ;---------------------------
      002C7A                         75     _HEADER FPSW,4,"FPSW"
      002C7A 2C 45                    1         .word LINK 
                           002C7C     2         LINK=.
      002C7C 04                       3         .byte 4  
      002C7D 46 50 53 57              4         .ascii "FPSW"
      002C81                          5         FPSW:
      002C81 90 AE 00 08      [ 2]   76 	LDW Y,#UFPSW  
      002C85 1D 00 02         [ 2]   77 	SUBW X,#2
      002C88 FF               [ 2]   78     LDW (X),Y
      002C89 81               [ 4]   79     RET
                                     80 
                                     81 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     82 ;   FRESET ( -- )
                                     83 ;   reset FPSW variable 
                                     84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      002C8A                         85     _HEADER FRESET,6,"FRESET"
      002C8A 2C 7C                    1         .word LINK 
                           002C8C     2         LINK=.
      002C8C 06                       3         .byte 6  
      002C8D 46 52 45 53 45 54        4         .ascii "FRESET"
      002C93                          5         FRESET:
      002C93 CD 0C 03         [ 4]   86     CALL ZERO  
      002C96 CD 2C 81         [ 4]   87     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002C99 CD 04 D1         [ 4]   88     CALL STORE 
      002C9C 81               [ 4]   89     RET 
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ;   FINIT ( -- )
                                     93 ;   initialize floating point 
                                     94 ;   library 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C9D                         96     _HEADER FINIT,5,"FINIT"
      002C9D 2C 8C                    1         .word LINK 
                           002C9F     2         LINK=.
      002C9F 05                       3         .byte 5  
      002CA0 46 49 4E 49 54           4         .ascii "FINIT"
      002CA5                          5         FINIT:
      002CA5 CD 2C 93         [ 4]   97     CALL FRESET 
      002CA8 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CA9                        104     _HEADER FER,3,"FER"
      002CA9 2C 9F                    1         .word LINK 
                           002CAB     2         LINK=.
      002CAB 03                       3         .byte 3  
      002CAC 46 45 52                 4         .ascii "FER"
      002CAF                          5         FER:
      002CAF CD 2C 81         [ 4]  105     CALL FPSW 
      002CB2 CD 04 E3         [ 4]  106     CALL AT 
      002CB5 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- 0|-1 )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CB6                        113     _HEADER FZE,3,"FZE"
      002CB6 2C AB                    1         .word LINK 
                           002CB8     2         LINK=.
      002CB8 03                       3         .byte 3  
      002CB9 46 5A 45                 4         .ascii "FZE"
      002CBC                          5         FZE:
      002CBC CD 2C 81         [ 4]  114     CALL FPSW
      002CBF CD 04 E3         [ 4]  115     CALL AT  
      002CC2 CD 0C 0E         [ 4]  116     CALL ONE 
      002CC5 CD 06 76         [ 4]  117     CALL ANDD
      002CC8 CD 08 86         [ 4]  118     CALL NEGAT  
      002CCB 81               [ 4]  119     RET 
                                    120 
                                    121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    122 ;    FNE ( -- 0|-1 )
                                    123 ;    return FPSW negative flag 
                                    124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CCC                        125     _HEADER FNE,3,"FNE"
      002CCC 2C B8                    1         .word LINK 
                           002CCE     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002CCE 03                       3         .byte 3  
      002CCF 46 4E 45                 4         .ascii "FNE"
      002CD2                          5         FNE:
      002CD2 CD 2C 81         [ 4]  126     CALL FPSW 
      002CD5 CD 04 E3         [ 4]  127     CALL AT 
      002CD8                        128     _DOLIT 2 
      002CD8 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CDB 00 02                    2     .word 2 
      002CDD CD 06 76         [ 4]  129     CALL ANDD
      002CE0 CD 0B E9         [ 4]  130     CALL TWOSL
      002CE3 CD 08 86         [ 4]  131     CALL NEGAT   
      002CE6 81               [ 4]  132     RET 
                                    133 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    135 ;   FOV (  -- 0|-1 )
                                    136 ;   return FPSW overflow flag 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002CE7                        138     _HEADER FOV,3,"FOV"
      002CE7 2C CE                    1         .word LINK 
                           002CE9     2         LINK=.
      002CE9 03                       3         .byte 3  
      002CEA 46 4F 56                 4         .ascii "FOV"
      002CED                          5         FOV:
      002CED CD 2C 81         [ 4]  139     CALL FPSW
      002CF0 CD 04 E3         [ 4]  140     CALL AT  
      002CF3                        141     _DOLIT 4 
      002CF3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002CF6 00 04                    2     .word 4 
      002CF8 CD 06 76         [ 4]  142     CALL ANDD
      002CFB                        143     _DOLIT 2 
      002CFB CD 04 6F         [ 4]    1     CALL DOLIT 
      002CFE 00 02                    2     .word 2 
      002D00 CD 0B D1         [ 4]  144     CALL RSHIFT 
      002D03 CD 08 86         [ 4]  145     CALL NEGAT  
      002D06 81               [ 4]  146     RET 
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ;    SFZ ( f# -- f# )
                                    150 ;    set FPSW zero flag 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D07                        152     _HEADER SFZ,3,"SFZ"
      002D07 2C E9                    1         .word LINK 
                           002D09     2         LINK=.
      002D09 03                       3         .byte 3  
      002D0A 53 46 5A                 4         .ascii "SFZ"
      002D0D                          5         SFZ:
      002D0D CD 2C AF         [ 4]  153     CALL FER 
      002D10                        154     _DOLIT 0xfffe 
      002D10 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D13 FF FE                    2     .word 0xfffe 
      002D15 CD 06 76         [ 4]  155     CALL ANDD 
      002D18 CD 05 E2         [ 4]  156     CALL TOR    
      002D1B CD 08 27         [ 4]  157     CALL DDUP 
      002D1E                        158     _DOLIT 0xFF  
      002D1E CD 04 6F         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D21 00 FF                    2     .word 0xFF 
      002D23 CD 06 76         [ 4]  159     CALL ANDD
      002D26 CD 28 90         [ 4]  160     CALL DZEQUAL 
      002D29                        161     _DOLIT 1 
      002D29 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D2C 00 01                    2     .word 1 
      002D2E CD 06 76         [ 4]  162     CALL ANDD 
      002D31 CD 05 34         [ 4]  163     CALL RFROM 
      002D34 CD 06 8A         [ 4]  164     CALL ORR 
      002D37 CD 2C 81         [ 4]  165     CALL FPSW 
      002D3A CD 04 D1         [ 4]  166     CALL STORE 
      002D3D 81               [ 4]  167     RET 
                                    168 
                                    169 
                                    170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    171 ;   SFN ( f# -- f# )
                                    172 ;   set FPSW negative flag 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D3E                        174     _HEADER SFN,3,"SFN"
      002D3E 2D 09                    1         .word LINK 
                           002D40     2         LINK=.
      002D40 03                       3         .byte 3  
      002D41 53 46 4E                 4         .ascii "SFN"
      002D44                          5         SFN:
      002D44 CD 2C AF         [ 4]  175     CALL FER 
      002D47                        176     _DOLIT 0xFFFD 
      002D47 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D4A FF FD                    2     .word 0xFFFD 
      002D4C CD 06 76         [ 4]  177     CALL ANDD  
      002D4F CD 05 E2         [ 4]  178     CALL TOR 
      002D52 CD 06 19         [ 4]  179     CALL DUPP 
      002D55                        180     _DOLIT 0X80 
      002D55 CD 04 6F         [ 4]    1     CALL DOLIT 
      002D58 00 80                    2     .word 0X80 
      002D5A CD 06 76         [ 4]  181     CALL ANDD 
      002D5D                        182     _DOLIT 6 
      002D5D CD 04 6F         [ 4]    1     CALL DOLIT 
      002D60 00 06                    2     .word 6 
      002D62 CD 0B D1         [ 4]  183     CALL RSHIFT 
      002D65 CD 05 34         [ 4]  184     CALL RFROM 
      002D68 CD 06 8A         [ 4]  185     CALL ORR 
      002D6B CD 2C 81         [ 4]  186     CALL FPSW 
      002D6E CD 04 D1         [ 4]  187     CALL STORE 
      002D71 81               [ 4]  188     RET 
                                    189 
                                    190 
                                    191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    192 ;   SFV ( -- )
                                    193 ;   set overflow flag 
                                    194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D72                        195     _HEADER SFV,3,"SFV"
      002D72 2D 40                    1         .word LINK 
                           002D74     2         LINK=.
      002D74 03                       3         .byte 3  
      002D75 53 46 56                 4         .ascii "SFV"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002D78                          5         SFV:
      002D78 CD 2C AF         [ 4]  196     CALL FER 
      002D7B                        197     _DOLIT 4 
      002D7B CD 04 6F         [ 4]    1     CALL DOLIT 
      002D7E 00 04                    2     .word 4 
      002D80 CD 06 8A         [ 4]  198     CALL ORR 
      002D83 CD 2C 81         [ 4]  199     CALL FPSW 
      002D86 CD 04 D1         [ 4]  200     CALL STORE 
      002D89 81               [ 4]  201     RET 
                                    202 
                                    203 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    204 ;  F>ME ( f# -- m e )
                                    205 ;  split float in mantissa/exponent 
                                    206 ;  m mantissa as a double 
                                    207 ;  e exponent as a single 
                                    208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D8A                        209     _HEADER ATEXP,4,"F>ME"             
      002D8A 2D 74                    1         .word LINK 
                           002D8C     2         LINK=.
      002D8C 04                       3         .byte 4  
      002D8D 46 3E 4D 45              4         .ascii "F>ME"
      002D91                          5         ATEXP:
      002D91 CD 2C 93         [ 4]  210     CALL FRESET
      002D94 CD 2D 44         [ 4]  211     CALL SFN
      002D97 CD 2D 0D         [ 4]  212     CALL SFZ 
      002D9A 90 93            [ 1]  213     LDW Y,X 
      002D9C 90 FE            [ 2]  214     LDW Y,(Y)
      002D9E 90 89            [ 2]  215     PUSHW Y 
      002DA0 4F               [ 1]  216     CLR A  
      002DA1 90 5E            [ 1]  217     SWAPW Y 
      002DA3 2A 01            [ 1]  218     JRPL ATEXP1 
      002DA5 43               [ 1]  219     CPL A 
      002DA6                        220 ATEXP1: ; sign extend mantissa 
      002DA6 90 5E            [ 1]  221     SWAPW Y 
      002DA8 90 95            [ 1]  222     LD YH,A 
      002DAA FF               [ 2]  223     LDW (X),Y 
      002DAB 1D 00 02         [ 2]  224     SUBW X,#CELLL 
      002DAE 90 85            [ 2]  225     POPW Y 
      002DB0 4F               [ 1]  226     CLR A 
      002DB1 90 5D            [ 2]  227     TNZW Y 
      002DB3 2A 01            [ 1]  228     JRPL ATEXP2 
      002DB5 43               [ 1]  229     CPL A 
      002DB6                        230 ATEXP2:
      002DB6 90 5E            [ 1]  231     SWAPW Y 
      002DB8 90 95            [ 1]  232     LD YH,A 
      002DBA FF               [ 2]  233     LDW (X),Y 
      002DBB 81               [ 4]  234     RET 
                                    235 
                                    236 
                                    237 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    238 ;    ME>F ( m e -- f# )
                                    239 ;    built float from mantissa/exponent 
                                    240 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002DBC                        241     _HEADER STEXP,4,"ME>F"
      002DBC 2D 8C                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                           002DBE     2         LINK=.
      002DBE 04                       3         .byte 4  
      002DBF 4D 45 3E 46              4         .ascii "ME>F"
      002DC3                          5         STEXP:
      002DC3 CD 06 19         [ 4]  242     CALL DUPP 
      002DC6 CD 08 EC         [ 4]  243     CALL ABSS 
      002DC9                        244     _DOLIT 127 
      002DC9 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DCC 00 7F                    2     .word 127 
      002DCE CD 09 53         [ 4]  245     CALL GREAT
      002DD1                        246     _QBRAN STEXP1
      002DD1 CD 04 98         [ 4]    1     CALL QBRAN
      002DD4 2D D9                    2     .word STEXP1
      002DD6 CD 2D 78         [ 4]  247     CALL SFV
      002DD9                        248 STEXP1:
      002DD9 90 93            [ 1]  249     LDW Y,X 
      002DDB 90 FE            [ 2]  250     LDW Y,(Y)
      002DDD 4F               [ 1]  251     CLR A 
      002DDE 90 95            [ 1]  252     LD YH,A
      002DE0 90 5E            [ 1]  253     SWAPW Y 
      002DE2 90 89            [ 2]  254     PUSHW Y  ; e >r 
      002DE4 1C 00 02         [ 2]  255     ADDW X,#CELLL 
      002DE7 CD 08 27         [ 4]  256     CALL DDUP 
      002DEA CD 26 9F         [ 4]  257     CALL DABS
      002DED CD 06 29         [ 4]  258     CALL SWAPP 
      002DF0                        259     _DROP  
      002DF0 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002DF3                        260     _DOLIT 127 
      002DF3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002DF6 00 7F                    2     .word 127 
      002DF8 CD 09 53         [ 4]  261     CALL GREAT 
      002DFB                        262     _QBRAN STEXP2 
      002DFB CD 04 98         [ 4]    1     CALL QBRAN
      002DFE 2E 03                    2     .word STEXP2
      002E00 CD 2D 78         [ 4]  263     CALL SFV 
      002E03                        264 STEXP2: 
      002E03 4F               [ 1]  265     CLR A 
      002E04 F7               [ 1]  266     LD (X),A     
      002E05 CD 05 34         [ 4]  267     CALL RFROM 
      002E08 CD 06 8A         [ 4]  268     CALL ORR
      002E0B CD 2D 0D         [ 4]  269     CALL SFZ 
      002E0E CD 2D 44         [ 4]  270     CALL SFN 
      002E11 81               [ 4]  271     RET 
                                    272 
                                    273 
                                    274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    275 ;   E. ( f# -- )
                                    276 ;   print float in scientific 
                                    277 ;   format 
                                    278 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E12                        279     _HEADER EDOT,2,"E."
      002E12 2D BE                    1         .word LINK 
                           002E14     2         LINK=.
      002E14 02                       3         .byte 2  
      002E15 45 2E                    4         .ascii "E."
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002E17                          5         EDOT:
      002E17 CD 06 DF         [ 4]  280     CALL BASE 
      002E1A CD 04 E3         [ 4]  281     CALL AT 
      002E1D CD 05 E2         [ 4]  282     CALL TOR 
      002E20                        283     _DOLIT 10 
      002E20 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E23 00 0A                    2     .word 10 
      002E25 CD 06 DF         [ 4]  284     CALL BASE 
      002E28 CD 04 D1         [ 4]  285     CALL STORE 
      002E2B CD 2D 91         [ 4]  286     CALL ATEXP ; m e 
      002E2E                        287 EDOT0:
      002E2E CD 05 E2         [ 4]  288     CALL TOR   
      002E31 CD 26 9F         [ 4]  289     CALL DABS 
      002E34 CD 0F 47         [ 4]  290     CALL SPACE 
      002E37 CD 0E 0B         [ 4]  291     CALL BDIGS     
      002E3A                        292 EDOT2: 
      002E3A CD 27 0B         [ 4]  293     CALL DDIG
      002E3D CD 05 34         [ 4]  294     CALL RFROM 
      002E40 CD 0B 97         [ 4]  295     CALL ONEP 
      002E43 CD 05 E2         [ 4]  296     CALL TOR 
      002E46 CD 06 19         [ 4]  297     CALL DUPP
      002E49                        298     _QBRAN EDOT3 
      002E49 CD 04 98         [ 4]    1     CALL QBRAN
      002E4C 2E 50                    2     .word EDOT3
      002E4E 20 EA            [ 2]  299     JRA EDOT2  
      002E50                        300 EDOT3:
      002E50 CD 06 41         [ 4]  301     CALL OVER 
      002E53 CD 06 DF         [ 4]  302     CALL BASE 
      002E56 CD 04 E3         [ 4]  303     CALL AT 
      002E59 CD 09 10         [ 4]  304     CALL ULESS 
      002E5C                        305     _QBRAN EDOT2 
      002E5C CD 04 98         [ 4]    1     CALL QBRAN
      002E5F 2E 3A                    2     .word EDOT2
      002E61                        306     _DOLIT '.'
      002E61 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E64 00 2E                    2     .word '.' 
      002E66 CD 0E 1B         [ 4]  307     CALL HOLD  
      002E69 CD 27 0B         [ 4]  308     CALL DDIG
      002E6C CD 2C D2         [ 4]  309     CALL FNE 
      002E6F                        310     _QBRAN EDOT4 
      002E6F CD 04 98         [ 4]    1     CALL QBRAN
      002E72 2E 7C                    2     .word EDOT4
      002E74                        311     _DOLIT '-'
      002E74 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E77 00 2D                    2     .word '-' 
      002E79 CD 0E 1B         [ 4]  312     CALL HOLD 
      002E7C                        313 EDOT4:       
      002E7C                        314     _DROP 
      002E7C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002E7F CD 0E 70         [ 4]  315     CALL EDIGS 
      002E82 CD 0F 71         [ 4]  316     CALL TYPES
      002E85 CD 05 34         [ 4]  317     CALL RFROM 
      002E88 CD 07 CC         [ 4]  318     CALL QDUP 
      002E8B                        319     _QBRAN EDOT5     
      002E8B CD 04 98         [ 4]    1     CALL QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002E8E 2E 9B                    2     .word EDOT5
      002E90                        320     _DOLIT 'E'
      002E90 CD 04 6F         [ 4]    1     CALL DOLIT 
      002E93 00 45                    2     .word 'E' 
      002E95 CD 04 36         [ 4]  321     CALL EMIT 
      002E98 CD 10 2F         [ 4]  322     CALL DOT
      002E9B                        323 EDOT5: 
      002E9B CD 05 34         [ 4]  324     CALL RFROM 
      002E9E CD 06 DF         [ 4]  325     CALL BASE 
      002EA1 CD 04 D1         [ 4]  326     CALL STORE  
      002EA4 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;   F. (f# -- )
                                    331 ;   print float in fixed
                                    332 ;   point format. 
                                    333 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002EA5                        334     _HEADER FDOT,2,"F."
      002EA5 2E 14                    1         .word LINK 
                           002EA7     2         LINK=.
      002EA7 02                       3         .byte 2  
      002EA8 46 2E                    4         .ascii "F."
      002EAA                          5         FDOT:
      002EAA CD 06 DF         [ 4]  335     CALL BASE 
      002EAD CD 04 E3         [ 4]  336     CALL AT 
      002EB0 CD 05 E2         [ 4]  337     CALL TOR 
      002EB3                        338     _DOLIT 10 
      002EB3 CD 04 6F         [ 4]    1     CALL DOLIT 
      002EB6 00 0A                    2     .word 10 
      002EB8 CD 06 DF         [ 4]  339     CALL BASE 
      002EBB CD 04 D1         [ 4]  340     CALL STORE 
      002EBE CD 2D 91         [ 4]  341     CALL    ATEXP
      002EC1 CD 06 19         [ 4]  342     CALL    DUPP  
      002EC4 CD 08 EC         [ 4]  343     CALL    ABSS 
      002EC7                        344     _DOLIT  8
      002EC7 CD 04 6F         [ 4]    1     CALL DOLIT 
      002ECA 00 08                    2     .word 8 
      002ECC CD 09 53         [ 4]  345     CALL    GREAT 
      002ECF                        346     _QBRAN  FDOT1 
      002ECF CD 04 98         [ 4]    1     CALL QBRAN
      002ED2 2E D7                    2     .word FDOT1
      002ED4 CC 2E 2E         [ 2]  347     JP      EDOT0 
      002ED7                        348 FDOT1:
      002ED7 CD 0F 47         [ 4]  349     CALL    SPACE 
      002EDA CD 05 E2         [ 4]  350     CALL    TOR 
      002EDD CD 2C D2         [ 4]  351     CALL    FNE 
      002EE0                        352     _QBRAN  FDOT0 
      002EE0 CD 04 98         [ 4]    1     CALL QBRAN
      002EE3 2E E8                    2     .word FDOT0
      002EE5 CD 08 98         [ 4]  353     CALL    DNEGA 
      002EE8                        354 FDOT0: 
      002EE8 CD 0E 0B         [ 4]  355     CALL    BDIGS
      002EEB CD 05 45         [ 4]  356     CALL    RAT  
      002EEE CD 06 50         [ 4]  357     CALL    ZLESS 
      002EF1                        358     _QBRAN  FDOT6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002EF1 CD 04 98         [ 4]    1     CALL QBRAN
      002EF4 2F 19                    2     .word FDOT6
      002EF6                        359 FDOT2: ; e<0 
      002EF6 CD 27 0B         [ 4]  360     CALL    DDIG 
      002EF9 CD 05 34         [ 4]  361     CALL    RFROM
      002EFC CD 0B 97         [ 4]  362     CALL    ONEP 
      002EFF CD 07 CC         [ 4]  363     CALL    QDUP 
      002F02                        364     _QBRAN  FDOT3 
      002F02 CD 04 98         [ 4]    1     CALL QBRAN
      002F05 2F 0C                    2     .word FDOT3
      002F07 CD 05 E2         [ 4]  365     CALL    TOR 
      002F0A 20 EA            [ 2]  366     JRA   FDOT2 
      002F0C                        367 FDOT3:
      002F0C                        368     _DOLIT  '.' 
      002F0C CD 04 6F         [ 4]    1     CALL DOLIT 
      002F0F 00 2E                    2     .word '.' 
      002F11 CD 0E 1B         [ 4]  369     CALL    HOLD 
      002F14 CD 27 24         [ 4]  370     CALL    DDIGS
      002F17 20 12            [ 2]  371     JRA   FDOT9  
      002F19                        372 FDOT6: ; e>=0 
      002F19 20 08            [ 2]  373     JRA   FDOT8
      002F1B                        374 FDOT7:     
      002F1B                        375     _DOLIT  '0'
      002F1B CD 04 6F         [ 4]    1     CALL DOLIT 
      002F1E 00 30                    2     .word '0' 
      002F20 CD 0E 1B         [ 4]  376     CALL    HOLD 
      002F23                        377 FDOT8:
      002F23 CD 04 83         [ 4]  378     CALL    DONXT 
      002F26 2F 1B                  379     .word   FDOT7
      002F28 CD 27 24         [ 4]  380     CALL    DDIGS 
      002F2B                        381 FDOT9:
      002F2B CD 2C D2         [ 4]  382     CALL    FNE 
      002F2E                        383     _QBRAN  FDOT10 
      002F2E CD 04 98         [ 4]    1     CALL QBRAN
      002F31 2F 3B                    2     .word FDOT10
      002F33                        384     _DOLIT '-' 
      002F33 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F36 00 2D                    2     .word '-' 
      002F38 CD 0E 1B         [ 4]  385     CALL   HOLD 
      002F3B                        386 FDOT10:
      002F3B CD 0E 70         [ 4]  387     CALL    EDIGS 
      002F3E CD 0F 71         [ 4]  388     CALL    TYPES 
      002F41 CD 05 34         [ 4]  389     CALL    RFROM 
      002F44 CD 06 DF         [ 4]  390     CALL    BASE 
      002F47 CD 04 D1         [ 4]  391     CALL    STORE 
      002F4A 81               [ 4]  392     RET 
                                    393 
                                    394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    395 ; return parsed exponent or 
                                    396 ; 0 if failed
                                    397 ; at entry exprect *a=='E'    
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002F4B                        399 parse_exponent: ; a cntr -- e -1 | 0 
      002F4B CD 05 E2         [ 4]  400     CALL TOR   ; R: cntr 
      002F4E CD 06 19         [ 4]  401     CALL DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002F51 CD 05 01         [ 4]  402     CALL CAT 
      002F54                        403     _DOLIT 'E' 
      002F54 CD 04 6F         [ 4]    1     CALL DOLIT 
      002F57 00 45                    2     .word 'E' 
      002F59 CD 08 FA         [ 4]  404     CALL EQUAL 
      002F5C                        405     _QBRAN 1$
      002F5C CD 04 98         [ 4]    1     CALL QBRAN
      002F5F 2F 8C                    2     .word 1$
      002F61 CD 0B 97         [ 4]  406     CALL ONEP 
      002F64 CD 05 34         [ 4]  407     CALL RFROM  ; a cntr 
      002F67 CD 0B A4         [ 4]  408     CALL ONEM
      002F6A CD 06 19         [ 4]  409     CALL DUPP 
      002F6D                        410     _QBRAN 2$ ; a cntr 
      002F6D CD 04 98         [ 4]    1     CALL QBRAN
      002F70 2F 8F                    2     .word 2$
      002F72 CD 0C 03         [ 4]  411     CALL ZERO
      002F75 CD 06 19         [ 4]  412     CALL DUPP 
      002F78 CD 27 BB         [ 4]  413     CALL DSWAP ; 0 0 a cntr  
      002F7B CD 25 5D         [ 4]  414     CALL nsign 
      002F7E CD 05 E2         [ 4]  415     CALL TOR   ; R: esign  
      002F81 CD 25 8A         [ 4]  416     CALL parse_digits
      002F84                        417     _QBRAN PARSEXP_SUCCESS ; parsed to end of string 
      002F84 CD 04 98         [ 4]    1     CALL QBRAN
      002F87 2F 96                    2     .word PARSEXP_SUCCESS
                                    418 ; failed invalid character
      002F89                        419     _DDROP ; 0 a 
      002F89 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F8C                        420 1$: 
      002F8C CD 05 34         [ 4]  421     CALL RFROM ; sign||cntr  
      002F8F                        422 2$:
      002F8F                        423     _DDROP  ; a cntr || a sign || 0 cntr   
      002F8F 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F92 CD 0C 03         [ 4]  424     CALL ZERO   ; return only 0 
      002F95 81               [ 4]  425     RET 
      002F96                        426 PARSEXP_SUCCESS: 
      002F96                        427     _DDROP ; drop dhi a 
      002F96 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F99 CD 05 34         [ 4]  428     CALL RFROM ; es 
      002F9C                        429     _QBRAN 1$
      002F9C CD 04 98         [ 4]    1     CALL QBRAN
      002F9F 2F A4                    2     .word 1$
      002FA1 CD 08 86         [ 4]  430     CALL NEGAT
      002FA4                        431 1$:
      002FA4                        432     _DOLIT -1 ; -- e -1 
      002FA4 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FA7 FF FF                    2     .word -1 
      002FA9 81               [ 4]  433     RET 
                                    434 
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;   FLOAT?  ( a dlo dhi a+ cntr sign d? -- f -3 | a 0 )
                                    438 ;   called by NUMBER? 
                                    439 ;   convert string to float 
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FAA                        441     _HEADER FLOATQ,5,"FLOAT?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002FAA 2E A7                    1         .word LINK 
                           002FAC     2         LINK=.
      002FAC 05                       3         .byte 5  
      002FAD 46 4C 4F 41 54 3F        4         .ascii "FLOAT?"
      002FB3                          5         FLOATQ:
      002FB3                        442     _QBRAN FLOATQ0 
      002FB3 CD 04 98         [ 4]    1     CALL QBRAN
      002FB6 2F BB                    2     .word FLOATQ0
      002FB8 CC 30 5A         [ 2]  443     JP FLOAT_ERROR  ; not a float, string start with '#'
      002FBB                        444 FLOATQ0:
                                    445 ; BASE must be 10 
      002FBB CD 06 DF         [ 4]  446     CALL BASE 
      002FBE CD 04 E3         [ 4]  447     CALL AT 
      002FC1                        448     _DOLIT 10 
      002FC1 CD 04 6F         [ 4]    1     CALL DOLIT 
      002FC4 00 0A                    2     .word 10 
      002FC6 CD 08 FA         [ 4]  449     CALL EQUAL 
      002FC9                        450     _QBRAN FLOAT_ERROR 
      002FC9 CD 04 98         [ 4]    1     CALL QBRAN
      002FCC 30 5A                    2     .word FLOAT_ERROR
                                    451 ; if float next char is '.' or 'E' 
      002FCE CD 05 E2         [ 4]  452     CALL TOR ; R: sign  
      002FD1 CD 05 E2         [ 4]  453     CALL TOR ; R: sign cntr 
      002FD4 CD 06 19         [ 4]  454     CALL DUPP
      002FD7 CD 05 01         [ 4]  455     CALL CAT 
      002FDA                        456     _DOLIT '.' 
      002FDA CD 04 6F         [ 4]    1     CALL DOLIT 
      002FDD 00 2E                    2     .word '.' 
      002FDF CD 08 FA         [ 4]  457     CALL EQUAL 
      002FE2                        458     _QBRAN FLOATQ1 ; not a dot 
      002FE2 CD 04 98         [ 4]    1     CALL QBRAN
      002FE5 30 1A                    2     .word FLOATQ1
      002FE7 CD 0B 97         [ 4]  459     CALL ONEP 
      002FEA CD 05 34         [ 4]  460     CALL RFROM  ; dlo dhi a cntr R: sign  
      002FED CD 0B A4         [ 4]  461     CALL ONEM 
      002FF0 CD 06 19         [ 4]  462     CALL DUPP 
      002FF3 CD 05 E2         [ 4]  463     CALL TOR  ; R: sign cntr 
                                    464 ; parse fractional part
      002FF6 CD 25 8A         [ 4]  465     CALL parse_digits ; dlo dhi a cntr -- dm a cntr 
      002FF9 CD 06 19         [ 4]  466     CALL DUPP 
      002FFC CD 05 34         [ 4]  467     CALL RFROM 
      002FFF CD 06 29         [ 4]  468     CALL SWAPP 
      003002 CD 08 D2         [ 4]  469     CALL SUBB ; fd -> fraction digits count 
      003005 CD 05 E2         [ 4]  470     CALL TOR  ; dlo dhi a cntr R: sign fd 
      003008 CD 06 19         [ 4]  471     CALL DUPP ; cntr cntr  
      00300B                        472     _QBRAN 1$ ; end of string, no exponent
      00300B CD 04 98         [ 4]    1     CALL QBRAN
      00300E 30 12                    2     .word 1$
      003010 20 11            [ 2]  473     JRA FLOATQ2
      003012 CD 06 29         [ 4]  474 1$: CALL SWAPP 
      003015                        475     _DROP ; a
      003015 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003018 20 11            [ 2]  476     JRA FLOATQ3        
      00301A                        477 FLOATQ1: ; must push fd==0 on RSTACK 
      00301A CD 05 34         [ 4]  478     CALL RFROM ; cntr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00301D CD 0C 03         [ 4]  479     CALL ZERO  ; fd 
      003020 CD 05 E2         [ 4]  480     CALL TOR   ; dm a cntr R: sign fd 
      003023                        481 FLOATQ2: 
      003023 CD 2F 4B         [ 4]  482     CALL parse_exponent 
      003026                        483     _QBRAN FLOAT_ERROR0 ; exponent expected 
      003026 CD 04 98         [ 4]    1     CALL QBRAN
      003029 30 57                    2     .word FLOAT_ERROR0
      00302B                        484 FLOATQ3: ; dm 0 || dm e  
      00302B CD 05 34         [ 4]  485     CALL RFROM ;  fd  
      00302E CD 08 D2         [ 4]  486     CALL SUBB  ; exp=e-fd 
      003031 CD 07 FC         [ 4]  487     CALL NROT 
      003034 CD 05 34         [ 4]  488     CALL RFROM  ; sign 
      003037                        489     _QBRAN FLOATQ4 
      003037 CD 04 98         [ 4]    1     CALL QBRAN
      00303A 30 3F                    2     .word FLOATQ4
      00303C CD 08 98         [ 4]  490     CALL DNEGA 
      00303F                        491 FLOATQ4:
      00303F CD 07 DD         [ 4]  492     CALL ROT 
      003042 CD 2D C3         [ 4]  493     CALL STEXP 
      003045 CD 07 DD         [ 4]  494     CALL ROT 
      003048                        495     _DROP 
      003048 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00304B CD 2D 44         [ 4]  496     CALL SFN 
      00304E CD 2D 0D         [ 4]  497     CALL SFZ 
      003051                        498     _DOLIT -3 
      003051 CD 04 6F         [ 4]    1     CALL DOLIT 
      003054 FF FD                    2     .word -3 
      003056 81               [ 4]  499     RET       
      003057                        500 FLOAT_ERROR0: 
      003057 CD 29 28         [ 4]  501     CALL DRFROM ; sign df      
      00305A                        502 FLOAT_ERROR: 
      00305A CD 0C 45         [ 4]  503     CALL DEPTH 
      00305D CD 0B 8A         [ 4]  504     CALL CELLS 
      003060 CD 05 F9         [ 4]  505     CALL SPAT 
      003063 CD 06 29         [ 4]  506     CALL SWAPP 
      003066 CD 08 3C         [ 4]  507     CALL PLUS  
      003069 CD 06 06         [ 4]  508     CALL SPSTO 
      00306C CD 0C 03         [ 4]  509     CALL ZERO 
      00306F 81               [ 4]  510     RET 
                                    511 
                                    512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    513 ;  LSCALE ( f# -- f# )
                                    514 ;  m *=10 , e -= 1
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003070                        516     _HEADER LSCALE,6,"LSCALE"
      003070 2F AC                    1         .word LINK 
                           003072     2         LINK=.
      003072 06                       3         .byte 6  
      003073 4C 53 43 41 4C 45        4         .ascii "LSCALE"
      003079                          5         LSCALE:
      003079 CD 2D 91         [ 4]  517     CALL ATEXP 
      00307C CD 0C 0E         [ 4]  518     CALL ONE 
      00307F CD 08 D2         [ 4]  519     CALL SUBB 
      003082 CD 05 E2         [ 4]  520     CALL TOR
      003085                        521     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003085 CD 04 6F         [ 4]    1     CALL DOLIT 
      003088 00 0A                    2     .word 10 
      00308A CD 27 95         [ 4]  522     CALL DSSTAR
      00308D CD 05 34         [ 4]  523     CALL RFROM 
      003090 CD 2D C3         [ 4]  524     CALL STEXP 
      003093 81               [ 4]  525     RET  
                                    526 
                                    527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    528 ;  RSCALE ( f# -- f# )
                                    529 ;  m /=10 , e+=1 
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003094                        531     _HEADER RSCALE,6,"RSCALE"
      003094 30 72                    1         .word LINK 
                           003096     2         LINK=.
      003096 06                       3         .byte 6  
      003097 52 53 43 41 4C 45        4         .ascii "RSCALE"
      00309D                          5         RSCALE:
      00309D CD 2D 91         [ 4]  532     CALL ATEXP 
      0030A0 CD 0C 0E         [ 4]  533     CALL ONE 
      0030A3 CD 08 3C         [ 4]  534     CALL PLUS 
      0030A6 CD 05 E2         [ 4]  535     CALL TOR 
      0030A9                        536     _DOLIT 10 
      0030A9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030AC 00 0A                    2     .word 10 
      0030AE CD 26 CA         [ 4]  537     CALL DSLMOD 
      0030B1 CD 07 DD         [ 4]  538     CALL ROT 
      0030B4                        539     _DROP 
      0030B4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0030B7 CD 05 34         [ 4]  540     CALL RFROM 
      0030BA CD 2D C3         [ 4]  541     CALL STEXP 
      0030BD 81               [ 4]  542     RET 
                                    543 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    545 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    546 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    547 ;        ud*10;
                                    548 ;        u2--;
                                    549 ;  }  
                                    550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030BE                        551 SCALEUP:
      0030BE CD 08 27         [ 4]  552     CALL DDUP
      0030C1 CD 09 26         [ 4]  553     CALL LESS  
      0030C4                        554     _QBRAN SCALEUP3
      0030C4 CD 04 98         [ 4]    1     CALL QBRAN
      0030C7 30 F4                    2     .word SCALEUP3
      0030C9 CD 29 0A         [ 4]  555     CALL DTOR   ; R: u1 u2  
      0030CC CD 08 27         [ 4]  556     CALL DDUP 
      0030CF                        557     _DOLIT 0XCCCC 
      0030CF CD 04 6F         [ 4]    1     CALL DOLIT 
      0030D2 CC CC                    2     .word 0XCCCC 
      0030D4                        558     _DOLIT 0XCCC 
      0030D4 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030D7 0C CC                    2     .word 0XCCC 
      0030D9 CD 28 CD         [ 4]  559     CALL DGREAT  
      0030DC                        560     _TBRAN SCALEUP2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0030DC CD 04 A6         [ 4]    1     CALL TBRAN 
      0030DF 30 F1                    2     .word SCALEUP2 
      0030E1                        561     _DOLIT 10 
      0030E1 CD 04 6F         [ 4]    1     CALL DOLIT 
      0030E4 00 0A                    2     .word 10 
      0030E6 CD 27 73         [ 4]  562     CALL UDSSTAR 
      0030E9 CD 29 28         [ 4]  563     CALL DRFROM 
      0030EC CD 0B A4         [ 4]  564     CALL ONEM
      0030EF 20 CD            [ 2]  565     JRA SCALEUP
      0030F1                        566 SCALEUP2:
      0030F1 CD 29 28         [ 4]  567     CALL DRFROM
      0030F4                        568 SCALEUP3: 
      0030F4 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    573 ;  whhile (ud && u1>u2 ){ 
                                    574 ;     ud/10;
                                    575 ;     u2++;
                                    576 ;  } 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0030F5                        578 SCALEDOWN: 
      0030F5 CD 08 27         [ 4]  579     CALL DDUP 
      0030F8 CD 09 53         [ 4]  580     CALL GREAT 
      0030FB                        581     _QBRAN SCALDN3 
      0030FB CD 04 98         [ 4]    1     CALL QBRAN
      0030FE 31 24                    2     .word SCALDN3
      003100 CD 29 0A         [ 4]  582     CALL DTOR 
      003103 CD 08 27         [ 4]  583     CALL DDUP 
      003106 CD 28 90         [ 4]  584     CALL DZEQUAL 
      003109                        585     _TBRAN SCALDN2  
      003109 CD 04 A6         [ 4]    1     CALL TBRAN 
      00310C 31 21                    2     .word SCALDN2 
      00310E                        586     _DOLIT 10
      00310E CD 04 6F         [ 4]    1     CALL DOLIT 
      003111 00 0A                    2     .word 10 
      003113 CD 0C 03         [ 4]  587     CALL ZERO  
      003116 CD 2B D5         [ 4]  588     CALL DSLASH 
      003119 CD 29 28         [ 4]  589     CALL DRFROM 
      00311C CD 0B 97         [ 4]  590     CALL ONEP  
      00311F 20 D4            [ 2]  591     JRA SCALEDOWN 
      003121                        592 SCALDN2:
      003121 CD 29 28         [ 4]  593     CALL DRFROM 
      003124                        594 SCALDN3:
      003124 81               [ 4]  595     RET 
                                    596 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    600 ;  align to same exponent 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003125                        602     _HEADER FALIGN,7,"F-ALIGN"
      003125 30 96                    1         .word LINK 
                           003127     2         LINK=.
      003127 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      003128 46 2D 41 4C 49 47 4E     4         .ascii "F-ALIGN"
      00312F                          5         FALIGN:
      00312F CD 2D 91         [ 4]  603     CALL ATEXP 
      003132 CD 05 E2         [ 4]  604     CALL TOR 
      003135 CD 27 BB         [ 4]  605     CALL DSWAP 
      003138 CD 2D 91         [ 4]  606     CALL ATEXP 
      00313B CD 05 E2         [ 4]  607     CALL TOR    ; m2 m1 R: e2 e1 
      00313E CD 27 BB         [ 4]  608     CALL DSWAP 
      003141 CD 29 40         [ 4]  609     CALL DRAT 
      003144 CD 08 FA         [ 4]  610     CALL EQUAL 
      003147                        611     _TBRAN FALGN8
      003147 CD 04 A6         [ 4]    1     CALL TBRAN 
      00314A 31 CC                    2     .word FALGN8 
                                    612 ; scaleup the largest float 
                                    613 ; but limit mantissa <=0xccccccc
                                    614 ; to avoid mantissa overflow     
      00314C CD 29 40         [ 4]  615     CALL DRAT ; m1 m2 e2 e1 
      00314F CD 09 53         [ 4]  616     CALL GREAT 
      003152                        617     _QBRAN FALGN4 ; e2<e1 
      003152 CD 04 98         [ 4]    1     CALL QBRAN
      003155 31 68                    2     .word FALGN4
                                    618 ; e2>e1 then scale up m2   
      003157 CD 29 28         [ 4]  619     CALL DRFROM 
      00315A CD 06 29         [ 4]  620     CALL SWAPP 
      00315D CD 30 BE         [ 4]  621     CALL SCALEUP 
      003160 CD 06 29         [ 4]  622     CALL SWAPP 
      003163 CD 29 0A         [ 4]  623     CALL DTOR 
      003166 20 0F            [ 2]  624     JRA FALGN6
      003168                        625 FALGN4: ; e2<e1 then scaleup m1 
      003168 CD 27 BB         [ 4]  626     CALL DSWAP 
      00316B CD 29 28         [ 4]  627     CALL DRFROM 
      00316E CD 30 BE         [ 4]  628     CALL SCALEUP 
      003171 CD 29 0A         [ 4]  629     CALL DTOR
      003174 CD 27 BB         [ 4]  630     CALL DSWAP 
                                    631 ; check again for e2==e1 
                                    632 ; if scaleup was not enough 
                                    633 ; to equalize exponent then
                                    634 ; scaledown smallest float     
      003177                        635 FALGN6: 
      003177 CD 29 40         [ 4]  636     CALL DRAT 
      00317A CD 08 FA         [ 4]  637     CALL EQUAL 
      00317D                        638     _TBRAN FALGN8 
      00317D CD 04 A6         [ 4]    1     CALL TBRAN 
      003180 31 CC                    2     .word FALGN8 
                                    639 ; e2!=e1 need to scale down smallest 
      003182 CD 29 40         [ 4]  640     CALL DRAT 
      003185 CD 09 53         [ 4]  641     CALL GREAT 
      003188                        642     _QBRAN FALGN7 ; e2<e1 
      003188 CD 04 98         [ 4]    1     CALL QBRAN
      00318B 31 9E                    2     .word FALGN7
                                    643 ; e2>e1 scaledown m1 
      00318D CD 27 BB         [ 4]  644     CALL DSWAP 
      003190 CD 29 28         [ 4]  645     CALL DRFROM 
      003193 CD 30 F5         [ 4]  646     CALL SCALEDOWN
      003196 CD 06 29         [ 4]  647     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003199 CD 29 0A         [ 4]  648     CALL DTOR 
      00319C 20 0F            [ 2]  649     JRA FALGN71  
      00319E                        650 FALGN7: ; e2<e1 scaledown m2 
      00319E CD 29 28         [ 4]  651     CALL DRFROM 
      0031A1 CD 06 29         [ 4]  652     CALL SWAPP 
      0031A4 CD 30 F5         [ 4]  653     CALL SCALEDOWN 
      0031A7 CD 06 29         [ 4]  654     CALL SWAPP 
      0031AA CD 29 0A         [ 4]  655     CALL DTOR 
                                    656 ; after scaledown if e2!=e1 
                                    657 ; this imply that one of mantissa 
                                    658 ; as been nullified by scalling 
                                    659 ; hence keep largest exponent 
      0031AD                        660 FALGN71:
      0031AD CD 29 40         [ 4]  661     CALL DRAT 
      0031B0 CD 08 FA         [ 4]  662     CALL EQUAL
      0031B3                        663     _TBRAN FALGN8 
      0031B3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0031B6 31 CC                    2     .word FALGN8 
      0031B8 CD 29 28         [ 4]  664     CALL DRFROM 
      0031BB CD 08 27         [ 4]  665     CALL DDUP 
      0031BE CD 09 53         [ 4]  666     CALL GREAT 
      0031C1                        667     _TBRAN FALGN72
      0031C1 CD 04 A6         [ 4]    1     CALL TBRAN 
      0031C4 31 C9                    2     .word FALGN72 
      0031C6 CD 06 29         [ 4]  668     CALL SWAPP     
      0031C9                        669 FALGN72:
      0031C9 CD 29 0A         [ 4]  670     CALL DTOR  ; now smallest e is at rtop.
      0031CC                        671 FALGN8:
      0031CC CD 29 28         [ 4]  672     CALL DRFROM 
      0031CF                        673     _DROP 
      0031CF 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0031D2 81               [ 4]  674     RET 
                                    675 
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    677 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    678 ;   float addition 
                                    679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031D3                        680     _HEADER FPLUS,2,"F+"
      0031D3 31 27                    1         .word LINK 
                           0031D5     2         LINK=.
      0031D5 02                       3         .byte 2  
      0031D6 46 2B                    4         .ascii "F+"
      0031D8                          5         FPLUS:
      0031D8 CD 31 2F         [ 4]  681     CALL FALIGN 
      0031DB CD 05 E2         [ 4]  682     CALL TOR 
      0031DE CD 2B E4         [ 4]  683     CALL DPLUS
      0031E1 CD 26 B0         [ 4]  684     CALL DSIGN 
      0031E4 CD 05 E2         [ 4]  685     CALL TOR 
      0031E7 CD 26 9F         [ 4]  686     CALL DABS 
      0031EA CD 32 4D         [ 4]  687     CALL SCALETOM
      0031ED CD 05 34         [ 4]  688     CALL RFROM 
      0031F0                        689     _QBRAN FPLUS1 
      0031F0 CD 04 98         [ 4]    1     CALL QBRAN
      0031F3 31 F8                    2     .word FPLUS1
      0031F5 CD 08 98         [ 4]  690     CALL DNEGA  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0031F8                        691 FPLUS1: 
      0031F8 CD 07 DD         [ 4]  692     CALL ROT   
      0031FB CD 05 34         [ 4]  693     CALL RFROM
      0031FE CD 08 3C         [ 4]  694     CALL PLUS  
      003201 CD 2D C3         [ 4]  695     CALL STEXP 
      003204 81               [ 4]  696     RET 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    700 ;  substraction 
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003205                        702     _HEADER FSUB,2,"F-"
      003205 31 D5                    1         .word LINK 
                           003207     2         LINK=.
      003207 02                       3         .byte 2  
      003208 46 2D                    4         .ascii "F-"
      00320A                          5         FSUB:
      00320A CD 31 2F         [ 4]  703     CALL FALIGN 
      00320D CD 05 E2         [ 4]  704     CALL TOR 
      003210 CD 2C 16         [ 4]  705     CALL DSUB
      003213 CD 26 B0         [ 4]  706     CALL DSIGN 
      003216 CD 05 E2         [ 4]  707     CALL TOR 
      003219 CD 26 9F         [ 4]  708     CALL DABS 
      00321C CD 32 4D         [ 4]  709     CALL SCALETOM 
      00321F CD 05 34         [ 4]  710     CALL RFROM 
      003222                        711     _QBRAN FSUB1 
      003222 CD 04 98         [ 4]    1     CALL QBRAN
      003225 32 2A                    2     .word FSUB1
      003227 CD 08 98         [ 4]  712     CALL DNEGA 
      00322A                        713 FSUB1:
      00322A CD 07 DD         [ 4]  714     CALL ROT 
      00322D CD 05 34         [ 4]  715     CALL RFROM
      003230 CD 08 3C         [ 4]  716     CALL PLUS  
      003233 CD 2D C3         [ 4]  717     CALL STEXP 
      003236 81               [ 4]  718     RET 
                                    719 
                                    720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    721 ; /mod10  ( m -- m/10 r )
                                    722 ; divide mantissa by 10 
                                    723 ; return quotient and remainder 
                                    724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003237                        725 UMOD10:
      003237                        726     _DOLIT 10 
      003237 CD 04 6F         [ 4]    1     CALL DOLIT 
      00323A 00 0A                    2     .word 10 
      00323C CD 26 CA         [ 4]  727     CALL DSLMOD
      00323F CD 07 DD         [ 4]  728     CALL ROT  
      003242 81               [ 4]  729     RET 
                                    730 
                                    731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    732 ;   SCALE>M ( ud1 -- e ud2 )
                                    733 ;   scale down a double  
                                    734 ;   by repeated d/10
                                    735 ;   until ud<=MAX_MANTISSA   
                                    736 ;   e is log10 exponent of scaled down
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                    737 ;   ud2 is scaled down ud1 
                                    738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003243                        739     _HEADER SCALETOM,7,"SCALE>M"
      003243 32 07                    1         .word LINK 
                           003245     2         LINK=.
      003245 07                       3         .byte 7  
      003246 53 43 41 4C 45 3E 4D     4         .ascii "SCALE>M"
      00324D                          5         SCALETOM:
      00324D CD 0C 03         [ 4]  740     CALL ZERO 
      003250 CD 07 FC         [ 4]  741     CALL NROT 
      003253                        742 SCAL1:
      003253 CD 06 19         [ 4]  743     CALL DUPP 
      003256                        744     _DOLIT 0X7F 
      003256 CD 04 6F         [ 4]    1     CALL DOLIT 
      003259 00 7F                    2     .word 0X7F 
      00325B CD 09 3D         [ 4]  745     CALL UGREAT 
      00325E                        746     _QBRAN SCAL2  
      00325E CD 04 98         [ 4]    1     CALL QBRAN
      003261 32 74                    2     .word SCAL2
      003263 CD 32 37         [ 4]  747     CALL UMOD10 
      003266                        748     _DROP 
      003266 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003269 CD 07 DD         [ 4]  749     CALL ROT 
      00326C CD 0B 97         [ 4]  750     CALL ONEP 
      00326F CD 07 FC         [ 4]  751     CALL NROT  
      003272 20 DF            [ 2]  752     JRA SCAL1 
      003274                        753 SCAL2: 
      003274 81               [ 4]  754     RET 
                                    755 
                                    756 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    757 ;  UDIV10 ( ut -- ut )
                                    758 ;  divide a 48 bits uint by 10 
                                    759 ;  used to scale down MM* 
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003275                        761 UDIV10:
      003275 90 93            [ 1]  762     LDW Y,X 
      003277 90 FE            [ 2]  763     LDW Y,(Y)
      003279 A6 0A            [ 1]  764     LD A,#10 
      00327B 90 62            [ 2]  765     DIV Y,A 
      00327D FF               [ 2]  766     LDW (X),Y 
      00327E 90 95            [ 1]  767     LD YH,A 
      003280 E6 02            [ 1]  768     LD A,(2,X)
      003282 90 97            [ 1]  769     LD YL,A 
      003284 A6 0A            [ 1]  770     LD A,#10 
      003286 90 62            [ 2]  771     DIV Y,A 
      003288 90 95            [ 1]  772     LD YH,A 
      00328A 90 9F            [ 1]  773     LD A,YL 
      00328C E7 02            [ 1]  774     LD (2,X),A 
      00328E E6 03            [ 1]  775     LD A,(3,X)
      003290 90 97            [ 1]  776     LD YL,A 
      003292 A6 0A            [ 1]  777     LD A,#10 
      003294 90 62            [ 2]  778     DIV Y,A 
      003296 90 95            [ 1]  779     LD YH,A 
      003298 90 9F            [ 1]  780     LD A,YL 
      00329A E7 03            [ 1]  781     LD (3,X),A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      00329C E6 04            [ 1]  782     LD A,(4,X)
      00329E 90 97            [ 1]  783     LD YL,A 
      0032A0 A6 0A            [ 1]  784     LD A,#10 
      0032A2 90 62            [ 2]  785     DIV Y,A 
      0032A4 90 95            [ 1]  786     LD YH,A 
      0032A6 90 9F            [ 1]  787     LD A,YL 
      0032A8 E7 04            [ 1]  788     LD (4,X),A 
      0032AA E6 05            [ 1]  789     LD A,(5,X)
      0032AC 90 97            [ 1]  790     LD YL,A 
      0032AE A6 0A            [ 1]  791     LD A,#10 
      0032B0 90 62            [ 2]  792     DIV Y,A 
      0032B2 90 9F            [ 1]  793     LD A,YL 
      0032B4 E7 05            [ 1]  794     LD (5,X),A 
      0032B6 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   MM* ( m1 m2 -- m3 e )
                                    799 ;   mantissa product 
                                    800 ;  scale down to 23 bits 
                                    801 ;   e  is log10 scaling factor.
                                    802 ;   The maximum product size 
                                    803 ;   before scaling is 46 bits .
                                    804 ;   UDIV10 is used to scale down.  
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0032B7                        806     _HEADER MMSTAR,3,"MM*"
      0032B7 32 45                    1         .word LINK 
                           0032B9     2         LINK=.
      0032B9 03                       3         .byte 3  
      0032BA 4D 4D 2A                 4         .ascii "MM*"
      0032BD                          5         MMSTAR:
      0032BD CD 08 27         [ 4]  807     CALL DDUP
      0032C0 CD 28 90         [ 4]  808     CALL DZEQUAL
      0032C3                        809     _TBRAN MMSTA2
      0032C3 CD 04 A6         [ 4]    1     CALL TBRAN 
      0032C6 32 D3                    2     .word MMSTA2 
      0032C8                        810 MMSTA1:
      0032C8 CD 29 D1         [ 4]  811     CALL DOVER 
      0032CB CD 28 90         [ 4]  812     CALL DZEQUAL 
      0032CE                        813     _QBRAN MMSTA3 
      0032CE CD 04 98         [ 4]    1     CALL QBRAN
      0032D1 32 DE                    2     .word MMSTA3
      0032D3                        814 MMSTA2: ; ( -- 0 0 0 )
      0032D3 1C 00 02         [ 2]  815     ADDW X,#2 
      0032D6 90 5F            [ 1]  816     CLRW Y 
      0032D8 FF               [ 2]  817     LDW (X),Y 
      0032D9 EF 02            [ 2]  818     LDW (2,X),Y
      0032DB EF 04            [ 2]  819     LDW (4,X),Y 
      0032DD 81               [ 4]  820     RET 
      0032DE                        821 MMSTA3:
      0032DE CD 26 B0         [ 4]  822     CALL DSIGN 
      0032E1 CD 05 E2         [ 4]  823     CALL TOR    ; R: m2sign 
      0032E4 CD 26 9F         [ 4]  824     CALL DABS   ; m1 um2 
      0032E7 CD 27 BB         [ 4]  825     CALL DSWAP  ; um2 m1 
      0032EA CD 26 B0         [ 4]  826     CALL DSIGN  ; um2 m1 m1sign 
      0032ED CD 05 34         [ 4]  827     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0032F0 CD 06 9F         [ 4]  828     CALL XORR 
      0032F3 CD 05 E2         [ 4]  829     CALL TOR   ; R: product_sign 
      0032F6 CD 26 9F         [ 4]  830     CALL DABS  ; um2 um1  
      0032F9 CD 29 0A         [ 4]  831     CALL DTOR  ; um2 
      0032FC CD 06 19         [ 4]  832     CALL DUPP  ; um2 um2hi 
      0032FF CD 05 45         [ 4]  833     CALL RAT   ; um2 um2hi um1hi
                                    834 ; first partial product  
                                    835 ; pd1=um2hi*um1hi 
      003302 CD 0B 16         [ 4]  836     CALL STAR 
      003305 CD 0C 03         [ 4]  837     CALL ZERO 
      003308 CD 06 29         [ 4]  838     CALL SWAPP ; pd1<<16  
      00330B CD 27 BB         [ 4]  839     CALL DSWAP ; pd1 um2 
      00330E CD 06 41         [ 4]  840     CALL OVER  ; pd1 um2 um2lo 
      003311 CD 05 34         [ 4]  841     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    842 ; pd2=um2lo*um1hi 
      003314 CD 0A CC         [ 4]  843     CALL UMSTA ; pd1 um2 pd2 
      003317 CD 27 BB         [ 4]  844     CALL DSWAP ; pd1 pd2 um2 
      00331A CD 05 45         [ 4]  845     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    846 ; pd3= um2hi*um1lo 
      00331D CD 0A CC         [ 4]  847     CALL UMSTA ; pd1 pd2 um2lo pd3 
      003320 CD 07 DD         [ 4]  848     CALL ROT ; pd1 pd2 pd3 um2lo 
      003323 CD 05 E2         [ 4]  849     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    850 ; pd1+pd2+pd3  pd1
      003326 CD 2B E4         [ 4]  851     CALL DPLUS 
      003329 CD 2B E4         [ 4]  852     CALL DPLUS  
      00332C CD 29 28         [ 4]  853     CALL DRFROM ; triple um2lo um1lo 
                                    854 ; last partial product um2lo*um1lo 
      00332F CD 0A CC         [ 4]  855     CALL UMSTA ; prod pd4 
                                    856 ; mm*=prod<<16+pd4  
      003332 CD 29 0A         [ 4]  857     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    858  ; add pd4hi to prodlo and propagate carry 
      003335 90 93            [ 1]  859     LDW Y,X 
      003337 90 EE 02         [ 2]  860     LDW Y,(2,Y)  ; prodlo 
      00333A 72 F9 01         [ 2]  861     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      00333D 17 01            [ 2]  862     LDW (1,SP),Y    ; plo phi  
      00333F 90 93            [ 1]  863     LDW Y,X
      003341 90 FE            [ 2]  864     LDW Y,(Y) ; prodhi  
      003343 24 04            [ 1]  865     JRNC MMSTA4
      003345 72 A9 00 01      [ 2]  866     ADDW Y,#1 ; add carry 
      003349                        867 MMSTA4:     
      003349 1D 00 02         [ 2]  868     SUBW X,#2 
      00334C FF               [ 2]  869     LDW (X),Y 
      00334D 90 85            [ 2]  870     POPW Y 
      00334F EF 02            [ 2]  871     LDW (2,X),Y 
      003351 90 85            [ 2]  872     POPW Y 
      003353 EF 04            [ 2]  873     LDW (4,X),Y
      003355 CD 0C 03         [ 4]  874     CALL ZERO 
      003358 CD 05 E2         [ 4]  875     CALL TOR 
      00335B                        876 MMSTA5:
      00335B CD 07 CC         [ 4]  877     CALL QDUP 
      00335E                        878     _QBRAN MMSTA6 
      00335E CD 04 98         [ 4]    1     CALL QBRAN
      003361 33 71                    2     .word MMSTA6
      003363 CD 32 75         [ 4]  879     CALL UDIV10 
      003366 CD 05 34         [ 4]  880     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      003369 CD 0B 97         [ 4]  881     CALL ONEP 
      00336C CD 05 E2         [ 4]  882     CALL TOR 
      00336F 20 EA            [ 2]  883     JRA MMSTA5 
                                    884 ; now scale to double 
                                    885 ; scale further <= MAX_MANTISSA 
      003371                        886 MMSTA6: 
      003371 CD 05 34         [ 4]  887     CALL RFROM 
      003374 CD 07 FC         [ 4]  888     CALL NROT 
      003377 CD 32 4D         [ 4]  889     CALL SCALETOM
      00337A CD 29 0A         [ 4]  890     CALL DTOR 
      00337D CD 08 3C         [ 4]  891     CALL PLUS 
      003380 CD 29 28         [ 4]  892     CALL DRFROM 
      003383 CD 05 34         [ 4]  893     CALL RFROM
      003386                        894     _QBRAN MMSTA7
      003386 CD 04 98         [ 4]    1     CALL QBRAN
      003389 33 8E                    2     .word MMSTA7
      00338B CD 08 98         [ 4]  895     CALL DNEGA
      00338E                        896 MMSTA7:
      00338E CD 07 DD         [ 4]  897     CALL ROT ; m e 
      003391 81               [ 4]  898     RET 
                                    899 
                                    900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    901 ;    F* ( f#1 f#2 -- f#3 )
                                    902 ;    float product 
                                    903 ;    f#3=f#1 * f#2 
                                    904 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003392                        905     _HEADER FSTAR,2,"F*"
      003392 32 B9                    1         .word LINK 
                           003394     2         LINK=.
      003394 02                       3         .byte 2  
      003395 46 2A                    4         .ascii "F*"
      003397                          5         FSTAR:
      003397 CD 2D 91         [ 4]  906     CALL ATEXP ; f#1 m2 e2 
      00339A CD 05 E2         [ 4]  907     CALL TOR   
      00339D CD 27 BB         [ 4]  908     CALL DSWAP ; m2 f#1
      0033A0 CD 2D 91         [ 4]  909     CALL ATEXP ; m2 m1 e1 
      0033A3 CD 05 34         [ 4]  910     CALL RFROM ; m2 m1 e1 e2 
      0033A6 CD 08 3C         [ 4]  911     CALL PLUS  ; m2 m1 e 
      0033A9 CD 05 E2         [ 4]  912     CALL TOR   ; m2 m1 R: e 
      0033AC CD 32 BD         [ 4]  913     CALL MMSTAR ; m2*m1 e   
      0033AF CD 05 34         [ 4]  914     CALL RFROM 
      0033B2 CD 08 3C         [ 4]  915     CALL PLUS 
      0033B5 CD 2D C3         [ 4]  916     CALL STEXP ; f#3 
      0033B8 81               [ 4]  917     RET 
                                    918 
                                    919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    920 ;  F/ ( f#1 f#2 -- f#3 )
                                    921 ;  float division
                                    922 ;  f#3 = f#1/f#2
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0033B9                        924     _HEADER FSLASH,2,"F/"
      0033B9 33 94                    1         .word LINK 
                           0033BB     2         LINK=.
      0033BB 02                       3         .byte 2  
      0033BC 46 2F                    4         .ascii "F/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0033BE                          5         FSLASH:
      0033BE CD 2D 91         [ 4]  925     CALL ATEXP  ; f#1 m2 e2 
      0033C1 CD 05 E2         [ 4]  926     CALL TOR    ; f#1 m2   R: e2 
      0033C4 CD 26 B0         [ 4]  927     CALL DSIGN  ; f#1 m2 m2sign 
      0033C7 CD 05 E2         [ 4]  928     CALL TOR    ; F#1 m2 R: e2 m2s 
      0033CA CD 26 9F         [ 4]  929     CALL DABS   ; F#1 um2 
      0033CD CD 27 BB         [ 4]  930     CALL DSWAP  ; m2 f#1 
      0033D0 CD 2D 91         [ 4]  931     CALL ATEXP  ; m2 m1 e1 
      0033D3 CD 0C 0E         [ 4]  932     CALL ONE    ; e2 slot on rstack  
      0033D6 CD 05 9F         [ 4]  933     CALL NRAT   ; m2 m1 e1 e2 
      0033D9 CD 08 D2         [ 4]  934     CALL SUBB   ; m2 m1 e 
      0033DC CD 0C 0E         [ 4]  935     CALL ONE    ; e slot on rstack 
      0033DF CD 05 BE         [ 4]  936     CALL NRSTO  ; m2 m1 R: e m2s 
      0033E2 CD 26 B0         [ 4]  937     CALL DSIGN  ; m2 m1 m1sign 
      0033E5 CD 05 34         [ 4]  938     CALL RFROM  ; m2 m1 m1s m2s  
      0033E8 CD 06 9F         [ 4]  939     CALL XORR   ; m2 m1 quot_sign R: e 
      0033EB CD 05 34         [ 4]  940     CALL RFROM   
      0033EE CD 29 0A         [ 4]  941     CALL DTOR   ; m2 m1 R: qs e  
      0033F1 CD 26 9F         [ 4]  942     CALL DABS   ; um2 um1 R: qs e  
      0033F4 CD 27 BB         [ 4]  943     CALL DSWAP  ; m1 m2 R: qs e
      0033F7 CD 08 27         [ 4]  944     CALL DDUP  ; m1 m2 m2 R: qs e
      0033FA CD 29 0A         [ 4]  945     CALL DTOR  ; m1 m2 R: qs e m2 ( keep divisor need later ) 
      0033FD CD 2A DC         [ 4]  946     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      003400                        947 FSLASH1: 
      003400 CD 29 D1         [ 4]  948     CALL DOVER ; if remainder null done 
      003403 CD 28 90         [ 4]  949     CALL DZEQUAL 
      003406                        950     _TBRAN FSLASH8 
      003406 CD 04 A6         [ 4]    1     CALL TBRAN 
      003409 34 63                    2     .word FSLASH8 
                                    951 ; get fractional digits from remainder until mantissa saturate
                                    952 ; remainder mantissa R: e divisor 
                                    953 ; check for mantissa saturation 
      00340B CD 08 27         [ 4]  954     CALL DDUP 
      00340E                        955     _DOLIT 0XCCCC 
      00340E CD 04 6F         [ 4]    1     CALL DOLIT 
      003411 CC CC                    2     .word 0XCCCC 
      003413                        956     _DOLIT 0xC
      003413 CD 04 6F         [ 4]    1     CALL DOLIT 
      003416 00 0C                    2     .word 0xC 
      003418 CD 28 CD         [ 4]  957     CALL DGREAT 
      00341B                        958     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      00341B CD 04 A6         [ 4]    1     CALL TBRAN 
      00341E 34 63                    2     .word FSLASH8 
                                    959 ; multiply mantissa by 10 
      003420                        960     _DOLIT 10 
      003420 CD 04 6F         [ 4]    1     CALL DOLIT 
      003423 00 0A                    2     .word 10 
      003425 CD 0C 03         [ 4]  961     CALL ZERO 
      003428 CD 2A 79         [ 4]  962     CALL DSTAR 
                                    963 ; mutliply remainder by 10     
      00342B CD 27 BB         [ 4]  964     CALL DSWAP 
      00342E                        965     _DOLIT 10 
      00342E CD 04 6F         [ 4]    1     CALL DOLIT 
      003431 00 0A                    2     .word 10 
      003433 CD 0C 03         [ 4]  966     CALL ZERO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      003436 CD 2A 79         [ 4]  967     CALL DSTAR 
                                    968 ; divide remainder by m2     
      003439 CD 29 40         [ 4]  969     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      00343C CD 2A DC         [ 4]  970     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      00343F CD 27 BB         [ 4]  971     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
      003442 CD 29 0A         [ 4]  972     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      003445 CD 2B E4         [ 4]  973     CALL DPLUS ; mantissa+frac_digit 
      003448 CD 29 28         [ 4]  974     CALL DRFROM ; mantissa remainder R: qs e divisor  
      00344B CD 27 BB         [ 4]  975     CALL DSWAP  ; remainder mantissa  
                                    976 ; increment e 
      00344E                        977     _DOLIT 2    ; e slot on rstack 
      00344E CD 04 6F         [ 4]    1     CALL DOLIT 
      003451 00 02                    2     .word 2 
      003453 CD 05 9F         [ 4]  978     CALL NRAT   ;  2 NR@ -- e 
      003456 CD 0B 97         [ 4]  979     CALL ONEP   ; increment exponent 
      003459                        980     _DOLIT 2 
      003459 CD 04 6F         [ 4]    1     CALL DOLIT 
      00345C 00 02                    2     .word 2 
      00345E CD 05 BE         [ 4]  981     CALL NRSTO  ; e 2 NR! , update e on rstack     
      003461 20 9D            [ 2]  982     JRA FSLASH1
      003463                        983 FSLASH8: ; remainder mantissa R: qs e divisor 
      003463 CD 27 BB         [ 4]  984     CALL DSWAP  
      003466                        985     _DDROP  ; drop remainder     
      003466 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      003469 CD 29 28         [ 4]  986     CALL DRFROM
      00346C                        987     _DDROP  ; drop divisor 
      00346C 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      00346F CD 15 E6         [ 4]  988     CALL JFETCH    ; quotient sign 
      003472                        989     _QBRAN FSLASH9 
      003472 CD 04 98         [ 4]    1     CALL QBRAN
      003475 34 7A                    2     .word FSLASH9
      003477 CD 08 98         [ 4]  990     CALL DNEGA  
      00347A                        991 FSLASH9:
      00347A CD 05 34         [ 4]  992     CALL RFROM  ; exponent 
      00347D CD 2D C3         [ 4]  993     CALL STEXP 
      003480 CD 05 34         [ 4]  994     CALL RFROM 
      003483                        995     _DROP ; drop qs 
      003483 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003486 81               [ 4]  996     RET 
                                    997 
                                    998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    999 ;   D>F  ( # -- f# )
                                   1000 ;   convert double to float 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003487                       1002     _HEADER DTOF,3,"D>F"
      003487 33 BB                    1         .word LINK 
                           003489     2         LINK=.
      003489 03                       3         .byte 3  
      00348A 44 3E 46                 4         .ascii "D>F"
      00348D                          5         DTOF:
      00348D CD 26 B0         [ 4] 1003     CALL DSIGN 
      003490 CD 05 E2         [ 4] 1004     CALL TOR
      003493 CD 26 9F         [ 4] 1005     CALL DABS  
      003496                       1006 DTOF1:      
      003496 CD 32 4D         [ 4] 1007     CALL SCALETOM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      003499 CD 05 34         [ 4] 1008     CALL RFROM
      00349C                       1009     _QBRAN DTOF2 
      00349C CD 04 98         [ 4]    1     CALL QBRAN
      00349F 34 A4                    2     .word DTOF2
      0034A1 CD 08 98         [ 4] 1010     CALL DNEGA 
      0034A4                       1011 DTOF2: 
      0034A4 CD 07 DD         [ 4] 1012     CALL ROT 
      0034A7 CD 2D C3         [ 4] 1013     CALL STEXP 
      0034AA 81               [ 4] 1014     RET 
                                   1015 
                                   1016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1017 ;   F>D  ( f# -- # )
                                   1018 ;  convert float to double 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0034AB                       1020     _HEADER FTOD,3,"F>D"
      0034AB 34 89                    1         .word LINK 
                           0034AD     2         LINK=.
      0034AD 03                       3         .byte 3  
      0034AE 46 3E 44                 4         .ascii "F>D"
      0034B1                          5         FTOD:
      0034B1 CD 2D 91         [ 4] 1021     CALL ATEXP ; m e 
      0034B4 CD 07 CC         [ 4] 1022     CALL QDUP
      0034B7                       1023     _QBRAN FTOD9
      0034B7 CD 04 98         [ 4]    1     CALL QBRAN
      0034BA 35 3B                    2     .word FTOD9
      0034BC CD 05 E2         [ 4] 1024     CALL TOR 
      0034BF CD 26 B0         [ 4] 1025     CALL DSIGN 
      0034C2 CD 07 FC         [ 4] 1026     CALL NROT 
      0034C5 CD 26 9F         [ 4] 1027     CALL DABS
      0034C8 CD 05 34         [ 4] 1028     CALL RFROM  
      0034CB CD 06 19         [ 4] 1029     CALL DUPP   
      0034CE CD 06 50         [ 4] 1030     CALL ZLESS 
      0034D1                       1031     _QBRAN FTOD4 
      0034D1 CD 04 98         [ 4]    1     CALL QBRAN
      0034D4 35 06                    2     .word FTOD4
                                   1032 ; negative exponent 
      0034D6 CD 08 EC         [ 4] 1033     CALL ABSS 
      0034D9 CD 05 E2         [ 4] 1034     CALL TOR
      0034DC 20 19            [ 2] 1035     JRA FTOD2  
      0034DE                       1036 FTOD1:
      0034DE CD 08 27         [ 4] 1037     CALL DDUP 
      0034E1 CD 28 90         [ 4] 1038     CALL DZEQUAL 
      0034E4                       1039     _TBRAN FTOD3 
      0034E4 CD 04 A6         [ 4]    1     CALL TBRAN 
      0034E7 34 FE                    2     .word FTOD3 
      0034E9                       1040     _DOLIT 10 
      0034E9 CD 04 6F         [ 4]    1     CALL DOLIT 
      0034EC 00 0A                    2     .word 10 
      0034EE CD 26 CA         [ 4] 1041     CALL DSLMOD 
      0034F1 CD 07 DD         [ 4] 1042     CALL ROT 
      0034F4                       1043     _DROP
      0034F4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034F7                       1044 FTOD2:      
      0034F7                       1045     _DONXT FTOD1
      0034F7 CD 04 83         [ 4]    1     CALL DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0034FA 34 DE                    2     .word FTOD1 
      0034FC 20 32            [ 2] 1046     JRA FTOD8   
      0034FE                       1047 FTOD3: 
      0034FE CD 05 34         [ 4] 1048     CALL RFROM 
      003501                       1049     _DROP 
      003501 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003504 20 2A            [ 2] 1050     JRA FTOD8  
                                   1051 ; positive exponent 
      003506                       1052 FTOD4:
      003506 CD 05 E2         [ 4] 1053     CALL TOR 
      003509 20 20            [ 2] 1054     JRA FTOD6
      00350B                       1055 FTOD5:
      00350B CD 08 27         [ 4] 1056     CALL DDUP 
      00350E                       1057     _DOLIT 0XCCCC
      00350E CD 04 6F         [ 4]    1     CALL DOLIT 
      003511 CC CC                    2     .word 0XCCCC 
      003513                       1058     _DOLIT 0XCCC  
      003513 CD 04 6F         [ 4]    1     CALL DOLIT 
      003516 0C CC                    2     .word 0XCCC 
      003518 CD 28 CD         [ 4] 1059     CALL DGREAT 
      00351B                       1060     _TBRAN FTOD3 
      00351B CD 04 A6         [ 4]    1     CALL TBRAN 
      00351E 34 FE                    2     .word FTOD3 
      003520                       1061     _DOLIT 10 
      003520 CD 04 6F         [ 4]    1     CALL DOLIT 
      003523 00 0A                    2     .word 10 
      003525 CD 0C 03         [ 4] 1062     CALL ZERO 
      003528 CD 2A 79         [ 4] 1063     CALL DSTAR 
      00352B                       1064 FTOD6: 
      00352B                       1065     _DONXT FTOD5 
      00352B CD 04 83         [ 4]    1     CALL DONXT 
      00352E 35 0B                    2     .word FTOD5 
      003530                       1066 FTOD8:
      003530 CD 07 DD         [ 4] 1067     CALL ROT 
      003533                       1068     _QBRAN FTOD9 
      003533 CD 04 98         [ 4]    1     CALL QBRAN
      003536 35 3B                    2     .word FTOD9
      003538 CD 08 98         [ 4] 1069     CALL DNEGA
      00353B                       1070 FTOD9:          
      00353B 81               [ 4] 1071     RET 
                                   1072 
                                   1073 
                                   1074 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1075 ;   F0< ( f# -- f )
                                   1076 ;   true if f#<0
                                   1077 ;;;;;;;;;;;;;;;;;;;;;;;;
      00353C                       1078     _HEADER FZLESS,3,"F0<"
      00353C 34 AD                    1         .word LINK 
                           00353E     2         LINK=.
      00353E 03                       3         .byte 3  
      00353F 46 30 3C                 4         .ascii "F0<"
      003542                          5         FZLESS:
      003542 CD 2D 91         [ 4] 1079     CALL ATEXP 
      003545                       1080     _DROP 
      003545 1C 00 02         [ 2]    1     ADDW X,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      003548 CD 06 29         [ 4] 1081     CALL SWAPP 
      00354B                       1082     _DROP 
      00354B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00354E CD 06 50         [ 4] 1083     CALL ZLESS 
      003551 81               [ 4] 1084     RET
                                   1085 
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1087 ;   F< ( f#1 f#2 -- f )
                                   1088 ; true if f#1 < f#1 
                                   1089 ;;;;;;;;;;;;;;;;;;;;;;;
      003552                       1090     _HEADER FLESS,2,"F<"
      003552 35 3E                    1         .word LINK 
                           003554     2         LINK=.
      003554 02                       3         .byte 2  
      003555 46 3C                    4         .ascii "F<"
      003557                          5         FLESS:
      003557 CD 32 0A         [ 4] 1091     CALL FSUB  
      00355A CC 35 42         [ 2] 1092     JP FZLESS
                                   1093 
                                   1094 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1095 ;   F> ( f#1 f#2 -- f )
                                   1096 ;   true fi f#1>f#2
                                   1097 ;;;;;;;;;;;;;;;;;;;;;;;;;
      00355D                       1098     _HEADER FGREAT,2,"F>"
      00355D 35 54                    1         .word LINK 
                           00355F     2         LINK=.
      00355F 02                       3         .byte 2  
      003560 46 3E                    4         .ascii "F>"
      003562                          5         FGREAT:
      003562 CD 27 BB         [ 4] 1099     CALL DSWAP 
      003565 CC 35 57         [ 2] 1100     JP FLESS 
                                   1101 
                                   1102 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1103 ;   F= ( f#1 f#2 -- f ) 
                                   1104 ;   true fi f#1==f#2 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;
      003568                       1106     _HEADER FEQUAL,2,"F="
      003568 35 5F                    1         .word LINK 
                           00356A     2         LINK=.
      00356A 02                       3         .byte 2  
      00356B 46 3D                    4         .ascii "F="
      00356D                          5         FEQUAL:
      00356D CC 28 AC         [ 2] 1107     JP DEQUAL 
                                   1108 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1110 ;   F0= ( f# -- f )
                                   1111 ;   true if f# is 0.0 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      003570                       1113     _HEADER FZEQUAL,3,"F0="
      003570 35 6A                    1         .word LINK 
                           003572     2         LINK=.
      003572 03                       3         .byte 3  
      003573 46 30 3D                 4         .ascii "F0="
      003576                          5         FZEQUAL:
      003576 CD 2D 91         [ 4] 1114     CALL ATEXP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      003579                       1115     _DROP 
      003579 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00357C CC 28 90         [ 2] 1116     JP DZEQUAL  
                                   1117 
                                   1118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1119 ;  FNEGATE ( f#1 -- f#2 )
                                   1120 ;  f#2 is negation of f#1 
                                   1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00357F                       1122     _HEADER FNEGA,7,"FNEGATE"
      00357F 35 72                    1         .word LINK 
                           003581     2         LINK=.
      003581 07                       3         .byte 7  
      003582 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      003589                          5         FNEGA:
      003589 CD 2D 91         [ 4] 1123     CALL ATEXP 
      00358C CD 05 E2         [ 4] 1124     CALL TOR 
      00358F CD 08 98         [ 4] 1125     CALL DNEGA
      003592 CD 05 34         [ 4] 1126     CALL RFROM 
      003595 CD 2D C3         [ 4] 1127     CALL STEXP 
      003598 CD 2D 44         [ 4] 1128     CALL SFN 
      00359B 81               [ 4] 1129     RET 
                                   1130 
                                   1131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1132 ;  FABS ( f#1 -- abs(f#1) )
                                   1133 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00359C                       1134     _HEADER FABS,4,"FABS"
      00359C 35 81                    1         .word LINK 
                           00359E     2         LINK=.
      00359E 04                       3         .byte 4  
      00359F 46 41 42 53              4         .ascii "FABS"
      0035A3                          5         FABS:
      0035A3 CD 2D 91         [ 4] 1135     CALL ATEXP 
      0035A6 CD 05 E2         [ 4] 1136     CALL TOR 
      0035A9 CD 06 19         [ 4] 1137     CALL DUPP 
      0035AC                       1138     _DOLIT 0X80 
      0035AC CD 04 6F         [ 4]    1     CALL DOLIT 
      0035AF 00 80                    2     .word 0X80 
      0035B1 CD 06 76         [ 4] 1139     CALL ANDD 
      0035B4                       1140     _QBRAN FABS1
      0035B4 CD 04 98         [ 4]    1     CALL QBRAN
      0035B7 35 BC                    2     .word FABS1
      0035B9 CD 08 98         [ 4] 1141     CALL DNEGA 
      0035BC                       1142 FABS1: 
      0035BC CD 05 34         [ 4] 1143     CALL RFROM 
      0035BF CD 2D C3         [ 4] 1144     CALL STEXP 
      0035C2 CD 2D 44         [ 4] 1145     CALL SFN 
      0035C5 81               [ 4] 1146     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   4651 .endif 
                                   4652 
                                   4653 ;===============================================================
                                   4654 
                           00359E  4655 LASTN =	LINK   ;last name defined
                                   4656 
                                   4657 ; application code begin here
      003600                       4658 	.bndry 128 ; align on flash block  
      003600                       4659 app_space: 
                                   4660 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0008F5 R   |   6 ABOR1      0013FB R
  6 ABOR2      001412 R   |   6 ABORQ      0013F3 R   |   6 ABORT      0013E4 R
  6 ABRTQ      0016DE R   |   6 ABSS       0008EC R   |   6 ACCEP      00137A R
  6 ACCP1      001383 R   |   6 ACCP2      0013A9 R   |   6 ACCP3      0013AC R
  6 ACCP4      0013AE R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007BC R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0016C9 R   |   6 AGAIN      001613 R
  6 AHEAD      001676 R   |   6 ALLOT      001520 R   |   6 ANDD       000676 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         0004E3 R   |   6 ATEXE      000D13 R
  6 ATEXP      002D91 R   |   6 ATEXP1     002DA6 R   |   6 ATEXP2     002DB6 R
  6 AUTORUN    000129 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E0 R   |     B19200  =  000003     |   6 B19K2      0003BD R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       00038E R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039C R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003CE R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AC R   |   6 BACK1      001322 R   |   6 BASE       0006DF R
    BASEE   =  00000A     |   6 BAUD       0003F0 R   |     BCNT    =  000001 
  6 BCOMP      001563 R   |   6 BDIGS      000E0B R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0015F5 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001177 R   |   6 BKSP       0012F2 R   |     BKSPP   =  000008 
  6 BLANK      000BF6 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004B4 R   |     BTW     =  000001 
  6 BUF2ROW    0021F4 R   |   6 BYE        0000B6 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     00243D R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000501 R   |   6 CCOMMA     001545 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000B7B R
  6 CELLP      000B6C R   |   6 CELLS      000B8A R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000F61 R
  6 CHAR2      000F64 R   |   6 CHKIVEC    0020E2 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000D46 R
  6 CMOV2      000D5A R   |   6 CMOV3      000D6E R   |   6 CMOVE      000D2A R
    CNT     =  000001     |     CNTDWN  =  000032     |   6 CNTXT      000762 R
  6 COLD       001BE3 R   |   6 COLD1      001BE3 R   |   6 COLON      0018C7 R
  6 COMMA      00152E R   |   6 COMPI      001573 R   |     COMPO   =  000040 
  6 CONSTANT   001971 R   |   6 COPYRIGH   001B2D R   |   6 COUNT      000CC6 R
  6 CPP        00077E R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000F89 R   |   6 CREAT      00190D R   |     CRR     =  00000D 
  6 CSTOR      0004F0 R   |   6 CTABLE     00245E R   |   6 CTAT       00247F R
  6 CTINIT     0024A7 R   |   6 D2SLASH    0029EA R   |   6 D2STAR     002A01 R
  6 DABS       00269F R   |   6 DABS1      0026A7 R   |   6 DAT        000CAA R
    DATSTK  =  001680     |   6 DBLVER     00252B R   |   6 DCLZ       0027E9 R
  6 DCLZ1      0027F2 R   |   6 DCLZ4      0027FB R   |   6 DCLZ8      002808 R
  6 DCONST     0019A6 R   |   6 DDIG       00270B R   |   6 DDIGS      002724 R
  6 DDOT       00273B R   |   6 DDOT0      00274F R   |   6 DDOT1      002765 R
  6 DDROP      00081C R   |   6 DDSLMOD    002B8E R   |   6 DDSTAR3    002AD2 R
  6 DDUP       000827 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000EBB R   |   6 DEPTH      000C45 R   |   6 DEQU4      0028C1 R
  6 DEQUAL     0028AC R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGREAT     0028CD R   |   6 DGTQ1      000F00 R   |   6 DI         0000C4 R
  6 DIG        000E34 R   |   6 DIGIT      000DCF R   |   6 DIGS       000E45 R
  6 DIGS1      000E45 R   |   6 DIGS2      000E52 R   |   6 DIGTQ      000ECF R
    DISCOVER=  000000     |   6 DLESS      0028D8 R   |   6 DLESS4     0028EC R
  6 DLITER     0029AA R   |   6 DLSHIFT    002A1D R   |   6 DLSHIFT1   002A30 R
  6 DLSHIFT2   002A45 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0008B3 R   |   6 DNEGA      000898 R   |   6 DOCONST    001991 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

  6 DOLIT      00046F R   |   6 DONXT      000483 R   |     DOORBELL=  000000 
  6 DOSTR      000F99 R   |   6 DOT        00102F R   |   6 DOT1       001045 R
  6 DOTI1      001AF6 R   |   6 DOTID      001AE0 R   |   6 DOTO1      001487 R
  6 DOTOK      00146D R   |   6 DOTPR      001158 R   |   6 DOTQ       0016F8 R
  6 DOTQP      000FB6 R   |   6 DOTR       000FC4 R   |   6 DOTS       001A82 R
  6 DOTS1      001A8D R   |   6 DOTS2      001A96 R   |   6 DOVAR      0006CF R
  6 DOVER      0029D1 R   |   6 DO_DCONS   0019C9 R   |     DP      =  000005 
  6 DPLUS      002BE4 R   |   6 DPLUS1     002C0B R   |   6 DRAT       002940 R
  6 DRFROM     002928 R   |   6 DROP       00060F R   |   6 DROT       002855 R
  6 DRSHIFT    002A56 R   |   6 DRSHIFT1   002A5D R   |   6 DRSHIFT2   002A73 R
  6 DSIGN      0026B0 R   |   6 DSIGN1     0026BA R   |   6 DSLA8      002BC0 R
  6 DSLA9      002BCD R   |   6 DSLASH     002BD5 R   |   6 DSLMOD     0026CA R
  6 DSLMOD3    0026E5 R   |   6 DSLMOD4    0026F1 R   |   6 DSLMODa    0026EC R
  6 DSLMODb    0026F7 R   |   6 DSSTAR     002795 R   |   6 DSSTAR3    0027B2 R
  6 DSTAR      002A79 R   |   6 DSTOR      000C91 R   |   6 DSUB       002C16 R
  6 DSUB1      002C3D R   |   6 DSWAP      0027BB R   |   6 DTOF       00348D R
  6 DTOF1      003496 R   |   6 DTOF2      0034A4 R   |   6 DTOR       00290A R
  6 DUMP       001A38 R   |   6 DUMP1      001A4F R   |   6 DUMP3      001A71 R
  6 DUMPP      001A07 R   |   6 DUPP       000619 R   |   6 DVARIA     00295E R
    DVER_MAJ=  000001     |     DVER_MIN=  000000     |   6 DZEQUAL    002890 R
  6 DZLESS     0028F3 R   |   6 DZLESS1    0028FD R   |   6 EDIGS      000E70 R
  6 EDOT       002E17 R   |   6 EDOT0      002E2E R   |   6 EDOT2      002E3A R
  6 EDOT3      002E50 R   |   6 EDOT4      002E7C R   |   6 EDOT5      002E9B R
  6 EECSTORE   001E93 R   |   6 EEPCP      001CB9 R   |   6 EEPLAST    001C8C R
  6 EEPROM     001C74 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_R=  000010     |     EEPROM_S=  000800     |   6 EEPRUN     001CA3 R
  6 EEPVP      001CCF R   |   6 EESTORE    001EDF R   |   6 EE_CCOMM   0021A9 R
  6 EE_COMMA   002188 R   |   6 EE_CREAD   001E24 R   |   6 EE_READ    001E02 R
  6 EI         0000BD R   |   6 ELSEE      00164E R   |   6 EMIT       000436 R
  6 ENEPER     0023C9 R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        000907 R   |   6 EQUAL      0008FA R   |   6 ERASE      000D9D R
    ERR     =  00001B     |   6 EVAL       0014B0 R   |   6 EVAL1      0014B0 R
  6 EVAL2      0014C9 R   |   6 EXE1       000D21 R   |   6 EXECU      0004C4 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000DF7 R   |   6 FABS       0035A3 R   |   6 FABS1      0035BC R
  6 FADDR      002276 R   |   6 FALGN4     003168 R   |   6 FALGN6     003177 R
  6 FALGN7     00319E R   |   6 FALGN71    0031AD R   |   6 FALGN72    0031C9 R
  6 FALGN8     0031CC R   |   6 FALIGN     00312F R   |   6 FALSE      000868 R
  6 FARAT      001D3A R   |   6 FARCAT     001D46 R   |   6 FC_XOFF    000463 R
  6 FC_XON     00044D R   |   6 FDOT       002EAA R   |   6 FDOT0      002EE8 R
  6 FDOT1      002ED7 R   |   6 FDOT10     002F3B R   |   6 FDOT2      002EF6 R
  6 FDOT3      002F0C R   |   6 FDOT6      002F19 R   |   6 FDOT7      002F1B R
  6 FDOT8      002F23 R   |   6 FDOT9      002F2B R   |   6 FEQUAL     00356D R
  6 FER        002CAF R   |   6 FGREAT     003562 R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000D7D R   |   6 FILL0      000D8B R
  6 FILL1      000D93 R   |   6 FIND       00124E R   |   6 FIND1      00126C R
  6 FIND2      00129A R   |   6 FIND3      0012A6 R   |   6 FIND4      0012BA R
  6 FIND5      0012C7 R   |   6 FIND6      0012AB R   |   6 FINIT      002CA5 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
  6 FLESS      003557 R   |   6 FLOATQ     002FB3 R   |   6 FLOATQ0    002FBB R
  6 FLOATQ1    00301A R   |   6 FLOATQ2    003023 R   |   6 FLOATQ3    00302B R
  6 FLOATQ4    00303F R   |   6 FLOAT_ER   00305A R   |   6 FLOAT_ER   003057 R
    FLOAT_MA=  000001     |     FLOAT_MI=  000000     |     FLSI    =  01F400 
  6 FMOVE      002281 R   |   6 FMOVE2     0022B2 R   |   6 FNE        002CD2 R
  6 FNEGA      003589 R   |   6 FOR        0015BD R   |   6 FORGET     00015A R
  6 FORGET1    000189 R   |   6 FORGET2    00020F R   |   6 FORGET4    000218 R
  6 FORGET6    0001D1 R   |   6 FOV        002CED R   |   6 FPLUS      0031D8 R
  6 FPLUS1     0031F8 R   |   6 FPSTOR     001C55 R   |   6 FPSW       002C81 R
    FPTR    =  000034     |   6 FREEVAR    000225 R   |   6 FREEVAR4   00025B R
  6 FRESET     002C93 R   |   6 FSLASH     0033BE R   |   6 FSLASH1    003400 R
  6 FSLASH8    003463 R   |   6 FSLASH9    00347A R   |   6 FSTAR      003397 R
  6 FSUB       00320A R   |   6 FSUB1      00322A R   |   6 FTOD       0034B1 R
  6 FTOD1      0034DE R   |   6 FTOD2      0034F7 R   |   6 FTOD3      0034FE R
  6 FTOD4      003506 R   |   6 FTOD5      00350B R   |   6 FTOD6      00352B R
  6 FTOD8      003530 R   |   6 FTOD9      00353B R   |   6 FVER       002C4F R
  6 FZE        002CBC R   |   6 FZEQUAL    003576 R   |   6 FZLESS     003542 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000953 R   |   6 GREAT1     00095E R
  6 HDOT       001013 R   |   6 HERE       000CDD R   |   6 HEX        000EA6 R
  6 HI         001B98 R   |   6 HLD        00074F R   |   6 HOLD       000E1B R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     0018D8 R   |   6 IFETCH     0015DB R
  6 IFF        001626 R   |   6 IFMOVE     00235A R   |     IMEDD   =  000080 
  6 IMMED      0018EA R   |   6 INCH       00042A R   |   6 INC_FPTR   001DCF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

  6 INITOFS    0018A0 R   |   6 INN        0006FD R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      00144F R   |   6 INTER      001425 R   |   6 INTQ       002503 R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      000875 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      0017EF R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JFETCH     0015E6 R
    JPIMM   =  0000CC     |   6 JSRC       001844 R   |   6 JSRC1      001867 R
  6 JSRC2      00188A R   |   6 KEY        000F0F R   |   6 KTAP       00133F R
  6 KTAP1      001362 R   |   6 KTAP2      001365 R   |   6 LAST       00078E R
  6 LASTN   =  00359E R   |   6 LBRAC      00145C R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000926 R
    LF      =  00000A     |   6 LINK    =  00359E R   |   6 LITER      001595 R
  6 LN2S       002425 R   |   6 LOCAL      000554 R   |   6 LOCK       001DBB R
  6 LOG2S      00240F R   |   6 LSCALE     003079 R   |   6 LSHIFT     000BB5 R
  6 LSHIFT1    000BBE R   |   6 LSHIFT4    000BC6 R   |   6 LT1        000931 R
    MASKK   =  001F7F     |   6 MAX        00096B R   |   6 MAX1       000975 R
    MAX_MANT=  7FFFFF     |   6 MIN        00097F R   |   6 MIN1       000989 R
  6 MMOD1      000A38 R   |   6 MMOD2      000A4C R   |   6 MMOD3      000A63 R
  6 MMSM0      0009C8 R   |   6 MMSM1      0009D8 R   |   6 MMSM3      0009DC R
  6 MMSM4      0009E8 R   |   6 MMSMa      0009E3 R   |   6 MMSMb      0009EE R
  6 MMSTA1     0032C8 R   |   6 MMSTA2     0032D3 R   |   6 MMSTA3     0032DE R
  6 MMSTA4     003349 R   |   6 MMSTA5     00335B R   |   6 MMSTA6     003371 R
  6 MMSTA7     00338E R   |   6 MMSTAR     0032BD R   |   6 MODD       000AB3 R
  6 MONE       000C1C R   |     MS      =  000030     |   6 MSEC       0002D0 R
  6 MSMOD      000A1B R   |   6 MSTA1      000B44 R   |   6 MSTAR      000B21 R
    NAFR    =  004804     |   6 NAMEQ      0012E7 R   |   6 NAMET      0011F8 R
    NCLKOPT =  004808     |   6 NDROT      002819 R   |   6 NEGAT      000886 R
  6 NEG_SIGN   00256E R   |   6 NEX1       000490 R   |   6 NEXT       0015CC R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NRAT       00059F R   |   6 NRDROP     00057B R
  6 NROT       0007FC R   |   6 NRSTO      0005BE R   |   6 NTIB       00070D R
    NUBC    =  004802     |     NUCLEO  =  000001     |   6 NUFQ       000F25 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 NUFQ1      000F3E R   |   6 NUMBQ      0025DA R   |   6 NUMQ0      00261B R
  6 NUMQ1      00263D R   |   6 NUMQ3      002667 R   |   6 NUMQ4      002685 R
  6 NUMQ8      00268E R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     0007B3 R   |     OFS     =  000005 
  6 ONE        000C0E R   |   6 ONEM       000BA4 R   |   6 ONEP       000B97 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000049 R
  6 ORR        00068A R   |   6 OUTPUT     00043B R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000641 R   |   6 OVERT      0017BD R   |     PA      =  000000 
  6 PACKS      000DAE R   |   6 PAD        000CEE R   |   6 PAREN      001167 R
  6 PARS       001060 R   |   6 PARS1      00108B R   |   6 PARS2      0010B6 R
  6 PARS3      0010B9 R   |   6 PARS4      0010C2 R   |   6 PARS5      0010E5 R
  6 PARS6      0010FA R   |   6 PARS7      001109 R   |   6 PARS8      001118 R
  6 PARSE      001129 R   |   6 PARSEXP_   002F96 R   |   6 PAUSE      0002E0 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001A1A R   |   6 PDUM2      001A2B R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000C5C R   |   6 PII        002388 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       00083C R   |   6 PNAM1      001762 R   |   6 PRESE      0014D8 R
  6 PRINT_VE   001B69 R   |     PROD1   =  000024     |     PROD2   =  000026 
    PROD3   =  000028     |   6 PROTECTE   000201 R   |   6 PRT_LICE   001B55 R
  6 PSTOR      000C73 R   |     PTR16   =  000035     |     PTR8    =  000036 
  6 PTRPLUS    001DE7 R   |   6 QBRAN      000498 R   |   6 QDUP       0007CC R
  6 QDUP1      0007D6 R   |   6 QKEY       000418 R   |   6 QSTAC      001493 R
  6 QUERY      0013BF R   |   6 QUEST      001052 R   |   6 QUIT       0014F5 R
  6 QUIT1      0014FD R   |   6 QUIT2      001500 R   |   6 RAM2EE     002222 R
    RAMBASE =  000000     |   6 RAMLAST    0007A1 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027E R
  6 RAT        000545 R   |   6 RBRAC      001831 R   |   6 REPEA      0016A9 R
  6 RFREE      002209 R   |   6 RFROM      000534 R   |     ROP     =  004800 
  6 ROT        0007DD R   |   6 ROW2BUF    0021CB R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000511 R   |     RPP     =  0017FF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

  6 RPSTO      00051E R   |   6 RSCALE     00309D R   |   6 RSHIFT     000BD1 R
  6 RSHIFT1    000BDA R   |   6 RSHIFT4    000BE2 R   |     RST_SR  =  0050B3 
  6 RT12_2     0023F8 R   |   6 SAME1      001216 R   |   6 SAME2      00123F R
  6 SAMEQ      00120E R   |   6 SCAL1      003253 R   |   6 SCAL2      003274 R
  6 SCALDN2    003121 R   |   6 SCALDN3    003124 R   |   6 SCALEDOW   0030F5 R
  6 SCALETOM   00324D R   |   6 SCALEUP    0030BE R   |   6 SCALEUP2   0030F1 R
  6 SCALEUP3   0030F4 R   |   6 SCOM1      001797 R   |   6 SCOM2      00179A R
  6 SCOMP      001779 R   |   6 SEED       000265 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      0017CD R   |   6 SETISP     0000D0 R
  6 SET_RAML   00195A R   |   6 SFN        002D44 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SFV        002D78 R   |   6 SFZ        002D0D R
  6 SIGN       000E5A R   |   6 SIGN1      000E6A R   |   6 SLASH      000ABD R
  6 SLMOD      000A6B R   |   6 SLMOD1     000A9D R   |   6 SLMOD8     000AAA R
  6 SNAME      00172C R   |     SP0     =  00002C     |   6 SPACE      000F47 R
  6 SPACS      000F56 R   |   6 SPAT       0005F9 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      000606 R   |   6 SQRT10     0023E1 R   |   6 SQRT2      00239F R
  6 SQRT3      0023B6 R   |   6 SSMOD      000B4D R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000B16 R   |   6 STASL      000B5E R
  6 STEXP      002DC3 R   |   6 STEXP1     002DD9 R   |   6 STEXP2     002E03 R
  6 STOD       0008BB R   |   6 STORE      0004D1 R   |   6 STO_SIGN   002586 R
  6 STR        000E88 R   |   6 STRCQ      00159D R   |   6 STRQ       0016EB R
  6 STRQP      000FB2 R   |   6 SUBB       0008D2 R   |   6 SWAPP      000629 R
    SWIM_CSR=  007F80     |   6 TAP        001329 R   |   6 TBOOT      001BD7 R
  6 TBRAN      0004A6 R   |   6 TBUF       00071D R   |     TBUFFBAS=  001680 
  6 TCHAR      000C2D R   |   6 TEMP       0006EE R   |   6 TEVAL      000740 R
  6 TFLASH     00072F R   |   6 THENN      00163B R   |   6 TIB        000CFF R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       00150C R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000310 R   |   6 TIMER      0002FA R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001AB0 R
  6 TNAM3      001ACE R   |   6 TNAM4      001AD4 R   |   6 TNAME      001AAD R
  6 TOFLASH    000335 R   |   6 TOKEN      0011EA R   |   6 TOR        0005E2 R
  6 TORAM      000375 R   |   6 TRUE       000857 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000BE9 R   |   6 TYPE1      000F76 R   |   6 TYPE2      000F7C R
  6 TYPES      000F71 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDIV10     003275 R   |   6 UDOT       000FFF R   |   6 UDOTR      000FDF R
  6 UDSLA3     002B11 R   |   6 UDSLA4     002B37 R   |   6 UDSLA7     002B68 R
  6 UDSLA8     002B73 R   |   6 UDSLMOD    002ADC R   |   6 UDSSTAR    002773 R
  6 UEND       000047 R   |     UFPSW   =  000008     |   6 UGREAT     00093D R
  6 UGREAT1    000948 R   |     UHLD    =  000014     |     UINN    =  00000C 
    UINTER  =  000012     |     ULAST   =  00001C     |   6 ULES1      00091B R
  6 ULESS      000910 R   |   6 UMMOD      0009B1 R   |   6 UMOD10     003237 R
  6 UMSTA      000ACC R   |   6 UNIQ1      001729 R   |   6 UNIQU      00170A R
  6 UNLKEE     001D55 R   |   6 UNLKFL     001D74 R   |   6 UNLOCK     001D93 R
  6 UNTIL      001600 R   |     UOFFSET =  00001E     |   6 UPDATCP    001D12 R
  6 UPDATLAS   001CE9 R   |   6 UPDATPTR   002315 R   |   6 UPDATRUN   001D01 R
  6 UPDATVP    001D29 R   |   6 UPL1       0006CB R   |   6 UPLUS      0006B4 R
    UPP     =  000006     |   6 UPPER      0011AD R   |   6 UPPER1     0011D0 R
  6 UPPER2     0011D9 R   |     URLAST  =  000022     |   6 USLMOD     000A00 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  000020     |     UTIB    =  000010     |     UTMP    =  00000A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

  6 UTYP1      0019EA R   |   6 UTYP2      0019F9 R   |   6 UTYPE      0019E5 R
    UVP     =  000018     |   6 UZERO      00002B R   |   6 VARIA      001927 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000004 
  6 VPP        000770 R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_DOU=  000001     |     WANT_FLO=  000001 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      00168F R   |   6 WITHI      000996 R
  6 WORDD      001193 R   |   6 WORDS      001B0A R   |   6 WORS1      001B10 R
  6 WORS2      001B2C R   |   6 WR_BYTE    001E3E R   |   6 WR_WORD    001E63 R
  6 WTABLE     00246D R   |   6 WTAT       002491 R   |   6 WTINIT     0024D6 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMEM_SIZ=  017830 
    XOFF    =  000013     |     XON     =  000011     |   6 XORR       00069F R
    XTEMP   =  000024     |     YTEMP   =  000026     |     YTMP    =  000003 
  6 ZEQ1       0028A0 R   |   6 ZEQU1      00066C R   |   6 ZEQUAL     000662 R
  6 ZERO       000C03 R   |   6 ZL1        000659 R   |   6 ZLESS      000650 R
  6 app_spac   003600 R   |   6 baudrate   00037B R   |   6 block_er   001F29 R
  6 clear_ra   000019 R   |   6 clock_in   000064 R   |   6 copy_buf   001F89 R
  6 copy_buf   001FA8 R   |   6 copy_pro   001FA8 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 do2lit     0029B5 R   |   6 erase_fl   001F4B R   |   6 fmove_do   0022FE R
  6 main       000016 R   |   6 next_row   0022BB R   |   6 no_move    002305 R
  6 nsign      00255D R   |   6 parse_di   00258A R   |   6 parse_ex   002F4B R
  6 pristine   002029 R   |   6 proceed_   001F4E R   |   6 reboot     000327 R
  6 reset_ve   002090 R   |   6 row_eras   001F09 R   |   6 row_eras   001F62 R
  6 row_eras   001F89 R   |   6 set_opti   001FFD R   |   6 set_vect   002131 R
  6 uart_ini   000076 R   |   6 write_ro   001FCD R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3600   flags    0

