ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; to include floating point 
                                        ; library 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        .if DISCOVERY
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        UART_BRR1=UART2_BRR1
                                        UART_BRR2=UART2_BRR2
                                        UART_CR1=UART2_CR1
                                        UART_CR2=UART2_CR2
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000001    89 .if NUCLEO 
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    94 .else ; DISCOVERY
                                     95 STACK   =	0x7FF 	;system (return) stack empty 
                                     96 DATSTK  =	0x680	;data stack  empty
                                     97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UFBASE = UBASE+2  ; floating point base 
                           00000A   113 UFPSW = UFBASE+2  ; floating point state word 
                           00000C   114 UTMP = UFPSW+2    ; temporary storage
                           00000E   115 UINN = UTMP+2     ; >IN tib pointer 
                           000010   116 UCTIB = UINN+2    ; tib count 
                           000012   117 UTIB = UCTIB+2    ; tib address 
                           000014   118 UINTER = UTIB+2   ; interpreter vector 
                           000016   119 UHLD = UINTER+2   ; hold 
                           000018   120 UCNTXT = UHLD+2   ; context, dictionary first link 
                           00001A   121 UVP = UCNTXT+2    ; variable pointer 
                           00001C   122 UCP = UVP+2      ; code pointer
                           00001E   123 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           000022   125 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000024   126 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    127 
                                    128 ;******  System Variables  ******
                           000026   129 XTEMP	=	URLAST +2;address called by CREATE
                           000028   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           000026   131 PROD1 = XTEMP	;space for UM*
                           000028   132 PROD2 = PROD1+2
                           00002A   133 PROD3 = PROD2+2
                           00002C   134 CARRY = PROD3+2
                           00002E   135 SP0	= CARRY+2	;initial data stack pointer
                           000030   136 RP0	= SP0+2		;initial return stack pointer
                           000032   137 MS    =   RP0+2         ; millisecond counter 
                           000034   138 CNTDWN =  MS+2          ; count down timer 
                           000036   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000037   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000038   141 PTR8 = FPTR+2           ; least byte of farptr 
                           00003A   142 SEEDX = PTR8+2          ; PRNG seed X 
                           00003C   143 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    144 
                                    145 ; EEPROM persistant data  
                           004000   146 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   147 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   148 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   149 APP_VP = APP_CP+2  ; free data space pointer 
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000003   155 VER     =     3         ;major release version
                           000000   156 EXT     =     0         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           000011   171 XON     =     17
                           000013   172 XOFF    =     19
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .if NUCLEO
                                    180         bset PC_ODR,#LED2_BIT
                                    181         .else ;DISCOVERY 
                                    182         .if DISCOVERY
                                    183         bres PD_ODR,#LD1_BIT 
                                    184         .endif
                                    185         .endif
                                    186         .endm
                                    187 
                                    188         .macro _ledoff
                                    189         .if NUCLEO 
                                    190         bres PC_ODR,#LED2_BIT
                                    191         .else ;DISCOVERY 
                                    192         .if DISCOVERY
                                    193         bset PD_ODR,#LD1_BIT 
                                    194         .endif 
                                    195         .endif
                                    196         .endm
                                    197 
                                    198 ;**********************************************************
                                    199         .area DATA (ABS)
      000000                        200         .org RAMBASE 
                                    201 ;**********************************************************
                                    202 
                                    203 ;**********************************************************
                                    204         .area SSEG (ABS) ; STACK
      001700                        205         .org 0x1700
      001700                        206         .ds 256 
                                    207 ; space for DATSTK,TIB and STACK         
                                    208 ;**********************************************************
                                    209 
                                    210 ;**********************************************************
                                    211         .area HOME ; vectors table
                                    212 ;**********************************************************
      000000 82 00 00 16            213 	int main	        ; reset
      000004 82 00 00 00            214 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            215 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            216 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            217 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            218 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            219 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            220 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            221 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            222 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            223 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            224 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            225 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            226 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            227 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            228 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            229 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            230 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            231 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            232 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            233 	int NonHandledInterrupt	; irq18
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000054 82 00 00 00            234 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            235 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            236 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            237 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            238 	int Timer4Handler	; irq23
      000068 82 00 00 00            239 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            240 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            241 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            242 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            243 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            244 	int NonHandledInterrupt	; irq29
                                    245 
                                    246 ;**********************************************************
                                    247         .area CODE
                                    248 ;**********************************************************
                                    249 
                                    250 ; non handled interrupt reset MCU
      000000                        251 NonHandledInterrupt:
      000000 A6 80            [ 1]  252         ld a, #0x80
      000002 C7 50 D1         [ 1]  253         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    254 	;iret
                                    255 
                                    256 ; used for milliseconds counter 
                                    257 ; MS is 16 bits counter 
      000005                        258 Timer4Handler:
      000005 72 5F 53 42      [ 1]  259 	clr TIM4_SR 
      000009 BE 32            [ 2]  260         ldw x,MS 
      00000B 5C               [ 1]  261         incw x 
      00000C BF 32            [ 2]  262         ldw MS,x
      00000E BE 34            [ 2]  263         ldw x,CNTDWN 
      000010 27 03            [ 1]  264         jreq 1$
      000012 5A               [ 2]  265         decw x 
      000013 BF 34            [ 2]  266         ldw CNTDWN,x 
      000015                        267 1$:         
      000015 80               [11]  268         iret 
                                    269 
                                    270 
                                    271 ;; Main entry points and COLD start data
      000016                        272 main:
                                    273 ; clear all RAM
      000016 AE 00 00         [ 2]  274 	ldw X,#RAMBASE
      000019                        275 clear_ram0:
      000019 7F               [ 1]  276 	clr (X)
      00001A 5C               [ 1]  277 	incw X
      00001B A3 17 FF         [ 2]  278 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  279 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  280         ldw x,#RPP
      000023 94               [ 1]  281         ldw sp,x
                                    282 ; set SEEDX and SEEDY to 1 
      000024 3C 3B            [ 1]  283         inc SEEDX+1 
      000026 3C 3D            [ 1]  284         inc SEEDY+1          
      000028 CC 00 4B         [ 2]  285 	jp ORIG
                                    286 
                                    287 ; COLD initialize these variables.
      00002B                        288 UZERO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00002B 00 0A                  289         .word      BASEE   ;BASE
      00002D 00 0A                  290         .word      10      ; floating point base 
      00002F 00 00                  291         .word      0       ; floating point state 
      000031 00 00                  292         .word      0       ;tmp
      000033 00 00                  293         .word      0       ;>IN
      000035 00 00                  294         .word      0       ;#TIB
      000037 17 00                  295         .word      TIBB    ;TIB
      000039 13 98                  296         .word      INTER   ;'EVAL
      00003B 00 00                  297         .word      0       ;HLD
      00003D 26 B1                  298         .word      LASTN  ;CNTXT pointer
      00003F 00 80                  299         .word      VAR_BASE   ;variables free space pointer 
      000041 27 80                  300         .word      app_space ; FLASH free space pointer 
      000043 26 B1                  301         .word      LASTN   ;LAST
      000045 00 00                  302         .word      0        ; OFFSET 
      000047 00 00                  303         .word      0       ; TFLASH
                                    304 ;       .word      0       ; URLAST   
      000049 00 00                  305 UEND:   .word      0
                                    306 
      00004B                        307 ORIG:   
                                    308 ; initialize SP
      00004B AE 17 FF         [ 2]  309         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  310         LDW     SP,X
      00004F BF 30            [ 2]  311         LDW     RP0,X
      000051 AE 16 80         [ 2]  312         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2E            [ 2]  313         LDW     SP0,X
                           000001   314 .if NUCLEO        
                                    315 ; initialize PC_5 as output to control LED2
                                    316 ; added by Picatout 
      000056 72 1A 50 0D      [ 1]  317         bset PC_CR1,#LED2_BIT
      00005A 72 1A 50 0E      [ 1]  318         bset PC_CR2,#LED2_BIT
      00005E 72 1A 50 0C      [ 1]  319         bset PC_DDR,#LED2_BIT
                                    320 .endif 
                           000000   321 .if DISCOVERY
                                    322         bset PD_CR1,#LD1_BIT
                                    323         bset PD_CR2,#LD1_BIT
                                    324         bset PD_DDR,#LD1_BIT 
                                    325 .endif
      000062                        326         _ledoff
                           000001     1         .if NUCLEO 
      000062 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    327 ; initialize clock to HSI
                                    328 ; no divisor 16Mhz 
                                    329 ; Added by Picatout 
      000066                        330 clock_init:
      000066 72 5F 50 C6      [ 1]  331         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  332 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   333 .if NUCLEO|DOORBELL
      00006E A6 E1            [ 1]  334 	ld a,#CLK_SWR_HSI
                           000000   335 .else ; DISCOVERY as 16Mhz crystal
                                    336 	ld a,#CLK_SWR_HSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    337 .endif 
      000070 C7 50 C4         [ 1]  338 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  339 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  340 	jrne 1$
                                    341         
                                    342 ; initialize UART, 115200 8N1
      000078                        343 uart_init:
                           000001   344 .if NUCLEO 
      000078 72 14 50 C7      [ 1]  345 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    346 	; configure tx pin
      00007C 72 1A 50 02      [ 1]  347 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000080 72 1A 50 03      [ 1]  348 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000084 72 1A 50 04      [ 1]  349 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    350 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                           000000   351 .else ; DISCOVERY use UART2 
                                    352 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    353 	; configure tx pin
                                    354 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    355 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    356 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    357 .endif
                                    358 ; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 33      [ 1]  359 	mov UART_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 32      [ 1]  360 	mov UART_BRR1,#0x8
      000090 35 0C 52 35      [ 1]  361 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    362 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  363 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  364 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  365 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  366 	bset TIM4_IER,#TIM4_IER_UIE 
                                    367 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  368         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  369         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  370         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  371         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  372         rim
      0000AF CC 1A 9C         [ 2]  373         jp  COLD   ;default=MN1
                                    374 
                                    375 
                                    376 ;; place MCU in sleep mode with
                                    377 ;; halt opcode 
                                    378 ;; BYE ( -- )
      0000B2 00 00                  379         .word 0
                           0000B4   380         LINK=.
      0000B4 03                     381         .byte 3 
      0000B5 42 59 45               382         .ascii "BYE"
      0000B8                        383 BYE: 
      0000B8 8E               [10]  384         halt 
      0000B9 81               [ 4]  385         ret 
                                    386 
                                    387 ; Enable interrupts 
                                    388 ; EI ( -- )
      0000BA 00 B4                  389         .word LINK 
                           0000BC   390         LINK=.
      0000BC 02                     391         .byte 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BD 45 49                  392         .ascii "EI"
      0000BF                        393 EI:
      0000BF 9A               [ 1]  394         rim 
      0000C0 81               [ 4]  395         ret 
                                    396 
                                    397 ; Disable interrupts
                                    398 ; DI ( -- )
      0000C1 00 BC                  399         .word LINK 
                           0000C3   400         LINK=.
      0000C3 02                     401         .byte 2 
      0000C4 44 49                  402         .ascii "DI"
      0000C6                        403 DI:
      0000C6 9B               [ 1]  404         sim 
      0000C7 81               [ 4]  405         ret 
                                    406 
                                    407 ; set interrupt priority level 
                                    408 ; SET-ISP ( n1 n2 -- )
                                    409 ; n1 level {1..3}
                                    410 ; n2 vector {0..29}
      0000C8 00 C3                  411         .word LINK 
                           0000CA   412         LINK=.
      0000CA 07                     413         .byte 7 
      0000CB 53 45 54 2D 49 53 50   414         .ascii "SET-ISP"
      0000D2                        415 SETISP:
      0000D2 90 93            [ 1]  416         ldw y,x 
      0000D4 90 FE            [ 2]  417         ldw y,(y)
      0000D6 A6 04            [ 1]  418         ld a,#4 ; 4 slot per register 
                                    419 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  420         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  421         and a,#3 
      0000DC 48               [ 1]  422         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  423         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  424         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  425         clrw y 
      0000E4 90 97            [ 1]  426         ld yl,a 
      0000E6 1D 00 02         [ 2]  427         subw x,#CELLL 
      0000E9 FF               [ 2]  428         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  429         ldw y,x 
      0000EC 90 EE 02         [ 2]  430         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  431         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  432         subw x,#CELLL 
      0000F4 FF               [ 2]  433         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 C8         [ 4]  434         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 04 79         [ 4]  435         call DOLIT 
      0000FB 00 03                  436         .word 3
      0000FD CD 05 AE         [ 4]  437         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 0A 97         [ 4]  438         call LSHIFT ; creat slot mask 
      000103 CD 07 B3         [ 4]  439         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 EA         [ 4]  440         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 05 67         [ 4]  441         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 07 59         [ 4]  442         call ROT  ; ( reg lshift level )
      00010F CD 05 AE         [ 4]  443         call SWAPP ; ( reg level lshift )
      000112 CD 0A 97         [ 4]  444         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 05 48         [ 4]  445         call RFROM ; ( reg slot_level masked_val )
      000118 CD 05 FE         [ 4]  446         call ORR   ; ( reg updated_rval )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00011B CD 05 AE         [ 4]  447         call SWAPP 
      00011E CD 05 04         [ 4]  448         call CSTOR
                                    449 
                                    450 ; sélectionne l'application 
                                    451 ; qui démarre automatique lors 
                                    452 ; d'un COLD start 
      000121 00 CA                  453         .word LINK 
                           000123   454         LINK=.
      000123 07                     455         .byte 7
      000124 41 55 54 4F 52 55 4E   456         .ascii "AUTORUN"
      00012B                        457 AUTORUN:
      00012B CD 11 5D         [ 4]  458         call TOKEN 
      00012E CD 05 9E         [ 4]  459         call DUPP 
      000131 CD 04 AC         [ 4]  460         call QBRAN 
      000134 02 11                  461         .word FORGET2
      000136 CD 12 5A         [ 4]  462         call NAMEQ
      000139 CD 07 48         [ 4]  463         call QDUP 
      00013C CD 04 AC         [ 4]  464         call QBRAN 
      00013F 02 11                  465         .word FORGET2
      000141 CD 05 94         [ 4]  466         call DROP 
      000144 1D 00 04         [ 2]  467         subw x,#2*CELLL 
      000147 90 5F            [ 1]  468         clrw y 
      000149 FF               [ 2]  469         ldw (x),y 
      00014A 90 AE 40 02      [ 2]  470         ldw y,#APP_RUN 
      00014E EF 02            [ 2]  471         ldw (2,x),y 
      000150 CC 1D 98         [ 2]  472         jp EESTORE 
                                    473 
                                    474 ;; Reset dictionary pointer before 
                                    475 ;; forgotten word. RAM space and 
                                    476 ;; interrupt vector defined after 
                                    477 ;; must be resetted also.
      000153 01 23                  478         .word LINK 
                           000155   479         LINK=.
      000155 06                     480         .byte 6
      000156 46 4F 52 47 45 54      481         .ascii "FORGET" 
      00015C                        482 FORGET: 
      00015C CD 11 5D         [ 4]  483         call TOKEN
      00015F CD 05 9E         [ 4]  484         call DUPP 
      000162 CD 04 AC         [ 4]  485         call QBRAN 
      000165 02 11                  486         .word FORGET2
      000167 CD 12 5A         [ 4]  487         call NAMEQ ; ( a -- ca na | a F )
      00016A CD 07 48         [ 4]  488         call QDUP 
      00016D CD 04 AC         [ 4]  489         call QBRAN 
      000170 02 11                  490         .word FORGET2
                                    491 ; only forget users words 
      000172 CD 05 9E         [ 4]  492         call DUPP ; ( ca na na )
      000175 CD 04 79         [ 4]  493         call DOLIT 
      000178 27 80                  494         .word app_space 
      00017A CD 05 AE         [ 4]  495         call SWAPP 
      00017D CD 08 59         [ 4]  496         call  ULESS 
      000180 CD 04 AC         [ 4]  497         call QBRAN 
      000183 01 D3                  498         .word FORGET6 
                                    499 ; ( ca na -- )        
                                    500 ;reset ivec with address >= ca
      000185 CD 05 AE         [ 4]  501         call SWAPP ; ( na ca -- ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000188 CD 1F 9B         [ 4]  502         call CHKIVEC ; ( na -- ) 
                                    503 ; start at LAST and link back to na 
                                    504 ; if variable found reset VP at that point.
      00018B                        505 FORGET1:
      00018B CD 07 0A         [ 4]  506         call LAST 
      00018E CD 04 F7         [ 4]  507         call AT 
      000191 CD 05 9E         [ 4]  508         call DUPP  ; ( -- na last last )
      000194 CD 02 27         [ 4]  509         call FREEVAR ; ( -- na last )
      000197 CD 05 9E         [ 4]  510         call DUPP 
      00019A CD 04 79         [ 4]  511         call DOLIT 
      00019D 00 02                  512         .word 2 
      00019F CD 08 12         [ 4]  513         call SUBB ; ( na last -- na last lfa ) link address 
      0001A2 CD 04 F7         [ 4]  514         call AT 
      0001A5 CD 05 9E         [ 4]  515         call DUPP ; ( -- na last a a )
      0001A8 CD 06 DE         [ 4]  516         call CNTXT 
      0001AB CD 04 E0         [ 4]  517         call STORE
      0001AE CD 07 0A         [ 4]  518         call LAST  
      0001B1 CD 04 E0         [ 4]  519         call STORE ; ( --  na last )
      0001B4 CD 05 C8         [ 4]  520         call OVER 
      0001B7 CD 08 3A         [ 4]  521         call EQUAL ; ( na last na -- na T|F ) 
      0001BA CD 04 AC         [ 4]  522         call QBRAN 
      0001BD 01 8B                  523         .word FORGET1 
                                    524 ; ( na -- )
      0001BF CD 04 79         [ 4]  525         call DOLIT 
      0001C2 00 02                  526         .word 2 
      0001C4 CD 08 12         [ 4]  527         call SUBB 
      0001C7 CD 06 FA         [ 4]  528         call CPP 
      0001CA CD 04 E0         [ 4]  529         call STORE  
      0001CD CD 1B CB         [ 4]  530         call UPDATCP 
      0001D0 CC 1B A2         [ 2]  531         jp UPDATLAST 
      0001D3                        532 FORGET6: ; tried to forget a RAM or system word 
                                    533 ; ( ca na -- )
      0001D3 1D 00 02         [ 2]  534         subw x,#CELLL 
      0001D6 90 BE 2E         [ 2]  535         ldw y,SP0 
      0001D9 FF               [ 2]  536         ldw (x),y  
      0001DA CD 08 59         [ 4]  537         call ULESS
      0001DD CD 04 AC         [ 4]  538         call QBRAN 
      0001E0 02 03                  539         .word PROTECTED 
      0001E2 CD 13 66         [ 4]  540         call ABORQ 
      0001E5 1D                     541         .byte 29
      0001E6 20 46 6F 72 20 52 41   542         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000203                        543 PROTECTED:
      000203 CD 13 66         [ 4]  544         call ABORQ
      000206 0A                     545         .byte 10
      000207 20 50 72 6F 74 65 63   546         .ascii " Protected"
             74 65 64
      000211                        547 FORGET2: ; no name or not found in dictionary 
      000211 CD 13 66         [ 4]  548         call ABORQ
      000214 05                     549         .byte 5
      000215 20 77 68 61 74         550         .ascii " what"
      00021A                        551 FORGET4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00021A CC 05 94         [ 2]  552         jp DROP 
                                    553 
                                    554 
                                    555 ;---------------------------------
                                    556 ; if na is variable 
                                    557 ; free variable data  
                                    558 ; FREEVAR ( na -- )
                                    559 ;---------------------------------
      00021D 01 55                  560         .word LINK 
                           00021F   561         LINK=.
      00021F 07                     562         .byte 7 
      000220 46 52 45 45 56 41 52   563         .ascii "FREEVAR"
      000227                        564 FREEVAR:
      000227 CD 05 9E         [ 4]  565         call DUPP ; ( na na -- )
      00022A CD 05 15         [ 4]  566         CALL CAT  ; ( na c -- )
      00022D CD 0A 79         [ 4]  567         call ONEP ;
      000230 CD 07 99         [ 4]  568         CALL PLUS ; ( na c+1 -- ca ) 
      000233 CD 0A 79         [ 4]  569         call ONEP ; ( ca+ -- ) to get routne address 
      000236 CD 05 9E         [ 4]  570         call DUPP ; ( ca+ ca+ -- )
      000239 CD 04 F7         [ 4]  571         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00023C CD 04 79         [ 4]  572         call DOLIT 
      00023F 06 4B                  573         .word DOVAR ; if routine address is DOVAR then variable 
      000241 CD 08 3A         [ 4]  574         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000244 CD 04 AC         [ 4]  575         call QBRAN 
      000247 02 5D                  576         .word FREEVAR4 
      000249 CD 04 79         [ 4]  577         call DOLIT 
      00024C 00 02                  578         .word 2 
      00024E CD 07 99         [ 4]  579         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000251 CD 04 F7         [ 4]  580         call AT 
      000254 CD 06 EC         [ 4]  581         call VPP   
      000257 CD 04 E0         [ 4]  582         call STORE 
      00025A CC 1B E2         [ 2]  583         jp UPDATVP 
      00025D                        584 FREEVAR4: ; not variable
      00025D CC 05 94         [ 2]  585         jp  DROP 
                                    586 
                                    587 ;    SEED ( n -- )
                                    588 ; Initialize PRNG seed with n 
      000260 02 1F                  589         .word LINK 
                           000262   590         LINK=. 
      000262 04                     591         .byte 4 
      000263 53 45 45 44            592         .ascii "SEED" 
      000267                        593 SEED:
      000267 90 93            [ 1]  594         ldw y,x 
      000269 1C 00 02         [ 2]  595         addw x,#CELLL
      00026C 90 FE            [ 2]  596         ldw y,(y)
      00026E 90 9E            [ 1]  597         ld a,yh 
      000270 B7 3A            [ 1]  598         ld SEEDX,a 
      000272 90 9F            [ 1]  599         ld a,yl 
      000274 B7 3C            [ 1]  600         ld SEEDY,a 
      000276 81               [ 4]  601         ret 
                                    602 
                                    603 ;    RANDOM ( u1 -- u2 )
                                    604 ; Pseudo random number betwen 0 and u1-1
      000277 02 62                  605         .word LINK 
                           000279   606         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000279 06                     607         .byte 6
      00027A 52 41 4E 44 4F 4D      608         .ascii "RANDOM" 
      000280                        609 RANDOM:
                                    610 ;local variable 
                           000001   611         SPSAVE=1
                           000002   612         VSIZE=2 
      000280 52 02            [ 2]  613         sub sp,#VSIZE
      000282 1F 01            [ 2]  614         ldw (SPSAVE,sp),x  
                                    615 ; XTEMP=(SEEDX<<5)^SEEDX 
      000284 90 93            [ 1]  616         ldw y,x 
      000286 90 FE            [ 2]  617         ldw y,(y)
      000288 90 BF 28         [ 2]  618         ldw YTEMP,y 
      00028B BE 3A            [ 2]  619 	ldw x,SEEDX 
      00028D 58               [ 2]  620 	sllw x 
      00028E 58               [ 2]  621 	sllw x 
      00028F 58               [ 2]  622 	sllw x 
      000290 58               [ 2]  623 	sllw x 
      000291 58               [ 2]  624 	sllw x 
      000292 9E               [ 1]  625 	ld a,xh 
      000293 B8 3A            [ 1]  626 	xor a,SEEDX 
      000295 B7 26            [ 1]  627 	ld XTEMP,a 
      000297 9F               [ 1]  628 	ld a,xl 
      000298 B8 3B            [ 1]  629 	xor a,SEEDX+1 
      00029A B7 27            [ 1]  630 	ld XTEMP+1,a 
                                    631 ; SEEDX=SEEDY 
      00029C BE 3C            [ 2]  632 	ldw x,SEEDY 
      00029E BF 3A            [ 2]  633 	ldw SEEDX,x  
                                    634 ; SEEDY=SEEDY^(SEEDY>>1)
      0002A0 54               [ 2]  635 	srlw x 
      0002A1 9E               [ 1]  636 	ld a,xh 
      0002A2 B8 3C            [ 1]  637 	xor a,SEEDY 
      0002A4 B7 3C            [ 1]  638 	ld SEEDY,a  
      0002A6 9F               [ 1]  639 	ld a,xl 
      0002A7 B8 3D            [ 1]  640 	xor a,SEEDY+1 
      0002A9 B7 3D            [ 1]  641 	ld SEEDY+1,a 
                                    642 ; XTEMP>>3 
      0002AB BE 26            [ 2]  643 	ldw x,XTEMP 
      0002AD 54               [ 2]  644 	srlw x 
      0002AE 54               [ 2]  645 	srlw x 
      0002AF 54               [ 2]  646 	srlw x 
                                    647 ; x=XTEMP^x 
      0002B0 9E               [ 1]  648 	ld a,xh 
      0002B1 B8 26            [ 1]  649 	xor a,XTEMP 
      0002B3 95               [ 1]  650 	ld xh,a 
      0002B4 9F               [ 1]  651 	ld a,xl 
      0002B5 B8 27            [ 1]  652 	xor a,XTEMP+1  
      0002B7 97               [ 1]  653 	ld xl,a 
                                    654 ; SEEDY=x^SEEDY 
      0002B8 B8 3D            [ 1]  655 	xor a,SEEDY+1
      0002BA 97               [ 1]  656 	ld xl,a 
      0002BB 9E               [ 1]  657 	ld a,xh 
      0002BC B8 3C            [ 1]  658 	xor a,SEEDY
      0002BE 95               [ 1]  659 	ld xh,a 
      0002BF BF 3C            [ 2]  660 	ldw SEEDY,x 
                                    661 ; return SEEDY modulo YTEMP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C1 90 BE 28         [ 2]  662 	ldw y,YTEMP  
      0002C4 65               [ 2]  663 	divw x,y 
      0002C5 1E 01            [ 2]  664 	ldw x,(SPSAVE,sp)
      0002C7 FF               [ 2]  665         ldw (x),y 
      0002C8 5B 02            [ 2]  666         addw sp,#VSIZE 
      0002CA 81               [ 4]  667 	ret 
                                    668 
                                    669 
                                    670 ;;
                                    671 ;; get millisecond counter 
                                    672 ;; msec ( -- u )
                                    673 ;; Added by Picatout 2020-04-26
      0002CB 02 79                  674         .word LINK  
                           0002CD   675         LINK = . 
      0002CD 04                     676         .byte 4
      0002CE 4D 53 45 43            677         .ascii "MSEC"
      0002D2                        678 MSEC: 
      0002D2 1D 00 02         [ 2]  679         subw x,#CELLL 
      0002D5 90 BE 32         [ 2]  680         ldw y,MS 
      0002D8 FF               [ 2]  681         ldw (x),y 
      0002D9 81               [ 4]  682         ret 
                                    683 
                                    684 ; suspend execution for u msec 
                                    685 ;  pause ( u -- )
      0002DA 02 CD                  686         .word LINK 
                           0002DC   687         LINK=.
      0002DC 05                     688         .byte 5 
      0002DD 50 41 55 53 45         689         .ascii "PAUSE"
      0002E2                        690 PAUSE:
      0002E2 90 93            [ 1]  691         ldw y,x
      0002E4 90 FE            [ 2]  692         ldw y,(y)
      0002E6 72 B9 00 32      [ 2]  693         addw y,MS 
      0002EA 8F               [10]  694 1$:     wfi  
      0002EB 90 B3 32         [ 2]  695         cpw y,MS  
      0002EE 26 FA            [ 1]  696         jrne 1$        
      0002F0 1C 00 02         [ 2]  697         addw x,#CELLL 
      0002F3 81               [ 4]  698         ret 
                                    699 
                                    700 ; initialize count down timer 
                                    701 ;  TIMER ( u -- )  milliseconds 
      0002F4 02 DC                  702         .word LINK 
                           0002F6   703         LINK=.
      0002F6 05                     704         .byte 5 
      0002F7 54 49 4D 45 52         705         .ascii "TIMER" 
      0002FC                        706 TIMER:
      0002FC 90 93            [ 1]  707         ldw y,x
      0002FE 90 FE            [ 2]  708         ldw y,(y) 
      000300 90 BF 34         [ 2]  709         ldw CNTDWN,y
      000303 1C 00 02         [ 2]  710         addw x,#CELLL 
      000306 81               [ 4]  711         ret 
                                    712 
                                    713 ; check for TIMER exiparition 
                                    714 ;  TIMEOUT? ( -- 0|-1 )
      000307 02 F6                  715         .word LINK 
                           000309   716         LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000309 08                     717         .byte 8 
      00030A 54 49 4D 45 4F 55 54   718         .ascii "TIMEOUT?"
             3F
      000312                        719 TIMEOUTQ: 
      000312 4F               [ 1]  720         clr a
      000313 1D 00 02         [ 2]  721         subw x,#CELLL 
      000316 90 BE 34         [ 2]  722         ldw y,CNTDWN 
      000319 26 01            [ 1]  723         jrne 1$ 
      00031B 43               [ 1]  724         cpl a 
      00031C E7 01            [ 1]  725 1$:     ld (1,x),a 
      00031E F7               [ 1]  726         ld (x),a 
      00031F 81               [ 4]  727         ret         
                                    728 
                                    729 ; reboot MCU 
                                    730 ; REBOOT ( -- )
      000320 03 09                  731         .word LINK 
                           000322   732         LINK=. 
      000322 06                     733         .byte 6 
      000323 52 45 42 4F 4F 54      734         .ascii "REBOOT"
      000329                        735 reboot:
      000329 CC 00 00         [ 2]  736         jp NonHandledInterrupt
                                    737 
                                    738 ; compile to flash memory 
                                    739 ; TO-FLASH ( -- )
      00032C 03 22                  740         .word LINK 
                           00032E   741         LINK=.
      00032E 08                     742         .byte 8
      00032F 54 4F 2D 46 4C 41 53   743         .ascii "TO-FLASH"
             48
      000337                        744 TOFLASH:
      000337 CD 07 1D         [ 4]  745         call RAMLAST 
      00033A CD 04 F7         [ 4]  746         call AT 
      00033D CD 07 48         [ 4]  747         call QDUP 
      000340 CD 04 AC         [ 4]  748         call QBRAN
      000343 03 66                  749         .word 1$
      000345 CD 13 66         [ 4]  750         call ABORQ 
      000348 1D                     751         .byte 29
      000349 20 4E 6F 74 20 77 68   752         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000366 90 AE FF FF      [ 2]  753 1$:     ldw y,#-1 
      00036A 90 BF 22         [ 2]  754         ldw UTFLASH,y
      00036D 81               [ 4]  755         ret 
                                    756 
                                    757 ; compile to RAM 
                                    758 ; TO-RAM ( -- )
      00036E 03 2E                  759         .word LINK 
                           000370   760         LINK=.
      000370 06                     761         .byte 6 
      000371 54 4F 2D 52 41 4D      762         .ascii "TO-RAM"
      000377                        763 TORAM:
      000377 90 5F            [ 1]  764         clrw y 
      000379 90 BF 22         [ 2]  765         ldw UTFLASH,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037C 81               [ 4]  766         ret 
                                    767 
                                    768 ;; BAUD RATE constants table
                                    769 ; values to put in BRR1 & BRR2 
      00037D                        770 baudrate: 
      00037D A0 1B                  771 	.byte 0xa0,0x1b ; 2400
      00037F D0 05                  772 	.byte 0xd0,0x5  ; 4800 
      000381 68 03                  773 	.byte 0x68,0x3  ; 9600
      000383 34 01                  774 	.byte 0x34,0x1  ; 19200
      000385 11 06                  775 	.byte 0x11,0x6  ; 57600
      000387 08 0B                  776 	.byte 0x8,0xb   ; 115200
                                    777 
                                    778 ; BAUD RATE CONSTANTS names 
                                    779 ; 2400 baud
      000389 03 70                  780 	.word LINK
                           00038B   781 LINK	= .
      00038B 04                     782 	.byte 4
      00038C 42 32 4B 34            783 	.ascii "B2K4" 
      000390                        784 B2K4:
      000390 1D 00 02         [ 2]  785 	subw x,#CELLL 
      000393 90 5F            [ 1]  786         clrw y
      000395 FF               [ 2]  787         ldw (x),y
      000396 81               [ 4]  788 	ret
                                    789 ; 4800 baud	
      000397 03 8B                  790 	.word LINK
                           000399   791 LINK	= .
      000399 04                     792 	.byte 4
      00039A 42 34 4B 38            793 	.ascii "B4K8" 
      00039E                        794 B4K8:
      00039E 1D 00 02         [ 2]  795         subw x,#CELLL 
      0003A1 90 AE 00 02      [ 2]  796         ldw y,#2 
      0003A5 FF               [ 2]  797         ldw (x),y
      0003A6 81               [ 4]  798         ret 
                                    799 ; 9600 baud
      0003A7 03 99                  800 	.word LINK
                           0003A9   801 LINK	= .
      0003A9 04                     802 	.byte 4
      0003AA 42 39 4B 36            803 	.ascii "B9K6" 
      0003AE                        804 B9K6:
      0003AE 1D 00 02         [ 2]  805         subw x,#CELLL 
      0003B1 90 AE 00 04      [ 2]  806         ldw y,#4 
      0003B5 FF               [ 2]  807         ldw (x),y 
      0003B6 81               [ 4]  808         ret 
                                    809 ; 19200 baud
      0003B7 03 A9                  810 	.word LINK
                           0003B9   811 LINK	= .
      0003B9 05                     812 	.byte 5
      0003BA 42 31 39 4B 32         813 	.ascii "B19K2" 
      0003BF                        814 B19K2:
      0003BF 1D 00 02         [ 2]  815         subw x,#CELLL
      0003C2 90 AE 00 06      [ 2]  816         ldw y,#6 
      0003C6 FF               [ 2]  817         ldw (x),y 
      0003C7 81               [ 4]  818         ret 
                                    819 ; 57600 baud        
      0003C8 03 B9                  820 	.word LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           0003CA   821 LINK	= .
      0003CA 05                     822 	.byte 5
      0003CB 42 35 37 4B 36         823 	.ascii "B57K6" 
      0003D0                        824 B57K6:
      0003D0 1D 00 02         [ 2]  825         subw x,#CELLL 
      0003D3 90 AE 00 08      [ 2]  826         ldw y,#8 
      0003D7 FF               [ 2]  827         ldw (x),y 
      0003D8 81               [ 4]  828         ret 
                                    829 ; 115200 baud 
      0003D9 03 CA                  830 	.word LINK
                           0003DB   831 LINK	= .
      0003DB 06                     832 	.byte 6
      0003DC 42 31 31 35 4B 32      833 	.ascii "B115K2" 
      0003E2                        834 B115K2:
      0003E2 1D 00 02         [ 2]  835 	subw x,#CELLL 
      0003E5 90 AE 00 0A      [ 2]  836         ldw y,#10 
      0003E9 FF               [ 2]  837         ldw (x),y 
      0003EA 81               [ 4]  838         ret 
                                    839 	
                                    840 ;; set UART2 BAUD rate
                                    841 ;	BAUD ( u -- )
      0003EB 03 DB                  842 	.word LINK 
                           0003ED   843 LINK	= .
      0003ED 04                     844 	.byte 4
      0003EE 42 41 55 44            845 	.ascii "BAUD" 
      0003F2                        846 BAUD:
      0003F2 1D 00 02         [ 2]  847 	subw x,#CELLL
      0003F5 90 AE 03 7D      [ 2]  848         ldw y,#baudrate 
      0003F9 FF               [ 2]  849         ldw (x),y 
      0003FA CD 07 99         [ 4]  850         call PLUS
      0003FD 90 93            [ 1]  851         ldw y,x  
      0003FF 90 FE            [ 2]  852         ldw y,(y)
      000401 90 F6            [ 1]  853         ld a,(y)
      000403 88               [ 1]  854         push a 
      000404 90 5C            [ 1]  855         incw y 
      000406 90 F6            [ 1]  856         ld a,(y)
      000408 C7 52 33         [ 1]  857         ld UART_BRR2,a 
      00040B 84               [ 1]  858         pop a
      00040C C7 52 32         [ 1]  859         ld UART_BRR1,a 
      00040F 1C 00 02         [ 2]  860         addw x,#CELLL 
      000412 81               [ 4]  861         ret 
                                    862 
                                    863 ;; Device dependent I/O
                                    864 ;       ?RX     ( -- c T | F )
                                    865 ;         Return input byte and true, or false.
      000413 03 ED                  866         .word      LINK 
                           000415   867 LINK	= .
      000415 04                     868         .byte      4
      000416 3F 4B 45 59            869         .ascii     "?KEY"
      00041A                        870 QKEY:
      00041A 90 5F            [ 1]  871         CLRW Y 
      00041C 72 0B 52 30 0B   [ 2]  872         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000421 C6 52 31         [ 1]  873         LD    A,UART_DR   ;get char in A
      000424 1D 00 02         [ 2]  874 	SUBW	X,#2
      000427 E7 01            [ 1]  875         LD     (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000429 7F               [ 1]  876 	CLR	(X)
      00042A 90 53            [ 2]  877         CPLW     Y
      00042C                        878 INCH:
      00042C 1D 00 02         [ 2]  879 		SUBW	X,#2
      00042F FF               [ 2]  880         LDW     (X),Y
      000430 81               [ 4]  881         RET
                                    882 
                                    883 ;       TX!     ( c -- )
                                    884 ;       Send character c to  output device.
      000431 04 15                  885         .word      LINK
                           000433   886 LINK	= .
      000433 04                     887         .byte      4
      000434 45 4D 49 54            888         .ascii     "EMIT"
      000438                        889 EMIT:
      000438 E6 01            [ 1]  890         LD     A,(1,X)
      00043A 1C 00 02         [ 2]  891 	ADDW	X,#2
      00043D 72 0F 52 30 FB   [ 2]  892 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000442 C7 52 31         [ 1]  893         LD    UART_DR,A   ;send A
      000445 81               [ 4]  894         RET
                                    895 
                                    896 ;       FC-XON  ( -- )
                                    897 ;       send XON character 
      000446 04 33                  898         .word LINK
                           000448   899 LINK    = .
      000448 06                     900         .byte 6 
      000449 46 43 2D 58 4F 4E      901         .ascii "FC-XON"
      00044F                        902 FC_XON:
      00044F 1D 00 02         [ 2]  903         subw x,#CELLL 
      000452 7F               [ 1]  904         clr (x)
      000453 A6 11            [ 1]  905         ld a,#XON 
      000455 E7 01            [ 1]  906         ld (1,x),a 
      000457 CD 04 38         [ 4]  907         call EMIT 
      00045A 81               [ 4]  908         ret 
                                    909 
                                    910 ;       FC-XOFF ( -- )
                                    911 ;       Send XOFF character 
      00045B 04 48                  912         .word LINK
                           00045D   913 LINK    = .
      00045D 07                     914         .byte 7
      00045E 46 43 2D 58 4F 46 46   915         .ascii "FC-XOFF"
      000465                        916 FC_XOFF:
      000465 1D 00 02         [ 2]  917         subw x,#CELLL 
      000468 7F               [ 1]  918         clr (x)
      000469 A6 13            [ 1]  919         ld a,#XOFF 
      00046B E7 01            [ 1]  920         ld (1,x),a 
      00046D CD 04 38         [ 4]  921         call EMIT 
      000470 81               [ 4]  922         ret
                                    923 
                                    924 ;; The kernel
                                    925 
                                    926 ;       doLIT   ( -- w )
                                    927 ;       Push an inline literal.
      000471 04 5D                  928         .word      LINK
                           000473   929 LINK	= 	.
      000473 45                     930 	.byte      COMPO+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000474 44 4F 4C 49 54         931         .ascii     "DOLIT"
      000479                        932 DOLIT:
      000479 1D 00 02         [ 2]  933 	SUBW X,#2
      00047C 16 01            [ 2]  934         ldw y,(1,sp)
      00047E 90 FE            [ 2]  935         ldw y,(y)
      000480 FF               [ 2]  936         ldw (x),y
      000481 90 85            [ 2]  937         popw y 
      000483 90 EC 02         [ 2]  938         jp (2,y)
                                    939 
                                    940 ;       next    ( -- )
                                    941 ;       Code for  single index loop.
      000486 04 73                  942         .word      LINK
                           000488   943 LINK	= 	.
      000488 44                     944 	.byte      COMPO+4
      000489 6E 65 78 74            945         .ascii     "next"
      00048D                        946 DONXT:
      00048D 16 03            [ 2]  947 	LDW Y,(3,SP)
      00048F 90 5A            [ 2]  948 	DECW Y
      000491 2A 07            [ 1]  949 	JRPL NEX1 ; jump if N=0
      000493 90 85            [ 2]  950 	POPW Y
      000495 5B 02            [ 2]  951         addw sp,#2
      000497 90 EC 02         [ 2]  952         JP (2,Y)
      00049A                        953 NEX1:
      00049A 17 03            [ 2]  954         LDW (3,SP),Y
      00049C 90 85            [ 2]  955         POPW Y
      00049E 90 FE            [ 2]  956 	LDW Y,(Y)
      0004A0 90 FC            [ 2]  957 	JP (Y)
                                    958 
                                    959 ;       ?branch ( f -- )
                                    960 ;       Branch if flag is zero.
      0004A2 04 88                  961         .word      LINK
                           0004A4   962 LINK	= 	.
      0004A4 47                     963 	.byte      COMPO+7
      0004A5 3F 42 52 41 4E 43 48   964         .ascii     "?BRANCH"
      0004AC                        965 QBRAN:	
      0004AC 90 93            [ 1]  966         LDW Y,X
      0004AE 1C 00 02         [ 2]  967 	ADDW X,#2
      0004B1 90 FE            [ 2]  968 	LDW Y,(Y)
      0004B3 27 0E            [ 1]  969         JREQ     BRAN
      0004B5 90 85            [ 2]  970 	POPW Y
      0004B7 90 EC 02         [ 2]  971 	JP (2,Y)
                                    972         
                                    973 ;       branch  ( -- )
                                    974 ;       Branch to an inline address.
      0004BA 04 A4                  975         .word      LINK
                           0004BC   976 LINK	= 	.
      0004BC 46                     977 	.byte      COMPO+6
      0004BD 42 52 41 4E 43 48      978         .ascii     "BRANCH"
      0004C3                        979 BRAN:
      0004C3 90 85            [ 2]  980         POPW Y
      0004C5 90 FE            [ 2]  981 	LDW Y,(Y)
      0004C7 90 FC            [ 2]  982         JP     (Y)
                                    983 
                                    984 ;       EXECUTE ( ca -- )
                                    985 ;       Execute  word at ca.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C9 04 BC                  986         .word      LINK
                           0004CB   987 LINK	= 	.
      0004CB 07                     988         .byte       7
      0004CC 45 58 45 43 55 54 45   989         .ascii     "EXECUTE"
      0004D3                        990 EXECU:
      0004D3 90 93            [ 1]  991         LDW Y,X
      0004D5 1C 00 02         [ 2]  992 	ADDW X,#2
      0004D8 90 FE            [ 2]  993 	LDW  Y,(Y)
      0004DA 90 FC            [ 2]  994         JP   (Y)
                                    995 
                           000001   996 OPTIMIZE = 1
                           000001   997 .if OPTIMIZE 
                                    998 ; remplacement de CALL EXIT par 
                                    999 ; le opcode de RET.
                                   1000 ; Voir modification au code de ";"
                           000000  1001 .else 
                                   1002 ;       EXIT    ( -- )
                                   1003 ;       Terminate a colon definition.
                                   1004         .word      LINK
                                   1005 LINK = .
                                   1006         .byte      4
                                   1007         .ascii     "EXIT"
                                   1008 EXIT:
                                   1009         POPW Y
                                   1010         RET
                                   1011 .endif 
                                   1012 
                                   1013 ;       !       ( w a -- )
                                   1014 ;       Pop  data stack to memory.
      0004DC 04 CB                 1015         .word      LINK
                           0004DE  1016 LINK = .
      0004DE 01                    1017         .byte      1
      0004DF 21                    1018         .ascii     "!"
      0004E0                       1019 STORE:
      0004E0 90 93            [ 1] 1020         LDW Y,X
      0004E2 90 FE            [ 2] 1021         LDW Y,(Y)    ;Y=a
      0004E4 90 BF 28         [ 2] 1022         LDW YTEMP,Y
      0004E7 90 93            [ 1] 1023         LDW Y,X
      0004E9 90 EE 02         [ 2] 1024         LDW Y,(2,Y)
      0004EC 91 CF 28         [ 5] 1025         LDW [YTEMP],Y ;store w at a
      0004EF 1C 00 04         [ 2] 1026         ADDW X,#4 ; DDROP 
      0004F2 81               [ 4] 1027         RET     
                                   1028 
                                   1029 ;       @       ( a -- w )
                                   1030 ;       Push memory location to stack.
      0004F3 04 DE                 1031         .word      LINK
                           0004F5  1032 LINK	= 	.
      0004F5 01                    1033         .byte    1
      0004F6 40                    1034         .ascii	"@"
      0004F7                       1035 AT:
      0004F7 90 93            [ 1] 1036         LDW Y,X     ;Y = a
      0004F9 90 FE            [ 2] 1037         LDW Y,(Y)   ; address 
      0004FB 90 FE            [ 2] 1038         LDW Y,(Y)   ; value 
      0004FD FF               [ 2] 1039         LDW (X),Y ;w = @Y
      0004FE 81               [ 4] 1040         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1041 
                                   1042 ;       C!      ( c b -- )
                                   1043 ;       Pop  data stack to byte memory.
      0004FF 04 F5                 1044         .word      LINK
                           000501  1045 LINK	= .
      000501 02                    1046         .byte      2
      000502 43 21                 1047         .ascii     "C!"
      000504                       1048 CSTOR:
      000504 90 93            [ 1] 1049         LDW Y,X
      000506 90 FE            [ 2] 1050 	LDW Y,(Y)    ;Y=b
      000508 E6 03            [ 1] 1051         LD A,(3,X)    ;D = c
      00050A 90 F7            [ 1] 1052         LD  (Y),A     ;store c at b
      00050C 1C 00 04         [ 2] 1053 	ADDW X,#4 ; DDROP 
      00050F 81               [ 4] 1054         RET     
                                   1055 
                                   1056 ;       C@      ( b -- c )
                                   1057 ;       Push byte in memory to  stack.
      000510 05 01                 1058         .word      LINK
                           000512  1059 LINK	= 	.
      000512 02                    1060         .byte      2
      000513 43 40                 1061         .ascii     "C@"
      000515                       1062 CAT:
      000515 90 93            [ 1] 1063         LDW Y,X     ;Y=b
      000517 90 FE            [ 2] 1064         LDW Y,(Y)
      000519 90 F6            [ 1] 1065         LD A,(Y)
      00051B E7 01            [ 1] 1066         LD (1,X),A
      00051D 7F               [ 1] 1067         CLR (X)
      00051E 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;       RP@     ( -- a )
                                   1071 ;       Push current RP to data stack.
      00051F 05 12                 1072         .word      LINK
                           000521  1073 LINK	= .
      000521 03                    1074         .byte      3
      000522 52 50 40              1075         .ascii     "RP@"
      000525                       1076 RPAT:
      000525 90 96            [ 1] 1077         LDW Y,SP    ;save return addr
      000527 1D 00 02         [ 2] 1078         SUBW X,#2
      00052A FF               [ 2] 1079         LDW (X),Y
      00052B 81               [ 4] 1080         RET     
                                   1081 
                                   1082 ;       RP!     ( a -- )
                                   1083 ;       Set  return stack pointer.
      00052C 05 21                 1084         .word      LINK
                           00052E  1085 LINK	= 	. 
      00052E 43                    1086 	.byte      COMPO+3
      00052F 52 50 21              1087         .ascii     "RP!"
      000532                       1088 RPSTO:
      000532 90 85            [ 2] 1089         POPW Y
      000534 90 BF 28         [ 2] 1090         LDW YTEMP,Y
      000537 90 93            [ 1] 1091         LDW Y,X
      000539 90 FE            [ 2] 1092         LDW Y,(Y)
      00053B 90 94            [ 1] 1093         LDW SP,Y
      00053D 1C 00 02         [ 2] 1094         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000540 92 CC 28         [ 5] 1095         JP [YTEMP]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1096 
                                   1097 ;       R>      ( -- w )
                                   1098 ;       Pop return stack to data stack.
      000543 05 2E                 1099         .word      LINK
                           000545  1100 LINK	= 	. 
      000545 42                    1101 	.byte      COMPO+2
      000546 52 3E                 1102         .ascii     "R>"
      000548                       1103 RFROM:
      000548 90 85            [ 2] 1104         POPW Y    ;save return addr
      00054A 90 BF 28         [ 2] 1105         LDW YTEMP,Y
      00054D 90 85            [ 2] 1106         POPW Y
      00054F 1D 00 02         [ 2] 1107         SUBW X,#2
      000552 FF               [ 2] 1108         LDW (X),Y
      000553 92 CC 28         [ 5] 1109         JP [YTEMP]
                                   1110 
                                   1111 ;       R@      ( -- w )
                                   1112 ;       Copy top of return stack to stack.
      000556 05 45                 1113         .word      LINK
                           000558  1114 LINK	= 	. 
      000558 02                    1115         .byte      2
      000559 52 40                 1116         .ascii     "R@"
      00055B                       1117 RAT:
      00055B 16 03            [ 2] 1118         ldw y,(3,sp)
      00055D 1D 00 02         [ 2] 1119         subw x,#CELLL 
      000560 FF               [ 2] 1120         ldw (x),y 
      000561 81               [ 4] 1121         ret 
                                   1122 
                                   1123 ;       >R      ( w -- )
                                   1124 ;       Push data stack to return stack.
      000562 05 58                 1125         .word      LINK
                           000564  1126 LINK	= 	. 
      000564 42                    1127 	.byte      COMPO+2
      000565 3E 52                 1128         .ascii     ">R"
      000567                       1129 TOR:
      000567 90 85            [ 2] 1130         POPW Y    ;save return addr
      000569 90 BF 28         [ 2] 1131         LDW YTEMP,Y
      00056C 90 93            [ 1] 1132         LDW Y,X
      00056E 90 FE            [ 2] 1133         LDW Y,(Y)
      000570 90 89            [ 2] 1134         PUSHW Y    ;restore return addr
      000572 1C 00 02         [ 2] 1135         ADDW X,#2
      000575 92 CC 28         [ 5] 1136         JP [YTEMP]
                                   1137 
                                   1138 ;       SP@     ( -- a )
                                   1139 ;       Push current stack pointer.
      000578 05 64                 1140         .word      LINK
                           00057A  1141 LINK	= 	. 
      00057A 03                    1142         .byte      3
      00057B 53 50 40              1143         .ascii     "SP@"
      00057E                       1144 SPAT:
      00057E 90 93            [ 1] 1145 	LDW Y,X
      000580 1D 00 02         [ 2] 1146         SUBW X,#2
      000583 FF               [ 2] 1147 	LDW (X),Y
      000584 81               [ 4] 1148         RET     
                                   1149 
                                   1150 ;       SP!     ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1151 ;       Set  data stack pointer.
      000585 05 7A                 1152         .word      LINK
                           000587  1153 LINK	= 	. 
      000587 03                    1154         .byte      3
      000588 53 50 21              1155         .ascii     "SP!"
      00058B                       1156 SPSTO:
      00058B FE               [ 2] 1157         LDW     X,(X)     ;X = a
      00058C 81               [ 4] 1158         RET     
                                   1159 
                                   1160 ;       DROP    ( w -- )
                                   1161 ;       Discard top stack item.
      00058D 05 87                 1162         .word      LINK
                           00058F  1163 LINK	= 	. 
      00058F 04                    1164         .byte      4
      000590 44 52 4F 50           1165         .ascii     "DROP"
      000594                       1166 DROP:
      000594 1C 00 02         [ 2] 1167         ADDW X,#2     
      000597 81               [ 4] 1168         RET     
                                   1169 
                                   1170 ;       DUP     ( w -- w w )
                                   1171 ;       Duplicate  top stack item.
      000598 05 8F                 1172         .word      LINK
                           00059A  1173 LINK	= 	. 
      00059A 03                    1174         .byte      3
      00059B 44 55 50              1175         .ascii     "DUP"
      00059E                       1176 DUPP:
      00059E 90 93            [ 1] 1177 	LDW Y,X
      0005A0 1D 00 02         [ 2] 1178         SUBW X,#2
      0005A3 90 FE            [ 2] 1179 	LDW Y,(Y)
      0005A5 FF               [ 2] 1180 	LDW (X),Y
      0005A6 81               [ 4] 1181         RET     
                                   1182 
                                   1183 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1184 ;       Exchange top two stack items.
      0005A7 05 9A                 1185         .word      LINK
                           0005A9  1186 LINK	= 	. 
      0005A9 04                    1187         .byte      4
      0005AA 53 57 41 50           1188         .ascii     "SWAP"
      0005AE                       1189 SWAPP:
      0005AE 90 93            [ 1] 1190         LDW Y,X
      0005B0 90 FE            [ 2] 1191         LDW Y,(Y)
      0005B2 90 BF 28         [ 2] 1192         LDW YTEMP,Y
      0005B5 90 93            [ 1] 1193         LDW Y,X
      0005B7 90 EE 02         [ 2] 1194         LDW Y,(2,Y)
      0005BA FF               [ 2] 1195         LDW (X),Y
      0005BB 90 BE 28         [ 2] 1196         LDW Y,YTEMP
      0005BE EF 02            [ 2] 1197         LDW (2,X),Y
      0005C0 81               [ 4] 1198         RET     
                                   1199 
                                   1200 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1201 ;       Copy second stack item to top.
      0005C1 05 A9                 1202         .word      LINK
                           0005C3  1203 LINK	= . 
      0005C3 04                    1204         .byte      4
      0005C4 4F 56 45 52           1205         .ascii     "OVER"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C8                       1206 OVER:
      0005C8 1D 00 02         [ 2] 1207         SUBW X,#2
      0005CB 90 93            [ 1] 1208         LDW Y,X
      0005CD 90 EE 04         [ 2] 1209         LDW Y,(4,Y)
      0005D0 FF               [ 2] 1210         LDW (X),Y
      0005D1 81               [ 4] 1211         RET     
                                   1212 
                                   1213 ;       0<      ( n -- t )
                                   1214 ;       Return true if n is negative.
      0005D2 05 C3                 1215         .word      LINK
                           0005D4  1216 LINK	= . 
      0005D4 02                    1217         .byte      2
      0005D5 30 3C                 1218         .ascii     "0<"
      0005D7                       1219 ZLESS:
      0005D7 A6 FF            [ 1] 1220         LD A,#0xFF
      0005D9 90 93            [ 1] 1221         LDW Y,X
      0005DB 90 FE            [ 2] 1222         LDW Y,(Y)
      0005DD 2B 01            [ 1] 1223         JRMI     ZL1
      0005DF 4F               [ 1] 1224         CLR A   ;false
      0005E0 F7               [ 1] 1225 ZL1:    LD     (X),A
      0005E1 E7 01            [ 1] 1226         LD (1,X),A
      0005E3 81               [ 4] 1227 	RET     
                                   1228 
                                   1229 ;       AND     ( w w -- w )
                                   1230 ;       Bitwise AND.
      0005E4 05 D4                 1231         .word      LINK
                           0005E6  1232 LINK	= . 
      0005E6 03                    1233         .byte      3
      0005E7 41 4E 44              1234         .ascii     "AND"
      0005EA                       1235 ANDD:
      0005EA F6               [ 1] 1236         LD  A,(X)    ;D=w
      0005EB E4 02            [ 1] 1237         AND A,(2,X)
      0005ED E7 02            [ 1] 1238         LD (2,X),A
      0005EF E6 01            [ 1] 1239         LD A,(1,X)
      0005F1 E4 03            [ 1] 1240         AND A,(3,X)
      0005F3 E7 03            [ 1] 1241         LD (3,X),A
      0005F5 1C 00 02         [ 2] 1242         ADDW X,#2
      0005F8 81               [ 4] 1243         RET
                                   1244 
                                   1245 ;       OR      ( w w -- w )
                                   1246 ;       Bitwise inclusive OR.
      0005F9 05 E6                 1247         .word      LINK
                           0005FB  1248 LINK = . 
      0005FB 02                    1249         .byte      2
      0005FC 4F 52                 1250         .ascii     "OR"
      0005FE                       1251 ORR:
      0005FE F6               [ 1] 1252         LD A,(X)    ;D=w
      0005FF EA 02            [ 1] 1253         OR A,(2,X)
      000601 E7 02            [ 1] 1254         LD (2,X),A
      000603 E6 01            [ 1] 1255         LD A,(1,X)
      000605 EA 03            [ 1] 1256         OR A,(3,X)
      000607 E7 03            [ 1] 1257         LD (3,X),A
      000609 1C 00 02         [ 2] 1258         ADDW X,#2
      00060C 81               [ 4] 1259         RET
                                   1260 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1261 ;       XOR     ( w w -- w )
                                   1262 ;       Bitwise exclusive OR.
      00060D 05 FB                 1263         .word      LINK
                           00060F  1264 LINK	= . 
      00060F 03                    1265         .byte      3
      000610 58 4F 52              1266         .ascii     "XOR"
      000613                       1267 XORR:
      000613 F6               [ 1] 1268         LD A,(X)    ;D=w
      000614 E8 02            [ 1] 1269         XOR A,(2,X)
      000616 E7 02            [ 1] 1270         LD (2,X),A
      000618 E6 01            [ 1] 1271         LD A,(1,X)
      00061A E8 03            [ 1] 1272         XOR A,(3,X)
      00061C E7 03            [ 1] 1273         LD (3,X),A
      00061E 1C 00 02         [ 2] 1274         ADDW X,#2
      000621 81               [ 4] 1275         RET
                                   1276 
                                   1277 ;       UM+     ( u u -- udsum )
                                   1278 ;       Add two unsigned single
                                   1279 ;       and return a double sum.
      000622 06 0F                 1280         .word      LINK
                           000624  1281 LINK	= . 
      000624 03                    1282         .byte      3
      000625 55 4D 2B              1283         .ascii     "UM+"
      000628                       1284 UPLUS:
      000628 A6 01            [ 1] 1285         LD A,#1
      00062A 90 93            [ 1] 1286         LDW Y,X
      00062C 90 EE 02         [ 2] 1287         LDW Y,(2,Y)
      00062F 90 BF 28         [ 2] 1288         LDW YTEMP,Y
      000632 90 93            [ 1] 1289         LDW Y,X
      000634 90 FE            [ 2] 1290         LDW Y,(Y)
      000636 72 B9 00 28      [ 2] 1291         ADDW Y,YTEMP
      00063A EF 02            [ 2] 1292         LDW (2,X),Y
      00063C 25 01            [ 1] 1293         JRC     UPL1
      00063E 4F               [ 1] 1294         CLR A
      00063F E7 01            [ 1] 1295 UPL1:   LD     (1,X),A
      000641 7F               [ 1] 1296         CLR (X)
      000642 81               [ 4] 1297         RET
                                   1298 
                                   1299 ;; System and user variables
                                   1300 
                                   1301 ;       doVAR   ( -- a )
                                   1302 ;       Code for VARIABLE and CREATE.
      000643 06 24                 1303         .word      LINK
                           000645  1304 LINK	= . 
      000645 45                    1305 	.byte      COMPO+5
      000646 44 4F 56 41 52        1306         .ascii     "DOVAR"
      00064B                       1307 DOVAR:
      00064B 1D 00 02         [ 2] 1308 	SUBW X,#2
      00064E 90 85            [ 2] 1309         POPW Y    ;get return addr (pfa)
      000650 90 FE            [ 2] 1310         LDW Y,(Y) ; indirect address 
      000652 FF               [ 2] 1311         LDW (X),Y    ;push on stack
      000653 81               [ 4] 1312         RET     ;go to RET of EXEC
                                   1313 
                                   1314 ;       BASE    ( -- a )
                                   1315 ;       Radix base for numeric I/O.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000654 06 45                 1316         .word      LINK        
                           000656  1317 LINK = . 
      000656 04                    1318         .byte      4
      000657 42 41 53 45           1319         .ascii     "BASE"
      00065B                       1320 BASE:
      00065B 90 AE 00 06      [ 2] 1321 	LDW Y,#UBASE 
      00065F 1D 00 02         [ 2] 1322 	SUBW X,#2
      000662 FF               [ 2] 1323         LDW (X),Y
      000663 81               [ 4] 1324         RET
                                   1325 
                                   1326 ;       tmp     ( -- a )
                                   1327 ;       A temporary storage.
      000664 06 56                 1328         .word      LINK
                                   1329         
                           000666  1330 LINK = . 
      000666 03                    1331 	.byte      3
      000667 54 4D 50              1332         .ascii     "TMP"
      00066A                       1333 TEMP:
      00066A 90 AE 00 0C      [ 2] 1334 	LDW Y,#UTMP
      00066E 1D 00 02         [ 2] 1335 	SUBW X,#2
      000671 FF               [ 2] 1336         LDW (X),Y
      000672 81               [ 4] 1337         RET
                                   1338 
                                   1339 ;       >IN     ( -- a )
                                   1340 ;        Hold parsing pointer.
      000673 06 66                 1341         .word      LINK
                           000675  1342 LINK = . 
      000675 03                    1343         .byte      3
      000676 3E 49 4E              1344         .ascii    ">IN"
      000679                       1345 INN:
      000679 90 AE 00 0E      [ 2] 1346 	LDW Y,#UINN 
      00067D 1D 00 02         [ 2] 1347 	SUBW X,#2
      000680 FF               [ 2] 1348         LDW (X),Y
      000681 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;       #TIB    ( -- a )
                                   1352 ;       Count in terminal input buffer.
      000682 06 75                 1353         .word      LINK
                           000684  1354 LINK = . 
      000684 04                    1355         .byte      4
      000685 23 54 49 42           1356         .ascii     "#TIB"
      000689                       1357 NTIB:
      000689 90 AE 00 10      [ 2] 1358 	LDW Y,#UCTIB 
      00068D 1D 00 02         [ 2] 1359 	SUBW X,#2
      000690 FF               [ 2] 1360         LDW (X),Y
      000691 81               [ 4] 1361         RET
                                   1362 
                                   1363 ;       TBUF ( -- a )
                                   1364 ;       address of 128 bytes transaction buffer 
      000692 06 84                 1365         .word LINK 
                           000694  1366         LINK=.
      000694 04                    1367         .byte 4 
      000695 54 42 55 46           1368         .ascii "TBUF"
      000699                       1369 TBUF:
      000699 90 AE 16 80      [ 2] 1370         ldw y,#ROWBUFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00069D 1D 00 02         [ 2] 1371         subw x,#CELLL
      0006A0 FF               [ 2] 1372         ldw (x),y 
      0006A1 81               [ 4] 1373         ret 
                                   1374 
                                   1375 ; systeme variable 
                                   1376 ; compilation destination 
                                   1377 ; TFLASH ( -- A )
      0006A2 06 94                 1378         .word LINK 
                           0006A4  1379         LINK=.
      0006A4 06                    1380         .byte 6 
      0006A5 54 46 4C 41 53 48     1381         .ascii "TFLASH"         
      0006AB                       1382 TFLASH:
      0006AB 1D 00 02         [ 2] 1383         subw x,#CELLL 
      0006AE 90 AE 00 22      [ 2] 1384         ldw y,#UTFLASH
      0006B2 FF               [ 2] 1385         ldw (x),y 
      0006B3 81               [ 4] 1386         ret 
                                   1387 
                                   1388 ;       "EVAL   ( -- a )
                                   1389 ;       Execution vector of EVAL.
      0006B4 06 A4                 1390         .word      LINK
                           0006B6  1391 LINK = . 
      0006B6 05                    1392         .byte      5
      0006B7 27 45 56 41 4C        1393         .ascii     "'EVAL"
      0006BC                       1394 TEVAL:
      0006BC 90 AE 00 14      [ 2] 1395 	LDW Y,#UINTER 
      0006C0 1D 00 02         [ 2] 1396 	SUBW X,#2
      0006C3 FF               [ 2] 1397         LDW (X),Y
      0006C4 81               [ 4] 1398         RET
                                   1399 
                                   1400 ;       HLD     ( -- a )
                                   1401 ;       Hold a pointer of output string.
      0006C5 06 B6                 1402         .word      LINK
                           0006C7  1403 LINK = . 
      0006C7 03                    1404         .byte      3
      0006C8 48 4C 44              1405         .ascii     "HLD"
      0006CB                       1406 HLD:
      0006CB 90 AE 00 16      [ 2] 1407 	LDW Y,#UHLD 
      0006CF 1D 00 02         [ 2] 1408 	SUBW X,#2
      0006D2 FF               [ 2] 1409         LDW (X),Y
      0006D3 81               [ 4] 1410         RET
                                   1411 
                                   1412 ;       CONTEXT ( -- a )
                                   1413 ;       Start vocabulary search.
      0006D4 06 C7                 1414         .word      LINK
                           0006D6  1415 LINK = . 
      0006D6 07                    1416         .byte      7
      0006D7 43 4F 4E 54 45 58 54  1417         .ascii     "CONTEXT"
      0006DE                       1418 CNTXT:
      0006DE 90 AE 00 18      [ 2] 1419 	LDW Y,#UCNTXT
      0006E2 1D 00 02         [ 2] 1420 	SUBW X,#2
      0006E5 FF               [ 2] 1421         LDW (X),Y
      0006E6 81               [ 4] 1422         RET
                                   1423 
                                   1424 ;       VP      ( -- a )
                                   1425 ;       Point to top of variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006E7 06 D6                 1426         .word      LINK
                           0006E9  1427 LINK = . 
      0006E9 02                    1428         .byte      2
      0006EA 56 50                 1429         .ascii     "VP"
      0006EC                       1430 VPP:
      0006EC 90 AE 00 1A      [ 2] 1431 	LDW Y,#UVP 
      0006F0 1D 00 02         [ 2] 1432 	SUBW X,#2
      0006F3 FF               [ 2] 1433         LDW (X),Y
      0006F4 81               [ 4] 1434         RET
                                   1435 
                                   1436 ;       CP    ( -- a )
                                   1437 ;       Pointer to top of FLASH 
      0006F5 06 E9                 1438         .word LINK 
                           0006F7  1439         LINK=.
      0006F7 02                    1440         .byte 2 
      0006F8 43 50                 1441         .ascii "CP"
      0006FA                       1442 CPP: 
      0006FA 90 AE 00 1C      [ 2] 1443         ldw y,#UCP 
      0006FE 1D 00 02         [ 2] 1444         subw x,#CELLL 
      000701 FF               [ 2] 1445         ldw (x),y 
      000702 81               [ 4] 1446         ret                
                                   1447 
                                   1448 ;       LAST    ( -- a )
                                   1449 ;       Point to last name in dictionary.
      000703 06 F7                 1450         .word      LINK
                           000705  1451 LINK = . 
      000705 04                    1452         .byte      4
      000706 4C 41 53 54           1453         .ascii     "LAST"
      00070A                       1454 LAST:
      00070A 90 AE 00 1E      [ 2] 1455 	LDW Y,#ULAST 
      00070E 1D 00 02         [ 2] 1456 	SUBW X,#2
      000711 FF               [ 2] 1457         LDW (X),Y
      000712 81               [ 4] 1458         RET
                                   1459 
                                   1460 ; address of system variable URLAST 
                                   1461 ;       RAMLAST ( -- a )
                                   1462 ; RAM dictionary context 
      000713 07 05                 1463         .word LINK 
                           000715  1464         LINK=. 
      000715 07                    1465         .byte 7  
      000716 52 41 4D 4C 41 53 54  1466         .ascii "RAMLAST" 
      00071D                       1467 RAMLAST: 
      00071D 90 AE 00 24      [ 2] 1468         ldw y,#URLAST 
      000721 1D 00 02         [ 2] 1469         subw x,#CELLL 
      000724 FF               [ 2] 1470         ldw (x),y 
      000725 81               [ 4] 1471         ret 
                                   1472 
                                   1473 ; OFFSET ( -- a )
                                   1474 ; address of system variable OFFSET 
      000726 07 15                 1475         .word LINK 
                           000728  1476         LINK=.
      000728 06                    1477         .byte 6
      000729 4F 46 46 53 45 54     1478         .ascii "OFFSET" 
      00072F                       1479 OFFSET: 
      00072F 1D 00 02         [ 2] 1480         subw x,#CELLL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000732 90 AE 00 20      [ 2] 1481         ldw y,#UOFFSET 
      000736 FF               [ 2] 1482         ldw (x),y 
      000737 81               [ 4] 1483         ret 
                                   1484 
                                   1485 ; adjust jump address adding OFFSET
                                   1486 ; ADR-ADJ ( a -- a+offset )
      000738                       1487 ADRADJ: 
      000738 CD 07 2F         [ 4] 1488         call OFFSET 
      00073B CD 04 F7         [ 4] 1489         call AT 
      00073E CC 07 99         [ 2] 1490         jp PLUS 
                                   1491 
                                   1492 
                                   1493 ;; Common functions
                                   1494 
                                   1495 ;       ?DUP    ( w -- w w | 0 )
                                   1496 ;       Dup tos if its is not zero.
      000741 07 28                 1497         .word      LINK
                           000743  1498 LINK = . 
      000743 04                    1499         .byte      4
      000744 3F 44 55 50           1500         .ascii     "?DUP"
      000748                       1501 QDUP:
      000748 90 93            [ 1] 1502         LDW Y,X
      00074A 90 FE            [ 2] 1503 	LDW Y,(Y)
      00074C 27 04            [ 1] 1504         JREQ     QDUP1
      00074E 1D 00 02         [ 2] 1505 	SUBW X,#2
      000751 FF               [ 2] 1506         LDW (X),Y
      000752 81               [ 4] 1507 QDUP1:  RET
                                   1508 
                                   1509 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1510 ;       Rot 3rd item to top.
      000753 07 43                 1511         .word      LINK
                           000755  1512 LINK = . 
      000755 03                    1513         .byte      3
      000756 52 4F 54              1514         .ascii     "ROT"
      000759                       1515 ROT:
      000759 90 93            [ 1] 1516         ldw y,x 
      00075B 90 FE            [ 2] 1517         ldw y,(y)
      00075D 90 89            [ 2] 1518         pushw y 
      00075F 90 93            [ 1] 1519         ldw y,x 
      000761 90 EE 04         [ 2] 1520         ldw y,(4,y)
      000764 FF               [ 2] 1521         ldw (x),y 
      000765 90 93            [ 1] 1522         ldw y,x 
      000767 90 EE 02         [ 2] 1523         ldw y,(2,y)
      00076A EF 04            [ 2] 1524         ldw (4,x),y 
      00076C 90 85            [ 2] 1525         popw y 
      00076E EF 02            [ 2] 1526         ldw (2,x),y
      000770 81               [ 4] 1527         ret 
                                   1528 
                                   1529 ;       2DROP   ( w w -- )
                                   1530 ;       Discard two items on stack.
      000771 07 55                 1531         .word      LINK
                           000773  1532 LINK = . 
      000773 05                    1533         .byte      5
      000774 32 44 52 4F 50        1534         .ascii     "2DROP"
      000779                       1535 DDROP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000779 1C 00 04         [ 2] 1536         ADDW X,#4
      00077C 81               [ 4] 1537         RET
                                   1538 
                                   1539 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1540 ;       Duplicate top two items.
      00077D 07 73                 1541         .word      LINK
                           00077F  1542 LINK = . 
      00077F 04                    1543         .byte      4
      000780 32 44 55 50           1544         .ascii     "2DUP"
      000784                       1545 DDUP:
      000784 1D 00 04         [ 2] 1546         SUBW X,#4
      000787 90 93            [ 1] 1547         LDW Y,X
      000789 90 EE 06         [ 2] 1548         LDW Y,(6,Y)
      00078C EF 02            [ 2] 1549         LDW (2,X),Y
      00078E 90 93            [ 1] 1550         LDW Y,X
      000790 90 EE 04         [ 2] 1551         LDW Y,(4,Y)
      000793 FF               [ 2] 1552         LDW (X),Y
      000794 81               [ 4] 1553         RET
                                   1554 
                                   1555 ;       +       ( w w -- sum )
                                   1556 ;       Add top two items.
      000795 07 7F                 1557         .word      LINK
                           000797  1558 LINK = . 
      000797 01                    1559         .byte      1
      000798 2B                    1560         .ascii     "+"
      000799                       1561 PLUS:
      000799 90 93            [ 1] 1562         LDW Y,X
      00079B 90 FE            [ 2] 1563         LDW Y,(Y)
      00079D 90 BF 28         [ 2] 1564         LDW YTEMP,Y
      0007A0 1C 00 02         [ 2] 1565         ADDW X,#2
      0007A3 90 93            [ 1] 1566         LDW Y,X
      0007A5 90 FE            [ 2] 1567         LDW Y,(Y)
      0007A7 72 B9 00 28      [ 2] 1568         ADDW Y,YTEMP
      0007AB FF               [ 2] 1569         LDW (X),Y
      0007AC 81               [ 4] 1570         RET
                                   1571 
                                   1572 ;       NOT     ( w -- w )
                                   1573 ;       One's complement of tos.
      0007AD 07 97                 1574         .word      LINK
                           0007AF  1575 LINK = . 
      0007AF 03                    1576         .byte      3
      0007B0 4E 4F 54              1577         .ascii     "NOT"
      0007B3                       1578 INVER:
      0007B3 90 93            [ 1] 1579         LDW Y,X
      0007B5 90 FE            [ 2] 1580         LDW Y,(Y)
      0007B7 90 53            [ 2] 1581         CPLW Y
      0007B9 FF               [ 2] 1582         LDW (X),Y
      0007BA 81               [ 4] 1583         RET
                                   1584 
                                   1585 ;       NEGATE  ( n -- -n )
                                   1586 ;       Two's complement of tos.
      0007BB 07 AF                 1587         .word      LINK
                           0007BD  1588 LINK = . 
      0007BD 06                    1589         .byte      6
      0007BE 4E 45 47 41 54 45     1590         .ascii     "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007C4                       1591 NEGAT:
      0007C4 90 93            [ 1] 1592         LDW Y,X
      0007C6 90 FE            [ 2] 1593         LDW Y,(Y)
      0007C8 90 50            [ 2] 1594         NEGW Y
      0007CA FF               [ 2] 1595         LDW (X),Y
      0007CB 81               [ 4] 1596         RET
                                   1597 
                                   1598 ;       DNEGATE ( d -- -d )
                                   1599 ;       Two's complement of top double.
      0007CC 07 BD                 1600         .word      LINK
                           0007CE  1601 LINK = . 
      0007CE 07                    1602         .byte      7
      0007CF 44 4E 45 47 41 54 45  1603         .ascii     "DNEGATE"
      0007D6                       1604 DNEGA:
      0007D6 90 93            [ 1] 1605         LDW Y,X
      0007D8 90 FE            [ 2] 1606 	LDW Y,(Y)
      0007DA 90 53            [ 2] 1607         CPLW Y     
      0007DC 90 BF 28         [ 2] 1608 	LDW YTEMP,Y
      0007DF 90 93            [ 1] 1609         LDW Y,X
      0007E1 90 EE 02         [ 2] 1610         LDW Y,(2,Y)
      0007E4 90 53            [ 2] 1611         CPLW Y
      0007E6 72 A9 00 01      [ 2] 1612         addw y,#1
      0007EA EF 02            [ 2] 1613         LDW (2,X),Y
      0007EC 90 BE 28         [ 2] 1614         LDW Y,YTEMP
      0007EF 24 02            [ 1] 1615         JRNC DN1 
      0007F1 90 5C            [ 1] 1616         INCW Y
      0007F3 FF               [ 2] 1617 DN1:    LDW (X),Y
      0007F4 81               [ 4] 1618         RET
                                   1619 
                                   1620 
                                   1621 ;       S>D ( n -- d )
                                   1622 ; convert single integer to double 
      0007F5 07 CE                 1623         .word LINK 
                           0007F7  1624         LINK=. 
      0007F7 03                    1625         .byte 3 
      0007F8 53 3E 44              1626         .ascii "S>D"
      0007FB                       1627 STOD: 
      0007FB 1D 00 02         [ 2] 1628         subw x,#CELLL 
      0007FE 90 5F            [ 1] 1629         clrw y 
      000800 FF               [ 2] 1630         ldw (x),y 
      000801 90 93            [ 1] 1631         ldw y,x 
      000803 90 EE 02         [ 2] 1632         ldw y,(2,y)
      000806 2A 05            [ 1] 1633         jrpl 1$ 
      000808 90 AE FF FF      [ 2] 1634         ldw y,#-1
      00080C FF               [ 2] 1635         ldw (x),y 
      00080D 81               [ 4] 1636 1$:     ret 
                                   1637 
                                   1638 
                                   1639 
                                   1640 
                                   1641 ;       -       ( n1 n2 -- n1-n2 )
                                   1642 ;       Subtraction.
      00080E 07 F7                 1643         .word      LINK
                           000810  1644 LINK = . 
      000810 01                    1645         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000811 2D                    1646         .ascii     "-"
      000812                       1647 SUBB:
      000812 90 93            [ 1] 1648         LDW Y,X
      000814 90 FE            [ 2] 1649         LDW Y,(Y)
      000816 90 BF 28         [ 2] 1650         LDW YTEMP,Y
      000819 1C 00 02         [ 2] 1651         ADDW X,#2
      00081C 90 93            [ 1] 1652         LDW Y,X
      00081E 90 FE            [ 2] 1653         LDW Y,(Y)
      000820 72 B2 00 28      [ 2] 1654         SUBW Y,YTEMP
      000824 FF               [ 2] 1655         LDW (X),Y
      000825 81               [ 4] 1656         RET
                                   1657 
                                   1658 ;       ABS     ( n -- n )
                                   1659 ;       Return  absolute value of n.
      000826 08 10                 1660         .word      LINK
                           000828  1661 LINK = . 
      000828 03                    1662         .byte      3
      000829 41 42 53              1663         .ascii     "ABS"
      00082C                       1664 ABSS:
      00082C 90 93            [ 1] 1665         LDW Y,X
      00082E 90 FE            [ 2] 1666 	LDW Y,(Y)
      000830 2A 03            [ 1] 1667         JRPL     AB1     ;negate:
      000832 90 50            [ 2] 1668         NEGW     Y     ;else negate hi byte
      000834 FF               [ 2] 1669         LDW (X),Y
      000835 81               [ 4] 1670 AB1:    RET
                                   1671 
                                   1672 ;       =       ( w w -- t )
                                   1673 ;       Return true if top two are =al.
      000836 08 28                 1674         .word      LINK
                           000838  1675 LINK = . 
      000838 01                    1676         .byte      1
      000839 3D                    1677         .ascii     "="
      00083A                       1678 EQUAL:
      00083A A6 FF            [ 1] 1679         LD A,#0xFF  ;true
      00083C 90 93            [ 1] 1680         LDW Y,X    ;D = n2
      00083E 90 FE            [ 2] 1681         LDW Y,(Y)
      000840 90 BF 28         [ 2] 1682         LDW YTEMP,Y
      000843 1C 00 02         [ 2] 1683         ADDW X,#2
      000846 90 93            [ 1] 1684         LDW Y,X
      000848 90 FE            [ 2] 1685         LDW Y,(Y)
      00084A 90 B3 28         [ 2] 1686         CPW Y,YTEMP     ;if n2 <> n1
      00084D 27 01            [ 1] 1687         JREQ     EQ1
      00084F 4F               [ 1] 1688         CLR A
      000850 F7               [ 1] 1689 EQ1:    LD (X),A
      000851 E7 01            [ 1] 1690         LD (1,X),A
      000853 81               [ 4] 1691 	RET     
                                   1692 
                                   1693 ;       U<      ( u u -- t )
                                   1694 ;       Unsigned compare of top two items.
      000854 08 38                 1695         .word      LINK
                           000856  1696 LINK = . 
      000856 02                    1697         .byte      2
      000857 55 3C                 1698         .ascii     "U<"
      000859                       1699 ULESS:
      000859 A6 FF            [ 1] 1700         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00085B 90 93            [ 1] 1701         LDW Y,X    ;D = n2
      00085D 90 FE            [ 2] 1702         LDW Y,(Y)
      00085F 90 BF 28         [ 2] 1703         LDW YTEMP,Y
      000862 1C 00 02         [ 2] 1704         ADDW X,#2
      000865 90 93            [ 1] 1705         LDW Y,X
      000867 90 FE            [ 2] 1706         LDW Y,(Y)
      000869 90 B3 28         [ 2] 1707         CPW Y,YTEMP     ;if n2 <> n1
      00086C 25 01            [ 1] 1708         JRULT     ULES1
      00086E 4F               [ 1] 1709         CLR A
      00086F F7               [ 1] 1710 ULES1:  LD (X),A
      000870 E7 01            [ 1] 1711         LD (1,X),A
      000872 81               [ 4] 1712 	RET     
                                   1713 
                                   1714 ;       <       ( n1 n2 -- t )
                                   1715 ;       Signed compare of top two items.
      000873 08 56                 1716         .word      LINK
                           000875  1717 LINK = . 
      000875 01                    1718         .byte      1
      000876 3C                    1719         .ascii     "<"
      000877                       1720 LESS:
      000877 A6 FF            [ 1] 1721         LD A,#0xFF  ;true
      000879 90 93            [ 1] 1722         LDW Y,X    ;D = n2
      00087B 90 FE            [ 2] 1723         LDW Y,(Y)
      00087D 90 BF 28         [ 2] 1724         LDW YTEMP,Y
      000880 1C 00 02         [ 2] 1725         ADDW X,#2
      000883 90 93            [ 1] 1726         LDW Y,X
      000885 90 FE            [ 2] 1727         LDW Y,(Y)
      000887 90 B3 28         [ 2] 1728         CPW Y,YTEMP     ;if n2 <> n1
      00088A 2F 01            [ 1] 1729         JRSLT     LT1
      00088C 4F               [ 1] 1730         CLR A
      00088D F7               [ 1] 1731 LT1:    LD (X),A
      00088E E7 01            [ 1] 1732         LD (1,X),A
      000890 81               [ 4] 1733 	RET     
                                   1734 
                                   1735 ;       MAX     ( n n -- n )
                                   1736 ;       Return greater of two top items.
      000891 08 75                 1737         .word      LINK
                           000893  1738 LINK = . 
      000893 03                    1739         .byte      3
      000894 4D 41 58              1740         .ascii     "MAX"
      000897                       1741 MAX:
      000897 90 93            [ 1] 1742         LDW Y,X    ;D = n2
      000899 90 EE 02         [ 2] 1743         LDW Y,(2,Y)
      00089C 90 BF 28         [ 2] 1744         LDW YTEMP,Y
      00089F 90 93            [ 1] 1745         LDW Y,X
      0008A1 90 FE            [ 2] 1746         LDW Y,(Y)
      0008A3 90 B3 28         [ 2] 1747         CPW Y,YTEMP     ;if n2 <> n1
      0008A6 2F 02            [ 1] 1748         JRSLT     MAX1
      0008A8 EF 02            [ 2] 1749         LDW (2,X),Y
      0008AA 1C 00 02         [ 2] 1750 MAX1:   ADDW X,#2
      0008AD 81               [ 4] 1751 	RET     
                                   1752 
                                   1753 ;       MIN     ( n n -- n )
                                   1754 ;       Return smaller of top two items.
      0008AE 08 93                 1755         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           0008B0  1756 LINK = . 
      0008B0 03                    1757         .byte      3
      0008B1 4D 49 4E              1758         .ascii     "MIN"
      0008B4                       1759 MIN:
      0008B4 90 93            [ 1] 1760         LDW Y,X    ;D = n2
      0008B6 90 EE 02         [ 2] 1761         LDW Y,(2,Y)
      0008B9 90 BF 28         [ 2] 1762         LDW YTEMP,Y
      0008BC 90 93            [ 1] 1763         LDW Y,X
      0008BE 90 FE            [ 2] 1764         LDW Y,(Y)
      0008C0 90 B3 28         [ 2] 1765         CPW Y,YTEMP     ;if n2 <> n1
      0008C3 2C 02            [ 1] 1766         JRSGT     MIN1
      0008C5 EF 02            [ 2] 1767         LDW (2,X),Y
      0008C7 1C 00 02         [ 2] 1768 MIN1:	ADDW X,#2
      0008CA 81               [ 4] 1769 	RET     
                                   1770 
                                   1771 ;       WITHIN  ( u ul uh -- t )
                                   1772 ;       Return true if u is within
                                   1773 ;       range of ul and uh. ( ul <= u < uh )
      0008CB 08 B0                 1774         .word      LINK
                           0008CD  1775 LINK = . 
      0008CD 06                    1776         .byte      6
      0008CE 57 49 54 48 49 4E     1777         .ascii     "WITHIN"
      0008D4                       1778 WITHI:
      0008D4 CD 05 C8         [ 4] 1779         CALL     OVER
      0008D7 CD 08 12         [ 4] 1780         CALL     SUBB
      0008DA CD 05 67         [ 4] 1781         CALL     TOR
      0008DD CD 08 12         [ 4] 1782         CALL     SUBB
      0008E0 CD 05 48         [ 4] 1783         CALL     RFROM
      0008E3 CC 08 59         [ 2] 1784         JP     ULESS
                                   1785 
                                   1786 ;; Divide
                                   1787 
                                   1788 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1789 ;       Unsigned divide of a double by a
                                   1790 ;       single. Return mod and quotient.
      0008E6 08 CD                 1791         .word      LINK
                           0008E8  1792 LINK = . 
      0008E8 06                    1793         .byte      6
      0008E9 55 4D 2F 4D 4F 44     1794         .ascii     "UM/MOD"
                                   1795 ; 2021-02-22
                                   1796 ; changed algortihm for Jeeek one 
                                   1797 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0008EF                       1798 UMMOD:
      0008EF 90 93            [ 1] 1799         LDW     Y,X             ; stack pointer to Y
      0008F1 FE               [ 2] 1800         LDW     X,(X)           ; un
      0008F2 BF 28            [ 2] 1801         LDW     YTEMP,X         ; save un
      0008F4 93               [ 1] 1802         LDW     X,Y
      0008F5 5C               [ 1] 1803         INCW    X               ; drop un
      0008F6 5C               [ 1] 1804         INCW    X
      0008F7 89               [ 2] 1805         PUSHW   X               ; save stack pointer
      0008F8 FE               [ 2] 1806         LDW     X,(X)           ; X=udh
      0008F9 90 EE 04         [ 2] 1807         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0008FC B3 28            [ 2] 1808         CPW     X,YTEMP
      0008FE 25 0B            [ 1] 1809         JRULT   MMSM1           ; X is still on the R-stack
      000900 85               [ 2] 1810         POPW    X               ; restore stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000901 90 AE FF FF      [ 2] 1811         LDW     Y,#0xFFFF       ; overflow result:
      000905 FF               [ 2] 1812         LDW     (X),Y           ; quotient max. 16 bit value
      000906 90 5F            [ 1] 1813         CLRW    Y
      000908 EF 02            [ 2] 1814         LDW     (2,X),Y         ; remainder 0
      00090A 81               [ 4] 1815         RET
      00090B                       1816 MMSM1:
      00090B A6 10            [ 1] 1817         LD      A,#16           ; loop count
      00090D 90 58            [ 2] 1818         SLLW    Y               ; udl shift udl into udh
      00090F                       1819 MMSM3:
      00090F 59               [ 2] 1820         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000910 25 04            [ 1] 1821         JRC     MMSMa           ; if carry out of rotate
      000912 B3 28            [ 2] 1822         CPW     X,YTEMP         ; compare udh to un
      000914 25 05            [ 1] 1823         JRULT   MMSM4           ; can't subtract
      000916                       1824 MMSMa:
      000916 72 B0 00 28      [ 2] 1825         SUBW    X,YTEMP         ; can subtract
      00091A 98               [ 1] 1826         RCF
      00091B                       1827 MMSM4:
      00091B 8C               [ 1] 1828         CCF                     ; quotient bit
      00091C 90 59            [ 2] 1829         RLCW    Y               ; rotate into quotient, rotate out udl
      00091E 4A               [ 1] 1830         DEC     A               ; repeat
      00091F 26 EE            [ 1] 1831         JRNE    MMSM3           ; if A == 0
      000921                       1832 MMSMb:
      000921 BF 28            [ 2] 1833         LDW     YTEMP,X         ; done, save remainder
      000923 85               [ 2] 1834         POPW    X               ; restore stack pointer
      000924 FF               [ 2] 1835         LDW     (X),Y           ; save quotient
      000925 90 BE 28         [ 2] 1836         LDW     Y,YTEMP         ; remainder onto stack
      000928 EF 02            [ 2] 1837         LDW     (2,X),Y
      00092A 81               [ 4] 1838         RET
                                   1839 
                                   1840 
                                   1841 ;----------------------------------------------	
                                   1842 ;       M/MOD   ( d n -- r q )
                                   1843 ;       Signed floored divide of double by
                                   1844 ;       single. Return mod and quotient.
                                   1845 ;----------------------------------------------	
      00092B 08 E8                 1846         .word      LINK
                           00092D  1847 LINK = . 
      00092D 05                    1848         .byte      5
      00092E 4D 2F 4D 4F 44        1849         .ascii     "M/MOD"
      000933                       1850 MSMOD:  
      000933 CD 05 9E         [ 4] 1851         CALL	DUPP
      000936 CD 05 D7         [ 4] 1852         CALL	ZLESS
      000939 CD 05 9E         [ 4] 1853         CALL	DUPP
      00093C CD 05 67         [ 4] 1854         CALL	TOR
      00093F CD 04 AC         [ 4] 1855         CALL	QBRAN
      000942 09 50                 1856         .word	MMOD1
      000944 CD 07 C4         [ 4] 1857         CALL	NEGAT
      000947 CD 05 67         [ 4] 1858         CALL	TOR
      00094A CD 07 D6         [ 4] 1859         CALL	DNEGA
      00094D CD 05 48         [ 4] 1860         CALL	RFROM
      000950 CD 05 67         [ 4] 1861 MMOD1:	CALL	TOR
      000953 CD 05 9E         [ 4] 1862         CALL	DUPP
      000956 CD 05 D7         [ 4] 1863         CALL	ZLESS
      000959 CD 04 AC         [ 4] 1864         CALL	QBRAN
      00095C 09 64                 1865         .word	MMOD2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00095E CD 05 5B         [ 4] 1866         CALL	RAT
      000961 CD 07 99         [ 4] 1867         CALL	PLUS
      000964 CD 05 48         [ 4] 1868 MMOD2:	CALL	RFROM
      000967 CD 08 EF         [ 4] 1869         CALL	UMMOD
      00096A CD 05 48         [ 4] 1870         CALL	RFROM
      00096D CD 04 AC         [ 4] 1871         CALL	QBRAN
      000970 09 7B                 1872         .word	MMOD3
      000972 CD 05 AE         [ 4] 1873         CALL	SWAPP
      000975 CD 07 C4         [ 4] 1874         CALL	NEGAT
      000978 CD 05 AE         [ 4] 1875         CALL	SWAPP
      00097B 81               [ 4] 1876 MMOD3:	RET
                                   1877 
                                   1878 ;       /MOD    ( n n -- r q )
                                   1879 ;       Signed divide. Return mod and quotient.
      00097C 09 2D                 1880         .word      LINK
                           00097E  1881 LINK = . 
      00097E 04                    1882         .byte      4
      00097F 2F 4D 4F 44           1883         .ascii     "/MOD"
      000983                       1884 SLMOD:
      000983 CD 05 C8         [ 4] 1885         CALL	OVER
      000986 CD 05 D7         [ 4] 1886         CALL	ZLESS
      000989 CD 05 AE         [ 4] 1887         CALL	SWAPP
      00098C CC 09 33         [ 2] 1888         JP	MSMOD
                                   1889 
                                   1890 ;       MOD     ( n n -- r )
                                   1891 ;       Signed divide. Return mod only.
      00098F 09 7E                 1892         .word      LINK
                           000991  1893 LINK = . 
      000991 03                    1894         .byte      3
      000992 4D 4F 44              1895         .ascii     "MOD"
      000995                       1896 MODD:
      000995 CD 09 83         [ 4] 1897 	CALL	SLMOD
      000998 CC 05 94         [ 2] 1898 	JP	DROP
                                   1899 
                                   1900 ;       /       ( n n -- q )
                                   1901 ;       Signed divide. Return quotient only.
      00099B 09 91                 1902         .word      LINK
                           00099D  1903 LINK = . 
      00099D 01                    1904         .byte      1
      00099E 2F                    1905         .ascii     "/"
      00099F                       1906 SLASH:
      00099F CD 09 83         [ 4] 1907         CALL	SLMOD
      0009A2 CD 05 AE         [ 4] 1908         CALL	SWAPP
      0009A5 CC 05 94         [ 2] 1909         JP	DROP
                                   1910 
                                   1911 ;; Multiply
                                   1912 
                                   1913 ;       UM*     ( u u -- ud )
                                   1914 ;       Unsigned multiply. Return double product.
      0009A8 09 9D                 1915         .word      LINK
                           0009AA  1916 LINK = . 
      0009AA 03                    1917         .byte      3
      0009AB 55 4D 2A              1918         .ascii     "UM*"
      0009AE                       1919 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1920 ; take advantage of SP addressing modes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1921 ; these PRODx in RAM are not required
                                   1922 ; the product is kept on stack as local variable 
                                   1923         ;; bytes offset on data stack 
                           000002  1924         da=2 
                           000003  1925         db=3 
                           000000  1926         dc=0 
                           000001  1927         dd=1 
                                   1928         ;; product bytes offset on return stack 
                           000001  1929         UD1=1  ; ud bits 31..24
                           000002  1930         UD2=2  ; ud bits 23..16
                           000003  1931         UD3=3  ; ud bits 15..8 
                           000004  1932         UD4=4  ; ud bits 7..0 
                                   1933         ;; local variable for product set to zero   
      0009AE 90 5F            [ 1] 1934         clrw y 
      0009B0 90 89            [ 2] 1935         pushw y  ; bits 15..0
      0009B2 90 89            [ 2] 1936         pushw y  ; bits 31..16 
      0009B4 E6 03            [ 1] 1937         ld a,(db,x) ; b 
      0009B6 90 97            [ 1] 1938         ld yl,a 
      0009B8 E6 01            [ 1] 1939         ld a,(dd,x)   ; d
      0009BA 90 42            [ 4] 1940         mul y,a    ; b*d  
      0009BC 17 03            [ 2] 1941         ldw (UD3,sp),y ; lowest weight product 
      0009BE E6 03            [ 1] 1942         ld a,(db,x)
      0009C0 90 97            [ 1] 1943         ld yl,a 
      0009C2 E6 00            [ 1] 1944         ld a,(dc,x)
      0009C4 90 42            [ 4] 1945         mul y,a  ; b*c 
                                   1946         ;;; do the partial sum 
      0009C6 72 F9 02         [ 2] 1947         addw y,(UD2,sp)
      0009C9 4F               [ 1] 1948         clr a 
      0009CA 49               [ 1] 1949         rlc a
      0009CB 6B 01            [ 1] 1950         ld (UD1,sp),a 
      0009CD 17 02            [ 2] 1951         ldw (UD2,sp),y 
      0009CF E6 02            [ 1] 1952         ld a,(da,x)
      0009D1 90 97            [ 1] 1953         ld yl,a 
      0009D3 E6 01            [ 1] 1954         ld a,(dd,x)
      0009D5 90 42            [ 4] 1955         mul y,a   ; a*d 
                                   1956         ;; do partial sum 
      0009D7 72 F9 02         [ 2] 1957         addw y,(UD2,sp)
      0009DA 4F               [ 1] 1958         clr a 
      0009DB 19 01            [ 1] 1959         adc a,(UD1,sp)
      0009DD 6B 01            [ 1] 1960         ld (UD1,sp),a  
      0009DF 17 02            [ 2] 1961         ldw (UD2,sp),y 
      0009E1 E6 02            [ 1] 1962         ld a,(da,x)
      0009E3 90 97            [ 1] 1963         ld yl,a 
      0009E5 E6 00            [ 1] 1964         ld a,(dc,x)
      0009E7 90 42            [ 4] 1965         mul y,a  ;  a*c highest weight product 
                                   1966         ;;; do partial sum 
      0009E9 72 F9 01         [ 2] 1967         addw y,(UD1,sp)
      0009EC FF               [ 2] 1968         ldw (x),y  ; udh 
      0009ED 16 03            [ 2] 1969         ldw y,(UD3,sp)
      0009EF EF 02            [ 2] 1970         ldw (2,x),y  ; udl  
      0009F1 5B 04            [ 2] 1971         addw sp,#4 ; drop local variable 
      0009F3 81               [ 4] 1972         ret  
                                   1973 
                                   1974 
                                   1975 ;       *       ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1976 ;       Signed multiply. Return single product.
      0009F4 09 AA                 1977         .word      LINK
                           0009F6  1978 LINK = . 
      0009F6 01                    1979         .byte      1
      0009F7 2A                    1980         .ascii     "*"
      0009F8                       1981 STAR:
      0009F8 CD 09 AE         [ 4] 1982 	CALL	UMSTA
      0009FB CC 05 94         [ 2] 1983 	JP	DROP
                                   1984 
                                   1985 ;       M*      ( n n -- d )
                                   1986 ;       Signed multiply. Return double product.
      0009FE 09 F6                 1987         .word      LINK
                           000A00  1988 LINK = . 
      000A00 02                    1989         .byte      2
      000A01 4D 2A                 1990         .ascii     "M*"
      000A03                       1991 MSTAR:      
      000A03 CD 07 84         [ 4] 1992         CALL	DDUP
      000A06 CD 06 13         [ 4] 1993         CALL	XORR
      000A09 CD 05 D7         [ 4] 1994         CALL	ZLESS
      000A0C CD 05 67         [ 4] 1995         CALL	TOR
      000A0F CD 08 2C         [ 4] 1996         CALL	ABSS
      000A12 CD 05 AE         [ 4] 1997         CALL	SWAPP
      000A15 CD 08 2C         [ 4] 1998         CALL	ABSS
      000A18 CD 09 AE         [ 4] 1999         CALL	UMSTA
      000A1B CD 05 48         [ 4] 2000         CALL	RFROM
      000A1E CD 04 AC         [ 4] 2001         CALL	QBRAN
      000A21 0A 26                 2002         .word	MSTA1
      000A23 CD 07 D6         [ 4] 2003         CALL	DNEGA
      000A26 81               [ 4] 2004 MSTA1:	RET
                                   2005 
                                   2006 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2007 ;       Multiply n1 and n2, then divide
                                   2008 ;       by n3. Return mod and quotient.
      000A27 0A 00                 2009         .word      LINK
                           000A29  2010 LINK = . 
      000A29 05                    2011         .byte      5
      000A2A 2A 2F 4D 4F 44        2012         .ascii     "*/MOD"
      000A2F                       2013 SSMOD:
      000A2F CD 05 67         [ 4] 2014         CALL     TOR
      000A32 CD 0A 03         [ 4] 2015         CALL     MSTAR
      000A35 CD 05 48         [ 4] 2016         CALL     RFROM
      000A38 CC 09 33         [ 2] 2017         JP     MSMOD
                                   2018 
                                   2019 ;       */      ( n1 n2 n3 -- q )
                                   2020 ;       Multiply n1 by n2, then divide
                                   2021 ;       by n3. Return quotient only.
      000A3B 0A 29                 2022         .word      LINK
                           000A3D  2023 LINK = . 
      000A3D 02                    2024         .byte      2
      000A3E 2A 2F                 2025         .ascii     "*/"
      000A40                       2026 STASL:
      000A40 CD 0A 2F         [ 4] 2027         CALL	SSMOD
      000A43 CD 05 AE         [ 4] 2028         CALL	SWAPP
      000A46 CC 05 94         [ 2] 2029         JP	DROP
                                   2030 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2031 ;; Miscellaneous
                                   2032 
                                   2033 ;       CELL+   ( a -- a )
                                   2034 ;       Add cell size in byte to address.
      000A49 0A 3D                 2035         .word      LINK
                           000A4B  2036 LINK = . 
      000A4B 02                    2037         .byte       2
      000A4C 32 2B                 2038         .ascii     "2+"
      000A4E                       2039 CELLP:
      000A4E 90 93            [ 1] 2040         LDW Y,X
      000A50 90 FE            [ 2] 2041 	LDW Y,(Y)
      000A52 72 A9 00 02      [ 2] 2042         ADDW Y,#CELLL 
      000A56 FF               [ 2] 2043         LDW (X),Y
      000A57 81               [ 4] 2044         RET
                                   2045 
                                   2046 ;       CELL-   ( a -- a )
                                   2047 ;       Subtract 2 from address.
      000A58 0A 4B                 2048         .word      LINK
                           000A5A  2049 LINK = . 
      000A5A 02                    2050         .byte       2
      000A5B 32 2D                 2051         .ascii     "2-"
      000A5D                       2052 CELLM:
      000A5D 90 93            [ 1] 2053         LDW Y,X
      000A5F 90 FE            [ 2] 2054 	LDW Y,(Y)
      000A61 72 A2 00 02      [ 2] 2055         SUBW Y,#CELLL
      000A65 FF               [ 2] 2056         LDW (X),Y
      000A66 81               [ 4] 2057         RET
                                   2058 
                                   2059 ;       CELLS   ( n -- n )
                                   2060 ;       Multiply tos by 2.
      000A67 0A 5A                 2061         .word      LINK
                           000A69  2062 LINK = . 
      000A69 02                    2063         .byte       2
      000A6A 32 2A                 2064         .ascii     "2*"
      000A6C                       2065 CELLS:
      000A6C 90 93            [ 1] 2066         LDW Y,X
      000A6E 90 FE            [ 2] 2067 	LDW Y,(Y)
      000A70 90 58            [ 2] 2068         SLAW Y
      000A72 FF               [ 2] 2069         LDW (X),Y
      000A73 81               [ 4] 2070         RET
                                   2071 
                                   2072 ;       1+      ( a -- a )
                                   2073 ;       Add cell size in byte to address.
      000A74 0A 69                 2074         .word      LINK
                           000A76  2075 LINK = . 
      000A76 02                    2076         .byte      2
      000A77 31 2B                 2077         .ascii     "1+"
      000A79                       2078 ONEP:
      000A79 90 93            [ 1] 2079         LDW Y,X
      000A7B 90 FE            [ 2] 2080 	LDW Y,(Y)
      000A7D 90 5C            [ 1] 2081         INCW Y
      000A7F FF               [ 2] 2082         LDW (X),Y
      000A80 81               [ 4] 2083         RET
                                   2084 
                                   2085 ;       1-      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2086 ;       Subtract 2 from address.
      000A81 0A 76                 2087         .word      LINK
                           000A83  2088 LINK = . 
      000A83 02                    2089         .byte      2
      000A84 31 2D                 2090         .ascii     "1-"
      000A86                       2091 ONEM:
      000A86 90 93            [ 1] 2092         LDW Y,X
      000A88 90 FE            [ 2] 2093 	LDW Y,(Y)
      000A8A 90 5A            [ 2] 2094         DECW Y
      000A8C FF               [ 2] 2095         LDW (X),Y
      000A8D 81               [ 4] 2096         RET
                                   2097 
                                   2098 ;  shift left n times 
                                   2099 ; LSHIFT ( n1 n2 -- n1<<n2 )
      000A8E 0A 83                 2100         .word LINK 
                           000A90  2101         LINK=.
      000A90 06                    2102         .byte 6 
      000A91 4C 53 48 49 46 54     2103         .ascii "LSHIFT"
      000A97                       2104 LSHIFT:
      000A97 E6 01            [ 1] 2105         ld a,(1,x)
      000A99 1C 00 02         [ 2] 2106         addw x,#CELLL 
      000A9C 90 93            [ 1] 2107         ldw y,x 
      000A9E 90 FE            [ 2] 2108         ldw y,(y)
      000AA0                       2109 LSHIFT1:
      000AA0 4D               [ 1] 2110         tnz a 
      000AA1 27 05            [ 1] 2111         jreq LSHIFT4 
      000AA3 90 58            [ 2] 2112         sllw y 
      000AA5 4A               [ 1] 2113         dec a 
      000AA6 20 F8            [ 2] 2114         jra LSHIFT1 
      000AA8                       2115 LSHIFT4:
      000AA8 FF               [ 2] 2116         ldw (x),y 
      000AA9 81               [ 4] 2117         ret 
                                   2118 
                                   2119 ; shift right n times                 
                                   2120 ; RSHIFT (n1 n2 -- n1>>n2 )
      000AAA 0A 90                 2121         .word LINK 
                           000AAC  2122         LINK=.
      000AAC 06                    2123         .byte 6
      000AAD 52 53 48 49 46 54     2124         .ascii "RSHIFT"
      000AB3                       2125 RSHIFT:
      000AB3 E6 01            [ 1] 2126         ld a,(1,x)
      000AB5 1C 00 02         [ 2] 2127         addw x,#CELLL 
      000AB8 90 93            [ 1] 2128         ldw y,x 
      000ABA 90 FE            [ 2] 2129         ldw y,(y)
      000ABC                       2130 RSHIFT1:
      000ABC 4D               [ 1] 2131         tnz a 
      000ABD 27 05            [ 1] 2132         jreq RSHIFT4 
      000ABF 90 54            [ 2] 2133         srlw y 
      000AC1 4A               [ 1] 2134         dec a 
      000AC2 20 F8            [ 2] 2135         jra RSHIFT1 
      000AC4                       2136 RSHIFT4:
      000AC4 FF               [ 2] 2137         ldw (x),y 
      000AC5 81               [ 4] 2138         ret 
                                   2139 
                                   2140 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2141 ;       2/      ( n -- n )
                                   2142 ;       divide  tos by 2.
      000AC6 0A AC                 2143         .word      LINK
                           000AC8  2144 LINK = . 
      000AC8 02                    2145         .byte      2
      000AC9 32 2F                 2146         .ascii     "2/"
      000ACB                       2147 TWOSL:
      000ACB 90 93            [ 1] 2148         LDW Y,X
      000ACD 90 FE            [ 2] 2149 	LDW Y,(Y)
      000ACF 90 57            [ 2] 2150         SRAW Y
      000AD1 FF               [ 2] 2151         LDW (X),Y
      000AD2 81               [ 4] 2152         RET
                                   2153 
                                   2154 ;       BL      ( -- 32 )
                                   2155 ;       Return 32,  blank character.
      000AD3 0A C8                 2156         .word      LINK
                           000AD5  2157 LINK = . 
      000AD5 02                    2158         .byte      2
      000AD6 42 4C                 2159         .ascii     "BL"
      000AD8                       2160 BLANK:
      000AD8 1D 00 02         [ 2] 2161         SUBW X,#2
      000ADB 90 AE 00 20      [ 2] 2162 	LDW Y,#32
      000ADF FF               [ 2] 2163         LDW (X),Y
      000AE0 81               [ 4] 2164         RET
                                   2165 
                                   2166 ;         0     ( -- 0)
                                   2167 ;         Return 0.
      000AE1 0A D5                 2168         .word      LINK
                           000AE3  2169 LINK = . 
      000AE3 01                    2170         .byte       1
      000AE4 30                    2171         .ascii     "0"
      000AE5                       2172 ZERO:
      000AE5 1D 00 02         [ 2] 2173         SUBW X,#2
      000AE8 90 5F            [ 1] 2174 	CLRW Y
      000AEA FF               [ 2] 2175         LDW (X),Y
      000AEB 81               [ 4] 2176         RET
                                   2177 
                                   2178 ;         1     ( -- 1)
                                   2179 ;         Return 1.
      000AEC 0A E3                 2180         .word      LINK
                           000AEE  2181 LINK = . 
      000AEE 01                    2182         .byte       1
      000AEF 31                    2183         .ascii     "1"
      000AF0                       2184 ONE:
      000AF0 1D 00 02         [ 2] 2185         SUBW X,#2
      000AF3 90 AE 00 01      [ 2] 2186 	LDW Y,#1
      000AF7 FF               [ 2] 2187         LDW (X),Y
      000AF8 81               [ 4] 2188         RET
                                   2189 
                                   2190 ;         -1    ( -- -1)
                                   2191 ;         Return 32,  blank character.
      000AF9 0A EE                 2192         .word      LINK
                           000AFB  2193 LINK = . 
      000AFB 02                    2194         .byte       2
      000AFC 2D 31                 2195         .ascii     "-1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000AFE                       2196 MONE:
      000AFE 1D 00 02         [ 2] 2197         SUBW X,#2
      000B01 90 AE FF FF      [ 2] 2198 	LDW Y,#0xFFFF
      000B05 FF               [ 2] 2199         LDW (X),Y
      000B06 81               [ 4] 2200         RET
                                   2201 
                                   2202 ;       >CHAR   ( c -- c )
                                   2203 ;       Filter non-printing characters.
      000B07 0A FB                 2204         .word      LINK
                           000B09  2205 LINK = . 
      000B09 05                    2206         .byte      5
      000B0A 3E 43 48 41 52        2207         .ascii     ">CHAR"
      000B0F                       2208 TCHAR:
      000B0F E6 01            [ 1] 2209         ld a,(1,x)
      000B11 A1 20            [ 1] 2210         cp a,#32  
      000B13 2B 05            [ 1] 2211         jrmi 1$ 
      000B15 A1 7F            [ 1] 2212         cp a,#127 
      000B17 2A 01            [ 1] 2213         jrpl 1$ 
      000B19 81               [ 4] 2214         ret 
      000B1A A6 5F            [ 1] 2215 1$:     ld a,#'_ 
      000B1C E7 01            [ 1] 2216         ld (1,x),a 
      000B1E 81               [ 4] 2217         ret 
                                   2218 
                                   2219 ;       DEPTH   ( -- n )
                                   2220 ;       Return  depth of  data stack.
      000B1F 0B 09                 2221         .word      LINK
                           000B21  2222 LINK = . 
      000B21 05                    2223         .byte      5
      000B22 44 45 50 54 48        2224         .ascii     "DEPTH"
      000B27                       2225 DEPTH: 
      000B27 90 BE 2E         [ 2] 2226         LDW Y,SP0    ;save data stack ptr
      000B2A BF 26            [ 2] 2227 	LDW XTEMP,X
      000B2C 72 B2 00 26      [ 2] 2228         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000B30 90 57            [ 2] 2229         SRAW Y    ;Y = #stack items
      000B32 1D 00 02         [ 2] 2230 	SUBW X,#2
      000B35 FF               [ 2] 2231         LDW (X),Y     ; if neg, underflow
      000B36 81               [ 4] 2232         RET
                                   2233 
                                   2234 ;       PICK    ( ... +n -- ... w )
                                   2235 ;       Copy  nth stack item to tos.
      000B37 0B 21                 2236         .word      LINK
                           000B39  2237 LINK = . 
      000B39 04                    2238         .byte      4
      000B3A 50 49 43 4B           2239         .ascii     "PICK"
      000B3E                       2240 PICK:
      000B3E 90 93            [ 1] 2241         LDW Y,X   ;D = n1
      000B40 90 FE            [ 2] 2242         LDW Y,(Y)
                                   2243 ; modified for standard compliance          
                                   2244 ; 0 PICK must be equivalent to DUP 
      000B42 90 5C            [ 1] 2245         INCW Y 
      000B44 90 58            [ 2] 2246         SLAW Y
      000B46 BF 26            [ 2] 2247         LDW XTEMP,X
      000B48 72 B9 00 26      [ 2] 2248         ADDW Y,XTEMP
      000B4C 90 FE            [ 2] 2249         LDW Y,(Y)
      000B4E FF               [ 2] 2250         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B4F 81               [ 4] 2251         RET
                                   2252 
                                   2253 ;; Memory access
                                   2254 
                                   2255 ;       +!      ( n a -- )
                                   2256 ;       Add n to  contents at address a.
      000B50 0B 39                 2257         .word      LINK
                           000B52  2258 LINK = . 
      000B52 02                    2259         .byte      2
      000B53 2B 21                 2260         .ascii     "+!"
      000B55                       2261 PSTOR:
      000B55 90 93            [ 1] 2262         ldw y,x 
      000B57 90 FE            [ 2] 2263         ldw y,(y)
      000B59 90 BF 28         [ 2] 2264         ldw YTEMP,y  ; address
      000B5C 90 FE            [ 2] 2265         ldw y,(y)  
      000B5E 90 89            [ 2] 2266         pushw y  ; value at address 
      000B60 90 93            [ 1] 2267         ldw y,x 
      000B62 90 EE 02         [ 2] 2268         ldw y,(2,y) ; n 
      000B65 72 F9 01         [ 2] 2269         addw y,(1,sp) ; n+value
      000B68 91 CF 28         [ 5] 2270         ldw [YTEMP],y ;  a!
      000B6B 90 85            [ 2] 2271         popw y    ;drop local var
      000B6D 1C 00 04         [ 2] 2272         addw x,#4 ; DDROP 
      000B70 81               [ 4] 2273         ret 
                                   2274 
                                   2275 ;       2!      ( d a -- )
                                   2276 ;       Store  double integer to address a.
      000B71 0B 52                 2277         .word      LINK
                           000B73  2278 LINK = . 
      000B73 02                    2279         .byte      2
      000B74 32 21                 2280         .ascii     "2!"
      000B76                       2281 DSTOR:
      000B76 90 93            [ 1] 2282         ldw y,x 
      000B78 90 FE            [ 2] 2283         ldw y,(y)
      000B7A 90 BF 28         [ 2] 2284         ldw YTEMP,y ; address 
      000B7D 1C 00 02         [ 2] 2285         addw x,#CELLL ; drop a 
      000B80 90 93            [ 1] 2286         ldw y,x 
      000B82 90 FE            [ 2] 2287         ldw y,(y) ; hi word 
      000B84 89               [ 2] 2288         pushw x 
      000B85 EE 02            [ 2] 2289         ldw x,(2,x) ; lo word 
      000B87 91 CF 28         [ 5] 2290         ldw [YTEMP],y
      000B8A 90 93            [ 1] 2291         ldw y,x 
      000B8C AE 00 02         [ 2] 2292         ldw x,#2 
      000B8F 92 DF 28         [ 5] 2293         ldw ([YTEMP],x),y 
      000B92 85               [ 2] 2294         popw x 
      000B93 1C 00 04         [ 2] 2295         addw x,#4 ; DDROP 
      000B96 81               [ 4] 2296         ret 
                                   2297 
                                   2298 ;       2@      ( a -- d )
                                   2299 ;       Fetch double integer from address a.
      000B97 0B 73                 2300         .word      LINK
                           000B99  2301 LINK = . 
      000B99 02                    2302         .byte      2
      000B9A 32 40                 2303         .ascii     "2@"
      000B9C                       2304 DAT:
      000B9C 90 93            [ 1] 2305         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B9E 90 FE            [ 2] 2306         ldw y,(y) ;address 
      000BA0 90 BF 28         [ 2] 2307         ldw YTEMP,y 
      000BA3 1D 00 02         [ 2] 2308         subw x,#CELLL ; space for udh 
      000BA6 91 CE 28         [ 5] 2309         ldw y,[YTEMP] ; udh 
      000BA9 FF               [ 2] 2310         ldw (x),y 
      000BAA 90 AE 00 02      [ 2] 2311         ldw y,#2
      000BAE 91 DE 28         [ 5] 2312         ldw y,([YTEMP],y) ; udl 
      000BB1 EF 02            [ 2] 2313         ldw (2,x),y
      000BB3 81               [ 4] 2314         ret 
                                   2315 
                                   2316 ;       COUNT   ( b -- b +n )
                                   2317 ;       Return count byte of a string
                                   2318 ;       and add 1 to byte address.
      000BB4 0B 99                 2319         .word      LINK
                           000BB6  2320 LINK = . 
      000BB6 05                    2321         .byte      5
      000BB7 43 4F 55 4E 54        2322         .ascii     "COUNT"
      000BBC                       2323 COUNT:
      000BBC 90 93            [ 1] 2324         ldw y,x 
      000BBE 90 FE            [ 2] 2325         ldw y,(y) ; address 
      000BC0 90 F6            [ 1] 2326         ld a,(y)  ; count 
      000BC2 90 5C            [ 1] 2327         incw y 
      000BC4 FF               [ 2] 2328         ldw (x),y 
      000BC5 1D 00 02         [ 2] 2329         subw x,#CELLL 
      000BC8 E7 01            [ 1] 2330         ld (1,x),a 
      000BCA 7F               [ 1] 2331         clr (x)
      000BCB 81               [ 4] 2332         ret 
                                   2333 
                                   2334 ;       HERE    ( -- a )
                                   2335 ;       Return  top of  variables
      000BCC 0B B6                 2336         .word      LINK
                           000BCE  2337 LINK = . 
      000BCE 04                    2338         .byte      4
      000BCF 48 45 52 45           2339         .ascii     "HERE"
      000BD3                       2340 HERE:
      000BD3 90 AE 00 1A      [ 2] 2341       	ldw y,#UVP 
      000BD7 90 FE            [ 2] 2342         ldw y,(y)
      000BD9 1D 00 02         [ 2] 2343         subw x,#CELLL 
      000BDC FF               [ 2] 2344         ldw (x),y 
      000BDD 81               [ 4] 2345         ret 
                                   2346 
                                   2347 ;       PAD     ( -- a )
                                   2348 ;       Return address of text buffer
                                   2349 ;       above  code dictionary.
      000BDE 0B CE                 2350         .word      LINK
                           000BE0  2351 LINK = . 
      000BE0 03                    2352         .byte      3
      000BE1 50 41 44              2353         .ascii     "PAD"
      000BE4                       2354 PAD:
      000BE4 CD 0B D3         [ 4] 2355         CALL     HERE
      000BE7 CD 04 79         [ 4] 2356         CALL     DOLIT
      000BEA 00 50                 2357         .word      80
      000BEC CC 07 99         [ 2] 2358         JP     PLUS
                                   2359 
                                   2360 ;       TIB     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2361 ;       Return address of terminal input buffer.
      000BEF 0B E0                 2362         .word      LINK
                           000BF1  2363 LINK = . 
      000BF1 03                    2364         .byte      3
      000BF2 54 49 42              2365         .ascii     "TIB"
      000BF5                       2366 TIB:
      000BF5 CD 06 89         [ 4] 2367         CALL     NTIB
      000BF8 CD 0A 4E         [ 4] 2368         CALL     CELLP
      000BFB CC 04 F7         [ 2] 2369         JP     AT
                                   2370 
                                   2371 ;       @EXECUTE        ( a -- )
                                   2372 ;       Execute vector stored in address a.
      000BFE 0B F1                 2373         .word      LINK
                           000C00  2374 LINK = . 
      000C00 08                    2375         .byte      8
      000C01 40 45 58 45 43 55 54  2376         .ascii     "@EXECUTE"
             45
      000C09                       2377 ATEXE:
      000C09 CD 04 F7         [ 4] 2378         CALL     AT
      000C0C CD 07 48         [ 4] 2379         CALL     QDUP    ;?address or zero
      000C0F CD 04 AC         [ 4] 2380         CALL     QBRAN
      000C12 0C 17                 2381         .word      EXE1
      000C14 CD 04 D3         [ 4] 2382         CALL     EXECU   ;execute if non-zero
      000C17 81               [ 4] 2383 EXE1:   RET     ;do nothing if zero
                                   2384 
                                   2385 ;       CMOVE   ( b1 b2 u -- )
                                   2386 ;       Copy u bytes from b1 to b2.
      000C18 0C 00                 2387         .word      LINK
                           000C1A  2388 LINK = . 
      000C1A 05                    2389         .byte      5
      000C1B 43 4D 4F 56 45        2390         .ascii     "CMOVE"
      000C20                       2391 CMOVE:
      000C20 CD 05 67         [ 4] 2392         CALL	TOR
      000C23 CD 04 C3         [ 4] 2393         CALL	BRAN
      000C26 0C 40                 2394         .word	CMOV2
      000C28 CD 05 67         [ 4] 2395 CMOV1:	CALL	TOR
      000C2B CD 05 9E         [ 4] 2396         CALL	DUPP
      000C2E CD 05 15         [ 4] 2397         CALL	CAT
      000C31 CD 05 5B         [ 4] 2398         CALL	RAT
      000C34 CD 05 04         [ 4] 2399         CALL	CSTOR
      000C37 CD 0A 79         [ 4] 2400         CALL	ONEP
      000C3A CD 05 48         [ 4] 2401         CALL	RFROM
      000C3D CD 0A 79         [ 4] 2402         CALL	ONEP
      000C40 CD 04 8D         [ 4] 2403 CMOV2:	CALL	DONXT
      000C43 0C 28                 2404         .word	CMOV1
      000C45 CC 07 79         [ 2] 2405         JP	DDROP
                                   2406 
                                   2407 ;       FILL    ( b u c -- )
                                   2408 ;       Fill u bytes of character c
                                   2409 ;       to area beginning at b.
      000C48 0C 1A                 2410         .word       LINK
                           000C4A  2411 LINK = . 
      000C4A 04                    2412         .byte       4
      000C4B 46 49 4C 4C           2413         .ascii     "FILL"
      000C4F                       2414 FILL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C4F 90 93            [ 1] 2415         ldw y,x 
      000C51 90 E6 01         [ 1] 2416         ld a,(1,y) ; c 
      000C54 1C 00 02         [ 2] 2417         addw x,#CELLL ; drop c 
      000C57 90 93            [ 1] 2418         ldw y,x 
      000C59 90 FE            [ 2] 2419         ldw y,(y) ; count
      000C5B 90 89            [ 2] 2420         pushw y 
      000C5D 1C 00 02         [ 2] 2421         addw x,#CELLL ; drop u 
      000C60 90 93            [ 1] 2422         ldw y,x 
      000C62 1C 00 02         [ 2] 2423         addw x,#CELLL ; drop b 
      000C65 90 FE            [ 2] 2424         ldw y,(y) ; address
      000C67 90 BF 28         [ 2] 2425         ldw YTEMP,y
      000C6A 90 85            [ 2] 2426         popw y ; count 
      000C6C                       2427 FILL1:  
      000C6C 92 C7 28         [ 4] 2428         ld [YTEMP],a 
      000C6F 3C 29            [ 1] 2429         inc YTEMP+1
      000C71 24 02            [ 1] 2430         jrnc FILL2 
      000C73 3C 28            [ 1] 2431         inc YTEMP
      000C75                       2432 FILL2: 
      000C75 90 5A            [ 2] 2433         decw y ; count 
      000C77 26 F3            [ 1] 2434         jrne FILL1  
      000C79 81               [ 4] 2435         ret 
                                   2436 
                                   2437 ;       ERASE   ( b u -- )
                                   2438 ;       Erase u bytes beginning at b.
      000C7A 0C 4A                 2439         .word      LINK
                           000C7C  2440 LINK = . 
      000C7C 05                    2441         .byte      5
      000C7D 45 52 41 53 45        2442         .ascii     "ERASE"
      000C82                       2443 ERASE:
      000C82 90 5F            [ 1] 2444         clrw y 
      000C84 1D 00 02         [ 2] 2445         subw x,#CELLL 
      000C87 FF               [ 2] 2446         ldw (x),y 
      000C88 CC 0C 4F         [ 2] 2447         jp FILL 
                                   2448 
                                   2449 
                                   2450 ;       PACK0   ( b u a -- a )
                                   2451 ;       Build a counted string with
                                   2452 ;       u characters from b. Null fill.
      000C8B 0C 7C                 2453         .word      LINK
                           000C8D  2454 LINK = . 
      000C8D 05                    2455         .byte      5
      000C8E 50 41 43 4B 30        2456         .ascii     "PACK0"
      000C93                       2457 PACKS:
      000C93 CD 05 9E         [ 4] 2458         CALL     DUPP
      000C96 CD 05 67         [ 4] 2459         CALL     TOR     ;strings only on cell boundary
      000C99 CD 07 84         [ 4] 2460         CALL     DDUP
      000C9C CD 05 04         [ 4] 2461         CALL     CSTOR
      000C9F CD 0A 79         [ 4] 2462         CALL     ONEP ;save count
      000CA2 CD 05 AE         [ 4] 2463         CALL     SWAPP
      000CA5 CD 0C 20         [ 4] 2464         CALL     CMOVE
      000CA8 CD 05 48         [ 4] 2465         CALL     RFROM
      000CAB 81               [ 4] 2466         RET
                                   2467 
                                   2468 ;; Numeric output, single precision
                                   2469 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2470 ;       DIGIT   ( u -- c )
                                   2471 ;       Convert digit u to a character.
      000CAC 0C 8D                 2472         .word      LINK
                           000CAE  2473 LINK = . 
      000CAE 05                    2474         .byte      5
      000CAF 44 49 47 49 54        2475         .ascii     "DIGIT"
      000CB4                       2476 DIGIT:
      000CB4 CD 04 79         [ 4] 2477         CALL	DOLIT
      000CB7 00 09                 2478         .word	9
      000CB9 CD 05 C8         [ 4] 2479         CALL	OVER
      000CBC CD 08 77         [ 4] 2480         CALL	LESS
      000CBF CD 04 79         [ 4] 2481         CALL	DOLIT
      000CC2 00 07                 2482         .word	7
      000CC4 CD 05 EA         [ 4] 2483         CALL	ANDD
      000CC7 CD 07 99         [ 4] 2484         CALL	PLUS
      000CCA CD 04 79         [ 4] 2485         CALL	DOLIT
      000CCD 00 30                 2486         .word	48	;'0'
      000CCF CC 07 99         [ 2] 2487         JP	PLUS
                                   2488 
                                   2489 ;       EXTRACT ( n base -- n c )
                                   2490 ;       Extract least significant digit from n.
      000CD2 0C AE                 2491         .word      LINK
                           000CD4  2492 LINK = . 
      000CD4 07                    2493         .byte      7
      000CD5 45 58 54 52 41 43 54  2494         .ascii     "EXTRACT"
      000CDC                       2495 EXTRC:
      000CDC CD 0A E5         [ 4] 2496         CALL     ZERO
      000CDF CD 05 AE         [ 4] 2497         CALL     SWAPP
      000CE2 CD 08 EF         [ 4] 2498         CALL     UMMOD
      000CE5 CD 05 AE         [ 4] 2499         CALL     SWAPP
      000CE8 CC 0C B4         [ 2] 2500         JP     DIGIT
                                   2501 
                                   2502 ;       <#      ( -- )
                                   2503 ;       Initiate  numeric output process.
      000CEB 0C D4                 2504         .word      LINK
                           000CED  2505 LINK = . 
      000CED 02                    2506         .byte      2
      000CEE 3C 23                 2507         .ascii     "<#"
      000CF0                       2508 BDIGS:
      000CF0 CD 0B E4         [ 4] 2509         CALL     PAD
      000CF3 CD 06 CB         [ 4] 2510         CALL     HLD
      000CF6 CC 04 E0         [ 2] 2511         JP     STORE
                                   2512 
                                   2513 ;       HOLD    ( c -- )
                                   2514 ;       Insert a character into output string.
      000CF9 0C ED                 2515         .word      LINK
                           000CFB  2516 LINK = . 
      000CFB 04                    2517         .byte      4
      000CFC 48 4F 4C 44           2518         .ascii     "HOLD"
      000D00                       2519 HOLD:
      000D00 CD 06 CB         [ 4] 2520         CALL     HLD
      000D03 CD 04 F7         [ 4] 2521         CALL     AT
      000D06 CD 0A 86         [ 4] 2522         CALL     ONEM
      000D09 CD 05 9E         [ 4] 2523         CALL     DUPP
      000D0C CD 06 CB         [ 4] 2524         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D0F CD 04 E0         [ 4] 2525         CALL     STORE
      000D12 CC 05 04         [ 2] 2526         JP     CSTOR
                                   2527 
                                   2528 ;       #       ( u -- u )
                                   2529 ;       Extract one digit from u and
                                   2530 ;       append digit to output string.
      000D15 0C FB                 2531         .word      LINK
                           000D17  2532 LINK = . 
      000D17 01                    2533         .byte      1
      000D18 23                    2534         .ascii     "#"
      000D19                       2535 DIG:
      000D19 CD 06 5B         [ 4] 2536         CALL     BASE
      000D1C CD 04 F7         [ 4] 2537         CALL     AT
      000D1F CD 0C DC         [ 4] 2538         CALL     EXTRC
      000D22 CC 0D 00         [ 2] 2539         JP     HOLD
                                   2540 
                                   2541 ;       #S      ( u -- 0 )
                                   2542 ;       Convert u until all digits
                                   2543 ;       are added to output string.
      000D25 0D 17                 2544         .word      LINK
                           000D27  2545 LINK = . 
      000D27 02                    2546         .byte      2
      000D28 23 53                 2547         .ascii     "#S"
      000D2A                       2548 DIGS:
      000D2A CD 0D 19         [ 4] 2549 DIGS1:  CALL     DIG
      000D2D CD 05 9E         [ 4] 2550         CALL     DUPP
      000D30 CD 04 AC         [ 4] 2551         CALL     QBRAN
      000D33 0D 37                 2552         .word      DIGS2
      000D35 20 F3            [ 2] 2553         JRA     DIGS1
      000D37 81               [ 4] 2554 DIGS2:  RET
                                   2555 
                                   2556 ;       SIGN    ( n -- )
                                   2557 ;       Add a minus sign to
                                   2558 ;       numeric output string.
      000D38 0D 27                 2559         .word      LINK
                           000D3A  2560 LINK = . 
      000D3A 04                    2561         .byte      4
      000D3B 53 49 47 4E           2562         .ascii     "SIGN"
      000D3F                       2563 SIGN:
      000D3F CD 05 D7         [ 4] 2564         CALL     ZLESS
      000D42 CD 04 AC         [ 4] 2565         CALL     QBRAN
      000D45 0D 4F                 2566         .word      SIGN1
      000D47 CD 04 79         [ 4] 2567         CALL     DOLIT
      000D4A 00 2D                 2568         .word      45	;"-"
      000D4C CC 0D 00         [ 2] 2569         JP     HOLD
      000D4F 81               [ 4] 2570 SIGN1:  RET
                                   2571 
                                   2572 ;       #>      ( w -- b u )
                                   2573 ;       Prepare output string.
      000D50 0D 3A                 2574         .word      LINK
                           000D52  2575 LINK = . 
      000D52 02                    2576         .byte      2
      000D53 23 3E                 2577         .ascii     "#>"
      000D55                       2578 EDIGS:
      000D55 CD 05 94         [ 4] 2579         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D58 CD 06 CB         [ 4] 2580         CALL     HLD
      000D5B CD 04 F7         [ 4] 2581         CALL     AT
      000D5E CD 0B E4         [ 4] 2582         CALL     PAD
      000D61 CD 05 C8         [ 4] 2583         CALL     OVER
      000D64 CC 08 12         [ 2] 2584         JP     SUBB
                                   2585 
                                   2586 ;       str     ( w -- b u )
                                   2587 ;       Convert a signed integer
                                   2588 ;       to a numeric string.
      000D67 0D 52                 2589         .word      LINK
                           000D69  2590 LINK = . 
      000D69 03                    2591         .byte      3
      000D6A 53 54 52              2592         .ascii     "STR"
      000D6D                       2593 STR:
      000D6D CD 05 9E         [ 4] 2594         CALL     DUPP
      000D70 CD 05 67         [ 4] 2595         CALL     TOR
      000D73 CD 08 2C         [ 4] 2596         CALL     ABSS
      000D76 CD 0C F0         [ 4] 2597         CALL     BDIGS
      000D79 CD 0D 2A         [ 4] 2598         CALL     DIGS
      000D7C CD 05 48         [ 4] 2599         CALL     RFROM
      000D7F CD 0D 3F         [ 4] 2600         CALL     SIGN
      000D82 CC 0D 55         [ 2] 2601         JP     EDIGS
                                   2602 
                                   2603 ;       HEX     ( -- )
                                   2604 ;       Use radix 16 as base for
                                   2605 ;       numeric conversions.
      000D85 0D 69                 2606         .word      LINK
                           000D87  2607 LINK = . 
      000D87 03                    2608         .byte      3
      000D88 48 45 58              2609         .ascii     "HEX"
      000D8B                       2610 HEX:
      000D8B CD 04 79         [ 4] 2611         CALL     DOLIT
      000D8E 00 10                 2612         .word      16
      000D90 CD 06 5B         [ 4] 2613         CALL     BASE
      000D93 CC 04 E0         [ 2] 2614         JP     STORE
                                   2615 
                                   2616 ;       DECIMAL ( -- )
                                   2617 ;       Use radix 10 as base
                                   2618 ;       for numeric conversions.
      000D96 0D 87                 2619         .word      LINK
                           000D98  2620 LINK = . 
      000D98 07                    2621         .byte      7
      000D99 44 45 43 49 4D 41 4C  2622         .ascii     "DECIMAL"
      000DA0                       2623 DECIM:
      000DA0 CD 04 79         [ 4] 2624         CALL     DOLIT
      000DA3 00 0A                 2625         .word      10
      000DA5 CD 06 5B         [ 4] 2626         CALL     BASE
      000DA8 CC 04 E0         [ 2] 2627         JP     STORE
                                   2628 
                                   2629 ;; Numeric input, single precision
                                   2630 
                                   2631 ;       DIGIT?  ( c base -- u t )
                                   2632 ;       Convert a character to its numeric
                                   2633 ;       value. A flag indicates success.
      000DAB 0D 98                 2634         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000DAD  2635 LINK = . 
      000DAD 06                    2636         .byte       6
      000DAE 44 49 47 49 54 3F     2637         .ascii     "DIGIT?"
      000DB4                       2638 DIGTQ:
      000DB4 CD 05 67         [ 4] 2639         CALL     TOR
      000DB7 CD 04 79         [ 4] 2640         CALL     DOLIT
      000DBA 00 30                 2641         .word     48	; "0"
      000DBC CD 08 12         [ 4] 2642         CALL     SUBB
      000DBF CD 04 79         [ 4] 2643         CALL     DOLIT
      000DC2 00 09                 2644         .word      9
      000DC4 CD 05 C8         [ 4] 2645         CALL     OVER
      000DC7 CD 08 77         [ 4] 2646         CALL     LESS
      000DCA CD 04 AC         [ 4] 2647         CALL     QBRAN
      000DCD 0D E5                 2648         .word      DGTQ1
      000DCF CD 04 79         [ 4] 2649         CALL     DOLIT
      000DD2 00 07                 2650         .word      7
      000DD4 CD 08 12         [ 4] 2651         CALL     SUBB
      000DD7 CD 05 9E         [ 4] 2652         CALL     DUPP
      000DDA CD 04 79         [ 4] 2653         CALL     DOLIT
      000DDD 00 0A                 2654         .word      10
      000DDF CD 08 77         [ 4] 2655         CALL     LESS
      000DE2 CD 05 FE         [ 4] 2656         CALL     ORR
      000DE5 CD 05 9E         [ 4] 2657 DGTQ1:  CALL     DUPP
      000DE8 CD 05 48         [ 4] 2658         CALL     RFROM
      000DEB CC 08 59         [ 2] 2659         JP     ULESS
                                   2660 
                                   2661 ;       NUMBER? ( a -- n T | a F )
                                   2662 ;       Convert a number string to
                                   2663 ;       integer. Push a flag on tos.
      000DEE 0D AD                 2664         .word      LINK
                           000DF0  2665 LINK = . 
      000DF0 07                    2666         .byte      7
      000DF1 4E 55 4D 42 45 52 3F  2667         .ascii     "NUMBER?"
      000DF8                       2668 NUMBQ:
      000DF8 CD 06 5B         [ 4] 2669         CALL     BASE
      000DFB CD 04 F7         [ 4] 2670         CALL     AT
      000DFE CD 05 67         [ 4] 2671         CALL     TOR
      000E01 CD 0A E5         [ 4] 2672         CALL     ZERO
      000E04 CD 05 C8         [ 4] 2673         CALL     OVER
      000E07 CD 0B BC         [ 4] 2674         CALL     COUNT
      000E0A CD 05 C8         [ 4] 2675         CALL     OVER
      000E0D CD 05 15         [ 4] 2676         CALL     CAT
      000E10 CD 04 79         [ 4] 2677         CALL     DOLIT
      000E13 00 24                 2678         .word     36	; "0x"
      000E15 CD 08 3A         [ 4] 2679         CALL     EQUAL
      000E18 CD 04 AC         [ 4] 2680         CALL     QBRAN
      000E1B 0E 2C                 2681         .word      NUMQ1
      000E1D CD 0D 8B         [ 4] 2682         CALL     HEX
      000E20 CD 05 AE         [ 4] 2683         CALL     SWAPP
      000E23 CD 0A 79         [ 4] 2684         CALL     ONEP
      000E26 CD 05 AE         [ 4] 2685         CALL     SWAPP
      000E29 CD 0A 86         [ 4] 2686         CALL     ONEM
      000E2C CD 05 C8         [ 4] 2687 NUMQ1:  CALL     OVER
      000E2F CD 05 15         [ 4] 2688         CALL     CAT
      000E32 CD 04 79         [ 4] 2689         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E35 00 2D                 2690         .word     45	; "-"
      000E37 CD 08 3A         [ 4] 2691         CALL     EQUAL
      000E3A CD 05 67         [ 4] 2692         CALL     TOR
      000E3D CD 05 AE         [ 4] 2693         CALL     SWAPP
      000E40 CD 05 5B         [ 4] 2694         CALL     RAT
      000E43 CD 08 12         [ 4] 2695         CALL     SUBB
      000E46 CD 05 AE         [ 4] 2696         CALL     SWAPP
      000E49 CD 05 5B         [ 4] 2697         CALL     RAT
      000E4C CD 07 99         [ 4] 2698         CALL     PLUS
      000E4F CD 07 48         [ 4] 2699         CALL     QDUP
      000E52 CD 04 AC         [ 4] 2700         CALL     QBRAN
      000E55 0E B6                 2701         .word      NUMQ6
      000E57 CD 0A 86         [ 4] 2702         CALL     ONEM
      000E5A CD 05 67         [ 4] 2703         CALL     TOR
      000E5D CD 05 9E         [ 4] 2704 NUMQ2:  CALL     DUPP
      000E60 CD 05 67         [ 4] 2705         CALL     TOR
      000E63 CD 05 15         [ 4] 2706         CALL     CAT
      000E66 CD 06 5B         [ 4] 2707         CALL     BASE
      000E69 CD 04 F7         [ 4] 2708         CALL     AT
      000E6C CD 0D B4         [ 4] 2709         CALL     DIGTQ
      000E6F CD 04 AC         [ 4] 2710         CALL     QBRAN
      000E72 0E A4                 2711         .word      NUMQ4
      000E74 CD 05 AE         [ 4] 2712         CALL     SWAPP
      000E77 CD 06 5B         [ 4] 2713         CALL     BASE
      000E7A CD 04 F7         [ 4] 2714         CALL     AT
      000E7D CD 09 F8         [ 4] 2715         CALL     STAR
      000E80 CD 07 99         [ 4] 2716         CALL     PLUS
      000E83 CD 05 48         [ 4] 2717         CALL     RFROM
      000E86 CD 0A 79         [ 4] 2718         CALL     ONEP
      000E89 CD 04 8D         [ 4] 2719         CALL     DONXT
      000E8C 0E 5D                 2720         .word      NUMQ2
      000E8E CD 05 5B         [ 4] 2721         CALL     RAT
      000E91 CD 05 AE         [ 4] 2722         CALL     SWAPP
      000E94 CD 05 94         [ 4] 2723         CALL     DROP
      000E97 CD 04 AC         [ 4] 2724         CALL     QBRAN
      000E9A 0E 9F                 2725         .word      NUMQ3
      000E9C CD 07 C4         [ 4] 2726         CALL     NEGAT
      000E9F CD 05 AE         [ 4] 2727 NUMQ3:  CALL     SWAPP
      000EA2 20 0F            [ 2] 2728         JRA     NUMQ5
      000EA4 CD 05 48         [ 4] 2729 NUMQ4:  CALL     RFROM
      000EA7 CD 05 48         [ 4] 2730         CALL     RFROM
      000EAA CD 07 79         [ 4] 2731         CALL     DDROP
      000EAD CD 07 79         [ 4] 2732         CALL     DDROP
      000EB0 CD 0A E5         [ 4] 2733         CALL     ZERO
      000EB3 CD 05 9E         [ 4] 2734 NUMQ5:  CALL     DUPP
      000EB6 CD 05 48         [ 4] 2735 NUMQ6:  CALL     RFROM
      000EB9 CD 07 79         [ 4] 2736         CALL     DDROP
      000EBC CD 05 48         [ 4] 2737         CALL     RFROM
      000EBF CD 06 5B         [ 4] 2738         CALL     BASE
      000EC2 CC 04 E0         [ 2] 2739         JP     STORE
                                   2740 
                                   2741 ;; Basic I/O
                                   2742 
                                   2743 ;       KEY     ( -- c )
                                   2744 ;       Wait for and return an
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2745 ;       input character.
      000EC5 0D F0                 2746         .word      LINK
                           000EC7  2747 LINK = . 
      000EC7 03                    2748         .byte      3
      000EC8 4B 45 59              2749         .ascii     "KEY"
      000ECB                       2750 KEY:
      000ECB 72 0B 52 30 FB   [ 2] 2751         btjf UART_SR,#UART_SR_RXNE,. 
      000ED0 C6 52 31         [ 1] 2752         ld a,UART_DR 
      000ED3 1D 00 02         [ 2] 2753         subw x,#CELLL 
      000ED6 E7 01            [ 1] 2754         ld (1,x),a 
      000ED8 7F               [ 1] 2755         clr (x)
      000ED9 81               [ 4] 2756         ret 
                                   2757 
                                   2758 ;       NUF?    ( -- t )
                                   2759 ;       Return false if no input,
                                   2760 ;       else pause and if CR return true.
      000EDA 0E C7                 2761         .word      LINK
                           000EDC  2762 LINK = . 
      000EDC 04                    2763         .byte      4
      000EDD 4E 55 46 3F           2764         .ascii     "NUF?"
      000EE1                       2765 NUFQ:
      000EE1 CD 04 1A         [ 4] 2766         CALL     QKEY
      000EE4 CD 05 9E         [ 4] 2767         CALL     DUPP
      000EE7 CD 04 AC         [ 4] 2768         CALL     QBRAN
      000EEA 0E FA                 2769         .word    NUFQ1
      000EEC CD 07 79         [ 4] 2770         CALL     DDROP
      000EEF CD 0E CB         [ 4] 2771         CALL     KEY
      000EF2 CD 04 79         [ 4] 2772         CALL     DOLIT
      000EF5 00 0D                 2773         .word      CRR
      000EF7 CC 08 3A         [ 2] 2774         JP     EQUAL
      000EFA 81               [ 4] 2775 NUFQ1:  RET
                                   2776 
                                   2777 ;       SPACE   ( -- )
                                   2778 ;       Send  blank character to
                                   2779 ;       output device.
      000EFB 0E DC                 2780         .word      LINK
                           000EFD  2781 LINK = . 
      000EFD 05                    2782         .byte      5
      000EFE 53 50 41 43 45        2783         .ascii     "SPACE"
      000F03                       2784 SPACE:
      000F03 CD 0A D8         [ 4] 2785         CALL     BLANK
      000F06 CC 04 38         [ 2] 2786         JP     EMIT
                                   2787 
                                   2788 ;       SPACES  ( +n -- )
                                   2789 ;       Send n spaces to output device.
      000F09 0E FD                 2790         .word      LINK
                           000F0B  2791 LINK = . 
      000F0B 06                    2792         .byte      6
      000F0C 53 50 41 43 45 53     2793         .ascii     "SPACES"
      000F12                       2794 SPACS:
      000F12 CD 0A E5         [ 4] 2795         CALL     ZERO
      000F15 CD 08 97         [ 4] 2796         CALL     MAX
      000F18 CD 05 67         [ 4] 2797         CALL     TOR
      000F1B 20 03            [ 2] 2798         JRA      CHAR2
      000F1D CD 0F 03         [ 4] 2799 CHAR1:  CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F20 CD 04 8D         [ 4] 2800 CHAR2:  CALL     DONXT
      000F23 0F 1D                 2801         .word    CHAR1
      000F25 81               [ 4] 2802         RET
                                   2803 
                                   2804 ;       TYPE    ( b u -- )
                                   2805 ;       Output u characters from b.
      000F26 0F 0B                 2806         .word      LINK
                           000F28  2807 LINK = . 
      000F28 04                    2808         .byte      4
      000F29 54 59 50 45           2809         .ascii     "TYPE"
      000F2D                       2810 TYPES:
      000F2D CD 05 67         [ 4] 2811         CALL     TOR
      000F30 20 0C            [ 2] 2812         JRA     TYPE2
      000F32 CD 05 9E         [ 4] 2813 TYPE1:  CALL     DUPP
      000F35 CD 05 15         [ 4] 2814         CALL     CAT
      000F38 CD 04 38         [ 4] 2815         CALL     EMIT
      000F3B CD 0A 79         [ 4] 2816         CALL     ONEP
      000F3E CD 04 8D         [ 4] 2817 TYPE2:  CALL     DONXT
      000F41 0F 32                 2818         .word      TYPE1
      000F43 CC 05 94         [ 2] 2819         JP     DROP
                                   2820 
                                   2821 ;       CR      ( -- )
                                   2822 ;       Output a carriage return
                                   2823 ;       and a line feed.
      000F46 0F 28                 2824         .word      LINK
                           000F48  2825 LINK = . 
      000F48 02                    2826         .byte      2
      000F49 43 52                 2827         .ascii     "CR"
      000F4B                       2828 CR:
      000F4B CD 04 79         [ 4] 2829         CALL     DOLIT
      000F4E 00 0D                 2830         .word      CRR
      000F50 CD 04 38         [ 4] 2831         CALL     EMIT
      000F53 CD 04 79         [ 4] 2832         CALL     DOLIT
      000F56 00 0A                 2833         .word      LF
      000F58 CC 04 38         [ 2] 2834         JP     EMIT
                                   2835 
                                   2836 ;       do$     ( -- a )
                                   2837 ;       Return  address of a compiled
                                   2838 ;       string.
      000F5B 0F 48                 2839         .word      LINK
                           000F5D  2840 LINK = . 
      000F5D 43                    2841 	.byte      COMPO+3
      000F5E 44 4F 24              2842         .ascii     "DO$"
      000F61                       2843 DOSTR:
      000F61 CD 05 48         [ 4] 2844         CALL     RFROM
      000F64 CD 05 5B         [ 4] 2845         CALL     RAT
      000F67 CD 05 48         [ 4] 2846         CALL     RFROM
      000F6A CD 0B BC         [ 4] 2847         CALL     COUNT
      000F6D CD 07 99         [ 4] 2848         CALL     PLUS
      000F70 CD 05 67         [ 4] 2849         CALL     TOR
      000F73 CD 05 AE         [ 4] 2850         CALL     SWAPP
      000F76 CD 05 67         [ 4] 2851         CALL     TOR
      000F79 81               [ 4] 2852         RET
                                   2853 
                                   2854 ;       $"|     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2855 ;       Run time routine compiled by $".
                                   2856 ;       Return address of a compiled string.
      000F7A 0F 5D                 2857         .word      LINK
                           000F7C  2858 LINK = . 
      000F7C 43                    2859 	.byte      COMPO+3
      000F7D 24 22 7C              2860         .byte     '$','"','|'
      000F80                       2861 STRQP:
      000F80 CD 0F 61         [ 4] 2862         CALL     DOSTR
      000F83 81               [ 4] 2863         RET
                                   2864 
                                   2865 ;       ."|     ( -- )
                                   2866 ;       Run time routine of ." .
                                   2867 ;       Output a compiled string.
      000F84 0F 7C                 2868         .word      LINK
                           000F86  2869 LINK = . 
      000F86 43                    2870 	.byte      COMPO+3
      000F87 2E 22 7C              2871         .byte     '.','"','|'
      000F8A                       2872 DOTQP:
      000F8A CD 0F 61         [ 4] 2873         CALL     DOSTR
      000F8D CD 0B BC         [ 4] 2874         CALL     COUNT
      000F90 CC 0F 2D         [ 2] 2875         JP     TYPES
                                   2876 
                                   2877 ;       .R      ( n +n -- )
                                   2878 ;       Display an integer in a field
                                   2879 ;       of n columns, right justified.
      000F93 0F 86                 2880         .word      LINK
                           000F95  2881 LINK = . 
      000F95 02                    2882         .byte      2
      000F96 2E 52                 2883         .ascii     ".R"
      000F98                       2884 DOTR:
      000F98 CD 05 67         [ 4] 2885         CALL     TOR
      000F9B CD 0D 6D         [ 4] 2886         CALL     STR
      000F9E CD 05 48         [ 4] 2887         CALL     RFROM
      000FA1 CD 05 C8         [ 4] 2888         CALL     OVER
      000FA4 CD 08 12         [ 4] 2889         CALL     SUBB
      000FA7 CD 0F 12         [ 4] 2890         CALL     SPACS
      000FAA CC 0F 2D         [ 2] 2891         JP     TYPES
                                   2892 
                                   2893 ;       U.R     ( u +n -- )
                                   2894 ;       Display an unsigned integer
                                   2895 ;       in n column, right justified.
      000FAD 0F 95                 2896         .word      LINK
                           000FAF  2897 LINK = . 
      000FAF 03                    2898         .byte      3
      000FB0 55 2E 52              2899         .ascii     "U.R"
      000FB3                       2900 UDOTR:
      000FB3 CD 05 67         [ 4] 2901         CALL     TOR
      000FB6 CD 0C F0         [ 4] 2902         CALL     BDIGS
      000FB9 CD 0D 2A         [ 4] 2903         CALL     DIGS
      000FBC CD 0D 55         [ 4] 2904         CALL     EDIGS
      000FBF CD 05 48         [ 4] 2905         CALL     RFROM
      000FC2 CD 05 C8         [ 4] 2906         CALL     OVER
      000FC5 CD 08 12         [ 4] 2907         CALL     SUBB
      000FC8 CD 0F 12         [ 4] 2908         CALL     SPACS
      000FCB CC 0F 2D         [ 2] 2909         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2910 
                                   2911 ;       U.      ( u -- )
                                   2912 ;       Display an unsigned integer
                                   2913 ;       in free format.
      000FCE 0F AF                 2914         .word      LINK
                           000FD0  2915 LINK = . 
      000FD0 02                    2916         .byte      2
      000FD1 55 2E                 2917         .ascii     "U."
      000FD3                       2918 UDOT:
      000FD3 CD 0C F0         [ 4] 2919         CALL     BDIGS
      000FD6 CD 0D 2A         [ 4] 2920         CALL     DIGS
      000FD9 CD 0D 55         [ 4] 2921         CALL     EDIGS
      000FDC CD 0F 03         [ 4] 2922         CALL     SPACE
      000FDF CC 0F 2D         [ 2] 2923         JP     TYPES
                                   2924 
                                   2925 ;       .       ( w -- )
                                   2926 ;       Display an integer in free
                                   2927 ;       format, preceeded by a space.
      000FE2 0F D0                 2928         .word      LINK
                           000FE4  2929 LINK = . 
      000FE4 01                    2930         .byte      1
      000FE5 2E                    2931         .ascii     "."
      000FE6                       2932 DOT:
      000FE6 CD 06 5B         [ 4] 2933         CALL     BASE
      000FE9 CD 04 F7         [ 4] 2934         CALL     AT
      000FEC CD 04 79         [ 4] 2935         CALL     DOLIT
      000FEF 00 0A                 2936         .word      10
      000FF1 CD 06 13         [ 4] 2937         CALL     XORR    ;?decimal
      000FF4 CD 04 AC         [ 4] 2938         CALL     QBRAN
      000FF7 0F FC                 2939         .word      DOT1
      000FF9 CC 0F D3         [ 2] 2940         JP     UDOT
      000FFC CD 0D 6D         [ 4] 2941 DOT1:   CALL     STR
      000FFF CD 0F 03         [ 4] 2942         CALL     SPACE
      001002 CC 0F 2D         [ 2] 2943         JP     TYPES
                                   2944 
                                   2945 ;       ?       ( a -- )
                                   2946 ;       Display contents in memory cell.
      001005 0F E4                 2947         .word      LINK
                                   2948         
                           001007  2949 LINK = . 
      001007 01                    2950         .byte      1
      001008 3F                    2951         .ascii     "?"
      001009                       2952 QUEST:
      001009 CD 04 F7         [ 4] 2953         CALL     AT
      00100C CC 0F E6         [ 2] 2954         JP     DOT
                                   2955 
                                   2956 ;; Parsing
                                   2957 
                                   2958 ;       parse   ( b u c -- b u delta ; <string> )
                                   2959 ;       Scan string delimited by c.
                                   2960 ;       Return found string and its offset.
      00100F 10 07                 2961         .word      LINK
                           001011  2962 LINK = . 
      001011 05                    2963         .byte      5
      001012 70 61 72 73 65        2964         .ascii     "parse"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001017                       2965 PARS:
      001017 CD 06 6A         [ 4] 2966         CALL     TEMP
      00101A CD 04 E0         [ 4] 2967         CALL     STORE
      00101D CD 05 C8         [ 4] 2968         CALL     OVER
      001020 CD 05 67         [ 4] 2969         CALL     TOR
      001023 CD 05 9E         [ 4] 2970         CALL     DUPP
      001026 CD 04 AC         [ 4] 2971         CALL     QBRAN
      001029 10 CF                 2972         .word    PARS8
      00102B CD 0A 86         [ 4] 2973         CALL     ONEM
      00102E CD 06 6A         [ 4] 2974         CALL     TEMP
      001031 CD 04 F7         [ 4] 2975         CALL     AT
      001034 CD 0A D8         [ 4] 2976         CALL     BLANK
      001037 CD 08 3A         [ 4] 2977         CALL     EQUAL
      00103A CD 04 AC         [ 4] 2978         CALL     QBRAN
      00103D 10 70                 2979         .word      PARS3
      00103F CD 05 67         [ 4] 2980         CALL     TOR
      001042 CD 0A D8         [ 4] 2981 PARS1:  CALL     BLANK
      001045 CD 05 C8         [ 4] 2982         CALL     OVER
      001048 CD 05 15         [ 4] 2983         CALL     CAT     ;skip leading blanks ONLY
      00104B CD 08 12         [ 4] 2984         CALL     SUBB
      00104E CD 05 D7         [ 4] 2985         CALL     ZLESS
      001051 CD 07 B3         [ 4] 2986         CALL     INVER
      001054 CD 04 AC         [ 4] 2987         CALL     QBRAN
      001057 10 6D                 2988         .word      PARS2
      001059 CD 0A 79         [ 4] 2989         CALL     ONEP
      00105C CD 04 8D         [ 4] 2990         CALL     DONXT
      00105F 10 42                 2991         .word      PARS1
      001061 CD 05 48         [ 4] 2992         CALL     RFROM
      001064 CD 05 94         [ 4] 2993         CALL     DROP
      001067 CD 0A E5         [ 4] 2994         CALL     ZERO
      00106A CC 05 9E         [ 2] 2995         JP     DUPP
      00106D CD 05 48         [ 4] 2996 PARS2:  CALL     RFROM
      001070 CD 05 C8         [ 4] 2997 PARS3:  CALL     OVER
      001073 CD 05 AE         [ 4] 2998         CALL     SWAPP
      001076 CD 05 67         [ 4] 2999         CALL     TOR
      001079 CD 06 6A         [ 4] 3000 PARS4:  CALL     TEMP
      00107C CD 04 F7         [ 4] 3001         CALL     AT
      00107F CD 05 C8         [ 4] 3002         CALL     OVER
      001082 CD 05 15         [ 4] 3003         CALL     CAT
      001085 CD 08 12         [ 4] 3004         CALL     SUBB    ;scan for delimiter
      001088 CD 06 6A         [ 4] 3005         CALL     TEMP
      00108B CD 04 F7         [ 4] 3006         CALL     AT
      00108E CD 0A D8         [ 4] 3007         CALL     BLANK
      001091 CD 08 3A         [ 4] 3008         CALL     EQUAL
      001094 CD 04 AC         [ 4] 3009         CALL     QBRAN
      001097 10 9C                 3010         .word      PARS5
      001099 CD 05 D7         [ 4] 3011         CALL     ZLESS
      00109C CD 04 AC         [ 4] 3012 PARS5:  CALL     QBRAN
      00109F 10 B1                 3013         .word      PARS6
      0010A1 CD 0A 79         [ 4] 3014         CALL     ONEP
      0010A4 CD 04 8D         [ 4] 3015         CALL     DONXT
      0010A7 10 79                 3016         .word      PARS4
      0010A9 CD 05 9E         [ 4] 3017         CALL     DUPP
      0010AC CD 05 67         [ 4] 3018         CALL     TOR
      0010AF 20 0F            [ 2] 3019         JRA     PARS7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010B1 CD 05 48         [ 4] 3020 PARS6:  CALL     RFROM
      0010B4 CD 05 94         [ 4] 3021         CALL     DROP
      0010B7 CD 05 9E         [ 4] 3022         CALL     DUPP
      0010BA CD 0A 79         [ 4] 3023         CALL     ONEP
      0010BD CD 05 67         [ 4] 3024         CALL     TOR
      0010C0 CD 05 C8         [ 4] 3025 PARS7:  CALL     OVER
      0010C3 CD 08 12         [ 4] 3026         CALL     SUBB
      0010C6 CD 05 48         [ 4] 3027         CALL     RFROM
      0010C9 CD 05 48         [ 4] 3028         CALL     RFROM
      0010CC CC 08 12         [ 2] 3029         JP     SUBB
      0010CF CD 05 C8         [ 4] 3030 PARS8:  CALL     OVER
      0010D2 CD 05 48         [ 4] 3031         CALL     RFROM
      0010D5 CC 08 12         [ 2] 3032         JP     SUBB
                                   3033 
                                   3034 ;       PARSE   ( c -- b u ; <string> )
                                   3035 ;       Scan input stream and return
                                   3036 ;       counted string delimited by c.
      0010D8 10 11                 3037         .word      LINK
                           0010DA  3038 LINK = . 
      0010DA 05                    3039         .byte      5
      0010DB 50 41 52 53 45        3040         .ascii     "PARSE"
      0010E0                       3041 PARSE:
      0010E0 CD 05 67         [ 4] 3042         CALL     TOR
      0010E3 CD 0B F5         [ 4] 3043         CALL     TIB
      0010E6 CD 06 79         [ 4] 3044         CALL     INN
      0010E9 CD 04 F7         [ 4] 3045         CALL     AT
      0010EC CD 07 99         [ 4] 3046         CALL     PLUS    ;current input buffer pointer
      0010EF CD 06 89         [ 4] 3047         CALL     NTIB
      0010F2 CD 04 F7         [ 4] 3048         CALL     AT
      0010F5 CD 06 79         [ 4] 3049         CALL     INN
      0010F8 CD 04 F7         [ 4] 3050         CALL     AT
      0010FB CD 08 12         [ 4] 3051         CALL     SUBB    ;remaining count
      0010FE CD 05 48         [ 4] 3052         CALL     RFROM
      001101 CD 10 17         [ 4] 3053         CALL     PARS
      001104 CD 06 79         [ 4] 3054         CALL     INN
      001107 CC 0B 55         [ 2] 3055         JP     PSTOR
                                   3056 
                                   3057 ;       .(      ( -- )
                                   3058 ;       Output following string up to next ) .
      00110A 10 DA                 3059         .word      LINK
                           00110C  3060 LINK = . 
      00110C 82                    3061 	.byte      IMEDD+2
      00110D 2E 28                 3062         .ascii     ".("
      00110F                       3063 DOTPR:
      00110F CD 04 79         [ 4] 3064         CALL     DOLIT
      001112 00 29                 3065         .word     41	; ")"
      001114 CD 10 E0         [ 4] 3066         CALL     PARSE
      001117 CC 0F 2D         [ 2] 3067         JP     TYPES
                                   3068 
                                   3069 ;       (       ( -- )
                                   3070 ;       Ignore following string up to next ).
                                   3071 ;       A comment.
      00111A 11 0C                 3072         .word      LINK
                           00111C  3073 LINK = . 
      00111C 81                    3074 	.byte      IMEDD+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      00111D 28                    3075         .ascii     "("
      00111E                       3076 PAREN:
      00111E CD 04 79         [ 4] 3077         CALL     DOLIT
      001121 00 29                 3078         .word     41	; ")"
      001123 CD 10 E0         [ 4] 3079         CALL     PARSE
      001126 CC 07 79         [ 2] 3080         JP     DDROP
                                   3081 
                                   3082 ;       \       ( -- )
                                   3083 ;       Ignore following text till
                                   3084 ;       end of line.
      001129 11 1C                 3085         .word      LINK
                           00112B  3086 LINK = . 
      00112B 81                    3087 	.byte      IMEDD+1
      00112C 5C                    3088         .ascii     "\"
      00112D                       3089 BKSLA:
      00112D 90 AE 00 10      [ 2] 3090         ldw y,#UCTIB ; #TIB  
      001131 90 FE            [ 2] 3091         ldw y,(y)
      001133 90 89            [ 2] 3092         pushw y ; count in TIB 
      001135 90 AE 00 0E      [ 2] 3093         ldw y,#UINN ; >IN 
      001139 90 BF 28         [ 2] 3094         ldw YTEMP,y
      00113C 90 85            [ 2] 3095         popw y 
      00113E 91 CF 28         [ 5] 3096         ldw [YTEMP],y
      001141 81               [ 4] 3097         ret 
                                   3098 
                                   3099 ;       WORD    ( c -- a ; <string> )
                                   3100 ;       Parse a word from input stream
                                   3101 ;       and copy it to code dictionary.
      001142 11 2B                 3102         .word      LINK
                           001144  3103 LINK = . 
      001144 04                    3104         .byte      4
      001145 57 4F 52 44           3105         .ascii     "WORD"
      001149                       3106 WORDD:
      001149 CD 10 E0         [ 4] 3107         CALL     PARSE
      00114C CD 0B D3         [ 4] 3108         CALL     HERE
      00114F CD 0A 4E         [ 4] 3109         CALL     CELLP
      001152 CC 0C 93         [ 2] 3110         JP     PACKS
                                   3111 
                                   3112 ;       TOKEN   ( -- a ; <string> )
                                   3113 ;       Parse a word from input stream
                                   3114 ;       and copy it to name dictionary.
      001155 11 44                 3115         .word      LINK
                           001157  3116 LINK = . 
      001157 05                    3117         .byte      5
      001158 54 4F 4B 45 4E        3118         .ascii     "TOKEN"
      00115D                       3119 TOKEN:
      00115D CD 0A D8         [ 4] 3120         CALL     BLANK
      001160 CC 11 49         [ 2] 3121         JP     WORDD
                                   3122 
                                   3123 ;; Dictionary search
                                   3124 
                                   3125 ;       NAME>   ( na -- ca )
                                   3126 ;       Return a code address given
                                   3127 ;       a name address.
      001163 11 57                 3128         .word      LINK
                           001165  3129 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001165 05                    3130         .byte      5
      001166 4E 41 4D 45 3E        3131         .ascii     "NAME>"
      00116B                       3132 NAMET:
      00116B CD 0B BC         [ 4] 3133         CALL     COUNT
      00116E CD 04 79         [ 4] 3134         CALL     DOLIT
      001171 00 1F                 3135         .word      31
      001173 CD 05 EA         [ 4] 3136         CALL     ANDD
      001176 CC 07 99         [ 2] 3137         JP     PLUS
                                   3138 
                                   3139 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3140 ;       Compare u cells in two
                                   3141 ;       strings. Return 0 if identical.
      001179 11 65                 3142         .word      LINK
                           00117B  3143 LINK = . 
      00117B 05                    3144         .byte       5
      00117C 53 41 4D 45 3F        3145         .ascii     "SAME?"
      001181                       3146 SAMEQ:
      001181 CD 0A 86         [ 4] 3147         CALL     ONEM
      001184 CD 05 67         [ 4] 3148         CALL     TOR
      001187 20 29            [ 2] 3149         JRA     SAME2
      001189 CD 05 C8         [ 4] 3150 SAME1:  CALL     OVER
      00118C CD 05 5B         [ 4] 3151         CALL     RAT
      00118F CD 07 99         [ 4] 3152         CALL     PLUS
      001192 CD 05 15         [ 4] 3153         CALL     CAT
      001195 CD 05 C8         [ 4] 3154         CALL     OVER
      001198 CD 05 5B         [ 4] 3155         CALL     RAT
      00119B CD 07 99         [ 4] 3156         CALL     PLUS
      00119E CD 05 15         [ 4] 3157         CALL     CAT
      0011A1 CD 08 12         [ 4] 3158         CALL     SUBB
      0011A4 CD 07 48         [ 4] 3159         CALL     QDUP
      0011A7 CD 04 AC         [ 4] 3160         CALL     QBRAN
      0011AA 11 B2                 3161         .word      SAME2
      0011AC CD 05 48         [ 4] 3162         CALL     RFROM
      0011AF CC 05 94         [ 2] 3163         JP     DROP
      0011B2 CD 04 8D         [ 4] 3164 SAME2:  CALL     DONXT
      0011B5 11 89                 3165         .word      SAME1
      0011B7 CC 0A E5         [ 2] 3166         JP     ZERO
                                   3167 
                                   3168 ;       find    ( a va -- ca na | a F )
                                   3169 ;       Search vocabulary for string.
                                   3170 ;       Return ca and na if succeeded.
      0011BA 11 7B                 3171         .word      LINK
                           0011BC  3172 LINK = . 
      0011BC 04                    3173         .byte      4
      0011BD 46 49 4E 44           3174         .ascii     "FIND"
      0011C1                       3175 FIND:
      0011C1 CD 05 AE         [ 4] 3176         CALL     SWAPP
      0011C4 CD 05 9E         [ 4] 3177         CALL     DUPP
      0011C7 CD 05 15         [ 4] 3178         CALL     CAT
      0011CA CD 06 6A         [ 4] 3179         CALL     TEMP
      0011CD CD 04 E0         [ 4] 3180         CALL     STORE
      0011D0 CD 05 9E         [ 4] 3181         CALL     DUPP
      0011D3 CD 04 F7         [ 4] 3182         CALL     AT
      0011D6 CD 05 67         [ 4] 3183         CALL     TOR
      0011D9 CD 0A 4E         [ 4] 3184         CALL     CELLP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011DC CD 05 AE         [ 4] 3185         CALL     SWAPP
      0011DF CD 04 F7         [ 4] 3186 FIND1:  CALL     AT
      0011E2 CD 05 9E         [ 4] 3187         CALL     DUPP
      0011E5 CD 04 AC         [ 4] 3188         CALL     QBRAN
      0011E8 12 1E                 3189         .word      FIND6
      0011EA CD 05 9E         [ 4] 3190         CALL     DUPP
      0011ED CD 04 F7         [ 4] 3191         CALL     AT
      0011F0 CD 04 79         [ 4] 3192         CALL     DOLIT
      0011F3 1F 7F                 3193         .word      MASKK
      0011F5 CD 05 EA         [ 4] 3194         CALL     ANDD
      0011F8 CD 05 5B         [ 4] 3195         CALL     RAT
      0011FB CD 06 13         [ 4] 3196         CALL     XORR
      0011FE CD 04 AC         [ 4] 3197         CALL     QBRAN
      001201 12 0D                 3198         .word      FIND2
      001203 CD 0A 4E         [ 4] 3199         CALL     CELLP
      001206 CD 04 79         [ 4] 3200         CALL     DOLIT
      001209 FF FF                 3201         .word     0xFFFF
      00120B 20 0C            [ 2] 3202         JRA     FIND3
      00120D CD 0A 4E         [ 4] 3203 FIND2:  CALL     CELLP
      001210 CD 06 6A         [ 4] 3204         CALL     TEMP
      001213 CD 04 F7         [ 4] 3205         CALL     AT
      001216 CD 11 81         [ 4] 3206         CALL     SAMEQ
      001219 CD 04 C3         [ 4] 3207 FIND3:  CALL     BRAN
      00121C 12 2D                 3208         .word      FIND4
      00121E CD 05 48         [ 4] 3209 FIND6:  CALL     RFROM
      001221 CD 05 94         [ 4] 3210         CALL     DROP
      001224 CD 05 AE         [ 4] 3211         CALL     SWAPP
      001227 CD 0A 5D         [ 4] 3212         CALL     CELLM
      00122A CC 05 AE         [ 2] 3213         JP     SWAPP
      00122D CD 04 AC         [ 4] 3214 FIND4:  CALL     QBRAN
      001230 12 3A                 3215         .word      FIND5
      001232 CD 0A 5D         [ 4] 3216         CALL     CELLM
      001235 CD 0A 5D         [ 4] 3217         CALL     CELLM
      001238 20 A5            [ 2] 3218         JRA     FIND1
      00123A CD 05 48         [ 4] 3219 FIND5:  CALL     RFROM
      00123D CD 05 94         [ 4] 3220         CALL     DROP
      001240 CD 05 AE         [ 4] 3221         CALL     SWAPP
      001243 CD 05 94         [ 4] 3222         CALL     DROP
      001246 CD 0A 5D         [ 4] 3223         CALL     CELLM
      001249 CD 05 9E         [ 4] 3224         CALL     DUPP
      00124C CD 11 6B         [ 4] 3225         CALL     NAMET
      00124F CC 05 AE         [ 2] 3226         JP     SWAPP
                                   3227 
                                   3228 ;       NAME?   ( a -- ca na | a F )
                                   3229 ;       Search vocabularies for a string.
      001252 11 BC                 3230         .word      LINK
                           001254  3231 LINK = . 
      001254 05                    3232         .byte      5
      001255 4E 41 4D 45 3F        3233         .ascii     "NAME?"
      00125A                       3234 NAMEQ:
      00125A CD 06 DE         [ 4] 3235         CALL   CNTXT
      00125D CC 11 C1         [ 2] 3236         JP     FIND
                                   3237 
                                   3238 ;; Terminal response
                                   3239 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3240 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3241 ;       Backup cursor by one character.
      001260 12 54                 3242         .word      LINK
                           001262  3243 LINK = . 
      001262 02                    3244         .byte      2
      001263 5E 48                 3245         .ascii     "^H"
      001265                       3246 BKSP:
      001265 CD 05 67         [ 4] 3247         CALL     TOR
      001268 CD 05 C8         [ 4] 3248         CALL     OVER
      00126B CD 05 48         [ 4] 3249         CALL     RFROM
      00126E CD 05 AE         [ 4] 3250         CALL     SWAPP
      001271 CD 05 C8         [ 4] 3251         CALL     OVER
      001274 CD 06 13         [ 4] 3252         CALL     XORR
      001277 CD 04 AC         [ 4] 3253         CALL     QBRAN
      00127A 12 95                 3254         .word      BACK1
      00127C CD 04 79         [ 4] 3255         CALL     DOLIT
      00127F 00 08                 3256         .word      BKSPP
      001281 CD 04 38         [ 4] 3257         CALL     EMIT
      001284 CD 0A 86         [ 4] 3258         CALL     ONEM
      001287 CD 0A D8         [ 4] 3259         CALL     BLANK
      00128A CD 04 38         [ 4] 3260         CALL     EMIT
      00128D CD 04 79         [ 4] 3261         CALL     DOLIT
      001290 00 08                 3262         .word      BKSPP
      001292 CC 04 38         [ 2] 3263         JP     EMIT
      001295 81               [ 4] 3264 BACK1:  RET
                                   3265 
                                   3266 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3267 ;       Accept and echo key stroke
                                   3268 ;       and bump cursor.
      001296 12 62                 3269         .word      LINK
                           001298  3270 LINK = . 
      001298 03                    3271         .byte      3
      001299 54 41 50              3272         .ascii     "TAP"
      00129C                       3273 TAP:
      00129C CD 05 9E         [ 4] 3274         CALL     DUPP
      00129F CD 04 38         [ 4] 3275         CALL     EMIT
      0012A2 CD 05 C8         [ 4] 3276         CALL     OVER
      0012A5 CD 05 04         [ 4] 3277         CALL     CSTOR
      0012A8 CC 0A 79         [ 2] 3278         JP     ONEP
                                   3279 
                                   3280 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3281 ;       Process a key stroke,
                                   3282 ;       CR,LF or backspace.
      0012AB 12 98                 3283         .word      LINK
                           0012AD  3284 LINK = . 
      0012AD 04                    3285         .byte      4
      0012AE 4B 54 41 50           3286         .ascii     "KTAP"
      0012B2                       3287 KTAP:
      0012B2 CD 05 9E         [ 4] 3288         CALL     DUPP
      0012B5 CD 04 79         [ 4] 3289         CALL     DOLIT
                           000001  3290 .if EOL_CR
      0012B8 00 0D                 3291         .word   CRR
                           000000  3292 .else ; EOL_LF 
                                   3293         .word   LF
                                   3294 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0012BA CD 06 13         [ 4] 3295         CALL     XORR
      0012BD CD 04 AC         [ 4] 3296         CALL     QBRAN
      0012C0 12 D8                 3297         .word      KTAP2
      0012C2 CD 04 79         [ 4] 3298         CALL     DOLIT
      0012C5 00 08                 3299         .word      BKSPP
      0012C7 CD 06 13         [ 4] 3300         CALL     XORR
      0012CA CD 04 AC         [ 4] 3301         CALL     QBRAN
      0012CD 12 D5                 3302         .word      KTAP1
      0012CF CD 0A D8         [ 4] 3303         CALL     BLANK
      0012D2 CC 12 9C         [ 2] 3304         JP     TAP
      0012D5 CC 12 65         [ 2] 3305 KTAP1:  JP     BKSP
      0012D8 CD 05 94         [ 4] 3306 KTAP2:  CALL     DROP
      0012DB CD 05 AE         [ 4] 3307         CALL     SWAPP
      0012DE CD 05 94         [ 4] 3308         CALL     DROP
      0012E1 CC 05 9E         [ 2] 3309         JP     DUPP
                                   3310 
                                   3311 ;       accept  ( b u -- b u )
                                   3312 ;       Accept characters to input
                                   3313 ;       buffer. Return with actual count.
      0012E4 12 AD                 3314         .word      LINK
                           0012E6  3315 LINK = . 
      0012E6 06                    3316         .byte      6
      0012E7 41 43 43 45 50 54     3317         .ascii     "ACCEPT"
      0012ED                       3318 ACCEP:
      0012ED CD 05 C8         [ 4] 3319         CALL     OVER
      0012F0 CD 07 99         [ 4] 3320         CALL     PLUS
      0012F3 CD 05 C8         [ 4] 3321         CALL     OVER
      0012F6 CD 07 84         [ 4] 3322 ACCP1:  CALL     DDUP
      0012F9 CD 06 13         [ 4] 3323         CALL     XORR
      0012FC CD 04 AC         [ 4] 3324         CALL     QBRAN
      0012FF 13 21                 3325         .word      ACCP4
      001301 CD 0E CB         [ 4] 3326         CALL     KEY
      001304 CD 05 9E         [ 4] 3327         CALL     DUPP
      001307 CD 0A D8         [ 4] 3328         CALL     BLANK
      00130A CD 04 79         [ 4] 3329         CALL     DOLIT
      00130D 00 7F                 3330         .word      127
      00130F CD 08 D4         [ 4] 3331         CALL     WITHI
      001312 CD 04 AC         [ 4] 3332         CALL     QBRAN
      001315 13 1C                 3333         .word      ACCP2
      001317 CD 12 9C         [ 4] 3334         CALL     TAP
      00131A 20 03            [ 2] 3335         JRA     ACCP3
      00131C CD 12 B2         [ 4] 3336 ACCP2:  CALL     KTAP
      00131F 20 D5            [ 2] 3337 ACCP3:  JRA     ACCP1
      001321 CD 05 94         [ 4] 3338 ACCP4:  CALL     DROP
      001324 CD 05 C8         [ 4] 3339         CALL     OVER
      001327 CC 08 12         [ 2] 3340         JP     SUBB
                                   3341 
                                   3342 ;       QUERY   ( -- )
                                   3343 ;       Accept input stream to
                                   3344 ;       terminal input buffer.
      00132A 12 E6                 3345         .word      LINK
                                   3346         
                           00132C  3347 LINK = . 
      00132C 05                    3348         .byte      5
      00132D 51 55 45 52 59        3349         .ascii     "QUERY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001332                       3350 QUERY:
      001332 CD 0B F5         [ 4] 3351         CALL     TIB
      001335 CD 04 79         [ 4] 3352         CALL     DOLIT
      001338 00 50                 3353         .word      80
      00133A CD 12 ED         [ 4] 3354         CALL     ACCEP
      00133D CD 06 89         [ 4] 3355         CALL     NTIB
      001340 CD 04 E0         [ 4] 3356         CALL     STORE
      001343 CD 05 94         [ 4] 3357         CALL     DROP
      001346 CD 0A E5         [ 4] 3358         CALL     ZERO
      001349 CD 06 79         [ 4] 3359         CALL     INN
      00134C CC 04 E0         [ 2] 3360         JP     STORE
                                   3361 
                                   3362 ;       ABORT   ( -- )
                                   3363 ;       Reset data stack and
                                   3364 ;       jump to QUIT.
      00134F 13 2C                 3365         .word      LINK
                           001351  3366 LINK = . 
      001351 05                    3367         .byte      5
      001352 41 42 4F 52 54        3368         .ascii     "ABORT"
      001357                       3369 ABORT:
      001357 CD 14 4E         [ 4] 3370         CALL     PRESE
      00135A CC 14 6B         [ 2] 3371         JP     QUIT
                                   3372 
                                   3373 ;       abort"  ( f -- )
                                   3374 ;       Run time routine of ABORT".
                                   3375 ;       Abort with a message.
      00135D 13 51                 3376         .word      LINK
                           00135F  3377 LINK = . 
      00135F 46                    3378 	.byte      COMPO+6
      001360 41 42 4F 52 54        3379         .ascii     "ABORT"
      001365 22                    3380         .byte      '"'
      001366                       3381 ABORQ:
      001366 CD 04 AC         [ 4] 3382         CALL     QBRAN
      001369 13 85                 3383         .word      ABOR2   ;text flag
      00136B CD 0F 61         [ 4] 3384         CALL     DOSTR
      00136E CD 0F 03         [ 4] 3385 ABOR1:  CALL     SPACE
      001371 CD 0B BC         [ 4] 3386         CALL     COUNT
      001374 CD 0F 2D         [ 4] 3387         CALL     TYPES
      001377 CD 04 79         [ 4] 3388         CALL     DOLIT
      00137A 00 3F                 3389         .word     63 ; "?"
      00137C CD 04 38         [ 4] 3390         CALL     EMIT
      00137F CD 0F 4B         [ 4] 3391         CALL     CR
      001382 CC 13 57         [ 2] 3392         JP     ABORT   ;pass error string
      001385 CD 0F 61         [ 4] 3393 ABOR2:  CALL     DOSTR
      001388 CC 05 94         [ 2] 3394         JP     DROP
                                   3395 
                                   3396 ;; The text interpreter
                                   3397 
                                   3398 ;       $INTERPRET      ( a -- )
                                   3399 ;       Interpret a word. If failed,
                                   3400 ;       try to convert it to an integer.
      00138B 13 5F                 3401         .word      LINK
                           00138D  3402 LINK = . 
      00138D 0A                    3403         .byte      10
      00138E 24 49 4E 54 45 52 50  3404         .ascii     "$INTERPRET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



             52 45 54
      001398                       3405 INTER:
      001398 CD 12 5A         [ 4] 3406         CALL     NAMEQ
      00139B CD 07 48         [ 4] 3407         CALL     QDUP    ;?defined
      00139E CD 04 AC         [ 4] 3408         CALL     QBRAN
      0013A1 13 C2                 3409         .word      INTE1
      0013A3 CD 04 F7         [ 4] 3410         CALL     AT
      0013A6 CD 04 79         [ 4] 3411         CALL     DOLIT
      0013A9 40 00                 3412 	.word       0x4000	; COMPO*256
      0013AB CD 05 EA         [ 4] 3413         CALL     ANDD    ;?compile only lexicon bits
      0013AE CD 13 66         [ 4] 3414         CALL     ABORQ
      0013B1 0D                    3415         .byte      13
      0013B2 20 63 6F 6D 70 69 6C  3416         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0013BF CC 04 D3         [ 2] 3417         JP     EXECU
      0013C2 CD 0D F8         [ 4] 3418 INTE1:  CALL     NUMBQ   ;convert a number
      0013C5 CD 04 AC         [ 4] 3419         CALL     QBRAN
      0013C8 13 6E                 3420         .word    ABOR1
      0013CA 81               [ 4] 3421         RET
                                   3422 
                                   3423 ;       [       ( -- )
                                   3424 ;       Start  text interpreter.
      0013CB 13 8D                 3425         .word      LINK
                           0013CD  3426 LINK = . 
      0013CD 81                    3427 	.byte      IMEDD+1
      0013CE 5B                    3428         .ascii     "["
      0013CF                       3429 LBRAC:
      0013CF CD 04 79         [ 4] 3430         CALL   DOLIT
      0013D2 13 98                 3431         .word  INTER
      0013D4 CD 06 BC         [ 4] 3432         CALL   TEVAL
      0013D7 CC 04 E0         [ 2] 3433         JP     STORE
                                   3434 
                                   3435 ;       .OK     ( -- )
                                   3436 ;       Display 'ok' while interpreting.
      0013DA 13 CD                 3437         .word      LINK
                           0013DC  3438 LINK = . 
      0013DC 03                    3439         .byte      3
      0013DD 2E 4F 4B              3440         .ascii     ".OK"
      0013E0                       3441 DOTOK:
      0013E0 CD 04 79         [ 4] 3442         CALL     DOLIT
      0013E3 13 98                 3443         .word      INTER
      0013E5 CD 06 BC         [ 4] 3444         CALL     TEVAL
      0013E8 CD 04 F7         [ 4] 3445         CALL     AT
      0013EB CD 08 3A         [ 4] 3446         CALL     EQUAL
      0013EE CD 04 AC         [ 4] 3447         CALL     QBRAN
      0013F1 13 FA                 3448         .word      DOTO1
      0013F3 CD 0F 8A         [ 4] 3449         CALL     DOTQP
      0013F6 03                    3450         .byte      3
      0013F7 20 6F 6B              3451         .ascii     " ok"
      0013FA CC 0F 4B         [ 2] 3452 DOTO1:  JP     CR
                                   3453 
                                   3454 ;       ?STACK  ( -- )
                                   3455 ;       Abort if stack underflows.
      0013FD 13 DC                 3456         .word      LINK
                           0013FF  3457 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0013FF 06                    3458         .byte      6
      001400 3F 53 54 41 43 4B     3459         .ascii     "?STACK"
      001406                       3460 QSTAC: 
      001406 CD 0B 27         [ 4] 3461         CALL     DEPTH
      001409 CD 05 D7         [ 4] 3462         CALL     ZLESS   ;check only for underflow
      00140C CD 13 66         [ 4] 3463         CALL     ABORQ
      00140F 0B                    3464         .byte      11
      001410 20 75 6E 64 65 72 66  3465         .ascii     " underflow "
             6C 6F 77 20
      00141B 81               [ 4] 3466         RET
                                   3467 
                                   3468 ;       EVAL    ( -- )
                                   3469 ;       Interpret  input stream.
      00141C 13 FF                 3470         .word      LINK
                           00141E  3471 LINK = . 
      00141E 04                    3472         .byte      4
      00141F 45 56 41 4C           3473         .ascii     "EVAL"
      001423                       3474 EVAL:
      001423 CD 11 5D         [ 4] 3475 EVAL1:  CALL     TOKEN
      001426 CD 05 9E         [ 4] 3476         CALL     DUPP
      001429 CD 05 15         [ 4] 3477         CALL     CAT     ;?input stream empty
      00142C CD 04 AC         [ 4] 3478         CALL     QBRAN
      00142F 14 3F                 3479         .word    EVAL2
      001431 CD 06 BC         [ 4] 3480         CALL     TEVAL
      001434 CD 0C 09         [ 4] 3481         CALL     ATEXE
      001437 CD 14 06         [ 4] 3482         CALL     QSTAC   ;evaluate input, check stack
      00143A CD 04 C3         [ 4] 3483         CALL     BRAN
      00143D 14 23                 3484         .word    EVAL1
      00143F CD 05 94         [ 4] 3485 EVAL2:  CALL     DROP
      001442 CC 13 E0         [ 2] 3486         JP       DOTOK
                                   3487 
                                   3488 ;       PRESET  ( -- )
                                   3489 ;       Reset data stack pointer and
                                   3490 ;       terminal input buffer.
      001445 14 1E                 3491         .word      LINK
                           001447  3492 LINK = . 
      001447 06                    3493         .byte      6
      001448 50 52 45 53 45 54     3494         .ascii     "PRESET"
      00144E                       3495 PRESE:
      00144E CD 04 79         [ 4] 3496         CALL     DOLIT
      001451 16 80                 3497         .word      SPP
      001453 CD 05 8B         [ 4] 3498         CALL     SPSTO
      001456 CD 04 79         [ 4] 3499         CALL     DOLIT
      001459 17 00                 3500         .word      TIBB
      00145B CD 06 89         [ 4] 3501         CALL     NTIB
      00145E CD 0A 4E         [ 4] 3502         CALL     CELLP
      001461 CC 04 E0         [ 2] 3503         JP     STORE
                                   3504 
                                   3505 ;       QUIT    ( -- )
                                   3506 ;       Reset return stack pointer
                                   3507 ;       and start text interpreter.
      001464 14 47                 3508         .word      LINK
                           001466  3509 LINK = . 
      001466 04                    3510         .byte      4
      001467 51 55 49 54           3511         .ascii     "QUIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00146B                       3512 QUIT:
      00146B CD 04 79         [ 4] 3513         CALL     DOLIT
      00146E 17 FF                 3514         .word      RPP
      001470 CD 05 32         [ 4] 3515         CALL     RPSTO   ;reset return stack pointer
      001473 CD 13 CF         [ 4] 3516 QUIT1:  CALL     LBRAC   ;start interpretation
      001476 CD 13 32         [ 4] 3517 QUIT2:  CALL     QUERY   ;get input
      001479 CD 14 23         [ 4] 3518         CALL     EVAL
      00147C 20 F8            [ 2] 3519         JRA     QUIT2   ;continue till error
                                   3520 
                                   3521 ;; The compiler
                                   3522 
                                   3523 ;       '       ( -- ca )
                                   3524 ;       Search vocabularies for
                                   3525 ;       next word in input stream.
      00147E 14 66                 3526         .word      LINK
                           001480  3527 LINK = . 
      001480 01                    3528         .byte      1
      001481 27                    3529         .ascii     "'"
      001482                       3530 TICK:
      001482 CD 11 5D         [ 4] 3531         CALL     TOKEN
      001485 CD 12 5A         [ 4] 3532         CALL     NAMEQ   ;?defined
      001488 CD 04 AC         [ 4] 3533         CALL     QBRAN
      00148B 13 6E                 3534         .word      ABOR1
      00148D 81               [ 4] 3535         RET     ;yes, push code address
                                   3536 
                                   3537 ;       ALLOT   ( n -- )
                                   3538 ;       Allocate n bytes to RAM 
      00148E 14 80                 3539         .word      LINK
                           001490  3540         LINK = . 
      001490 05                    3541         .byte      5
      001491 41 4C 4C 4F 54        3542         .ascii     "ALLOT"
      001496                       3543 ALLOT:
      001496 CD 06 EC         [ 4] 3544         CALL     VPP
                                   3545 ; must update APP_VP each time VP is modidied
      001499 CD 0B 55         [ 4] 3546         call PSTOR 
      00149C CC 1B E2         [ 2] 3547         jp UPDATVP 
                                   3548 
                                   3549 ;       ,       ( w -- )
                                   3550 ;         Compile an integer into
                                   3551 ;         variable space.
      00149F 14 90                 3552         .word      LINK
                           0014A1  3553 LINK = . 
      0014A1 01                    3554         .byte      1
      0014A2 2C                    3555         .ascii     ","
      0014A3                       3556 COMMA:
      0014A3 CD 0B D3         [ 4] 3557         CALL     HERE
      0014A6 CD 05 9E         [ 4] 3558         CALL     DUPP
      0014A9 CD 0A 4E         [ 4] 3559         CALL     CELLP   ;cell boundary
      0014AC CD 06 EC         [ 4] 3560         CALL     VPP
      0014AF CD 04 E0         [ 4] 3561         CALL     STORE
      0014B2 CC 04 E0         [ 2] 3562         JP     STORE
                                   3563 
                                   3564 ;       C,      ( c -- )
                                   3565 ;       Compile a byte into
                                   3566 ;       variables space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014B5 14 A1                 3567        .word      LINK
                           0014B7  3568 LINK = . 
      0014B7 02                    3569         .byte      2
      0014B8 43 2C                 3570         .ascii     "C,"
      0014BA                       3571 CCOMMA:
      0014BA CD 0B D3         [ 4] 3572         CALL     HERE
      0014BD CD 05 9E         [ 4] 3573         CALL     DUPP
      0014C0 CD 0A 79         [ 4] 3574         CALL     ONEP
      0014C3 CD 06 EC         [ 4] 3575         CALL     VPP
      0014C6 CD 04 E0         [ 4] 3576         CALL     STORE
      0014C9 CC 05 04         [ 2] 3577         JP     CSTOR
                                   3578 
                                   3579 ;       [COMPILE]       ( -- ; <string> )
                                   3580 ;       Compile next immediate
                                   3581 ;       word into code dictionary.
      0014CC 14 B7                 3582         .word      LINK
                           0014CE  3583 LINK = . 
      0014CE 89                    3584 	.byte      IMEDD+9
      0014CF 5B 43 4F 4D 50 49 4C  3585         .ascii     "[COMPILE]"
             45 5D
      0014D8                       3586 BCOMP:
      0014D8 CD 14 82         [ 4] 3587         CALL     TICK
      0014DB CC 17 9E         [ 2] 3588         JP     JSRC
                                   3589 
                                   3590 ;       COMPILE ( -- )
                                   3591 ;       Compile next jsr in
                                   3592 ;       colon list to code dictionary.
      0014DE 14 CE                 3593         .word      LINK
                           0014E0  3594 LINK = . 
      0014E0 47                    3595 	.byte      COMPO+7
      0014E1 43 4F 4D 50 49 4C 45  3596         .ascii     "COMPILE"
      0014E8                       3597 COMPI:
      0014E8 CD 05 48         [ 4] 3598         CALL     RFROM
      0014EB CD 05 9E         [ 4] 3599         CALL     DUPP
      0014EE CD 04 F7         [ 4] 3600         CALL     AT
      0014F1 CD 17 9E         [ 4] 3601         CALL     JSRC    ;compile subroutine
      0014F4 CD 0A 4E         [ 4] 3602         CALL     CELLP
      0014F7 90 93            [ 1] 3603         ldw y,x 
      0014F9 90 FE            [ 2] 3604         ldw y,(y)
      0014FB 1C 00 02         [ 2] 3605         addw x,#CELLL 
      0014FE 90 FC            [ 2] 3606         jp (y)
                                   3607 
                                   3608 ;       LITERAL ( w -- )
                                   3609 ;       Compile tos to dictionary
                                   3610 ;       as an integer literal.
      001500 14 E0                 3611         .word      LINK
                           001502  3612 LINK = . 
      001502 87                    3613 	.byte      IMEDD+7
      001503 4C 49 54 45 52 41 4C  3614         .ascii     "LITERAL"
      00150A                       3615 LITER:
      00150A CD 14 E8         [ 4] 3616         CALL     COMPI
      00150D 04 79                 3617         .word DOLIT 
      00150F CC 14 A3         [ 2] 3618         JP     COMMA
                                   3619 
                                   3620 ;       $,"     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3621 ;       Compile a literal string
                                   3622 ;       up to next " .
      001512 15 02                 3623         .word      LINK
                           001514  3624 LINK = . 
      001514 03                    3625         .byte      3
      001515 24 2C 22              3626         .byte     '$',',','"'
      001518                       3627 STRCQ:
      001518 CD 04 79         [ 4] 3628         CALL     DOLIT
      00151B 00 22                 3629         .word     34	; "
      00151D CD 10 E0         [ 4] 3630         CALL     PARSE
      001520 CD 0B D3         [ 4] 3631         CALL     HERE
      001523 CD 0C 93         [ 4] 3632         CALL     PACKS   ;string to code dictionary
      001526 CD 0B BC         [ 4] 3633         CALL     COUNT
      001529 CD 07 99         [ 4] 3634         CALL     PLUS    ;calculate aligned end of string
      00152C CD 06 EC         [ 4] 3635         CALL     VPP
      00152F CC 04 E0         [ 2] 3636         JP     STORE
                                   3637 
                                   3638 ;; Structures
                                   3639 
                                   3640 ;       FOR     ( -- a )
                                   3641 ;       Start a FOR-NEXT loop
                                   3642 ;       structure in a colon definition.
      001532 15 14                 3643         .word      LINK
                           001534  3644 LINK = . 
      001534 83                    3645 	.byte      IMEDD+3
      001535 46 4F 52              3646         .ascii     "FOR"
      001538                       3647 FOR:
      001538 CD 14 E8         [ 4] 3648         CALL     COMPI
      00153B 05 67                 3649         .word TOR 
      00153D CC 0B D3         [ 2] 3650         JP     HERE
                                   3651 
                                   3652 ;       NEXT    ( a -- )
                                   3653 ;       Terminate a FOR-NEXT loop.
      001540 15 34                 3654         .word      LINK
                           001542  3655 LINK = . 
      001542 84                    3656 	.byte      IMEDD+4
      001543 4E 45 58 54           3657         .ascii     "NEXT"
      001547                       3658 NEXT:
      001547 CD 14 E8         [ 4] 3659         CALL     COMPI
      00154A 04 8D                 3660         .word DONXT 
      00154C CD 07 38         [ 4] 3661         call ADRADJ
      00154F CC 14 A3         [ 2] 3662         JP     COMMA
                                   3663 
                                   3664 ;       I ( -- n )
                                   3665 ;       stack FOR-NEXT COUNTER 
      001552 15 42                 3666         .word LINK 
                           001554  3667         LINK=.
      001554 01                    3668         .byte 1 
      001555 49                    3669         .ascii "I"
      001556                       3670 IFETCH: 
      001556 1D 00 02         [ 2] 3671         subw x,#CELLL 
      001559 16 03            [ 2] 3672         ldw y,(3,sp)
      00155B FF               [ 2] 3673         ldw (x),y 
      00155C 81               [ 4] 3674         ret 
                                   3675 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3676 ;       BEGIN   ( -- a )
                                   3677 ;       Start an infinite or
                                   3678 ;       indefinite loop structure.
      00155D 15 54                 3679         .word      LINK
                           00155F  3680 LINK = . 
      00155F 85                    3681 	.byte      IMEDD+5
      001560 42 45 47 49 4E        3682         .ascii     "BEGIN"
      001565                       3683 BEGIN:
      001565 CC 0B D3         [ 2] 3684         JP     HERE
                                   3685 
                                   3686 ;       UNTIL   ( a -- )
                                   3687 ;       Terminate a BEGIN-UNTIL
                                   3688 ;       indefinite loop structure.
      001568 15 5F                 3689         .word      LINK
                           00156A  3690 LINK = . 
      00156A 85                    3691 	.byte      IMEDD+5
      00156B 55 4E 54 49 4C        3692         .ascii     "UNTIL"
      001570                       3693 UNTIL:
      001570 CD 14 E8         [ 4] 3694         CALL     COMPI
      001573 04 AC                 3695         .word    QBRAN 
      001575 CD 07 38         [ 4] 3696         call ADRADJ
      001578 CC 14 A3         [ 2] 3697         JP     COMMA
                                   3698 
                                   3699 ;       AGAIN   ( a -- )
                                   3700 ;       Terminate a BEGIN-AGAIN
                                   3701 ;       infinite loop structure.
      00157B 15 6A                 3702         .word      LINK
                           00157D  3703 LINK = . 
      00157D 85                    3704 	.byte      IMEDD+5
      00157E 41 47 41 49 4E        3705         .ascii     "AGAIN"
      001583                       3706 AGAIN:
      001583 CD 14 E8         [ 4] 3707         CALL     COMPI
      001586 04 C3                 3708         .word BRAN
      001588 CD 07 38         [ 4] 3709         call ADRADJ 
      00158B CC 14 A3         [ 2] 3710         JP     COMMA
                                   3711 
                                   3712 ;       IF      ( -- A )
                                   3713 ;       Begin a conditional branch.
      00158E 15 7D                 3714         .word      LINK
                           001590  3715 LINK = . 
      001590 82                    3716 	.byte      IMEDD+2
      001591 49 46                 3717         .ascii     "IF"
      001593                       3718 IFF:
      001593 CD 14 E8         [ 4] 3719         CALL     COMPI
      001596 04 AC                 3720         .word QBRAN
      001598 CD 0B D3         [ 4] 3721         CALL     HERE
      00159B CD 0A E5         [ 4] 3722         CALL     ZERO
      00159E CC 14 A3         [ 2] 3723         JP     COMMA
                                   3724 
                                   3725 ;       THEN        ( A -- )
                                   3726 ;       Terminate a conditional branch structure.
      0015A1 15 90                 3727         .word      LINK
                           0015A3  3728 LINK = . 
      0015A3 84                    3729 	.byte      IMEDD+4
      0015A4 54 48 45 4E           3730         .ascii     "THEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015A8                       3731 THENN:
      0015A8 CD 0B D3         [ 4] 3732         CALL     HERE
      0015AB CD 07 38         [ 4] 3733         call ADRADJ 
      0015AE CD 05 AE         [ 4] 3734         CALL     SWAPP
      0015B1 CC 04 E0         [ 2] 3735         JP     STORE
                                   3736 
                                   3737 ;       ELSE        ( A -- A )
                                   3738 ;       Start the false clause in an IF-ELSE-THEN structure.
      0015B4 15 A3                 3739         .word      LINK
                           0015B6  3740 LINK = . 
      0015B6 84                    3741 	.byte      IMEDD+4
      0015B7 45 4C 53 45           3742         .ascii     "ELSE"
      0015BB                       3743 ELSEE:
      0015BB CD 14 E8         [ 4] 3744         CALL     COMPI
      0015BE 04 C3                 3745         .word BRAN
      0015C0 CD 0B D3         [ 4] 3746         CALL     HERE
      0015C3 CD 0A E5         [ 4] 3747         CALL     ZERO
      0015C6 CD 14 A3         [ 4] 3748         CALL     COMMA
      0015C9 CD 05 AE         [ 4] 3749         CALL     SWAPP
      0015CC CD 0B D3         [ 4] 3750         CALL     HERE
      0015CF CD 07 38         [ 4] 3751         call ADRADJ 
      0015D2 CD 05 AE         [ 4] 3752         CALL     SWAPP
      0015D5 CC 04 E0         [ 2] 3753         JP     STORE
                                   3754 
                                   3755 ;       AHEAD       ( -- A )
                                   3756 ;       Compile a forward branch instruction.
      0015D8 15 B6                 3757         .word      LINK
                           0015DA  3758 LINK = . 
      0015DA 85                    3759 	.byte      IMEDD+5
      0015DB 41 48 45 41 44        3760         .ascii     "AHEAD"
      0015E0                       3761 AHEAD:
      0015E0 CD 14 E8         [ 4] 3762         CALL     COMPI
      0015E3 04 C3                 3763         .word BRAN
      0015E5 CD 0B D3         [ 4] 3764         CALL     HERE
      0015E8 CD 0A E5         [ 4] 3765         CALL     ZERO
      0015EB CC 14 A3         [ 2] 3766         JP     COMMA
                                   3767 
                                   3768 ;       WHILE       ( a -- A a )
                                   3769 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0015EE 15 DA                 3770         .word      LINK
                           0015F0  3771 LINK = . 
      0015F0 85                    3772 	.byte      IMEDD+5
      0015F1 57 48 49 4C 45        3773         .ascii     "WHILE"
      0015F6                       3774 WHILE:
      0015F6 CD 14 E8         [ 4] 3775         CALL     COMPI
      0015F9 04 AC                 3776         .word QBRAN
      0015FB CD 0B D3         [ 4] 3777         CALL     HERE
      0015FE CD 0A E5         [ 4] 3778         CALL     ZERO
      001601 CD 14 A3         [ 4] 3779         CALL     COMMA
      001604 CC 05 AE         [ 2] 3780         JP     SWAPP
                                   3781 
                                   3782 ;       REPEAT      ( A a -- )
                                   3783 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001607 15 F0                 3784         .word      LINK
                           001609  3785 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001609 86                    3786         .byte      IMEDD+6
      00160A 52 45 50 45 41 54     3787         .ascii     "REPEAT"
      001610                       3788 REPEA:
      001610 CD 14 E8         [ 4] 3789         CALL     COMPI
      001613 04 C3                 3790         .word BRAN
      001615 CD 07 38         [ 4] 3791         call ADRADJ 
      001618 CD 14 A3         [ 4] 3792         CALL     COMMA
      00161B CD 0B D3         [ 4] 3793         CALL     HERE
      00161E CD 07 38         [ 4] 3794         call ADRADJ 
      001621 CD 05 AE         [ 4] 3795         CALL     SWAPP
      001624 CC 04 E0         [ 2] 3796         JP     STORE
                                   3797 
                                   3798 ;       AFT         ( a -- a A )
                                   3799 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001627 16 09                 3800         .word      LINK
                           001629  3801 LINK = . 
      001629 83                    3802 	.byte      IMEDD+3
      00162A 41 46 54              3803         .ascii     "AFT"
      00162D                       3804 AFT:
      00162D CD 05 94         [ 4] 3805         CALL     DROP
      001630 CD 15 E0         [ 4] 3806         CALL     AHEAD
      001633 CD 0B D3         [ 4] 3807         CALL     HERE
      001636 CC 05 AE         [ 2] 3808         JP     SWAPP
                                   3809 
                                   3810 ;       ABORT"      ( -- ; <string> )
                                   3811 ;       Conditional abort with an error message.
      001639 16 29                 3812         .word      LINK
                           00163B  3813 LINK = . 
      00163B 86                    3814 	.byte      IMEDD+6
      00163C 41 42 4F 52 54        3815         .ascii     "ABORT"
      001641 22                    3816         .byte      '"'
      001642                       3817 ABRTQ:
      001642 CD 14 E8         [ 4] 3818         CALL     COMPI
      001645 13 66                 3819         .word ABORQ
      001647 CC 15 18         [ 2] 3820         JP     STRCQ
                                   3821 
                                   3822 ;       $"     ( -- ; <string> )
                                   3823 ;       Compile an inline string literal.
      00164A 16 3B                 3824         .word      LINK
                           00164C  3825 LINK = . 
      00164C 82                    3826 	.byte      IMEDD+2
      00164D 24 22                 3827         .byte     '$','"'
      00164F                       3828 STRQ:
      00164F CD 14 E8         [ 4] 3829         CALL     COMPI
      001652 0F 80                 3830         .word STRQP 
      001654 CC 15 18         [ 2] 3831         JP     STRCQ
                                   3832 
                                   3833 ;       ."          ( -- ; <string> )
                                   3834 ;       Compile an inline string literal to be typed out at run time.
      001657 16 4C                 3835         .word      LINK
                           001659  3836 LINK = . 
      001659 82                    3837 	.byte      IMEDD+2
      00165A 2E 22                 3838         .byte     '.','"'
      00165C                       3839 DOTQ:
      00165C CD 14 E8         [ 4] 3840         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00165F 0F 8A                 3841         .word DOTQP 
      001661 CC 15 18         [ 2] 3842         JP     STRCQ
                                   3843 
                                   3844 ;; Name compiler
                                   3845 
                                   3846 ;       ?UNIQUE ( a -- a )
                                   3847 ;       Display a warning message
                                   3848 ;       if word already exists.
      001664 16 59                 3849         .word      LINK
                           001666  3850 LINK = . 
      001666 07                    3851         .byte      7
      001667 3F 55 4E 49 51 55 45  3852         .ascii     "?UNIQUE"
      00166E                       3853 UNIQU:
      00166E CD 05 9E         [ 4] 3854         CALL     DUPP
      001671 CD 12 5A         [ 4] 3855         CALL     NAMEQ   ;?name exists
      001674 CD 04 AC         [ 4] 3856         CALL     QBRAN
      001677 16 8D                 3857         .word      UNIQ1
      001679 CD 0F 8A         [ 4] 3858         CALL     DOTQP   ;redef are OK
      00167C 07                    3859         .byte       7
      00167D 20 72 65 44 65 66 20  3860         .ascii     " reDef "       
      001684 CD 05 C8         [ 4] 3861         CALL     OVER
      001687 CD 0B BC         [ 4] 3862         CALL     COUNT
      00168A CD 0F 2D         [ 4] 3863         CALL     TYPES   ;just in case
      00168D CC 05 94         [ 2] 3864 UNIQ1:  JP     DROP
                                   3865 
                                   3866 ;       $,n     ( na -- )
                                   3867 ;       Build a new dictionary name
                                   3868 ;       using string at na.
                                   3869 ; compile dans l'espace des variables 
      001690 16 66                 3870         .word      LINK
                           001692  3871 LINK = . 
      001692 03                    3872         .byte      3
      001693 24 2C 6E              3873         .ascii     "$,n"
      001696                       3874 SNAME:
      001696 CD 05 9E         [ 4] 3875         CALL     DUPP
      001699 CD 05 15         [ 4] 3876         CALL     CAT     ;?null input
      00169C CD 04 AC         [ 4] 3877         CALL     QBRAN
      00169F 16 CC                 3878         .word      PNAM1
      0016A1 CD 16 6E         [ 4] 3879         CALL     UNIQU   ;?redefinition
      0016A4 CD 05 9E         [ 4] 3880         CALL     DUPP
      0016A7 CD 0B BC         [ 4] 3881         CALL     COUNT
      0016AA CD 07 99         [ 4] 3882         CALL     PLUS
      0016AD CD 06 EC         [ 4] 3883         CALL     VPP
      0016B0 CD 04 E0         [ 4] 3884         CALL     STORE
      0016B3 CD 05 9E         [ 4] 3885         CALL     DUPP
      0016B6 CD 07 0A         [ 4] 3886         CALL     LAST
      0016B9 CD 04 E0         [ 4] 3887         CALL     STORE   ;save na for vocabulary link
      0016BC CD 0A 5D         [ 4] 3888         CALL     CELLM   ;link address
      0016BF CD 06 DE         [ 4] 3889         CALL     CNTXT
      0016C2 CD 04 F7         [ 4] 3890         CALL     AT
      0016C5 CD 05 AE         [ 4] 3891         CALL     SWAPP
      0016C8 CD 04 E0         [ 4] 3892         CALL     STORE
      0016CB 81               [ 4] 3893         RET     ;save code pointer
      0016CC CD 0F 80         [ 4] 3894 PNAM1:  CALL     STRQP
      0016CF 05                    3895         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0016D0 20 6E 61 6D 65        3896         .ascii     " name" ;null input
      0016D5 CC 13 6E         [ 2] 3897         JP     ABOR1
                                   3898 
                                   3899 ;; FORTH compiler
                                   3900 
                                   3901 ;       $COMPILE        ( a -- )
                                   3902 ;       Compile next word to
                                   3903 ;       dictionary as a token or literal.
      0016D8 16 92                 3904         .word      LINK
                           0016DA  3905 LINK = . 
      0016DA 08                    3906         .byte      8
      0016DB 24 43 4F 4D 50 49 4C  3907         .ascii     "$COMPILE"
             45
      0016E3                       3908 SCOMP:
      0016E3 CD 12 5A         [ 4] 3909         CALL     NAMEQ
      0016E6 CD 07 48         [ 4] 3910         CALL     QDUP    ;?defined
      0016E9 CD 04 AC         [ 4] 3911         CALL     QBRAN
      0016EC 17 04                 3912         .word      SCOM2
      0016EE CD 04 F7         [ 4] 3913         CALL     AT
      0016F1 CD 04 79         [ 4] 3914         CALL     DOLIT
      0016F4 80 00                 3915         .word     0x8000	;  IMEDD*256
      0016F6 CD 05 EA         [ 4] 3916         CALL     ANDD    ;?immediate
      0016F9 CD 04 AC         [ 4] 3917         CALL     QBRAN
      0016FC 17 01                 3918         .word      SCOM1
      0016FE CC 04 D3         [ 2] 3919         JP     EXECU
      001701 CC 17 9E         [ 2] 3920 SCOM1:  JP     JSRC
      001704 CD 0D F8         [ 4] 3921 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001707 CD 04 AC         [ 4] 3922         CALL     QBRAN
      00170A 13 6E                 3923         .word      ABOR1
      00170C CC 15 0A         [ 2] 3924         JP     LITER
                                   3925 
                                   3926 ;       OVERT   ( -- )
                                   3927 ;       Link a new word into vocabulary.
      00170F 16 DA                 3928         .word      LINK
                           001711  3929 LINK = . 
      001711 05                    3930         .byte      5
      001712 4F 56 45 52 54        3931         .ascii     "OVERT"
      001717                       3932 OVERT:
      001717 CD 07 0A         [ 4] 3933         CALL     LAST
      00171A CD 04 F7         [ 4] 3934         CALL     AT
      00171D CD 06 DE         [ 4] 3935         CALL     CNTXT
      001720 CC 04 E0         [ 2] 3936         JP     STORE
                                   3937 
                                   3938 ;       ;       ( -- )
                                   3939 ;       Terminate a colon definition.
      001723 17 11                 3940         .word      LINK
                           001725  3941 LINK = . 
      001725 C1                    3942 	.byte      IMEDD+COMPO+1
      001726 3B                    3943         .ascii     ";"
      001727                       3944 SEMIS:
                           000001  3945 .if OPTIMIZE ; more compact and faster
      001727 CD 04 79         [ 4] 3946         call DOLIT 
      00172A 00 81                 3947         .word 0x81   ; opcode for RET 
      00172C CD 14 BA         [ 4] 3948         call CCOMMA 
                           000000  3949 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3950         CALL     COMPI
                                   3951         .word EXIT 
                                   3952 .endif 
      00172F CD 13 CF         [ 4] 3953         CALL     LBRAC
      001732 CD 17 17         [ 4] 3954         call OVERT 
      001735 CD 21 3A         [ 4] 3955         CALL FMOVE
      001738 CD 07 48         [ 4] 3956         call QDUP 
      00173B CD 04 AC         [ 4] 3957         call QBRAN 
      00173E 18 6E                 3958         .word SET_RAMLAST 
      001740 CD 21 CE         [ 4] 3959         CALL UPDATPTR
      001743 81               [ 4] 3960         RET 
                                   3961 
                                   3962 
                                   3963 ;       Terminate an ISR definition 
                                   3964 ;       retourn ca of ISR as double
                                   3965 ;       I; ( -- ud )
      001744 17 25                 3966         .word LINK 
                           001746  3967         LINK=.
      001746 C2                    3968         .byte 2+IMEDD+COMPO 
      001747 49 3B                 3969         .ascii "I;" 
      001749                       3970 ISEMI:
      001749 1D 00 02         [ 2] 3971         subw x,#CELLL  
      00174C 90 AE 00 80      [ 2] 3972         ldw y,#IRET_CODE 
      001750 FF               [ 2] 3973         ldw (x),y 
      001751 CD 14 BA         [ 4] 3974         call CCOMMA
      001754 CD 13 CF         [ 4] 3975         call LBRAC 
      001757 CD 22 13         [ 4] 3976         call IFMOVE
      00175A CD 07 48         [ 4] 3977         call QDUP 
      00175D CD 04 AC         [ 4] 3978         CALL QBRAN 
      001760 18 6E                 3979         .word SET_RAMLAST
      001762 CD 06 FA         [ 4] 3980         CALL CPP
      001765 CD 04 F7         [ 4] 3981         call AT 
      001768 CD 05 AE         [ 4] 3982         call SWAPP 
      00176B CD 06 FA         [ 4] 3983         CALL CPP 
      00176E CD 04 E0         [ 4] 3984         call STORE 
      001771 CD 1B CB         [ 4] 3985         call UPDATCP 
      001774 CD 1B 88         [ 4] 3986         call EEPVP 
      001777 CD 05 94         [ 4] 3987         call DROP 
      00177A CD 04 F7         [ 4] 3988         call AT 
      00177D CD 06 EC         [ 4] 3989         call VPP 
      001780 CD 04 E0         [ 4] 3990         call STORE 
      001783 CC 0A E5         [ 2] 3991         jp ZERO
      001786 81               [ 4] 3992         ret           
                                   3993         
                                   3994 
                                   3995 ;       ]       ( -- )
                                   3996 ;       Start compiling words in
                                   3997 ;       input stream.
      001787 17 46                 3998         .word      LINK
                           001789  3999 LINK = . 
      001789 01                    4000         .byte      1
      00178A 5D                    4001         .ascii     "]"
      00178B                       4002 RBRAC:
      00178B CD 04 79         [ 4] 4003         CALL   DOLIT
      00178E 16 E3                 4004         .word  SCOMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001790 CD 06 BC         [ 4] 4005         CALL   TEVAL
      001793 CC 04 E0         [ 2] 4006         JP     STORE
                                   4007 
                                   4008 ;       CALL,    ( ca -- )
                                   4009 ;       Compile a subroutine call.
      001796 17 89                 4010         .word      LINK
                           001798  4011 LINK = . 
      001798 05                    4012         .byte      5
      001799 43 41 4C 4C 2C        4013         .ascii     "CALL,"
      00179E                       4014 JSRC:
      00179E CD 04 79         [ 4] 4015         CALL     DOLIT
      0017A1 00 CD                 4016         .word     CALLL     ;CALL
      0017A3 CD 14 BA         [ 4] 4017         CALL     CCOMMA
      0017A6 CC 14 A3         [ 2] 4018         JP     COMMA
                                   4019 
                                   4020 ;       INIT-OFS ( -- )
                                   4021 ;       compute offset to adjust jump address 
                                   4022 ;       set variable OFFSET 
      0017A9 17 98                 4023         .word LINK 
                           0017AB  4024         LINK=.
      0017AB 08                    4025         .byte 8 
      0017AC 49 4E 49 54 2D 4F 46  4026         .ascii "INIT-OFS" 
             53
      0017B4                       4027 INITOFS:
      0017B4 CD 06 AB         [ 4] 4028         call TFLASH 
      0017B7 CD 04 F7         [ 4] 4029         CALL AT 
      0017BA CD 05 9E         [ 4] 4030         CALL DUPP 
      0017BD CD 04 AC         [ 4] 4031         call QBRAN
      0017C0 17 D1                 4032         .word 1$
      0017C2 CD 05 94         [ 4] 4033         call DROP  
      0017C5 CD 06 FA         [ 4] 4034         call CPP 
      0017C8 CD 04 F7         [ 4] 4035         call AT 
      0017CB CD 0B D3         [ 4] 4036         call HERE
      0017CE CD 08 12         [ 4] 4037         call SUBB 
      0017D1 CD 07 2F         [ 4] 4038 1$:     call OFFSET 
      0017D4 CC 04 E0         [ 2] 4039         jp STORE  
                                   4040 
                                   4041 ;       :       ( -- ; <string> )
                                   4042 ;       Start a new colon definition
                                   4043 ;       using next word as its name.
      0017D7 17 AB                 4044         .word      LINK
                           0017D9  4045 LINK = . 
      0017D9 01                    4046         .byte      1
      0017DA 3A                    4047         .ascii     ":"
      0017DB                       4048 COLON:
      0017DB CD 17 B4         [ 4] 4049         call INITOFS       
      0017DE CD 11 5D         [ 4] 4050         CALL   TOKEN
      0017E1 CD 16 96         [ 4] 4051         CALL   SNAME
      0017E4 CC 17 8B         [ 2] 4052         JP     RBRAC
                                   4053 
                                   4054 ;       I:  ( -- )
                                   4055 ;       Start interrupt service routine definition
                                   4056 ;       those definition have no name.
      0017E7 17 D9                 4057         .word LINK
                           0017E9  4058         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0017E9 02                    4059         .byte 2 
      0017EA 49 3A                 4060         .ascii "I:" 
      0017EC                       4061 ICOLON:
      0017EC CD 17 B4         [ 4] 4062         call INITOFS 
      0017EF CC 17 8B         [ 2] 4063         jp RBRAC  
                                   4064 
                                   4065 ;       IMMEDIATE       ( -- )
                                   4066 ;       Make last compiled word
                                   4067 ;       an immediate word.
      0017F2 17 E9                 4068         .word      LINK
                           0017F4  4069 LINK = . 
      0017F4 09                    4070         .byte      9
      0017F5 49 4D 4D 45 44 49 41  4071         .ascii     "IMMEDIATE"
             54 45
      0017FE                       4072 IMMED:
      0017FE CD 04 79         [ 4] 4073         CALL     DOLIT
      001801 80 00                 4074         .word     0x8000	;  IMEDD*256
      001803 CD 07 0A         [ 4] 4075         CALL     LAST
      001806 CD 04 F7         [ 4] 4076         CALL     AT
      001809 CD 04 F7         [ 4] 4077         CALL     AT
      00180C CD 05 FE         [ 4] 4078         CALL     ORR
      00180F CD 07 0A         [ 4] 4079         CALL     LAST
      001812 CD 04 F7         [ 4] 4080         CALL     AT
      001815 CC 04 E0         [ 2] 4081         JP     STORE
                                   4082 
                                   4083 ;; Defining words
                                   4084 
                                   4085 ;       CREATE  ( -- ; <string> )
                                   4086 ;       Compile a new array
                                   4087 ;       without allocating space.
      001818 17 F4                 4088         .word      LINK
                           00181A  4089 LINK = . 
      00181A 06                    4090         .byte      6
      00181B 43 52 45 41 54 45     4091         .ascii     "CREATE"
      001821                       4092 CREAT:
      001821 CD 11 5D         [ 4] 4093         CALL     TOKEN
      001824 CD 16 96         [ 4] 4094         CALL     SNAME
      001827 CD 17 17         [ 4] 4095         CALL     OVERT        
      00182A CD 14 E8         [ 4] 4096         CALL     COMPI 
      00182D 06 4B                 4097         .word DOVAR 
      00182F 81               [ 4] 4098         RET
                                   4099 
                                   4100 ;       VARIABLE        ( -- ; <string> )
                                   4101 ;       Compile a new variable
                                   4102 ;       initialized to 0.
      001830 18 1A                 4103         .word      LINK
                           001832  4104 LINK = . 
      001832 08                    4105         .byte      8
      001833 56 41 52 49 41 42 4C  4106         .ascii     "VARIABLE"
             45
      00183B                       4107 VARIA:
                                   4108 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00183B CD 0B D3         [ 4] 4109         CALL HERE
      00183E CD 05 9E         [ 4] 4110         CALL DUPP 
      001841 CD 0A 4E         [ 4] 4111         CALL CELLP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001844 CD 06 EC         [ 4] 4112         CALL VPP 
      001847 CD 04 E0         [ 4] 4113         CALL STORE
      00184A CD 18 21         [ 4] 4114         CALL CREAT
      00184D CD 05 9E         [ 4] 4115         CALL DUPP
      001850 CD 14 A3         [ 4] 4116         CALL COMMA
      001853 CD 0A E5         [ 4] 4117         CALL ZERO
      001856 CD 05 AE         [ 4] 4118         call SWAPP 
      001859 CD 04 E0         [ 4] 4119         CALL STORE
      00185C CD 21 3A         [ 4] 4120         CALL FMOVE ; move definition to FLASH
      00185F CD 07 48         [ 4] 4121         CALL QDUP 
      001862 CD 04 AC         [ 4] 4122         CALL QBRAN 
      001865 18 6E                 4123         .word SET_RAMLAST   
      001867 CD 1B E2         [ 4] 4124         call UPDATVP  ; don't update if variable kept in RAM.
      00186A CD 21 CE         [ 4] 4125         CALL UPDATPTR
      00186D 81               [ 4] 4126         RET         
      00186E                       4127 SET_RAMLAST: 
      00186E CD 07 0A         [ 4] 4128         CALL LAST 
      001871 CD 04 F7         [ 4] 4129         CALL AT 
      001874 CD 07 1D         [ 4] 4130         CALL RAMLAST 
      001877 CC 04 E0         [ 2] 4131         jp STORE  
                                   4132 
                                   4133 
                                   4134 ;       CONSTANT  ( n -- ; <string> )
                                   4135 ;       Compile a new constant 
                                   4136 ;       n CONSTANT name 
      00187A 18 32                 4137         .word LINK 
                           00187C  4138         LINK=. 
      00187C 08                    4139         .byte 8 
      00187D 43 4F 4E 53 54 41 4E  4140         .ascii "CONSTANT" 
             54
      001885                       4141 CONSTANT:          
      001885 CD 11 5D         [ 4] 4142         CALL TOKEN
      001888 CD 16 96         [ 4] 4143         CALL SNAME 
      00188B CD 17 17         [ 4] 4144         CALL OVERT 
      00188E CD 14 E8         [ 4] 4145         CALL COMPI 
      001891 18 AF                 4146         .word DOCONST
      001893 CD 14 A3         [ 4] 4147         CALL COMMA 
      001896 CD 21 3A         [ 4] 4148         CALL FMOVE
      001899 CD 07 48         [ 4] 4149         CALL QDUP 
      00189C CD 04 AC         [ 4] 4150         CALL QBRAN 
      00189F 18 6E                 4151         .word SET_RAMLAST  
      0018A1 CD 21 CE         [ 4] 4152         CALL UPDATPTR  
      0018A4 81               [ 4] 4153 1$:     RET          
                                   4154 
                                   4155 ; CONSTANT runtime semantic 
                                   4156 ; doCONST  ( -- n )
      0018A5 18 7C                 4157         .word LINK 
                           0018A7  4158         LINK=.
      0018A7 07                    4159         .byte 7
      0018A8 44 4F 43 4F 4E 53 54  4160         .ascii "DOCONST"
      0018AF                       4161 DOCONST:
      0018AF 1D 00 02         [ 2] 4162         subw x,#CELLL
      0018B2 90 85            [ 2] 4163         popw y 
      0018B4 90 FE            [ 2] 4164         ldw y,(y) 
      0018B6 FF               [ 2] 4165         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0018B7 81               [ 4] 4166         ret 
                                   4167 
                                   4168 ;----------------------------------
                                   4169 ; create double constant 
                                   4170 ; DCONST ( d -- ; <string> )
                                   4171 ;----------------------------------
      0018B8 18 A7                 4172     .word LINK 
                           0018BA  4173     LINK=.
      0018BA 06                    4174     .byte 6 
      0018BB 44 43 4F 4E 53 54     4175     .ascii "DCONST"
      0018C1                       4176 DCONST:
      0018C1 CD 11 5D         [ 4] 4177         CALL TOKEN
      0018C4 CD 16 96         [ 4] 4178         CALL SNAME 
      0018C7 CD 17 17         [ 4] 4179         CALL OVERT 
      0018CA CD 14 E8         [ 4] 4180         CALL COMPI 
      0018CD 18 F0                 4181         .word DO_DCONST
      0018CF CD 14 A3         [ 4] 4182         CALL COMMA
      0018D2 CD 14 A3         [ 4] 4183         CALL COMMA  
      0018D5 CD 21 3A         [ 4] 4184         CALL FMOVE
      0018D8 CD 07 48         [ 4] 4185         CALL QDUP 
      0018DB CD 04 AC         [ 4] 4186         CALL QBRAN 
      0018DE 18 6E                 4187         .word SET_RAMLAST  
      0018E0 CD 21 CE         [ 4] 4188         CALL UPDATPTR  
      0018E3 81               [ 4] 4189 1$:     RET          
                                   4190     
                                   4191 ;----------------------------------
                                   4192 ; runtime for DCONST 
                                   4193 ; stack double constant 
                                   4194 ; DO-DCONST ( -- d )
                                   4195 ;-----------------------------------
      0018E4 18 BA                 4196         .word LINK 
                           0018E6  4197         LINK=.
      0018E6 09                    4198         .byte 9 
      0018E7 44 4F 2D 44 43 4F 4E  4199         .ascii "DO-DCONST"
             53 54
      0018F0                       4200 DO_DCONST:
      0018F0 90 85            [ 2] 4201     popw y 
      0018F2 90 BF 28         [ 2] 4202     ldw YTEMP,y 
      0018F5 1D 00 04         [ 2] 4203     subw x,#2*CELLL 
      0018F8 90 FE            [ 2] 4204     ldw y,(y)
      0018FA FF               [ 2] 4205     ldw (x),y 
      0018FB 90 BE 28         [ 2] 4206     ldw y,YTEMP 
      0018FE 90 EE 02         [ 2] 4207     ldw y,(2,y)
      001901 EF 02            [ 2] 4208     ldw (2,x),y 
      001903 81               [ 4] 4209     ret 
                                   4210 
                                   4211 ;; Tools
                                   4212 
                                   4213 ;       _TYPE   ( b u -- )
                                   4214 ;       Display a string. Filter
                                   4215 ;       non-printing characters.
      001904 18 E6                 4216         .word      LINK
                           001906  4217 LINK = . 
      001906 05                    4218         .byte      5
      001907 5F 54 59 50 45        4219         .ascii     "_TYPE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00190C                       4220 UTYPE:
      00190C CD 05 67         [ 4] 4221         CALL     TOR     ;start count down loop
      00190F 20 0F            [ 2] 4222         JRA     UTYP2   ;skip first pass
      001911 CD 05 9E         [ 4] 4223 UTYP1:  CALL     DUPP
      001914 CD 05 15         [ 4] 4224         CALL     CAT
      001917 CD 0B 0F         [ 4] 4225         CALL     TCHAR
      00191A CD 04 38         [ 4] 4226         CALL     EMIT    ;display only printable
      00191D CD 0A 79         [ 4] 4227         CALL     ONEP    ;increment address
      001920 CD 04 8D         [ 4] 4228 UTYP2:  CALL     DONXT
      001923 19 11                 4229         .word      UTYP1   ;loop till done
      001925 CC 05 94         [ 2] 4230         JP     DROP
                                   4231 
                                   4232 ;       dm+     ( a u -- a )
                                   4233 ;       Dump u bytes from ,
                                   4234 ;       leaving a+u on  stack.
      001928 19 06                 4235         .word      LINK
                           00192A  4236 LINK = . 
      00192A 03                    4237         .byte      3
      00192B 64 6D 2B              4238         .ascii     "dm+"
      00192E                       4239 DUMPP:
      00192E CD 05 C8         [ 4] 4240         CALL     OVER
      001931 CD 04 79         [ 4] 4241         CALL     DOLIT
      001934 00 04                 4242         .word      4
      001936 CD 0F B3         [ 4] 4243         CALL     UDOTR   ;display address
      001939 CD 0F 03         [ 4] 4244         CALL     SPACE
      00193C CD 05 67         [ 4] 4245         CALL     TOR     ;start count down loop
      00193F 20 11            [ 2] 4246         JRA     PDUM2   ;skip first pass
      001941 CD 05 9E         [ 4] 4247 PDUM1:  CALL     DUPP
      001944 CD 05 15         [ 4] 4248         CALL     CAT
      001947 CD 04 79         [ 4] 4249         CALL     DOLIT
      00194A 00 03                 4250         .word      3
      00194C CD 0F B3         [ 4] 4251         CALL     UDOTR   ;display numeric data
      00194F CD 0A 79         [ 4] 4252         CALL     ONEP    ;increment address
      001952 CD 04 8D         [ 4] 4253 PDUM2:  CALL     DONXT
      001955 19 41                 4254         .word      PDUM1   ;loop till done
      001957 81               [ 4] 4255         RET
                                   4256 
                                   4257 ;       DUMP    ( a u -- )
                                   4258 ;       Dump u bytes from a,
                                   4259 ;       in a formatted manner.
      001958 19 2A                 4260         .word      LINK
                           00195A  4261 LINK = . 
      00195A 04                    4262         .byte      4
      00195B 44 55 4D 50           4263         .ascii     "DUMP"
      00195F                       4264 DUMP:
      00195F CD 06 5B         [ 4] 4265         CALL     BASE
      001962 CD 04 F7         [ 4] 4266         CALL     AT
      001965 CD 05 67         [ 4] 4267         CALL     TOR
      001968 CD 0D 8B         [ 4] 4268         CALL     HEX     ;save radix, set hex
      00196B CD 04 79         [ 4] 4269         CALL     DOLIT
      00196E 00 10                 4270         .word      16
      001970 CD 09 9F         [ 4] 4271         CALL     SLASH   ;change count to lines
      001973 CD 05 67         [ 4] 4272         CALL     TOR     ;start count down loop
      001976 CD 0F 4B         [ 4] 4273 DUMP1:  CALL     CR
      001979 CD 04 79         [ 4] 4274         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00197C 00 10                 4275         .word      16
      00197E CD 07 84         [ 4] 4276         CALL     DDUP
      001981 CD 19 2E         [ 4] 4277         CALL     DUMPP   ;display numeric
      001984 CD 07 59         [ 4] 4278         CALL     ROT
      001987 CD 07 59         [ 4] 4279         CALL     ROT
      00198A CD 0F 03         [ 4] 4280         CALL     SPACE
      00198D CD 0F 03         [ 4] 4281         CALL     SPACE
      001990 CD 19 0C         [ 4] 4282         CALL     UTYPE   ;display printable characters
      001993 CD 04 8D         [ 4] 4283         CALL     DONXT
      001996 19 76                 4284         .word      DUMP1   ;loop till done
      001998 CD 05 94         [ 4] 4285 DUMP3:  CALL     DROP
      00199B CD 05 48         [ 4] 4286         CALL     RFROM
      00199E CD 06 5B         [ 4] 4287         CALL     BASE
      0019A1 CC 04 E0         [ 2] 4288         JP     STORE   ;restore radix
                                   4289 
                                   4290 ;       .S      ( ... -- ... )
                                   4291 ;        Display  contents of stack.
      0019A4 19 5A                 4292         .word      LINK
                           0019A6  4293 LINK = . 
      0019A6 02                    4294         .byte      2
      0019A7 2E 53                 4295         .ascii     ".S"
      0019A9                       4296 DOTS:
      0019A9 CD 0F 4B         [ 4] 4297         CALL     CR
      0019AC CD 0B 27         [ 4] 4298         CALL     DEPTH   ;stack depth
      0019AF CD 05 67         [ 4] 4299         CALL     TOR     ;start count down loop
      0019B2 20 09            [ 2] 4300         JRA     DOTS2   ;skip first pass
      0019B4 CD 05 5B         [ 4] 4301 DOTS1:  CALL     RAT
      0019B7 CD 0B 3E         [ 4] 4302 	CALL     PICK
      0019BA CD 0F E6         [ 4] 4303         CALL     DOT     ;index stack, display contents
      0019BD CD 04 8D         [ 4] 4304 DOTS2:  CALL     DONXT
      0019C0 19 B4                 4305         .word      DOTS1   ;loop till done
      0019C2 CD 0F 8A         [ 4] 4306         CALL     DOTQP
      0019C5 05                    4307         .byte      5
      0019C6 20 3C 73 70 20        4308         .ascii     " <sp "
      0019CB 81               [ 4] 4309         RET
                                   4310 
                                   4311 ;       >NAME   ( ca -- na | F )
                                   4312 ;       Convert code address
                                   4313 ;       to a name address.
      0019CC 19 A6                 4314         .word      LINK
                           0019CE  4315 LINK = . 
      0019CE 05                    4316         .byte      5
      0019CF 3E 4E 41 4D 45        4317         .ascii     ">NAME"
      0019D4                       4318 TNAME:
      0019D4 CD 06 DE         [ 4] 4319         CALL     CNTXT   ;vocabulary link
      0019D7 CD 04 F7         [ 4] 4320 TNAM2:  CALL     AT
      0019DA CD 05 9E         [ 4] 4321         CALL     DUPP    ;?last word in a vocabulary
      0019DD CD 04 AC         [ 4] 4322         CALL     QBRAN
      0019E0 19 FB                 4323         .word      TNAM4
      0019E2 CD 07 84         [ 4] 4324         CALL     DDUP
      0019E5 CD 11 6B         [ 4] 4325         CALL     NAMET
      0019E8 CD 06 13         [ 4] 4326         CALL     XORR    ;compare
      0019EB CD 04 AC         [ 4] 4327         CALL     QBRAN
      0019EE 19 F5                 4328         .word      TNAM3
      0019F0 CD 0A 5D         [ 4] 4329         CALL     CELLM   ;continue with next word
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0019F3 20 E2            [ 2] 4330         JRA     TNAM2
      0019F5 CD 05 AE         [ 4] 4331 TNAM3:  CALL     SWAPP
      0019F8 CC 05 94         [ 2] 4332         JP     DROP
      0019FB CD 07 79         [ 4] 4333 TNAM4:  CALL     DDROP
      0019FE CC 0A E5         [ 2] 4334         JP     ZERO
                                   4335 
                                   4336 ;       .ID     ( na -- )
                                   4337 ;        Display  name at address.
      001A01 19 CE                 4338         .word      LINK
                           001A03  4339 LINK = . 
      001A03 03                    4340         .byte      3
      001A04 2E 49 44              4341         .ascii     ".ID"
      001A07                       4342 DOTID:
      001A07 CD 07 48         [ 4] 4343         CALL     QDUP    ;if zero no name
      001A0A CD 04 AC         [ 4] 4344         CALL     QBRAN
      001A0D 1A 1D                 4345         .word      DOTI1
      001A0F CD 0B BC         [ 4] 4346         CALL     COUNT
      001A12 CD 04 79         [ 4] 4347         CALL     DOLIT
      001A15 00 1F                 4348         .word      0x1F
      001A17 CD 05 EA         [ 4] 4349         CALL     ANDD    ;mask lexicon bits
      001A1A CC 19 0C         [ 2] 4350         JP     UTYPE
      001A1D CD 0F 8A         [ 4] 4351 DOTI1:  CALL     DOTQP
      001A20 09                    4352         .byte      9
      001A21 20 6E 6F 4E 61 6D 65  4353         .ascii     " noName"
      001A28 81               [ 4] 4354         RET
                                   4355 
                           000000  4356 WANT_SEE=0
                           000000  4357 .if WANT_SEE 
                                   4358 ;       SEE     ( -- ; <string> )
                                   4359 ;       A simple decompiler.
                                   4360 ;       Updated for byte machines.
                                   4361         .word      LINK
                                   4362 LINK = . 
                                   4363         .byte      3
                                   4364         .ascii     "SEE"
                                   4365 SEE:
                                   4366         CALL     TICK    ;starting address
                                   4367         CALL     CR
                                   4368         CALL     ONEM
                                   4369 SEE1:   CALL     ONEP
                                   4370         CALL     DUPP
                                   4371         CALL     AT
                                   4372         CALL     DUPP
                                   4373         CALL     QBRAN
                                   4374         .word    SEE2
                                   4375         CALL     TNAME   ;?is it a name
                                   4376 SEE2:   CALL     QDUP    ;name address or zero
                                   4377         CALL     QBRAN
                                   4378         .word    SEE3
                                   4379         CALL     SPACE
                                   4380         CALL     DOTID   ;display name
                                   4381         CALL     ONEP
                                   4382         JRA      SEE4
                                   4383 SEE3:   CALL     DUPP
                                   4384         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4385         CALL     UDOT    ;display number
                                   4386 SEE4:   CALL     NUFQ    ;user control
                                   4387         CALL     QBRAN
                                   4388         .word    SEE1
                                   4389         JP     DROP
                                   4390 .endif ; WANT_SEE 
                                   4391 
                                   4392 ;       WORDS   ( -- )
                                   4393 ;       Display names in vocabulary.
      001A29 1A 03                 4394         .word      LINK
                           001A2B  4395 LINK = . 
      001A2B 05                    4396         .byte      5
      001A2C 57 4F 52 44 53        4397         .ascii     "WORDS"
      001A31                       4398 WORDS:
      001A31 CD 0F 4B         [ 4] 4399         CALL     CR
      001A34 CD 06 DE         [ 4] 4400         CALL     CNTXT   ;only in context
      001A37 CD 04 F7         [ 4] 4401 WORS1:  CALL     AT
      001A3A CD 07 48         [ 4] 4402         CALL     QDUP    ;?at end of list
      001A3D CD 04 AC         [ 4] 4403         CALL     QBRAN
      001A40 1A 53                 4404         .word      WORS2
      001A42 CD 05 9E         [ 4] 4405         CALL     DUPP
      001A45 CD 0F 03         [ 4] 4406         CALL     SPACE
      001A48 CD 1A 07         [ 4] 4407         CALL     DOTID   ;display a name
      001A4B CD 0A 5D         [ 4] 4408         CALL     CELLM
      001A4E CD 04 C3         [ 4] 4409         CALL     BRAN
      001A51 1A 37                 4410         .word      WORS1
      001A53 81               [ 4] 4411 WORS2:  RET
                                   4412 
                                   4413         
                                   4414 ;; Hardware reset
                                   4415 
                                   4416 ;       hi      ( -- )
                                   4417 ;       Display sign-on message.
      001A54 1A 2B                 4418         .word      LINK
                           001A56  4419 LINK = . 
      001A56 02                    4420         .byte      2
      001A57 68 69                 4421         .ascii     "hi"
      001A59                       4422 HI:
      001A59 CD 0F 4B         [ 4] 4423         CALL     CR
      001A5C CD 0F 8A         [ 4] 4424         CALL     DOTQP   ;initialize I/O
      001A5F 0F                    4425         .byte      15
      001A60 73 74 6D 38 65 46 6F  4426         .ascii     "stm8eForth v"
             72 74 68 20 76
      001A6C 33                    4427 	.byte      VER+'0'
      001A6D 2E                    4428         .byte      '.' 
      001A6E 30                    4429 	.byte      EXT+'0' ;version
      001A6F CD 0F 8A         [ 4] 4430         CALL    DOTQP
                           000001  4431 .if NUCLEO          
      001A72 12                    4432         .byte 18
      001A73 20 6F 6E 20 4E 55 43  4433         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4434 .endif
                           000000  4435 .if DISCOVERY
                                   4436         .byte 19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437         .ascii  " on STM8S-DISCOVERY"
                                   4438 .endif
                           000000  4439 .if DOORBELL
                                   4440         .byte 16
                                   4441         .ascii " on stm8s105k6b6"
                                   4442 .endif
      001A85 CC 0F 4B         [ 2] 4443         JP     CR
                                   4444 
                           000000  4445 WANT_DEBUG=0
                           000000  4446 .if WANT_DEBUG 
                                   4447 ;       DEBUG      ( -- )
                                   4448 ;       Display sign-on message.
                                   4449 ;        .word      LINK
                                   4450 LINK = . 
                                   4451         .byte      5
                                   4452         .ascii     "DEBUG"
                                   4453 DEBUG:
                                   4454 	CALL DOLIT
                                   4455 	.word 0x65
                                   4456 	CALL EMIT
                                   4457 	CALL DOLIT
                                   4458 	.word 0
                                   4459  	CALL ZLESS 
                                   4460 	CALL DOLIT
                                   4461 	.word 0xFFFE
                                   4462 	CALL ZLESS 
                                   4463 	CALL UPLUS 
                                   4464  	CALL DROP 
                                   4465 	CALL DOLIT
                                   4466 	.word 3
                                   4467 	CALL UPLUS 
                                   4468 	CALL UPLUS 
                                   4469  	CALL DROP
                                   4470 	CALL DOLIT
                                   4471 	.word 0x43
                                   4472 	CALL UPLUS 
                                   4473  	CALL DROP
                                   4474 	CALL EMIT
                                   4475 	CALL DOLIT
                                   4476 	.word 0x4F
                                   4477 	CALL DOLIT
                                   4478 	.word 0x6F
                                   4479  	CALL XORR
                                   4480 	CALL DOLIT
                                   4481 	.word 0xF0
                                   4482  	CALL ANDD
                                   4483 	CALL DOLIT
                                   4484 	.word 0x4F
                                   4485  	CALL ORR
                                   4486 	CALL EMIT
                                   4487 	CALL DOLIT
                                   4488 	.word 8
                                   4489 	CALL DOLIT
                                   4490 	.word 6
                                   4491  	CALL SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4492 	CALL OVER
                                   4493 	CALL XORR
                                   4494 	CALL DOLIT
                                   4495 	.word 3
                                   4496 	CALL ANDD 
                                   4497 	CALL ANDD
                                   4498 	CALL DOLIT
                                   4499 	.word 0x70
                                   4500 	CALL UPLUS 
                                   4501 	CALL DROP
                                   4502 	CALL EMIT
                                   4503 	CALL DOLIT
                                   4504 	.word 0
                                   4505 	CALL QBRAN
                                   4506 	.word DEBUG1
                                   4507 	CALL DOLIT
                                   4508 	.word 0x3F
                                   4509 DEBUG1:
                                   4510 	CALL DOLIT
                                   4511 	.word 0xFFFF
                                   4512 	CALL QBRAN
                                   4513 	.word DEBUG2
                                   4514 	CALL DOLIT
                                   4515 	.word 0x74
                                   4516 	CALL BRAN
                                   4517 	.word DEBUG3
                                   4518 DEBUG2:
                                   4519 	CALL DOLIT
                                   4520 	.word 0x21
                                   4521 DEBUG3:
                                   4522 	CALL EMIT
                                   4523 	CALL DOLIT
                                   4524 	.word 0x68
                                   4525 	CALL DOLIT
                                   4526 	.word 0x80
                                   4527 	CALL STORE
                                   4528 	CALL DOLIT
                                   4529 	.word 0x80
                                   4530 	CALL AT
                                   4531 	CALL EMIT
                                   4532 	CALL DOLIT
                                   4533 	.word 0x4D
                                   4534 	CALL TOR
                                   4535 	CALL RAT
                                   4536 	CALL RFROM
                                   4537 	CALL ANDD
                                   4538 	CALL EMIT
                                   4539 	CALL DOLIT
                                   4540 	.word 0x61
                                   4541 	CALL DOLIT
                                   4542 	.word 0xA
                                   4543 	CALL TOR
                                   4544 DEBUG4:
                                   4545 	CALL DOLIT
                                   4546 	.word 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4547 	CALL UPLUS 
                                   4548 	CALL DROP
                                   4549 	CALL DONXT
                                   4550 	.word DEBUG4
                                   4551 	CALL EMIT
                                   4552 	CALL DOLIT
                                   4553 	.word 0x656D
                                   4554 	CALL DOLIT
                                   4555 	.word 0x100
                                   4556 	CALL UMSTA
                                   4557 	CALL SWAPP
                                   4558 	CALL DOLIT
                                   4559 	.word 0x100
                                   4560 	CALL UMSTA
                                   4561 	CALL SWAPP 
                                   4562 	CALL DROP
                                   4563 	CALL EMIT
                                   4564 	CALL EMIT
                                   4565 	CALL DOLIT
                                   4566 	.word 0x2043
                                   4567 	CALL DOLIT
                                   4568 	.word 0
                                   4569 	CALL DOLIT
                                   4570 	.word 0x100
                                   4571 	CALL UMMOD
                                   4572 	CALL EMIT
                                   4573 	CALL EMIT
                                   4574 	;JP ORIG
                                   4575 	RET
                                   4576 .endif ; WANT_DEBUG 
                                   4577 
                                   4578 
                                   4579 ;       'BOOT   ( -- a )
                                   4580 ;       The application startup vector.
      001A88 1A 56                 4581         .word      LINK
                           001A8A  4582 LINK = . 
      001A8A 05                    4583         .byte      5
      001A8B 27 42 4F 4F 54        4584         .ascii     "'BOOT"
      001A90                       4585 TBOOT:
      001A90 CD 06 4B         [ 4] 4586         CALL     DOVAR
      001A93 40 02                 4587         .word    APP_RUN      ;application to boot
                                   4588 
                                   4589 ;       COLD    ( -- )
                                   4590 ;       The hilevel cold start s=ence.
      001A95 1A 8A                 4591         .word      LINK
                           001A97  4592         LINK = . 
      001A97 04                    4593         .byte      4
      001A98 43 4F 4C 44           4594         .ascii     "COLD"
      001A9C                       4595 COLD:
                           000000  4596 .if WANT_DEBUG
                                   4597         CALL DEBUG
                                   4598 .endif ; WANT_DEBUG
      001A9C CD 04 79         [ 4] 4599 COLD1:  CALL     DOLIT
      001A9F 00 2B                 4600         .word      UZERO
      001AA1 CD 04 79         [ 4] 4601 	CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001AA4 00 06                 4602         .word      UPP
      001AA6 CD 04 79         [ 4] 4603         CALL     DOLIT
      001AA9 00 1E                 4604 	.word      UEND-UZERO
      001AAB CD 0C 20         [ 4] 4605         CALL     CMOVE   ;initialize user area
                           000001  4606 .if WANT_FLOAT 
      001AAE CD 24 18         [ 4] 4607         CALL    FINIT 
                                   4608 .endif 
                                   4609 ; if APP_RUN==0 initialize with ca de 'hi'  
      001AB1 90 CE 40 02      [ 2] 4610         ldw y,APP_RUN 
      001AB5 26 0B            [ 1] 4611         jrne 0$
      001AB7 1D 00 02         [ 2] 4612         subw x,#CELLL 
      001ABA 90 AE 1A 59      [ 2] 4613         ldw y,#HI  
      001ABE FF               [ 2] 4614         ldw (x),y
      001ABF CD 1B BA         [ 4] 4615         call UPDATRUN 
      001AC2                       4616 0$:        
                                   4617 ; update LAST with APP_LAST 
                                   4618 ; if APP_LAST > LAST else do the opposite
      001AC2 90 CE 40 00      [ 2] 4619         ldw y,APP_LAST 
      001AC6 90 B3 1E         [ 2] 4620         cpw y,ULAST 
      001AC9 22 05            [ 1] 4621         jrugt 1$ 
                                   4622 ; save LAST at APP_LAST  
      001ACB CD 1B A2         [ 4] 4623         call UPDATLAST 
      001ACE 20 06            [ 2] 4624         jra 2$
      001AD0                       4625 1$: ; update LAST with APP_LAST 
      001AD0 90 BF 1E         [ 2] 4626         ldw ULAST,y
      001AD3 90 BF 18         [ 2] 4627         ldw UCNTXT,y
      001AD6                       4628 2$:  
                                   4629 ; update APP_CP if < app_space 
      001AD6 90 CE 40 04      [ 2] 4630         ldw y,APP_CP  
      001ADA 90 B3 1C         [ 2] 4631         cpw y,UCP   
      001ADD 24 06            [ 1] 4632         jruge 3$ 
      001ADF CD 1B CB         [ 4] 4633         call UPDATCP
      001AE2 90 BE 1C         [ 2] 4634         ldw y,UCP   
      001AE5                       4635 3$:
      001AE5 90 BF 1C         [ 2] 4636         ldw UCP,y                 
                                   4637 ; update UVP with APP_VP  
                                   4638 ; if APP_VP>UVP else do the opposite 
      001AE8 90 CE 40 06      [ 2] 4639         ldw y,APP_VP 
      001AEC 90 B3 1A         [ 2] 4640         cpw y,UVP 
      001AEF 22 05            [ 1] 4641         jrugt 4$
      001AF1 CD 1B E2         [ 4] 4642         call UPDATVP 
      001AF4 20 03            [ 2] 4643         jra 6$
      001AF6                       4644 4$: ; update UVP with APP_VP 
      001AF6 90 BF 1A         [ 2] 4645         ldw UVP,y 
      001AF9                       4646 6$:      
      001AF9 CD 14 4E         [ 4] 4647         CALL     PRESE   ;initialize data stack and TIB
      001AFC CD 1A 90         [ 4] 4648         CALL     TBOOT
      001AFF CD 0C 09         [ 4] 4649         CALL     ATEXE   ;application boot
      001B02 CD 17 17         [ 4] 4650         CALL     OVERT
      001B05 CC 14 6B         [ 2] 4651         JP     QUIT    ;start interpretation
                                   4652 
                                   4653 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4654         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001B08 1A 97                   30     .word LINK 
                           001B0A    31     LINK=.
      001B0A 03                      32     .byte 3 
      001B0B 46 50 21                33     .ascii "FP!"
      001B0E                         34 FPSTOR:
      001B0E 90 93            [ 1]   35     ldw y,x
      001B10 90 FE            [ 2]   36     ldw y,(y)
      001B12 90 9F            [ 1]   37     ld a,yl 
      001B14 B7 36            [ 1]   38     ld FPTR,a 
      001B16 1C 00 02         [ 2]   39     addw x,#CELLL 
      001B19 90 93            [ 1]   40     ldw y,x 
      001B1B 90 FE            [ 2]   41     ldw y,(y)
      001B1D 90 BF 37         [ 2]   42     ldw PTR16,y
      001B20 1C 00 02         [ 2]   43     addw x,#CELLL 
      001B23 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001B24 1B 0A                   51     .word LINK 
                           001B26    52 LINK=.
      001B26 06                      53     .byte 6 
      001B27 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B2D                         55 EEPROM: 
      001B2D 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001B31 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001B34 EF 02            [ 2]   58     ldw (2,x),y 
      001B36 90 5F            [ 1]   59     clrw y 
      001B38 FF               [ 2]   60     ldw (x),y 
      001B39 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001B3A 1B 26                   67 	.word LINK 
                           001B3C    68 	LINK=.
      001B3C 08                      69 	.byte 8 
      001B3D 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001B45                         71 EEPLAST:
      001B45 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001B48 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001B4C EF 02            [ 2]   74 	ldw (2,x),y 
      001B4E 90 5F            [ 1]   75 	clrw y 
      001B50 FF               [ 2]   76 	ldw (x),y 
      001B51 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001B52 1B 3C                   83 	.word LINK 
                           001B54    84 	LINK=.
      001B54 07                      85 	.byte 7
      001B55 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B5C                         87 EEPRUN:
      001B5C 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B5F 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B63 EF 02            [ 2]   90 	ldw (2,x),y 
      001B65 90 5F            [ 1]   91 	clrw y 
      001B67 FF               [ 2]   92 	ldw (x),y 
      001B68 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B69 1B 54                   99 	.word LINK
                           001B6B   100 	LINK=.
      001B6B 06                     101 	.byte 6 
      001B6C 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B72                        103 EEPCP:
      001B72 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B75 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B79 EF 02            [ 2]  106 	ldw (2,x),y 
      001B7B 90 5F            [ 1]  107 	clrw y 
      001B7D FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B7E 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B7F 1B 6B                  115 	.word LINK
                           001B81   116 	LINK=.
      001B81 06                     117 	.byte 6
      001B82 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B88                        119 EEPVP:
      001B88 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B8B 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B8F EF 02            [ 2]  122 	ldw (2,x),y 
      001B91 90 5F            [ 1]  123 	clrw y 
      001B93 FF               [ 2]  124 	ldw (x),y 
      001B94 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B95 1B 81                  131 	.word LINK 
                           001B97   132 	LINK=.
      001B97 0A                     133 	.byte 10
      001B98 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001BA2                        135 UPDATLAST:
      001BA2 CD 07 0A         [ 4]  136 	call LAST
      001BA5 CD 04 F7         [ 4]  137 	call AT  
      001BA8 CD 1B 45         [ 4]  138 	call EEPLAST
      001BAB CC 1D 98         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001BAE 1B 97                  145 	.word LINK
                           001BB0   146 	LINK=.
      001BB0 09                     147 	.byte 9
      001BB1 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001BBA                        149 UPDATRUN:
      001BBA CD 1B 5C         [ 4]  150 	call EEPRUN
      001BBD CC 1D 98         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001BC0 1B B0                  157 	.word LINK 
                           001BC2   158 	LINK=.
      001BC2 08                     159 	.byte 8 
      001BC3 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001BCB                        161 UPDATCP:
      001BCB CD 06 FA         [ 4]  162 	call CPP 
      001BCE CD 04 F7         [ 4]  163 	call AT 
      001BD1 CD 1B 72         [ 4]  164 	call EEPCP 
      001BD4 CC 1D 98         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001BD7 1B C2                  171 	.word LINK
                           001BD9   172 	LINK=.
      001BD9 08                     173 	.byte 8 
      001BDA 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001BE2                        175 UPDATVP:
      001BE2 CD 06 EC         [ 4]  176 	call VPP 
      001BE5 CD 04 F7         [ 4]  177 	call AT
      001BE8 CD 1B 88         [ 4]  178 	call EEPVP 
      001BEB CC 1D 98         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001BEE 1B D9                  186     .word LINK 
                           001BF0   187 LINK=.
      001BF0 02                     188     .byte 2
      001BF1 46 40                  189     .ascii "F@"
      001BF3                        190 FARAT:
      001BF3 CD 1B 0E         [ 4]  191     call FPSTOR
      001BF6 CC 1C BB         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001BF9 1B F0                  199     .word LINK
                           001BFB   200     LINK=.
      001BFB 03                     201     .byte 3 
      001BFC 46 43 40               202     .ascii "FC@" 
      001BFF                        203 FARCAT:
      001BFF CD 1B 0E         [ 4]  204     call FPSTOR
      001C02 CC 1C DD         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001C05 1B FB                  213     .word LINK 
                           001C07   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001C07 06                     215     .byte 6 
      001C08 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001C0E                        217 UNLKEE:
      001C0E 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001C12 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001C16 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001C1A 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001C1E 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001C23 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001C24 1C 07                  230     .word LINK 
                           001C26   231 LINK=. 
      001C26 06                     232     .byte 6 
      001C27 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001C2D                        234 UNLKFL:
      001C2D 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001C31 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001C35 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001C39 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C3D 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C42 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001C43 1C 26                  247 	.word LINK 
                           001C45   248 	LINK=.
      001C45 06                     249 	.byte 6
      001C46 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001C4C                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001C4C 90 BE 37         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C4F 3D 36            [ 1]  255 	tnz FPTR 
      001C51 26 16            [ 1]  256 	jrne 4$
      001C53 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001C57 24 10            [ 1]  258     jruge 4$
      001C59 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001C5D 25 0D            [ 1]  260     jrult 9$
      001C5F 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001C63 22 07            [ 1]  262 	jrugt 9$
      001C65 CD 1C 0E         [ 4]  263 	call UNLKEE
      001C68 81               [ 4]  264 	ret 
      001C69 CD 1C 2D         [ 4]  265 4$: call UNLKFL
      001C6C 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001C6D 1C 45                  273 	.word LINK 
                           001C6F   274 	LINK=.
      001C6F 04                     275 	.byte 4 
      001C70 4C 4F 43 4B            276 	.ascii "LOCK" 
      001C74                        277 LOCK: 
      001C74 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C78 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C7C 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001C7D 1C 6F                  286 	.word LINK 
                           001C7F   287 	LINK=. 
      001C7F 08                     288 	.byte 8 
      001C80 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001C88                        290 INC_FPTR:
      001C88 3C 38            [ 1]  291 	inc PTR8 
      001C8A 26 0C            [ 1]  292 	jrne 1$
      001C8C 90 89            [ 2]  293 	pushw y 
      001C8E 90 BE 36         [ 2]  294 	ldw y,FPTR 
      001C91 90 5C            [ 1]  295 	incw y 
      001C93 90 BF 36         [ 2]  296 	ldw FPTR,y
      001C96 90 85            [ 2]  297 	popw y  
      001C98 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001C99 1C 7F                  304 	.word LINK 
                           001C9B   305 	LINK=.
      001C9B 04                     306 	.byte 4 
      001C9C 50 54 52 2B            307 	.ascii "PTR+"
      001CA0                        308 PTRPLUS:
      001CA0 90 93            [ 1]  309 	ldw y,x 
      001CA2 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001CA5 72 B9 00 37      [ 2]  311 	addw y,PTR16 
      001CA9 90 BF 37         [ 2]  312 	ldw PTR16,y  
      001CAC 24 02            [ 1]  313 	jrnc 1$
      001CAE 3C 36            [ 1]  314 	inc FPTR 
      001CB0 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001CB1 1C 9B                  322 	.word LINK 
                           001CB3   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CB3 07                     324 	.byte 7 
      001CB4 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001CBB                        326 EE_READ:
      001CBB 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001CBE 92 BC 00 36      [ 5]  328 	ldf a,[FPTR]
      001CC2 90 95            [ 1]  329 	ld yh,a 
      001CC4 CD 1C 88         [ 4]  330 	call INC_FPTR 
      001CC7 92 BC 00 36      [ 5]  331 	ldf a,[FPTR]
      001CCB CD 1C 88         [ 4]  332 	call INC_FPTR 
      001CCE 90 97            [ 1]  333 	ld yl,a 
      001CD0 FF               [ 2]  334 	ldw (x),y 
      001CD1 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001CD2 1C B3                  341 	.word LINK 
                           001CD4   342 	LINK=.
      001CD4 08                     343 	.byte 8
      001CD5 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001CDD                        345 EE_CREAD:
      001CDD 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001CE0 92 BC 00 36      [ 5]  347 	ldf a,[FPTR]	
      001CE4 CD 1C 88         [ 4]  348 	call INC_FPTR
      001CE7 90 5F            [ 1]  349 	clrw y 
      001CE9 90 97            [ 1]  350 	ld yl,a 
      001CEB FF               [ 2]  351 	ldw (x),y 
      001CEC 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001CED 1C D4                  361 	.word LINK 
                           001CEF   362 	LINK=. 
      001CEF 07                     363 	.byte 7 
      001CF0 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001CF7                        366 WR_BYTE:
      001CF7 CD 04 65         [ 4]  367 	call FC_XOFF
      001CFA 90 93            [ 1]  368 	ldw y,x 
      001CFC 90 FE            [ 2]  369 	ldw y,(y)
      001CFE 1C 00 02         [ 2]  370 	addw x,#CELLL 
      001D01 90 9F            [ 1]  371 	ld a,yl
      001D03 92 BD 00 36      [ 4]  372 	ldf [FPTR],a
      001D07 72 05 50 5F FB   [ 2]  373 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D0C CD 04 4F         [ 4]  374 	call FC_XON
      001D0F CC 1C 88         [ 2]  375 	jp INC_FPTR 
                                    376 
                                    377 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    378 ; write a word at address pointed 
                                    379 ; by FPTR and increment FPTR 
                                    380 ; Expect pointer already initialzed 
                                    381 ; and memory unlocked 
                                    382 ; WR-WORD ( w -- )
                                    383 ;---------------------------------------
      001D12 1C EF                  384 	.word LINK 
                           001D14   385 	LINK=.
      001D14 07                     386 	.byte 7 
      001D15 57 52 2D 57 4F 52 44   387 	.ascii "WR-WORD" 
      001D1C                        388 WR_WORD:
      001D1C CD 04 65         [ 4]  389 	call FC_XOFF
      001D1F 90 93            [ 1]  390 	ldw y,x
      001D21 90 FE            [ 2]  391 	ldw y,(y)
      001D23 1C 00 02         [ 2]  392 	addw x,#CELLL 
      001D26 90 9E            [ 1]  393 	ld a,yh 
      001D28 92 BD 00 36      [ 4]  394 	ldf [FPTR],a
      001D2C 72 05 50 5F FB   [ 2]  395 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D31 CD 1C 88         [ 4]  396 	call INC_FPTR 
      001D34 90 9F            [ 1]  397 	ld a,yl 
      001D36 92 BD 00 36      [ 4]  398 	ldf [FPTR],a
      001D3A 72 05 50 5F FB   [ 2]  399 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D3F CD 04 4F         [ 4]  400 	call FC_XON
      001D42 CC 1C 88         [ 2]  401 	jp INC_FPTR 
                                    402 
                                    403 
                                    404 ;---------------------------------------
                                    405 ; write a byte to FLASH or EEPROM/OPTION  
                                    406 ; EEC!  (c ud -- )
                                    407 ;---------------------------------------
      001D45 1D 14                  408     .word LINK 
                           001D47   409 	LINK=.
      001D47 04                     410     .byte 4 
      001D48 45 45 43 21            411     .ascii "EEC!"
                                    412 	; local variables 
                           000001   413 	BTW = 1   ; byte to write offset on stack
                           000002   414     OPT = 2 
                           000002   415 	VSIZE = 2
      001D4C                        416 EECSTORE:
      001D4C 52 02            [ 2]  417 	sub sp,#VSIZE
      001D4E CD 1B 0E         [ 4]  418     call FPSTOR
      001D51 E6 01            [ 1]  419 	ld a,(1,x)
      001D53 43               [ 1]  420 	cpl a 
      001D54 6B 01            [ 1]  421 	ld (BTW,sp),a ; byte to write 
      001D56 0F 02            [ 1]  422 	clr (OPT,sp)  ; OPTION flag
      001D58 CD 1C 4C         [ 4]  423 	call UNLOCK 
                                    424 	; check if option
      001D5B 3D 36            [ 1]  425 	tnz FPTR 
      001D5D 26 19            [ 1]  426 	jrne 2$
      001D5F 90 BE 37         [ 2]  427 	ldw y,PTR16 
      001D62 90 A3 48 00      [ 2]  428 	cpw y,#OPTION_BASE
      001D66 2B 10            [ 1]  429 	jrmi 2$
      001D68 90 A3 48 80      [ 2]  430 	cpw y,#OPTION_END+1
      001D6C 2A 0A            [ 1]  431 	jrpl 2$
      001D6E 03 02            [ 1]  432 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    433 	; OPTION WRITE require this UNLOCK 
      001D70 72 1E 50 5B      [ 1]  434     bset FLASH_CR2,#FLASH_CR2_OPT
      001D74 72 1F 50 5C      [ 1]  435     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001D78                        436 2$: 
      001D78 CD 1C F7         [ 4]  437 	call WR_BYTE 	
      001D7B 0D 02            [ 1]  438 	tnz (OPT,sp)
      001D7D 27 0D            [ 1]  439 	jreq 3$ 
      001D7F 7B 01            [ 1]  440     ld a,(BTW,sp)
      001D81 90 5F            [ 1]  441     clrw y
      001D83 90 97            [ 1]  442 	ld yl,a 
      001D85 1D 00 02         [ 2]  443 	subw x,#CELLL 
      001D88 FF               [ 2]  444 	ldw (x),y 
      001D89 CD 1C F7         [ 4]  445 	call WR_BYTE
      001D8C                        446 3$: 
      001D8C CD 1C 74         [ 4]  447 	call LOCK 
      001D8F 5B 02            [ 2]  448 	addw sp,#VSIZE 
      001D91 81               [ 4]  449     ret
                                    450 
                                    451 ;------------------------------
                                    452 ; write integer in FLASH|EEPROM
                                    453 ; EE! ( n ud -- )
                                    454 ;------------------------------
      001D92 1D 47                  455 	.word LINK 
                           001D94   456 	LINK=.
      001D94 03                     457 	.byte 3 
      001D95 45 45 21               458 	.ascii "EE!"
      001D98                        459 EESTORE:
      001D98 CD 1B 0E         [ 4]  460 	call FPSTOR 
      001D9B CD 1C 4C         [ 4]  461 	call UNLOCK 
      001D9E 90 93            [ 1]  462 	ldw y,x 
      001DA0 90 FE            [ 2]  463 	ldw y,(y)
      001DA2 90 89            [ 2]  464 	pushw y 
      001DA4 90 5E            [ 1]  465 	swapw y 
      001DA6 FF               [ 2]  466 	ldw (x),y 
      001DA7 CD 1C F7         [ 4]  467 	call WR_BYTE 
      001DAA 90 85            [ 2]  468 	popw y 
      001DAC 1D 00 02         [ 2]  469 	subw x,#CELLL
      001DAF FF               [ 2]  470 	ldw (x),y 
      001DB0 CD 1C F7         [ 4]  471 	call WR_BYTE
      001DB3 CC 1C 74         [ 2]  472 	jp LOCK 
                                    473 
                                    474 
                                    475 ;----------------------------
                                    476 ; Erase flash memory row 
                                    477 ; stm8s208 as 128 bytes rows
                                    478 ; ROW-ERASE ( ud -- )
                                    479 ;----------------------------
      001DB6 1D 94                  480 	.word LINK 
                           001DB8   481 	LINK=. 
      001DB8 09                     482 	.byte 9 
      001DB9 52 4F 57 2D 45 52 41   483 	.ascii "ROW-ERASE" 
             53 45
      001DC2                        484 row_erase:
      001DC2 CD 04 65         [ 4]  485 	call FC_XOFF
      001DC5 CD 1B 0E         [ 4]  486 	call FPSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    487 ;code must be execute from RAM 
                                    488 ;copy routine to PAD 
      001DC8 1D 00 02         [ 2]  489 	subw x,#CELLL 
      001DCB 90 AE 1E 1B      [ 2]  490 	ldw y,#row_erase_proc
      001DCF FF               [ 2]  491 	ldw (x),y 
      001DD0 CD 0B E4         [ 4]  492 	call PAD 
      001DD3 90 AE 1E 42      [ 2]  493 	ldw y,#row_erase_proc_end 
      001DD7 72 A2 1E 1B      [ 2]  494 	subw y,#row_erase_proc
      001DDB 1D 00 02         [ 2]  495 	subw x,#CELLL 
      001DDE FF               [ 2]  496 	ldw (x),y 
      001DDF CD 0C 20         [ 4]  497 	call CMOVE 
      001DE2                        498 block_erase:
      001DE2 90 BE 37         [ 2]  499 	ldw y,FPTR+1
      001DE5 90 A3 27 80      [ 2]  500 	cpw y,#app_space 
      001DE9 2A 19            [ 1]  501 	jrpl erase_flash 
                                    502 ; erase EEPROM block
      001DEB 90 A3 40 00      [ 2]  503 	cpw y,#EEPROM_BASE 
      001DEF 24 04            [ 1]  504 	jruge 1$
      001DF1 CD 04 4F         [ 4]  505 	call FC_XON
      001DF4 81               [ 4]  506 	ret ; bad address 
      001DF5 90 A3 47 FF      [ 2]  507 1$: cpw y,#EEPROM_END 
      001DF9 23 04            [ 2]  508 	jrule 2$ 
      001DFB CD 04 4F         [ 4]  509 	call FC_XON
      001DFE 81               [ 4]  510 	ret ; bad address 
      001DFF                        511 2$:	
      001DFF CD 1C 0E         [ 4]  512 	call UNLKEE 
      001E02 20 03            [ 2]  513 	jra proceed_erase
                                    514 ; erase flash block:
      001E04                        515 erase_flash:
      001E04 CD 1C 2D         [ 4]  516 	call UNLKFL 
      001E07                        517 proceed_erase:
      001E07 CD 0B E4         [ 4]  518 	call PAD 
      001E0A 90 93            [ 1]  519 	ldw y,x
      001E0C 90 FE            [ 2]  520 	ldw y,(y)
      001E0E 1C 00 02         [ 2]  521 	addw x,#CELLL  
      001E11 90 FD            [ 4]  522 	call (y) 
      001E13 72 17 50 5F      [ 1]  523 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001E17 CD 04 4F         [ 4]  524 	call FC_XON
      001E1A 81               [ 4]  525 	ret 
                                    526 
                                    527 ; this routine is to be copied to PAD 
      001E1B                        528 row_erase_proc:
      001E1B 35 20 50 5B      [ 1]  529 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001E1F 35 DF 50 5C      [ 1]  530 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001E23 4F               [ 1]  531 	clr a 
      001E24 90 5F            [ 1]  532 	clrw y 
      001E26 91 A7 00 36      [ 1]  533 	ldf ([FPTR],y),a
      001E2A 90 5C            [ 1]  534     incw y
      001E2C 91 A7 00 36      [ 1]  535 	ldf ([FPTR],y),a
      001E30 90 5C            [ 1]  536     incw y
      001E32 91 A7 00 36      [ 1]  537 	ldf ([FPTR],y),a
      001E36 90 5C            [ 1]  538     incw y
      001E38 91 A7 00 36      [ 1]  539 	ldf ([FPTR],y),a
      001E3C 72 05 50 5F FB   [ 2]  540 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001E41 81               [ 4]  541 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E42                        542 row_erase_proc_end:
                                    543 
                                    544 
                                    545 ;-----------------------------------
                                    546 ; block programming must be 
                                    547 ; executed from RAM 
                                    548 ; initial contidions: 
                                    549 ; 		memory unlocked
                                    550 ;       FPTR initialized 
                                    551 ; input: 
                                    552 ;    x   buffer address 
                                    553 ;-----------------------------------
                           000001   554 	BCNT=1 
      001E42                        555 copy_buffer:
      001E42 4B 80            [ 1]  556 	push #BLOCK_SIZE  
                                    557 ;enable block programming 
      001E44 72 10 50 5B      [ 1]  558 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001E48 72 11 50 5C      [ 1]  559 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001E4C 90 5F            [ 1]  560 	clrw y
      001E4E F6               [ 1]  561 1$:	ld a,(x)
      001E4F 91 A7 00 36      [ 1]  562 	ldf ([FPTR],y),a
      001E53 5C               [ 1]  563 	incw x 
      001E54 90 5C            [ 1]  564 	incw y 
      001E56 0A 01            [ 1]  565 	dec (BCNT,sp)
      001E58 26 F4            [ 1]  566 	jrne 1$
                                    567 ; wait EOP bit 
      001E5A 72 05 50 5F FB   [ 2]  568 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001E5F 84               [ 1]  569 	pop a ; remove BCNT from stack 
      001E60 81               [ 4]  570 	ret 
      001E61                        571 copy_buffer_end:
                                    572 
                                    573 ;-------------------------
                                    574 ; move program_row to RAM 
                                    575 ; in TIB 
                                    576 ;------------------------
      001E61                        577 copy_prog_to_ram:
      001E61 1D 00 06         [ 2]  578 	subw x,#6
      001E64 90 AE 1E 42      [ 2]  579 	ldw y,#copy_buffer 
      001E68 EF 04            [ 2]  580 	ldw (4,x),y 
      001E6A 90 AE 17 00      [ 2]  581 	ldw y,#TIBBASE
      001E6E EF 02            [ 2]  582 	ldw (2,x),y 
      001E70 90 AE 1E 61      [ 2]  583 	ldw y,#copy_buffer_end 
      001E74 72 A2 1E 42      [ 2]  584 	subw y,#copy_buffer  
      001E78 FF               [ 2]  585 	ldw (x),y 
      001E79 CD 0C 20         [ 4]  586 	call CMOVE 
      001E7C 81               [ 4]  587 	ret 
                                    588 
                                    589 
                                    590 ;-----------------------------
                                    591 ; write a row in FLASH/EEPROM 
                                    592 ; WR-ROW ( a ud -- )
                                    593 ; a -> address 128 byte buffer to write 
                                    594 ; ud ->  row address in FLASH|EEPROM 
                                    595 ;-----------------------------
      001E7D 1D B8                  596 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001E7F   597 	LINK=.
      001E7F 06                     598 	.byte 6 
      001E80 57 52 2D 52 4F 57      599 	.ascii "WR-ROW"
      001E86                        600 write_row:
      001E86 CD 04 65         [ 4]  601 	call FC_XOFF
      001E89 CD 1B 0E         [ 4]  602 	call FPSTOR
                                    603 ; align to FLASH block 
      001E8C A6 80            [ 1]  604 	ld a,#0x80 
      001E8E B4 38            [ 1]  605 	and a,PTR8 
      001E90 B7 38            [ 1]  606 	ld PTR8,a  
      001E92 CD 1E 61         [ 4]  607 	call copy_prog_to_ram
      001E95 CD 1C 4C         [ 4]  608 	call UNLOCK
      001E98 90 93            [ 1]  609 	ldw y,x 
      001E9A 90 FE            [ 2]  610 	ldw y,(y)
      001E9C 1C 00 02         [ 2]  611 	addw x,#CELLL 
      001E9F 89               [ 2]  612 	pushw x 
      001EA0 93               [ 1]  613 	ldw x,y ; buffer address in x 
      001EA1 CD 17 00         [ 4]  614 	call TIBBASE
      001EA4 CD 1C 74         [ 4]  615 	call LOCK
      001EA7 85               [ 2]  616 	popw x 
      001EA8 CD 04 4F         [ 4]  617 	call FC_XON 
      001EAB 81               [ 4]  618 	ret 
                                    619 
                                    620 ;-------------------------------------
                                    621 ; change value of OPTION register 
                                    622 ; SET-OPT (c n -- ) 
                                    623 ; c new value.
                                    624 ; n OPT  number {1..7}
                                    625 ;--------------------------------------
      001EAC 1E 7F                  626 		.word LINK 
                           001EAE   627 		LINK=.
      001EAE 07                     628 		.byte 7 
      001EAF 53 45 54 2D 4F 50 54   629 		.ascii "SET-OPT" 
      001EB6                        630 set_option: 
      001EB6 90 93            [ 1]  631 		ldw y,x 
      001EB8 90 FE            [ 2]  632 		ldw y,(y)
      001EBA 27 06            [ 1]  633 		jreq 1$
      001EBC 90 A3 00 07      [ 2]  634 		cpw y,#7 
      001EC0 23 04            [ 2]  635 		jrule 2$ 
                                    636 ; invalid OPTION number 		
      001EC2 1C 00 04         [ 2]  637 1$:		addw x,#2*CELLL
      001EC5 81               [ 4]  638 		ret
      001EC6 90 58            [ 2]  639 2$:		sllw y 
      001EC8 72 A9 47 FF      [ 2]  640 		addw y,#OPTION_BASE-1
      001ECC FF               [ 2]  641 		ldw (x),y 
      001ECD 1D 00 02         [ 2]  642 		subw x,#CELLL 
      001ED0 90 5F            [ 1]  643 		clrw y 
      001ED2 FF               [ 2]  644 		ldw (x),y 
      001ED3 CD 1D 4C         [ 4]  645 		call EECSTORE
      001ED6 81               [ 4]  646 		ret 
                                    647 
                                    648 
                                    649 
                                    650 ;--------------------------------------
                                    651 ; reset system to its original state 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    652 ; before any user modification
                                    653 ; PRISTINE ( -- )
                                    654 ;-------------------------------------
      001ED7 1E AE                  655 	.word LINK  
                           001ED9   656 	LINK=.
      001ED9 08                     657 	.byte 8 
      001EDA 50 52 49 53 54 49 4E   658 	.ascii "PRISTINE"
             45
      001EE2                        659 pristine:
                                    660 ;;; erase EEPROM
      001EE2 CD 1B 2D         [ 4]  661 	call EEPROM 
      001EE5 CD 07 84         [ 4]  662 1$:	call DDUP 
      001EE8 CD 1D C2         [ 4]  663 	call row_erase
      001EEB 90 93            [ 1]  664 	ldw y,x 
      001EED 90 EE 02         [ 2]  665 	ldw y,(2,y)
      001EF0 72 A9 00 80      [ 2]  666 	addw y,#BLOCK_SIZE
      001EF4 EF 02            [ 2]  667 	ldw (2,x),y
      001EF6 90 A3 48 00      [ 2]  668 	cpw y,#OPTION_BASE 
      001EFA 25 E9            [ 1]  669 	jrult 1$
                                    670 ;;; reset OPTION to default values
      001EFC 90 AE 00 01      [ 2]  671 	ldw y,#1 ; OPT1 
      001F00 FF               [ 2]  672 2$:	ldw (x),y   
      001F01 90 5F            [ 1]  673 	clrw y 
      001F03 EF 02            [ 2]  674 	ldw (2,x),y  ; ( 0 1 -- ) 
      001F05 CD 07 84         [ 4]  675 	call DDUP    ; ( 0 1 0 1 -- )  
      001F08 CD 1E B6         [ 4]  676 	call set_option
      001F0B 90 93            [ 1]  677 	ldw y,x 
      001F0D 90 FE            [ 2]  678 	ldw y,(y)
      001F0F 90 5C            [ 1]  679 	incw y  ; next OPTION 
      001F11 90 A3 00 08      [ 2]  680 	cpw y,#8 
      001F15 25 E9            [ 1]  681 	jrult 2$
                                    682 ;;; erase first row of app_space 	
      001F17 90 AE 27 80      [ 2]  683 	ldw y,#app_space
      001F1B EF 02            [ 2]  684 	ldw (2,x),y  
      001F1D 90 5F            [ 1]  685 	clrw y 
      001F1F FF               [ 2]  686 	ldw (x),y ; ( app_space 0 -- )
      001F20 CD 1D C2         [ 4]  687 	call row_erase 
                                    688 ; reset interrupt vectors 
      001F23 1D 00 02         [ 2]  689 	subw x,#CELLL 
      001F26 90 5F            [ 1]  690 	clrw y  
      001F28 FF               [ 2]  691 4$:	ldw (x),y  ; ( n -- ) int# 
      001F29 CD 05 9E         [ 4]  692 	call DUPP  
      001F2C CD 1F 49         [ 4]  693 	call reset_vector
      001F2F 90 93            [ 1]  694 	ldw y,x 
      001F31 90 FE            [ 2]  695 	ldw y,(y)
      001F33 90 5C            [ 1]  696 	incw y   ; next vector 
      001F35 90 A3 00 19      [ 2]  697 	cpw y,#25 
      001F39 25 ED            [ 1]  698 	jrult 4$
      001F3B CC 00 00         [ 2]  699 	jp NonHandledInterrupt ; reset MCU
                                    700 
                                    701 ;------------------------------
                                    702 ; reset an interrupt vector 
                                    703 ; to its initial value 
                                    704 ; i.e. NonHandledInterrupt
                                    705 ; RST-IVEC ( n -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    706 ;-----------------------------
      001F3E 1E D9                  707 	.word LINK 
                           001F40   708 	LINK=. 
      001F40 08                     709 	.byte 8 
      001F41 52 53 54 2D 49 56 45   710 	.ascii "RST-IVEC"
             43
      001F49                        711 reset_vector:
      001F49 90 93            [ 1]  712 	ldw y,x
      001F4B 1C 00 02         [ 2]  713 	addw x,#CELLL 
      001F4E 90 FE            [ 2]  714 	ldw y,(y)
      001F50 90 A3 00 17      [ 2]  715 	cpw y,#23 
      001F54 27 3A            [ 1]  716 	jreq 9$
      001F56 90 A3 00 1D      [ 2]  717 	cpw y,#29 ; last vector
      001F5A 22 34            [ 1]  718 	jrugt 9$  
      001F5C 90 58            [ 2]  719 	sllw y 
      001F5E 90 58            [ 2]  720 	sllw y 
      001F60 72 A9 80 08      [ 2]  721 	addw y,#0x8008 ; irq0 address 
      001F64 90 BF 28         [ 2]  722 	ldw YTEMP,y
      001F67 1D 00 06         [ 2]  723 	subw x,#3*CELLL 
      001F6A EF 02            [ 2]  724 	ldw (2,x),y 
      001F6C 90 5F            [ 1]  725 	clrw y
      001F6E FF               [ 2]  726 	ldw (x),y 
      001F6F A6 82            [ 1]  727 	ld a,#0x82 
      001F71 90 95            [ 1]  728 	ld yh,a
      001F73 EF 04            [ 2]  729 	ldw (4,x),y
      001F75 CD 1D 98         [ 4]  730 	call EESTORE
      001F78 1D 00 06         [ 2]  731 	subw x,#3*CELLL
      001F7B 90 5F            [ 1]  732 	clrw y 
      001F7D FF               [ 2]  733 	ldw (x),y 
      001F7E 90 AE 00 00      [ 2]  734 	ldw y,#NonHandledInterrupt
      001F82 EF 04            [ 2]  735 	ldw (4,x),y 
      001F84 90 BE 28         [ 2]  736 	ldw y,YTEMP  
      001F87 72 A9 00 02      [ 2]  737 	addw y,#2
      001F8B EF 02            [ 2]  738 	ldw (2,x),y 
      001F8D CD 1D 98         [ 4]  739 	call EESTORE
      001F90 81               [ 4]  740 9$:	ret 
                                    741 
                                    742 
                                    743 ;------------------------------
                                    744 ; all interrupt vector with 
                                    745 ; an address >= a are resetted 
                                    746 ; to default
                                    747 ; CHKIVEC ( a -- )
                                    748 ;------------------------------
      001F91 1F 40                  749 	.word LINK 
                           001F93   750 	LINK=.
      001F93 07                     751 	.byte 7
      001F94 43 48 4B 49 56 45 43   752 	.ascii "CHKIVEC"
                                    753 ;local variables 
                           000001   754 	SSP=1
                           000003   755 	CADR=3
                           000005   756 	OFS=5
                           000006   757 	VSIZE=6  
      001F9B                        758 CHKIVEC:
      001F9B 52 06            [ 2]  759 	sub sp,#VSIZE ;alloc local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F9D 90 93            [ 1]  760 	ldw y,x 
      001F9F 90 FE            [ 2]  761 	ldw y,(y)
      001FA1 17 03            [ 2]  762 	ldw (CADR,sp),y ; ca 
      001FA3 1F 01            [ 2]  763 	ldw (SSP,sp),x 
      001FA5 AE 80 0A         [ 2]  764 	ldw x,#0x800a ; irq0 address 
      001FA8 BF 37            [ 2]  765 	ldw PTR16,X
      001FAA AE FF FC         [ 2]  766 	ldw x,#-4 
      001FAD 1C 00 04         [ 2]  767 1$:	addw x,#4
      001FB0 A3 00 78         [ 2]  768 	cpw x,#30*4 ; irq0-29 
      001FB3 27 22            [ 1]  769 	jreq 9$
      001FB5 90 93            [ 1]  770 	ldw y,x  
      001FB7 91 D6 37         [ 4]  771 	ld a,([PTR16],y)
      001FBA 11 03            [ 1]  772 	cp a,(CADR,sp)
      001FBC 25 EF            [ 1]  773 	jrult 1$
      001FBE 90 5C            [ 1]  774 	incw y 
      001FC0 91 D6 37         [ 4]  775 	ld a,([PTR16],y)
      001FC3 11 04            [ 1]  776 	cp a,(CADR+1,sp) 
      001FC5 25 E6            [ 1]  777 	jrult 1$ 
      001FC7 1F 05            [ 2]  778 	ldw (OFS,sp),x 
      001FC9 54               [ 2]  779 	srlw x
      001FCA 54               [ 2]  780 	srlw x 
      001FCB 90 93            [ 1]  781 	ldw y,x 
      001FCD 1E 01            [ 2]  782 	ldw x,(SSP,sp)
      001FCF FF               [ 2]  783 	ldw (x),y
      001FD0 CD 1F 49         [ 4]  784 	call reset_vector
      001FD3 1E 05            [ 2]  785 	ldw x,(OFS,sp) 
      001FD5 20 D6            [ 2]  786 	jra 1$
      001FD7 1E 01            [ 2]  787 9$:	ldw x,(SSP,sp) 
      001FD9 1C 00 02         [ 2]  788 	addw x,#CELLL 
      001FDC 5B 06            [ 2]  789 	addw sp,#VSIZE ; drop local variables  
      001FDE 81               [ 4]  790 	ret 
                                    791 
                                    792 ;------------------------------
                                    793 ; set interrupt vector 
                                    794 ; SET-IVEC ( ud n -- )
                                    795 ;  ud Handler address
                                    796 ;  n  vector # 0 .. 29 
                                    797 ;-----------------------------
      001FDF 1F 93                  798 	.word LINK
                           001FE1   799 	LINK=.
      001FE1 08                     800 	.byte 8 
      001FE2 53 45 54 2D 49 56 45   801 	.ascii "SET-IVEC" 
             43
      001FEA                        802 set_vector:
      001FEA 90 93            [ 1]  803     ldw y,x 
      001FEC 1C 00 02         [ 2]  804 	addw x,#CELLL 
      001FEF 90 FE            [ 2]  805 	ldw y,(y) ; vector #
      001FF1 90 A3 00 1D      [ 2]  806 	cpw y,#29 ; last vector
      001FF5 23 04            [ 2]  807 	jrule 2$
      001FF7 1C 00 04         [ 2]  808 	addw x,#2*CELLL 
      001FFA 81               [ 4]  809 	ret
      001FFB 90 58            [ 2]  810 2$:	sllw y 
      001FFD 90 58            [ 2]  811 	sllw y 
      001FFF 72 A9 80 08      [ 2]  812 	addw y,#0X8008 ; IRQ0 vector address 
      002003 90 BF 28         [ 2]  813 	ldw YTEMP,y ; vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      002006 A6 82            [ 1]  814 	ld a,#0x82 
      002008 90 95            [ 1]  815 	ld yh,a 
      00200A E6 01            [ 1]  816 	ld a,(1,x) ; isr address bits 23..16 
      00200C 90 97            [ 1]  817 	ld yl,a 
                                    818 ;  write 0x82 + most significant byte of int address	
      00200E 1D 00 06         [ 2]  819 	subw x,#3*CELLL 
      002011 EF 04            [ 2]  820 	ldw (4,x),y 
      002013 90 BE 28         [ 2]  821 	ldw y,YTEMP
      002016 EF 02            [ 2]  822 	ldw (2,x),y ; vector address 
      002018 90 5F            [ 1]  823 	clrw y 
      00201A FF               [ 2]  824 	ldw (x),y   ; as a double 
      00201B CD 1D 98         [ 4]  825 	call EESTORE 
      00201E 90 93            [ 1]  826 	ldw y,x 
      002020 90 EE 02         [ 2]  827 	ldw y,(2,y) ; bits 15..0 int vector 
      002023 1D 00 06         [ 2]  828 	subw x,#3*CELLL 
      002026 EF 04            [ 2]  829 	ldw (4,x),y 
      002028 90 BE 28         [ 2]  830 	ldw y,YTEMP 
      00202B 72 A9 00 02      [ 2]  831 	addw y,#2 
      00202F EF 02            [ 2]  832 	ldw (2,x),y 
      002031 90 5F            [ 1]  833 	clrw y 
      002033 FF               [ 2]  834 	ldw (x),y 
      002034 CD 1D 98         [ 4]  835 	call EESTORE
      002037 1C 00 04         [ 2]  836 	addw x,#2*CELLL  
      00203A 81               [ 4]  837 9$: ret 
                                    838 
                                    839 
                                    840 ;------------------------
                                    841 ; Compile word to flash
                                    842 ; EE, (w -- )
                                    843 ;-----------------------
      00203B 1F E1                  844 	.word LINK
                           00203D   845 	LINK=.
      00203D 03                     846 	.byte 3
      00203E 45 45 2C               847 	.ascii "EE,"
      002041                        848 EE_COMMA:
      002041 1D 00 04         [ 2]  849 	subw x,#2*CELLL 
      002044 90 BE 1C         [ 2]  850 	ldw y,UCP
      002047 90 89            [ 2]  851 	pushw y 
      002049 EF 02            [ 2]  852 	ldw (2,x),y 
      00204B 90 5F            [ 1]  853 	clrw y 
      00204D FF               [ 2]  854 	ldw (x),y
      00204E CD 1D 98         [ 4]  855 	call EESTORE
      002051 90 85            [ 2]  856 	popw y 
      002053 72 A9 00 02      [ 2]  857 	addw y,#2
      002057 90 BF 1C         [ 2]  858 	ldw UCP,y
      00205A 81               [ 4]  859 	ret 
                                    860 
                                    861 
                                    862 ;-------------------------
                                    863 ; Compile byte to flash 
                                    864 ; EEC, ( c -- )	
                                    865 ;-------------------------
      00205B 20 3D                  866 	.word LINK 
                           00205D   867 	LINK=.
      00205D 04                     868 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      00205E 45 45 43 2C            869 	.ascii "EEC,"
      002062                        870 EE_CCOMMA:
      002062 1D 00 04         [ 2]  871 	subw x,#2*CELLL 
      002065 90 BE 1C         [ 2]  872 	ldw y,UCP
      002068 90 89            [ 2]  873 	pushw y 
      00206A EF 02            [ 2]  874 	ldw (2,x),y 
      00206C 90 5F            [ 1]  875 	clrw y 
      00206E FF               [ 2]  876 	ldw (x),y
      00206F CD 1D 4C         [ 4]  877 	call EECSTORE
      002072 90 85            [ 2]  878 	popw y 
      002074 90 5C            [ 1]  879 	incw y 
      002076 90 BF 1C         [ 2]  880 	ldw UCP,y
      002079 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;--------------------------
                                    885 ; copy FLASH block to ROWBUF
                                    886 ; ROW>BUF ( ud -- )
                                    887 ;--------------------------
      00207A 20 5D                  888 	.word LINK 
                           00207C   889 	LINK=.
      00207C 07                     890 	.byte 7 
      00207D 52 4F 57 3E 42 55 46   891 	.ascii "ROW>BUF"
      002084                        892 ROW2BUF: 
      002084 CD 1B 0E         [ 4]  893 	call FPSTOR 
      002087 A6 80            [ 1]  894 	ld a,#BLOCK_SIZE
      002089 88               [ 1]  895 	push a 
      00208A B4 38            [ 1]  896 	and a,PTR8 ; block align 
      00208C B7 38            [ 1]  897 	ld PTR8,a
      00208E 90 AE 16 80      [ 2]  898 	ldw y,#ROWBUFF 
      002092 92 BC 00 36      [ 5]  899 1$: ldf a,[FPTR]
      002096 90 F7            [ 1]  900 	ld (y),a
      002098 CD 1C 88         [ 4]  901 	call INC_FPTR
      00209B 90 5C            [ 1]  902 	incw y 
      00209D 0A 01            [ 1]  903 	dec (1,sp)
      00209F 26 F1            [ 1]  904 	jrne 1$ 
      0020A1 84               [ 1]  905 	pop a 
      0020A2 81               [ 4]  906 	ret 
                                    907 
                                    908 
                                    909 ;---------------------------
                                    910 ; copy ROWBUFF to flash 
                                    911 ; BUF>ROW ( ud -- )
                                    912 ; ud is row address as double 
                                    913 ;---------------------------
      0020A3 20 7C                  914 	.word LINK 
                           0020A5   915 	LINK=.
      0020A5 07                     916 	.byte 7 
      0020A6 42 55 46 3E 52 4F 57   917 	.ascii "BUF>ROW" 
      0020AD                        918 BUF2ROW:
      0020AD CD 06 99         [ 4]  919 	call TBUF ; ( ud rb -- )
      0020B0 CD 07 59         [ 4]  920 	call ROT 
      0020B3 CD 07 59         [ 4]  921 	call ROT  ; ( rb ud -- )
      0020B6 CD 1E 86         [ 4]  922 	call write_row 
      0020B9 81               [ 4]  923 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    924 
                                    925 ;---------------------------------
                                    926 ; how many byte free in that row 
                                    927 ; RFREE ( a -- n )
                                    928 ; a is least byte of target address
                                    929 ;----------------------------------
      0020BA 20 A5                  930 	.word LINK 
                           0020BC   931 	LINK=.
      0020BC 05                     932 	.byte 5 
      0020BD 52 46 52 45 45         933 	.ascii "RFREE"
      0020C2                        934 RFREE:
      0020C2 E6 01            [ 1]  935 	ld a,(1,x)
      0020C4 A4 7F            [ 1]  936 	and a,#BLOCK_SIZE-1 
      0020C6 B7 28            [ 1]  937 	ld YTEMP,a 
      0020C8 A6 80            [ 1]  938 	ld a,#BLOCK_SIZE 
      0020CA B0 28            [ 1]  939 	sub a,YTEMP 
      0020CC 90 5F            [ 1]  940 	clrw y 
      0020CE 90 97            [ 1]  941 	ld yl,a
      0020D0 FF               [ 2]  942 	ldw (x),y 
      0020D1 81               [ 4]  943 	ret 
                                    944 
                                    945 ;---------------------------------
                                    946 ; write u bytes to flash/EEPROM 
                                    947 ; constraint to row limit 
                                    948 ; RAM>EE ( ud a u -- u2 )
                                    949 ; ud flash address 
                                    950 ; a ram address 
                                    951 ; u bytes count
                                    952 ; return u2 bytes written  
                                    953 ;-------------------------------
      0020D2 20 BC                  954 	.word LINK 
                           0020D4   955 	LINK=. 
      0020D4 06                     956 	.byte 6
      0020D5 52 41 4D 3E 45 45      957 	.ascii "RAM>EE"
                                    958 	
      0020DB                        959 RAM2EE:
                                    960 ; copy ud on top 
      0020DB 90 93            [ 1]  961 	ldw y,x 
      0020DD 90 EE 06         [ 2]  962 	ldw y,(6,y) ; LSW of ud  
      0020E0 90 BF 28         [ 2]  963 	ldw YTEMP,y 
      0020E3 90 93            [ 1]  964 	ldw y,x 
      0020E5 90 EE 04         [ 2]  965 	ldw y,(4,y)  ; MSW of ud 
      0020E8 1D 00 04         [ 2]  966 	subw x,#2*CELLL 
      0020EB FF               [ 2]  967 	ldw (x),y 
      0020EC 90 BE 28         [ 2]  968 	ldw y,YTEMP 
      0020EF EF 02            [ 2]  969 	ldw (2,x),y 
      0020F1 CD 20 84         [ 4]  970 	call ROW2BUF 
      0020F4 90 93            [ 1]  971 	ldw y,x 
      0020F6 90 EE 06         [ 2]  972 	ldw y,(6,y)
      0020F9 90 89            [ 2]  973 	pushw y ; udl 
      0020FB 90 9F            [ 1]  974 	ld a,yl
      0020FD A4 7F            [ 1]  975 	and a,#BLOCK_SIZE-1 
      0020FF 90 5F            [ 1]  976 	clrw y 
      002101 90 97            [ 1]  977 	ld yl,a 
      002103 72 A9 16 80      [ 2]  978 	addw y,#ROWBUFF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002107 1D 00 02         [ 2]  979 	subw x,#CELLL 
      00210A FF               [ 2]  980 	ldw (x),y  
      00210B CD 05 AE         [ 4]  981 	call SWAPP ;  ( ud a ra u -- )
      00210E CD 05 48         [ 4]  982 	call RFROM  
      002111 CD 20 C2         [ 4]  983 	call RFREE 
      002114 CD 08 B4         [ 4]  984 	call MIN
      002117 CD 05 9E         [ 4]  985 	call DUPP 
      00211A CD 05 67         [ 4]  986 	call TOR  
      00211D CD 0C 20         [ 4]  987 	call CMOVE
      002120 CD 20 AD         [ 4]  988 	call BUF2ROW 
      002123 CD 05 48         [ 4]  989 	call RFROM 
      002126 81               [ 4]  990 	ret 
                                    991 
                                    992 
                                    993 ;--------------------------
                                    994 ; expand 16 bit address 
                                    995 ; to 32 bit address 
                                    996 ; FADDR ( a -- ud )
                                    997 ;--------------------------
      002127 20 D4                  998 	.word LINK 
                           002129   999 	LINK=. 
      002129 05                    1000 	.byte 5 
      00212A 46 41 44 44 52        1001 	.ascii "FADDR"
      00212F                       1002 FADDR:
      00212F CC 0A E5         [ 2] 1003 	jp ZERO 
                                   1004 
                                   1005 
                                   1006 ;--------------------------
                                   1007 ; move new colon definition to FLASH 
                                   1008 ; using WR-ROW for efficiency 
                                   1009 ; preserving bytes already used 
                                   1010 ; in the current block. 
                                   1011 ; At this point the compiler as completed
                                   1012 ; in RAM and pointers CP and CNTXT updated.
                                   1013 ; CNTXT point to nfa of new word and  
                                   1014 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1015 ; 
                                   1016 ; FMOVE ( -- cp+ )
                                   1017 ; 
                                   1018 ;--------------------------
      002132 21 29                 1019 	.word LINK 
                           002134  1020 	LINK=.
      002134 05                    1021 	.byte 5 
      002135 46 4D 4F 56 45        1022 	.ascii "FMOVE" 
      00213A                       1023 FMOVE:
      00213A CD 06 AB         [ 4] 1024 	call TFLASH 
      00213D CD 04 F7         [ 4] 1025 	CALL AT 
      002140 CD 04 AC         [ 4] 1026 	CALL QBRAN 
      002143 21 BE                 1027 	.word no_move  
      002145 CD 06 FA         [ 4] 1028 	call CPP
      002148 CD 04 F7         [ 4] 1029 	call AT  
      00214B CD 05 9E         [ 4] 1030 	call DUPP ; ( udl udl -- )
      00214E CD 06 DE         [ 4] 1031 	call CNTXT 
      002151 CD 04 F7         [ 4] 1032 	call AT 
      002154 CD 04 79         [ 4] 1033 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002157 00 02                 1034 	.word 2 
      002159 CD 08 12         [ 4] 1035 	call SUBB ; ( udl udl a -- )
      00215C CD 05 AE         [ 4] 1036 	call SWAPP 
      00215F CD 21 2F         [ 4] 1037 	call FADDR 
      002162 CD 07 59         [ 4] 1038 	call ROT  ; ( udl ud a -- )
      002165 CD 05 9E         [ 4] 1039 	call DUPP 
      002168 CD 05 67         [ 4] 1040 	call TOR    ; R: a 
      00216B                       1041 FMOVE2: 
      00216B CD 0B D3         [ 4] 1042 	call HERE 
      00216E CD 05 5B         [ 4] 1043 	call RAT 
      002171 CD 08 12         [ 4] 1044 	call SUBB ; (udl ud a wl -- )
      002174                       1045 next_row:
      002174 CD 05 9E         [ 4] 1046 	call DUPP 
      002177 CD 05 67         [ 4] 1047 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00217A CD 20 DB         [ 4] 1048 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00217D CD 05 9E         [ 4] 1049 	call DUPP 
      002180 CD 05 67         [ 4] 1050 	call TOR
      002183 CD 07 99         [ 4] 1051 	call PLUS  ; ( udl+ ) 
      002186 CD 05 9E         [ 4] 1052 	call DUPP 
      002189 CD 0A E5         [ 4] 1053 	call ZERO   ; ( udl+ ud -- )
      00218C CD 05 48         [ 4] 1054 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00218F CD 05 48         [ 4] 1055 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002192 CD 05 C8         [ 4] 1056 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002195 CD 08 12         [ 4] 1057 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002198 CD 05 9E         [ 4] 1058 	call DUPP 
      00219B CD 04 AC         [ 4] 1059 	call QBRAN
      00219E 21 B7                 1060 	.word fmove_done 
      0021A0 CD 05 AE         [ 4] 1061 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0021A3 CD 05 48         [ 4] 1062 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0021A6 CD 07 99         [ 4] 1063 	call PLUS  ; ( udl+2 ud wl- a+ )
      0021A9 CD 05 9E         [ 4] 1064 	call DUPP 
      0021AC CD 05 67         [ 4] 1065 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0021AF CD 05 AE         [ 4] 1066 	call SWAPP 
      0021B2 CD 04 C3         [ 4] 1067 	call BRAN
      0021B5 21 74                 1068 	.word next_row  
      0021B7                       1069 fmove_done:	
      0021B7 CD 05 48         [ 4] 1070 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0021BA 1C 00 0A         [ 2] 1071 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0021BD 81               [ 4] 1072  	ret  
      0021BE                       1073 no_move:
      0021BE CD 0A E5         [ 4] 1074 	call ZERO
      0021C1 81               [ 4] 1075 	ret 
                                   1076 
                                   1077 ;------------------------------------------
                                   1078 ; adjust pointers after **FMOVE** operetion.
                                   1079 ; UPDAT-PTR ( cp+ -- )
                                   1080 ; cp+ is new CP position after FMOVE 
                                   1081 ;-------------------------------------------
      0021C2 21 34                 1082 	.word LINK 
                           0021C4  1083 	LINK=.
      0021C4 09                    1084 	.byte 9
      0021C5 55 50 44 41 54 2D 50  1085 	.ascii "UPDAT-PTR" 
             54 52
      0021CE                       1086 UPDATPTR:
                                   1087 ;reset VP to previous position  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      0021CE CD 1B 88         [ 4] 1088 	call EEPVP 
      0021D1 CD 05 94         [ 4] 1089 	call DROP 
      0021D4 CD 04 F7         [ 4] 1090 	call AT
      0021D7 CD 06 EC         [ 4] 1091 	call VPP 
      0021DA CD 04 E0         [ 4] 1092 	call STORE
                                   1093 ;update CONTEXT and LAST 
      0021DD CD 1B 72         [ 4] 1094 	call EEPCP 
      0021E0 CD 05 94         [ 4] 1095 	call DROP
      0021E3 CD 04 F7         [ 4] 1096 	call AT
      0021E6 CD 04 79         [ 4] 1097 	call DOLIT 
      0021E9 00 02                 1098 	.word 2 
      0021EB CD 07 99         [ 4] 1099 	call PLUS 
      0021EE CD 05 9E         [ 4] 1100 	call DUPP 
      0021F1 CD 06 DE         [ 4] 1101 	call CNTXT 
      0021F4 CD 04 E0         [ 4] 1102 	call STORE
      0021F7 CD 07 0A         [ 4] 1103 	call LAST
      0021FA CD 04 E0         [ 4] 1104 	call STORE 
      0021FD CD 1B A2         [ 4] 1105 	call UPDATLAST 
                                   1106 ;update CP 
      002200 CD 06 FA         [ 4] 1107 	call CPP 
      002203 CD 04 E0         [ 4] 1108 	call STORE
      002206 CD 1B CB         [ 4] 1109 	call UPDATCP 
      002209 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-----------------------------
                                   1113 ; move interrupt sub-routine
                                   1114 ; in flash memory
                                   1115 ;----------------------------- 
      00220A 21 C4                 1116 	.word LINK 
                           00220C  1117 	LINK=. 
      00220C 06                    1118 	.byte 6
      00220D 49 46 4D 4F 56 45     1119 	.ascii "IFMOVE" 
      002213                       1120 IFMOVE:
      002213 CD 06 AB         [ 4] 1121 	call TFLASH 
      002216 CD 04 F7         [ 4] 1122 	CALL AT 
      002219 CD 04 AC         [ 4] 1123 	CALL QBRAN 
      00221C 21 BE                 1124 	.word no_move 
      00221E CD 06 FA         [ 4] 1125 	call CPP 
      002221 CD 04 F7         [ 4] 1126 	call AT 
      002224 CD 05 9E         [ 4] 1127 	call DUPP ; ( udl udl -- )
      002227 CD 1B 88         [ 4] 1128 	call EEPVP 
      00222A CD 05 94         [ 4] 1129 	call DROP
      00222D CD 04 F7         [ 4] 1130 	call AT  ; ( udl udl a )
      002230 CD 05 67         [ 4] 1131 	call TOR 
      002233 CD 21 2F         [ 4] 1132 	call FADDR
      002236 CD 05 5B         [ 4] 1133 	call RAT ; ( udl ud a -- ) R: a 
      002239 CC 21 6B         [ 2] 1134 	jp FMOVE2 
                                   1135 
                                   1136 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           000001  4655 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4656         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00223C 22 0C                   31         .word LINK 
                           00223E    32         LINK=.
      00223E 02                      33         .byte 2
      00223F 50 49                   34         .ascii "PI" 
      002241                         35 PII:
      002241 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002244 90 AE 01 63      [ 2]   37         ldw y,#355 
      002248 EF 02            [ 2]   38         ldw (2,x),y 
      00224A 90 AE 00 71      [ 2]   39         ldw y,#113 
      00224E FF               [ 2]   40         ldw (x),y 
      00224F 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002250 22 3E                   48         .word LINK 
                           002252    49         LINK=.
      002252 05                      50         .byte 5 
      002253 53 51 52 54 32          51         .ascii "SQRT2" 
      002258                         52 SQRT2:
      002258 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00225B 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00225F EF 02            [ 2]   55         ldw (2,x),y 
      002261 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002265 FF               [ 2]   57         ldw (x),y 
      002266 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002267 22 52                   63         .word LINK 
                           002269    64         LINK=.
      002269 05                      65         .byte 5
      00226A 53 51 52 54 33          66         .ascii "SQRT3" 
      00226F                         67 SQRT3: 
      00226F 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002272 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002276 EF 02            [ 2]   70     ldw (2,x),y 
      002278 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00227C FF               [ 2]   72     ldw (x),y 
      00227D 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00227E 22 69                   78         .word LINK 
                           002280    79         LINK=.
      002280 01                      80         .byte 1
      002281 45                      81         .ascii "E" 
      002282                         82 ENEPER:
      002282 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      002285 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      002289 EF 02            [ 2]   85     ldw (2,x),y 
      00228B 90 AE 29 32      [ 2]   86     ldw y,#10546 
      00228F FF               [ 2]   87     ldw (x),y 
      002290 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      002291 22 80                   92         .word LINK 
                           002293    93         LINK=.
      002293 06                      94         .byte 6 
      002294 53 51 52 54 31 30       95         .ascii "SQRT10" 
      00229A                         96 SQRT10:
      00229A 1D 00 04         [ 2]   97     subw x,#2*CELLL
      00229D 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0022A1 EF 02            [ 2]   99     ldw (2,x),y 
      0022A3 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0022A7 FF               [ 2]  101     ldw (x),y 
      0022A8 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0022A9 22 93                  107         .word LINK 
                           0022AB   108         LINK=. 
      0022AB 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0022AC 31 32 52 54 32         110         .ascii "12RT2"
      0022B1                        111 RT12_2:
      0022B1 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0022B4 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0022B8 EF 02            [ 2]  114     ldw (2,x),y 
      0022BA 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0022BE FF               [ 2]  116     ldw (x),y 
      0022BF 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0022C0 22 AB                  122         .word LINK 
                           0022C2   123         LINK=.
      0022C2 05                     124         .byte 5 
      0022C3 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0022C8                        126 LOG2S:
      0022C8 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0022CB 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0022CF EF 02            [ 2]  129     ldw (2,x),y 
      0022D1 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0022D5 FF               [ 2]  131     ldw (x),y 
      0022D6 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0022D7 22 C2                  137         .word LINK 
                           0022D9   138         LINK=.
      0022D9 04                     139         .byte 4 
      0022DA 4C 4E 32 53            140         .ascii "LN2S" 
      0022DE                        141 LN2S: 
      0022DE 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0022E1 90 AE 01 E5      [ 2]  143     ldw y,#485
      0022E5 EF 02            [ 2]  144     ldw (2,x),y 
      0022E7 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0022EB FF               [ 2]  146     ldw (x),y 
      0022EC 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   4657 .endif
                           000001  4658 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   4659         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0022ED 22 D9                   32     .word LINK 
                           0022EF    33     LINK=.
      0022EF 06                      34     .byte 6
      0022F0 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      0022F6                         36 CALLOT:
      0022F6 CD 06 FA         [ 4]   37     CALL CPP
      0022F9 CD 05 9E         [ 4]   38     CALL DUPP 
      0022FC CD 04 F7         [ 4]   39     CALL AT 
      0022FF CD 05 67         [ 4]   40     CALL TOR 
      002302 CD 0B 55         [ 4]   41     CALL PSTOR 
      002305 CD 1B CB         [ 4]   42     CALL UPDATCP 
      002308 CD 05 48         [ 4]   43     CALL RFROM
      00230B CC 0A E5         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00230E 22 EF                   52     .word LINK 
                           002310    53     LINK=.
      002310 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002311 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002317                         56 CTABLE:
      002317 CD 22 F6         [ 4]   57     CALL CALLOT     
      00231A CC 18 C1         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00231D 23 10                   67     .word LINK 
                           00231F    68     LINK=.
      00231F 06                      69     .byte 6
      002320 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002326                         71 WTABLE:
      002326 CD 0A 6C         [ 4]   72     CALL CELLS  
      002329 CD 22 F6         [ 4]   73     CALL CALLOT 
      00232C CC 18 C1         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      00232F 23 1F                   82     .word LINK 
                           002331    83     LINK=.
      002331 06                      84     .byte 6
      002332 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002338                         86 CTAT:
      002338 CD 1B 0E         [ 4]   87     call FPSTOR 
      00233B CD 1C A0         [ 4]   88     call PTRPLUS 
      00233E CC 1C DD         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      002341 23 31                   97     .word LINK 
                           002343    98     LINK=.
      002343 06                      99     .byte 6
      002344 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      00234A                        101 WTAT:
      00234A CD 1B 0E         [ 4]  102     call FPSTOR 
      00234D CD 0A 6C         [ 4]  103     call CELLS 
      002350 CD 1C A0         [ 4]  104     call PTRPLUS 
      002353 CD 1C BB         [ 4]  105     call EE_READ 
      002356 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002357 23 43                  113     .word LINK 
                           002359   114     LINK=.
      002359 06                     115     .byte 6 
      00235A 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002360                        117 CTINIT:
      002360 CD 1B 0E         [ 4]  118     CALL FPSTOR
      002363 CD 1C 4C         [ 4]  119     CALL UNLOCK
      002366 CD 0A E5         [ 4]  120     CALL ZERO 
      002369 CD 0A 79         [ 4]  121 1$: CALL ONEP 
      00236C CD 05 9E         [ 4]  122     CALL DUPP 
      00236F CD 23 BC         [ 4]  123     CALL INTQ 
      002372 CD 04 AC         [ 4]  124     CALL QBRAN 
      002375 23 7F                  125     .word 2$
      002377 CD 1C F7         [ 4]  126     call WR_BYTE 
      00237A CD 04 C3         [ 4]  127     CALL BRAN 
      00237D 23 69                  128     .word 1$ 
      00237F CD 07 79         [ 4]  129 2$: CALL DDROP 
      002382 CD 1C 74         [ 4]  130     CALL LOCK 
      002385 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002386 23 59                  138     .word LINK 
                           002388   139     LINK=.
      002388 06                     140     .byte 6 
      002389 57 54 49 4E 49 54      141     .ascii "WTINIT"
      00238F                        142 WTINIT:
      00238F CD 1B 0E         [ 4]  143     CALL FPSTOR
      002392 CD 1C 4C         [ 4]  144     CALL UNLOCK
      002395 CD 0A E5         [ 4]  145     CALL ZERO 
      002398 CD 0A 79         [ 4]  146 1$: CALL ONEP 
      00239B CD 05 9E         [ 4]  147     CALL DUPP
      00239E CD 23 BC         [ 4]  148     CALL INTQ
      0023A1 CD 04 AC         [ 4]  149     CALL QBRAN 
      0023A4 23 AE                  150     .word 2$
      0023A6 CD 1D 1C         [ 4]  151     call WR_WORD 
      0023A9 CD 04 C3         [ 4]  152     CALL BRAN 
      0023AC 23 98                  153     .word 1$ 
      0023AE CD 07 79         [ 4]  154 2$: CALL DDROP 
      0023B1 CD 1C 74         [ 4]  155     CALL LOCK 
      0023B4 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0023B5 23 88                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           0023B7   165     LINK=.
      0023B7 04                     166     .byte 4
      0023B8 5B 4E 5D 3F            167     .ascii "[N]?" 
      0023BC                        168 INTQ:
      0023BC CD 0F 4B         [ 4]  169     CALL CR 
      0023BF CD 04 79         [ 4]  170     call DOLIT 
      0023C2 00 5B                  171     .word '[
      0023C4 CD 04 38         [ 4]  172     CALL EMIT 
      0023C7 CD 0F E6         [ 4]  173     CALL DOT 
      0023CA CD 0F 8A         [ 4]  174     CALL  DOTQP
      0023CD 03                     175     .byte 3
      0023CE 5D 3F 20               176     .ascii "]? " 
      0023D1 CD 13 32         [ 4]  177     CALL QUERY 
      0023D4 CD 11 5D         [ 4]  178     call TOKEN 
      0023D7 CC 0D F8         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   4660 .endif
                           000001  4661 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   4662         .include "float.asm"
                                      1 ;*********************************
                                      2 ;    floating point library
                                      3 ;    adapted from 
                                      4 ;    Forth dimensions Vol. IV #1 
                                      5 ;    published in  may/june 1982
                                      6 ;
                                      7 ; Creation date: 2021-06-15 
                                      8 ;
                                      9 ; NOTE: I used a different format 
                                     10 ;       for float number. This 
                                     11 ;       enable comparison of floats 
                                     12 ;       as they were integer hence 
                                     13 ;       there no need for F>,F<,etc 
                                     14 ;************************************
                                     15 
                                     16 ;*************************************************
                                     17 ;  FLOAT format double for storage 
                                     18 ;  bits 22:0  mantissa absolute value 
                                     19 ;  bits  30:23  exponent with 127 offset added  
                                     20 ;  bit 31  mantissa sign 
                                     21 ;  float value: if bit 31 is 1 negate mantissa
                                     22 ;                else keep mantissas as bits 22:0
                                     23 ;                as is
                                     24 ;                eponent: 10^^(exp-127) 
                                     25 ;***********************************************  
                                     26     ; macro to create dictionary header record
                                     27     .macro _HEADER label,len,name 
                                     28         .word LINK 
                                     29         LINK=.
                                     30         .byte len  
                                     31         .ascii name
                                     32         label:
                                     33     .endm 
                                     34 
                                     35     ; runtime literal 
                                     36     .macro _DOLIT value 
                                     37     CALL DOLIT 
                                     38     .word value 
                                     39     .endm 
                                     40 
                                     41     ; 0BRANCH 
                                     42     .macro _QBRAN target 
                                     43     CALL QBRAN
                                     44     .word target
                                     45     .endm 
                                     46 
                                     47     ; BRANCH 
                                     48     .macro _BRAN target 
                                     49     CALL BRAN 
                                     50     .word target 
                                     51     .endm 
                                     52 
                                     53 ;-------------------------
                                     54 ;    FPSW ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     55 ;    floating state variable
                                     56 ;    bit 0 zero flag 
                                     57 ;    bit 1 negative flag 
                                     58 ;    bit 2 overflow/error flag 
                                     59 ;---------------------------
      0023DA                         60     _HEADER FPSW,4,"FPSW"
      0023DA 23 B7                    1         .word LINK 
                           0023DC     2         LINK=.
      0023DC 04                       3         .byte 4  
      0023DD 46 50 53 57              4         .ascii "FPSW"
      0023E1                          5         FPSW:
      0023E1 90 AE 00 0A      [ 2]   61 	LDW Y,#UFPSW  
      0023E5 1D 00 02         [ 2]   62 	SUBW X,#2
      0023E8 FF               [ 2]   63     LDW (X),Y
      0023E9 81               [ 4]   64     RET
                                     65 
                                     66 ;----------------------------
                                     67 ;    FBASE ( -- a )
                                     68 ;    floating point numerical
                                     69 ;    base variable 
                                     70 ;----------------------------
      0023EA                         71     _HEADER FBASE,5,"FBASE"
      0023EA 23 DC                    1         .word LINK 
                           0023EC     2         LINK=.
      0023EC 05                       3         .byte 5  
      0023ED 46 42 41 53 45           4         .ascii "FBASE"
      0023F2                          5         FBASE:
      0023F2 90 AE 00 08      [ 2]   72 	LDW Y,#UFBASE  
      0023F6 1D 00 02         [ 2]   73 	SUBW X,#2
      0023F9 FF               [ 2]   74     LDW (X),Y
      0023FA 81               [ 4]   75     RET
                                     76 
                                     77 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     78 ;   FRESET ( -- )
                                     79 ;   reset FPSW variable 
                                     80 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
      0023FB                         81     _HEADER FRESET,6,"FRESET"
      0023FB 23 EC                    1         .word LINK 
                           0023FD     2         LINK=.
      0023FD 06                       3         .byte 6  
      0023FE 46 52 45 53 45 54        4         .ascii "FRESET"
      002404                          5         FRESET:
      002404                         82     _DOLIT 0 
      002404 CD 04 79         [ 4]    1     CALL DOLIT 
      002407 00 00                    2     .word 0 
      002409 CD 23 E1         [ 4]   83     CALL FPSW 
      00240C CD 04 E0         [ 4]   84     CALL STORE 
      00240F 81               [ 4]   85     RET 
                                     86 
                                     87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     88 ;   FINIT ( -- )
                                     89 ;   initialize floating point 
                                     90 ;   library 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002410                         92     _HEADER FINIT,5,"FINIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002410 23 FD                    1         .word LINK 
                           002412     2         LINK=.
      002412 05                       3         .byte 5  
      002413 46 49 4E 49 54           4         .ascii "FINIT"
      002418                          5         FINIT:
      002418 CD 24 04         [ 4]   93     CALL FRESET 
      00241B CD 06 5B         [ 4]   94     CALL BASE 
      00241E CD 04 F7         [ 4]   95     CALL AT 
      002421 CD 23 F2         [ 4]   96     CALL FBASE 
      002424 CD 04 E0         [ 4]   97     CALL STORE 
      002427 81               [ 4]   98     RET 
                                     99 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    FER ( -- u )
                                    102 ;    return FPSW value 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002428                        104     _HEADER FER,3,"FER"
      002428 24 12                    1         .word LINK 
                           00242A     2         LINK=.
      00242A 03                       3         .byte 3  
      00242B 46 45 52                 4         .ascii "FER"
      00242E                          5         FER:
      00242E CD 23 E1         [ 4]  105     CALL FPSW 
      002431 CD 04 F7         [ 4]  106     CALL AT 
      002434 81               [ 4]  107     RET 
                                    108 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    FZE  ( -- z )
                                    111 ;    return FPSW zero flag 
                                    112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002435                        113     _HEADER FZE,3,"FZE"
      002435 24 2A                    1         .word LINK 
                           002437     2         LINK=.
      002437 03                       3         .byte 3  
      002438 46 5A 45                 4         .ascii "FZE"
      00243B                          5         FZE:
      00243B CD 23 E1         [ 4]  114     CALL FPSW
      00243E CD 04 F7         [ 4]  115     CALL AT  
      002441                        116     _DOLIT 1
      002441 CD 04 79         [ 4]    1     CALL DOLIT 
      002444 00 01                    2     .word 1 
      002446 CD 05 EA         [ 4]  117     CALL ANDD 
      002449 81               [ 4]  118     RET 
                                    119 
                                    120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    121 ;    FNE ( -- n )
                                    122 ;    return FPSW negative flag 
                                    123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00244A                        124     _HEADER FNE,3,"FNE"
      00244A 24 37                    1         .word LINK 
                           00244C     2         LINK=.
      00244C 03                       3         .byte 3  
      00244D 46 4E 45                 4         .ascii "FNE"
      002450                          5         FNE:
      002450 CD 23 E1         [ 4]  125     CALL FPSW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002453 CD 04 F7         [ 4]  126     CALL AT 
      002456                        127     _DOLIT 2 
      002456 CD 04 79         [ 4]    1     CALL DOLIT 
      002459 00 02                    2     .word 2 
      00245B CD 05 EA         [ 4]  128     CALL ANDD 
      00245E 81               [ 4]  129     RET 
                                    130 
                                    131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    132 ;   FOV (A -- v )
                                    133 ;   return FPSW overflow flag 
                                    134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00245F                        135     _HEADER FOV,3,"FOV"
      00245F 24 4C                    1         .word LINK 
                           002461     2         LINK=.
      002461 03                       3         .byte 3  
      002462 46 4F 56                 4         .ascii "FOV"
      002465                          5         FOV:
      002465 CD 23 E1         [ 4]  136     CALL FPSW
      002468 CD 04 F7         [ 4]  137     CALL AT  
      00246B                        138     _DOLIT 4 
      00246B CD 04 79         [ 4]    1     CALL DOLIT 
      00246E 00 04                    2     .word 4 
      002470 CD 05 EA         [ 4]  139     CALL ANDD 
      002473 81               [ 4]  140     RET 
                                    141 
                                    142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    143 ;    D0= ( d -- 0|-1 )
                                    144 ;    check if double is 0 
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002474                        146     _HEADER DZEQUAL,3,"D0="
      002474 24 61                    1         .word LINK 
                           002476     2         LINK=.
      002476 03                       3         .byte 3  
      002477 44 30 3D                 4         .ascii "D0="
      00247A                          5         DZEQUAL:
      00247A CD 05 FE         [ 4]  147     CALL ORR 
      00247D A6 FF            [ 1]  148     LD A,#0xFF
      00247F 90 93            [ 1]  149     LDW Y,X
      002481 90 FE            [ 2]  150     LDW Y,(Y)
      002483 2B 01            [ 1]  151     JRMI  ZEQ1
      002485 4F               [ 1]  152     CLR A   ;false
      002486                        153 ZEQ1:
      002486 F7               [ 1]  154     LD     (X),A
      002487 E7 01            [ 1]  155     LD (1,X),A
      002489 81               [ 4]  156 	RET     
                                    157     
                                    158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    159 ;  DNEGATE ( d -- d )
                                    160 ;  negate double (2's complement)
                                    161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00248A                        162     _HEADER DNEGAT,7,"DNEGATE"
      00248A 24 76                    1         .word LINK 
                           00248C     2         LINK=.
      00248C 07                       3         .byte 7  
      00248D 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002494                          5         DNEGAT:
      002494 CD 07 B3         [ 4]  163     CALL INVER
      002497 CD 05 AE         [ 4]  164     CALL SWAPP 
      00249A CD 07 B3         [ 4]  165     CALL INVER 
      00249D 90 93            [ 1]  166     LDW  Y,X 
      00249F 90 FE            [ 2]  167     LDW Y,(Y)
      0024A1 72 A9 00 01      [ 2]  168     ADDW Y,#1 
      0024A5 FF               [ 2]  169     LDW (X),Y 
      0024A6 24 0B            [ 1]  170     JRNC DNEG1 
      0024A8 90 93            [ 1]  171     LDW Y,X 
      0024AA 90 EE 02         [ 2]  172     LDW Y,(2,Y)
      0024AD 72 A9 00 01      [ 2]  173     ADDW Y,#1
      0024B1 EF 02            [ 2]  174     LDW (2,X),Y 
      0024B3                        175 DNEG1:
      0024B3 CD 05 AE         [ 4]  176     CALL SWAPP 
      0024B6 81               [ 4]  177     RET      
                                    178 
                                    179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    180 ;   U> ( u1 u2 -- f )
                                    181 ;   f = true if u1>u2 
                                    182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024B7                        183     _HEADER UGREAT,2,"U>"
      0024B7 24 8C                    1         .word LINK 
                           0024B9     2         LINK=.
      0024B9 02                       3         .byte 2  
      0024BA 55 3E                    4         .ascii "U>"
      0024BC                          5         UGREAT:
      0024BC A6 00            [ 1]  184     LD A,#0
      0024BE 90 93            [ 1]  185     LDW Y,X 
      0024C0 90 EE 02         [ 2]  186     LDW Y,(2,Y)
      0024C3 90 BF 28         [ 2]  187     LDW YTEMP,Y 
      0024C6 90 93            [ 1]  188     LDW Y,X
      0024C8 1C 00 02         [ 2]  189     ADDW X,#2 
      0024CB 90 FE            [ 2]  190     LDW Y,(Y)
      0024CD 90 B3 28         [ 2]  191     CPW Y,YTEMP 
      0024D0 2B 02            [ 1]  192     JRMI UGREAT1 
      0024D2 A6 FF            [ 1]  193     LD A,#0XFF 
      0024D4                        194 UGREAT1:
      0024D4 F7               [ 1]  195     LD (X),A 
      0024D5 E7 01            [ 1]  196     LD (1,X),A 
      0024D7 81               [ 4]  197     RET 
                                    198 
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    200 ;    SFZ ( f# -- f# )
                                    201 ;    set FPSW zero flag 
                                    202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024D8                        203     _HEADER SFZ,3,"SFZ"
      0024D8 24 B9                    1         .word LINK 
                           0024DA     2         LINK=.
      0024DA 03                       3         .byte 3  
      0024DB 53 46 5A                 4         .ascii "SFZ"
      0024DE                          5         SFZ:
      0024DE CD 07 84         [ 4]  204     CALL DDUP 
      0024E1 CD 24 2E         [ 4]  205     CALL FER 
      0024E4                        206     _DOLIT 0xfffe 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0024E4 CD 04 79         [ 4]    1     CALL DOLIT 
      0024E7 FF FE                    2     .word 0xfffe 
      0024E9 CD 05 EA         [ 4]  207     CALL ANDD 
      0024EC CD 05 67         [ 4]  208     CALL TOR    
      0024EF                        209     _DOLIT 0x807F 
      0024EF CD 04 79         [ 4]    1     CALL DOLIT 
      0024F2 80 7F                    2     .word 0x807F 
      0024F4 CD 05 EA         [ 4]  210     CALL ANDD 
      0024F7 CD 24 7A         [ 4]  211     CALL DZEQUAL 
      0024FA                        212     _DOLIT 1 
      0024FA CD 04 79         [ 4]    1     CALL DOLIT 
      0024FD 00 01                    2     .word 1 
      0024FF CD 05 EA         [ 4]  213     CALL ANDD 
      002502 CD 05 48         [ 4]  214     CALL RFROM 
      002505 CD 05 FE         [ 4]  215     CALL ORR 
      002508 CD 23 E1         [ 4]  216     CALL FPSW 
      00250B CD 04 E0         [ 4]  217     CALL STORE 
      00250E 81               [ 4]  218     RET 
                                    219 
                                    220 
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;   SFN ( f# -- f# )
                                    223 ;   set FPSW negative flag 
                                    224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00250F                        225     _HEADER SFN,3,"SFN"
      00250F 24 DA                    1         .word LINK 
                           002511     2         LINK=.
      002511 03                       3         .byte 3  
      002512 53 46 4E                 4         .ascii "SFN"
      002515                          5         SFN:
      002515 CD 05 9E         [ 4]  226     CALL DUPP  
      002518 CD 24 2E         [ 4]  227     CALL FER 
      00251B                        228     _DOLIT 0xFFFD 
      00251B CD 04 79         [ 4]    1     CALL DOLIT 
      00251E FF FD                    2     .word 0xFFFD 
      002520 CD 05 EA         [ 4]  229     CALL ANDD  
      002523 CD 05 67         [ 4]  230     CALL TOR 
      002526                        231     _DOLIT 0x8000
      002526 CD 04 79         [ 4]    1     CALL DOLIT 
      002529 80 00                    2     .word 0x8000 
      00252B CD 05 EA         [ 4]  232     CALL ANDD
      00252E 90 93            [ 1]  233     LDW Y,X 
      002530 90 FE            [ 2]  234     LDW Y,(Y)
      002532 98               [ 1]  235     RCF 
      002533 90 59            [ 2]  236     RLCW Y 
      002535 90 59            [ 2]  237     RLCW Y 
      002537 90 59            [ 2]  238     RLCW Y 
      002539 FF               [ 2]  239     LDW (X),Y 
      00253A CD 05 48         [ 4]  240     CALL RFROM 
      00253D CD 05 FE         [ 4]  241     CALL ORR 
      002540 CD 23 E1         [ 4]  242     CALL FPSW
      002543 CD 04 E0         [ 4]  243     CALL STORE 
      002546 81               [ 4]  244     RET 
                                    245 
                                    246 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                    247 ;   SFV ( -- )
                                    248 ;   set overflow flag 
                                    249 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002547                        250     _HEADER SFV,3,"SFV"
      002547 25 11                    1         .word LINK 
                           002549     2         LINK=.
      002549 03                       3         .byte 3  
      00254A 53 46 56                 4         .ascii "SFV"
      00254D                          5         SFV:
      00254D CD 23 E1         [ 4]  251     CALL FPSW 
      002550 CD 04 F7         [ 4]  252     CALL AT 
      002553                        253     _DOLIT 4 
      002553 CD 04 79         [ 4]    1     CALL DOLIT 
      002556 00 04                    2     .word 4 
      002558 CD 05 FE         [ 4]  254     CALL ORR 
      00255B CD 23 E1         [ 4]  255     CALL FPSW 
      00255E CD 04 E0         [ 4]  256     CALL STORE 
      002561 81               [ 4]  257     RET 
                                    258 
                                    259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    260 ;  @EXPONENT ( f# -- m e )
                                    261 ;  split float in mantissa/exponent 
                                    262 ;  m mantissa as a double 
                                    263 ;  e exponent as a single 
                                    264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002562                        265     _HEADER ATEXP,9,"@EXPONENT"             
      002562 25 49                    1         .word LINK 
                           002564     2         LINK=.
      002564 09                       3         .byte 9  
      002565 40 45 58 50 4F 4E 45     4         .ascii "@EXPONENT"
             4E 54
      00256E                          5         ATEXP:
      00256E CD 24 04         [ 4]  266     CALL FRESET
      002571 CD 25 15         [ 4]  267     CALL SFN
      002574 CD 24 DE         [ 4]  268     CALL SFZ 
      002577 CD 05 9E         [ 4]  269     CALL DUPP
      00257A                        270     _DOLIT 0X7F80 
      00257A CD 04 79         [ 4]    1     CALL DOLIT 
      00257D 7F 80                    2     .word 0X7F80 
      00257F CD 05 EA         [ 4]  271     CALL ANDD 
      002582                        272     _DOLIT 7 
      002582 CD 04 79         [ 4]    1     CALL DOLIT 
      002585 00 07                    2     .word 7 
      002587 CD 0A B3         [ 4]  273     CALL RSHIFT
      00258A                        274     _DOLIT 127 
      00258A CD 04 79         [ 4]    1     CALL DOLIT 
      00258D 00 7F                    2     .word 127 
      00258F CD 08 12         [ 4]  275     CALL SUBB
      002592 CD 05 67         [ 4]  276     CALL TOR 
      002595                        277     _DOLIT 0x7F
      002595 CD 04 79         [ 4]    1     CALL DOLIT 
      002598 00 7F                    2     .word 0x7F 
      00259A CD 05 EA         [ 4]  278     CALL ANDD  ; mantissa as double  
      00259D CD 24 50         [ 4]  279     CALL FNE 
      0025A0                        280     _QBRAN POSMANT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0025A0 CD 04 AC         [ 4]    1     CALL QBRAN
      0025A3 25 A8                    2     .word POSMANT
      0025A5 CD 24 94         [ 4]  281     CALL DNEGAT 
      0025A8                        282 POSMANT:
      0025A8 CD 05 48         [ 4]  283     CALL RFROM 
      0025AB 81               [ 4]  284     RET 
                                    285 
                                    286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    287 ;    !EXPONENT ( m e -- f# )
                                    288 ;    built float from mantissa/exponent 
                                    289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025AC                        290     _HEADER STEXP,9,"!EXPONENT"
      0025AC 25 64                    1         .word LINK 
                           0025AE     2         LINK=.
      0025AE 09                       3         .byte 9  
      0025AF 21 45 58 50 4F 4E 45     4         .ascii "!EXPONENT"
             4E 54
      0025B8                          5         STEXP:
      0025B8 CD 05 9E         [ 4]  291     CALL DUPP 
      0025BB CD 08 2C         [ 4]  292     CALL ABSS 
      0025BE                        293     _DOLIT 127 
      0025BE CD 04 79         [ 4]    1     CALL DOLIT 
      0025C1 00 7F                    2     .word 127 
      0025C3 CD 24 BC         [ 4]  294     CALL UGREAT
      0025C6                        295     _QBRAN STEXP1
      0025C6 CD 04 AC         [ 4]    1     CALL QBRAN
      0025C9 25 CE                    2     .word STEXP1
      0025CB CD 25 4D         [ 4]  296     CALL SFV  
      0025CE                        297 STEXP1:
      0025CE                        298     _DOLIT 127 
      0025CE CD 04 79         [ 4]    1     CALL DOLIT 
      0025D1 00 7F                    2     .word 127 
      0025D3 CD 07 99         [ 4]  299     CALL PLUS 
      0025D6                        300     _DOLIT 0XFF 
      0025D6 CD 04 79         [ 4]    1     CALL DOLIT 
      0025D9 00 FF                    2     .word 0XFF 
      0025DB CD 05 EA         [ 4]  301     CALL ANDD 
      0025DE                        302     _DOLIT 7 
      0025DE CD 04 79         [ 4]    1     CALL DOLIT 
      0025E1 00 07                    2     .word 7 
      0025E3 CD 0A 97         [ 4]  303     CALL LSHIFT 
      0025E6 CD 05 67         [ 4]  304     CALL TOR   ; R: e 
      0025E9 CD 05 9E         [ 4]  305     CALL DUPP 
      0025EC                        306     _DOLIT 0X8000 
      0025EC CD 04 79         [ 4]    1     CALL DOLIT 
      0025EF 80 00                    2     .word 0X8000 
      0025F1 CD 05 EA         [ 4]  307     CALL ANDD 
      0025F4                        308     _QBRAN STEXP2 
      0025F4 CD 04 AC         [ 4]    1     CALL QBRAN
      0025F7 26 0A                    2     .word STEXP2
      0025F9                        309     _DOLIT 0X8000 
      0025F9 CD 04 79         [ 4]    1     CALL DOLIT 
      0025FC 80 00                    2     .word 0X8000 
      0025FE CD 05 48         [ 4]  310     CALL RFROM 
      002601 CD 05 FE         [ 4]  311     CALL ORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002604 CD 05 67         [ 4]  312     CALL TOR
      002607 CD 24 94         [ 4]  313     CALL DNEGAT  
      00260A                        314 STEXP2:
      00260A CD 05 9E         [ 4]  315     CALL DUPP 
      00260D                        316     _DOLIT 0X7F
      00260D CD 04 79         [ 4]    1     CALL DOLIT 
      002610 00 7F                    2     .word 0X7F 
      002612 CD 24 BC         [ 4]  317     CALL UGREAT 
      002615                        318     _QBRAN STEXP3 
      002615 CD 04 AC         [ 4]    1     CALL QBRAN
      002618 26 1D                    2     .word STEXP3
      00261A CD 25 4D         [ 4]  319     CALL SFV 
      00261D                        320 STEXP3:
      00261D                        321     _DOLIT 0X7F 
      00261D CD 04 79         [ 4]    1     CALL DOLIT 
      002620 00 7F                    2     .word 0X7F 
      002622 CD 05 EA         [ 4]  322     CALL ANDD 
      002625 CD 05 48         [ 4]  323     CALL RFROM 
      002628 CD 05 FE         [ 4]  324     CALL ORR 
      00262B CD 24 DE         [ 4]  325     CALL SFZ 
      00262E CD 25 15         [ 4]  326     CALL SFN 
      002631 81               [ 4]  327     RET 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;    -ROT ( n1 n2 n3 -- n3 n1 n2 )
                                    331 ;    rotate left 3 top elements 
                                    332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002632                        333     _HEADER NROT,4,"-ROT"
      002632 25 AE                    1         .word LINK 
                           002634     2         LINK=.
      002634 04                       3         .byte 4  
      002635 2D 52 4F 54              4         .ascii "-ROT"
      002639                          5         NROT:
      002639 90 93            [ 1]  334     LDW Y,X 
      00263B 90 FE            [ 2]  335     LDW Y,(Y)
      00263D 90 BF 28         [ 2]  336     LDW YTEMP,Y ; n3  
      002640 90 93            [ 1]  337     LDW Y,X 
      002642 90 EE 02         [ 2]  338     LDW Y,(2,Y) ; Y = n2 
      002645 FF               [ 2]  339     LDW (X),Y   ; TOS = n2 
      002646 90 93            [ 1]  340     LDW Y,X    
      002648 90 EE 04         [ 2]  341     LDW Y,(4,Y) ; Y = n1 
      00264B EF 02            [ 2]  342     LDW (2,X),Y ;   = n1 
      00264D 90 BE 28         [ 2]  343     LDW Y,YTEMP 
      002650 EF 04            [ 2]  344     LDW (4,X),Y ; = n3 
      002652 81               [ 4]  345     RET 
                                    346 
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    348 ;   D/MOD ( d s - r qd )
                                    349 ;   unsigned divide double by single 
                                    350 ;   return double quotient 
                                    351 ;   and single remainder 
                                    352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002653                        353     _HEADER DSLMOD,5,"D/MOD"
      002653 26 34                    1         .word LINK 
                           002655     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002655 05                       3         .byte 5  
      002656 44 2F 4D 4F 44           4         .ascii "D/MOD"
      00265B                          5         DSLMOD:
      00265B 90 93            [ 1]  354         LDW     Y,X             ; stack pointer to Y
      00265D FE               [ 2]  355         LDW     X,(X)           ; un
      00265E BF 28            [ 2]  356         LDW     YTEMP,X         ; save un
      002660 93               [ 1]  357         LDW     X,Y
      002661 89               [ 2]  358         PUSHW   X               ; save stack pointer
      002662 90 89            [ 2]  359         PUSHW   Y 
      002664 EE 02            [ 2]  360         LDW     X,(2,X)           ; X=udh
      002666 90 BE 28         [ 2]  361         LDW     Y,YTEMP         ; divisor 
      002669 65               [ 2]  362         DIVW    X,Y 
      00266A BF 26            [ 2]  363         LDW     XTEMP,X         ; QUOTIENT hi 
      00266C 93               [ 1]  364         LDW     X,Y             ; remainder in X 
      00266D 90 85            [ 2]  365         POPW    Y 
      00266F 90 EE 04         [ 2]  366         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002672 A6 10            [ 1]  367         LD      A,#16           ; loop count
      002674 90 58            [ 2]  368         SLLW    Y               ; udl shift udl into udh
      002676                        369 DSLMOD3:
      002676 59               [ 2]  370         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      002677 25 04            [ 1]  371         JRC     DSLMODa         ; if carry out of rotate
      002679 B3 28            [ 2]  372         CPW     X,YTEMP         ; compare udh to un
      00267B 25 05            [ 1]  373         JRULT   DSLMOD4         ; can't subtract
      00267D                        374 DSLMODa:
      00267D 72 B0 00 28      [ 2]  375         SUBW    X,YTEMP         ; can subtract
      002681 98               [ 1]  376         RCF
      002682                        377 DSLMOD4:
      002682 8C               [ 1]  378         CCF                     ; quotient bit
      002683 90 59            [ 2]  379         RLCW    Y               ; rotate into quotient, rotate out udl
      002685 4A               [ 1]  380         DEC     A               ; repeat
      002686 26 EE            [ 1]  381         JRNE    DSLMOD3           ; if A == 0
      002688                        382 DSLMODb:
      002688 BF 28            [ 2]  383         LDW     YTEMP,X         ; done, save remainder
      00268A 85               [ 2]  384         POPW    X               ; restore stack pointer
      00268B EF 02            [ 2]  385         LDW     (2,X),Y           ; save quotient low 
      00268D 90 BE 26         [ 2]  386         LDW     Y,XTEMP         ; quotient hi 
      002690 FF               [ 2]  387         LDW     (X),Y           ; save quotient hi 
      002691 90 BE 28         [ 2]  388         LDW     Y,YTEMP         ; remainder onto stack
      002694 EF 04            [ 2]  389         LDW     (4,X),Y
      002696 81               [ 4]  390         RET 
                                    391 
                                    392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    393 ;   D# ( d -- d )
                                    394 ;   extract least digit 
                                    395 ;   from double integer 
                                    396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002697                        397     _HEADER DDIG,2,"D#"
      002697 26 55                    1         .word LINK 
                           002699     2         LINK=.
      002699 02                       3         .byte 2  
      00269A 44 23                    4         .ascii "D#"
      00269C                          5         DDIG:
      00269C CD 06 5B         [ 4]  398     CALL BASE 
      00269F CD 04 F7         [ 4]  399     CALL AT 
      0026A2 CD 26 5B         [ 4]  400     CALL DSLMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0026A5 CD 07 59         [ 4]  401     CALL ROT   
      0026A8 CD 0C B4         [ 4]  402     CALL DIGIT 
      0026AB CD 0D 00         [ 4]  403     CALL HOLD 
      0026AE 81               [ 4]  404     RET 
                                    405 
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    407 ;   E. ( f# -- )
                                    408 ;   print float in scientific 
                                    409 ;   format 
                                    410 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026AF                        411     _HEADER EDOT,2,"E."
      0026AF 26 99                    1         .word LINK 
                           0026B1     2         LINK=.
      0026B1 02                       3         .byte 2  
      0026B2 45 2E                    4         .ascii "E."
      0026B4                          5         EDOT:
      0026B4 CD 06 5B         [ 4]  412     CALL BASE 
      0026B7 CD 04 F7         [ 4]  413     CALL AT 
      0026BA CD 05 67         [ 4]  414     CALL TOR 
      0026BD CD 23 F2         [ 4]  415     CALL FBASE 
      0026C0 CD 04 F7         [ 4]  416     CALL AT
      0026C3 CD 06 5B         [ 4]  417     CALL BASE 
      0026C6 CD 04 E0         [ 4]  418     CALL STORE 
      0026C9 CD 25 6E         [ 4]  419     CALL ATEXP ; m e 
      0026CC CD 05 67         [ 4]  420     CALL TOR   
      0026CF CD 24 50         [ 4]  421     CALL FNE 
      0026D2                        422     _QBRAN EDOT1
      0026D2 CD 04 AC         [ 4]    1     CALL QBRAN
      0026D5 26 DA                    2     .word EDOT1
      0026D7 CD 24 94         [ 4]  423     CALL DNEGAT
      0026DA                        424 EDOT1:
      0026DA CD 0F 03         [ 4]  425     CALL SPACE 
      0026DD CD 0C F0         [ 4]  426     CALL BDIGS     
      0026E0                        427 EDOT2: 
      0026E0 CD 26 9C         [ 4]  428     CALL DDIG
      0026E3 CD 05 48         [ 4]  429     CALL RFROM 
      0026E6 CD 0A 79         [ 4]  430     CALL ONEP 
      0026E9 CD 05 67         [ 4]  431     CALL TOR 
      0026EC CD 05 9E         [ 4]  432     CALL DUPP
      0026EF                        433     _QBRAN EDOT3 
      0026EF CD 04 AC         [ 4]    1     CALL QBRAN
      0026F2 26 F9                    2     .word EDOT3
      0026F4                        434     _BRAN EDOT2  
      0026F4 CD 04 C3         [ 4]    1     CALL BRAN 
      0026F7 26 E0                    2     .word EDOT2 
      0026F9                        435 EDOT3:
      0026F9 CD 05 C8         [ 4]  436     CALL OVER 
      0026FC CD 06 5B         [ 4]  437     CALL BASE 
      0026FF CD 04 F7         [ 4]  438     CALL AT 
      002702 CD 08 59         [ 4]  439     CALL ULESS 
      002705                        440     _QBRAN EDOT2 
      002705 CD 04 AC         [ 4]    1     CALL QBRAN
      002708 26 E0                    2     .word EDOT2
      00270A                        441     _DOLIT '.'
      00270A CD 04 79         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00270D 00 2E                    2     .word '.' 
      00270F CD 0D 00         [ 4]  442     CALL HOLD  
      002712 CD 26 9C         [ 4]  443     CALL DDIG
      002715 CD 24 50         [ 4]  444     CALL FNE 
      002718                        445     _QBRAN EDOT4 
      002718 CD 04 AC         [ 4]    1     CALL QBRAN
      00271B 27 25                    2     .word EDOT4
      00271D                        446     _DOLIT '-'
      00271D CD 04 79         [ 4]    1     CALL DOLIT 
      002720 00 2D                    2     .word '-' 
      002722 CD 0D 00         [ 4]  447     CALL HOLD 
      002725                        448 EDOT4:       
      002725 CD 0D 55         [ 4]  449     CALL EDIGS 
      002728 CD 0F 2D         [ 4]  450     CALL TYPES
      00272B CD 05 48         [ 4]  451     CALL RFROM 
      00272E CD 07 48         [ 4]  452     CALL QDUP 
      002731                        453     _QBRAN EDOT5     
      002731 CD 04 AC         [ 4]    1     CALL QBRAN
      002734 27 41                    2     .word EDOT5
      002736                        454     _DOLIT 'E'
      002736 CD 04 79         [ 4]    1     CALL DOLIT 
      002739 00 45                    2     .word 'E' 
      00273B CD 04 38         [ 4]  455     CALL EMIT 
      00273E CD 0F E6         [ 4]  456     CALL DOT
      002741                        457 EDOT5: 
      002741 CD 05 48         [ 4]  458     CALL RFROM 
      002744 CD 06 5B         [ 4]  459     CALL BASE 
      002747 CD 04 E0         [ 4]  460     CALL STORE  
      00274A 81               [ 4]  461     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   4663 .endif 
                                   4664 
                                   4665 ;===============================================================
                                   4666 
                           0026B1  4667 LASTN =	LINK   ;last name defined
                                   4668 
                                   4669 ; application code begin here
      002780                       4670 	.bndry 128 ; align on flash block  
      002780                       4671 app_space: 
                                   4672 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000835 R   |   6 ABOR1      00136E R
  6 ABOR2      001385 R   |   6 ABORQ      001366 R   |   6 ABORT      001357 R
  6 ABRTQ      001642 R   |   6 ABSS       00082C R   |   6 ACCEP      0012ED R
  6 ACCP1      0012F6 R   |   6 ACCP2      00131C R   |   6 ACCP3      00131F R
  6 ACCP4      001321 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000738 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00162D R   |   6 AGAIN      001583 R   |   6 AHEAD      0015E0 R
  6 ALLOT      001496 R   |   6 ANDD       0005EA R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0004F7 R   |   6 ATEXE      000C09 R   |   6 ATEXP      00256E R
  6 AUTORUN    00012B R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003E2 R   |     B19200  =  000003     |   6 B19K2      0003BF R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       000390 R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       00039E R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003D0 R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003AE R   |   6 BACK1      001295 R   |   6 BASE       00065B R
    BASEE   =  00000A     |   6 BAUD       0003F2 R   |     BCNT    =  000001 
  6 BCOMP      0014D8 R   |   6 BDIGS      000CF0 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001565 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      00112D R   |   6 BKSP       001265 R   |     BKSPP   =  000008 
  6 BLANK      000AD8 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004C3 R   |     BTW     =  000001 
  6 BUF2ROW    0020AD R   |   6 BYE        0000B8 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0022F6 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002C 
  6 CAT        000515 R   |   6 CCOMMA     0014BA R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000A5D R   |   6 CELLP      000A4E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLS      000A6C R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000F1D R   |   6 CHAR2      000F20 R
  6 CHKIVEC    001F9B R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000C28 R   |   6 CMOV2      000C40 R
  6 CMOVE      000C20 R   |     CNTDWN  =  000034     |   6 CNTXT      0006DE R
  6 COLD       001A9C R   |   6 COLD1      001A9C R   |   6 COLON      0017DB R
  6 COMMA      0014A3 R   |   6 COMPI      0014E8 R   |     COMPO   =  000040 
  6 CONSTANT   001885 R   |   6 COUNT      000BBC R   |   6 CPP        0006FA R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000F4B R
  6 CREAT      001821 R   |     CRR     =  00000D     |   6 CSTOR      000504 R
  6 CTABLE     002317 R   |   6 CTAT       002338 R   |   6 CTINIT     002360 R
  6 DAT        000B9C R   |     DATSTK  =  001680     |   6 DCONST     0018C1 R
  6 DDIG       00269C R   |   6 DDROP      000779 R   |   6 DDUP       000784 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000DA0 R
  6 DEPTH      000B27 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000DE5 R   |   6 DI         0000C6 R   |   6 DIG        000D19 R
  6 DIGIT      000CB4 R   |   6 DIGS       000D2A R   |   6 DIGS1      000D2A R
  6 DIGS2      000D37 R   |   6 DIGTQ      000DB4 R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0007F3 R
  6 DNEG1      0024B3 R   |   6 DNEGA      0007D6 R   |   6 DNEGAT     002494 R
  6 DOCONST    0018AF R   |   6 DOLIT      000479 R   |   6 DONXT      00048D R
    DOORBELL=  000000     |   6 DOSTR      000F61 R   |   6 DOT        000FE6 R
  6 DOT1       000FFC R   |   6 DOTI1      001A1D R   |   6 DOTID      001A07 R
  6 DOTO1      0013FA R   |   6 DOTOK      0013E0 R   |   6 DOTPR      00110F R
  6 DOTQ       00165C R   |   6 DOTQP      000F8A R   |   6 DOTR       000F98 R
  6 DOTS       0019A9 R   |   6 DOTS1      0019B4 R   |   6 DOTS2      0019BD R
  6 DOVAR      00064B R   |   6 DO_DCONS   0018F0 R   |   6 DROP       000594 R
  6 DSLMOD     00265B R   |   6 DSLMOD3    002676 R   |   6 DSLMOD4    002682 R
  6 DSLMODa    00267D R   |   6 DSLMODb    002688 R   |   6 DSTOR      000B76 R
  6 DUMP       00195F R   |   6 DUMP1      001976 R   |   6 DUMP3      001998 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]

Symbol Table

  6 DUMPP      00192E R   |   6 DUPP       00059E R   |   6 DZEQUAL    00247A R
  6 EDIGS      000D55 R   |   6 EDOT       0026B4 R   |   6 EDOT1      0026DA R
  6 EDOT2      0026E0 R   |   6 EDOT3      0026F9 R   |   6 EDOT4      002725 R
  6 EDOT5      002741 R   |   6 EECSTORE   001D4C R   |   6 EEPCP      001B72 R
  6 EEPLAST    001B45 R   |   6 EEPROM     001B2D R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001B5C R   |   6 EEPVP      001B88 R   |   6 EESTORE    001D98 R
  6 EE_CCOMM   002062 R   |   6 EE_COMMA   002041 R   |   6 EE_CREAD   001CDD R
  6 EE_READ    001CBB R   |   6 EI         0000BF R   |   6 ELSEE      0015BB R
  6 EMIT       000438 R   |   6 ENEPER     002282 R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        000850 R   |   6 EQUAL      00083A R
  6 ERASE      000C82 R   |     ERR     =  00001B     |   6 EVAL       001423 R
  6 EVAL1      001423 R   |   6 EVAL2      00143F R   |   6 EXE1       000C17 R
  6 EXECU      0004D3 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000CDC R   |   6 FADDR      00212F R
  6 FARAT      001BF3 R   |   6 FARCAT     001BFF R   |   6 FBASE      0023F2 R
  6 FC_XOFF    000465 R   |   6 FC_XON     00044F R   |   6 FER        00242E R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000C4F R
  6 FILL1      000C6C R   |   6 FILL2      000C75 R   |   6 FIND       0011C1 R
  6 FIND1      0011DF R   |   6 FIND2      00120D R   |   6 FIND3      001219 R
  6 FIND4      00122D R   |   6 FIND5      00123A R   |   6 FIND6      00121E R
  6 FINIT      002418 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      00213A R
  6 FMOVE2     00216B R   |   6 FNE        002450 R   |   6 FOR        001538 R
  6 FORGET     00015C R   |   6 FORGET1    00018B R   |   6 FORGET2    000211 R
  6 FORGET4    00021A R   |   6 FORGET6    0001D3 R   |   6 FOV        002465 R
  6 FPSTOR     001B0E R   |   6 FPSW       0023E1 R   |     FPTR    =  000036 
  6 FREEVAR    000227 R   |   6 FREEVAR4   00025D R   |   6 FRESET     002404 R
  6 FZE        00243B R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000BD3 R
  6 HEX        000D8B R   |   6 HI         001A59 R   |   6 HLD        0006CB R
  6 HOLD       000D00 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]

Symbol Table

    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0017EC R
  6 IFETCH     001556 R   |   6 IFF        001593 R   |   6 IFMOVE     002213 R
    IMEDD   =  000080     |   6 IMMED      0017FE R   |   6 INCH       00042C R
  6 INC_FPTR   001C88 R   |   6 INITOFS    0017B4 R   |   6 INN        000679 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      0013C2 R   |   6 INTER      001398 R
  6 INTQ       0023BC R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0007B3 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      001749 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       00179E R   |   6 KEY        000ECB R   |   6 KTAP       0012B2 R
  6 KTAP1      0012D5 R   |   6 KTAP2      0012D8 R   |   6 LAST       00070A R
  6 LASTN   =  0026B1 R   |   6 LBRAC      0013CF R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000877 R
    LF      =  00000A     |   6 LINK    =  0026B1 R   |   6 LITER      00150A R
  6 LN2S       0022DE R   |   6 LOCK       001C74 R   |   6 LOG2S      0022C8 R
  6 LSHIFT     000A97 R   |   6 LSHIFT1    000AA0 R   |   6 LSHIFT4    000AA8 R
  6 LT1        00088D R   |     MASKK   =  001F7F     |   6 MAX        000897 R
  6 MAX1       0008AA R   |   6 MIN        0008B4 R   |   6 MIN1       0008C7 R
  6 MMOD1      000950 R   |   6 MMOD2      000964 R   |   6 MMOD3      00097B R
  6 MMSM1      00090B R   |   6 MMSM3      00090F R   |   6 MMSM4      00091B R
  6 MMSMa      000916 R   |   6 MMSMb      000921 R   |   6 MODD       000995 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

  6 MONE       000AFE R   |     MS      =  000032     |   6 MSEC       0002D2 R
  6 MSMOD      000933 R   |   6 MSTA1      000A26 R   |   6 MSTAR      000A03 R
    NAFR    =  004804     |   6 NAMEQ      00125A R   |   6 NAMET      00116B R
    NCLKOPT =  004808     |   6 NEGAT      0007C4 R   |   6 NEX1       00049A R
  6 NEXT       001547 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NROT       002639 R
  6 NTIB       000689 R   |     NUBC    =  004802     |     NUCLEO  =  000001 
  6 NUFQ       000EE1 R   |   6 NUFQ1      000EFA R   |   6 NUMBQ      000DF8 R
  6 NUMQ1      000E2C R   |   6 NUMQ2      000E5D R   |   6 NUMQ3      000E9F R
  6 NUMQ4      000EA4 R   |   6 NUMQ5      000EB3 R   |   6 NUMQ6      000EB6 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     00072F R   |     OFS     =  000005     |   6 ONE        000AF0 R
  6 ONEM       000A86 R   |   6 ONEP       000A79 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00004B R   |   6 ORR        0005FE R
  6 OUTPUT     00043D R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       0005C8 R
  6 OVERT      001717 R   |     PA      =  000000     |   6 PACKS      000C93 R
  6 PAD        000BE4 R   |   6 PAREN      00111E R   |   6 PARS       001017 R
  6 PARS1      001042 R   |   6 PARS2      00106D R   |   6 PARS3      001070 R
  6 PARS4      001079 R   |   6 PARS5      00109C R   |   6 PARS6      0010B1 R
  6 PARS7      0010C0 R   |   6 PARS8      0010CF R   |   6 PARSE      0010E0 R
  6 PAUSE      0002E2 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001941 R   |   6 PDUM2      001952 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   6 PICK       000B3E R
  6 PII        002241 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000799 R   |   6 PNAM1      0016CC R
  6 POSMANT    0025A8 R   |   6 PRESE      00144E R   |     PROD1   =  000026 
    PROD2   =  000028     |     PROD3   =  00002A     |   6 PROTECTE   000203 R
  6 PSTOR      000B55 R   |     PTR16   =  000037     |     PTR8    =  000038 
  6 PTRPLUS    001CA0 R   |   6 QBRAN      0004AC R   |   6 QDUP       000748 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

  6 QDUP1      000752 R   |   6 QKEY       00041A R   |   6 QSTAC      001406 R
  6 QUERY      001332 R   |   6 QUEST      001009 R   |   6 QUIT       00146B R
  6 QUIT1      001473 R   |   6 QUIT2      001476 R   |   6 RAM2EE     0020DB R
    RAMBASE =  000000     |   6 RAMLAST    00071D R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     000280 R
  6 RAT        00055B R   |   6 RBRAC      00178B R   |   6 REPEA      001610 R
  6 RFREE      0020C2 R   |   6 RFROM      000548 R   |     ROP     =  004800 
  6 ROT        000759 R   |   6 ROW2BUF    002084 R   |     ROWBUFF =  001680 
    RP0     =  000030     |   6 RPAT       000525 R   |     RPP     =  0017FF 
  6 RPSTO      000532 R   |   6 RSHIFT     000AB3 R   |   6 RSHIFT1    000ABC R
  6 RSHIFT4    000AC4 R   |     RST_SR  =  0050B3     |   6 RT12_2     0022B1 R
  6 SAME1      001189 R   |   6 SAME2      0011B2 R   |   6 SAMEQ      001181 R
  6 SCOM1      001701 R   |   6 SCOM2      001704 R   |   6 SCOMP      0016E3 R
  6 SEED       000267 R   |     SEEDX   =  00003A     |     SEEDY   =  00003C 
  6 SEMIS      001727 R   |   6 SETISP     0000D2 R   |   6 SET_RAML   00186E R
  6 SFN        002515 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SFV        00254D R   |   6 SFZ        0024DE R   |   6 SIGN       000D3F R
  6 SIGN1      000D4F R   |   6 SLASH      00099F R   |   6 SLMOD      000983 R
  6 SNAME      001696 R   |     SP0     =  00002E     |   6 SPACE      000F03 R
  6 SPACS      000F12 R   |   6 SPAT       00057E R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      00058B R   |   6 SQRT10     00229A R   |   6 SQRT2      002258 R
  6 SQRT3      00226F R   |   6 SSMOD      000A2F R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       0009F8 R   |   6 STASL      000A40 R
  6 STEXP      0025B8 R   |   6 STEXP1     0025CE R   |   6 STEXP2     00260A R
  6 STEXP3     00261D R   |   6 STOD       0007FB R   |   6 STORE      0004E0 R
  6 STR        000D6D R   |   6 STRCQ      001518 R   |   6 STRQ       00164F R
  6 STRQP      000F80 R   |   6 SUBB       000812 R   |   6 SWAPP      0005AE R
    SWIM_CSR=  007F80     |   6 TAP        00129C R   |   6 TBOOT      001A90 R
  6 TBUF       000699 R   |     TBUFFBAS=  001680     |   6 TCHAR      000B0F R
  6 TEMP       00066A R   |   6 TEVAL      0006BC R   |   6 TFLASH     0006AB R
  6 THENN      0015A8 R   |   6 TIB        000BF5 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       001482 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   000312 R   |   6 TIMER      0002FC R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      0019D7 R   |   6 TNAM3      0019F5 R
  6 TNAM4      0019FB R   |   6 TNAME      0019D4 R   |   6 TOFLASH    000337 R
  6 TOKEN      00115D R   |   6 TOR        000567 R   |   6 TORAM      000377 R
    TRUEE   =  00FFFF     |   6 TWOSL      000ACB R   |   6 TYPE1      000F32 R
  6 TYPE2      000F3E R   |   6 TYPES      000F2D R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  005232     |     UART_BRR=  005233     |     UART_CR1=  005234 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  005235 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005231     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  005230     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000018     |     UCP     =  00001C     |     UCTIB   =  000010 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000FD3 R   |   6 UDOTR      000FB3 R
  6 UEND       000049 R   |     UFBASE  =  000008     |     UFPSW   =  00000A 
  6 UGREAT     0024BC R   |   6 UGREAT1    0024D4 R   |     UHLD    =  000016 
    UINN    =  00000E     |     UINTER  =  000014     |     ULAST   =  00001E 
  6 ULES1      00086F R   |   6 ULESS      000859 R   |   6 UMMOD      0008EF R
  6 UMSTA      0009AE R   |   6 UNIQ1      00168D R   |   6 UNIQU      00166E R
  6 UNLKEE     001C0E R   |   6 UNLKFL     001C2D R   |   6 UNLOCK     001C4C R
  6 UNTIL      001570 R   |     UOFFSET =  000020     |   6 UPDATCP    001BCB R
  6 UPDATLAS   001BA2 R   |   6 UPDATPTR   0021CE R   |   6 UPDATRUN   001BBA R
  6 UPDATVP    001BE2 R   |   6 UPL1       00063F R   |   6 UPLUS      000628 R
    UPP     =  000006     |     URLAST  =  000024     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  000022 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    UTIB    =  000012     |     UTMP    =  00000C     |   6 UTYP1      001911 R
  6 UTYP2      001920 R   |   6 UTYPE      00190C R   |     UVP     =  00001A 
  6 UZERO      00002B R   |   6 VARIA      00183B R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000003     |   6 VPP        0006EC R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
    WANT_FLO=  000001     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      0015F6 R
  6 WITHI      0008D4 R   |   6 WORDD      001149 R   |   6 WORDS      001A31 R
  6 WORS1      001A37 R   |   6 WORS2      001A53 R   |   6 WR_BYTE    001CF7 R
  6 WR_WORD    001D1C R   |   6 WTABLE     002326 R   |   6 WTAT       00234A R
  6 WTINIT     00238F R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       000613 R   |     XTEMP   =  000026     |     YTEMP   =  000028 
  6 ZEQ1       002486 R   |   6 ZERO       000AE5 R   |   6 ZL1        0005E0 R
  6 ZLESS      0005D7 R   |   6 app_spac   002780 R   |   6 baudrate   00037D R
  6 block_er   001DE2 R   |   6 clear_ra   000019 R   |   6 clock_in   000066 R
  6 copy_buf   001E42 R   |   6 copy_buf   001E61 R   |   6 copy_pro   001E61 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001E04 R   |   6 fmove_do   0021B7 R
  6 main       000016 R   |   6 next_row   002174 R   |   6 no_move    0021BE R
  6 pristine   001EE2 R   |   6 proceed_   001E07 R   |   6 reboot     000329 R
  6 reset_ve   001F49 R   |   6 row_eras   001DC2 R   |   6 row_eras   001E1B R
  6 row_eras   001E42 R   |   6 set_opti   001EB6 R   |   6 set_vect   001FEA R
  6 uart_ini   000078 R   |   6 write_ro   001E86 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2780   flags    0

